<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2018 paper: Tracking Mirai variants</title>
<meta name="description" content="Mirai, the infamous DDoS botnet family known for its great destructive power, was made open source soon after being found by MalwareMustDie in August 2016, which led to a proliferation of Mirai variant botnets. This paper presents a set of Mirai variant classification and tracking schemes developed during the process of analysing over 32,000 Mirai samples. " />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 6275;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-vb2018-paper-tracking-mirai-variants"></a>VB2018 paper: Tracking Mirai variants</h1>
<h3><a class="chapter" name="h3-ya-liu-amp-hui-wang"></a>Ya Liu &amp; Hui Wang</h3>
<p>Qihoo 360 Technology, China</p>
<p><em>Copyright © 2018 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-13517" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-13517" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-1-introduction">1. Introduction</a><br /> <a class="toc-level2" href="#h2-2-data-extraction">2. Data extraction</a><br /> <a class="toc-level3" href="#h3-21-configurations">2.1 Configurations</a><br /> <a class="toc-level4" href="#h4-211-table-init-analyser">2.1.1 table_init() analyser</a><br /> <a class="toc-level4" href="#h4-212-resolve-cnc-addr-analyser">2.1.2 resolve_cnc_addr() analyser</a><br /> <a class="toc-level3" href="#h3-22-supported-attack-methods">2.2 Supported attack methods</a><br /> <a class="toc-level4" href="#h4-221-fingerprinting-attack-functions">2.2.1 Fingerprinting attack functions</a><br /> <a class="toc-level3" href="#h3-23-dictionary-usernamespasswords">2.3 Dictionary of usernames/passwords</a><br /> <a class="toc-level2" href="#h2-3-variant-classification-and-tracking">3. Variant classification and tracking</a><br /> <a class="toc-level3" href="#h3-31-configuration-based-schemes">3.1 Configuration-based schemes</a><br /> <a class="toc-level4" href="#h4-311-clustering-based-configuration-count-and-size">3.1.1 Clustering based on configuration count and size</a><br /> <a class="toc-level4" href="#h4-312-clustering-based-encryption-key">3.1.2 Clustering based on encryption key</a><br /> <a class="toc-level3" href="#h3-32-attack-method-based-schemes">3.2 Attack-method-based schemes</a><br /> <a class="toc-level4" href="#h4-321-combination-supported-attack-methods">3.2.1 Combination of supported attack methods</a><br /> <a class="toc-level2" href="#h2-4-typical-variants-analysis">4. Typical variants analysis</a><br /> <a class="toc-level3" href="#h3-41-masuta">4.1 MASUTA</a><br /> <a class="toc-level3" href="#h3-42-owari">4.2 OWARI</a><br /> <a class="toc-level3" href="#h3-43-wicked">4.3 WICKED</a><br /> <a class="toc-level2" href="#h2-5-conclusion">5. Conclusion</a><br /> <a class="toc-level2" href="#h2-references">References</a><br /> <a class="toc-level2" href="#h2-appendix-sample-sha256-hashes">Appendix A: Sample SHA256 hashes</a><br /> <a class="toc-level2" href="#h2-appendix-b-signature-attack-methods">Appendix B: Signature of attack methods</a><br /> <a class="toc-level2" href="#h2-appendix-c-all-recognized-combinations-attack-method-code-attack-type">Appendix C: All recognized combinations of {attack_method_code, attack_type}</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>Mirai, the infamous DDoS botnet family known for its great destructive power, was made open source soon after being found by <em>MalwareMustDie</em> in August 2016, which led to a proliferation of Mirai variant botnets. Since then, the authors have continuously updated their code (e.g. adding new types of exploits and attack methods), which has added to the difficulty of detecting and mitigating Mirai-related threats. To solve that problem we present a set of Mirai variant classification and tracking schemes developed during the process of analysing over 32,000 Mirai samples. In this paper we will introduce:</p>
<ol>
<li>How to extract data including configurations, supported attack methods, and dictionaries of usernames and passwords from samples.</li>
<li>How to use the extracted data to classify and track Mirai variants.</li>
</ol>
<p>To demonstrate the effectiveness of our solutions, popular Mirai branches are investigated under the proposed schemes.</p>
<p> </p>
<h2><a class="chapter" name="h2-1-introduction"></a>1. Introduction</h2>
<p>Mirai became well known in Autumn 2016 for overwhelming several high-profile targets including <em>Krebs on Security</em>, <em>OVH</em> and <em>Dyn</em> through DDoS attacks. Mirai overtook previous <em>Linux</em> DDoS botnet families (e.g. Gafgyt, Tsunami) in its capacity to infect hundreds of thousands of IoT devices in a short period of time, and to provide versatile attack method options. The Mirai source code was released soon after having been found by <em>MalwareMustDie</em>. Inspired by the success of Mirai and the released source code, other bot masters/underground groups soon began to establish their own versions of Mirai botnets, which has caused a proliferation of IoT botnets over the past 1.5 years. While some of the new botnets only borrowed ideas or code from Mirai (e.g. Hajime [<a href="#ref1">1</a>], Reaper [<a href="#ref2">2</a>]), most of them are exact Mirai descendants [<a href="#ref3">3</a>, <a href="#ref4">4</a>, <a href="#ref5">5</a>]. In the post-Mirai era, it should be routine work for security researchers to fight Mirai-like threats.</p>
<p>Currently, it is usual for Mirai variants to be classified with their branch names, which come from the command line ‘/bin/busybox &lt;<em>branch</em> &gt;’ found in the Mirai sample. While the default name is ‘MIRAI’, in later variants the ‘branch’ is usually replaced with an author-chosen name (e.g. MASUTA, SATORI, SORA, as shown in Table 1). However, we feel that such a classification scheme is too coarse-grained, and it cannot reveal the variances across variants.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Branch name</strong></td>
<td><strong>Sample count</strong></td>
</tr>
<tr>
<td>JOSHO</td>
<td>1,444</td>
</tr>
<tr>
<td>OWARI</td>
<td>702</td>
</tr>
<tr>
<td>MASUTA</td>
<td>438</td>
</tr>
<tr>
<td>Cult</td>
<td>434</td>
</tr>
<tr>
<td>SORA</td>
<td>400</td>
</tr>
<tr>
<td>daddyl33t</td>
<td>343</td>
</tr>
<tr>
<td>MIORI</td>
<td>244</td>
</tr>
<tr>
<td>WICKED</td>
<td>128</td>
</tr>
<tr>
<td>dwickedgod</td>
<td>125</td>
</tr>
<tr>
<td>EXTENDO</td>
<td>100</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 1: Top 10 new Mirai branches in the past 1.5 years based on their sample count.</p>
<p>Our Mirai tracking work started soon after the malware was first blogged about by <em>MalwareMustDie</em> in August 2016 [<a href="#ref6">6</a>]. Between then and May 2018, over 32,000 Mirai samples were collected, from which dozens of variants and 1,000+ C&amp;Cs have been detected. According to our experience, automatic schemes to classify and track the proliferated variants must be able to do the following:</p>
<ol>
<li>Extract the C&amp;C information.</li>
<li>Figure out the supported attack methods, since Mirai is mainly DDoS attack purposed.</li>
<li>Provide clues for correlating variants and C&amp;Cs, and if possible, help to investigate the actors behind the attacks.</li>
</ol>
<p>In this paper, we will introduce our Mirai variant classification and tracking schemes which mainly make use of the data relating to configurations, supported attack methods and credential dictionaries. The remainder of this paper is organized as follows: in<a href="#h2-2-data-extraction"> Section 2</a>, we introduce how to extract data including configurations, supported attack methods and attack method fingerprints automatically from samples; in <a href="#h2-3-variant-classification-and-tracking">Section 3</a>, we introduce a set of schemes including variant clustering and classification using the extracted data; in <a href="#h2-4-typical-variants-analysis">Section 4</a> we use our proposed schemes to investigate some typical Mirai branches.</p>
<p>To summarize, the contributions of this paper are as follows:</p>
<ul>
<li>We demonstrate solutions for automatically extracting configurations, supported attack methods and credential dictionaries from Mirai samples.</li>
<li>We propose a fingerprint technique that can be used to recognize Mirai attack methods with the information extracted from binary code without the need for reverse engineering work.</li>
<li>We summarize the Mirai variants and introduce a set of classification schemes based on the extracted data.</li>
<li>We investigate popular Mirai branches with our proposed schemes.</li>
</ul>
<p>Since it’s common for Mirai botnet authors to compile the same code into binaries for different processors (e.g. x86, x64, ARM, MIPS, SPARC, PowerPC), for reasons of simplicity and efficiency, we chose to consider only the subset of samples for x86 and ARM in this paper. We believe these two kinds of samples are sufficient to study the Mirai variants due to the redundancy introduced by the ‘one-source-to-multiple-processors’ style of compilation. On the other hand, this paper mainly focuses on Mirai variants with DDoS attack methods, and pays little attention to non-DDoS ones (e.g. Sartori.miner).</p>
<p>The SHA256 hashes for the samples discussed in this paper are given in <a href="#h2-appendix-sample-sha256-hashes">Appendix A</a>.</p>
<p> </p>
<h2><a class="chapter" name="h2-2-data-extraction"></a>2. Data extraction</h2>
<p>It’s thought that malware variant classification and tracking is a classical, yet difficult problem. There is no industrial standard on that. The de facto method is to make use of sample information including special code snippets, binary byte sequences or strings, calling function graphs, and size, etc. In this paper, we simplify the problem by limiting the used data to the following four kinds:</p>
<ol>
<li>Plaintext configurations, together with the encryption algorithm and key.</li>
<li>The C&amp;C domain/IP and port. While originally stored in the configuration database, this information is now usually hard coded in a function named resolve_cnc_addr().</li>
<li>The supported attack methods and their corresponding command codes.</li>
<li>The dictionary of username/password pairs used in the scan module, if it exists.</li>
</ol>
<p>All the data is extracted in an automated manner. Since the data is stored in a distributed manner in the samples (rather than all being in the same place), it’s difficult to extract all the required data with a single solution. Meanwhile, due to the ‘one-source-to-multiple-processors’ code compilation, solutions must be able to deal with different processor architectures. Our final solution is composed of four separate analyser programs, each of which includes a static and a dynamic analysis part. The static analysis is done with IDAPython to make use of <em>IDA</em>’s multiple processor supporting feature, while the dynamic analysis is based on a proprietary lightweight emulation framework which is designed to emulate binary code snippets of interest (e.g. an instruction block). The open-source emulator <em>Unicorn</em> [<a href="#ref7">7</a>] is used as the core engine to support common processor architectures including x86/x64/ARM/MIPS/PowerPC/SPARC. Both ELF and PE formats are supported.</p>
<p> </p>
<h3><a class="chapter" name="h3-21-configurations"></a>2.1 Configurations</h3>
<p>In Mirai, a self-defined database is designed to store most of the running parameters which we call configurations. The database has the following characteristics:</p>
<ol>
<li>Each item is uniquely indexed with a number which is usually less than 256.</li>
<li>Configurations are encrypted.</li>
<li>Configuration is referenced in a pattern of ‘decrypt-&gt;retrieve-&gt;re-encrypt’.</li>
</ol>
<p>A completely extracted configuration database can be seen in Figure 1.<a class=" anchor" name="figure1"></a></p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/e569f8a0c32cca0507e46d58e6d76271_f3237.png" alt="Figure_1_A.successfully.extracted.configuration.(md5=0ae272306d313c6abf1433b85e0a2352).png" width="840" height="448" /><span class="centered-caption">Figure 1: A successfully extracted configuration database (md5 = 0ae272306d313c6abf1433b85e0a2352).</span></p>
<p>The first line holds the summary information, while the left lines correspond to individual configuration items. In this example the C&amp;C port has an index number of 1, as indicated by ‘idx_port=1’ in the first line, which points to the item ‘[0x01]: “\x059”, size=2’. The C&amp;C port of 0x539 (a.k.a. 1337) is calculated from the item content of ‘\x059’.</p>
<p>Basically, configuration extraction can be divided into two steps: (1) extracting the indexes and cipher texts of all items; (2) deciphering them with a self-implemented decryption program. Our analysis of the source shows that the database is initialized in a function called table_init(), as shown in Figure 2.<a class=" anchor" name="figure2"></a></p>
<p><a class="zoom-img" title="Figure 2: The table_init() function in source." href="/files/9015/4410/9945/Figure_2_table_init_in_the_released_source.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/1c7a7433d546f4a6b38361d8ff2cf75c_f3238.png" alt="Figure_2_table_init_in_the_released_source.png" width="840" height="221" /></a><span class="centered-caption">Figure 2: The table_init() function in source.</span></p>
<p>In table_init(), it’s the function named ‘add_entry()’ that is called repeatedly to install the individual items. In each call to add_entry(), three parameters are passed which individually represent: item index, ciphertext address, and size. A new memory block will be allocated inside add_entry() to store the cipher text, then it will be saved to a slot allocated from a global structure named ‘table’. The slot position is determined with the following formula:</p>
<pre>item_addr=table_addr +item_id*tbl_item_size</pre>
<p>Under 32-bit CPU architecture, the tbl_item_size always holds a value of 8, while its value is 16 for 64-bit CPU architectures.</p>
<p>In the original versions, both the C&amp;C domain/IP and port are stored in the configuration database, which makes it possible to recover all necessary information simply by analysing the table_init() function. However, in later variants, C&amp;C</p>
<p>domains/IPs are usually hard coded in a function called</p>
<p>resolve_cnc_addr(), as shown in<a href="#figure1"> Figure 1</a>. Furthermore, due to compiler inline optimization and the fact that the first item is not always indexed from a fixed number (e.g. 0), configuration indexing information is missing in table_init().</p>
<p>Fortunately, since both C&amp;C and port are referenced in resolve_cnc_addr(), the missing indexing information, together with the hard-coded C&amp;C, can be calculated heuristically with the analysis of resolve_cnc_addr(). Therefore our configuration extraction solution comes as two analyser programs: one for table_init() and the other for resolve_cnc_addr().</p>
<p> </p>
<h4><a class="chapter" name="h4-211-table-init-analyser"></a>2.1.1 table_init() analyser</h4>
<p>The table_init() function is called after the bot starts running. As shown in <a href="#figure2">Figure 2</a>, the item installation work is done by repeatedly calling add_entry(). In the case of inline optimization, calls to add_entry() are optimized into those of malloc()/util_memcpy().</p>
<p>The ‘decrypt-&gt;retrieve-&gt;re-encrypt’ style of item reference is done separately with the table_unlock_val()/table_retrieve_val()/table_lock_val() functions, with decryption/encryption implemented in table_unlock_val()/table_lock_val(). The encryption algorithm is summarized as follows:</p>
<ol>
<li>Decryption and encryption share the same single-byte XOR’ing algorithm.</li>
<li>Key size is 4. The target byte is XOR’ed with each key byte in turn to get the final ciphertext/plaintext byte.</li>
</ol>
<p>Given the associative law of XOR operation, the four-byte key can equivalently be mapped to a one-byte key, which greatly reduces the key space from 2^32 to 2^8, thus making it feasible to search the key with brute force enumeration.</p>
<p>Candidate table_init() functions are found by the static analysis script which goes through all binary functions in samples and picks out those with the following characteristics:</p>
<ul>
<li>Repeatedly calling add_entry() or malloc()/util_memcpy() in the case of inline optimization.</li>
<li>Composed of one very large instruction block because no branches are introduced by any switch/loop instructions.</li>
<li>Referencing dozens of global variables which point to ciphertext memory.</li>
</ul>
<p>Dynamic analysis of the candidate table_init() functions, together with false-positive removals, is done in an emulation program based on our lightweight emulation framework. The cases of non-inline and inline optimization are considered separately. The key points of emulating a non-inline version of table_init() are as follows:</p>
<ul>
<li>NOP’ing all the CALL instructions and marking them as breakpoints.</li>
<li>Emulating in single-step mode.</li>
<li>In the breakpoint handler, saving arguments 1–3 separately as id, ciphertext address, and size if argument 2 points to a valid data area.</li>
</ul>
<p>When dynamically analysing the inline optimized code, a trick is used which is inspired by the fact that the return value of malloc() would be used as the first argument of the next call (a.k.a. util_memcpy()). Every time a CALL breakpoint is handled, the return value (e.g. EAX in the case of <em>Intel</em> x86 CPU) will be set to a magic value called MAGIC-RET. By doing that, a call with the first argument equal to MAGIC-RET would be indicative of util_memcpy, thus triggering the saving of arguments 2 and 3. Similarly, the operation of saving an item to the table can also be traced by checking whether the currently inspected MEM-WRITE operation has a source operand of MAGIC-RET. If it does, the slot address will be saved for late index calculation with the following formula:</p>
<pre>item_id=(item_addr-table_addr)/tbl_item_size</pre>
<p>The table_addr is inferred heuristically from the analysis of resolve_cnc_addr() introduced in <a href="#h4-212-resolve-cnc-addr-analyser">Section 2.1.2</a>.</p>
<p>The key points of emulating an inline optimized table_init() are as follows:</p>
<ol>
<li>NOP’ing all the CALL instructions and marking them as breakpoints.</li>
<li>Hooking all MEM-WRITE instructions.</li>
<li>Emulating in single-step mode.</li>
<li>In the CALL breakpoint handler, saving arguments 2 and 3 as ciphertext address and size if the first argument is MAGIC-RET, and setting the return value as MAGIC‑RET.</li>
<li>In the MEM-WRITE handler, saving the destination memory address as item_addr if the source operand is MAGIC-RET.</li>
</ol>
<p>After emulation finishes, the ciphertext configurations are read for decryption. Every key in 2^8 is tested until any meaningful plain configurations are found. The decrypted configurations will be cached for later synthesizing after resolve_cnc_addr() is analysed.</p>
<p> </p>
<h4><a class="chapter" name="h4-212-resolve-cnc-addr-analyser"></a>2.1.2 resolve_cnc_addr() analyser</h4>
<p>The resolve_cnc_addr() function, called in a SIGTRAP signal handler installed in main(), was originally responsible for retrieving the C&amp;C and port from the configuration database with their index numbers. However, more and more Mirai variants have begun to hard code their C&amp;Cs in resolve_cnc_addr(), as illustrated in Figure 3, which mandates the analysis of resolve_cnc_addr() to retrieve the right C&amp;C value and port index number. The result will be used for inference of configuration indexing, as mentioned above.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/6515/4411/1269/fig3.jpg" alt="fig3.jpg" width="435" height="543" /><span class="centered-caption">Figure 3: C&amp;C hard coded in resolve_cnc_addr() (md5 = 333d98e27cc885624f073e59fc40dfed).</span></p>
<p>The resolve_cnc_addr() function has the following characteristics:</p>
<ol>
<li>It writes at least two global variables (srv_addr.sin_addr and srv_addr.sin_port).</li>
<li>It calls at least three different functions.</li>
</ol>
<p>Candidate resolve_cnc_addr() functions are found with an IDAPython script in the following ways:</p>
<ol>
<li>Heuristically finding the main() function.</li>
<li>Finding all callback functions in main() as candidate signal handlers.</li>
<li>Finding callback functions in each candidate signal handler found in (2) as candidate resolve_cnc_addr() functions.</li>
<li>Filtering out those that don’t have reserve_cnc_addr() characteristics.</li>
<li>Extracting the hard-coded C&amp;C if it exists.</li>
</ol>
<p>The key steps of emulating resolve_cnc_addr() are as follows:</p>
<ol>
<li>NOP’ing all the CALL instructions and marking them as breakpoints.</li>
<li>Hooking all MEM-WRITE instructions.</li>
<li>Emulating in single-step mode.</li>
<li>In the CALL breakpoint handler, saving a pair of {arg1, ‘CALL’} to an operation list OPS, and setting the return value (e.g. EAX in the case of <em>Intel</em> x86) as a magic value MAGIC-RET.</li>
<li>In the MEM-WRITE handler, saving a pair of {write-bytes, ‘WRITE’} to OPS.</li>
</ol>
<p>After emulation stops, the C&amp;C (if not hard coded) and port index numbers are calculated in the following manner:</p>
<ol>
<li>The OPS list is iterated and the unique arg1 values saved in {arg1, ‘CALL’} pairs are counted until a {write-byes, ‘WRITE’} pair is encountered.</li>
<li>The most frequent arg1 value can be thought of as an index number. If write-bytes in {write-byes, ‘WRITE’} is equal to 4, the obtained number will be used as the C&amp;C index; if write-bytes is equal to 2, it is used as the C&amp;C port index.</li>
<li>The counting results are cleared for the next round of counting.</li>
<li>Steps 1 to 3 are repeated until OPS is iterated over.</li>
</ol>
<p>The indexes that are found are used for C&amp;C retrieval and for inferring the indexing number in the case of inline optimized table_init(). The heuristic inference is based on the facts that: (1) although not fixed, the smallest index number must be greater than 0 while usually less than 5; (2) the C&amp;C port item always has a size of 2. The detailed process is illustrated as follows:</p>
<ol>
<li>Getting the first item’s address by sorting the values of item_addr obtained in <a href="#h4-211-table-init-analyser">Section 2.1.1</a>, and taking it as first_item_addr.</li>
<li>Assuming the value of first_item_index is 1.</li>
<li>Calculating the table address with the formula: table_addr (=first_item_addr- first_item_index*item_size).</li>
<li>Calculating all other item indexes based on the table_addr obtained in step 3 and the item_addr obtained in <a href="#h4-211-table-init-analyser">Section 2.1.1</a>.</li>
<li>Retrieving the C&amp;C and port with indexes obtained from resolve_cnc_addr(). If the retrieved values make sense, the process stops here.</li>
<li>Increasing the first_item_index by 1, and going back to step 3 if the first_item_index is less than 5. Otherwise the process stops.</li>
</ol>
<p>An example result has been shown in <a href="#figure1">Figure 1</a>, where the C&amp;C and all index numbers have been inferred with the demonstrated algorithm.</p>
<p> </p>
<h3><a class="chapter" name="h3-22-supported-attack-methods"></a>2.2 Supported attack methods</h3>
<p>It’s known that Mirai is designed for DDoS attacking purposes. Ten supported attack methods are found in the released Mirai source [<a href="#ref8">8</a>]. Accordingly, ten command codes (e.g. ATK_VEC_xx in Figure 4) are defined in the C&amp;C protocol to deliver attack method types in commands from the controller to bots.<a class=" anchor" name="figure4"></a></p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/0504beb0a1f694fff3200743c62eeeb9_f3242.png" alt="Figure_4_10.attack.methods.found.in.the.released.source.png" width="800" height="334" /><span class="centered-caption">Figure 4: Ten attack methods found in the released source.</span></p>
<p>Our analysis shows that the attack methods usually differ in variants in terms of method count, command code numbering, new types of methods, and method implementation. From the point of view of supported attack methods, Mirai variants could be clustered with combinations of ‘code‑attack_type<em>n</em>’, where <em>n</em> is the version number of a specific attack method. For example, the original version of Mirai could be represented as:</p>
<pre>{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp, 10-atk_http1}</pre>
<p>Meanwhile, the version of the sample illustrated in <a href="#figure1">Figure 1</a> (md5=0ae272306d313c6abf1433b85e0a2352) has the following representation:</p>
<pre>{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 8-atk_std_or_udp, 9-atk_std_or_udp, 10-atk_tcp_stomp_or_xmas1}</pre>
<p>The obvious difference is that command code 10 has different semantics in the two scenarios.</p>
<p>To achieve the combination of ‘code-attack_type<em>n</em>’ from a binary sample, we must: (1) extract the attack method codes and their function addresses from the sample; (2) figure out what attack types each function is used for. Accordingly, two analyser programs are designed: one program is to extract {code, attack_function} sequences, while the other is to figure out the extracted attack semantics, as will be introduced in <a href="#h4-221-fingerprinting-attack-functions">Section 2.2.1</a>.</p>
<p>As shown in <a href="#figure4">Figure 4</a>, Mirai attack methods, together with their command codes, are dynamically installed in a function called ‘attack_init()’. It’s the function named add_attack() that is repeatedly called in attack_init() to save the pairs of {code, attack_function} to a global structure named ‘methods’. Inside the add_attack() function, calloc() is called to allocate memory for the item of {code, attack_function}, and realloc() is called to enlarge the methods by 1 to save the newly allocated item, as shown in Figure 5.</p>
<p><img class="framed" src="/files/cache/288db836362ee1dc591e67ded30b3e30_f3243.png" alt="Figure_5_add_attack().function.in.the.released.source.png" width="800" height="304" /> <span class="centered-caption">Figure 5: add_attack() function in the released source.</span></p>
<p>Similar to add_entry() introduced in <a href="#h4-211-table-init-analyser">Section 2.1.1</a>, the add_attack() function may also be inline optimized in some cases, which leads to two versions of binary add_attack(). Fortunately, the two versions share the following characteristics:</p>
<ol>
<li>Composed of a single block.</li>
<li>A fixed set of one, or two in the case of inline-optimization, unique functions are called repeatedly.</li>
<li>At least one callback function corresponding to the attack method function exists.</li>
</ol>
<p>The candidate attack_init() functions are found by an IDAPython script according to the above three characteristics. Non-inline and inline versions are considered separately when emulating. The key points of emulating non-inline versions of attack_init() are as follows:</p>
<ol>
<li>NOP’ing all CALL instructions and marking them as breakpoints.</li>
<li>Emulating in single-step mode.</li>
<li>In the breakpoint handler, saving arguments 1–2 if the second argument points to a valid code area.</li>
</ol>
<p>When analysing the inline optimization version of code, a trick is used which is inspired by the fact that the newly allocated memory returned from malloc() will be used as the destination operand in the next MEM-WRITE operation to save the code and atk_function. Every time a CALL breakpoint is handled, the return value (e.g. EAX in the case of <em>Intel</em> x86 CPU) will be set to a magic value called MAGIC-RET. The key points of emulating an inline optimization version of attack_init() are as follows:</p>
<ol>
<li>NOP’ing all CALL instructions and marking them as breakpoints.</li>
<li>Hooking MEM-WRITE instructions.</li>
<li>Emulating in single-step mode.</li>
<li>In the CALL breakpoint handler, setting the return value as MAGIC-RET.</li>
<li>In the MEM-WRITE handler, saving the source operand value as atk_code if the destination operand equals MAGIC_RET.</li>
<li>In the MEM-WRITE handler, saving the source operand as atk_function if the destination one equals (MAGIC_RET+4).</li>
</ol>
<p>An example of the finally found {code, attack_function} pairs is as follows (md5 = 0ae272306d313c6abf1433b85e0a2352):</p>
<pre>{0_0x8FA0, 1_0xA4C4, 2_0xA988, 8_0x89D8, 3_0xC96C, 4_0xC1F8, 5_0xB998, 10_0xB138, 6_0x9DA8, 7_0x962C, 9_0x8CBC}</pre>
<p>The semantics of the found attack functions are inferred using the fingerprint technique introduced in the next section.</p>
<p> </p>
<h4><a class="chapter" name="h4-221-fingerprinting-attack-functions"></a>2.2.1 Fingerprinting attack functions</h4>
<p>Together with the attack method command codes, as many as 25 attack options (e.g. ATK_OPT_PAYLOAD_SIZE, ATK_OPT_PAYLOAD_RAND, ATK_OPT_IP_TOS) are defined in the original Mirai C&amp;C protocol to deliver command details, as shown in Figure 6.<a class=" anchor" name="figure6"></a></p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/db5ac1904df81636f4e9b51334f308ca_f3244.png" alt="Figure_6_attack.options.defined.in.Mirai.C2.protocol.png" width="800" height="402" /><span class="centered-caption">Figure 6: Attack options defined in Mirai C&amp;C protocol.</span></p>
<p>Detailed analysis shows it’s common for the same functionality to be expressed using different codes across different variants. And some options are usually attack-command-specific, e.g. ATK_OPT_METHOD and ATK_OPT_POST_DATA are only used with ATK_VEC_HTTP (a.k.a. attack_app_http, as shown in Figure 7), while ATK_OPT_GRE_CONSTIP is only used with ATK_VEC_GREIP (a.k.a. attack_gre_ip, as shown in Figure 8) and ATK_VEC_GREETH.<a class=" anchor" name="figure7"></a></p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/2d8c62e496f09e73ba3f86ac0b0839f6_f3245.png" alt="Figure_7_attack.options.used.in.attack_app_http.png" width="800" height="244" /><span class="centered-caption">Figure 7: Attack options used in attack_app_http().</span></p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/a6a90d28bb5d10bb8805f58da8869b2e_f3246.png" alt="Figure_8_attack.options.used.in.attack_gre_ip.png" width="800" height="251" /><span class="centered-caption">Figure 8: Attack options used in attack_gre_ip().</span></p>
<p>Furthermore, different attack methods usually don’t share the same set of attack options, which inspired us to devise a fingerprint technique as follows:</p>
<p>fingerprint(atk_function)={concatenation of used option codes}</p>
<p>For example, the attack_app_http in <a href="#figure6">Figure 6</a> has a fingerprint of ‘0x15_0x14_0x08_0x16_0x18_0x07’, while attack_gre_ip in <a href="#figure7">Figure 7</a> has a fingerprint of ‘0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01_0x13_0x19’.</p>
<p>With the fingerprint technique, not only can we cluster the variants based on their attack method fingerprints, but we are also able to recognize the supported attack methods of new samples with a signature database of {atk_fingerprint, method_name}. The used option codes are all the data that is needed for fingerprinting. They are always referenced in the first, yet large, instruction block of binary attack functions, as shown in Figure 9, by calling the parser functions of attack_get_opt_int()/attack_get_opt_str()/attack_get_opt_ip().</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/3215/4411/2317/Figure_9_attack.options.used.in.attack_gre_ip.png" alt="Figure_9_attack.options.used.in.attack_gre_ip.png" width="639" height="858" /> <span class="centered-caption">Figure 9: Attack options used in attack_gre_ip().</span></p>
<p>Detailed analysis shows that all parser functions share the same characteristics: taking four arguments with arguments 1–2 as source data, arg 3 as option code and arg 4 holding a default value. Inspired by the findings, our option code extraction is achieved by emulating the first instruction block of the attack function. The static analysis part is relatively simple: splitting the target attack function into blocks and finding the starting and ending addresses of the first block. A trick to recognize the ‘attack_get_opt_’ prefixed parser functions in emulation is to set the first and second arguments of the target attack function as two magic values (e.g. MAGIC-VAL1 and MAGIC-VAL2) before emulation starts. The key points of emulation are as follows:</p>
<ol>
<li>Setting arguments 1 and 2 of the target function as two magic values (e.g. MAGIC-VAL1 and MAGIC-VAL2).</li>
<li>NOP’ing all the CALL instructions and marking them as breakpoints.</li>
<li>Emulating in single-step mode.</li>
<li>Saving arguments 3–4 when breakpoints are encountered with arguments 1–2 equal to MAGIC-VAL1–2.</li>
</ol>
<p>Currently, 43 unique attack method fingerprints have been found from the 32,000+ samples, as illustrated in <a href="#h2-appendix-b-signature-attack-methods">Appendix B</a>.</p>
<p> </p>
<h3><a class="chapter" name="h3-23-dictionary-usernamespasswords"></a>2.3 Dictionary of usernames/passwords</h3>
<p>It’s the scanner module that enables Mirai to infect hundreds of thousands of vulnerable devices in a relatively short period of time. That module can be divided into two parts: (1) the TCP port prober; (2) a telnet brute force attacker with a dictionary of dozens of, default to 62, usernames/passwords. Due to its proven efficiency, the prober is not only retained by most Mirai descendants, but also borrowed by other botnet families [<a href="#ref9">9</a>]. Meanwhile, telnet brute forcing is also kept by most variants, sometimes used together with new exploits [<a href="#ref3">3</a>, <a href="#ref5">5</a>], which makes it common to find a credential dictionary in Mirai variant samples. Our analysis shows that different variants don’t usually share the same set of credentials, as shown in Figure 10. Since new usernames and passwords often indicate new infection vectors, the dictionary changes can be used for variant detection and tracking [<a href="#ref10">10</a>].<a class=" anchor" name="figure10"></a></p>
<p><a class="zoom-img" title="Figure 10: Two examples of extracted usernames and passwords (md5_1: dbba02b2d0ef42d2a1ebbab7f03f37f0; md5_2: 2ff2d4feff4ffcec355f52993ce7b73e)." href="/files/8515/4411/2414/Figure_10_examples.of.extracted.usernames.and.passwords.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/cd5564f931805e5a0d371ed4e151f494_f3248.png" alt="Figure_10_examples.of.extracted.usernames.and.passwords.png" width="840" height="61" /></a><span class="centered-caption">Figure 10: Two examples of extracted usernames and passwords (md5_1: dbba02b2d0ef42d2a1ebbab7f03f37f0; md5_2: 2ff2d4feff4ffcec355f52993ce7b73e).</span></p>
<p>In Mirai, the scanning task, including the credential dictionary initialization, is done in a function called scanner_init(), which is characterized by having a complex binary control flow graph embedded with a very large instruction block, as illustrated in Figure 11.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/2ba168edd24161a28c1a98fbd051ce16_f3249.png" alt="Figure_11_binary.version.of.scanner_init.png" width="840" height="731" /><span class="centered-caption">Figure 11: Binary version of scanner_init().</span></p>
<p>Detailed analysis shows it’s the large block that is responsible for installing all the usernames and passwords, which inspires the idea of extracting the credentials by emulating the large block. Candidate blocks are found using an IDAPython script that iterates all binary blocks and picks out those with the following criteria:</p>
<ol>
<li>Having large block size and instruction count.</li>
<li>Referencing dozens of global variables which point to ciphertext usernames and passwords.</li>
<li>Writing at least five global variables which correspond to IP and TCP fields.</li>
<li>Repeatedly calling a unique function (a.k.a. add_auth_entry()).</li>
</ol>
<p>The found blocks are emulated based on our lightweight emulation framework. The key points of the emulation program are as follows:</p>
<ol>
<li>NOP’ing all the CALL instructions and marking them as breakpoints.</li>
<li>Emulating in single-step mode.</li>
<li>In the CALL breakpoint handler, saving arguments 1–3 separately as username, password and weight.</li>
</ol>
<p>The finally extracted usernames and passwords are deciphered with a self-implemented decryption module similar to that introduced in <a href="#h4-211-table-init-analyser">Section 2.1.1</a>. Two examples of the extracted usernames and passwords are illustrated in <a href="#figure10">Figure 10</a>.</p>
<p> </p>
<h2><a class="chapter" name="h2-3-variant-classification-and-tracking"></a>3. Variant classification and tracking</h2>
<p>While variant classification and tracking is a complex topic, especially in the case of dozens of variants and tens of thousands of samples, in this section we will discuss such schemes with data limited to those introduced in <a href="#h2-2-data-extraction">Section 2</a>.</p>
<p> </p>
<h3><a class="chapter" name="h3-31-configuration-based-schemes"></a>3.1 Configuration-based schemes</h3>
<p>Since the configuration database stores most of the running parameters, the variant evolution can be well detected from database changes. For example, the samples illustrated in Figures 12 and 13 share the same C&amp;C and similar configurations, but extra iptables commands are found in the second one, which indicates an exclusive infection and possible infection vectors.</p>
<p><a class="zoom-img" title="Figure 12: Configurations from a sample with md5 = dbba02b2d0ef42d2a1ebbab7f03f37f0." href="/files/9715/4411/2636/Figure_12__configurations.from.sample.with._md5dbba02b2d0ef42d2a1ebbab7f03f37f0.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/e75706779ddcdc8bf63a5a18e27dd59c_f3250.png" alt="Figure_12_ configurations.from.sample.with. md5=dbba02b2d0ef42d2a1ebbab7f03f37f0.png" width="840" height="407" /></a><span class="centered-caption">Figure 12: Configurations from a sample with md5 = dbba02b2d0ef42d2a1ebbab7f03f37f0.</span></p>
<p><a class="zoom-img" title="Figure 13: Configurations from a sample with md5 = 08abb658c6a293886a8000a31b900e88." href="/files/1115/4411/2695/Figure_13__configurations.from.sample.with.md508abb658c6a293886a8000a31b900e88.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/bb8004efe55935eb2fa1a5ba3a772ba0_f3251.png" alt="Figure_13_ configurations.from.sample.with.md5=08abb658c6a293886a8000a31b900e88.png" width="840" height="514" /></a><span class="centered-caption">Figure 13: Configurations from a sample with md5 = 08abb658c6a293886a8000a31b900e88.</span></p>
<p>Considering that there are usually dozens of items in a single configuration database, and configurations vary greatly across variants in terms of size and content, it might be not feasible to use all configurations for classification and tracking. Therefore, we devise two schemes which rely only on configuration size, count, and encryption key used.</p>
<p> </p>
<h4><a class="chapter" name="h4-311-clustering-based-configuration-count-and-size"></a>3.1.1 Clustering based on configuration count and size</h4>
<p>This scheme is designed to cluster variants and quickly detect anomalous ones in cases where there are a large number of samples. This is achieved by plotting all the samples according to their configurations’ counts and sizes, as shown in Figure 14 where the x-axis represents size while the y-axis shows the count.</p>
<p><a class="zoom-img" title="Figure 14: Clustering samples based on configuration count and size." href="/files/5915/4411/2788/Figure_14_clustering.samples.based.on.configuration.count.and.size.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/3d3f147edf0005b40a2b738b6172b776_f3252.png" alt="Figure_14_clustering.samples.based.on.configuration.count.and.size.png" width="840" height="372" /></a><span class="centered-caption">Figure 14: Clustering samples based on configuration count and size.</span></p>
<p>Two clusters of samples with much larger configuration size can easily be identified in Figure 14. Further analysis shows they can be classified as the same variant, as shown in Table 2. Detailed analysis shows the extraordinarily large configuration size is due to dozens of fake HTTP user-agents added by the author for better HTTP flooding attacks. In fact, the correlated intelligence of branch names, keys and C&amp;Cs strongly suggests that the same underground group is behind the samples.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Criterion</strong></td>
<td><strong>Branch name</strong></td>
<td><strong>Key</strong></td>
<td><strong>C&amp;C</strong></td>
<td><strong>Samples</strong></td>
</tr>
<tr>
<td rowspan="5">size &gt; 7400<br />&amp;&amp; count &gt; 100 <br />&amp;&amp; count &lt; 120   </td>
<td>MIRAI</td>
<td>0x22</td>
<td>cnc.ttoww.com</td>
<td>19</td>
</tr>
<tr>
<td>KYUBI</td>
<td>0x34</td>
<td>cnc.aandy.xyz</td>
<td>4</td>
</tr>
<tr>
<td>MIRAI</td>
<td>0x34</td>
<td>cnc.aandy.xyz</td>
<td>8</td>
</tr>
<tr>
<td>MIRAI</td>
<td>0x34</td>
<td>www.aandy.cf</td>
<td>7</td>
</tr>
<tr>
<td>MIRAI</td>
<td>0x34</td>
<td>www.askjasghasg.ru</td>
<td>16</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 2: A cluster with very large configuration size.</p>
<p>This clustering scheme can also be used with other schemes. For example, it can be used to cluster samples belonging to the same branch (e.g. MASUTA, OWARI). Clustering results based on size and count can be useful for further analysis.</p>
<p> </p>
<h4><a class="chapter" name="h4-312-clustering-based-encryption-key"></a>3.1.2 Clustering based on encryption key</h4>
<p>Except for SATORI, which is not discussed in this paper [<a href="#ref5">5</a>], all the Mirai samples we collected share the same encryption algorithm, thus only the encryption key is considered in this paper. Since the key has a space of 2^8, there is a low probability that two variants share the same key coincidentally. Therefore key sharing can be thought of as being caused by code sharing, and can be used to correlate the botnet authors behind the samples.</p>
<p>In total, 31 keys have been detected from our collected samples. Their usage stats show a good long tail distribution of samples, as illustrated in Table 3.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Key</strong></td>
<td><strong>Sample count</strong></td>
</tr>
<tr>
<td>0x22</td>
<td>4,755</td>
</tr>
<tr>
<td>0x54</td>
<td>3,938</td>
</tr>
<tr>
<td>0x3D</td>
<td>553</td>
</tr>
<tr>
<td>0x45</td>
<td>542</td>
</tr>
<tr>
<td>0x66</td>
<td>204</td>
</tr>
<tr>
<td>0x37</td>
<td>163</td>
</tr>
<tr>
<td>0x6F</td>
<td>125</td>
</tr>
<tr>
<td>0x02</td>
<td>90</td>
</tr>
<tr>
<td>0x62</td>
<td>77</td>
</tr>
<tr>
<td>0x67</td>
<td>69</td>
</tr>
<tr>
<td>0x55</td>
<td>52</td>
</tr>
<tr>
<td>0x78</td>
<td>37</td>
</tr>
<tr>
<td>0x34</td>
<td>35</td>
</tr>
<tr>
<td>0x03</td>
<td>29</td>
</tr>
<tr>
<td>0x56</td>
<td>20</td>
</tr>
<tr>
<td>0x10</td>
<td>14</td>
</tr>
<tr>
<td>0x11</td>
<td>13</td>
</tr>
<tr>
<td>0x76</td>
<td>8</td>
</tr>
<tr>
<td>0x42</td>
<td>8</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 3: Top 20 frequently used keys.</p>
<p>According to our analysis, the keys located in the tail area usually indicate a single variant, while frequently used keys indicate a relative in the same family. For example, through the key of 0x54, the branches of Cult, JOSHO and OWARI can be connected, as shown in Table 4.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>MD5</strong></td>
<td><strong>Config count</strong></td>
<td><strong>Config size</strong></td>
<td><strong>Branch</strong></td>
<td><strong>C&amp;C</strong></td>
</tr>
<tr>
<td>0729b89281c831fc035d56fbf14631da</td>
<td>30</td>
<td>333</td>
<td>Cult</td>
<td>198.134.120.150</td>
</tr>
<tr>
<td>23a98fc659982da993e7825eb87bb640</td>
<td>30</td>
<td>340</td>
<td>OWARI</td>
<td>198.134.120.150</td>
</tr>
<tr>
<td>2ff2d4feff4ffcec355f52993ce7b73e</td>
<td>30</td>
<td>346</td>
<td>JOSHO</td>
<td>198.134.120.150</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 4: Connecting Cult, JOSHO and OWARI through the key of 0x54.</p>
<p>The connecting process works as follows:</p>
<ol>
<li>The three branches are connected by the samples sharing the same key.</li>
<li>The grouped samples have a similar configuration count and size, which indicates that they probably belong to the same variant.</li>
<li>The samples share the same C&amp;C, which strongly suggests that they probably come from the same author(s).</li>
</ol>
<p>Our analysis shows that such connections can be extended to other branches, with most of them finally verified by the shared C&amp;Cs. Based on that finding, we devise a coarse-grained grouping scheme of ‘branch+key’ for quickly classifying new samples. In total, 92 groups are produced. With the exception of ‘MIRAI_0x22’, which stands for the default branches, the other top 10 groups based on their C&amp;Cs are shown in Table 5.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Variant</strong></td>
<td><strong>C&amp;C count</strong></td>
</tr>
<tr>
<td>JOSHO+0x54</td>
<td>216</td>
</tr>
<tr>
<td>OWARI+0x54</td>
<td>134</td>
</tr>
<tr>
<td>Cult+0x54</td>
<td>81</td>
</tr>
<tr>
<td>SORA+0x54</td>
<td>69</td>
</tr>
<tr>
<td>daddyl33t+0x3D</td>
<td>59</td>
</tr>
<tr>
<td>MASUTA+0x45</td>
<td>53</td>
</tr>
<tr>
<td>EXTENDO+0x54</td>
<td>21</td>
</tr>
<tr>
<td>MIORI+0x54</td>
<td>12</td>
</tr>
<tr>
<td>dwickedgod+0x3D</td>
<td>10</td>
</tr>
<tr>
<td>Saikin+0x66</td>
<td>9</td>
</tr>
<tr>
<td>Katrina+0x67</td>
<td>9</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 5: Top 10 groups of ‘branch+key’ based on C&amp;C count.</p>
<p> </p>
<h3><a class="chapter" name="h3-32-attack-method-based-schemes"></a>3.2 Attack-method-based schemes</h3>
<p>Since Mirai was designed to launch DDoS attacks, the supported attack methods are a sound basis for variant classification. Based on the attack method fingerprinting technique introduced in <a href="#h3-22-supported-attack-methods">Section 2.2</a>, we develop a classification scheme based on the combination of {code, attack-type} pairs extracted from samples, as illustrated in <a href="#h4-321-combination-supported-attack-methods">Section 3.2.1</a>.</p>
<p> </p>
<h4><a class="chapter" name="h4-321-combination-supported-attack-methods"></a>3.2.1 Combination of supported attack methods</h4>
<p>According to our analysis, Mirai variants vary greatly in the supported attack methods in terms of method count, code numbering, and implementation. To quickly distinguish different variants of samples, we devise a coarse-grained classification method based on the combination of supported attack method codes (e.g. 0_1_2_3_4_5_6_7_9_10 for default Mirai samples). Two samples are classified as possibly the same variant for further analysis only when they share the same code combination. The top 10 combinations based on the sample count are shown in Table 6.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Attack method code combination</strong></td>
<td><strong>Count</strong></td>
</tr>
<tr>
<td>0_1_2_3_4_5_6_7_9_10</td>
<td>4,488</td>
</tr>
<tr>
<td>0_1_2_3_4_5_6_7_8_9_10</td>
<td>3,890</td>
</tr>
<tr>
<td>0_1_2_3_4_5_6_7_8</td>
<td>976</td>
</tr>
<tr>
<td>0_1_2_3_4_5_6_7_8_9</td>
<td>353</td>
</tr>
<tr>
<td>0_1_2_3_6_7_8</td>
<td>138</td>
</tr>
<tr>
<td>0_1_2_3_4_5_6_7_9</td>
<td>96</td>
</tr>
<tr>
<td>0_1_2_3_4</td>
<td>94</td>
</tr>
<tr>
<td>0_1_2_3</td>
<td>75</td>
</tr>
<tr>
<td>0_1_2_3_4_5_6_7_9_10_11_12</td>
<td>51</td>
</tr>
<tr>
<td>0_1_2</td>
<td>48</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 6: Top 10 attack method code combinations.</p>
<p>Since it’s common for the same code to be assigned to different attack methods in different variants, a more precise classification can be achieved using the combination of code and the corresponding attack method fingerprint. With the help of the fingerprint technique introduced in <a href="#h4-221-fingerprinting-attack-functions">Section 2.2.1</a>, a total of 126 such unique combinations are found, as shown in <a href="#h2-appendix-c-all-recognized-combinations-attack-method-code-attack-type">Appendix C</a>, where each combination can be thought to represent a variant. It’s worth mentioning that the fingerprints have been converted to the method name for better readability with the signature database we built, as shown in <a href="#h2-appendix-b-signature-attack-methods">Appendix B</a>.</p>
<p> </p>
<h2><a class="chapter" name="h2-4-typical-variants-analysis"></a>4. Typical variants analysis</h2>
<p>To better demonstrate our proposed schemes, in this section we will investigate some popular Mirai variants with the proposed schemes.</p>
<p> </p>
<h3><a class="chapter" name="h3-41-masuta"></a>4.1 MASUTA</h3>
<p>In total, four keys are found to be used in this branch. Their stats are shown Table 7.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Variant</strong></td>
<td><strong>Samples</strong></td>
<td><strong>C&amp;Cs</strong></td>
</tr>
<tr>
<td>MASUTA+0x45</td>
<td>351</td>
<td>53</td>
</tr>
<tr>
<td>MASUTA+0x02</td>
<td>90</td>
<td>5</td>
</tr>
<tr>
<td>MASUTA+0x22</td>
<td>9</td>
<td>1</td>
</tr>
<tr>
<td>MASUTA+0x55</td>
<td>8</td>
<td>1</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 7: Stats on MASUTA samples and C&amp;Cs.</p>
<p>Sample clustering on the largest branch of ‘MASUTA+0x45’ is shown in Figure 15.</p>
<p><a class="zoom-img" title="Figure 15: Clustering samples of ‘MASUTA+0x45’ based on configuration." href="/files/3015/4411/4108/fig15.jpg"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/11ce4b4ff16d91e49bc564e519f1d2eb_f3253.jpg" alt="fig15.jpg" width="840" height="428" /></a><span class="centered-caption">Figure 15: Clustering samples of ‘MASUTA+0x45’ based on configuration.</span></p>
<p>Both configuration size and count are relatively close. The slight changes in sizes are due to the following reasons:</p>
<ol>
<li>Two different prompt lines are used: ‘gosh that chinese family at the other table sure ate alot’ and ‘The Void’.</li>
<li>In some samples the C&amp;Cs are hard coded in resolve_cnc_addr() but old default C&amp;Cs are still kept in configurations.</li>
<li>Items of ‘Oaf3’, ‘AbAd’, ‘14Fa’ and ‘<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2d7a5e6a6c196d6b1b6b">[email&#160;protected]</a>’ are added in some samples.</li>
</ol>
<p>From the point of view of attack methods, as many as 25 combinations of {code, atk_type} are found in all MASUTA samples, while there are eight combinations in the ‘MASUTA+0x45’ branch, as shown in Figure 16.</p>
<p><a class="zoom-img" title="Figure 16: Combinations attack methods found ‘MASUTA+0x45’ samples." href="/files/3015/4411/4209/Figure_16_combinations.of.atk.methods.found.in.MATUTA.0x45.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/499260dc27e3580db485b88e067b4383_f3254.png" alt="Figure_16_combinations.of.atk.methods.found.in.MATUTA.0x45.png" width="840" height="82" /></a><span class="centered-caption">Figure 16: Combinations attack methods found 'MASUTA+0x45' samples.</span></p>
<p>The UNK1 in Figure 16 represents a yet unrecognized fingerprint of ‘0x02_0x03_0x04_0x05_0x07_0x0a_0x0b_0x0c_0x0d_0x0e_0x0f_0x00_0x01_0x06’.</p>
<p> </p>
<h3><a class="chapter" name="h3-42-owari"></a>4.2 OWARI</h3>
<p>In total, two keys are found to be used in OWARI samples. Their stats are shown in Table 8.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Variant</strong></td>
<td><strong>Samples</strong></td>
<td><strong>C&amp;Cs</strong></td>
</tr>
<tr>
<td>OWARI+0x54</td>
<td>687</td>
<td>146</td>
</tr>
<tr>
<td>OWARI+0x66</td>
<td>15</td>
<td>2</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 8: Stats on OWARI samples and C&amp;Cs.</p>
<p>Sample clustering of OWARI samples is shown in Figure 17.</p>
<p><a class="zoom-img" title="Figure 17: Clustering OWARI samples based on configuration." href="/files/9015/4411/4429/fig17.jpg"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/ee736da93d1a26988d18460092f2dd10_f3255.jpg" alt="fig17.jpg" width="800" height="418" /></a><span class="centered-caption">Figure 17: Clustering OWARI samples based on configuration.</span></p>
<p>It’s interesting that OWARI samples concentrate exactly on four points of (21, 265), (30, 340), (38, 409) and (41, 2524). The slight changes in size are due to the following reasons:</p>
<ol>
<li>Two different prompt lines are used: ‘OWARI09123id9i123xd912’ and ‘Follow twitter.com/1337Wicked’.</li>
<li>In the samples with a size of 2524, several automatic download and killer command lines exist, as shown in Figure 18.</li>
</ol>
<p><a class="zoom-img" title="Figure 18: Command lines found in OWARI samples with size of 2524." href="/files/6315/4411/4518/Figure_18_Command.lines.found.in.OWARI.samples.with.size.of.2524.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/6c3db5661c200cb49f0d7fa89150888a_f3256.png" alt="Figure_18_Command.lines.found.in.OWARI.samples.with.size.of.2524.png" width="840" height="94" /></a><span class="centered-caption">Figure 18: Command lines found in OWARI samples with size of 2524.</span></p>
<p>It’s interesting that as many as 12 unique C&amp;Cs are detected from samples with a size of 2424, while they all share the same download server of 185.246.152.173. We think that either they belong to the same group, or the download commands are backdoored by the author (a.k.a. the so-called ‘twitter.com/1337Wicked’) in his code.</p>
<p>From the point of view of attack methods, only two combinations of {code, atk_type} are found in all OWARI samples:</p>
<pre>15 {0-atk_udp1, 1-atk_udp_vse1, 2-atk_tcp_syn1, 3-atk_tcp_ack1, 4-atk_gre1, 5-atk_gre1, 6-atk_std_or_udp, 7-atk_std_or_udp, 8-atk_tcp_stomp_or_xmas1}</pre>
<pre>642 {0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 8-atk_std_or_udp, 9-atk_std_or_udp, 10-atk_tcp_stomp_or_xmas1}</pre>
<p>Detailed analysis shows the first combination corresponds to the branch of ‘OWARI+0x66’, while the second to ‘OWARI+ 0x54’.</p>
<p>It’s worth mentioning that, with the key of 0x66 and the first attack method combination, we successfully connected the ‘OWARI+0x66’ to another branch named ‘kkuuaassaa’, where all 44 samples share the same C&amp;C of ‘46.243.189.109’. We think they are either written by the same author, or there is heavy code sharing.</p>
<p> </p>
<h3><a class="chapter" name="h3-43-wicked"></a>4.3 WICKED</h3>
<p>The WICKED branch became known for including multiple IoT exploits in 2018. In total, 128 samples have been collected (up to May 2018), with only one key of 0x37 found and six C&amp;Cs detected. Sample clustering is shown in Figure 19.<a class=" anchor" name="figrue19"></a></p>
<p><a class="zoom-img" title="Figure 19: Clustering samples of WICKED based on configuration." href="/files/8715/4411/4632/fig19.jpg"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/c964b32179233dd8ac99598b698554fb_f3257.jpg" alt="fig19.jpg" width="840" height="442" /></a><span class="centered-caption">Figure 19: Clustering samples of WICKED based on configuration.</span></p>
<p>The samples can be clustered into four groups, as shown in Table 9.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>(size, count)</strong></td>
<td><strong>Samples</strong></td>
<td><strong>C&amp;C</strong></td>
</tr>
<tr>
<td>(48, 614)</td>
<td>15</td>
<td>104.244.72.82</td>
</tr>
<tr>
<td>(27, 737)</td>
<td>4</td>
<td>185.246.152.173</td>
</tr>
<tr>
<td>(38, 833)</td>
<td>54</td>
<td>104.236.224.5<br />104.244.72.82<br />167.99.220.44<br />185.189.58.211<br />185.246.152.173<br />188.166.63.14</td>
</tr>
<tr>
<td>(48, 1362~1376)</td>
<td>55</td>
<td>167.99.220.44<br />185.246.152.173</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 9: Stats on WICKED samples.</p>
<p>Given the fact that several C&amp;Cs are shared across clusters, we think that the WICKED samples are probably produced by the same authors. On the other hand, since the IP of 185.246.152.173 is also shared by OWARI samples, the WICKED branch could be connected to that branch.</p>
<p>The size changes in configurations are mainly due to the command lines shown in Figures 20 and 21. Contents shown in <a href="#figrue19">Figure 19</a> indicate an exclusive infection by this branch.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/4415/4411/4889/Figure_20_iptables.commands.found.in.WICKED.samples.png" alt="Figure_20_iptables.commands.found.in.WICKED.samples.png" width="507" height="146" /><span class="centered-caption">Figure 20: iptables commands found in WICKED samples.</span></p>
<p><a class="zoom-img" title="Figure 21: Echo commands found in WICKED samples" href="/files/6415/4411/4948/Figure_21_echo.commands.found.in.WICKED.samples.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/ef33b2c317220877e354822f0d1f4a6e_f3259.png" alt="Figure_21_echo.commands.found.in.WICKED.samples.png" width="840" height="59" /></a><span class="centered-caption">Figure 21: Echo commands found in WICKED samples.</span></p>
<p><a class="zoom-img" title="Figure 22: Combination attack methods found in WICKED samples." href="/files/3315/4411/5000/Figure_22_combinations.attack.methods.found.WICKED.samples.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/081a2afadbb92161730cc2284e23b225_f3260.png" alt="Figure_22_combinations.attack.methods.found.WICKED.samples.png" width="840" height="49" /></a><span class="centered-caption">Figure 22: Combination attack methods found in WICKED samples.</span></p>
<p>From the point of view of attack methods, combinations of {code, atk_type} are found in WICKED samples, as shown in Figure 22.</p>
<p> </p>
<h2><a class="chapter" name="h2-5-conclusion"></a>5. Conclusion</h2>
<p>We have introduced how to extract data including configurations, supported attack methods, and dictionaries of usernames and passwords from Mirai samples, and how to use the extracted data for variant classification and tracking, with different schemes discussed. Some popular Mirai branches have been investigated with our proposed schemes. In the future, we will keep a close eye on the emerging Mirai variants, and will continue researching better classification schemes, e.g. using fuzzy hashing techniques to group samples based on their extracted configurations. We hope our work will help improve the detection and mitigation of Mirai-like threats.</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] Hajime: Analysis of a decentralized internet worm for IoT devices. <a href="https://security.rapiditynetworks.com/publications/2016-10-16/hajime.pdf" target="_blank">https://security.rapiditynetworks.com/publications/2016-10-16/hajime.pdf</a>.</p>
<p><a class=" anchor" name="ref2"></a>[2] IoT_reaper: A Few Updates. <a href="http://blog.netlab.360.com/iot_reaper-a-few-updates-en/" target="_blank">http://blog.netlab.360.com/iot_reaper-a-few-updates-en/</a>.</p>
<p><a class=" anchor" name="ref3"></a>[3] Now Mirai Has DGA Feature Built in. <a href="https://blog.netlab.360.com/new-Mirai-variant-with-dga/" target="_blank">https://blog.netlab.360.com/new-Mirai-variant-with-dga/</a>.</p>
<p><a class=" anchor" name="ref4"></a>[4] Early Warning: A New Mirai Variant is Spreading Quickly on Port 23 and 2323. <a href="https://blog.netlab.360.com/early-warning-a-new-Mirai-variant-is-spreading-quickly-on-port-23-and-2323-en/" target="_blank">https://blog.netlab.360.com/early-warning-a-new-Mirai-variant-is-spreading-quickly-on-port-23-and-2323-en/</a>.</p>
<p><a class=" anchor" name="ref5"></a>[5] Warning: Satori, a Mirai Branch Is Spreading in Worm Style on Port 37215 and 52869. <a href="https://blog.netlab.360.com/warning-satori-a-new-Mirai-variant-is-spreading-in-worm-style-on-port-37215-and-52869-en/" target="_blank">https://blog.netlab.360.com/warning-satori-a-new-Mirai-variant-is-spreading-in-worm-style-on-port-37215-and-52869-en/</a>.</p>
<p><a class=" anchor" name="ref6"></a>[6] MMD-0056-2016 – Linux/Mirai, how an old ELF malcode is recycled. <a href="http://blog.malwaremustdie.org/2016/08/mmd-0056-2016-linuxMirai-just.html" target="_blank">http://blog.malwaremustdie.org/2016/08/mmd-0056-2016-linuxMirai-just.html</a>.</p>
<p><a class=" anchor" name="ref7"></a>[7] Unicorn. <a href="https://www.unicorn-engine.org/" target="_blank">https://www.unicorn-engine.org/</a>.</p>
<p><a class=" anchor" name="ref8"></a>[8] Source Code for IoT Botnet ‘Mirai’ Released. <a href="https://krebsonsecurity.com/2016/10/source-code-for-iot-botnet-Mirai-released/" target="_blank">https://krebsonsecurity.com/2016/10/source-code-for-iot-botnet-Mirai-released/</a>.</p>
<p><a class=" anchor" name="ref9"></a>[9] ADB.Miner: More Information. <a href="https://blog.netlab.360.com/adb-miner-more-information-en/" target="_blank">https://blog.netlab.360.com/adb-miner-more-information-en/</a>.</p>
<p><a class=" anchor" name="ref10"></a>[10] Early Warning: A New Mirai Variant is Spreading Quickly on Port 23 and 2323. <a href="https://blog.netlab.360.com/early-warning-a-new-mirai-variant-is-spreading-quickly-on-port-23-and-2323-en/" target="_blank">https://blog.netlab.360.com/early-warning-a-new-mirai-variant-is-spreading-quickly-on-port-23-and-2323-en/</a>.</p>
<p> </p>
<h2><a class="chapter" name="h2-appendix-sample-sha256-hashes"></a>Appendix A: Sample SHA256 hashes</h2>
<p>MD5 hash: 0ae272306d313c6abf1433b85e0a2352</p>
<p>SHA-256 hash: 0c5bc272d13fc05bca15babd83826ca51accf3a8bc0a52f7e0f7f79ea4496280</p>
<p>MD5 hash: dbba02b2d0ef42d2a1ebbab7f03f37f0</p>
<p>SHA-256 hash: 87f49c75ae9aa3138b893a6ff1c316be1c197bed2021ff84bc6a281b25543ee9</p>
<p>MD5 hash: 08abb658c6a293886a8000a31b900e88</p>
<p>SHA-256 hash: dab9ee751d591af93e998b56efa888ef09f50b2e74ab8a6f7b910b00350a866a</p>
<p>MD5 hash: 2db905373ea58920f7dbf9f3e59ba990</p>
<p>SHA-256 hash: 79c3d3b25aba02959ecf734e93b8c162851c11abe81bd7207a16d496ebfa6ab5</p>
<p>MD5 hash: 82358453a5b5be7a54b7013b8f2ec21d</p>
<p>SHA-256 hash: d7ca6f599d37fcfa146b5c044efda4199cb5713fca0984f93301a85b68934c4e</p>
<p>MD5 hash: 0729b89281c831fc035d56fbf14631da</p>
<p>SHA-256 hash: 3af17b130f9b41d5e3645c2622cfe4be5daee0316084cb10c05adf6d60ec1032</p>
<p>MD5 hash: 23a98fc659982da993e7825eb87bb640</p>
<p>SHA-256 hash: f227b9d6f59b27fce5f23551ea15794bd45e26f3eaab44136d6fdf9903992c3b</p>
<p>MD5 hash: 2ff2d4feff4ffcec355f52993ce7b73e</p>
<p>SHA-256 hash: 3cece358fecfc8fbe2e86a1b2c6ae3a0f34d9648cd2306cd734bc717216a728e</p>
<p>MD5 hash: 333d98e27cc885624f073e59fc40dfed</p>
<p>SHA-256 hash: 17a91b2632b625cbd02a009ef64f1faae016de497a7e3b1395e54dc32c8b12d3</p>
<p> </p>
<h2><a class="chapter" name="h2-appendix-b-signature-attack-methods"></a>Appendix B: Signature of attack methods</h2>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Attack method</strong></td>
<td><strong>Fingerprint</strong></td>
</tr>
<tr>
<td>atk_app_proxy</td>
<td>null</td>
</tr>
<tr>
<td>atk_cf</td>
<td>0x08_0x18</td>
</tr>
<tr>
<td>atk_gre1</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01_0x13_0x19</td>
</tr>
<tr>
<td>atk_gre2</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01_0x12_0x13</td>
</tr>
<tr>
<td>atk_gre3</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01_0x12_0x13_0x06</td>
</tr>
<tr>
<td>atk_gre4</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01_0x12_0x18</td>
</tr>
<tr>
<td>atk_gre5</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01_0x13_0x06</td>
</tr>
<tr>
<td>atk_gre6</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01_0x11_0x12</td>
</tr>
<tr>
<td>atk_http1</td>
<td>0x15_0x14_0x08_0x16_0x18_0x07</td>
</tr>
<tr>
<td>atk_http2</td>
<td>0x14_0x13_0x08_0x15_0x17_0x07</td>
</tr>
<tr>
<td>atk_std_or_udp</td>
<td>0x07_0x06_0x00_0x01</td>
</tr>
<tr>
<td>atk_tcp_ack1</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x11_0x12_0x0b_0x0c_0x0d_0x0e_0x0f_0x10_0x00_0x01_0x19</td>
</tr>
<tr>
<td>atk_tcp_ack2</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x10_0x11_0x0a_0x0b_0x0c_0x0d_0x0e_0x0f_0x00_0x01_0x13</td>
</tr>
<tr>
<td>atk_tcp_ack3</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x10_0x11_0x0a_0x0b_0x0c_0x0d_0x0e_0x0f_0x00_0x01_0x13_0x06</td>
</tr>
<tr>
<td>atk_tcp_ack4</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x10_0x11_0x0a_0x0b_0x0c_0x0d_0x0e_0x0f_0x00_0x01_0x18</td>
</tr>
<tr>
<td>atk_tcp_ack5</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x11_0x12_0x0b_0x0c_0x0d_0x0e_0x0f_0x10_0x00_0x01</td>
</tr>
<tr>
<td>atk_tcp_ack6</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x11_0x12_0x0b_0x0c_0x0d_0x0e_0x0f_0x10_0x00_0x01_0x06</td>
</tr>
<tr>
<td>atk_tcp_ack7</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x10_0x11_0x0a_0x0b_0x0c_0x0d_0x0e_0x0f_0x00_0x01</td>
</tr>
<tr>
<td>atk_tcp_ack_or_synack</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x0f_0x10_0x09_0x0a_0x0b_0x0c_0x0d_0x0e_0x00_0x01_0x12</td>
</tr>
<tr>
<td>atk_tcp_stomp_or_xmas1</td>
<td>0x02_0x03_0x04_0x05_0x07_0x0b_0x0c_0x0d_0x0e_0x0f_0x10_0x00_0x01</td>
</tr>
<tr>
<td>atk_tcp_stomp_or_xmas2</td>
<td>0x02_0x03_0x04_0x05_0x07_0x0a_0x0b_0x0c_0x0d_0x0e_0x0f_0x00_0x01</td>
</tr>
<tr>
<td>atk_tcp_stomp_or_xmas3</td>
<td>0x02_0x03_0x04_0x05_0x07_0x09_0x0a_0x0b_0x0c_0x0d_0x0e_0x00_0x01</td>
</tr>
<tr>
<td>atk_tcp_syn1</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x11_0x12_0x0b_0x0c_0x0d_0x0e_0x0f_0x10_0x19</td>
</tr>
<tr>
<td>atk_tcp_syn10</td>
<td>0x00_0x02_0x03_0x04_0x05_0x06_0x07_0x10_0x11_0x0a_0x0b_0x0c_0x0d_0x0e_0x0f_0x13</td>
</tr>
<tr>
<td>atk_tcp_syn2</td>
<td>0x00_0x02_0x03_0x04_0x05_0x06_0x07_0x10_0x11_0x0a_0x0b_0x0c_0x0d_0x0e_0x0f_0x18</td>
</tr>
<tr>
<td>atk_tcp_syn3</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x0f_0x10_0x09_0x0a_0x0b_0x0c_0x0d_0x0e_0x12</td>
</tr>
<tr>
<td>atk_tcp_syn4</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x10_0x11_0x0a_0x0b_0x0c_0x0d_0x0e_0x0f</td>
</tr>
<tr>
<td>atk_tcp_syn5</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x10_0x11_0x0a_0x0b_0x0c_0x0d_0x0e_0x0f_0x13</td>
</tr>
<tr>
<td>atk_tcp_syn6</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x10_0x11_0x0a_0x0b_0x0c_0x0d_0x0e_0x0f_0x13_0x06</td>
</tr>
<tr>
<td>atk_tcp_syn7</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x10_0x11_0x0a_0x0b_0x0c_0x0d_0x0e_0x0f_0x18</td>
</tr>
<tr>
<td>atk_tcp_syn8</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x11_0x12_0x0b_0x0c_0x0d_0x0e_0x0f_0x10</td>
</tr>
<tr>
<td>atk_tcp_syn9</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x11_0x12_0x0b_0x0c_0x0d_0x0e_0x0f_0x10_0x06</td>
</tr>
<tr>
<td>atk_udp1</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01_0x19</td>
</tr>
<tr>
<td>atk_udp2</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01_0x11</td>
</tr>
<tr>
<td>atk_udp3</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01</td>
</tr>
<tr>
<td>atk_udp4</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01_0x18</td>
</tr>
<tr>
<td>atk_udp5</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01_0x19_0x11</td>
</tr>
<tr>
<td>atk_udp6</td>
<td>0x07_0x06_0x00_0x01_0x10</td>
</tr>
<tr>
<td>atk_udp_dns</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x09_0x00_0x08</td>
</tr>
<tr>
<td>atk_udp_or_gre1</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01_0x12</td>
</tr>
<tr>
<td>atk_udp_or_gre2</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x00_0x01_0x13</td>
</tr>
<tr>
<td>atk_udp_vse1</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07</td>
</tr>
<tr>
<td>atk_udp_vse2</td>
<td>0x02_0x03_0x04_0x05_0x06_0x07_0x11</td>
</tr>
</tbody>
</table>
<p> </p>
<h2><a class="chapter" name="h2-appendix-c-all-recognized-combinations-attack-method-code-attack-type"></a>Appendix C: All recognized combinations of {attack_method_code, attack_type}</h2>
<pre>{0-atk_app_proxy, 1-atk_app_proxy, 2-atk_app_proxy, 3-atk_app_proxy, 4-atk_app_proxy, 5-atk_app_proxy, 6-atk_app_proxy, 8-atk_app_proxy}<br />{0-atk_std_or_udp}<br />{0-atk_tcp_syn1, 1-atk_tcp_ack1, 2-atk_std_or_udp}<br />{0-atk_tcp_syn1, 1-atk_tcp_ack1, 2-atk_tcp_stomp_or_xmas1}<br />{0-atk_udp1, 1-atk_std_or_udp, 2-atk_tcp_syn1, 3-atk_tcp_ack1, 4-atk_tcp_stomp_or_xmas1, 5-atk_gre1, 6-atk_udp_dns, 8-atk_udp_vse1}<br />{0-atk_udp1, 1-atk_tcp_syn1, 2-atk_tcp_ack1, 3-atk_gre1, 4-atk_gre1, 5-atk_std_or_udp, 6-atk_tcp_stomp_or_xmas1}<br />{0-atk_udp1, 1-atk_udp6, 2-atk_tcp_syn1, 3-atk_tcp_ack1, 4-atk_tcp_stomp_or_xmas1, 5-atk_gre1, 6-atk_udp_dns, 8-atk_udp_vse1}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_std_or_udp, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_gre1, 6-atk_gre1, 7-atk_std_or_udp, 8-atk_tcp_stomp_or_xmas1, 9-atk_http1, 10-atk_cf}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_std_or_udp, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_gre1, 6-atk_gre1, 7-atk_std_or_udp, 8-atk_tcp_stomp_or_xmas1}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_tcp_syn1, 3-atk_tcp_ack1, 4-atk_gre1, 5-atk_gre1, 6-atk_std_or_udp, 7-atk_std_or_udp, 8-atk_tcp_stomp_or_xmas1, 9-atk_http1, 10-atk_cf}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_tcp_syn1, 3-atk_tcp_ack1, 4-atk_gre1, 5-atk_gre1, 6-atk_std_or_udp, 7-atk_std_or_udp, 8-atk_tcp_stomp_or_xmas1}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 8-atk_app_proxy, 9-atk_std_or_udp, 10-atk_http1}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 8-atk_cf, 9-atk_std_or_udp, 10-atk_http1}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 8-atk_std_or_udp, 9-atk_http1}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 8-atk_std_or_udp, 9-atk_std_or_udp, 10-atk_tcp_stomp_or_xmas1, 11-atk_http1, 12-atk_cf}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 8-atk_std_or_udp, 9-atk_std_or_udp, 10-atk_tcp_stomp_or_xmas1}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp, 10-atk_http1, 11-atk_app_proxy}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp, 10-atk_http1, 11-atk_tcp_stomp_or_xmas1, 12-atk_std_or_udp}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp, 10-atk_http1, 12-atk_http1, 13-atk_http1}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp, 10-atk_http1, 12-atk_http1}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp, 10-atk_http1}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp, 10-atk_udp_vse1}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_udp6, 10-atk_http1}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_udp6}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_std_or_udp}<br />{0-atk_udp1, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 9-atk_std_or_udp}<br />{0-atk_udp1, 1-atk_udp_vse1, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp, 10-atk_http1}<br />{0-atk_udp1, 1-atk_udp_vse2, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp, 10-atk_http1}<br />{0-atk_udp1, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp}<br />{0-atk_udp3, 1-atk_std_or_udp, 2-atk_tcp_syn8, 3-atk_tcp_ack5, 4-atk_tcp_stomp_or_xmas1, 5-atk_udp_or_gre2, 6-atk_udp_dns, 7-atk_udp_or_gre2, 8-atk_udp_vse1}<br />{0-atk_udp3, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn4, 4-atk_tcp_ack7}<br />{0-atk_udp3, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn8, 4-atk_tcp_ack5, 5-atk_tcp_stomp_or_xmas1, 6-atk_udp_or_gre2, 7-atk_udp_or_gre2, 8-atk_app_proxy}<br />{0-atk_udp3, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn8, 4-atk_tcp_ack5, 5-atk_tcp_stomp_or_xmas1, 6-atk_udp_or_gre2, 7-atk_udp_or_gre2, 8-atk_std_or_udp, 9-atk_std_or_udp, 10-atk_tcp_stomp_or_xmas1}<br />{0-atk_udp3, 1-atk_udp_vse2, 2-atk_udp_dns, 3-atk_tcp_syn9, 4-atk_tcp_ack6, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre5, 7-atk_gre5, 9-atk_std_or_udp, 10-atk_http1}<br />{0-atk_udp4, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn2, 4-atk_tcp_ack4, 5-atk_tcp_stomp_or_xmas2, 6-atk_gre4, 7-atk_gre4, 8-atk_std_or_udp, 9-atk_http2}<br />{0-atk_udp4, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn2, 4-atk_tcp_ack4, 5-atk_tcp_stomp_or_xmas2, 6-atk_gre4, 7-atk_gre4, 8-atk_std_or_udp, 9-atk_std_or_udp}<br />{0-atk_udp4, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn2, 4-atk_tcp_ack4, 5-atk_tcp_stomp_or_xmas2, 6-atk_gre4, 7-atk_gre4, 8-atk_std_or_udp}<br />{0-atk_udp4, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn2, 4-atk_tcp_ack4}<br />{0-atk_udp4, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn7, 4-atk_tcp_ack4, 5-atk_tcp_stomp_or_xmas2, 6-atk_gre4, 7-atk_gre4, 8-atk_std_or_udp, 9-atk_http2}<br />{0-atk_udp4, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn7, 4-atk_tcp_ack4, 5-atk_tcp_stomp_or_xmas2, 6-atk_gre4, 7-atk_gre4, 8-atk_std_or_udp, 9-atk_std_or_udp}<br />{0-atk_udp4, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn7, 4-atk_tcp_ack4, 5-atk_tcp_stomp_or_xmas2, 6-atk_gre4, 7-atk_gre4, 8-atk_std_or_udp}<br />{0-atk_udp4, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn7, 4-atk_tcp_ack4}<br />{0-atk_udp5, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp, 10-atk_http1}<br />{0-atk_udp_or_gre1, 1-atk_udp_vse1, 2-atk_tcp_syn3, 3-atk_tcp_ack_or_synack, 4-atk_tcp_ack_or_synack, 5-atk_tcp_stomp_or_xmas3, 6-atk_gre6, 7-atk_gre6, 8-atk_std_or_udp, 9-atk_std_or_udp, 10-atk_tcp_stomp_or_xmas3}<br />{0-atk_udp_or_gre2, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn10, 4-atk_tcp_ack2, 5-atk_tcp_stomp_or_xmas2, 6-atk_gre2, 7-atk_gre2, 8-atk_std_or_udp}<br />{0-atk_udp_or_gre2, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn10, 4-atk_tcp_ack2}<br />{0-atk_udp_or_gre2, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn10, 6-atk_gre2, 7-atk_gre2, 8-atk_std_or_udp, 9-atk_tcp_stomp_or_xmas2}<br />{0-atk_udp_or_gre2, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn10, 6-atk_gre2, 7-atk_gre2, 8-atk_std_or_udp}<br />{0-atk_udp_or_gre2, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn5, 4-atk_tcp_ack2, 5-atk_tcp_stomp_or_xmas2, 6-atk_gre2, 7-atk_gre2, 8-atk_std_or_udp, 9-atk_tcp_stomp_or_xmas2}<br />{0-atk_udp_or_gre2, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn5, 4-atk_tcp_ack2, 5-atk_tcp_stomp_or_xmas2, 6-atk_gre2, 7-atk_gre2, 8-atk_std_or_udp}<br />{0-atk_udp_or_gre2, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn5, 4-atk_tcp_ack2, 5-atk_tcp_stomp_or_xmas2, 6-atk_gre2, 7-atk_gre2, 8-atk_udp6}<br />{0-atk_udp_or_gre2, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn5, 4-atk_tcp_ack2, 5-atk_tcp_stomp_or_xmas2, 8-atk_std_or_udp}<br />{0-atk_udp_or_gre2, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn5, 4-atk_tcp_ack2, 6-atk_gre2, 7-atk_gre2, 8-atk_std_or_udp}<br />{0-atk_udp_or_gre2, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn5, 4-atk_tcp_ack2, 6-atk_gre2, 7-atk_gre2, 8-atk_udp6}<br />{0-atk_udp_or_gre2, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn5, 4-atk_tcp_ack2}<br />{0-atk_udp_or_gre2, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn5, 6-atk_gre2, 7-atk_gre2, 8-atk_std_or_udp, 9-atk_tcp_stomp_or_xmas2}<br />{0-atk_udp_or_gre2, 1-atk_udp_vse1, 2-atk_udp_dns, 3-atk_tcp_syn5, 6-atk_gre2, 7-atk_gre2, 8-atk_std_or_udp}<br />{1-atk_tcp_syn1, 3-atk_std_or_udp, 4-atk_std_or_udp, 5-atk_tcp_stomp_or_xmas1}<br />{1-atk_tcp_syn10, 2-atk_tcp_ack2}<br />{1-atk_tcp_syn5, 2-atk_tcp_ack2}<br />{1-atk_udp_vse1, 2-atk_tcp_syn3, 3-atk_tcp_ack_or_synack, 4-atk_std_or_udp, 5-atk_std_or_udp, 6-atk_tcp_stomp_or_xmas3}<br />{1-atk_udp_vse1, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp, 10-atk_http1}<br />{1-atk_udp_vse1, 3-atk_tcp_syn1, 4-atk_tcp_ack1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp, 10-atk_tcp_stomp_or_xmas1, 11-atk_tcp_stomp_or_xmas1}<br />{3-atk_tcp_syn1, 4-atk_tcp_ack1, 5-atk_tcp_stomp_or_xmas1, 6-atk_gre1, 7-atk_gre1, 10-atk_http1}<br />{3-atk_tcp_syn1, 4-atk_tcp_ack1, 6-atk_gre1, 7-atk_gre1, 10-atk_http1}<br />{3-atk_tcp_syn1, 4-atk_tcp_ack1, 6-atk_gre1, 7-atk_gre1, 9-atk_std_or_udp}<br />{3-atk_tcp_syn1, 6-atk_gre1, 7-atk_gre1, 10-atk_http1}<br />{6-atk_gre1, 7-atk_gre1, 10-atk_http1}<br />{9-atk_std_or_udp}</pre> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2018/VB2018-Liu-Wang.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2018 paper: Tracking Mirai variants&url=https://www.virusbulletin.com/virusbulletin/2018/12/vb2018-paper-tracking-mirai-variants"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2018/12/vb2018-paper-tracking-mirai-variants'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2018/12/vb2018-paper-tracking-mirai-variants&title=VB2018 paper: Tracking Mirai variants"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2018/12/vb2018-paper-tracking-mirai-variants&t=VB2018 paper: Tracking Mirai variants"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2018/12/vb2018-paper-tracking-mirai-variants"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>