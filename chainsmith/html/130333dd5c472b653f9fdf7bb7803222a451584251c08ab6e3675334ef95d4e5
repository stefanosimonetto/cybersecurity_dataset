<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: Protecting financial institutions from man-in-the-browser attacks</title>
<meta name="description" content="It is reported that more than 1,400 financial institutions have been targeted by attackers using banking trojans, and the top 15 targeted financial institutions were attacked by more than 50 per cent of the trojans in 2013. One major tactic of banking malware is the use of man-in-the-browser (web injection) attacks. In their VB2014 paper, Xinran Wang and Yao Zhao explain how banking malware conducts credential stealing and automatic transactions with man-in-the-browser attacks, and analyse several web injection scripts from prevalent banking malware families. They propose an application layer system to protect financial institutions from web injection attacks." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1547;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201601-protecting-financial-institutions"></a>VB2014 paper: Protecting financial institutions from man-in-the-browser attacks</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2016-01-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Xinran</span> <span class="surname">Wang</span></h3><span class="orgname">Shape Security</span>, <span class="orgdiv">USA</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Yao</span> <span class="surname">Zhao</span></h3><span class="orgname">Shape Security</span>, <span class="orgdiv">USA</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>It is reported that more than 1,400 financial institutions have been targeted by attackers using banking trojans, and the top 15 targeted financial institutions were attacked by more than 50 per cent of the trojans in 2013. One major tactic of banking malware is the use of man-in-the-browser (web injection) attacks. In their VB2014 paper, Xinran Wang and Yao Zhao explain how banking malware conducts credential stealing and automatic transactions with man-in-the-browser attacks, and analyse several web injection scripts from prevalent banking malware families. They propose an application layer system to protect financial institutions from web injection attacks. </p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2087" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2087" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3717518">Abstract</a></span></dt><dt><span class="sect1"><a href="#id3636041">1. Introduction</a></span></dt><dt><span class="sect1"><a href="#id3388760">2. Background</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4092435">2.1 From keylogging to form grabbing</a></span></dt><dt><span class="sect2"><a href="#id2627837">2.2 Web injection</a></span></dt><dt><span class="sect2"><a href="#id3099812">2.3 Automatic Transaction System</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3233133">3. Related work</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3957866">3.1 Web page inspection</a></span></dt><dt><span class="sect2"><a href="#id3810411">3.2 Web injection fingerprint extraction</a></span></dt><dt><span class="sect2"><a href="#id4181841">3.3 Web page obfuscation</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2337591">4. HoneyWeb system</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3714712">4.1 Overview of HoneyWeb</a></span></dt><dt><span class="sect2"><a href="#id3073571">4.2 Details of HoneyWeb</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2296375">5. Conclusion and future work</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3717518"></a>Abstract</h2></div></div></div><p>Banking malware is one of the most serious threats to both end-users and financial institutions. It is reported that over 1,400 financial institutions have been targeted by attackers using banking trojans and the top 15 targeted financial institutions were attacked by more than 50 per cent of the trojans in 2013. One major tactic of banking malware is the use of man-in-the-browser attacks (web injection attacks). In fact, almost all modern banking malware uses this tactic. In this paper, we first explain how banking malware conducts credential stealing and automatic transactions with man-in-the-browser attacks, and we analyse several web injection scripts from prevalent banking malware families. Then we present our survey of existing techniques against these malware families, as well as their limitations. Next, inspired by the observation that banking malware&rsquo;s web injection is based on a certain context of the target web pages, we propose HoneyWeb, an application layer system to protect financial institutions from web injection attacks. </p><p>The HoneyWeb system works as an HTTP reverse proxy in front of protected web servers, and injects fake context into the target page, according to the malware&rsquo;s web injection configuration. The fake context traps the banking malware&rsquo;s web injection scripts in an invisible HTTP element. An alert is also triggered when injection happens, so the system detects the ongoing attacks. More importantly, it prevents credential stealing as the web injection scripts are injected into invisible decoy elements. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3636041"></a>1. Introduction</h2></div></div></div><p>Banking malware is one of the most serious threats to both end-users and financial institutions. It is reported that over 1,400 financial institutions have been targeted by attackers using banking trojans and that the top 15 targeted financial institutions were targeted by more than 50 per cent of the trojans in 2013 [<span class="citation"><a href="#citation.1">1</a></span>]. </p><p>Man-in-the-browser (MitB) attacks are one of the main techniques used by prevalent banking malware such as Zeus, Gameover and SpyEye. A classic goal of a MitB attack is stealing credentials &ndash; not only usernames and passwords, but also other sensitive personal information such as social security numbers and PIN numbers. Generally, banking malware uses web injection techniques to get bank customers to type in their sensitive personal information when they are browsing legitimate web pages. This kind of attack is much more powerful than phishing. Recently, criminals have taken a further step to use Automatic Transaction Systems [<span class="citation"><a href="#citation.2">2</a></span>] to automatically and stealthily make transactions to steal money from bank customers. The sophisticated attacks even hide the real balance of the bank accounts, so that the victim doesn&rsquo;t know the attack is happening. </p><p>Existing solutions to mitigate man-in-the-browser attacks fall into two categories: detection and prevention. Web tripwire [<span class="citation"><a href="#citation.3">3</a></span>] and Zarathustra [<span class="citation"><a href="#citation.4">4</a></span>] detect if any unexpected content appears in the HTML text or the DOM (Document Object Model) of the browser. But one disadvantage of this type of approach is that the adversaries can upgrade their MitB tools to not only inject content, but also remove or disable detection scripts. Web page obfuscation [<span class="citation"><a href="#citation.5">5</a></span>] and polymorphism [<span class="citation"><a href="#citation.6">6</a></span>] can be used to stop the malicious content injection, or stop the automatic transactions. </p><p>In this paper, we propose HoneyWeb, which is a combination of both detection and prevention ideas. HoneyWeb uses existing obfuscation and polymorphism techniques to prevent web injection attacks. At the same time, using the philosophy of Honeynet, HoneyWeb itself injects fake content (called the honey object) into web pages in order to trap malicious web injection. </p><p>HoneyWeb has the ability to detect the compromise of a customer&rsquo;s machine with an extremely low false positive rate. This detection allows banks to notify victims and advise them to clean up the malware, change their credentials, etc. </p><p>This paper is organized as follows: we provide some background information in Section 2, and survey related work in Section 3. In Section 4 we describe the details of the HoneyWeb system. Then we discuss our future work and conclude the paper in Section 5. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3388760"></a>2. Background</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4092435"></a>2.1 From keylogging to form grabbing</h3></div></div></div><p>Keyogging is a common method for banking malware to steal credentials. Keyloggers capture every key typed into a system. But key log data can be messy and the technique misses any data the user inputs without using the keyboard. For example, keyloggers may miss sensitive data that a user copies and pastes into a form or selects via an options dropdown provided by autocomplete. </p><p>Some banks use a virtual keyboard for the password entry, which does not trigger keystrokes either. To overcome this, banking malware such as SpyEye and Zeus record screenshots at regular intervals or upon each mouse click in order to defeat the virtual keyboard. </p><p>Form grabbing retrieves authorization and login credentials from a web data form by intercepting the HTTP POST data before the data passes through encryption routines <a href="#citation.7">7</a>. This method is more effective than keylogger software because it acquires the user&rsquo;s credentials even if they are inputted using a virtual keyboard, autofill, or copy and paste. Form grabbing provides much cleaner, better structured data based on its variable names, such as username and password. </p><p>SpyEye implements form grabbing by hooking HttpSendRequestA and HttpSendRequestW to intercept content bearing HTTP requests (usually POST requests) made by <span class="emphasis"><em>Internet Explorer</em></span>-based browsers [<span class="citation"><a href="#citation.8">8</a></span>].</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2627837"></a>2.2 Web injection</h3></div></div></div><p>Keylogging and form grabbing are passive ways to steal credentials, while a man-in-the-browser attack (also known as web injection) is a proactive way to steal credentials. For example, MitB can steal additional credentials which may not be requested by banks, such social security number (SSN) and PIN. MitB is a technique in which malware hooks into the browser and manipulates data before it is displayed. A simple MitB attack scenario is described as follows: a user attempts to log into a banking website. Banking malware intercepts the request, then injects a form or extra fields such as SSN or PIN into the response. The victim unknowingly submits the sensitive information to the attacker. As a MitB attack happens at the presentation layer, there are no obvious indications of malicious activity. The domain is legitimate and the security certificate has not been tampered with, which all adds credibility to attacker&rsquo;s requests and can end up fooling the user. </p><p>Web injection for both SpyEye and Zeus is implemented as a WebInject configuration file. A WebInject file is a text file which contains JavaScript and HTML code. The file allows the banking malware to target financial institutions and inject specific code into victims&rsquo; browsers so they can modify the web pages the users access in real time. Banking malware equipped with a WebInject file can easily make deceptive forms or fields that ask victims for specific credentials (e.g. SSN and PINs). </p><p><a href="#figure.1">Figure 1</a> shows an example of WebInject configuration. The &lsquo;set_url&rsquo; parameter sets the attack target; the &lsquo;data_before&rsquo; parameter describes the bank web data to search for before the injection; the &lsquo;data_inject&rsquo; parameter is the actual script that will be injected. The example in <a href="#figure.1">Figure 1</a> shows that the code snippet will be injected into any URL that contains &lsquo;https://www.bankofexample.com/login.html&rsquo;, that it will be injected after the data in &lsquo;data_before&rsquo;, and the code itself takes the form of additional fields in the form requesting &lsquo;SSN&rsquo;. </p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="A simple web injection configuration." src="/uploads/images/figures/2016/01/Wang-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;A simple web injection configuration.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3099812"></a>2.3 Automatic Transaction System</h3></div></div></div><p>Unlike traditional WebInject files that inject extra forms or fields to steal victims&rsquo; credentials, a sophisticated web injection called ATS (Automatic Transaction System) can automatically execute transactions in the background [<span class="citation"><a href="#citation.2">2</a></span>]. It checks account balances and performs wire transfers using the victim&rsquo;s credentials without alerting them. ATS is invisible. ATS also changes account balances and hides illegitimate transactions. As long as a system remains infected with an ATS, its user will not be able to see the illegitimate transactions made from his accounts. </p><p>This essentially makes online banking fraud automatic, because cybercriminals no longer need user intervention to obtain money. </p><p><a href="#figure.2">Figure 2</a> shows an example of code injected into a WebInject file. It calls a remote file that contains the JavaScript or HTML code that will perform the injection. <a href="#figure.3">Figure 3</a> shows the actual JavaScript code that performs the wire transfer. </p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="ATS web injection configuration." src="/uploads/images/figures/2016/01/Wang-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;ATS web injection configuration.</b></p></div><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="An ATS JavaScript performing wire transfers." src="/uploads/images/figures/2016/01/Wang-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;An ATS JavaScript performing wire transfers.</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3233133"></a>3. Related work</h2></div></div></div><p>There are several other research projects that are closely related to our work.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3957866"></a>3.1 Web page inspection</h3></div></div></div><p>Reis et al. proposed &lsquo;web tripwire&rsquo; [<span class="citation"><a href="#citation.9">9</a></span>]. A web tripwire uses JavaScript code to detect textual changes in an HTTP web page, with the ability to report any changes both to the user and to the publisher. This JavaScript code runs in the user&rsquo;s browser and compares the page the user receives what it is ex-pected to be. This technique has been suggested as a countermeasure [<span class="citation"><a href="#citation.3">3</a></span>] to detect banking mal-ware&rsquo;s web injection. However, web tripwire is not secure: adversaries could remove the web tripwire if they wish to avoid detection.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3810411"></a>3.2 Web injection fingerprint extraction</h3></div></div></div><p>Bosatelli proposed &lsquo;Zarathustra&rsquo;, an automated system that detects the activity of banking trojans that perform web injection on the client side [<span class="citation"><a href="#citation.4">4</a></span>]. Zarathustra extracts the DOM differences by first rendering a banking website&rsquo;s page multiple times in an instrumented browser running on distinct and clean virtual machines. This builds a model of legitimate differences (e.g. due to ads, A/B testing, cookies, load balancing, anti caching mechanisms, etc.). Zarathustra repeats the same procedure on an infected machine and extracts and generalizes the differences called &lsquo;fingerprints&rsquo;. The fingerprints are generated on dedicated machines, which operate offline, without any interaction with real clients. The system has the advantage of requiring no reverse engineering effort: the only requirement is a binary sample of the malware to infect the controlled machine, which is used to identify differences in web pages generated by the malware&rsquo;s web injection techniques.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4181841"></a>3.3 Web page obfuscation</h3></div></div></div><p>As shown in <a href="#figure.1">Figure 1</a> and <a href="#figure.2">Figure 2</a>, Zeus and SpyEye use web injection configuration files to perform web injection. The location of injected code (context) is described in the &lsquo;data_before&rsquo; or &lsquo;data_after&rsquo; parameters of configuration files. Mador <span class="emphasis"><em>et al.</em></span> [<span class="citation"><a href="#citation.5">5</a></span>] proposed a method to obfuscate the context and thus prevent banking malware&rsquo;s web injection. They encrypt the web page content in JavaScript and only decrypt when the web page is loaded in a browser. The obfuscation method was originally used in exploit kits by cybercrimals to avoid detection. It is now used to confuse banking malware and prevent web injection. </p><p>Once banking malware is aware of the obfuscation, it can perform deobfuscation. However, security researchers have responded by making the variable name of the decrypted function polymorphic so that banking malware cannot detect the obfuscation. </p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2337591"></a>4. HoneyWeb system</h2></div></div></div><p>In this section, we describe the details of the HoneyWeb system, which combines prevention and detection of MitB attacks.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3714712"></a>4.1 Overview of HoneyWeb</h3></div></div></div><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="HoneyWeb deployment." src="/uploads/images/figures/2016/01/Wang-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;HoneyWeb deployment.</b></p></div><p>HoneyWeb works as a reverse proxy, which is transparent to both web server and browsers (as well as the end-users behind the browsers). <a href="#figure.5">Figure 5</a> shows the overall function of the HoneyWeb system. We define the honey object as some HTML, CSS or JavaScript code that is injected by HoneyWeb. An important feature of the honey object is that it is &lsquo;invisible&rsquo; to the human eye when the browser renders the web page.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="HoneyWeb modules." src="/uploads/images/figures/2016/01/Wang-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;HoneyWeb modules.</b></p></div><p>When a user visits a protected web page, HoneyWeb takes the original content of the requested URL and rewrites it with three basic changes (see <a href="#figure.5">Figure 5</a> as an example):</p><div class="orderedlist"><ol type="1"><li><p>It obfuscates the original content so that banking malware fails to inject its malicious content into the original target. In the example shown in <a href="#figure.5">Figure 5</a>, the target form is obfuscated, and for example, we can use techniques introduced in [<span class="citation"><a href="#citation.5">5</a></span>] to change HTML clear text to JavaScript code.</p></li><li><p>It adds a honey object to the web page, so that banking malware will match the fake content and inject their malicious content there. Note that the honey object will be invisible to the user when the web page is rendered by a real browser.</p></li><li><p>It adds a piece of JavaScript code to monitor the honey object. If anything malicious is injected into the honey object, it reports a detection result back to the HoneyWeb system.</p></li></ol></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3073571"></a>4.2 Details of HoneyWeb</h3></div></div></div><p>In this section, we describe the details of the three modules of the HoneyWeb system.</p><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id2129596"></a>4.2.1 Obfuscation module</h4></div></div></div><p>The obfuscation of HTML and JavaScript has been well studied in literature, e.g. [<span class="citation"><a href="#citation.5">5</a></span>]. HoneyWeb can use any existing obfuscation technique to prevent the target code (e.g. form) being found by banking malware (e.g. using a regular expression). As a reverse proxy, the procedure can be summarized as three steps:</p><div class="orderedlist"><ol type="1"><li><p>Given the web page URL, HoneyWeb loads the obfuscation configuration, which might be as simple as a regular expression.</p></li><li><p>HoneyWeb matches the content in the web page using the obfuscation configuration.</p></li><li><p>The matched content is replaced with a piece of JavaScript code that generates the same content.</p></li></ol></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id4309400"></a>4.2.2 Honey object injection</h4></div></div></div><p>As mentioned previously, the honey object is the fake content that is injected by HoneyWeb to be matched by the banking malware&rsquo;s injection rules such as exact matching or regular expressions. It seems to be quite simple to inject honey content that will satisfy the requirements, however, in practice there are a couple of problems to overcome.</p><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a class="chapter" id="id4629591"></a>Invisibility</h5></div></div></div><p>The honey object must be invisible to a real human user. To achieve this, HoneyWeb places the fake content inside a div or iframe that is invisible, by setting the proper CSS style (e.g. display:None).</p></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a class="chapter" id="id3617942"></a>No interference</h5></div></div></div><p>Injecting new content into a web page may interfere with the existing content, especially JavaScript. </p><p>For example, assume the banking malware looks for the string &lsquo;&lt;input name=&lsquo;password&rsquo; id=&lsquo;password&rsquo; type=&lsquo;password&rsquo;&gt;&rsquo; and inserts a line to request a PIN number below. A simple honey object may look like the code shown in <a href="#figure.6">Figure 6</a>. </p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Honey object example." src="/uploads/images/figures/2016/01/Wang-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Honey object example.</b></p></div><p>However, the honey object code in <a href="#figure.6">Figure 6</a> introduces an element with id name &lsquo;password&rsquo;, which also appears in the obfuscated code. This means there will be two inputs with the same ID &lsquo;password&rsquo; in the DOM. As indicated in the HTML specification, it leads to undefined behaviour when JavaScript calls document.getElementById(&ldquo;password&rdquo;). In general, we&rsquo;d like to avoid such interference being introduced by honey content. </p><p>HoneyWeb has a couple of solutions to deal with different situations. Here we list some of them: </p><div class="itemizedlist"><ul type="disc"><li><p>Put the honey object into HTML comments. This way, the honey object can still be matched and located by banking malware, but the honey object means nothing to the DOM.</p></li><li><p>Use JavaScript to avoid duplicated IDs. For example, we inject the honey object before the corresponding obfuscated code. Then we can use JavaScript to locate the elements in the honey object, and change the ID dynamically. For example, the code below avoids duplication of IDs via a line of JavaScript.</p></li></ul></div><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Example of changing the element ID at runtime." src="/uploads/images/figures/2016/01/Wang-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Example of changing the element ID at runtime.</b></p></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id4349853"></a>4.2.3 Honey object monitoring</h4></div></div></div><p>The purpose of the honey object is to passively detect when bank customers&rsquo; computers are compromised. The monitoring component detects the compromise and sends this information to the bank. </p><p>HoneyWeb injects a piece of JavaScript at random location in the original web page. The JavaScript code does the following work on the browser side: </p><div class="itemizedlist"><ul type="disc"><li><p>It schedules the malware detection code to run when the whole page is loaded and every few seconds periodically.</p></li><li><p>The detection code reads the static content of the honey object (i.e. via object.innerHTML) and DOM elements of the honey object.</p></li><li><p>If any injection into the honey object is detected, a synchronized data transfer (i.e. Ajax POSTs) is used to send an alert. Meanwhile, the code may also alert the end-user about the compromise by popping up a message.</p></li></ul></div><p>HoneyWeb collects both compromise alerts, as well as the login information (e.g. username and password), if possible. Next, HoneyWeb may send all the compromise information to the bank. The bank can inform its customers according to the login information via other communication methods such as email and phone calls.</p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2296375"></a>5. Conclusion and future work</h2></div></div></div><p>In this paper, we describe HoneyWeb, a system that prevents web injection attacks by banking malware, while also retaining the ability to detect the compromise of a machine by the malware. </p><p>Similar to HoneyNet that attracts malicious traffic, HoneyWeb uses invisible fake contents to attract malicious injected web content, and then detects the injection with very few or no false positives. This advantage allows banks to cooperate with their customers to remove the future lost cost by the compromise. </p><p>Currently, HoneyWeb relies on known malware signatures to determine which part of web content to be obfuscated, and then to inject invisible trapping contents. An improved system may combine automatic signature extraction systems such as Zarathustra [<span class="citation"><a href="#citation.10">10</a></span>] and HoneyWeb. This fully automated system can extract malware signature first, update obfuscation and honey object injection module automatically, and then finally alert on the compromise. </p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2637459"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Doherty, S.; Krysiuk, P.; Wueest, C. The State of Financial Trojans 2013, Security Response White Pa-pers, Symantec.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Kharouni, L. Automating Online Banking Fraud. Automatic Transfer System: The Latest Cybercrime Toolkit Feature. <span class="bibliosource"><a href="https://www.trendmicro.com/cloudcontent/us/pdfs/securityintelligence/whitepapers/wp_automating_online_banking_fraud.pdf" target="_blank">http://www.trendmicro.com/cloudcontent/us/pdfs/securityintelligence/whitepapers/wp_automating_online_banking_fraud.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Barnett, R.; Grossman, J. Web Application Defender&rsquo;s Cookbook: Battling Hackers and Protecting Users.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Bosatelli, F.; Zarathustra: Detecting Banking Trojans via Automatic, Platformindependent WebInjects Extraction. <span class="bibliosource"><a href="https://www.politesi.polimi.it/handle/10589/78343" target="_blank">https://www.politesi.polimi.it/handle/10589/78343</a></span>, 2013.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] Mador, Z.; Barnett, R. An Arms Race: Using Banking Trojan and Exploit Kit Tactics for Defense, RSA Conference, 2014.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] Wang, X.; Kohno, T.; Blakley, B. Polymorphism as a Defense for Automated Attack of Websites, Applied Cryptography and Network Security Lecture Notes in Computer Science, 2014.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] Capturing Online Passwords and Antivirus. Web log post. Business Information Technology Services, 24 July 2013.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] IOActive, Inc. Reversal and Analysis of Zeus and SpyEye Banking Trojans. <span class="bibliosource"><a href="https://www.ioactive.com/pdfs/ZeusSpyEyeBankingTrojanAnalysis.pdf" target="_blank">http://www.ioactive.com/pdfs/ZeusSpyEyeBankingTrojanAnalysis.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] Reis, C.; Gribble, S.; Kohno, Y.; Weaver, N. Detecting InFlight Page Changes with Web Tripwires, NSDI, 2008.</p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] Criscione, C.; Bosatelli, F.; Zanero, S,; Maggi, F. Zarathustra: Extracting WebInject Signatures from Banking Trojans, 20th Annual International Conference on Privacy, Security and Trust, 2014.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-WangZhao.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: Protecting financial institutions from man-in-the-browser attacks&url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-protecting-financial-institutions-man-browser-attacks"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2016/01/paper-protecting-financial-institutions-man-browser-attacks'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-protecting-financial-institutions-man-browser-attacks&title=VB2014 paper: Protecting financial institutions from man-in-the-browser attacks"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2016/01/paper-protecting-financial-institutions-man-browser-attacks&t=VB2014 paper: Protecting financial institutions from man-in-the-browser attacks"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-protecting-financial-institutions-man-browser-attacks"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>