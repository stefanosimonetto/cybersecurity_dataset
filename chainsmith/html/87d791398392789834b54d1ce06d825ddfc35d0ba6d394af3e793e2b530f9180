<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2019 paper: Never before had Stierlitz been so close to failure (or: what is a Soviet super-spy doing in a popular bundleware for Mac?)</title>
<meta name="description" content="This paper looks at a popular macOS bundleware that employs some surprising techniques. Not only does it employ anti-debugging, strings/API encryption and Mach-O runtime decompression techniques, its developers went as far as embedding a full backdoor component into the installer, granting it capabilities that extend way beyond what one might expect from a piece of installation software." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 6675;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-vb2019-paper-never-had-stierlitz-been-so-close-failure-or-what-soviet-super-spy-doing-popular-bundleware-mac"></a>VB2019 paper: Never before had Stierlitz been so close to failure (or: what is a Soviet super-spy doing in a popular bundleware for Mac?)</h1>
<h3><a class="chapter" name="h3-sergei-shevchenko"></a>Sergei Shevchenko</h3>
<p><em>Sophos, Australia</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-15108" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-15108" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-introduction">Introduction</a><br /> <a class="toc-level2" href="#h2-application">The application</a><br /> <a class="toc-level2" href="#h2-main-executable">Main executable</a><br /> <a class="toc-level2" href="#h2-listedupaithric-load">+[ListedUpaithric load]</a><br /> <a class="toc-level2" href="#h2-hidden-marker">Hidden marker</a><br /> <a class="toc-level2" href="#h2-main-function">main() function</a><br /> <a class="toc-level2" href="#h2-engine">The engine</a><br /> <a class="toc-level2" href="#h2-stringapi-encryption">String/API encryption</a><br /> <a class="toc-level2" href="#h2-anti-debugging-trick">Anti-debugging trick</a><br /> <a class="toc-level2" href="#h2-new-string-obfuscation-april-2019">New string obfuscation from April 2019</a><br /> <a class="toc-level2" href="#h2-vm-evasion">VM evasion</a><br /> <a class="toc-level2" href="#h2-crash-logger">Crash logger</a><br /> <a class="toc-level2" href="#h2-configuration">Configuration</a><br /> <a class="toc-level2" href="#h2-report-server">Report server</a><br /> <a class="toc-level2" href="#h2-tasks">Tasks</a><br /> <a class="toc-level2" href="#h2-engine-capabilities">Engine capabilities</a><br /> <a class="toc-level2" href="#h2-conclusion">Conclusion</a><br /> <a class="toc-level2" href="#h2-references">References</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>The popular <em>macOS</em> bundleware exemplar presented in this research employs some surprising techniques. Not only does it employ anti-debugging, strings/API encryption and Mach-O runtime decompression techniques, its developers went as far as embedding a full backdoor component into the installer, granting it capabilities that extend way beyond what one might expect from a piece of installation software.</p>
<p>In this research, we’ll dive into the installer’s Mach-O binary to demonstrate how it piggy-backs on ‘non-lazy’ Objective-C classes, the way it dynamically unpacks its code section in memory and decrypts its config. An in-depth analysis will reveal the structure of its engine and the full scope of its hidden backdoor capabilities, anti-debugging, VM evasion techniques and other interesting tricks that are typical in the <em>Windows</em> malware scene, but which aren’t commonly found in the unwanted apps that claim to be clean, particularly on the <em>Mac</em> platform.</p>
<p>This paper will reveal practical hands-on tricks used in Mach-O binary analysis under a Hackintosh VM guest, using <em>LLDB</em> debugger and <em>IDA Pro</em> disassembler, along with a very interesting marker found during the analysis.</p>
<p><em>DISCLAIMER: the software vendor won’t be named; this research is entirely focused on technical aspects of the reverse-engineered software.</em></p>
<p> </p>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>The user experience interacting with <em>Mac</em> applications normally starts from the download and installation process. In their quest to make this experience positive, many developers turn to application installation platforms that promise enhanced installation analytics, optimized footprint, and a guaranteed smoothness of installation.</p>
<p>What happens is that some of the application installation platforms bundle the title application with third-party software, such as adware or browser toolbars, leading to a setup that the end-user might find unwanted.</p>
<p>The word ‘unwanted’ is the key here. Once the target application is installed, users often encounter undesirable consequences, such as installed browser hijackers that modify the search engine for their web browser. In some cases, the highly questionable Mac removers might prompt the user to pay for the removal of non-existent threats.</p>
<p>To protect customers, for many years <em>Sophos</em> has detected such bundleware under the tag ‘potentially unwanted application’.</p>
<p>Detecting such applications is never a problem, as they normally belong to a league that is different from malware – it’s a way more simplistic breed, so to speak.</p>
<p>That’s not always the case though.</p>
<p>The fairly popular bundleware exemplar described in this paper employs techniques that any seasoned threat researcher will find rather amusing. Not only does it employ anti-debugging,</p>
<p>strings/API encryption, runtime decompression and VM evasion, its developers went as far as embedding a full backdoor component into the installer, granting it capabilities that extend way beyond what one might expect from a piece of installation software.</p>
<p>The power given to the installer practically enables full control over the target system. Even if this was done so that the company behind it would have ‘advanced analytics’ or the ability to push any third-party software it wants, what happens if this power is abused?</p>
<p>Boasting ‘tens of millions of downloads’ per day (whether this is true or not), this particular bundleware has potential access to a large number of Macs around the world. Given the amount of power it aggregates, it is a matter of duty for security folks to take a closer look at this software.</p>
<p> </p>
<h2><a class="chapter" name="h2-application"></a>The application</h2>
<p>The bundleware described in this post is a Cocoa application – an application built with the AppKit framework [<a href="#ref1">1</a>]. It is distributed as an application bundle. Among other resources contained in the bundle, the Info.plist file (an XML file) contains a key CFBundleExecutable that points to the main executable located in the MacOS folder.</p>
<p>From sample to sample, the name of the main executable varies. For example, it can be named <span class="monospace">radiosurgical</span> or <span class="monospace">Herculid</span>.</p>
<p>The digital signature used to sign the app varies constantly. At one point, it was signed by ‘Owen Bell’; in other cases, it was signed by ‘RuiQing Software Technology Beijing Inc.’; in September – October 2018, the app was signed by ‘AVSoftware EOOD’.</p>
<p> </p>
<h2><a class="chapter" name="h2-main-executable"></a>Main executable</h2>
<p>Compiled as Mach-O (the native executable file format for <em>macOS</em>), the main executable relies on Objective-C runtime <span class="monospace">libobjc.dylib</span>.</p>
<p>When the kernel first loads it, it makes sure it’s a valid Mach-O file, and then examines its <span class="monospace">mach_header</span> structure. Next, it loads the dynamic linker to load all the shared libraries that the main executable links against.</p>
<p>The dynamic linker thus initializes the Objective-C runtime, and then calls the program’s <em>main()</em> function.</p>
<p>What appears unusual, though, is that the entry point starts from garbage bytes – that is, the entry point has no valid code to execute:</p>
<pre>__text:0000000100001150        <span style="color: #ff0000;">start</span>    db    <span style="color: #0000ff;">4</span><br />__text:0000000100001151                  db    <span style="color: #0000ff;">4Ah </span> ; J<br />__text:0000000100001152 3                db    <span style="color: #0000ff;">3Eh </span> ; &gt;</pre>
<p>With no valid code at the entry point, how is it executed without crashing?</p>
<p>The answer lies in the concept of <em>non-lazy</em> (‘eager’) and <em>lazy</em> (‘on-demand’) implementation of Objective-C classes.</p>
<p>Non-lazy classes are realized when the program starts up. These classes will always implement the +<em>load</em> method.</p>
<p>Contrary to that, lazy classes (classes without the +<em>load</em> method) do not have to be realized immediately, but only when they receive a message for the first time (hence the term ‘lazy’).</p>
<p>Let’s check out Objective-C runtime’s own source [<a href="#ref2">2</a>] found in the <span class="monospace">objc-runtime-new.mm</span> file.</p>
<p>The snippet below realizes the non-lazy classes, retrieved with the <em>_getObjc2NonlazyClassList()</em> call:</p>
<pre><span style="color: #008000;">// Realize non-lazy classes (for +load methods and static instances)</span><br /><span style="color: #0000ff;">for</span> (EACH_HEADER) {<br />     classref_t *classlist = _getObjc2NonlazyClassList(hi, &amp;count);<br />     <span style="color: #0000ff;">for</span> (i = 0; i &lt; count; i++) {<br />             realizeClass(remapClass(classlist[i]));<br />     }<br />}</pre>
<p>Looking at the source of the Objective-C runtime [<a href="#ref3">3</a>] in <span class="monospace">objc-file.mm</span>, one can see that the<em> _getObjc2NonlazyClassList()</em> function collects non-lazy classes from the <span class="monospace">__objc_nlclslist</span> data section:</p>
<pre><span style="color: #008000;">//   function name | content type | section name - 'nl' stands for non-lazy</span><br />GETSECT(_getObjc2NonlazyClassList, classref_t, <span style="color: #800000;">"__objc_nlclslist"</span>);</pre>
<p>The <span class="monospace">__objc_nlclslist data</span> section of the main binary is very small. It enlists only two non-lazy classes: <span class="monospace">ListedUpaithric</span> and <span class="monospace">__ARCLite__</span>:</p>
<pre>__objc_nlclslist:0001000692C8 <span style="color: #ff0000;">__objc_nlclslist segment para public 'DATA' use64</span><br />__objc_nlclslist:0001000692C8       dq offset <span style="color: #ff0000;">_OBJC_CLASS_$_ListedUpaithric</span><br />__objc_nlclslist:0001000692D0       dq offset <span style="color: #ff0000;">_OBJC_CLASS_$___ARCLite__</span><br />__objc_nlclslist:0001000692D0 <span style="color: #ff0000;">__objc_nlclslist ends</span></pre>
<p>The <span class="monospace">ListedUpaithric</span> name, like many other class names, is random. For example, in another sample this class is called <span class="monospace">HoundingHusky</span>.</p>
<p>Both classes above have the +<em>load</em> method, and that method is called to realize both classes.</p>
<p> </p>
<h2><a class="chapter" name="h2-listedupaithric-load"></a>+[ListedUpaithric load]</h2>
<p>The +<em>load</em> method of the <span class="monospace">ListedUpaithric</span> class will be called before the +<em>load</em> method of the <span class="monospace">__ARCLite__</span> class, as <span class="monospace">ListedUpaithric</span> is enlisted as the first non-lazy class.</p>
<p>It’s worth noting that the +<em>load</em> method of the <span class="monospace">__ARCLite__</span> class contains no valid code. The reason is because it is located within the<span class="monospace"> __text</span> section of the executable, which is encrypted.</p>
<p>The +<em>load</em> method of the <span class="monospace">ListedUpaithric</span> class is physically located in a section of the executable that has a random name, such as <span class="monospace">__amorpha</span> or <span class="monospace">__mottled</span>.</p>
<p>Once run, the +<em>load</em> method will take a 32-byte XOR key that is hard-coded in the body and use that key to decrypt the <span class="monospace">__text</span> section (around 15KB in size) of the executable, including the +<em>load</em> method of the <span class="monospace">__ARCLite__</span> class.</p>
<p>The decryption routine relies on a special anchor stored in the <span class="monospace">__text</span> section. The virtual address of this anchor is used to describe the virtual address and virtual size of the encrypted <span class="monospace">__text</span> section.</p>
<p>For example, the anchor can be located at the virtual address <span class="monospace">0x100001CF0</span>, as shown below:</p>
<pre>__text:000100001CF0 23         <span style="color: #ff0000;">anchor</span>    <span style="color: #0000ff;">db 23h</span> ; #     <span style="color: #0000ff;">; DATA XREF: decrypt_code+101</span><br />__text:000100001CF1 2B                        <span style="color: #0000ff;">db 2Bh</span> ; +<br />...</pre>
<p>In that case, the decryptor uses the address of the anchor to describe the parameters of the <span class="monospace">__text</span> section. In the snippet below, the decryptor makes the <span class="monospace">__text</span> section writeable and executable, by assigning a new protection to it. To do that, it takes the address of the anchor (<span class="monospace">0x100001CF0</span>) and subtracts <span class="monospace">0xBA0</span> from it to locate the start of the <span class="monospace">__text</span> section (<span class="monospace">0x100001150</span>):</p>
<pre>vm_protect(mach_task_self(),        <span style="color: #008000;">// decoded stings: 'vm_protect', 'mach_task_self_'</span><br />    (char *)&amp;anchor – 0xBA0,    <span style="color: #008000;">// 0x100001150 –&gt; start of the __text section</span><br />    0x37F2,                         <span style="color: #008000;">// size of the entire __text section: 14,322 bytes</span><br />    0,<br />    VM_PROT_ALL)        <span style="color: #008000;">// assign read, write, and execute access rights</span></pre>
<p>Once the entire <span class="monospace">__text</span> section is decrypted, the anchor shown above gets decrypted into the following text:</p>
<pre>__text:000100001CF0 MaximMaximovicIsayev db '<span style="color: #008000;">Maxim Maximovich Isayev</span>',<span style="color: #008000;">0</span></pre>
<p>Being next in line, the +<em>load</em> method of the <span class="monospace">__ARCLite__</span> non-lazy class is called to perform further initialization.</p>
<p>The decrypted <span class="monospace">__text</span> section is quite small – it’s a valid code section containing a valid entry point, and it consists of another layer of decryptor and decompressor:</p>
<pre>__text:0000000100001150               <span style="color: #ff0000;">public  start</span><br />__text:0000000100001150    <span style="color: #ff0000;">start    proc  near</span><br />__text:0000000100001150               push    <span style="color: #0000ff;">0</span><br />__text:0000000100001152               mov     rbp, rsp<br />__text:0000000100001155               and     rsp, <span style="color: #0000ff;">0FFFFFFFFFFFFFFF0h</span><br />__text:0000000100001159               mov    rdi, [rbp+<span style="color: #0000ff;">8</span>]</pre>
<p>With both non-lazy classes realized, the entry point above receives control. From there, the <em>main()</em> function of the executable is called, followed by <em>_exit()</em>.</p>
<p> </p>
<h2><a class="chapter" name="h2-hidden-marker"></a>Hidden marker</h2>
<p>Once decrypted, the anchor point within the encrypted <span class="monospace">__text</span> section represents itself as a hidden text that is quite interesting by itself.</p>
<p>The following are some facts about Maxim Maximovich Isayev.</p>
<table border="0">
<tbody>
<tr>
<td><img class="framed" src="/files/cache/65257f90165c6c165f96dffa19f42b9c_f4215.png" alt="Stierlitz.png" width="250" height="167" /></td>
<td style="width: 65%;">
<p>Maxim Maximovich Isayev (Максим Максимович Исаев) is the real name of Max Otto von Stierlitz, the lead character [<a href="#ref4">4</a>] in a popular Russian book series written in the 1960s.</p>
<p>A Soviet James Bond [<a href="#ref5">5</a>], Stierlitz takes a key role in SS Reich Main Security Office in Berlin during World War II. Working as a deep undercover agent within the SS, he diverts the German nuclear ‘Vengeance Weapon’ research program into a fruitless dead-end.</p>
</td>
</tr>
</tbody>
</table>
<p> </p>
<p>Leaving a hidden marker like this could indicate an intentionally planted false flag. Regardless of the intention, this maker stays constant across the entire family of this bundleware.</p>
<p> </p>
<h2><a class="chapter" name="h2-main-function"></a>main() function</h2>
<p>Once the entry point within the <span class="monospace">__text</span> section is called, the <em>main()</em> function that follows it will read an internal chunk of data with a size of ~300KB.</p>
<p>This encrypted data is stored in a separate section of the executable.</p>
<p>The data will be read, its CRC32-based hash validated, then decrypted and further decompressed into a buffer, allocated with the <em>vm_allocate()</em> function.</p>
<p>The decompression is achieved by dynamically loading the <span class="monospace">libz.1.dylib</span> library, and calling the <em>uncompress()</em> API from it.</p>
<p>The decompressed data has a size of ~800KB and Mach-O executable format (<span class="monospace">MH_BUNDLE</span> type). This data is loaded from memory as a plug-in with the help of the <em>NSCreateObjectFileImageFromMemory()</em> and <em>NSLinkModule()</em> APIs.</p>
<p>This method is equivalent to dynamic DLL loading on <em>Windows</em>. It is described on the <em>macOS</em> man page [<a href="#ref6">6</a>] as a way to programmatically load plug-ins [<a href="#ref7">7</a>] after a program starts executing.</p>
<p> </p>
<h2><a class="chapter" name="h2-engine"></a>The engine</h2>
<p>The loaded module represents itself as an engine driven by the JavaScript files.</p>
<p>Some of the scripts reside in the app’s Resources directory in an encrypted form, forming an SDK. Other JavaScript files are fetched from a remote server as tasks (internally called ‘offers’, as they are designed to offer/advertise other products).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/0c60151c3822ee969a426b5c34fe3182_f4216.png" alt="schema_engine.png" width="840" height="331" /><span class="centered-caption"> Figure 1: Engine driven by JavaScript files.</span></p>
<p>The downloaded tasks rely on high-level function calls from the SDK. This allows the composing of tasks with a very flexible logic.</p>
<p>There are several classes exposed by the engine to the SDK, such as:</p>
<ul>
<li>System controller</li>
<li>Installer</li>
<li>Screenshot controller</li>
<li>Task manager</li>
<li>System info collector</li>
<li>Event reporter</li>
<li>Application manager</li>
<li>File downloader</li>
</ul>
<p>The engine itself is executed on the <em>macOS</em> platform natively.</p>
<p>For example, a JavaScript task may attempt to elevate the privilege level with the following call:</p>
<pre>function relaunchWithRoot() {<br />    installer.relaunchingWithRoot = true;<br />    var successR = installer.elevatePrivilegedTask();</pre>
<p>The <em>elevatePrivilegedTask()</em> call in JavaScript has a corresponding method in the engine’s class, such as <span class="monospace">tr54jds23</span>. The engine exposes this method to JavaScript code so that it can be called directly from the engine.</p>
<p>When <span class="monospace">tr54jds23-&gt;</span><em>elevatePrivilegedTask()</em> is executed, the engine calls another method: <span class="monospace">ICTaskManager-&gt;</span><em>elevatePrivilegedTask()</em>.</p>
<p>That will, in turn, create the task <span class="monospace">ICTaskManager-&gt;</span><em>root_Task</em>, which will then create an authorization with the '<span class="monospace">system.privilege.admin</span>' flag. Next, the task is executed with the <em>AuthorizationExecuteWithPrivileges()</em> call.</p>
<p>In practice, this may invoke a dialog asking for the admin password so that the task can be executed as root.</p>
<p> </p>
<h2><a class="chapter" name="h2-stringapi-encryption"></a>String/API encryption</h2>
<p>The engine module stores the names of all critical functions and most critical strings encoded. In one of the most recent samples, there are 1,228 encoded strings, decoded with 1,055 different functions. That is, some strings are decoded with the same function.</p>
<p>All the string-decoding functions use different keys, but they implement one of the following three algorithms:</p>
<ul>
<li>Simple XOR key</li>
<li>Simple key subtraction</li>
<li>Auto-incremented XOR key</li>
</ul>
<p>One of the string decryption routines can be demonstrated with the anti-debugging trick explained in the next section.</p>
<p> </p>
<h2><a class="chapter" name="h2-anti-debugging-trick"></a>Anti-debugging trick</h2>
<p>An attempt to attach to or run the bundleware app under a debugger produces the following error:</p>
<pre><span style="color: #0000ff;">mac:/ user$</span> sudo lldb /Users/user/Installer/Installer.app<br />(lldb) target create "/Users/user/Installer/Installer.app"<br />Current executable set to '/Users/user/Installer/Installer.app' (x86_64).<br />(lldb) r<br />Process 1280 launched: '/Users/user/Installer/Installer.app/Contents/MacOS/radiosurgical' (x86_64)<br /><span style="color: #ff0000;">Process 1280 exited with status = 45 (0x0000002d)</span></pre>
<p>The anti-debugging defence is provided with a <em>ptrace()</em> request named <span class="monospace">PT_DENY_ATTACH (0x1F)</span>, called from the function below:</p>
<pre><span style="color: #0000ff;">ptrace</span> = 0x515D5A5D;                                      <span style="color: #008000;">// encrypted 'ptrace' string: 5D 5A 5D 51</span><br /><span style="color: #0000ff;">ptrace_plus_4</span> = 0x5752;                                 <span style="color: #008000;">// 52 57</span><br /><span style="color: #0000ff;">ptrace_plus_6</span> = 0x33;                                    <span style="color: #008000;">// 33</span><br /><span style="color: #0000ff;">ptrace</span>[0] = add_2D_xor(0x5D, 0);                  <span style="color: #008000;">// decrypt 1st char (5D ^ (2D + 0))</span><br /><span style="color: #0000ff;">i = 1;</span>                                                               <span style="color: #008000;">// start loop from the 2nd char</span><br />do<br />{                                                                      <span style="color: #008000;">// decrypt the rest</span><br />     <span style="color: #0000ff;">ptrace</span>[<span style="color: #0000ff;">i</span>] = add_2D_xor(<span style="color: #0000ff;">ptrace</span>[<span style="color: #0000ff;">i</span>], <span style="color: #0000ff;">i</span>);          <span style="color: #008000;">// ptrace[i] ^= 2D + i</span><br />     <span style="color: #0000ff;">i</span>++;<br />}<br />while (<span style="color: #0000ff;">i</span> != 6);                                                  <span style="color: #008000;">// 6 characters from the 2nd char, including /0</span><br /><span style="color: #0000ff;">fn_ptrace</span> = <span style="color: #0000ff;">dlsym</span>(RTLD_NEXT, &amp;<span style="color: #0000ff;">ptrace</span>);        <span style="color: #008000;">// get proc address from the dylibs</span><br />return <span style="color: #0000ff;">fn_ptrace</span>(<span style="color: #ffff00;">PT_DENY_ATTACH</span>, 0, 0, 0);  <span style="color: #008000;">// call ptrace(), deny tracing</span></pre>
<p>If the process is being debugged, as defined in <span class="monospace">man ptrace</span> [<a href="#ref8">8</a>], it will exit with the exit status of <span class="monospace">ENOTSUP</span> (45), ‘<em>error, not supported</em>’. Otherwise, it sets a flag that denies future traces – an attempt to debug it with this flag set will result in a segmentation violation exception.</p>
<p>By stepping over the <em>deny_attach()</em> call (or NOP-ing the five bytes of the call), the anti-debugging trick above can easily be circumvented:</p>
<pre>-&gt;  <span style="color: #ffff00;">0x103dd1ff5 &lt;+25&gt;: callq 0x103e30cd3     ; call the function with ptrace()</span><br />      0x103dd1ffa &lt;+30&gt;: callq 0x103de03aa    ; ICCrashLogger::sharedLogger()<br />      0x103dd1fff &lt;+35&gt;: movq %rax, %rdi<br />(lldb) <span style="color: #ff0000;">re w pc '$pc+5'</span>      <span style="color: #008000;">; step over deny_attach() by adding 5 bytes to $pc</span><br />(lldb) <span style="color: #ff0000;">x/2i $pc</span>                <span style="color: #008000;"> ; now $pc (RIP) points to the next instruction</span><br />-&gt;  0x103dd1ffa: e8 ab e3 00 00 callq 0x103de03aa     ; ICCrashLogger::sharedLogger()<br />      0x103dd1fff: 48 89 c7  movq    %rax, %rdi</pre>
<p> </p>
<h2><a class="chapter" name="h2-new-string-obfuscation-april-2019"></a>New string obfuscation from April 2019</h2>
<p>In April 2019, the string encryption algorithm was updated.</p>
<p>This time, each hard-coded integer number within a decryption function is encoded with a separate function.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td>For example, number 6 is encoded as:</td>
<td>The same code is collapsed by <em>Hex-Rays Decompiler</em> into:</td>
</tr>
<tr>
<td class="monospace"><span style="color: #ff0000;">get_6    proc near</span>               <br />    push    rbp<br />    mov    rbp, rsp<br />    mov    al, 3       ; al = 3<br />    shl    al, 2       ; al = 12<br />    movsx    ecx, al    ; ecx = 12<br />    mov    eax, 65     ; eax = 65<br />    xor    edx, edx    ; edx = 0<br />    idiv    ecx     ; 65 / 12, eax = 5<br />    mul    cl    ; eax = 60<br />    mov    cl, 65      ; cl = 65<br />    sub    cl, al    ; cl = 65 - 60 = 5<br />    inc    cl    ; cl = 6<br />    movsx    eax, cl    ; result = 6<br />    pop    rbp<br />    retn<br /><span style="color: #ff0000;">get_6    endp</span></td>
<td class="monospace">signed __int64 get_6()<br />{<br />    return 6;<br />}</td>
</tr>
</tbody>
</table>
<p> </p>
<h2><a class="chapter" name="h2-vm-evasion"></a>VM evasion</h2>
<p>The engine is able to detect the presence of a virtual environment through the method<em> checkPossibleFraud()</em>. This method is exposed to JavaScript, where it can be called as:</p>
<pre>var isVm = system.checkPossibleFraud()&gt;0 ? 1 : 0;</pre>
<p>To achieve that, the engine compiles a so-called ‘fraud’ report that consists of the following details:</p>
<ul>
<li><span class="monospace">MAC_L</span>: MAC and IP addresses for all network interfaces, to recognize sandboxes that rely on a common network setup.</li>
<li><span class="monospace">vmVendor</span>: The engine checks if the MAC address starts from an address that is common for a given VM manufacturer. For example, if the MAC address starts from ‘00:1C:42’, the installer determines that it’s running under a <em>Parallels</em> VM.<br /><br />Using this trick for over 35 known MAC prefixes, it reports the following VM vendors (the vendor names are shown exactly as the installer reports them):
<ul style="list-style-type: circle;">
<li>Parallels ID.</li>
<li>Egenera, Inc.</li>
<li>First Virtual Corporation</li>
<li>linux kernal virtual machine (kvm)</li>
<li>Virtual Iron Software, Inc. (was: Katana Technology)</li>
<li>Paravirtual Corporation (was: Accenia, Inc.)</li>
<li>Virtual Conexions</li>
<li>Virtual Computer Inc.</li>
<li>virtual access, ltd.</li>
<li>Virtual Instruments</li>
<li>Virtualtek. Co. Ltd</li>
<li>VMware, Inc.</li>
<li>Microsoft Corporation (was: Connectix)</li>
<li>Microsoft Corp.</li>
<li>Microsoft Network Load Balancing Service Heartbeat</li>
<li>Microsoft XCG</li>
<li>Oracle Corporation (was: Virtual Iron Software)</li>
<li>Oracle Corporation (was: Xsigo Systems, Inc.)</li>
<li>Oracle Corporation (was: Sun Microsystems, Inc)</li>
<li>CADMUS COMPUTER SYSTEMS</li>
</ul>
</li>
<li><span class="monospace">Host UUID</span>: Reported by <em>gethostuuid()</em>, to recognize common sandboxes.</li>
<li><span class="monospace">hddName</span>: The engine collects data reported by <em>DADiskCreateFromBSDName()</em> for the ‘<span class="monospace">/dev/disk0</span>’ device, to recognize HDD, presumably common for some sandbox installations.</li>
<li><span class="monospace">usbFraud</span>: A list of USB devices, presumably common for certain VMs, as reported by calling:<br /><span class="monospace">ioreg -l | grep -e 'USB Vendor Name'</span></li>
<li><span class="monospace">dispRats</span>: Reports display ratio, to recognize display ratios used in common sandboxes.</li>
<li><span class="monospace">lastMove</span>: Reports mouse position since the last mouse movement event, to see if a VM has been restored from a clean snapshot.</li>
<li><span class="monospace">lastRbt</span>: Gets system up-time, since last reboot, to recognize a VM restored from a snapshot.</li>
<li><span class="monospace">dmgLoc</span>, <span class="monospace">fromDMG</span>: Gets full path filename of the DMG file, in case it’s executed by a sandbox under a generic name, such as using a file hash.</li>
<li><span class="monospace">wndPos</span>: Gets position and size of the app’s window.</li>
<li><span class="monospace">msePos</span>: Gets mouse position, to see if the mouse is in use.</li>
</ul>
<p> </p>
<h2><a class="chapter" name="h2-crash-logger"></a>Crash logger</h2>
<p>The crash logger sends a GET request to a remote script, disguised as a PNG file:</p>
<p class="monospace" style="padding-left: 30px;">http[://]ec2-54-191-37-103.us-west-2.compute.amazonaws[.]com/black.png</p>
<p>The stats it submits to the remote script are encoded as URL parameters:</p>
<ul>
<li class="monospace">crash=1</li>
<li class="monospace">os=mac</li>
<li class="monospace">appkit=%APP_KIT%</li>
<li class="monospace">ver=%VERSION%</li>
<li class="monospace">ldebug=%LIVE_DEBUG%</li>
<li class="monospace">backtrace=%CALL_BACKTRACE%</li>
</ul>
<p> </p>
<h2><a class="chapter" name="h2-configuration"></a>Configuration</h2>
<p>The installer uses two configuration files. The first one is dynamically extracted from an unused cavity of the installer’s own DMG file. This configuration is written into the DMG file (a process internally called ‘injection’) after the DMG file is built, and is encrypted with the AES-128 algorithm.</p>
<p>To locate the encrypted config within the DMG file, the installer module parses the contents of the file. For each pair of bytes, it subtracts one byte from another, until it locates the following signature that consists of seven 64-bit integers, such as:</p>
<p class="monospace" style="padding-left: 30px;">__const:0000000103E51C40 signature dq <span style="color: #0000ff;">0Fh</span>, <span style="color: #0000ff;">9</span>, <span style="color: #0000ff;">3Eh</span>, <span style="color: #0000ff;">23h</span>, <span style="color: #0000ff;">7</span>, <span style="color: #0000ff;">86h</span>, <span style="color: #0000ff;">0Ch</span></p>
<p>Once located, the config is extracted and decrypted. As shown in the example below, the extracted configuration specifies the URL of an application to download and install:</p>
<pre><strong><span style="color: #ff0000;">PRODUCT_TITLE</span></strong> = Duolingo%202017<br /><strong><span style="color: #ff0000;">PRODUCT_DESCRIPTION</span></strong> = To%20install%20Duolingo%202017%20for%20Mac%20click%20Continue.<br /><strong><span style="color: #ff0000;">PRODUCT_VERSION</span></strong> = Mac<br /><strong><span style="color: #ff0000;">PRODUCT_PUBLIC_DATE</span></strong> = 2017<br /><strong><span style="color: #ff0000;">PRODUCT_FILE_NAME</span></strong> = Duolingo%20Setup%20<br /><strong><span style="color: #ff0000;">PRODUCT_FILE_SIZE</span></strong> = 260.8%20MB<br /><strong><span style="color: #ff0000;">CHNL</span></strong> = download7-Duolingo<br /><strong><span style="color: #ff0000;">DOWNLOAD_URL</span></strong> = http%3A%2F%2Fcdn.downloadfree2.com%2Fmacsoftware%2FBlueStacks-Installer.dmg<br /><strong><span style="color: #ff0000;">PRODUCT_LOGO_URL</span></strong> = http%3A%2F%2Fwww.download7.co%2Fgamegraphics%2F90.png<br /><strong><span style="color: #ff0000;">ROOT_IF_INSTALLED</span></strong> = com.bluestacks.BlueStacks<br /><strong><span style="color: #ff0000;">APP_NAME</span></strong> = BlueStacks<br /><strong><span style="color: #ff0000;">TOS_URL</span></strong> = http%3A%2F%2Fwww.download7.co%2Feula.html<br /><strong><span style="color: #ff0000;">TYP</span></strong> = http%3A%2F%2Fpiroga.space%2Fpages%2FDM%2FDMTYP.html%3Foffers%3D<br /><strong><span style="color: #ff0000;">EXIT_PAGE_URL</span></strong> = http%3A%2F%2Fpiroga.space%2Fpages%2FDM%2FDMInter.html<br /><strong><span style="color: #ff0000;">PRIVACY_URL</span></strong> = http%3A%2F%2Fwww.download7.co%2Fprivacy.html<br /><strong><span style="color: #ff0000;">ISPBROWSER</span></strong> = ch<br /><strong><span style="color: #ff0000;">%40REPORT_ADD_PARAMS</span></strong> = IRONBRO_ID%253D9309%2526INST_GUID%253D4136ef6c-c79c-49b3-9400-5f99e43ac3e0<br /><strong><span style="color: #ff0000;">INST_GUID</span></strong> = 4136ef6c-c79c-49b3-9400-5f99e43ac3e0</pre>
<p>The second configuration file is provided as a JavaScript file, and is decrypted with the other SDK files from the app’s Resources directory.</p>
<p>This configuration defines multiple operational parameters, such as report and ad servers:</p>
<pre>var appInfo = {<br />report: '<span style="color: #a52a2a;">http://rp.[REMOVED].com</span>',<br />ad_url: '<span style="color: #a52a2a;">http://os.[REMOVED].com/MacDarwenDLM/?v=5.0</span>',<br />requires_root: <span style="color: #a52a2a;">false</span>,<br />root_if_installed: [''],<br />skip_vm_check: <span style="color: #a52a2a;">false</span>,<br />...</pre>
<p> </p>
<h2><a class="chapter" name="h2-report-server"></a>Report server</h2>
<p>The report server from the configuration is used to receive posted reports.</p>
<p>The example below demonstrates what data is posted to the report server:</p>
<pre><strong><span style="color: #ff0000;">AC</span></strong> = DarwenDLM<br /><strong><span style="color: #ff0000;">PrID</span></strong> = MacDarwenDLM<br /><strong><span style="color: #ff0000;">PrSub</span></strong> = MacDarwenDLM<br /><strong><span style="color: #ff0000;">RS</span></strong> = Q<br /><strong><span style="color: #ff0000;">IRVER</span></strong> = 106.1712<br /><strong><span style="color: #ff0000;">CHNL</span></strong> = download7-Duolingo<br /><strong><span style="color: #ff0000;">PROD_TITLE</span></strong> = Duolingo 2017<br /><strong><span style="color: #ff0000;">schemeName</span></strong> = MacDarwenDLM<br /><strong><span style="color: #ff0000;">OSName</span></strong> = OSX<br /><strong><span style="color: #ff0000;">OSVer</span></strong> = 10.12<br /><strong><span style="color: #ff0000;">OSLang</span></strong> = en<br /><strong><span style="color: #ff0000;">_makeDate</span></strong> = 201711091722<br /><strong><span style="color: #ff0000;">SDT</span></strong> = 20181004195204931<br /><strong><span style="color: #ff0000;">UID</span></strong> = 9C0C266E-266D-4D98-B83C-BCB2A3018EB7<br /><strong><span style="color: #ff0000;">BRW</span></strong> = Safari<br /><strong><span style="color: #ff0000;">OSPlat</span></strong> = 2<br /><strong><span style="color: #ff0000;">MAC_L</span></strong> = [REMOVED]000000000000%3A127.0.0.1%3A24%3A0<br /><strong><span style="color: #ff0000;">hddSize</span></strong> = 107374182400<br /><strong><span style="color: #ff0000;">_makerver</span></strong> = total20171107115116<br /><strong><span style="color: #ff0000;">Isuseradmin</span></strong> = 1<br /><strong><span style="color: #ff0000;">isVmDef</span></strong> = 1<br /><strong><span style="color: #ff0000;">inst_flv</span> </strong>= no_injection_106.1712<br /><strong><span style="color: #ff0000;">dwa.SrcNo</span></strong> = 1<br /><strong><span style="color: #ff0000;">QuitPage</span></strong> = welcomePage<br /><strong><span style="color: #ff0000;">RepCnt</span></strong> = 1<br /><strong><span style="color: #ff0000;">ofrClPrm</span></strong> = 266E-266D-4D98-B83C-BCB2A3018EB7</pre>
<p>As seen in the example, the data it posts contains basic system information, such as macOS version number (OSVer), language (OSLang), MAC and IP addresses for all network interfaces (MAC_L), default browser name (BRW), HDD size, whether a VM was detected or not (isVmDef), whether the user is admin (isuseradmin), and some other parameters.</p>
<p>The collected data is assembled into a text, then encrypted with AES-128, and posted to the server:</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/6415/7486/1034/Stierlitz-fig2.png" alt="Stierlitz-fig2.png" width="661" height="177" /> <span class="centered-caption">Figure 2: The collected data.</span></p>
<p> </p>
<h2><a class="chapter" name="h2-tasks"></a>Tasks</h2>
<p>Remote tasks are received encrypted from the ad server, as shown below:</p>
<pre>POST <span style="color: #0000ff;">os.[REMOVED].com/MacDarwenDLM/?v=5.0</span><br />USER-AGENT: <span style="color: #0000ff;">ICMAC</span><br />Response:<br />     Header: X-ICSCT-SERVER-NAME: <span style="color: #0000ff;">ads-slave-1111-production-us-west-2-i-07e9c6437616f3e49</span><br />     Data: 85,368 bytes binary [<span style="color: #a52a2a;">6c ec 6c 99...</span>]</pre>
<p>When the received task is decrypted, its data is split into named sections. Each section is surrounded with the following comments:</p>
<pre><span style="color: #0000ff;">var</span> namestartstr = '<span style="color: #a52a2a;">&lt;!--SECTION NAME="</span>';<br /><span style="color: #0000ff;">var</span> nameendstr = '<span style="color: #a52a2a;">"--&gt;</span>';<br /><span style="color: #0000ff;">var</span> sectionendstr = '<span style="color: #a52a2a;">&lt;!--/SECTION--&gt;</span>';</pre>
<p>The parser extracts JavaScript code from those sections. That code will then rely on APIs exposed by the SDK to drive the engine that exposes its own API interface to the SDK.</p>
<p>The nature of the received tasks may depend on the presence of a VM (a condition internally called ‘fraud’).</p>
<p>An analysis of the tasks received from the ad server reveals <em>no malicious activity</em>.</p>
<p> </p>
<h2><a class="chapter" name="h2-engine-capabilities"></a>Engine capabilities</h2>
<p>The bundleware’s engine consists of several components, capable of doing the following:</p>
<ul>
<li>Browser manager
<ul style="list-style-type: circle;">
<li>detects supported browsers, such as <em>Safari</em>,<em> Google Chrome</em>, <em>Firefox</em></li>
<li>terminates browser process</li>
<li>sets new home page</li>
<li>reads <em>Chrome</em> preferences</li>
<li>clears <em>Chrome</em> cache</li>
<li>reads <em>Firefox</em> preferences</li>
</ul>
</li>
<li>Logger
<ul style="list-style-type: circle;">
<li>takes full screen snapshot</li>
<li>takes installer window’s snapshot</li>
<li>submits ‘live debug’ information to the remote server</li>
</ul>
</li>
<li>Screenshot controller
<ul style="list-style-type: circle;">
<li>takes full screen snapshot with the mouse location</li>
<li>collects a set of screenshots</li>
<li>takes snapshot of a given window</li>
</ul>
</li>
<li>Task manager
<ul style="list-style-type: circle;">
<li>downloads and executes new tasks</li>
<li>submits task execution output</li>
<li>runs tasks with the privilege level elevated to root</li>
<li>creates authorization for tasks, using given credentials</li>
</ul>
</li>
<li>System controller
<ul style="list-style-type: circle;">
<li>collects system OS version</li>
<li>collects MAC address and IP for all interfaces</li>
<li>collects all cookies from <em>Safari</em>, <em>Google Chrome</em>, <em>Firefox</em></li>
<li>collects the list of all installed applications</li>
<li>collects the list of running applications</li>
<li>checks for the presence of a VM</li>
<li>gets home page for all supported browsers</li>
<li>gets system default browser</li>
<li>adds/removes applications to/from dock</li>
<li>adds applications to dock</li>
<li>checks if user is admin</li>
<li>checks if a given process runs as admin</li>
<li>gets user name</li>
<li>gets user locale/language</li>
<li>gets free space of start-up volume</li>
<li>gets info about connected iOS devices:
<ul>
<li>device class (<em>iPod</em>/<em>iPad</em>/<em>iPhone</em>)</li>
<li>device identifier</li>
<li>device serial number</li>
</ul>
</li>
<li>builds ‘fraud’ report (info about detected VM)</li>
<li>collects the following lists:
<ul>
<li>running processes</li>
<li>keyboard input sources</li>
<li>graphics card names</li>
<li>USB devices</li>
<li>apps launched automatically on login</li>
<li>launch daemons and agents</li>
<li>user launch agents</li>
<li><em>Google Chrome</em> extension names</li>
<li><em>Safari</em> extension names</li>
<li><em>Firefox</em> extension names</li>
</ul>
</li>
<li>searches for files in the specified directory</li>
<li>checks if the specified application is running</li>
<li>terminates specified applications</li>
<li>encrypts/decrypts data</li>
<li>gets user paths, such as local applications, download paths</li>
<li>checks if an application is installed by the specified name</li>
<li>reads key values from user defaults</li>
<li>gets default apps for all available extensions</li>
<li>adds an app to dock as persistent item</li>
<li>removes all persistent apps from dock for specified path</li>
<li>reads text files</li>
<li>copies given directory to a new location</li>
<li>deletes the specified directory</li>
<li>runs specified script with ‘/bin/sh’, as root</li>
<li>checks if the specified file exists</li>
<li>gets detailed HDD information</li>
<li>collects network information</li>
<li>downloads files</li>
<li>reads/sets window title for running apps</li>
<li>reads mouse position</li>
<li>displays alerts</li>
<li>launches tasks/applications as root</li>
<li>copies/moves files</li>
<li>opens URLs</li>
<li>saves data to files</li>
<li>checks if path is writable</li>
<li>creates/deletes directories</li>
<li>gets specified file size/attributes.</li>
</ul>
</li>
</ul>
<p> </p>
<h2><a class="chapter" name="h2-conclusion"></a>Conclusion</h2>
<p>Being a legitimate distribution platform, the techniques employed by this popular bundleware product conceal a very powerful engine.</p>
<p>When viewed from a certain angle, this engine resembles a backdoor as it unlocks full access to the system.</p>
<p>The sheer power of the engine is made covert with the wisely engineered trickery. Some of its methods, such as loading code from memory, are known from the<em> The Mac Hacker’s Handbook</em> [<a href="#ref9">9</a>], and rather belong to the world of malware.</p>
<p>Given that the engine is driven by symmetrically encrypted remote tasks, any researcher who pays attention to detail couldn’t help but wonder what would happen if the control of its engine were to be intercepted.</p>
<p>Careful analysis of these techniques also demonstrates a disturbing trend we’re witnessing – the continued ‘spill’ of the traditional <em>Windows</em> malicious techniques, such as run-time packing, strings/API obfuscation and memory injection into the <em>Mac</em> world.</p>
<p>Even though the installer itself is legitimate, an analysis of state-of-art code where these techniques are honed to perfection is vitally important for researchers to understand what opportunities exist on the <em>macOS</em> platform, to be better prepared for the challenges that lie ahead of us.</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] AppKit. <a href="https://developer.apple.com/documentation/appkit" target="_blank">https://developer.apple.com/documentation/appkit</a>.</p>
<p><a class=" anchor" name="ref2"></a>[2] objc-runtime-new.mm. <a href="https://opensource.apple.com/source/objc4/objc4-532/runtime/objc-runtime-new.mm" target="_blank">https://opensource.apple.com/source/objc4/objc4-532/runtime/objc-runtime-new.mm</a>.</p>
<p><a class=" anchor" name="ref3"></a>[3] objc-file.mm. <a href="https://github.com/opensource-apple/objc4/blob/master/runtime/objc-file.mm" target="_blank">https://github.com/opensource-apple/objc4/blob/master/runtime/objc-file.mm</a>.</p>
<p><a class=" anchor" name="ref4"></a>[4] Stierlitz. Wikepedia. <a href="https://en.wikipedia.org/wiki/Stierlitz" target="_blank">https://en.wikipedia.org/wiki/Stierlitz</a>.</p>
<p><a class=" anchor" name="ref5"></a>[5] Was the Soviet James Bond Vladimir Putin’s role model? BBC. <a href="https://www.bbc.com/news/magazine-39862225" target="_blank">http://www.bbc.com/news/magazine-39862225</a>.</p>
<p><a class=" anchor" name="ref6"></a>[6] NSModule – programmatic interface for working with modules and symbols. <a href="http://mirror.informatimago.com/next/developer.apple.com/documentation/Darwin/Reference/ManPages/man3/NSModule.3.html" target="_blank">http://mirror.informatimago.com/next/developer.apple.com/documentation/Darwin/Reference/ManPages/man3/NSModule.3.html</a>.</p>
<p><a class=" anchor" name="ref7"></a>[7] NSObjectFileImage – programmatic interface for working with Mach-O files. <a href="http://mirror.informatimago.com/next/developer.apple.com/documentation/Darwin/Reference/ManPages/man3/NSObjectFileImage.3.html" target="_blank">http://mirror.informatimago.com/next/developer.apple.com/documentation/Darwin/Reference/ManPages/man3/NSObjectFileImage.3.html</a>.</p>
<p><a class=" anchor" name="ref8"></a>[8] Ptrace – process tracing and debugging. <a href="http://mirror.informatimago.com/next/developer.apple.com/documentation/Darwin/Reference/ManPages/man2/ptrace.2.html" target="_blank">http://mirror.informatimago.com/next/developer.apple.com/documentation/Darwin/Reference/ManPages/man2/ptrace.2.html</a>.</p>
<p><a class=" anchor" name="ref9"></a>[9] Miller, C. The Mac Hacker’s Handbook. <a href="https://www.amazon.com/Mac-Hackers-Handbook-Charlie-Miller/dp/0470395362" target="_blank">https://www.amazon.com/Mac-Hackers-Handbook-Charlie-Miller/dp/0470395362</a>.</p>
<p> </p>
<p> </p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2019/VB2019-Shevchenko.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2019 paper: Never before had Stierlitz been so close to failure (or: what is a Soviet super-spy doing in a popular bundleware for Mac?)&url=https://www.virusbulletin.com/virusbulletin/2019/12/vb2019-paper-never-had-stierlitz-been-so-close-failure-or-what-soviet-super-spy-doing-popular-bundleware-mac"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2019/12/vb2019-paper-never-had-stierlitz-been-so-close-failure-or-what-soviet-super-spy-doing-popular-bundleware-mac'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2019/12/vb2019-paper-never-had-stierlitz-been-so-close-failure-or-what-soviet-super-spy-doing-popular-bundleware-mac&title=VB2019 paper: Never before had Stierlitz been so close to failure (or: what is a Soviet super-spy doing in a popular bundleware for Mac?)"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2019/12/vb2019-paper-never-had-stierlitz-been-so-close-failure-or-what-soviet-super-spy-doing-popular-bundleware-mac&t=VB2019 paper: Never before had Stierlitz been so close to failure (or: what is a Soviet super-spy doing in a popular bundleware for Mac?)"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2019/12/vb2019-paper-never-had-stierlitz-been-so-close-failure-or-what-soviet-super-spy-doing-popular-bundleware-mac"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>