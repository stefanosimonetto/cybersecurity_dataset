<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2017 paper: Peering into spam botnets</title>
<meta name="description" content="Despite spam botnets being so important in the lifecycle of malware, recent publications describing massive spam operations (which can be counted on the fingers of one hand) have either skipped over the technical details or else concentrated too much on high-level aspects for our liking. In this paper, we will describe a few of the most prominent spam botnets out there: Emotet, Kelihos, Necurs, Send-Safe and Tofsee." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 5740;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-vb2017-paper-peering-spam-botnets"></a>VB2017 paper: Peering into spam botnets</h1>
<h3><a class="chapter" name="h3-jaroslaw-jedynak-amp-maciej-kotowicz"></a>Jarosław Jedynak &amp; Maciej Kotowicz</h3>
<p>CERT Poland</p>
<p><em>Copyright © 2017 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-11610" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-11610" class="ccm-expand-collapse-toc-content"><p><a class="toc-level1" href="#h1-vb2017-paper-peering-spam-botnets">VB2017 paper: Peering into spam botnets</a><br /> <a class="toc-level3" href="#h3-jaroslaw-jedynak-amp-maciej-kotowicz">Jarosław Jedynak &amp; Maciej Kotowicz</a><br /> <a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-1-introduction">1. Introduction</a><br /> <a class="toc-level2" href="#h2-2-emotet">2. Emotet</a><br /> <a class="toc-level3" href="#h3-21-spam-operation">2.1 Spam operation</a><br /> <a class="toc-level2" href="#h2-3-kelihos">3. Kelihos</a><br /> <a class="toc-level3" href="#h3-31-peer-handshake">3.1 Peer handshake</a><br /> <a class="toc-level3" href="#h3-32-peer-list-exchange">3.2 Peer list exchange</a><br /> <a class="toc-level2" href="#h2-4-necurs">4. Necurs</a><br /> <a class="toc-level3" href="#h3-41-high-level-overview">4.1 High-level overview</a><br /> <a class="toc-level3" href="#h3-42-binary-resources">4.2 Binary resources</a><br /> <a class="toc-level3" href="#h3-43-dga-and-p2p">4.3 DGA and P2P</a><br /> <a class="toc-level3" href="#h3-44-campc-communication">4.4 C&amp;C communication</a><br /> <a class="toc-level3" href="#h3-45-spam-module-communication">4.5 Spam module – communication</a><br /> <a class="toc-level3" href="#h3-46-proxyddos-module-communication">4.6 Proxy/DDoS module – communication</a><br /> <a class="toc-level3" href="#h3-47-tracking">4.7 Tracking</a><br /> <a class="toc-level2" href="#h2-5-send-safe">5. Send-Safe</a><br /> <a class="toc-level3" href="#h3-51-communication">5.1 Communication</a><br /> <a class="toc-level4" href="#h4-511-configuration">5.1.1 Configuration</a><br /> <a class="toc-level4" href="#h4-512-communication-udp">5.1.2 Communication – UDP</a><br /> <a class="toc-level4" href="#h4-513-communication-https">5.1.3 Communication – HTTPS</a><br /> <a class="toc-level3" href="#h3-54-email-templates">5.4 Email templates</a><br /> <a class="toc-level3" href="#h3-55-curious-spamming-habits">5.5 Curious spamming habits</a><br /> <a class="toc-level2" href="#h2-6-tofsee">6. Tofsee</a><br /> <a class="toc-level3" href="#h3-61-technical-analysis">6.1 Technical analysis</a><br /> <a class="toc-level3" href="#h3-62-communication-protocol">6.2 Communication protocol</a><br /> <a class="toc-level3" href="#h3-63-resources">6.3 Resources</a><br /> <a class="toc-level4" href="#h4-631-type-5">6.3.1 Type 5</a><br /> <a class="toc-level4" href="#h4-632-type-11">6.3.2 Type 11</a><br /> <a class="toc-level4" href="#h4-633-type-8">6.3.3 Type 8</a><br /> <a class="toc-level4" href="#h4-634-type-23-40">6.3.4 Type 23-40</a><br /> <a class="toc-level3" href="#h3-64-tracking">6.4 Tracking</a><br /> <a class="toc-level2" href="#h2-7-closing-words">7. Closing words</a><br /> <a class="toc-level2" href="#h2-acknowledgements">Acknowledgements</a><br /> <a class="toc-level2" href="#h2-references">References</a><br /> <a class="toc-level2" href="#h2-hashes-sha256">Hashes (sha256)</a><br /> <a class="toc-level2" href="#h2-appendix-kelihos-encryption-algorithms">Appendix A: Kelihos encryption algorithms</a><br /> <a class="toc-level3" href="#h3-appendix-a1-bitcrypt1">Appendix A1: bitcrypt1</a><br /> <a class="toc-level3" href="#h3-appendix-a2-bitcrypt2">Appendix A2: bitcrypt2</a><br /> <a class="toc-level3" href="#h3-appendix-a3-mathops-crypt">Appendix A3: mathops crypt</a><br /> <a class="toc-level3" href="#h3-appendix-a4-full-encryption-routine">Appendix A4: Full encryption routine</a><br /> <a class="toc-level2" href="#h2-appendix-b-send-safe-email-template">Appendix B: Send-Safe Email Template</a><br /> <a class="toc-level2" href="#h2-appendix-c-tofsee-type-11-script">Appendix C: Tofsee Type 11 Script</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>Someone recently said that the exploit kit landscape is dying – but this certainly is not the case for the spamming industry, which, over the last year, was probably the biggest source of infections worldwide.</p>
<p>Despite spam botnets being so important in the lifecycle of malware, recent publications describing massive spam operations (which can be counted on the fingers of one hand) have either skipped over the technical details or else concentrated too much on high-level aspects for our liking.</p>
<p>In this paper, we will describe a few of the most prominent spam botnets out there: Emotet, Kelihos, Necurs, Send-Safe and Tofsee.</p>
<p>Our main goal is to describe the technical details of the network protocols used by these botnets to communicate with peers and C&amp;Cs. We will show how to dissect and reimplement basic communication (including, but not limited to, receiving new spam, downloading malicious attachments and detecting updates to the core spam bot or its sub modules).</p>
<p>We will also present the results of our monitoring, including how and what is being spammed, and by which botnet. We will conclude with some funny quirks that one can find while looking closely at spamming operations.</p>
<p>Since these botnets aren't new, there is some information about them already in circulation. Unfortunately this knowledge is often fragmented, or hidden within companies. With our talk we hope to share our insights, and allow everyone to track and destroy spam on their own.</p>
<p> </p>
<h2><a class="chapter" name="h2-1-introduction"></a>1. Introduction</h2>
<p>Spam is probably the biggest vector of infection for both commodity and targeted malware. One of the reasons it has earned this position is thanks to spam botnets, malware that has only one job: to send as many malicious mails as possible. Most of these beasts operate for years and are very resilient to takedowns, largely due to their complicated infrastructure and protocols. It's possible to find analyses of the protocols used by some more notorious spammers, but most of them are quite outdated. In this paper we aim to provide a detailed description of how these malware communicate and how we can leverage this information to gain a better understanding of their operations and get more malware directly from the source.</p>
<p>We hand picked a few families that either have been engaged with spamming for very long time or whose protocol is unique and outstanding. The list comprises:</p>
<ul>
<li>Emotet (<em>its spamming module to be precise, and its newest version</em>)</li>
<li>Kelihos</li>
<li>Necurs</li>
<li>Send-Safe</li>
<li>Tofsee</li>
</ul>
<p> </p>
<h2><a class="chapter" name="h2-2-emotet"></a>2. Emotet</h2>
<p>Emotet is an offspring [<a href="#ref1">1</a>] of the long-lived malware family that started with Cridex and allegedly give rise to such malware as Dridex and Dyre. It appeared in June 2014 [<a href="#ref2">2</a>], targeting clients of German banks. It was, and as far we know still is, distributed only by spam emails that originate from previously infected machines. In the past it was trivial to distinguish Emotet's malspam from others – the emails always impersonated DHL shipment orders and had very unique URL patterns under which the malware was located.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Example URL [<a href="#ref3">3</a>]</strong></td>
<td><strong>Purpose</strong></td>
</tr>
<tr>
<td>http://freylau.de/VMfWxYqJme</td>
<td>First landing page</td>
</tr>
<tr>
<td>www.buziaki.gorzow.pl/CgHsoRfvpqGk2/8114721795964851.zip</td>
<td>Redirect</td>
</tr>
<tr>
<td>Dhl_Status_zu_Sendung_340839262847_____ID_S01_DHL__DEM06_MS02_06_2015___A23_21_15.exe</td>
<td>Final malware</td>
</tr>
</tbody>
</table>
<p class="centered-caption"><a class=" anchor" name="table1"></a>Table 1: URL patterns found in Emotet malspam.</p>
<p>Today, they have shifted their tactics and are using a more generic approach, dropping <em>Word</em> documents that contain a PowerShell command responsible for downloading and executing Emotet.</p>
<p>While we didn't analyse closely how the spamming module operated in the past, based on how general C&amp;C communication changes, we can assume that it had very little in common with today's protocol. During our research we found Emotet's protocol, while rather simple, quite fascinating. We won't delve into the details of it here, since we have already described it on our blog [<a href="#ref4">4</a>], but recall that it is an AES-encrypted blob of binary data.</p>
<p>Based on educated guesses, we discovered that the binary blob appearing in communication was, in fact, a modified version of <em>Google</em>'s proto buffers. At the time of writing we are not sure if the modification came from sloppy custom implementation or by other means. For the purpose of our analysis we assumed that it was a deliberate move.</p>
<p> </p>
<h3><a class="chapter" name="h3-21-spam-operation"></a>2.1 Spam operation</h3>
<p>While most spamming malware is designed to behave like an SMTP client – the malware communicates directly with the email servers of its victims – the authors of Emotet took a different approach. Many properly configured SMTP servers either blacklist or greylist messages from untrusted or unknown sources – these mechanisms were introduced to prevent users from receiving the bulk of unsolicited messages.</p>
<p>To work around that, Emotet uses trusted services like <em>Gmail</em>, <em>Yahoo</em> and <em>Live.com</em> as its relays, abusing firstly stolen credentials, for which there is a separate module. This is clearly visible in configuration data received from the C&amp;C:</p>
<pre>id: 2075010<br />mail_server: "sd-smartermail.sdsolutions.de"<br />port: 25<br />login: "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1f767179705f6f6d707b767e327d7e727d7a6d78317b7a">[email&#160;protected]</a>"<br />password: "xxxxxxxxx"<br />email: "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ff96919990bf8f8d909b969ed29d9e929d9a8d98d19b9a">[email&#160;protected]</a>", id: 2129057<br />mail_server: "mx1.kabsi.at"<br />port: 587<br />login: "h2199a00"<br />password: "xxxxxx"<br />email: "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9df5afaca4a4fcadadddf6fcffeef4b3fce9">[email&#160;protected]</a>", id: 2136311<br />2Dhl_Status_zu_Sendung_340839262847_____ID_S01_DHL__DEM06_MS02_06_2015___A23_21_15.exe<br />mail_server: "host72.kei.pl"<br />port: 587<br />login: "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6a0e13191a0510131e0518471a0e102a0105061a180f07441a06">[email&#160;protected]</a>"<br />password: "xxxxxxxxxx"<br />email: "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="30544943405f4a49445f421d40544a705b5f5c4042555d1e405c">[email&#160;protected]</a>",</pre>
<p> </p>
<h2><a class="chapter" name="h2-3-kelihos"></a>3. Kelihos</h2>
<p>Kelihos, also known as Hlux, is one of the older spam botnets. It was first discovered around December 2010. Finally, in April 2017, after many previous attempts to take it down, the botnet operator was arrested, and the FBI began sinkholing the botnet [<a href="#ref5">5</a>]. For this reason, this part of the paper is provided mostly for historical reasons – the techniques described probably won't work, because the peers are dead (unless Kelihos comes back from the dead in the future). Nevertheless, we think that this botnet is interesting enough that it still deserves a mention here. A great write-up on Kelihos communication can be found on the <em>Fortinet</em> blog [<a href="#ref6">6</a>]. The scope of this paper is very similar, though we focus more on the implementation side, and provide a few bits of code. We also think that Kelihos's unusual approach to encryption is interesting to read about.</p>
<p> </p>
<h3><a class="chapter" name="h3-31-peer-handshake"></a>3.1 Peer handshake</h3>
<p>Kelihos uses surprisingly solid cryptography in its P2P communication – each bot has its own key pair (generated using the Crypto++ library). Communication is encrypted using asymmetric cryptography, and because of this, it's impossible to decrypt it, even when the whole traffic is captured.</p>
<p>When Kelihos wants to perform a key exchange with a peer, it generates a 16-byte random key, and signs it with its private key with PKCS1 RSA/SHA1.</p>
<p>The handshake message contains this random data, a signature for it, and a public key. Kelihos packs these fields using a simple structure, presented in <a href="#figure1">Figure 1</a>.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/524ee8461d712822a57ec68656326a81_f2230.png" alt="kelihos_blocks.png" width="510" height="279" /><span class="centered-caption"><a class=" anchor" name="figure1"></a>Figure 1: Peer handshake packet structure.</span></p>
<p>The handshake can be generated with the help of the following Python code:</p>
<pre class="prettyprint">flags = 'e78673536c555545'.decode('hex') # timestamp and magic<br />blocks = '03104840'.decode('hex')<br /># [0x03, 0x10, 0x48, 0x40]<br /># 3 blocks, 16 bytes of random data, 0x48 bytes of public key, 0x40 bytes of signed data<br />hdr = flags + blocks</pre>
<pre class="prettyprint">randbytes = Random.new().read(16)<br />pubkey = rsakey.publickey().exportKey(format='DER')[20:]<br />hash = hashlib.sha1(randbytes).digest()<br />pad = '01ffffffffffffffffffffffffffffffffffffffffffffffffffff00'.decode('hex')<br />sha1_designator = '3021300906052b0e03021a05000414'.decode('hex')<br />signature = rsakey.sign(pad + sha1_designator + hash, '')[0]<br />signature = number.long_to_bytes(signed)<br />handshake_request = hdr + randbytes + pubkey + signature</pre>
<p>Receiving data is more complicated – data is first encrypted using a Blowfish cipher in CBC mode, and after that, we have a similar structure (three blocks, with random data, public key, and signature). Example decryption code:</p>
<pre class="prettyprint">data = sock.recv(100000)</pre>
<pre class="prettyprint">rsa_enc, blowfish_enc = kelihos_get_blocks(data) # parse blocks - response has two ones<br />blowtmp = rsakey.decrypt(rsa_enc)<br />blowkey = blowtmp[-16:]</pre>
<pre class="prettyprint">print 'KELIHOS_HANDSHAKE_RESPONSE'<br />print ' - rsa_encoded', rsa_enc.encode('hex')<br />print ' - rsa_decrypt', blowtmp.encode('hex')<br />print ' - rsa_result', blowkey.encode('hex')<br />print ' - blowfish_enc', blowfish_enc.encode('hex')</pre>
<pre class="prettyprint">iv = blowfish_enc[1:9]<br />cipher = Blowfish.new(blowkey, Blowfish.MODE_CBC, iv)<br />msg = cipher.decrypt(blowfish_enc[9:])</pre>
<pre class="prettyprint">some_data = msg[:12]<br />rsa_key = msg[12:12+72]<br />signeddata = msg[12+72:12+72+64]</pre>
<pre class="prettyprint">print ' - blowfish_dec', msg.encode('hex')<br />print ' - some_data', some_data.encode('hex')<br />print ' - rsa_key', rsa_key.encode('hex')<br />print ' - signeddata', signeddata.encode('hex')</pre>
<pre class="prettyprint">key = RSA.importKey(rsa_key)<br />sign = key.encrypt(signeddata, 'ignored')[0]</pre>
<pre class="prettyprint">print ' - sign', sign.encode('hex')<br />print ' - hash', sign[-20:].encode('hex')</pre>
<p>This mechanism of key exchange is a good example of correctly used asymmetric crypto – it actually made the analysis of traffic harder, because we needed to dump private keys if we wanted to analyse raw traffic.</p>
<p> </p>
<h3><a class="chapter" name="h3-32-peer-list-exchange"></a>3.2 Peer list exchange</h3>
<p>During peer data exchange, Kelihos serializes all relevant information into a certain big structure, which is then encrypted.</p>
<p>In contrast to the handshake, most encryption methods used here are home-made by the malware's authors and are cryptographically not very sound.</p>
<p>Most interesting, and a quite unique idea, is the use of eight encryption algorithms in a random order determined by a random 16 bytes from the header.</p>
<p>First, a list of encryption functions is created and shuffled (with a random generator seeded by a 16-byte header). The seeding algorithm looks like this:</p>
<pre class="prettyprint">void crypto_function_list(crypto_function_list *crypt, string_t *seed)<br />{<br />   strc = init_temporary_structure();<br />   strc.str = seed;<br />   strc.offset = 0;</pre>
<pre class="prettyprint">   list_insert_by_string_offset(&amp;strc, func_xor_1byte);<br />   list_insert_by_string_offset(&amp;strc, func_viscrypt);<br />   list_insert_by_string_offset(&amp;strc, func_mathops);<br />   list_insert_by_string_offset(&amp;strc, func_bitcrypt1);<br />   list_insert_by_string_offset(&amp;strc, func_pairwise_swap);<br />   list_insert_by_string_offset(&amp;strc, func_simple);<br />   list_insert_by_string_offset(&amp;strc, func_reverse);<br />   list_insert_by_string_offset(&amp;strc, func_bitcrypt2);</pre>
<pre class="prettyprint">   it = strc.list.tail-&gt;prev; // cyclic list<br />   while (it != strc.list.tail)<br />   {<br />      append_list(crypt, &amp;it-&gt;data);<br />      it = it-&gt;prev;<br />   }<br />   free_list(&amp;strc.list);<br />   return crypt;<br />}</pre>
<p>Where <span class="monospace">list_insert_by_string_offset</span> is using consecutive characters from the seed as offsets for inserting functions in random order into the function list.</p>
<pre class="prettyprint">void list_insert_by_string_offset(temporary_struct *strc, crypto_function func)<br />{<br />   seed = strc-&gt;str-&gt;length ? *getCharAtPos(strc-&gt;str, strc-&gt;offset) : strc-&gt;list.size;<br />   offset = seed % (strc-&gt;list.size + 1);<br />   list_insert_at_posiion(&amp;strc-&gt;list, offset, func);<br />   if (++strc-&gt;offset &gt;= strc-&gt;str-&gt;length) strc-&gt;offset = 0;<br />}</pre>
<p>After that, functions are called consecutively in plaintext.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Name</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td class="monospace">xor_1byte</td>
<td>XOR every byte in the string with the same byte</td>
</tr>
<tr>
<td class="monospace">viscrypt</td>
<td>Visual crypt algorithm (XOR <span class="monospace">string</span> with <span class="monospace">string[1:]+chr(len(string))</span>)</td>
</tr>
<tr>
<td class="monospace">mathops</td>
<td>Meaningless mathematical operations on every byte (see <a href="#h2-appendix-kelihos-encryption-algorithms">Appendix</a>)</td>
</tr>
<tr>
<td class="monospace">bitcrypt1</td>
<td>Meaningless bitwise operations on every byte (see <a href="#h2-appendix-kelihos-encryption-algorithms">Appendix</a>)</td>
</tr>
<tr>
<td class="monospace">bitcrypt2</td>
<td>Meaningless bitwise operations on every byte (see <a href="#h2-appendix-kelihos-encryption-algorithms">Appendix</a>)</td>
</tr>
<tr>
<td class="monospace">pairwise_swap</td>
<td>swap(string[0], string[1]), swap(string[2], string[3]), swap(string[4], string[5]), . . .</td>
</tr>
<tr>
<td class="monospace">simple swap</td>
<td>Nibbles in every byte</td>
</tr>
<tr>
<td class="monospace">reverse</td>
<td>Reverse string</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 2: Functions.</p>
<p>Non-obvious encryption methods are shown in <a href="#h2-appendix-kelihos-encryption-algorithms">Appendix A</a>.</p>
<p>All these encryption functions are trivially decryptable with a bit of cryptanalysis. It's possible that the malware creators think that combining multiple weak encryption algorithms will create a strong one, but we believe that this is just an attempt at obfuscation and slowing researchers down, not really a proper encryption scheme. Especially since, after that, standard Blowfish encryption is used again (with a random 0x10 bytes as a key). Finally, the Blowfish key is encrypted with the remote peer's public key.</p>
<p>Now the malware creates three data blocks:</p>
<ul>
<li>random bytes determining the decryption function order</li>
<li>encrypted Blowfish key</li>
<li>encrypted peer list</li>
</ul>
<p>The first block is additionally encrypted with the <span class="monospace">viscrypt</span> and <span class="monospace">bitcrypt1</span> methods, then a few bytes of random data are prepended to it, and finally, one byte with obfuscated length of that random data is prepended.</p>
<p>All three blocks are concatenated, and encrypted with the <span class="monospace">bitcrypt1</span> method, just in case.</p>
<p>After that, the length of every block is packed into the header. The header contains six DWORDs, with the following meanings:</p>
<ul>
<li>block 1 length = HEADER[1] - HEADER[0]</li>
<li>block 2 length = HEADER[2] - HEADER[1]</li>
<li>block 3 length = HEADER[3] - HEADER[2]</li>
<li>unk1 length = HEADER[4] - HEADER[3] - 95</li>
<li>message type = HEADER[5] - HEADER[4] - 197</li>
</ul>
<p>All but the first four bytes of the header are additionally encrypted with the <span class="monospace">viscrypt</span> and <span class="monospace">bitcrypt2</span> methods. This probably sounds really convoluted and complicated – because it is. While using asymmetric cryptography and Blowfish is a good idea, we don't see any reason for all the other complicated steps – unless the malware creators just wanted to waste researchers' time. The whole encryption process is summarized in <a href="#figure2">Figure 2</a>.</p>
<p><a class="zoom-img" title="Figure 2: Kelihos encryption method." href="/files/1115/1186/2913/kelihos_encryption_graph.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/a3bd38f47a09ba184d145348d15079d4_f2231.png" alt="kelihos_encryption_graph.png" width="800" height="229" /></a><span class="centered-caption"><a class=" anchor" name="figure2"></a>Figure 2: Kelihos encryption method.</span></p>
<p>If we want to decrypt data we need to go through all these steps, but in reverse. First, we have to decrypt the 'header', and compute the block lengths. After that, we decrypt all three blocks using <span class="monospace">bitcrypt1</span>, and recover the Blowfish key and random seed. Finally, we decrypt serialized peers data using that key and seed. A commented routine for most of this operation can by found in <a href="#h2-appendix-kelihos-encryption-algorithms">Appendix A</a>.</p>
<p> </p>
<h2><a class="chapter" name="h2-4-necurs"></a>4. Necurs</h2>
<p>Necurs is one of the biggest botnets in the world – with more than 1.5 million infected computers, it has active bots in almost all countries, several hundred thousand of which are online at any given time.</p>
<p>Compromised machines usually send spam emails to a large number of recipients, though the botnet has the capability to act as a proxy or perform DDoS attacks.</p>
<p> </p>
<h3><a class="chapter" name="h3-41-high-level-overview"></a>4.1 High-level overview</h3>
<p>Necurs' communication protocol is complicated, definitely not pretty, and full of strange quirks [<a href="#ref7">7</a>]. For example, three different compression algorithms are used, encryption algorithms are home-made and serve more for obfuscation than securing transmission, and a lot of structures are unnecessarily bloated.</p>
<p>The Necurs botnet is divided into sub-botnets – each Necurs binary has a hard-coded and immutable <span class="monospace">botnet_id</span> saved in its resources. Sub-botnets have different C&amp;C servers, peer lists, and DGA (<span class="monospace">botnet_id</span> is used as part of DGA seed). Currently, we know of three botnets: ID <span class="monospace">5</span> (the biggest), <span class="monospace">9</span> (a smaller one) and <span class="monospace">7</span> (small, and C&amp;C is long since dead).</p>
<p>The botnet is an example of a hybrid network, i.e. a mixture of centralized (that simplifies and speeds up management) and peer-to-peer decentralized models (making it much more resistant to takedowns) – and additionally, DGA is implemented. With so many features it's no wonder that Necurs had survived so long.</p>
<p>The malware attempts to connect to the C&amp;C server, whose IP address is retrieved in a number of different ways:</p>
<ul>
<li>First, a couple of domains or raw IP addresses are embedded in the program resources.</li>
<li>If the connection fails, Necurs runs a domain generation algorithm, crafting up to 2,048 pseudorandom names, the generation of which depends on the current date and seed hard coded in encrypted resources, and tries them all in a couple of threads. If any of them resolves and responds using the correct protocol, it is saved as a server address.</li>
<li>If all these methods fail, the C&amp;C domain is retrieved from the P2P network – the initial list of about 2,000 peers (in the form of IP+port pairs) is hard coded in the binary.</li>
</ul>
<p>During our analysis, Necurs used the last method, since none of the DGA domains were responding. It is, however, possible that in the future the botnet's author will start to register these domains – a new list of potential addresses is generated every four days.</p>
<p>After establishing a successful connection to the C&amp;C, Necurs downloads (using a custom protocol over HTTP) the required information, most notably additional modules (spam module, proxy module, rootkit) and additional C&amp;Cs (for example the spam C&amp;C). After that, each module is started. Finally, the spam module requests templates and variables from the spam C&amp;C. When all the necessary information is downloaded, spam is sent. This process is summarized in <a href="#figure3">Figure 3</a>.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/5315/1186/3129/necurs_communication.png" alt="necurs_communication.png" width="692" height="894" /><span class="centered-caption"><a class=" anchor" name="figure3"></a>Figure 3: Necurs communication.</span></p>
<p> </p>
<h3><a class="chapter" name="h3-42-binary-resources"></a>4.2 Binary resources</h3>
<p>If we want to start communicating with Necurs, we first have to decrypt its resources. They are stored in binary in encrypted form. To find them, we have to find two consecutive qwords in memory that satisfy the following equation:</p>
<p class="monospace" style="padding-left: 30px;"><strong><em>a * 0x48F1398FECF + 12345678901253 === b (mod 2**64)</em></strong></p>
<p>They mark the first bytes of encrypted resources. In Python it's a simple five-liner:</p>
<pre class="prettyprint" style="text-align: left;">def get_base(dump):<br />  for i in range(len(dump) - 0x10):<br />     a, b = struct.unpack("&lt;QQ", dump[i:i + 0x10])<br />     if (a * 0x48F1398FECF + 12345678901253) &amp; 0xFFFFFFFFFFFFFFFF == b:<br />        return i</pre>
<p>After that, we have the <span class="monospace">resourceList</span> structure in memory:</p>
<pre class="prettyprint">struct resourceList {<br />   uint64_t marker_qword_1;<br />   uint64_t marker_qword_2;<br />   uint8_t encrypted_sizes[8]; // uint32_t compr_size, raw_size;<br />   singleResource resources[N]; // array of resources<br />};</pre>
<pre class="prettyprint">struct singleResource {<br />   uint32_t size_times_256;<br />   uint64_t id;<br />   uint8_t data[]; // "size" bytes<br />}</pre>
<p>Where <span class="monospace">id</span> is <span class="monospace">resource id</span>, see <a href="#table3">Table 3</a>. But the <span class="monospace">resources</span> array and <span class="monospace">encrypted_sizes</span> are encrypted in memory (and potentially compressed with the APLIB32 algorithm) – we have to decrypt them first:</p>
<pre class="prettyprint">def next_key(k):<br />  k *= 0x19661f<br />  k += 0x3c6ef387<br />  k &amp;= 0xFFFFFFFF<br />  return k</pre>
<pre class="prettyprint">def decrypt_resources(dump):<br />  base = 0<br />  key = struct.unpack("&lt;I", dump[base:base + 4])[0]</pre>
<pre class="prettyprint">  encrypted_sizes = dump[base+0x10:base+0x18];<br />  for i in range(8):<br />    encrypted_sizes[i] ^= next_key(key) &amp; 0xFF<br />  for i in range(base + 0x18, len(dump)):<br />    key = next_key(key)<br />    dump[i] = chr(ord(dump[i]) ^ key &amp; 0xFF)</pre>
<pre class="prettyprint">  compressed_size, real_size = struct.unpack('&lt;II', encrypted_sizes)<br />  if compressed_size != real_size:<br />    dump = aplib.decompress(dump[0x18:])</pre>
<p>After that, we should have decrypted resources in memory, and parsing them is almost trivial:</p>
<pre class="monospace">base = 0x18 # skip three first QWORDs<br />resources = []<br />while True:<br />  sz, id = struct.unpack("&lt;IQ", dump[base:base + 12])[0]<br />  sz &gt;&gt;= 8</pre>
<pre class="monospace">  if not id:<br />    break</pre>
<pre class="monospace">  res = dump[base + 12:base + 12 + sz]<br />  resources.append({"offset": base, "id": id, "content": res})<br />  base += 12 + sz</pre>
<p>The most interesting resource types are presented in <a href="#table3">Table 3</a>.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Id</strong></td>
<td><strong>Meaning</strong></td>
<td><strong>Example</strong></td>
</tr>
<tr>
<td class="monospace">0x5148b92048028c4e</td>
<td>Botnet ID</td>
<td>5</td>
</tr>
<tr>
<td class="monospace">0x59e80beb0279afba</td>
<td>Peer list</td>
<td>...</td>
</tr>
<tr>
<td class="monospace">0x2f26c75348f3f531</td>
<td>P2P communication key</td>
<td>...</td>
</tr>
<tr>
<td class="monospace">0x7c7b239242b0aec2</td>
<td>C&amp;C communication key</td>
<td>...</td>
</tr>
<tr>
<td class="monospace">0x6fa46c4146c2c285</td>
<td>C&amp;C URL path</td>
<td>/forum/db.php</td>
</tr>
<tr>
<td class="monospace">0x7ddd7ae7c4e9d441</td>
<td>C&amp;C domain</td>
<td>npkxghmoru.biz</td>
</tr>
</tbody>
</table>
<p class="centered-caption"><a class=" anchor" name="table3"></a>Table 3: Necurs resources.</p>
<p> </p>
<h3><a class="chapter" name="h3-43-dga-and-p2p"></a>4.3 DGA and P2P</h3>
<p>Now we need the C&amp;C server address. As we noted, there are three ways to get it. If it's stored in static resources, we already have it. Unfortunately, this is often not the case (or the one stored is obsolete) and we need to resort to other techniques.</p>
<p>The second option is a DGA algorithm. The domain list changes every four days, and depends only on the current date and botnet ID:</p>
<pre class="prettyprint">def dga_mix_and_hash(param):<br />  param %= 2 ** 64<br />  for i in range((param &amp; 0x7F) + 21):<br />     param = (param + ((7 * param) ^ (param &lt;&lt; 15)) + 8 * i - (param &gt;&gt; 5)) % 2**64<br />  return param</pre>
<pre class="prettyprint">def dga_generate_one(year, month, day, seed, rnd_param):<br />domain = ""<br />  mix = dga_mix_and_hash(year)<br />  mix = dga_mix_and_hash(month + mix + 0xAAAA)<br />  mix = dga_mix_and_hash((day &gt;&gt; 2) + mix)<br />  mix = dga_mix_and_hash(rnd_param + mix)<br />  nxt = dga_mix_and_hash(seed + mix)<br />  for i in range((mix % 15) + 7):<br />     nxt = dga_mix_and_hash((nxt &gt;&gt; 32 &lt;&lt; 32) + (nxt % 2**32) + i)<br />     domain += chr(ord('a') + nxt % 25)<br />     nxt = dga_mix_and_hash((nxt &gt;&gt; 32 &lt;&lt; 32) + (nxt % 2**32) + 0xABBEDF)</pre>
<pre class="prettyprint">  tld_ndx = ((nxt &gt;&gt; 32 &lt;&lt; 32) + (nxt % 2 ** 32)) % 43<br />     return domain + "." + [<br />     "tj", "in", "jp", "tw", "ac", "cm", "la", "mn", "so", "sh", "sc", "nu", "nf", "mu", "cx", "cc", "tv", "bz", "me", "eu", "de", "ru", "co", "su", "pw", "kz", "sx", "us", "com", "net", "org", "biz", "xxx", "pro"<br />   ][tld_ndx]</pre>
<p>In practice, malware creators have never used this technique (as far as we know), and it's used solely by malware researchers for tracking purposes.</p>
<p>Finally, the most reliable and most useful method for getting the C&amp;C address is to ask the P2P network for it. All P2P communication happens over UDP protocol. The outermost layer of communication looks like this (as C-structure):</p>
<pre class="prettyprint">struct outer_layer{<br />   uint32_t key;<br />   uint32_t checksum;<br />   uint8_t data[];<br />};</pre>
<p>This data is encrypted using a key calculated as a sum of the key field and the first 32 bits of the public key contained in file resources. This home-made encryption algorithm is equivalent to the following Python code:</p>
<pre class="prettyprint">def rolling_xor(outer_layer):<br />  msg = outer_layer.data<br />  check = outer_layer.key<br />  buff = ""<br />  for c in msg:<br />     c = chr(ord(c) ^ check &amp; 0xff)<br />     buff += c<br />     check = (check + (8 * (check + 4 * ord(c))) ^ ror4(check, 7)) % 2**32<br />  assert outer_layer.checksum == check<br />  return buff</pre>
<p>Inside the outer layer we have real messages, wrapped into another small structure:</p>
<pre class="prettyprint">struct inner_layer {<br />   uint32_t size_flags; // packed size and flags (length &lt;&lt; 4 | flags)<br />   uint8_t data[];<br />};</pre>
<p>The most interesting message type is a greeting/handshake:</p>
<pre class="prettyprint">struct greeting{<br />   uint32_t time; // Milliseconds since 1900-01-01<br />   uint64_t last_received; // ID of last received message - zeroes intially<br />   uint8_t flags;<br />};</pre>
<p>And the response should look like this:</p>
<pre class="prettyprint">struct response{<br />   uint32_t version_low;<br />   uint8_t version_high;<br />   uint8_t size[3]; // Little Endian<br />   resourceList resources;<br />   uint8_t signature[];<br />};</pre>
<p>The whole message is signed using a key from file resources. The most important part of this structure is the resource list, which is in the same format as those stored inside executables. Interestingly, peers don't send new neighbourhood lists – these are sent by the C&amp;C itself. The most likely reason for this measure is to avoid P2P poisoning since it is known that the peer list received from the main server is authorized and correct.</p>
<p> </p>
<h3><a class="chapter" name="h3-44-campc-communication"></a>4.4 C&amp;C communication</h3>
<p>The C&amp;C protocol is vaguely similar to the P2P one, but the encryption routines and structures it uses are a bit different – also, the underlying protocol is HTTP (POST payload) instead of raw UDP sockets. The first stage is exactly the same (outer_layer structure), with different constants in the encryption algorithm:</p>
<pre class="prettyprint">def xor_encrypt(outer_layer):<br />   res = outer_layer.key<br />   buf=""<br />   for c in outer_layer.data:<br />     c = ord(c) ^ res &amp; 0xff<br />     res = (res + (2 * (res + 4 * c)) ^ ror4(res, 13)) % 2**32<br />     buf += chr(c)<br />   assert res == outer_layer.checksum<br />   return buf</pre>
<p>But after decryption we get another structure:</p>
<pre class="prettyprint">struct cc_structure{<br />   uint64_t random_data; // random 8 bytes, probably to increase entropy<br />   uint64_t botID;<br />   uint64_t millis_since_1900;<br />   uint8_t command; // 0 - get command, 1 - download file, 2 - ping.<br />   uint8_t flags; // 1 - RSA sign, 2 - compress, 4 - timePrecision<br />   uint8_t payload[];<br />};</pre>
<p>The contents of the payload field (perhaps compressed, depending on the second bit of flags) depends on the message type (command field):</p>
<ul>
<li>If command == 1 (download file), the payload is simply an SHA-1 hash of the requested file.</li>
<li>If command == 0 (get command request), the payload structure is much more complex – again, a list of resources, but with a different structure.</li>
</ul>
<p>Every resource has the following header:</p>
<pre class="prettyprint">struct cc_resource{<br />   uint8_t type;<br />   uint64_t id;<br />   uint8_t data[];<br />};</pre>
<p>Where id is request/response id. Tables <a href="#table4">4</a> and <a href="#table5">5</a> contain possible requests and responses that the bot can send and receive.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Id</strong></td>
<td><strong>Meaning</strong></td>
</tr>
<tr>
<td>0x4768130ffd8b1660</td>
<td>Botnet Id</td>
</tr>
<tr>
<td>0x50a29bce1ea74ddc</td>
<td>Seconds since start</td>
</tr>
<tr>
<td>0x5774f028d11237ac</td>
<td>System language</td>
</tr>
<tr>
<td>0xc3759a8411bcfb90</td>
<td>Public IP</td>
</tr>
<tr>
<td>0xd8cc549b8fb48978</td>
<td>Is user admin?</td>
</tr>
<tr>
<td>0x0a8aa0eec8402790</td>
<td>Is win64?</td>
</tr>
<tr>
<td>0xa6f73a722b8d2144</td>
<td>Is rootkit installed?</td>
</tr>
<tr>
<td>0x9924541302c75f90</td>
<td>Public TCP port for P2P</td>
</tr>
<tr>
<td>0x543591d7e21cfc94</td>
<td>Current hash of peer list</td>
</tr>
</tbody>
</table>
<p class="centered-caption"><a class=" anchor" name="table4"></a>Table 4: IDs used in HTTP request commands.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Id</strong></td>
<td><strong>Meaning</strong></td>
</tr>
<tr>
<td>0x4008cdaf91d42640</td>
<td>P2P peer list</td>
</tr>
<tr>
<td>0x49340b1574c451a4</td>
<td>HTTP C&amp;C domain list</td>
</tr>
<tr>
<td>0xd2b3cb6d2757a62c</td>
<td>Sleep for N seconds</td>
</tr>
<tr>
<td>0xf7485554ea9dfc44</td>
<td>Download and execute module</td>
</tr>
<tr>
<td>0x3cae696275cd12c4</td>
<td>Download and execute rootkit</td>
</tr>
</tbody>
</table>
<p class="centered-caption"><a class=" anchor" name="table5"></a>Table 5: IDs used in HTTP response commands.</p>
<p>Data depends on resource type:</p>
<pre class="prettyprint">struct cc_resource_type_0 {<br />   uint32_t size;<br />   uint8_t data[]; // length=size<br />};</pre>
<pre class="prettyprint">struct cc_resource_type_1 {<br />   uint32_t data;<br />};</pre>
<pre class="prettyprint">struct cc_resource_type_2 {<br />   uint64_t data;<br />};</pre>
<pre class="prettyprint">struct cc_resource_type_3 {<br />   uint64_t data;<br />};</pre>
<pre class="prettyprint">struct cc_resource_type_4 {<br />   uint16_t size;<br />   uint8_t data[]; // length=size+1<br />};</pre>
<pre class="prettyprint">struct cc_resource_type_5 {<br />   uint8_t data[20];<br />};</pre>
<p>Type 4 is usually used to send text data, which is probably the reason why the resource size is increased by one (for null terminator). A client sends a list of such resources to the C&amp;C. We were able to identify the meaning of some of them:</p>
<ul>
<li>DGA seed</li>
<li>Number of seconds since malware start</li>
<li>Unix timestamp of malware start</li>
<li>OS version and its default language</li>
<li>Computer's IP (local if behind NAT)</li>
<li>UDP port used to listen for P2P connections</li>
<li>Custom hash of current peer list.</li>
</ul>
<p>The server responds with a very similar format, depending on command type:</p>
<ul>
<li>If command == 1, response is just the requested file contents (usually compressed, depending on flags).</li>
<li>If command == 0, response is again more complicated – a list of resources in the same format as in the request.</li>
</ul>
<p>One of the more interesting resources that we can receive from the server is a new peer list (if we sent a hash that doesn't match one in the C&amp;C) or a new DLL announcement.</p>
<p>The latter resource again has its own structure for communication purposes, also made up of concatenated sub-resources of the following form:</p>
<pre class="prettyprint">struct subresource{<br />   uint32_t size;<br />   uint8_t unknown[18];<br />   uint8_t sha1[20];<br />   char cmdline[]; // length=size-42<br />};</pre>
<p>The command should be interpreted as a request for running a DLL identified by its SHA-1 with command line parameters stated in the cmdline field – in practice, the argument is a newline-separated list of C&amp;C addresses (with HTTP path) to be connected to.</p>
<p> </p>
<h3><a class="chapter" name="h3-45-spam-module-communication"></a>4.5 Spam module – communication</h3>
<p>The last protocol we will describe (but a very important one), is the communication of the downloaded DLL module, whose responsibility is to send spam emails.</p>
<p>The information is wrapped in the following structure (sent as POST data over HTTP):</p>
<pre class="prettyprint">struct spam_wrap{<br />   uint8_t data[];<br />   uint32_t crc32;<br />   uint32_t key; // 4th bit of key is compression flag.<br />};</pre>
<p>The encryption algorithm used is as follows:</p>
<pre class="prettyprint">def encrypt(msg, key)<br />   key=rol4(key, 0x11)res=""<br />   for c in msg:<br />     tmp=ror4(key, 0xB)<br />     key+=((0x359038a9*key)^tmp)&amp;0xFFFFffff<br />     res+=chr( (ord(c)+key) &amp; 0xFF )<br />return res</pre>
<p>So messages are packed like this:</p>
<pre class="prettyprint">def send_message(json):<br />   rnd = rtdsc()<br />   enc = encrypt(json, rnd)<br />   checksum = rol4(crc32(enc) ^ rnd, 5)<br />   payload = enc + struct.pack("&lt;I", checksum) + struct.pack("&lt;I", rnd)<br />   return requests.post(dom, data=payload, timeout=30)</pre>
<p>An exemplary JSON for spam request can look like this:</p>
<pre class="prettyprint">js = {<br />   "vmjSIoC": guid,<br />   "WoVEf3A": "zOPeFRx",<br />   "GDncpsW": {<br />     "gzAfKVf": True,<br />     "Qet4BWy": "my_domain.tld",<br />     "6G18OEO": 0,<br />     "tGeZADS": []<br />   },<br />   "dg3XGB9": current_unix_timestamp<br />}</pre>
<p>After decryption, we receive raw data as a JSON string (unless the compression flag was set, in which case the data needs to be unpacked – as we found out, a QuickLZ library was used in the malware for this purpose). The following is a sample JSON string:</p>
<pre class="prettyprint">{<br />   "vmjSIoC": -3740355867459618972,<br />   "nCZ1DIN": {<br />      "3ud2qDx": ["k***@jacob*****.com",<br />      "pranav*******@yahoo.com", (...) ],<br />      "kLhlsvR": "%%var boundary =<br />      b1_{{lowercase(rndhex(32,32))}}(...)",<br />      "5U6ci2Y": {<br />         "body": {<br />            "R9Y2jrb": 3730515652,<br />            "Ew7Rtuh": 339<br />         },<br />         (...)<br />         "wikibook.003": {<br />            "R9Y2jrb": 2392427997,<br />            "Ew7Rtuh": 99328000<br />         }<br />      },<br />      "LDB53Ml": false,<br />      "4aukyxg": 50,<br />      "9LVmdDs": 1,<br />      "6G18OEO": 677299251,<br />      "dcatsQu": 3,<br />      "5xTnygD": 8,<br />      "Wmto8rv": 21600,<br />      "jdTJLPh": 3,<br />      "LsHwjQC": 600,<br />      "lm74D93": 86400<br />   }<br />}</pre>
<p>Unfortunately, keys are obfuscated, so we had to guess their meaning.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Id</strong></td>
<td><strong>Meaning</strong></td>
</tr>
<tr>
<td>3ud2qDx</td>
<td>Spam target addresses</td>
</tr>
<tr>
<td>kLhlsvR</td>
<td>Spam templates</td>
</tr>
<tr>
<td>5U6ci2Y</td>
<td>Spam resources (variables)</td>
</tr>
</tbody>
</table>
<p class="centered-caption"><a class=" anchor" name="table6"></a>Table 6: Meaning of the keys.</p>
<p>Finally, one of the fields in the received dictionary contains a script used to generate randomized emails (like on the top of the post), and as another field – a list of parameters passed to this script (e.g. eng_Names). We can make a separate request to download the values of these arguments – as a response, we will receive, for example, a list of English names to be substituted, or a few base64-encoded files to be used as an attachment.</p>
<p> </p>
<h3><a class="chapter" name="h3-46-proxyddos-module-communication"></a>4.6 Proxy/DDoS module – communication</h3>
<p>There is another functionality hidden in Necurs – not used as often as the spam module, but still present.</p>
<p>It was described in great detail on the <em>Anubis Networks</em> blog [<a href="#ref8">8</a>], so we'll just go over the most important things.</p>
<p>The first thing the proxy module does is to check if it's behind a NAT. This is done by querying the external API (checkip.dyndns.org or ipv5.icanhazip.com) and comparing it with the local IP address.</p>
<p>After that, the bot measures the available bandwidth (by downloading <em>Windows 7</em> SP1 from <em>Microsoft</em> and measuring the time taken), and computes the <span class="monospace">bot_id</span> (using the same algorithm as the main module).</p>
<p>If the system is not behind a NAT, the proxy module starts a SOCKS/HTTP proxy service listening on a random port.</p>
<p>After that, the module starts connecting to the C&amp;C server in a loop and sends a beacon every 10 seconds. The C&amp;C server can respond with a few different commands:</p>
<ul>
<li>Type 1: Computers usually are behind a NAT, so additionally a 'connectback proxy' is implemented. After this message, the connection socket is reused, so the proxy can work even behind a firewall.</li>
<li>Type 2: Sleep (the bot will sleep for five minutes)</li>
<li>Type 5: DDoS – the bot will start a DDoS attack against a specified target.</li>
</ul>
<p>Implemented attack types are HTTP flood and UDP flood.</p>
<p> </p>
<h3><a class="chapter" name="h3-47-tracking"></a>4.7 Tracking</h3>
<p>We tried to start tracking Necurs in early winter 2017, but we had a lot of problems with bootstrapping our trackers because of the period of inactivity that Necurs was going through. We only managed to start at the beginning of February 2017 – the botnet was increasingly active from then until now. Captured changes are presented in <a href="#figure4">Figure 4</a>.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/84d9ab90df50bb060b0466eae98b6f2e_f2233.png" alt="necurs_mtracker.png" width="600" height="365" /><span class="centered-caption"><a class=" anchor" name="figure4"></a>Figure 4: Number of changes in C&amp;C configuration per day.</span></p>
<p>According to our data, the big changes in the C&amp;C infrastructure correspond more or less to bigger waves of spam activity.</p>
<p> </p>
<h2><a class="chapter" name="h2-5-send-safe"></a>5. Send-Safe</h2>
<p>Send-Safe is a notorious spamming tool, nowadays used mostly by the man1 [<a href="#ref9">9</a>] group. The history of Send-Safe goes by back to 2002, to a domain, send-safe[.]com, and operations run by Ruslan Ibragimov [<a href="#ref10">10</a>], but we believe it was rewritten, probably based on leaked code, and weaponized to be a spam bot rather than a spam tool. Searching through <em>VirusTotal</em> we found the first sample [<a href="#ref11">11</a>] of this strain uploaded around March 2016, and<em> Dr.Web</em> [<a href="#ref12">12</a>] started to detect it as Trojan.Ssebot.1 on 5 April 2016.</p>
<pre>Date: 0x56F4D6A5 [Fri Mar 25 06:11:49 2016 UTC]<br />LegalCopyright: (c) 2005-07 Send-Safe<br />InternalName: Send-Safe Enterprise Mailer<br />FileVersion: 2,5,0,854<br />CompanyName: Send-Safe<br />ProductName: Send-Safe Enterprise Mailer<br />ProductVersion: 2,5,0,854<br />FileDescription: Send-Safe Enterprise Mailer<br />OriginalFilename: sse.exe</pre>
<p> </p>
<h3><a class="chapter" name="h3-51-communication"></a>5.1 Communication</h3>
<p>Tracking Send-Safe operations is not an easy task, mostly due to the design of its C&amp;C protocol. Its authors decided that the best way to remain stealthy was to keep the main channel closed for most of the time, and open it only when they were ready to send spam. This concept is achieved by splitting the C&amp;C communication into two parts:</p>
<ul>
<li>short UDP messages to inform the operators that the malware is alive</li>
<li>normal HTTPS requests to receive information about spam targets and content of messages.</li>
</ul>
<p>To make things a little bit simpler, both services are hosted on the same IP address, only the ports are different.</p>
<p> </p>
<h4><a class="chapter" name="h4-511-configuration"></a>5.1.1 Configuration</h4>
<p>Before we go into the details of the communication protocols, here is a quick digression about configuration data: everything that is important is stored in PE resources and encrypted with a Blowfish cipher, using a hard-coded 16-byte key. Configuration contains the IP address of the C&amp;C, UDP and HTTPS ports, and the name of the system service under which the malware will be installed.</p>
<p> </p>
<h4><a class="chapter" name="h4-512-communication-udp"></a>5.1.2 Communication – UDP</h4>
<p>It is hard to determine the stealthiness of Send-Safe. If we only care and look for TCP traffic, then it's quite stealthy, but in terms of UDP, it's a whole new story.</p>
<p>UDP is used to determine if the C&amp;C is alive and to register in it. There are various flags and data that can be sent through this channel, but in essence it boils down to the size of the answer. The following C-struct describes the format of the packets sent by the bot:</p>
<pre class="prettyprint">struct req_s {<br />   BYTE size; /* 72 + size of additional data, itw always 72 */<br />   BYTE req_id; /* always 0x01 */<br />   BYTE botid[16];<br />   unk unk_time; /* some strange time related structure, in practice always 28 bytes of 0s<br />   DWORD unk1,unk2; /* always zeros */<br />   DWORD campaing_id ; /* tends to be 0 */<br />   struct version {<br />      WORD ver_hi;<br />      WORD ver_low;<br />   } version; /* current: 2,5,0,854 */<br />   DWORD unk2,unk3; /* always zeroes */<br />}</pre>
<p>While the response can contain various flags, in reality what matters is the size of it:</p>
<ul>
<li>Eight bytes, C&amp;C is alive but closed: come back some other time</li>
<li>24 bytes, C&amp;C is alive and open for businesses: please switch to HTTPS. Every packet is encoded by XORing data with a key derived from the customer id, which in the case of the man1 gang is 'UNREGISTERED'. The following decompiled code shows the algorithm:</li>
</ul>
<pre class="prettyprint">int __cdecl COMM::xor(_BYTE *a1, int size)<br />{<br />   int result; // <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b2d7d3caf283">[email&#160;protected]</a><br />   int i; // [esp+0h] [ebp-18h]@1<br />   unsigned __int8 v4[16]; // [esp+4h] [ebp-14h]@1</pre>
<pre class="prettyprint">   md5((int)v4, "UNREGISTERED", 12);<br />   for ( i = 0; i &lt; size; ++i )<br />   {<br />      result = v4[i &amp; 0xF] ^ (unsigned __int8)a1[i];<br />      a1[i] = result;<br />   }<br />   return result;<br />}</pre>
<p>After encoding, byte 0x02 is added at the beginning. The encoded request is as follows:</p>
<pre>00000000: 028e 5b6a 4669 76ba 67c0 7a20 a628 26ca<br />00000010: fdb8 d0c0 5a31 1f66 9f99 365e 0b45 ca69<br />00000020: 07c6 5b6b 5a31 1f66 9f99 365e 0b45 ca69<br />00000030: 07c6 5b6b 5a31 1f66 9f99 365e 4b64 9c6a<br />00000040: 07c6 5b6b 5a31 1f66</pre>
<p>And the decoded request:</p>
<pre>00000000: 0248 0001 1c58 69dc f859 4c7e ad6d eca3<br />00000010: fa7e 8bab 0000 0000 0000 0000 0000 0000<br />00000020: 0000 0000 0000 0000 0000 0000 0000 0000<br />00000030: 0000 0000 0000 0000 0000 0000 4021 5603<br />00000040: 0000 0000 0000 0000</pre>
<p> </p>
<h4><a class="chapter" name="h4-513-communication-https"></a>5.1.3 Communication – HTTPS</h4>
<p>After the malware receives information that the HTTPS port is open, it proceeds to download what's necessary to send spam. The requests performed are rather simple compared to those described previously in this paper. A basic request consists of the C&amp;C address, registered botid and request type. The request type can be:</p>
<ul>
<li>1 – download spam details</li>
<li>2 – download target addresses.</li>
</ul>
<p>Example of HTTPS requests:</p>
<pre>GET /699206552FDD4E58949E1EC09B199DC6/1 HTTP/1.1<br />User-Agent: Mozilla<br />Host: 91.220.131.143:50013<br />Cache-Control: no-cache</pre>
<p>In response, the C&amp;C sends a bunch of data, which is basically an encoded zip file:</p>
<pre>HTTP/1.1 200 OK<br />Connection: close<br />Content-Type: text/html<br />Content-Length: 4618<br />Server: Indy/9.0.17<br />## from sslsplit 2017-03-16 19:24:20 UTC [91.220.131.143]:50013 -&gt; [172.16.15.13]:55201 (4618):<br />010ltrWjkfb/zpfObS45RPCsZbqUMxH2efmTZsbhyB+9z+y542LP5lU7jyLl7+JocaCGpwHSNX9I9oV78oU7/OvgZ3jD7CjULL63kq0xdBSwKi5TSYzuT5wCfKmZxqlZcAaaTujc7ZTSTxGikxE1kxPhTtm39hN/</pre>
<p>One can get a proper zip file using the following python snippet:</p>
<pre class="prettyprint">resp = 'PK\x03\x04' + xor(x[2:].decode('base64'),md5('UNREGISTERED').digest())</pre>
<p>This zip file can contain the following files:</p>
<ul>
<li>1 - SMTP details, User-Agent some private key</li>
<li>100 - email details, including subject, message body and how to impersonate</li>
<li>2 - email addresses of victims</li>
</ul>
<p>All of the files are additionally wrapped into a simple Type-Length-Value format, which can be parsed with the help of the following Python class:</p>
<pre class="prettyprint">class SFile(M):</pre>
<pre class="prettyprint">   def elem(self):<br />     size = self.dword()<br />     flag = self.dword()<br />     if flag &amp; 0x10000:<br />        flag ^= 0x10000<br />        data = self.read(size-8)<br />     else:<br />        s = self.dword()<br />        data = self.read(s+1)<br />     return flag,data</pre>
<pre class="prettyprint">   def parse(self):<br />     self.dword()<br />     cnt = self.dword()<br />     for i in range(cnt):<br />        yield self.elem()</pre>
<p> </p>
<h3><a class="chapter" name="h3-54-email-templates"></a>5.4 Email templates</h3>
<p>Like every serious spamming tool, Send-Safe is capable of generating messages based on some sort of template. Although the exact description of how it works is quite complex and is beyond the scope of this paper, what is curious is that one template is used to create content versions for both <em>Outlook</em> and other email clients, and the decision as to which one to use is made by a botmaster. <a href="#h2-appendix-b-send-safe-email-template">Appendix B</a> presents a simple email template captured from the communication of a live sample.</p>
<p> </p>
<h3><a class="chapter" name="h3-55-curious-spamming-habits"></a>5.5 Curious spamming habits</h3>
<p>Send-Safe campaigns are very short lived – each one we observed was active for maximum of two to three days, after which the C&amp;C was completely shut down and the campaign ended. During our research we observed that the C&amp;C is active between around 16:00 - 21:00 CEST (GMT+02) (by 'active' we mean that it is responding to UDP requests); HTTPS communication starts around 17:30 and continues until 20:30.</p>
<p> </p>
<h2><a class="chapter" name="h2-6-tofsee"></a>6. Tofsee</h2>
<p>Another botnet that we analysed is Tofsee, also known as Gheg [<a href="#ref13">13</a>]. Its main job is to send spam, but it is able to perform other tasks as well. This is possible because of the modular design of this malware: it has one main binary (the one that the user downloads), which later downloads several additional modules from the C&amp;C server – they modify code by overwriting some of the called functions with their own. For example, these modules can, in theory, spread by posting click-bait messages on <em>Facebook</em> and <em>VKontakte</em> (a Russian social network) – in practice, we haven't observed these modules being used too much.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/6cb28d0a87f8766d9dcad29735edc174_f2234.png" alt="tofsee_modules.png" width="845" height="297" /><span class="centered-caption">Figure 5: Tofsee modules.</span></p>
<p>Communication with the botmaster is implemented using a non-standard protocol built on top of TCP. The first message after establishing the connection is always sent by the server – it contains a mainly random 128-byte key used for encrypting further communication. Because of this, it is impossible to decode the communication if it wasn't recorded right from its beginning.</p>
<p>Additionally, the bot has a list of resources (in the form of a linked list) in memory. Initially when the bot starts, the list is almost empty and contains only basic information, like bot ID, but it is quickly filled by data received from the server in further messages. Resources can take different forms – for example, it might be a list of mail subjects to be used in spam, but DLL libraries extending bot capabilities are treated as named resources as well. There are a few different resource types – for example, a resource can contain a list of mail subjects to be used in spam, or another DLL, or scripts used for spam, or a list of C&amp;C IP addresses.</p>
<p>The C&amp;C IP list is one of the first messages sent by a server. If, for some reason, the C&amp;C doesn't return its own IP in a C&amp;C list, the connection is terminated and a random server from the newly received list is chosen as the communication partner. This usually happens during connection to one of the C&amp;Cs hard coded in the binary – effectively, they act as a 'pointer' to the real servers.</p>
<p>Sent emails are all randomized – for this purpose, Tofsee uses a dedicated script language. Its body contains macros, which will be replaced randomly by certain strings of characters during parsing – for example, %RND_SMILE will be substituted by one of several emoticons. Thanks to this randomization, simpler spam filters might allow these messages through.</p>
<p> </p>
<h3><a class="chapter" name="h3-61-technical-analysis"></a>6.1 Technical analysis</h3>
<p>The list of C&amp;C IP addresses is hard coded in binary in an encrypted form. The obfuscation algorithm is very simple – it XORs the message with the hard-coded key.</p>
<pre class="prettyprint">def decrypt(s, key, inc):<br />   result = ""<br />   parity = 1<br />   for c in s:<br />     c = ord(c) ^ key<br />     result += chr(c)<br />     key += inc + parity<br />     key &amp;= 0xFF<br />     parity = -parity<br />   return result</pre>
<p>The data decrypts to a few IP+port pairs – in the analysed sample, the used port was 443 in all of them. The probable reason for this is to conceal communication by using a port dedicated to SSL traffic.</p>
<p> </p>
<h3><a class="chapter" name="h3-62-communication-protocol"></a>6.2 Communication protocol</h3>
<p>The communication protocol is rather simple and is illustrated in<a href="#figure6"> Figure 6</a>.</p>
<p><a class="zoom-img" title="Figure 6: Tofsee communication." href="/files/5515/1187/0271/tofsee_communication.png"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/a8519543deba70acf88ba0b590bef956_f2235.png" alt="tofsee_communication.png" width="800" height="763" /></a><span class="centered-caption"><a class=" anchor" name="figure6"></a>Figure 6: Tofsee comunication.</span></p>
<p>After the client establishes a TCP connection, the server immediately sends a 200-byte-long 'greeting' message – it contains a few useful fields such as:</p>
<ul>
<li>encryption key</li>
<li>public IP of a client</li>
<li>time on server</li>
</ul>
<p>This message is 'encrypted' with simple bitwise operations:</p>
<pre class="prettyprint">def greetingXor(data):<br />   dec=""<br />   prev=0<br />   for c in data:<br />      dec += chr((0xc6 ^ prev ^ ( (ord(c)&lt;&lt;5) | (ord(c)&gt;&gt;3) )) &amp; 0xFF)<br />      prev = ord(c)<br />return dec, prev</pre>
<p>Decrypted data forms the following structure:</p>
<pre class="prettyprint">struct greeting {<br />   uint8_t key[128];<br />   uint8_t unknown[16];<br />   uint32_t bot_ip;<br />   uint32_t srv_time;<br />   uint8_t reserved[48];<br />};</pre>
<p>After this message, everything is encrypted with a 128-byte <span class="monospace">key</span> from the greeting, using the following (probably custom) stream cipher:</p>
<pre class="prettyprint">def xor_crypt(data, key_data):<br />   res = []<br />   for c in data:<br />      it = key_data.it<br />      key_data.round[it % 7] += key_data.key[it % 128]<br />      key_data.round[it % 7] &amp;= 0xFF<br />      res.append(c ^ key_data.round[it % 7])<br />      key_data.it += 1<br />   return res</pre>
<p>Where <span class="monospace">key_data.main</span> is <span class="monospace">key</span> key from the greeting, <span class="monospace">key_data.round</span> is initialized to 'abcdefg', and <span class="monospace">it</span> is initialized to 0.</p>
<p>All messages (with the exception of the greeting message) have a header, represented by the following structure:</p>
<pre class="prettyprint">struct header {<br />   uint32_t size;<br />   uint32_t size_decompressed;<br />   uint32_t checksum_crc32;<br />   uint8_t flags; // flags &amp; 2 -&gt; is_compressed<br />   uint32_t op;<br />   uint32_t subop1;<br />   uint32_t subop2;<br />};</pre>
<p>Data compression is supported by the protocol, but it is only used for bigger messages. The fields <span class="monospace">op</span>, <span class="monospace">subop1</span> and <span class="monospace">subop2</span> are certain constants defining the message type – the most important of which is, of course, <span class="monospace">op</span>. The binary has code for handling a large number of types, but in practice, only a fraction of them are used.</p>
<p>The payload is sent after the header. Its exact structure and contents depend on the message type – some of which will be described in detail below.</p>
<p>The first message sent by the bot has type 1 (<span class="monospace">op</span>, with <span class="monospace">subop1</span> and <span class="monospace">subop2</span> being 0) and is a quite big structure:</p>
<pre class="prettyprint">struct botdata {<br />   uint32_t flags_upd;<br />   uint64_t bot_id;<br />   uint32_t unk1;<br />   uint32_t net_type;<br />   uint32_t net_flags;<br />   uint32_t vm_flags;<br />   uint32_t unk2;<br />   uint32_t unk3;<br />   uint32_t lid_file_upd;<br />   uint32_t ticks;<br />   uint32_t tick_delta;<br />   uint32_t born_date;<br />   uint32_t IP;<br />   uint32_t unk4;<br />   uint32_t unk5;<br />   uint8_t unk6;<br />  uint8_t operating_system;<br />   uint8_t unk[46];<br />};</pre>
<p>The server response can have different forms as well. The simplest one, <span class="monospace">op=0</span>, means an empty response (or end of transmission consisting of multiple messages). If <span class="monospace">op=2</span>, the server sends us a new resource – the message payload in this case has the following structure:</p>
<pre class="prettyprint">struct resource {<br />   uint32_t type; // Small integer.<br />   char name[16];<br />   uint32_t unk;<br />   uint32_t length;<br />   uint8_t contents[]; // Size=length.<br />};</pre>
<p> </p>
<h3><a class="chapter" name="h3-63-resources"></a>6.3 Resources</h3>
<p>After the handshake, the server sends a lot of resources – they have the same internal structure.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Resource type</strong></td>
<td><strong>Meaning</strong></td>
</tr>
<tr>
<td>1</td>
<td>IP address of C&amp;C or peers (resource name = <span class="monospace">work_srv</span> or<span class="monospace"> start_srv</span>)</td>
</tr>
<tr>
<td>5</td>
<td>DLL with plug-in – see below (resource name = plug-in name)</td>
</tr>
<tr>
<td>8</td>
<td>Local macros, for use during communication</td>
</tr>
<tr>
<td>11</td>
<td>Scripts used for spamming</td>
</tr>
<tr>
<td>23-40</td>
<td>Config for plug-in (resource name = <span class="monospace">img_cfg</span>, <span class="monospace">sys_cfg</span>, etc.)</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 7: Resource types and their meanings.</p>
<p>Resources are identified by their type – a small integer (up to 40, but most of them are below 10) and a short name, such as 'priority'. Some of the most interesting types are described in the following sub-sections.</p>
<p> </p>
<h4><a class="chapter" name="h4-631-type-5"></a>6.3.1 Type 5</h4>
<p>This contains raw plug-in DLL data. Plug-in names are in plaintext in binary data, so we can easily extract plug-in names. As of the time of writing this paper, Tofsee downloads the plug-ins shown in Table 8.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Resource Id</strong></td>
<td><strong>DLL name</strong></td>
<td><strong>DLL MD5 hash</strong></td>
</tr>
<tr>
<td>1</td>
<td>ddosR.dll</td>
<td class="monospace">fbc7eebe4a56114e55989e50d8d19b5b</td>
</tr>
<tr>
<td>2</td>
<td>antibot.dll</td>
<td class="monospace">a3ba755086b75e1b654532d1d097c549</td>
</tr>
<tr>
<td>3</td>
<td>snrpR.dll</td>
<td class="monospace">385b09563350897f8c941b47fb199dcb</td>
</tr>
<tr>
<td>4</td>
<td>proxyR.dll</td>
<td class="monospace">4a174e770958be3eb5cc2c4a164038af</td>
</tr>
<tr>
<td>5</td>
<td>webmR.dll</td>
<td class="monospace">78ee41b097d402849474291214391d34</td>
</tr>
<tr>
<td>6</td>
<td>protect.dll</td>
<td class="monospace">624c5469ba44c7eda33a293638260544</td>
</tr>
<tr>
<td>7</td>
<td>locsR.dll</td>
<td class="monospace">2d28c116ca0783046732edf4d4079c77</td>
</tr>
<tr>
<td>10</td>
<td>hostR.dll</td>
<td class="monospace">c90224a3f8b0ab83fafbac6708b9f834</td>
</tr>
<tr>
<td>11</td>
<td>text.dll</td>
<td class="monospace">48ace17c96ae8b30509efcb83a1218b4</td>
</tr>
<tr>
<td>12</td>
<td>smtp.dll</td>
<td class="monospace">761e654fb2f47a39b69340c1de181ce0</td>
</tr>
<tr>
<td>13</td>
<td>blist.dll</td>
<td class="monospace">e77c0f921ef3ff1c4ef83ea6383b51b9</td>
</tr>
<tr>
<td>14</td>
<td>miner.dll</td>
<td class="monospace">47405b40ef8603f24b0e4e2b59b74a8c</td>
</tr>
<tr>
<td>15</td>
<td>img.dll</td>
<td class="monospace">e0b0448dc095738ab8eaa89539b66e47</td>
</tr>
<tr>
<td>16</td>
<td>spread1.dll</td>
<td class="monospace">227ec327fe7544f04ce07023ebe816d5</td>
</tr>
<tr>
<td>17</td>
<td>spread2.dll</td>
<td class="monospace">90a7f97c02d5f15801f7449cdf35cd2d</td>
</tr>
<tr>
<td>18</td>
<td>sys.dll</td>
<td class="monospace">70dbbaba56a58775658d74cdddc56d05</td>
</tr>
<tr>
<td>19</td>
<td>webb.dll</td>
<td class="monospace">8a3d2ae32b894624b090ff7a36da2db4</td>
</tr>
<tr>
<td>20</td>
<td>p2pR.dll</td>
<td class="monospace">e0061dce024cca457457d217c9905358</td>
</tr>
</tbody>
</table>
<p class="centered-caption"><a class=" anchor" name="table8"></a>Table 8: Plug-ins downloaded by Tofsee.</p>
<p>Looking at the names, it's clear that apart from spamming, Tofsee also has a lot of other functions – like coordinated DDoS, cryptocurrency mining, or spreading via various channels. We'll skip detailed analysis of those modules here, but those interested can read our longer article on the topic published on the cert.pl blog [<a href="#ref14">14</a>].</p>
<p> </p>
<h4><a class="chapter" name="h4-632-type-11"></a>6.3.2 Type 11</h4>
<p>This type contains periodically updated scripts in a dedicated language, which are used to send spam. An example script can be found in <a href="#h2-appendix-c-tofsee-type-11-script">Appendix C</a>.</p>
<p>Since some of the variables need to contain a literal newline character, several macros are hard coded in binary for that very purpose, for example, %SYS_N.</p>
<p> </p>
<h4><a class="chapter" name="h4-633-type-8"></a>6.3.3 Type 8</h4>
<p>This chunk contains local macros. Because different email scripts sometimes use macros with the same name but different content, macros can be local. The resource names are of <span class="monospace">NUM%VAR</span> form, for example, <span class="monospace">1910%TO_NAME</span>, where <span class="monospace">1910</span> is a number of the script being the scope of macro <span class="monospace">%TO_NAME</span>.</p>
<p>Variable substitutions can be recursive, so expanded macros can be expanded further. The script language also allows for more complicated constructs, such as <span class="monospace">%RND_DIGIT[3]</span>, meaning three random digits (often used in the hexadecimal description of colour), or <span class="monospace">%{%RND_DEXL}{ %RND_SMILE}{}</span>, meaning a random choice between<span class="monospace"> %RND_DEXL</span>, <span class="monospace">%RND_SMILE</span> and an empty string. As we can see the language is quite flexible.</p>
<p> </p>
<h4><a class="chapter" name="h4-634-type-23-40"></a>6.3.4 Type 23-40</h4>
<p>These chunks contain config of some plug-ins. All values are named by human-readable keys, and parsing this config is trivial:</p>
<pre class="prettyprint">def parse_config(payload):<br />   log.info(chunks(payload.split('\x00'), 2))<br />   return dict(chunks(payload.split('\x00'), 2)[:-1])</pre>
<p> </p>
<h3><a class="chapter" name="h3-64-tracking"></a>6.4 Tracking</h3>
<p>With this knowledge about Tofsee's protocol, we can start to track it automatically, which we've been doing since December 2016. During this time, we have collected 29 unique configs from the C&amp;C server.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/97e5cd037893f601f828468fd2cb9957_f2236.png" alt="tofsee_mtracker.png" width="845" height="492" /><span class="centered-caption">Figure 7: Tracking Tofsee.</span></p>
<p>Tofsee development is rather irregular – sometimes as many as four updates per day are released, but between them, there are long periods of inactivity.</p>
<p>A small slowdown can be observed during January 2017, which may be related to DGA sinkholing performed by Swiss CERT [<a href="#ref15">15</a>] during that time.</p>
<p>Looking at the updates, it's obvious that botnet operators care about some functionalities more than others. For example, while the botnet miner is still being sent to every victim, the IP address of the gate is long since dead. Either the botnet owners don't care about that, or they don't even know about it. Similarly, while the <span class="monospace">spread</span> plug-in gets updates sometimes, it's updated not nearly often enough, and the IPs it references are long since dead. In contrast, the C&amp;C and work server addresses and<span class="monospace"> psmtp_cfg</span> plug-in are always up to date – because those are necessary for uninterrupted spam operations.</p>
<p> </p>
<h2><a class="chapter" name="h2-7-closing-words"></a>7. Closing words</h2>
<p>We hope that with this paper we manage to lower the entrypoint for monitoring spam botnets. We think that spam botnets are really interesting targets for analysis and a still growing threat, especially in the twilight of the EK era, and its important that we expand our visibility of their operations and eventually stop the perpetrators.</p>
<p> </p>
<h2><a class="chapter" name="h2-acknowledgements"></a>Acknowledgements</h2>
<p>The authors would like to thank the following for their help: Adam Krasuski, Paul Burbage, Matthew Mesa, J of Techhelplist, and Pawel Srokosz.</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] Shulmin, A. The banking trojan emotet: Detailed analysis. 2015. <a href="https://securelist.com/69560/thebanking-trojan-emotet-detailed-analysis" target="_blank">https://securelist.com/69560/thebanking-trojan-emotet-detailed-analysis</a>.</p>
<p><a class=" anchor" name="ref2"></a>[2] Salvio, J. New banking malware uses network sniffing for data theft. 2014.<a href="%20http://blog.trendmicro.com/trendlabs-security-intelligence/new-banking-malware-uses-network-sniffing-for-data-theft/" target="_blank"> http://blog.trendmicro.com/trendlabs-security-intelligence/new-banking-malware-uses-network-sniffing-for-data-theft/</a>.</p>
<p><a class=" anchor" name="ref3"></a>[3] Techhelplist, Emotet. <a href="https://techhelplist.com/component/tags/tag/190-emotet" target="_blank">https://techhelplist.com/component/tags/tag/190-emotet</a>.</p>
<p><a class=" anchor" name="ref4"></a>[4] Srokosz, P. Analysis of emotet v4. 2017. <a href="https://www.cert.pl/en/news/single/analysisof-emotet-v4" target="_blank">https://www.cert.pl/en/news/single/analysisof-emotet-v4</a>.</p>
<p><a class=" anchor" name="ref5"></a>[5] FBI, Application for a search warrant – procedure to disrupt the kelihos botnet. 2017. <a href="https://www.justice.gov/opa/press-release/file/956521/download" target="_blank">https://www.justice.gov/opa/press-release/file/956521/download</a>.</p>
<p><a class=" anchor" name="ref6"></a>[6] Yang, K. Dissecting latest kelihos peer exchange communication. 2013. <a href="https://blog.fortinet.com/2013/07/18/dissecting-latest-kelihos-peer-exchangecommunication" target="_blank">https://blog.fortinet.com/2013/07/18/dissecting-latest-kelihos-peer-exchangecommunication</a>.</p>
<p><a class=" anchor" name="ref7"></a>[7] Krasuski, A. Necurs – hybrid spam botnet. 2016. <a href="https://www.cert.pl/en/news/single/necurshybrid-spam-btnet/" target="_blank">https://www.cert.pl/en/news/single/necurshybrid-spam-btnet/</a>.</p>
<p><a class=" anchor" name="ref8"></a>[8] Sofia.luis. Necurs proxy module with DDoS features. <a href="http://blog.anubisnetworks.com/blog/necurs-proxy-module-with-ddos-features?hs_preview=qztxAuUY-4862144940" target="_blank">http://blog.anubisnetworks.com/blog/necurs-proxy-module-with-ddos-features?hs_preview=qztxAuUY-4862144940</a>.</p>
<p><a class=" anchor" name="ref9"></a>[9] Reaves, J. Me and Mr. robot: Tracking the actor behind the man1 crypter. 2016. <a href="https://www.fidelissecurity.com/threatgeek/2016/07/me-and-mrrobot-tracking-actor-behind-man1-crypter" target="_blank">https://www.fidelissecurity.com/threatgeek/2016/07/me-and-mrrobot-tracking-actor-behind-man1-crypter</a>.</p>
<p><a class=" anchor" name="ref10"></a>[10] Spamhaus. ROKSO: Ruslan ibragimov/send-safe.com. <a href="https://www.spamhaus.org/rokso/spammer/SPM672/send-safe.com" target="_blank">https://www.spamhaus.org/rokso/spammer/SPM672/send-safe.com</a>.</p>
<p><a class=" anchor" name="ref11"></a>[11] VirusTotal. Sample - 72b1508d72b43b9322676efb06210aaa - sse.exe. <a href="https://www.virustotal.com/en/file/f64bef872fa1488bc3dd9f09a46c5cbab6ce338ddc5350effb8daaa4175fc50f/analysis/" target="_blank">https://www.virustotal.com/en/file/f64bef872fa1488bc3dd9f09a46c5cbab6ce338ddc5350effb8daaa4175fc50f/analysis/</a>.</p>
<p><a class=" anchor" name="ref12"></a>[12] Dr.Web, Drwtoday.vdb , 05 apr 2016, 16:40 gmt-8. <a href="http://live.drweb.com/base_info/?id=262405" target="_blank">http://live.drweb.com/base_info/?id=262405</a>.</p>
<p><a class=" anchor" name="ref13"></a>[13] Krasuski, A. Tofsee – modular spambot. 2016. <a href="https://www.cert.pl/en/news/single/tofseeen/" target="_blank">https://www.cert.pl/en/news/single/tofseeen/</a>.</p>
<p><a class=" anchor" name="ref14"></a>[14] Jedynak, J. Tofsee – modules description. 2017. <a href="https://www.cert.pl/en/news/single/tofseemodules/" target="_blank">https://www.cert.pl/en/news/single/tofseemodules/</a>.</p>
<p><a class=" anchor" name="ref15"></a>[15] GovCERT.ch. Tofsee spambot features .ch dga – reversal and countermesaures. 2016. <a href="https://www.govcert.admin.ch/blog/26/tofsee-spambot-features-.chdga-reversal-and-countermesaures" target="_blank">https://www.govcert.admin.ch/blog/26/tofsee-spambot-features-.chdga-reversal-and-countermesaures</a>.</p>
<p> </p>
<h2><a class="chapter" name="h2-hashes-sha256"></a>Hashes (sha256)</h2>
<p><strong>Emotet's spam module:</strong> 0eb2eb8c5c21cfd6b89c1e14b3b66f869148f06fa0611ad3e7aa06e285a7e9c6</p>
<p><strong>Kelihos binary:</strong> 7336b25d9c3389867e159e89f88e2d9f58c31c3a141806efec3e5c5cf0cc202f</p>
<p><strong>Necurs main module:</strong> 2cf6ba0346b92192bcf4941b3864df23e01c65e7e37cfe4648a72fe5d1e0c848</p>
<p><strong>Necurs main module:</strong> c54d3cef68932a72c8ce3194f2672c1396bf5fedf5dfc61aed3ccdb8b4feca8a</p>
<p><strong>Necurs rootkit (2017-04-05):</strong> c4b4f8bc15b08c5bf937660125d436ebaa92ad702d207d4afd57db0bec45a34c</p>
<p><strong>Send-Safe:</strong> 68ce6a73e5eb1e538eb21a63a613761feb259e6eae55bf1022ab3f86fbbbeac1</p>
<p><strong>Tofsee main module:</strong> deed28bc0060e5fd712c8b495dd6a992d417e014a78539a4eb32c2a680e69b2a</p>
<p> </p>
<h2><a class="chapter" name="h2-appendix-kelihos-encryption-algorithms"></a>Appendix A: Kelihos encryption algorithms</h2>
<h3><a class="chapter" name="h3-appendix-a1-bitcrypt1"></a>Appendix A1: bitcrypt1</h3>
<pre class="prettyprint">def bitstuff_enc(b):<br />   chr = b<br />   mask = 1<br />   prevbit = chr &amp; 1<br />   out = 0<br />   for i in range(8):<br />      lobit = chr &amp; 1<br />      if lobit != prevbit:<br />        out |= mask<br />      chr &gt;&gt;= 1<br />      if i:<br />        mask &lt;&lt;= 1<br />      prevbit = lobit<br />   out |= mask<br />   if b &amp; 1 == 0:<br />        out = ~out<br />   return out &amp; 0xFF</pre>
<pre class="prettyprint">def bit1_enc(string):<br />   return map_string(string, bitstuff_enc)</pre>
<p> </p>
<h3><a class="chapter" name="h3-appendix-a2-bitcrypt2"></a>Appendix A2: bitcrypt2</h3>
<pre class="prettyprint">def bitstuff2_enc(chr):<br />   result = 0<br />   mask = chr &amp; 1<br />   prevbit = mask == 0<br />   for i in range(8):<br />      curbit = chr &amp; 1<br />      if curbit == prevbit:<br />         mask ^= 1<br />      if mask:<br />         result |= 1<br />      chr &gt;&gt;= 1<br />      result &lt;&lt;= 1<br />      prevbit = curbit<br />   return result &gt;&gt; 1</pre>
<pre class="prettyprint">def bit2_enc(string):<br />   return map_string(string, bitstuff2_enc)</pre>
<p> </p>
<h3><a class="chapter" name="h3-appendix-a3-mathops-crypt"></a>Appendix A3: mathops crypt</h3>
<pre>void crypt_mathops(int a1, string *data) {<br />   for (int i = 0; i &lt; data-&gt;length; i++) {<br />      chr = getCharAtPos(data, i);<br />      if ( *chr &amp; 1 )<br />         enc = 32 * (*chr &amp; 0xFE) | (*chr &gt;&gt; 2) &amp; 0x3E;<br />      else<br />         enc = 4 * *chr | (*chr &gt;&gt; 5) &amp; 6 | 1;<br />      *chr = enc;<br />   }<br />}</pre>
<p> </p>
<h3><a class="chapter" name="h3-appendix-a4-full-encryption-routine"></a>Appendix A4: Full encryption routine</h3>
<pre class="prettyprint">def decrypt_raw_data(data):<br />   header = data[:24]<br />   header = fst_block[:4] + visdecrypt2(bit2_dec(fst_block))[4:24] # decrypt header<br />   rnd_seed = int32(header[0:4])<br />   blk1len_enc = int32(header[4:8])<br />   blk2len_enc = int32(header[8:12])<br />   blk3len_enc = int32(header[12:16])<br />   pkttype_enc = int32(header[16:20])<br />   unk2len_enc = int32(header[20:24])</pre>
<pre class="prettyprint">   blk1len = blk1len_enc - rnd_seed<br />   blk2len = blk2len_enc - blk1len_enc<br />   blk3len = blk3len_enc - blk2len_enc<br />   unk2len = unk2len_enc - blk3len_enc - 95<br />   pkttype = pkttype_enc - blk1len_enc - 197</pre>
<pre class="prettyprint">   print 'rndseed: [{:8x}] =&gt; {:x}'.format(rnd_seed, rnd_seed)<br />   print 'block 1 len: [{:8x}] =&gt; {:x}'.format(blk1len_enc, blk1len)<br />   print 'block 2 len: [{:8x}] =&gt; {:x}'.format(blk2len_enc, blk2len)<br />   print 'block 3 len: [{:8x}] =&gt; {:x}'.format(blk3len_enc, blk3len)<br />   print 'pkttype: [{:8x}] =&gt; {:} '.format(pkttype_enc, pkttype)<br />   print 'unk2len: [{:8x}] =&gt; {:x}'.format(unk2len_enc, unk2len)</pre>
<pre class="prettyprint">   data_strings_enc = data[24:]<br />   data_strings = bit1_dec(data_strings_enc)<br />   blk1 = data_strings[:blk1len] # random bytes and decryption algorithm seed<br />   blk2 = data_strings[blk1len:blk1len+blk2len] # encrypted blowfish key<br />   blk3 = data_strings[blk1len+blk2len:blk1len+blk2len+blk3len] # encrypted peer list</pre>
<pre class="prettyprint">   print 'block 1:', blk1.encode('hex')<br />   print 'block 2:', blk2.encode('hex')<br />   print 'block 3:', blk3.encode('hex')</pre>
<pre class="prettyprint">   blk1 = visdecrypt2(blk1)<br />   blk1 = bit1_dec(blk1)<br />   saltparam = ord(blk1[0]) # length of salt is encoded in first byte of block<br />   lonib = saltparam &amp; 0xF<br />   hinib = (saltparam &gt;&gt; 4) &amp; 0xF</pre>
<pre class="prettyprint">   real_blk1 = blk1[lonib+hinib+1:]<br />   print 'real block 1:', real_blk1.encode('hex')</pre>
<p> </p>
<h2><a class="chapter" name="h2-appendix-b-send-safe-email-template"></a>Appendix B: Send-Safe Email Template</h2>
<pre>Message-ID: {%MSGID%}<br />{%NOT_OUTLOOK%}Date: {%DATE%}<br />{%RANDOMLY%}Reply-To: {%FROM%}<br />From: {%FROM%}<br />{%NOT_OUTLOOK%}{%XMAILER_HEADER%}<br />{%NOT_OUTLOOK%}{%RANDOMLY%}X-Accept-Language: en-us<br />{%NOT_OUTLOOK%}MIME-Version: 1.0<br />{%TOCC_HEADERS%}<br />Subject: {%SUBJECT%}<br />{%OUTLOOK%}Date: {%DATE%}<br />{%OUTLOOK%}MIME-Version: 1.0<br />{%OUTLOOK%}Content-Type: multipart/alternative;<br />{%OUTLOOK%} boundary="{%BOUNDARY1%}"<br />{%NOT_OUTLOOK%}Content-Type: text/html;<br />{%NOT_OUTLOOK%} charset="utf-8"<br />{%NOT_OUTLOOK%}Content-Transfer-Encoding: 7bit<br />{%OUTLOOK%}{%RANDOMLY%}X-Priority: 3<br />{%OUTLOOK%}X-MSMail-Priority: Normal<br />{%OUTLOOK%}{%XMAILER_HEADER%}<br />{%OUTLOOK%}X-MimeOLE: Produced By Microsoft MimeOLE V{%MIMEOLE_VERSION%}</pre>
<pre>{%OUTLOOK%}This is a multi-part message in MIME format.<br />{%OUTLOOK%}<br />{%OUTLOOK%}--{%BOUNDARY1%}<br />{%OUTLOOK%}Content-Type: text/plain;<br />{%OUTLOOK%} charset="utf-8"<br />{%OUTLOOK%}Content-Transfer-Encoding: quoted-printable<br />{%OUTLOOK%}<br />{%OUTLOOK%}{%BEGIN_QUOTEDPRINTABLE%}<br />{%OUTLOOK%}{%PLAINTEXT_MSG%}<br />{%OUTLOOK%}{%END_QUOTEDPRINTABLE%}<br />{%OUTLOOK%}--{%BOUNDARY1%}<br />{%OUTLOOK%}Content-Type: text/html;<br />{%OUTLOOK%} charset="utf-8"<br />{%OUTLOOK%}Content-Transfer-Encoding: quoted-printable<br />{%OUTLOOK%}<br />{%OUTLOOK%}{%BEGIN_QUOTEDPRINTABLE%}<br />{%NOT_OUTLOOK%}{%BEGIN_SPLIT76%}<br />{%BEGIN_PLAINTEXT_SRC%}<br />&lt;html&gt;<br />&lt;p&gt;&lt;img src="http://www.entwistle-law.com/images/logo.png" alt="" width="598" height="33" /&gt;&lt;/35<br />&lt;p&gt;My name is Vincent Cappucci and I am a senior partner at ENTWISTLE &amp;amp; CAPPUCCI LLP.&lt;br &lt;p&gt;&lt;a href="http://fortyfour.jp/divorce/divorce.php?id={%BEGIN_BASE64%}{%EMAIL%}{%END_BASE64%}"&gt;&lt;p&gt;Thank you&lt;br /&gt;Vincent R. Cappucci&lt;br /&gt;Senior Partner&lt;br /&gt;{%FROMEMAIL%}&lt;br /&gt;Phone: 212-&lt;/html&gt;<br />{%END_PLAINTEXT_SRC%}<br />{%OUTLOOK%}{%END_QUOTEDPRINTABLE%}<br />{%NOT_OUTLOOK%}{%END_SPLIT76%}<br />{%OUTLOOK%}<br />{%OUTLOOK%}--{%BOUNDARY1%}--</pre>
<p> </p>
<h2><a class="chapter" name="h2-appendix-c-tofsee-type-11-script"></a>Appendix C: Tofsee Type 11 Script</h2>
<pre>From: "%NAME" &lt;%FROM_EMAIL&gt;<br />To: %TO_EMAIL<br />Subject: %SUBJ<br />Date: %DATE<br />MIME-Version: 1.0<br />Content-Type: multipart/mixed;<br />boundary="%BOUNDARY1"</pre>
<pre>--%BOUNDARY1<br />Content-Type: multipart/alternative;<br />boundary="%BOUNDARY2"</pre>
<pre>--%BOUNDARY2<br />Content-Type: text/plain;<br />charset="%CHARSET"<br />Content-Transfer-Encoding: quoted-printable<br />{qp1-}%GI_SLAWIK{/qp}</pre>
<pre>--%BOUNDARY2<br />Content-Type: text/html;<br />charset="%CHARSET"<br />Content-Transfer-Encoding: quoted-printable<br />{qp0+}%GI_SLAWIK{/qp}</pre>
<pre>--%BOUNDARY2--</pre>
<pre>--%BOUNDARY1<br />Content-Type: application/zip;<br />name="%ATTNAME1.zip"<br />Content-Transfer-Encoding: base64<br />Content-Disposition: attachment;<br />filename="%ATTNAME1.zip"<br />%JS_EXPLOIT</pre>
<pre>--%BOUNDARY1--<br />- GmMxSend<br />v SRV alt__M(%RND_NUM[1-4])__.gmail-smtp-in.l.google.com<br />U L_SKIP_5 5 __M(%RND_NUM[1-5])__<br />v SRV gmail-smtp-in.l.google.com<br />L L_SKIP_5<br />C __v(SRV)__:25<br />RS<br />mx_smtp_01.txt<br />o ^2<br />m %FROM_DOMAIN __A(4|__M(%HOSTS)__)__<br />W """EHLO __A(3|__M(%{mail}{smtp}%RND_NUM[1-4].%FROM_DOMAIN)__)__\r\n"""<br />RS<br />mx_smtp_02.txt<br />o ^2 ^3<br />L L_NEXT_BODY<br />v MI 0<br />- m %FROM_EMAIL __M(%FROM_USER)<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bfe0e0ff">[email&#160;protected]</a>__M(%FROM_DOMAIN)__<br />W """MAIL From:&lt;__M(%FROM_EMAIL)__&gt;\r\n"""<br />RS<br />mx_smtp_03.txt<br />I L_QUIT ^421<br />o ^2 ^3<br />L L_NEXT_EMAIL<br />U L_NO_MORE_EMAILS @ __S(TO|__v(MI)__)__<br />W """RCPT To:&lt;__l(__S(TO|__v(MI)__)__)__&gt;\r\n"""<br />RS<br />mx_smtp_04.txt<br />I L_OTLUP ^550<br />I L_TOO_MANY_RECIP ^452<br />o ^2 ^3<br />v MI __A(1|__v(MI)__,+,1)__<br />u L_NEXT_EMAIL 1 __A(1|__v(MI)__,&lt;,1)__ L L_NO_MORE_EMAILS u L_NOEMAILS 0 __A(1|__v(MI)__,&gt;,W """DATA\r\n"""<br />RS<br />mx_smtp_05.txt<br />o ^2 ^3<br />m %SS1970H __P(__t(126230445)__|16)__<br />m %TO_EMAIL """&lt;__l(__S(TO|0)__)__&gt;"""<br />m %TO_NAME __S(TONAME|0)__<br />W """__S(BODY)__\r\n.\r\n"""<br />RS<br />mx_smtp_06.txt<br />I L_SPAM ^550<br />o ^2 ^3<br />+ m<br />H TO -1 OK<br />J L_NEXT_BODY<br />L L_OTLUP<br />+ h<br />h """Delivery to the following recipients failed. __l(__S(TO|__v(MI)__)__)__"""<br />H TO __v(MI)__ HARD<br />J L_NEXT_EMAIL<br />L L_TOO_MANY_RECIP<br />H TO __v(MI)__ FREE<br />J L_NO_MORE_EMAILS<br />L L_QUIT<br />W """QUIT\r\n"""<br />RS<br />mx_smtp_07.txt<br />o ^2 ^3<br />L L_NOEMAILS<br />E 1<br />L L_SPAM<br />+ A<br />H TO -1 FREE<br />o ^2 ^3</pre> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2017/VB2017-Jedynak-Kotowicz.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2017 paper: Peering into spam botnets&url=https://www.virusbulletin.com/virusbulletin/2017/11/vb2017-paper-peering-spam-botnets"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2017/11/vb2017-paper-peering-spam-botnets'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2017/11/vb2017-paper-peering-spam-botnets&title=VB2017 paper: Peering into spam botnets"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2017/11/vb2017-paper-peering-spam-botnets&t=VB2017 paper: Peering into spam botnets"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2017/11/vb2017-paper-peering-spam-botnets"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>