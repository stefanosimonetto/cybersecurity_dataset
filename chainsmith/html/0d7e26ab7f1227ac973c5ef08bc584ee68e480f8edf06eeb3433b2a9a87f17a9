<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Obfuscation in Android malware, and how to fight back</title>
<meta name="description" content="Axelle Apvrille and Ruchna Nigam take an in-depth look at obfuscation techniques encountered while analysing Android malware - including both use of off-the-shelf products and custom obfuscation techniques." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1718;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201407-Android-obfuscation"></a>Obfuscation in Android malware, and how to fight back</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2014-07-02</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Axelle</span> <span class="surname">Apvrille</span></h3><span class="orgname">Fortinet</span>, <span class="orgdiv">France</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Ruchna</span> <span class="surname">Nigam</span></h3><span class="orgname">Fortinet</span>, <span class="orgdiv">France</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Axelle Apvrille and Ruchna Nigam take an in-depth look at obfuscation techniques encountered while analysing Android malware - including both use of off-the-shelf products and custom obfuscation techniques.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2605" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2605" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id4693708"></a></span></dt><dt><span class="sect1"><a href="#id2851944">1. Introduction</a></span></dt><dt><span class="sect1"><a href="#id2138487">2. Detecting and reversing off-the-shelf Android obfuscation tools</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3428870">2.1 ProGuard</a></span></dt><dt><span class="sect2"><a href="#id3849903">2.2 DexGuard</a></span></dt><dt><span class="sect2"><a href="#id3450028">2.3 APK Protect</a></span></dt><dt><span class="sect2"><a href="#id3625677">2.4 HoseDex2Jar</a></span></dt><dt><span class="sect2"><a href="#id4402342">2.5 Bangcle</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3508386">3. Custom obfuscation</a></span></dt><dt><span class="sect1"><a href="#id4712595">4. Obfuscation in the future</a></span></dt><dt><span class="sect1"><a href="#id4712597">5. Conclusion</a></span></dt><dt><span class="sect1"><a href="#id4312090">Acknowledgements</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4693708"></a></h2></div></div></div><p>Malware authors are certainly creative when it comes to hiding their payloads from analysts&rsquo; eyes, using methods such as emulator detection, application icon hiding, reflection etc. This paper focuses on obfuscation techniques encountered while analysing <span class="emphasis"><em>Android</em></span> malware. We present five off-the-shelf products (<span class="emphasis"><em>ProGuard</em></span>, <span class="emphasis"><em>DexGuard</em></span>, <span class="emphasis"><em>APK Protect</em></span>, <span class="emphasis"><em>HoseDex2Jar</em></span> and <span class="emphasis"><em>Bangcle</em></span>) and make suggestions as to how researchers can detect when they have been used in malware, and some techniques to help with their reversing. We also list some custom obfuscation techniques we have encountered in malware: loading native libraries, hiding exploits in package assets, truncating URLs, using encryption etc. We provide examples and supply the sha256 hash in each case. Finally, we reveal a few new obfuscation techniques of which we are aware, which might be used by malware authors in the future. There are techniques for injecting malicious bytecode, manipulating the DEX file format to hide methods, and customizing the output of encryption to hide an APK. We provide the current state of play as regards ongoing research to detect and mitigate against these mechanisms.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2851944"></a>1. Introduction</h2></div></div></div><p>While obfuscation is not reprehensible, it has always been particularly popular with malware authors. Numerous <span class="emphasis"><em>Windows</em></span> malware families use packers, obfuscation and anti-debugging techniques to hide their devious intentions from end-users and security researchers alike.</p><p>&lsquo;The use of ProGuard or a similar program to obfuscate your code is strongly recommended for all applications that use Google Play Licensing.&rsquo; [<span class="citation"><a href="#citation.1">1</a></span>]</p><p>In this paper, our aim is to assist security researchers and anti-virus analysts in their reverse engineering of <span class="emphasis"><em>Android</em></span> malware. We provide tips to detect specific obfuscators, as well as techniques for reversing them and accessing the real payload.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2138487"></a>2. Detecting and reversing off-the-shelf Android obfuscation tools</h2></div></div></div><p><span class="emphasis"><em>ProGuard</em></span> is the most well known of all the <span class="emphasis"><em>Android</em></span> obfuscators, as it is integrated into the <span class="emphasis"><em>Android</em></span> build framework itself. It is also often encountered in malware (in a partial database of 460,493 samples, we spotted it in 15% of samples). However, other tools, such as <span class="emphasis"><em>DexGuard</em></span> &ndash; the extended commercial version of <span class="emphasis"><em>ProGuard</em></span> &ndash; and <span class="emphasis"><em>APK Protect </em></span>also exist.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3428870"></a>2.1 ProGuard</h3></div></div></div><p>By default, <span class="emphasis"><em>ProGuard</em></span> renames paths, class names, methods and variables using the alphabet. Thus, spotting strings such as &lsquo;a/a/a;-&gt;a&rsquo; in the smali code is a strong indication that the sample has been obfuscated using <span class="emphasis"><em>ProGuard</em></span>. Of course, this simplistic method of detection is not infallible because <span class="emphasis"><em>ProGuard</em></span> can be configured to use any replacement dictionary you wish using the options -obfuscationdictionary, -classobfuscationdictionary and -packageobfuscationdictionary. For instance, Android/GinMaster.L uses a custom dictionary, where the strings were probably generated randomly using something like http://www.random.org/strings.</p><p>The replacement of path names, class names, methods and variables cannot be undone. However, usually the reversing of <span class="emphasis"><em>ProGuard</em></span>-ed samples isn&rsquo;t too difficult because the strings and code layout are not modified. The work is very similar to reversing an application coded by a beginner (poor choice of variable names etc.).</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3849903"></a>2.2 DexGuard</h3></div></div></div><p>Working on <span class="emphasis"><em>DexGuard</em></span>-ed samples is much more difficult. [<span class="citation"><a href="#citation.2">2</a></span>] lists the obfuscator&rsquo;s features. The main reason why <span class="emphasis"><em>DexGuard</em></span>-obfuscated samples are more difficult to work with is because the class and method names are replaced with non-ASCII characters and strings are encrypted. Tools such as <span class="emphasis"><em>JD-GUI</em></span> [<span class="citation"><a href="#citation.3">3</a></span>] and <span class="emphasis"><em>Androguard</em></span> [<span class="citation"><a href="#citation.4">4</a></span>] are more difficult to use (e.g. difficult to get name completion). It is as if reverse engineers have had their senses dulled: text strings and even some familiar function calls and patterns no longer exist to guide the analyst to the more interesting parts of the code.</p><p>Fortunately, no obfuscator is perfect. [<span class="citation"><a href="#citation.5">5</a></span>] clarifies parts of how <span class="emphasis"><em>DexGuard</em></span> works. Meanwhile, we provide a code snippet that can be used to detect it, and three different ways to help with the reversing of <span class="emphasis"><em>DexGuard</em></span>-ed samples.</p><p>First, its detection &ndash; i.e. identifying the use of <span class="emphasis"><em>DexGuard</em></span> on a sample &ndash; is usually fairly visual: the repetitive use of non ASCII characters gives it away. The code snippet below lists non-ASCII smali files in smali disassembled code.</p><pre class="programlisting">$ find . -type f -name &ldquo;*.smali&rdquo; -print | perl -ne &lsquo;print if /[$^$ [:ascii:]]/&rsquo;</pre><p>Second, its reversing can be made easier by using the following tools or techniques:</p><div class="itemizedlist"><ul type="disc"><li><p><span class="bold"><strong><span class="emphasis"><em>DexGuard</em></span> decryption python script</strong></span>. [<span class="citation"><a href="#citation.6">6</a></span>] provides a script template that can be applied to each <span class="emphasis"><em>DexGuard</em></span>-ed sample. The script decrypts encrypted strings, which makes reversing easier. However, this tool only works with samples that use old versions of <span class="emphasis"><em>DexGuard</em></span>, not the more recent ones.</p></li><li><p><span class="bold"><strong>Logging</strong></span>. A reverse engineer can disassemble the sample with baksmali [<span class="citation"><a href="#citation.7">7</a></span>], insert calls to <span class="emphasis"><em>Android</em></span> logging functions (see below), recompile the application (smali), and run it.</p><pre class="programlisting">invoke-static {v1, v2}, Landroid/util/Log;-&gt;e( Ljava/lang/String;Ljava/lang/String;)I</pre><p>This displays corresponding strings in Android logs. It is an archaic, but simple and useful debugging technique. Nevertheless, this technique requires modification of the malicious sample &ndash; a practice anti-virus analysts are usually not authorized (or willing) to perform for ethical and security reasons.</p></li><li><p><span class="bold"><strong>String renaming</strong></span>. To work around the problems caused by non-ASCII characters, all strings can auto-matically be renamed to a dummy ASCII string. To do this, we enhanced <span class="emphasis"><em>Hidex</em></span> [<span class="citation"><a href="#citation.8">8</a></span>]. Originally, this tool was created to demonstrate the feasibility of hiding methods in a DEX file (see Section 4 and [<span class="citation"><a href="#citation.9">9</a></span>]). However, progressively, it has evolved into a small DEX utility tool that can be used for the following:</p><div class="itemizedlist"><ul type="circle"><li><p>To list strings (option --show-strings).</p></li><li><p>To automatically rename non-ASCII strings (option --rename-strings). This is what we use, for instance, in the case of <span class="emphasis"><em>DexGuard</em></span>. Each string that contains non-ASCII characters is replaced automatically by a unique string generated only with ASCII characters and which is the same size as the original string. ( In theory, there are cases where we should fall short of replacement strings and thus fail to do the renaming. For example, if a sample has more strings of a single character than possible ASCII characters, the replacement is impossible. In practice, we have never encountered this limitation.) The replacement string must meet the aforementioned requirements of uniqueness and size, to conform to the DEX file format. For proper replacement, note that string size (UTF16 size field of string data item) is in UTF16 code units, not in bytes. Please refer to [<span class="citation"><a href="#citation.10">10</a></span>].</p><p>There is one constraint that <span class="emphasis"><em>Hidex</em></span> does not currently handle: the ordering of strings. In DEX files, strings must be ordered alphabetically. Renaming the strings usually breaks the correct ordering. Consequently, <span class="emphasis"><em>Android</em></span> will refuse to load the modified classes.dex file. In the case of reverse engineering malware, this is not a real problem (perhaps it is even more secure/ethically correct) because <span class="emphasis"><em>Android</em></span> reversing tools such as <span class="emphasis"><em>baksmali</em></span>, <span class="emphasis"><em>apktool</em></span>, <span class="emphasis"><em>dex2jar</em></span> and <span class="emphasis"><em>Androguard</em></span> do not enforce correct ordering of strings either. Thus, they are able to disassemble the modified classes.dex without any problem.</p></li><li><p>To parse DEX headers and detect headers hiding additional information (see Section 2.4).</p></li><li><p>To detect potential hidden methods (option --detect).</p></li></ul></div></li></ul></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3450028"></a>2.3 APK Protect</h3></div></div></div><p><span class="emphasis"><em>APK Protect</em></span> [<span class="citation"><a href="#citation.11">11</a></span>] is another advanced off-the-shelf obfuscation product. The first time we spotted it being used in <span class="emphasis"><em>Android</em></span> malware was in Android/SmsSend.ND!tr in March 2014. It is easy to identify its use in malware, because the string &lsquo;APKProtected&rsquo; is present in the DEX. Like <span class="emphasis"><em>DexGuard</em></span>, its reversing is difficult. In particular, we worked out its string encryption process, which is illustrated in <a href="#figure.1">Figure 1</a>.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="String encryption process used in APK Protect-ed malware." src="/uploads/images/figures/2014/07/axelle-image1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;String encryption process used in APK Protect-ed malware.</b></p></div><p>To decrypt an encrypted string, one must:</p><div class="orderedlist"><ol type="1"><li><p>Swap the first and last two bytes.</p></li><li><p>Base64 decode the string. Actually, the code of the <span class="emphasis"><em>APK Protect</em></span>-ed sample hides the call to Base64 decoding methods. It does not call the method directly but via Java reflection. The path for Base64 (android.util.Base64) is decoded from a XOR encrypted string, and the method name (decode) is created by picking up the appropriate characters in the path name.</p></li><li><p>XOR the decoded string.</p></li><li><p>Decrypt the result using the hard-coded key &lsquo;#safeguar&rsquo;.</p></li></ol></div><p>Knowing this, it is possible to implement one&rsquo;s own string decryptor. The implementation must be adapted to each sample as XOR keys change.</p><pre class="programlisting">$ java SmsDecrypt
Processing string: ==aFgIDU0oPWgoK...
d64xor: 96500db3f2242a4b2ac920e4...
Decrypting: ybbc[CENSORED]icp.cc
</pre><p>An alternative to this labour-intensive method (which has to be repeated for every single sample) is to send the sample for analysis by <span class="emphasis"><em>Andrubis</em></span> [<span class="citation"><a href="#citation.12">12</a></span>]. As shown in <a href="#figure.2">Figure 2</a>, <span class="emphasis"><em>Andrubis</em></span> does the work for us, showing the URLs the malware contacts and the decryption key.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Andrubis analysis results showing the decryption key and output." src="/uploads/images/figures/2014/07/axelle-image2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Andrubis analysis results showing the decryption key and output.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3625677"></a>2.4 HoseDex2Jar</h3></div></div></div><p><span class="emphasis"><em>HoseDex2Jar</em></span> is a packer that was released a year ago. It is quite simple, and thus easy to circumvent. It is based on the premise that, normally, DEX headers are exactly 0x70 bytes long. However, it was found that Android does not strictly enforce the header size, so one can add data at the end of the header.</p><p>This is precisely what <span class="emphasis"><em>HoseDex2Jar</em></span> does:</p><div class="orderedlist"><ol type="1"><li><p>Encrypts the DEX.</p></li><li><p>Creates a new DEX for the packed app.</p></li><li><p>Puts the encrypted DEX into the new DEX header (e.g. end).</p></li><li><p>Sets the DEX header size.</p></li></ol></div><p>This is easy to spot: look for DEX files with header size greater than 0x70 (= 112). This can be done using <span class="emphasis"><em>Hidex</em></span>, which displays a warning:</p><pre class="programlisting">$ ~/dev/hideandseek/hidex/hidex.pl --input classes.dex-hosed
WARNING: strange header size: 136080
DEX Header of file:
Magic : 6465780a30333500
</pre><p>To reverse hosed applications, Tim Strazzere released a de-hoser [<span class="citation"><a href="#citation.13">13</a></span>]. We have not encountered any hosed malware yet.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4402342"></a>2.5 Bangcle</h3></div></div></div><p><span class="emphasis"><em>Bangcle</em></span> [<span class="citation"><a href="#citation.14">14</a></span>] is an online service for packing <span class="emphasis"><em>Android</em></span> executables. The process is the following:</p><div class="orderedlist"><ol type="1"><li><p>Register on <span class="emphasis"><em>Bangcle</em></span> to get a user account.</p></li><li><p>Download the <span class="emphasis"><em>Bangcle</em></span> <span class="emphasis"><em>Assistant</em></span> tool.</p></li><li><p>Use the tool to upload your package. At this point, <span class="emphasis"><em>Bangcle</em></span> servers do check that the package is not malicious, but they can be fooled.</p></li><li><p>Retrieve the protected app (for a signed version of the protected app, a keystore must be uploaded by the user).</p></li></ol></div><p>The packing process modifies the structure of the original APK quite extensively:</p><div class="itemizedlist"><ul type="disc"><li><p>The name of the application is changed (always) to com.secapk.wrapper.ApplicationWrapper.</p></li><li><p>There are new assets and new native libraries.</p></li><li><p>The manifest is modified.</p></li><li><p>The classes.dex file is completely modified. The original activity no longer exists and is replaced by a generic placeholder.</p></li></ul></div><p>There are several ways to detect the use of <span class="emphasis"><em>Bangcle</em></span>: the application&rsquo;s name &lsquo;com.secapk.wrapper.ApplicationWrapper&rsquo;, the presence of an asset named &lsquo;bangcle classes.jar&rsquo;, the presence of native libraries named &lsquo;libsecexe&rsquo; and &lsquo;libsecmain&rsquo;, and class names such as &lsquo;FirstApplication&rsquo; or &lsquo;ACall&rsquo;.</p><p>The difficulty lies in reversing samples that are protected with <span class="emphasis"><em>Bangcle</em></span>. Though this has yet to be confirmed, [<span class="citation"><a href="#citation.15">15</a></span>] claims that &lsquo;a growing percentage of malware, such as bank Zeus, SMS Sender, and re-packaged applications, are packed by [the <span class="emphasis"><em>Bangcle</em></span>] service&rsquo;. We spotted <span class="emphasis"><em>Bangcle</em></span> in Android/Feejar.B.</p><p><span class="emphasis"><em>Bangcle</em></span> is particularly resistant to reverse engineering because:</p><div class="itemizedlist"><ul type="disc"><li><p>Functions exported by native libraries have obfuscated names.</p></li><li><p>Several libc functions, like mmap2, munmap, open, read, write, close and msync, are hooked. It is likely that ptrace is hooked too, as debuggers have difficulty attaching to certain <span class="emphasis"><em>Bangcle</em></span> processes.</p></li><li><p>The libraries are compiled with stack protection enabled (stack chk guard).</p></li><li><p>The real application is encrypted, and only decrypted in memory at runtime. In particular, the RC4 algorithm is used [<span class="citation"><a href="#citation.16">16</a></span>].</p></li></ul></div><p>Interesting analyses can be found in [<span class="citation"><a href="#citation.17">17</a></span>] and [<span class="citation"><a href="#citation.18">18</a></span>] (in Chinese).</p><p>The solution we used in order to gain a better understanding of packed malware consists of using <span class="emphasis"><em>IDA Pro</em></span>&rsquo;s ARM remote debugger. The remote debugger server is on the <span class="emphasis"><em>Android</em></span> platform, while it communicates with <span class="emphasis"><em>IDA Pro</em></span> on a remote host. We attach to the thread of a process that loads libsecmain and dump the memory when it is decrypted (see <a href="#figure.3">Figure 3</a>).</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Decrypted memory of a protected application." src="/uploads/images/figures/2014/07/axelle-image3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Decrypted memory of a protected application.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/07/axelle-image3-large.jpg" target="_top">here</a> to view a larger version of Figure 3.)</p><div class="table"><a id="table.1"></a><table border="1" summary="Examples of malware using off-the-shelf obfuscation
        tools."><colgroup><col /><col /><col /></colgroup><thead><tr><th align="center">Android malware name</th><th align="center">Year of discovery</th><th align="center">Obfuscation</th></tr></thead><tbody><tr><td>SmsSend.N 66699d5c55f442203d5b933e87339d3c2f7f256037b45d6ad3ba9e00a6500851</td><td>2012</td><td><span class="emphasis"><em>ProGuard</em></span>-ed</td></tr><tr><td>Plankton.B!tr 6600fdf4e758bfab3b73ab26270dd9f4c02847f144e28c255919aee7d91a0f11</td><td>2011</td><td><span class="emphasis"><em>ProGuard</em></span>-ed parts</td></tr><tr><td>DroidKungFu.D!tr 938efb5bdc96d353b28af57da2021b6a3c5a64452067059bf50d7fb7c7a66426</td><td>2011</td><td><span class="emphasis"><em>ProGuard</em></span>-ed parts</td></tr><tr><td>Dendroid.A!tr 0b8ba0c6cebe5695639bf1b282b52f126dba733f3c204e37615a3ba5f7dd6fe8</td><td>2014</td><td><span class="emphasis"><em>DexGuard</em></span>-ed</td></tr><tr><td>Rmspy.A!tr 57e37d4cfc9e0ea9287ba72185c12bb4ccf4e1a56041f3c3d12c31be1aaf5506</td><td>2013</td><td><span class="emphasis"><em>DexGuard</em></span>-ed</td></tr><tr><td>0bad.A b65c352d44fa1c73841c929757b3ae808522aa2ee3fd0a3591d4ab67598d17</td><td>2013</td><td><span class="emphasis"><em>DexGuard</em></span>-ed</td></tr><tr><td>SmsSend.ND 3aee81db24540fb6b3666a38683259fd32713187ec6e0b421da9b91bd216205f</td><td>2014</td><td>APK Protect-ed</td></tr><tr><td>Feejar.B 0000350c0792f61ee513f40bd9a42d09144cc6a3c4f2171f812ef415a9a51640</td><td>2014</td><td>Bangcle</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Examples of malware using off-the-shelf obfuscation tools.</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3508386"></a>3. Custom obfuscation</h2></div></div></div><p>Malware authors have been very active in designing their own obfuscation techniques. Some of the techniques are basic, and others are more complicated:</p><div class="itemizedlist"><ul type="disc"><li><p><span class="bold"><strong>Using very long class names to defeat tools</strong></span>. This technique has been mentioned in [<span class="citation"><a href="#citation.19">19</a></span>] and seen in the wild in Android/Mseg.A!tr.spy (sha256 hash: cc42f8a1fc6805a9deeaae198fb4580b304b51489dec4209929a09b9c3868aee).</p></li><li><p><span class="bold"><strong>Using nops to modify the bytecode flow</strong></span>. This was mentioned in [<span class="citation"><a href="#citation.20">20</a></span>], and is extremely common.</p></li><li><p><span class="bold"><strong>Path obfuscation</strong></span>. For example, in an Android/Plankton sample, the normal Airpush SDK path is replaced by com/OajgOKqg/FYmaEVCV92392.</p></li><li><p><span class="bold"><strong>Path phishing</strong></span>. This consists of using a well known (legitimate) path and hijacking it for illegitimate purposes. For example, in Android/RuSMS.AO, com.adobe.air (normally used by Adobe AIR) is used to hide the malicious functionality. Path phishing is very common too.</p></li><li><p><span class="bold"><strong>Hiding packages, JARs etc. in raw resources or assets</strong></span>. <a href="#table.2">Table 2</a> lists some examples of malware samples that hide malicious packages in resource files. For example, Android/SmsZombie.A!tr hides a malicious package in a JPG named &lsquo;a33.jpg&rsquo; in the assets directory. Android/Gamex.A!tr hides an en-crypted malicious package in an asset named &lsquo;logos.png&rsquo;. This is close to what is referred to as a poly-glot file [<span class="citation"><a href="#citation.21">21</a></span>], i.e. a file which is valid and meaningful for different formats. In Gamex, the asset &lsquo;log-os.png&rsquo; is not a valid PNG (thus not really a polyglot), but a ZIP. However, it has the peculiarity of being a valid ZIP file as such, and also another valid ZIP file when XOR&rsquo;ed with the right key (18).</p><div class="table"><a id="table.2"></a><table border="1" summary="Examples of samples hiding malicious packages in resource
          files."><colgroup><col /><col /><col /></colgroup><thead><tr><th align="center">Android malware name</th><th align="center">Year of discovery</th><th align="center">Obfuscation</th></tr></thead><tbody><tr><td>Gamex.A!tr ae7a20692250f85d7a2ed205994f2d26f2d695aef15a9356938454bccbbbd069</td><td>2013</td><td>Assets contain a file named &lsquo;logos.png&rsquo;. This is not a PNG, but a ZIP, and it unzips to different valid outputs depending on whether XOR&rsquo;ed with key (18) or not.</td></tr><tr><td>SmsZombie.A!tr 45099416acd51a4517bd8f6fb994ee0bb9408bdd80dd906183a3cdb4b39c4791</td><td>2012</td><td>Hides malicious package in &lsquo;a33.jpg&rsquo;.</td></tr><tr><td>DroidCoupon.A!tr 94112b350d0fece0a788fb042706cb623a55b559ab4697cb10ca6200ea7714</td><td>2011</td><td>The Rage Against the Cage exploit is hidden in a PNG file in raw resources.</td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;Examples of samples hiding malicious packages in resource files.</b></p></div></li><li><p><span class="bold"><strong>Hiding bytecode</strong></span>. (For instance, abusing linear sweep disassemblers[<span class="citation"><a href="#citation.22">22</a></span>] .) According to [<span class="citation"><a href="#citation.16">16</a></span>], this is encountered in up to 30% of obfuscated samples. For example, we find it in Android/Agent.SZ!tr. This technique can be detected by looking for Dalvik bytecode that does a goto followed by fill-array-data opcode (see <a href="#figure.4">Figure 4</a>). Reverse engineers can use the script androdis.py released with <span class="emphasis"><em>Androguard</em></span> [<span class="citation"><a href="#citation.4">4</a></span>].</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Bytecode is hidden in the array of fill-array-data and invisible to Dalvik disassemblers, which use linear sweep." src="/uploads/images/figures/2014/07/axelle-image4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Bytecode is hidden in the array of fill-array-data and invisible to Dalvik disassemblers, which use linear sweep.</b></p></div></li><li><p><span class="bold"><strong>String table</strong></span>. Android/GinMaster.L (sha256 hash: e86467622b8faf903edcebe0a57b85c036aa59b1820694ef326b50062dfdc910) builds its own string table as a char array (see below array named &lsquo;OGqHAYq8N6Y6tswt8g&rsquo;).</p><pre class="programlisting">package Eg9Vk5Jan;
 class x18nAzukp {
   final private static char[][] OGqHAYq8N6Y6tswt8g;
   static x18nAzukp()
   {
     v0 = new char[][48];
     v1 = new char[49];
     v1 = {97, 0, 110, 0, 100, 0, 114, 0, 111, ...
     v0[0] = v1;
     v2 = new char[56];
     v2 = {... 110, 0, 97, 0, 103, 0, 101, 0, 114, 0};
     v0[1] = v2;
     ...
   }
protected static String rLGAEh9JeCgGn73A(int p2) {
     return new String(
Eg9Vk5Jan.x18nAzukp.OGqHAYq8N6Y6tswt8g[p2]);
}
...
new StringBuilder(x18nAzukp.rLGAEh9JeCgGn73A(43))
</pre><p>The rest of the code references the strings in that char array. So you never see the strings directly, but instead indirect calls like rLGAEh9JeCgGn73A(43) etc.</p></li><li><p><span class="bold"><strong>Na&iuml;ve encoding or encryption</strong></span>. Many samples use Base64 (e.g. Android/Stels), XOR (Android/FakeInst), Caesar (Android/Pincer), or simply chop the data into several chunks (e.g. Android/RuSMS.AO below).</p><pre class="programlisting">String.valueOf(&ldquo;http&rdquo;) + &ldquo;://&rdquo; + &ldquo;ap&rdquo; + &ldquo;iad&rdquo; + &ldquo;ver&rdquo; + &ldquo;t.ru&rdquo;);</pre><p>Some other samples are more creative: Android/Vdloader encrypts characters by subtracting their position in the string (first character minus 0, second character minus 1, etc.), while Android/Tascudap uses its own algorithm. <a href="#table.3">Table 3</a> lists a few examples of samples that use their own custom techniques.</p><div class="table"><a id="table.3"></a><table border="1" summary="A non-exhaustive list of malicious Android samples using
          custom obfuscation techniques."><colgroup><col /><col /><col /></colgroup><thead><tr><th align="center">Android malware name</th><th align="center">Year of discovery</th><th align="center">Obfuscation</th></tr></thead><tbody><tr><td>Agent.SZ!tr 1673f18d7f5778dc4875f10dc507fc9d59be82eaf5060dfc4bfa7a7d6007f7df</td><td>2014</td><td>Hides bytecode using [<span class="citation"><a href="#citation.22">22</a></span>].</td></tr><tr><td>RuSMS.AO 768cfe8f5ca52c13508b113875f04a68174387e44321d68c132e2a7b6e0cbe0a</td><td>2014</td><td>Strings are cut into several parts so as not to be spotted. Uses <span class="emphasis"><em>Adobe</em></span>&rsquo;s <span class="emphasis"><em>AIR</em></span> namespace so as not to look suspicious.</td></tr><tr><td>Stels.A!tr 03c1b44c94c86c3137862c20f9f745e0f89ce2cdb778dc6466a06a65b7a591ae</td><td>2013</td><td>Custom base64 to decode the URL.</td></tr><tr><td>Pincer.A!tr.spy fee013fcbbd30ef37c99eab56aa550d27e00e69150f342b80b08d689a98ccefe</td><td>2013</td><td>Caesar shift to read C&amp;C URL and phone number.</td></tr><tr><td>Tascudap.A!tr 0be2a4b3a0e68769fa5b3c9cd737e0e87abd6cddb29a7e1fdf326f407a658b54</td><td>2013</td><td><span class="emphasis"><em>ProGuard</em></span>-ed. URL is generated from custom encryption. Malware also uses AES with a key which is built from a hard-coded seed.</td></tr><tr><td>SaurFtp.A!tr.spy e769fdf8f2e1a5311ef089c422a7c0cb360d77082d7d1ef139a95c9321ec40</td><td>2013</td><td>C&amp;C URL is XOR encrypted.</td></tr><tr><td>FakeInst.A!tr.dial ac118892190417c39a9ccbc81ce740cf4777fde1</td><td>2012</td><td>SMS text bodies and phone numbers are hidden in a text chunk inside a PNG and &lsquo;encrypted&rsquo; using XOR.</td></tr><tr><td>Vdloader.A!tr c17ca0937891974d852f619d3b7be5defc79c6d7bf6f3beeebb991e684563902</td><td>2012</td><td>Custom encryption: decrypted = char - pos.</td></tr><tr><td>Temai.A!tr 14354ddd2a9d63b3b5c5db94fd717953572f1293f291e26bc7a4725be4b0b3b8</td><td>2012</td><td>Downloads another password-protected ZIP file. This ZIP file is decrypted with a hard-coded password, and is a script that opens a backdoor on the phone.</td></tr><tr><td>LuckyCat.A!tr 5d2b0d143f09f31bf52f0a0810c66f94660490945a4ee679ea80f709aae3bd</td><td>2012</td><td>XOR encryption of traffic sent to attacker.</td></tr><tr><td>Pjapps.A!tr 02329dc3aa91b5175461b3c298b411fe9d35c8425a5fa485c3a3c4daa12c7d2a</td><td>2011</td><td>URL to contact is &lsquo;encrypted&rsquo; with a simple algorithm where you only keep one character in every two.</td></tr></tbody></table><p class="title"><b>Table&nbsp;3.&nbsp;A non-exhaustive list of malicious Android samples using custom obfuscation techniques.</b></p></div></li><li><p><span class="bold"><strong>Encryption</strong></span>. Malware authors use encryption for various reasons [<span class="citation"><a href="#citation.23">23</a></span>]: to conceal strings and exploits, to encrypt communication with the C&amp;C server, to send encrypted emails, and so on. Recent statistical analysis of our <span class="emphasis"><em>Android</em></span> malware database showed that 27% of malware samples use encryption. (This percentage should be understood as an approximate maximum, as some pieces of malware use encryption but in the &lsquo;legitimate&rsquo; parts of their code, not for malicious intent. This has been computed over a set of 460,493 <span class="emphasis"><em>Android</em></span> samples.) For example, Android/Geinimi uses DES, Android/SmsSpy.HW!tr uses Blowfish, and Android/RootSmart uses AES. Also note that <span class="emphasis"><em>Android</em></span>&rsquo;s License Verification Library (LVL) uses AES-based obfuscation:</p><div class="orderedlist"><ol type="1"><li><p>A hard-coded prefix (&lsquo;com.android.vending.licensing.AESObfuscator-1|&rsquo;) is added to the string to be obfuscated.</p></li><li><p>The string is encrypted using AES in CBC mode and PKCS5 padding. The key and IV are hard coded.</p></li><li><p>The encrypted result is encoded with Base64.</p></li></ol></div><pre class="programlisting">package com.android.vending.licensing;
...
public class AESObfuscator implements Obfuscator {
...
  private static final String CIPHER_ALGORITHM =
    &ldquo;AES/CBC/PKCS5Padding&rdquo;;
  private static final byte[] IV = { 16, 74, 71, -80...
  private static final String header =
    &ldquo;com.android.vending.licensing.AESObfuscator-1|&rdquo;;
</pre><p>LVL&rsquo;s obfuscation is used in some samples of Android/Plankton.</p><p>In most cases, the encryption is hard coded. However, some malware do not actually hard code it, but regenerate the key from a random number generator seeded with a hard-coded seed. For instance, this technique is used by Android/RootSmart and Android/Fjcon.</p><p><a href="#table.4">Table 4</a> lists a few examples of samples that use encryption as an obfuscation technique.</p><div class="table"><a id="table.4"></a><table border="1" summary="Examples of malicious samples using cryptography as an
          obfuscation technique."><colgroup><col /><col /><col /></colgroup><thead><tr><th align="center">Android malware name</th><th align="center">Year of discovery</th><th align="center">Obfuscation</th></tr></thead><tbody><tr><td>SmsSpy.HW!tr.spy 69cb8163e959e60b0e024457449c4c8d2586ed3cf2e46351fdedec8ef64a7a79</td><td>2014</td><td>Contains an asset, &lsquo;data.xml&rsquo;, which is encrypted using Blowfish ECB and a hard-coded key.</td></tr><tr><td>Agent.BH!tr.spy 5c89b1b008efee0c3a6294d0a02c77845cd91d1faad5df6bf7b6d54a5f3cd0d3</td><td>2014</td><td>Sends emails using SMTP with TLS authentication.</td></tr><tr><td>GMaster.B 18ad4064750a0e4733a828794f76e6d5b4e60b0fc79c54ba1d8955db82e489d2</td><td>2013</td><td>Uses Triple DES EDE, CBC with PKCS7 padding to send JSON object containing IMSI, IMEI and various OS parameters.</td></tr><tr><td>FakeDefend.A!tr 5ad411cdcbf68f8f449c470b514ed4ee31cafdf2997c3cd0e6af032750edca58</td><td>2013</td><td>List of fake infections to display on the device is encrypted with AES.</td></tr><tr><td>NotCompatible.A!tr.bdr 2c5e656af90044cf5cc694519a42477cb18bd4b2722b1474cdead4a8748d3f70</td><td>2012</td><td>C&amp;C URLs located in a raw resources file are encrypted using AES in ECB mode. The encryption key is the sha256 hash of a hard-coded value.</td></tr><tr><td>Fjcon.A!tr 39f64285207b8184c4940252e2fadf7e903ea0a611bc1bebc84d33a8b692bada</td><td>2012</td><td>URLs are encrypted using AES. The encryption key is generated using a SHA-1-based PRNG, seeded with value 125.</td></tr><tr><td>RootSmart.A!tr.dldr ccdfe44762c1c3492f0ca4135afdc258fa7b39ecb9c156a6f0f15e9d05a3ac7e</td><td>2012</td><td>Domain name is encrypted using AES. The encryption key is generated using a SHA-1-based PRNG.</td></tr><tr><td>BaseBridge.A!tr 07e1349dfc31e9e6251a2920521e453f71ce296352861902b99734a8a7b7f554</td><td>2011</td><td>Uses variable and string obfuscation. Uses AES encryption.</td></tr><tr><td>Hongtoutou.A!tr 4ae1c0faa06ee4dfb6c96b6537d027e90c870d7d3ddcfd5fcde680be9dc51c69</td><td>2011</td><td>Encrypts phone info sent to attacker, using DES.</td></tr><tr><td>SndApp.A!tr.spy 7e057d3133639374195da6c9805fd7f0edb818047d49955c3f5291f01b94</td><td>2011</td><td>Uses AES in CBC mode.</td></tr><tr><td>JSmsHider.A!tr 0ea2d931ebb55668ecb101304f316725f6fa1574dbb191dc2d647c65b3aebf</td><td>2011</td><td>Encrypts its communication with the C&amp;C using DES.</td></tr><tr><td>Geinimi.A!tr 2e998614b17adbafeb55b5fb9820f63aec5ce8b4</td><td>2011</td><td>Communication with the C&amp;C is encrypted, so are commands and strings inside the binary. The algorithm is DES, and the key is hard coded.</td></tr></tbody></table><p class="title"><b>Table&nbsp;4.&nbsp;Examples of malicious samples using cryptography as an obfuscation technique.</b></p></div><p>The reversing of samples using cryptography usually means copy-pasting the decompiled Java code that handles the decryption (perhaps with slight adaptation) and running it independently on the data to decrypt. Python comes in handy for writing quick decryption code as there are many decryption libraries. For example, we decrypt an encrypted XML configuration file of Android/SmsSpy.HW!tr using the following code:</p><pre class="programlisting">import Crypto
from Crypto.Cipher import Blowfish
def PKCS5Padding(string):
  byteNum = len(string)
  packingLength = 8 - byteNum % 8
  appendage = chr(packingLength) * packingLength
  return string + appendage
def DoDecrypt(string):
  key = &lsquo;tisWsx2xivgQXRxq&rsquo;
  c1 = Blowfish.new(key, Blowfish.MODE_ECB)
  packedString = PKCS5Padding(string)
  return c1.decrypt(packedString)
</pre></li><li><p><span class="bold"><strong>Loading non-Dalvik code</strong></span>. For instance, Android/DroidKungFu.G loads an ELF executable which holds the payload. Android/FakePlay.B!tr holds a malicious JavaScript that implements click fraud. On <span class="emphasis"><em>Windows Mobile</em></span>, we have seen WinCE/Redoc loading Basic via Basic4PPC. Basic4Android exists, but we haven&rsquo;t seen any malicious samples using it yet. Flash code could hold malicious payloads too.</p><div class="table"><a id="table.5"></a><table border="1" summary="Examples of samples loading non-Dalvik malicious
          code."><colgroup><col /><col /><col /></colgroup><thead><tr><th align="center">Android malware name</th><th align="center">Year of discovery</th><th align="center">Obfuscation</th></tr></thead><tbody><tr><td>FakePlay.B!tr 4bde46accfeb2c85fe75c6dd57bba898fbb3316f7c4be788bc18676451b54561</td><td>2013</td><td>The malicious payload is in the JavaScript.</td></tr><tr><td>DroidKungFu.G!tr b03a8fc6d508e16652b07fb0c3418ce04bd9a3c8e47a3b134615c339e6e66bf7</td><td>2012</td><td>Asset named &lsquo;mylogo.jpg&rsquo; is a valid JPG file, but it also contains an ELF.</td></tr></tbody></table><p class="title"><b>Table&nbsp;5.&nbsp;Examples of samples loading non-Dalvik malicious code.</b></p></div></li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4712595"></a>4. Obfuscation in the future</h2></div></div></div><p>As we have seen in the previous sections, malware authors are interested in obfuscating their code, and if <span class="emphasis"><em>Android</em></span>&rsquo;s crime scene continues to follow the evolution of <span class="emphasis"><em>Windows</em></span> malware (as it has done until now), then we are only at the beginning of the story. In particular, packers are likely to normalize as UPX (and others) did for <span class="emphasis"><em>Windows</em></span>. In this section, we prepare for techniques malware authors might use in the near future.</p><p>In [<span class="citation"><a href="#citation.24">24</a></span>], Bremer demonstrates that it is possible to inject bytecode into nearly any class, with only minor modification. The class needs to have at least a virtual function, and the injection code must read the bytecode to inject as a string and replace the address of that virtual method with the address of the string. An attacker could use this technique for evil:</p><div class="itemizedlist"><ul type="disc"><li><p>Create a genuine application which acts as a bytecode loader.</p></li><li><p>Read (possibly decrypt) bytecode to inject from a resource, or a remote host.</p></li><li><p>Inject that bytecode into the genuine application and have it perform a malicious action.</p></li></ul></div><p>Fortunately, for now, Bremer&rsquo;s technique is limited to returning integers (see <a href="#figure.5">Figure 5</a>). However, there is no doubt that it can (and perhaps will) be extended in the future. Anti-virus analysts may try to detect the bytecode loading code, which is based on the iput-quick and invoke-virtual opcodes, however a generic signature will be difficult to design as there are several possible variations and potential false positives.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Injecting constant 0x07de = 2014 bytecode in Bremer&rsquo;s proof of concept." src="/uploads/images/figures/2014/07/axelle-image5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Injecting constant 0x07de = 2014 bytecode in Bremer&rsquo;s proof of concept.</b></p></div><p>In [<span class="citation"><a href="#citation.9">9</a></span>], we demonstrated that it is possible to hide methods from disassemblers. This is potentially interesting to attackers if they locate their malicious code in those hidden parts. Fortunately, the technique was published along with the <span class="emphasis"><em>Hidex</em></span> detection tool [<span class="citation"><a href="#citation.8">8</a></span>]. (For more information, please see slides from Insomni&rsquo;hack 2014 [<span class="citation"><a href="#citation.9">9</a></span>].)</p><p>Ange Albertini has released a Python script [<span class="citation"><a href="#citation.25">25</a></span>], [<span class="citation"><a href="#citation.26">26</a></span>] that is able to manipulate the encrypted output of AES or DES so that it looks like a customizable PNG, JPG or sound file. A malware author might be interested in using this technique to hide an APK in assets or resources. He/she would create an application which looks fairly genuine, with a seemingly innocent PNG as an asset. The code would load the asset and decrypt it with a hard-coded key to reveal the real, evil APK. The malicious APK would then be installed on the device. The attack is feasible, and such an APK can be created using AngeCryption. However, a few hacks are necessary: the End Of Central Directory (EOCD), which marks the end of the ZIP file, must be duplicated and padded to 16 bytes (for encryption with AES). We are currently working on a proof of concept and detection tool.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4712597"></a>5. Conclusion</h2></div></div></div><p>We have seen <span class="emphasis"><em>Android</em></span> malware authors use plenty of different techniques to obfuscate their code. With new tools like <span class="emphasis"><em>Bangcle</em></span>, <span class="emphasis"><em>APK Protect</em></span> and <span class="emphasis"><em>DexGuard</em></span>, we fear that mobile malware will become increasingly difficult to reverse in the near future &ndash; not to mention techniques such as bytecode injection, method hiding or AngeCryption which haven&rsquo;t been seen on the malware scene, yet.</p><p>In this paper, we have shown that we are not totally helpless in the face of obfuscation. A few simple, but well chosen Unix find/grep commands are useful for understanding what is happening. And in most cases, we have managed to reverse samples with known existing tools such as <span class="emphasis"><em>baksmali</em></span>, <span class="emphasis"><em>apktool</em></span> and <span class="emphasis"><em>Androguard</em></span> &ndash; these tools usually work adequately (or nearly), it is more a matter of looking at the right location. Moreover, encryption, which sounds frightening at first, does not turn out to be so difficult to reverse in practice: we just have to write a few lines of code to decrypt the ciphertext. For situations in which reversing remains difficult, we have provided a few enhancements to <span class="emphasis"><em>Hidex</em></span>, a Perl script which assists reverse engineers in detecting some situations, and helps with the renaming of non-ASCII strings used by some obfuscators.</p><p>So we are not helpless, but if we want to keep pace with the techniques malware authors are likely to use in the near future, we had better focus on tools and research in this area as soon as possible.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4312090"></a>Acknowledgements</h2></div></div></div><p>We thank Ange Albertini, Jurriaan Bremer, Anthony Desnos, Robert Lipovsky and Miroslav Legen for their help.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3500452"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Implementing an Obfuscator. <span class="bibliosource"><a href="https://developer.android.com/google/play/licensing/adding-licensing.html#impl-Obfuscator" target="_blank">https://developer.android.com/google/play/licensing/adding-licensing.html#impl-Obfuscator</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] DexGuard. <span class="bibliosource"><a href="http://www.saikoa.com/dexguard/" target="_blank">http://www.saikoa.com/dexguard</a>/</span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] JD-GUI. <span class="bibliosource"><a href="http://jd.benow.ca/" target="_blank">http://jd.benow.ca/</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Androguard. <span class="bibliosource"><a href="https://code.google.com/p/androguard/" target="_blank">https://code.google.com/p/androguard/</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] Nihilus. Reversing DexGuard 5.x. version 1.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] Falli&egrave;re, N. A look inside DexGuard. <span class="bibliosource"><a href="http://www.android-decompiler.com/blog/2013/04/02/a-look-inside-dexguard/" target="_blank">http://www.android-decompiler.com/blog/2013/04/02/a-look-inside-dexguard/</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] Smali. <span class="bibliosource"><a href="https://code.google.com/p/smali/" target="_blank">https://code.google.com/p/smali/</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] Hidex. <span class="bibliosource"><a href="https://github.com/cryptax/dextools/tree/master/hidex" target="_blank">https://github.com/cryptax/dextools/tree/master/hidex</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] Apvrille, A. Playing Hide and Seek with Dalvik Executables. In Hack.Lu, October 2013. <span class="bibliosource"><a href="http://www.fortiguard.com/uploads/general/hidex_insomni.pdf" target="_blank">http://www.fortiguard.com/uploads/general/hidex_insomni.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] Android. Dalvik Executable Format. <span class="bibliosource"><a href="https://source.android.com/devices/tech/dalvik/dex-format.html" target="_blank">http://source.android.com/devices/tech/dalvik/dex-format.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.11"></a><p class="bibliomixed">[11] APK Protect. <span class="bibliosource"><a href="http://www.apkprotect.com/" target="_blank">http://www.apkprotect.com/</a></span>.</p></div><div class="bibliomixed"><a id="citation.12"></a><p class="bibliomixed">[12] Andrubis. <span class="bibliosource"><a href="http://anubis.iseclab.org/" target="_blank">http://anubis.iseclab.org/</a></span>.</p></div><div class="bibliomixed"><a id="citation.13"></a><p class="bibliomixed">[13] Dehoser. <span class="bibliosource"><a href="https://github.com/strazzere/dehoser/" target="_blank">https://github.com/strazzere/dehoser/</a></span>.</p></div><div class="bibliomixed"><a id="citation.14"></a><p class="bibliomixed">[14] Bangcle. <span class="bibliosource"><a href="http://www.bangcle.com/" target="_blank">http://www.bangcle.com/</a></span>.</p></div><div class="bibliomixed"><a id="citation.15"></a><p class="bibliomixed">[15] Yu, R. Android packer: facing the challenges, building solutions. In Proceedings of the 24th Virus Bulletin International Conference (VB2014). (To be published.)</p></div><div class="bibliomixed"><a id="citation.16"></a><p class="bibliomixed">[16] Lipovsky, R. Obfuzzcation issues. In CARO Workshop, May 2014.</p></div><div class="bibliomixed"><a id="citation.17"></a><p class="bibliomixed">[17] Jia, J. Android APK. May 2013. <span class="bibliosource"><a href="http://blog.csdn.net/androidsecurity/" target="_blank">http://blog.csdn.net/androidsecurity/</a></span> (in Chinese).</p></div><div class="bibliomixed"><a id="citation.18"></a><p class="bibliomixed">[18] Pan, B. Bangcle and crack the encryption method. December 2013. <span class="bibliosource"><a href="http://pandazheng.blog.163.com/blog/static/1768172092013119311705/" target="_blank">http://pandazheng.blog.163.com/blog/static/1768172092013119311705/</a></span> (in Chinese).</p></div><div class="bibliomixed"><a id="citation.19"></a><p class="bibliomixed">[19] Strazzere, T. Dex Education: Practicing Safe Dex. BlackHat USA, July 2012. <span class="bibliosource"><a href="http://www.strazzere.com/papers/DexEducation-PracticingSafeDex.pdf" target="_blank">http://www.strazzere.com/papers/DexEducation-PracticingSafeDex.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.20"></a><p class="bibliomixed">[20] Mody, S. &lsquo;I am not the D&rsquo;r.0,1d you are looking for&rsquo;: an Analysis of Android Malware Obfuscation. In Proceedings of the 23rd Virus Bulletin International Conference, pp.105&ndash;113, October 2013.</p></div><div class="bibliomixed"><a id="citation.21"></a><p class="bibliomixed">[21] Albertini, A. This PDF is a JPEG; or This Proof of Concept is a Picture of Cats. Journal of PoC &ndash; GTFO, 3, 2014.</p></div><div class="bibliomixed"><a id="citation.22"></a><p class="bibliomixed">[22] Schulz, P. Dalvik Bytecode Obfuscation on Android, July 2012.</p></div><div class="bibliomixed"><a id="citation.23"></a><p class="bibliomixed">[23] Apvrille, A. Cryptography for Mobile Malware Obfuscation. In RSA Europe Conference, 2011. <span class="bibliosource"><a href="http://www.fortiguard.com/files/NMS-305-Apvrille-Revised.pdf" target="_blank">http://www.fortiguard.com/files/NMS-305-Apvrille-Revised.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.24"></a><p class="bibliomixed">[24] Bremer, J. Abusing Dalvik Beyond Recognition, October 2013. Hack.lu.</p></div><div class="bibliomixed"><a id="citation.25"></a><p class="bibliomixed">[25] Albertini, A. When AES(*)=*, April 2014. <span class="bibliosource"><a href="https://corkami.googlecode.com/svn/trunk/src/angecryption/slides/AngeCryption.pdf" target="_blank">https://corkami.googlecode.com/svn/trunk/src/angecryption/slides/AngeCryption.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.26"></a><p class="bibliomixed">[26] Angecrypt.py. <span class="bibliosource"><a href="https://corkami.googlecode.com/svn/trunk/src/angecryption/angecrypt.py" target="_blank">http://corkami.googlecode.com/svn/trunk/src/angecryption/angecrypt.py</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2014/vb201407-Android-obfuscation.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Obfuscation in Android malware, and how to fight back&url=https://www.virusbulletin.com/virusbulletin/2014/07/obfuscation-android-malware-and-how-fight-back"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/07/obfuscation-android-malware-and-how-fight-back'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/07/obfuscation-android-malware-and-how-fight-back&title=Obfuscation in Android malware, and how to fight back"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/07/obfuscation-android-malware-and-how-fight-back&t=Obfuscation in Android malware, and how to fight back"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/07/obfuscation-android-malware-and-how-fight-back"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>