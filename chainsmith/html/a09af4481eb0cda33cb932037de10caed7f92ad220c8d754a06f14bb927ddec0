<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: Apple without a shell – iOS under targeted attack</title>
<meta name="description" content="Apple has a strict review process for apps published in its App Store - which, although not perfect, provides good protection for iOS users and makes it difficult for malware to exist in the App Store. However, apps may also be distributed using enterprise provisioning profiles without having to go through this review process - and apps distributed in this way have become a new attack vector. In their VB2014 paper, Tao Wei and colleagues explain the risk of an attacker distributing apps using enterprise provisioning profiles to conduct targeted attacks, including remote installation through spear phishing, autostart after reboot, background monitoring, and bypassing certificate revocation." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1741;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage">
<div>
<div>
<h1 class="title"><a id="vb201411-Apple-without-shell"></a>VB2014 paper: Apple without a shell – iOS under targeted attack</h1>
</div>
<div>
<p class="pubdate">2014-11-12</p>
</div>
<div>
<div class="authorgroup">
<div class="author titlepage">
<h3 class="author"><span class="firstname">Tao</span> <span class="surname">Wei</span></h3>
<span class="orgname">FireEye, Inc.</span>, <span class="orgdiv">USA</span></div>
<div class="author titlepage">
<h3 class="author"><span class="firstname">Min</span> <span class="surname">Zheng</span></h3>
<span class="orgname">FireEye, Inc.</span>, <span class="orgdiv">USA</span></div>
<div class="author titlepage">
<h3 class="author"><span class="firstname">Hui</span> <span class="surname">Xue</span></h3>
<span class="orgname">FireEye, Inc.</span>, <span class="orgdiv">USA</span></div>
<div class="author titlepage">
<h3 class="author"><span class="firstname">Dawn</span> <span class="surname">Song</span></h3>
<span class="orgname">FireEye, Inc.</span>, <span class="orgdiv">USA</span></div>
<strong class="editedby">Editor: </strong><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div>
</div>
<div>
<div class="abstract">
<p class="title"><strong>Abstract</strong></p>
<p>Apple has a strict review process for apps published in its App Store - which, although not perfect, provides good protection for iOS users and makes it difficult for malware to exist in the App Store. However, apps may also be distributed using enterprise provisioning profiles without having to go through this review process - and apps distributed in this way have become a new attack vector. In their VB2014 paper, Tao Wei and colleagues explain the risk of an attacker distributing apps using enterprise provisioning profiles to conduct targeted attacks, including remote installation through spear phishing, autostart after reboot, background monitoring, and bypassing certificate revocation.</p>
</div>
</div>
<div>
<p class="copyright"><em>Copyright © 2014 Virus Bulletin</em></p>
</div>
</div>
<hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2697" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2697" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id2654352">Abstract</a></span></dt><dt><span class="sect1"><a href="#id2924605">1. Introduction</a></span></dt><dt><span class="sect1"><a href="#id2617088">2. Apple review process</a></span></dt><dt><span class="sect1"><a href="#id3855308">3. Private APIs</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4572470">Review process vs. private APIs</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2766674">4. Distributing iOS apps through enterprise provisioning</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4551949">4.1 Revocation of enterprise certificates</a></span></dt><dt><span class="sect2"><a href="#id2643546">4.2 Real-world apps distributed through enterprise provisioning</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4898650">5. Targeted attacks through enterprise provisioning</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4477089">5.1 Spear phishing through enterprise provisioning</a></span></dt><dt><span class="sect2"><a href="#id3646969">5.2. Persistent monitoring</a></span></dt><dt><span class="sect2"><a href="#id2851943">5.3 Disabling OCSP</a></span></dt><dt><span class="sect2"><a href="#id3755414">5.4 Attacks by abusing private APIs</a></span></dt><dt><span class="sect2"><a href="#id3755416">5.5 Attacks by deceptive behaviours</a></span></dt><dt><span class="sect2"><a href="#id3418453">5.6 Attacks by using root exploits</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4525564">6. Discussion</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4819455">6.1 UDID and ad-hoc provisioning</a></span></dt><dt><span class="sect2"><a href="#id3645900">6.2 Abusing private APIs through bypassing review</a></span></dt><dt><span class="sect2"><a href="#id3854496">6.3 Challenges of iOS security architecture against targeted attacks</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2982138">7. Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2654352"></a>Abstract</h2></div></div></div><p><span class="emphasis"><em>Apple</em></span> has a strict review process for apps published in its <span class="emphasis"><em>App Store</em></span>. The review guidelines not only disallow use of the powerful private APIs but also forbid dangerous or deceptive behaviours. The review process, though imperfect, provides good protection for <span class="emphasis"><em>iOS</em></span> users and makes it difficult for malware to exist in the <span class="emphasis"><em>App Store</em></span>. However, apps may also be distributed using enterprise provisioning profiles without having to go through such a review process. Apps distributed in this way have become a new attack vector. Attackers can launch targeted attacks by delivering malicious apps leveraging private APIs to the victim&rsquo;s device. In this paper, we explain the risk of an attacker distributing apps using enterprise provisioning profiles to conduct targeted attacks, including remote installation through spear phishing, autostart after reboot, background monitoring and bypassing certificate revocation. We show that serious, targeted attacks on <span class="emphasis"><em>iOS</em></span> are both feasible and realistic. We also discuss the implications this has on the <span class="emphasis"><em>iOS</em></span> security architecture and the challenges of addressing them.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2924605"></a>1. Introduction</h2></div></div></div><p>By the end of 2013, the number of <span class="emphasis"><em>iOS</em></span> users had reached 800 million [<span class="citation"><a href="#citation.1">1</a></span>] and there were over one million apps in the <span class="emphasis"><em>iOS App Store</em></span> [<span class="citation"><a href="#citation.2">2</a></span>]. Despite the platform&rsquo;s popularity, little <span class="emphasis"><em>iOS</em></span> malware has been discovered [<span class="citation"><a href="#citation.3">3</a></span>]. It has also been reported [<span class="citation"><a href="#citation.4">4</a></span>] that <span class="emphasis"><em>iOS</em></span> is more secure than Android due to its controlled distribution channel and rigorous app review process. However, there are still potential risks for <span class="emphasis"><em>iOS</em></span> systems. </p><p>There are limited attack surfaces for traditional targeted attacks against <span class="emphasis"><em>iOS</em></span> devices. While distributing malware through the <span class="emphasis"><em>App Store</em></span> is difficult, spear phishing and drive-by downloads are not easy either. Attacks against <span class="emphasis"><em>Safari</em></span> and PDF readers call for advanced skills, and <span class="emphasis"><em>Apple</em></span> can fix these vulnerabilities by pushing out updates quickly. </p><p>In contrast, this paper describes a new type of security risk for <span class="emphasis"><em>iOS</em></span> devices, where attackers may potentially utilize a bigger attack surface, which becomes harder to fix. This new type of risk leverages <span class="emphasis"><em>Apple</em></span>&rsquo;s enterprise program that can distribute apps to an unlimited number of devices without going through <span class="emphasis"><em>Apple</em></span>&rsquo;s app review process. By bypassing the review process, a malicious app can employ powerful private APIs hidden in <span class="emphasis"><em>iOS</em></span>&rsquo;s frameworks to steal sensitive information and attack various vulnerabilities on the system. </p><p>In contrast to traditional attacks that have limited attack surface, a malicious app installed through enterprise provisioning profiles can conduct malicious behaviours by abusing private APIs, deceiving users with fake UIs, or exploiting all kinds of known or even zero-day vulnerabilities. It&rsquo;s hard for <span class="emphasis"><em>Apple</em></span> to cope with apps outside of the <span class="emphasis"><em>App Store</em></span>, which don&rsquo;t comply with its review guidelines, and hard for it to stop them from attacking existing vulnerabilities.</p><p>The malicious apps may also use tricks to ensure that they are launched automatically after the system reboots and that they keep running in the background continuously. Given that these apps can use private APIs, they may, for example, monitor the user continuously by silently logging the user&rsquo;s inputs in the background, even without bypassing the sandbox. </p><p>In this paper, we study the security risk posed by this new attack method and examine every step involved in a potential campaign. In section 2, we describe <span class="emphasis"><em>Apple</em></span>&rsquo;s review process for apps in the <span class="emphasis"><em>App Store</em></span> and what kind of protections it enforces. Section 3 explains the power of private APIs, and Section 4 explains how enterprise distribution works. Section 5 studies the new attack vector made possible by using private APIs in apps distributed using enterprise provisioning. Section 6 discusses related issues, including the implications of iOS security architecture and the challenges in addressing them. Section 7 gives a conclusion. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2617088"></a>2. Apple review process</h2></div></div></div><p><span class="emphasis"><em>Apple</em></span>&rsquo;s review process enforces a set of review guidelines [<span class="citation"><a href="#citation.5">5</a></span>], which includes over 100 rules. The rule categories cover various aspects, such as user interface, location, push notifications, trademarks, violence, religion, gambling, charities, privacy and advertising. Here are some examples of the rules extracted from [<span class="citation"><a href="#citation.5">5</a></span>]:</p><div class="itemizedlist"><ul type="disc"><li><p>Apps that crash will be rejected.</p></li><li><p>Apps that include undocumented or hidden features inconsistent with the description of the app will be rejected.</p></li><li><p>Apps that use non-public APIs will be rejected.</p></li><li><p>Apps that read or write data outside their designated container areas will be rejected.</p></li><li><p>Apps that download code in any way or form will be rejected.</p></li><li><p>Apps that install or launch other executable code will be rejected.</p></li><li><p>Apps that duplicate apps already in the <span class="emphasis"><em>App Store</em></span> may be rejected, particularly if there are many of them, such as fart, burp, flashlight, and Kama Sutra apps.</p></li><li><p>Apps that are intended to provide trick or fake functionality that are not clearly marked as such will be rejected.</p></li><li><p>Multitasking apps may only use background services for their intended purposes: VoIP, audio playback, location, task completion, local notifications, etc.</p></li><li><p>Apps that browse the web must use the iOS WebKit framework and WebKit JavaScript.</p></li><li><p>If you attempt to cheat the system (for example, by trying to trick the review process, steal data from users, copy another developer&rsquo;s work, or manipulate the ratings) your apps will be removed from the store and you will be expelled from the developer program. </p></li><li><p>Apps that create alternate desktop/home screen environments or simulate multi-app widget experiences will be rejected.</p></li><li><p>Apps cannot transmit data about a user without obtaining the user&rsquo;s prior permission and providing the user with access to information about how and where the data will be used.</p></li><li><p>Location data can only be used when directly relevant to the features and services provided by the app to the user or to support approved advertising uses.</p></li></ul></div><p><span class="emphasis"><em>Apple</em></span> uses the review process to prevent apps from conducting undesirable behaviours. However, if attackers can bypass the review process, they can break all these rules and carry out malicious behaviours that have severe security consequences on a victim&rsquo;s device. For example, attackers can use <span class="emphasis"><em>iOS</em></span> private APIs for powerful attacks.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3855308"></a>3. Private APIs</h2></div></div></div><p><span class="emphasis"><em>iOS</em></span> apps interact with the underlying system using Application Programming Interfaces (APIs). However, not all APIs are equally open to app developers. <span class="emphasis"><em>Apple</em></span> forbids some of the APIs, known as &lsquo;private APIs&rsquo;, from being used in the apps on <span class="emphasis"><em>App Store</em></span>. <span class="emphasis"><em>Apple</em></span> stipulates that these private APIs should only be used by the framework classes internally or by the <span class="emphasis"><em>iOS</em></span> system apps [<span class="citation"><a href="#citation.5">5</a></span>], and these private APIs remain undocumented.</p><p>Private APIs are considerably more powerful than their public API counterparts. For example, on <span class="emphasis"><em>iOS 6.0</em></span>, one app can call some public <span class="emphasis"><em>Twitter</em></span> APIs to post a Tweet on the user&rsquo;s <span class="emphasis"><em>Twitter</em></span> page (<a href="#figure.1">Figure 1</a>) and the user must consent by clicking the &lsquo;post&rsquo; button. On the contrary, by using private APIs, the app can post the Tweet without notifying the user [<span class="citation"><a href="#citation.8">8</a></span>] at all.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Public Twitter APIs are called to post a Tweet on the user&rsquo;s Twitter page &ndash; the user must click the &lsquo;post&rsquo; button." src="/uploads/images/figures/2014/11/Wei-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Public Twitter APIs are called to post a Tweet on the user&rsquo;s Twitter page &ndash; the user must click the &lsquo;post&rsquo; button.</b></p></div><p>Though <span class="emphasis"><em>Apple</em></span> forbids the use of private APIs, and provides no documentation about them, an attacker can still obtain a list of private APIs. To do so, one can begin by using otool [<span class="citation"><a href="#citation.12">12</a></span>] or classdump [<span class="citation"><a href="#citation.13">13</a></span>] to obtain a complete list of APIs, both public and private, from the <span class="emphasis"><em>iOS</em></span> framework binaries shipped within the SDK. One can then obtain private APIs by subtracting the documented public APIs [<span class="citation"><a href="#citation.14">14</a></span>]. <a href="#table.1">Table 1</a> lists several examples of private APIs.</p><div class="table"><a id="table.1"></a><table border="1" summary="Private API examples."><colgroup><col /><col /><col /><col /><col /></colgroup><thead><tr><th align="center">Method</th><th align="center">Framework</th><th align="center">Usage</th><th align="center">iOS 6.x availability</th><th align="center">iOS 7.x availability</th></tr></thead><tbody><tr><td>CTSIMSupportCopyMobileSubscriberIdentity()</td><td>Core telephony</td><td>Get Device IMSI</td><td>Yes</td><td>No</td></tr><tr><td>[[UIDevice currentDevice] UniqueIdentifier]</td><td>UIKit</td><td>Get Device UDID</td><td>Yes</td><td>No</td></tr><tr><td>SBSCopyApplicationDisplayIdentifiers()</td><td>SpringBoardServices</td><td>Get the array of current running app bundle IDs</td><td>Yes</td><td>No</td></tr><tr><td>[[CTMessageCenter sharedMessageCenter] incomingMessageWithId: result]</td><td>Core telephony</td><td>Get the text of the incoming SMS message</td><td>Yes</td><td>Yes</td></tr><tr><td>MobileInstallationLookup()</td><td>Mobile installation</td><td>Get the bundle ID list of installed iOS apps</td><td>Yes</td><td>Yes</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Private API examples.</b></p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4572470"></a>Review process vs. private APIs</h3></div></div></div><p><span class="emphasis"><em>Apple</em></span> forbids apps in the <span class="emphasis"><em>App Store</em></span> from using private APIs, and bans app developers/vendors who do so. In February 2012, <span class="emphasis"><em>Apple</em></span> banned all apps from <span class="emphasis"><em>Qihoo</em></span> [<span class="citation"><a href="#citation.6">6</a></span>], a prominent Chinese anti-virus, web browser and search engine vendor. This major incident happened because <span class="emphasis"><em>Qihoo</em></span> used <span class="emphasis"><em>iOS</em></span> private APIs and encrypted the function calls in its <span class="emphasis"><em>iOS</em></span> apps &ndash; <span class="emphasis"><em>Apple</em></span> has a policy that forbids any non-<span class="emphasis"><em>Apple</em></span> apps in its <span class="emphasis"><em>App Store</em></span> from using private APIs.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2766674"></a>4. Distributing iOS apps through enterprise provisioning</h2></div></div></div><p>Besides the<span class="emphasis"><em> iOS App Store</em></span>, <span class="emphasis"><em>iOS</em></span> apps can also be distributed under enterprise provisioning profiles to an unlimited number of users. The iOS Developer Enterprise Program [<span class="citation"><a href="#citation.15">15</a></span>] enables a company to sign in-house apps with its enterprise distribution certificate and distribute the apps to employees using enterprise provisioning profiles.</p><p>In practice, many app developers use this venue to distribute apps to the public [<span class="citation"><a href="#citation.10">10</a></span>]. As mentioned before, apps distributed in this manner don&rsquo;t have to go through <span class="emphasis"><em>Apple</em></span>&rsquo;s review process [<span class="citation"><a href="#citation.5">5</a></span>] and don&rsquo;t have to conform to the rules in <span class="emphasis"><em>Apple</em></span>&rsquo;s guidelines on library usage, privacy, user interface, etc. Thus, not only can these apps freely use private APIs, they can also do other tricks such as mimicking apps originally bundled with the device, such as <span class="emphasis"><em>App Store </em></span>or<span class="emphasis"><em> iTunes Store</em></span>, or creating alternative home screen environments.</p><p>Distributing apps using enterprise provisioning profiles combined with unregulated usage of private APIs creates a new attack vector that enables attackers to distribute malware leveraging private APIs. Benign apps distributed under enterprise provisioning profiles also become valuable targets for attackers since many of them use private APIs.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4551949"></a>4.1 Revocation of enterprise certificates</h3></div></div></div><p><span class="emphasis"><em>Apple</em></span> may revoke an enterprise distribution certificate, if it suspects abuse. Revoking a distribution certificate invalidates all of the apps that have been signed with it. <span class="emphasis"><em>Apple</em></span> allows the enterprise apps to be used by employees of the developer company only, rather than by everyone in the public. For this reason, <span class="emphasis"><em>Apple</em></span> revoked the enterprise distribution certificate of <span class="emphasis"><em>Qihoo</em></span>, which released its &lsquo;enterprise&rsquo; apps to the public [<span class="citation"><a href="#citation.7">7</a></span>]. </p><p><span class="emphasis"><em>Apple</em></span> uses the Online Certificate Status Protocol (OCSP) to validate enterprise certificates. According to the <span class="emphasis"><em>iOS</em></span> Deployment Technical Reference [<span class="citation"><a href="#citation.15">15</a></span>], the first time a user opens an app distributed using the enterprise provisioning profile, <span class="emphasis"><em>iOS</em></span> contacts <span class="emphasis"><em>Apple</em></span>&rsquo;s OCSP server to validate its distribution certificate. A revoked distribution certificate will prevent the app from launching. The OCSP response will be cached on the device for three to seven days [<span class="citation"><a href="#citation.15">15</a></span>]. However, &lsquo;inability to contact or get a response from the OCSP server isn&rsquo;t interpreted as a revocation&rsquo; [<span class="citation"><a href="#citation.15">15</a></span>]. That means <span class="emphasis"><em>iOS</em></span> won&rsquo;t prevent the app from launching if it can&rsquo;t reach the OCSP server.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2643546"></a>4.2 Real-world apps distributed through enterprise provisioning</h3></div></div></div><p>We collected 1,408 apps from the Internet which were distributed through enterprise provisioning. We parsed each app&rsquo;s Info.plist file to determine its development region. As shown in <a href="#table.2">Table 2</a>, most apps were from the United States, China, England and France. </p><div class="table"><a id="table.2"></a><table border="1" summary="App numbers by development region."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Country</th><th align="center">Number of apps</th></tr></thead><tbody><tr><td>United States</td><td>660</td></tr><tr><td>China</td><td>361</td></tr><tr><td>England</td><td>223</td></tr><tr><td>France</td><td>62</td></tr><tr><td>Others</td><td>102</td></tr><tr><td>All</td><td>1408</td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;App numbers by development region.</b></p></div><p>Since these apps don&rsquo;t go through <span class="emphasis"><em>Apple</em></span>&rsquo;s review process, they can abuse the powerful private APIs. We found that, within these 1,408 apps, 844 (60%) used private APIs. </p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4898650"></a>5. Targeted attacks through enterprise provisioning</h2></div></div></div><p><a href="#figure.2">Figure 2</a> shows the steps in a targeted attack using enterprise certificates. Conceptually, the attacker first sends out a spear phishing email or SMS to the victim, who may be lured to click on a link and install the app. Once the victim launches the app, it can leverage private APIs and some exploits to keep monitoring the user, steal sensitive information in the background, and avoid being invalidated by <span class="emphasis"><em>Apple</em></span>.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Targeted attacks against iOS through enterprise provisioning." src="/uploads/images/figures/2014/11/Wei-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Targeted attacks against iOS through enterprise provisioning.</b></p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4477089"></a>5.1 Spear phishing through enterprise provisioning</h3></div></div></div><p>An attacker may lure a victim to install an app through a spear phishing email or SMS that contains a web link. Once the user clicks on the link, there will be a pop-up letting the user install the app, as shown in <a href="#figure.3">Figure 3</a>. If the user chooses to install and launch the app, it can, with the help of private APIs, keep monitoring the user and steal sensitive information in the background.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Installing an enterprise app." src="/uploads/images/figures/2014/11/Wei-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Installing an enterprise app.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3646969"></a>5.2. Persistent monitoring</h3></div></div></div><p>After installation, the malicious app can monitor the victim&rsquo;s activity continuously, including on occasions when it is switched to the background or the system reboots. </p><p>While malware can use standard &lsquo;background app refresh&rsquo; to monitor the system continuously, <span class="emphasis"><em>iOS7</em></span> provides a setting for &lsquo;background app refresh&rsquo; that will disable unnecessary background refreshing, and may prevent malware from working. However, this can be bypassed. For example, an app can play music in the background without turning on its &lsquo;background app refresh&rsquo; switch. Thus a malicious app can disguise itself as a music app to conduct background monitoring. </p><p>On <span class="emphasis"><em>iOS</em></span>, ordinary apps can&rsquo;t start automatically after rebooting. However, VoIP apps are allowed to start automatically after the system reboot. <span class="emphasis"><em>Apple</em></span> forbids non-VoIP apps in the <span class="emphasis"><em>App Store</em></span> from using this feature. However, without being regulated by <span class="emphasis"><em>Apple</em></span>&rsquo;s review process, the attacker can disguise a malicious app as a VoIP app, which enables the app to start automatically after the device reboots, and thus monitor the victim continuously. Specifically, the malicious app can include the &lsquo;voip&rsquo; value in the UIBackgroundModes key so that the system allows it to run in the background and launches it in the background again after system reboot.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2851943"></a>5.3 Disabling OCSP</h3></div></div></div><p><span class="emphasis"><em>Apple</em></span> will validate the status of enterprise certificates roughly every three to seven days, at which point it has the chance of finding some abnormal behaviour and disabling the corresponding apps. To prevent this, attackers can disable OCSP. </p><p>Attackers may leverage existing exploits to modify the device&rsquo;s OCSP cache to maintain a valid state for its certificate. </p><p>Based on the findings from Wang <span class="emphasis"><em>et al.</em></span> [<span class="citation"><a href="#citation.16">16</a></span>], under certain conditions, syslogd will do &lsquo;chmod 777&rsquo; and &lsquo;chown mobile&rsquo; to &lsquo;/var/mobile/Library/Logs/CrashReporter&rsquo;. Thus, the malicious app can evade the sandbox and replace /var/mobile/Library/Logs/CrashReporter with a symbolic link to some other part of the system. This will be changed to writeable by syslogd, which doesn&rsquo;t carry out proper checks on symbolic links. The malicious app can then modify the OCSP cache to keep its OCSP response valid all the time. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3755414"></a>5.4 Attacks by abusing private APIs</h3></div></div></div><p>Private APIs are powerful. However, since private APIs are not intended to be available to app developers, their design may not have sufficient security considerations.</p><p>In February 2014, we found a vulnerability in <span class="emphasis"><em>iOS</em></span> private APIs [<span class="citation"><a href="#citation.11">11</a></span>] which meant that a malicious app making use of certain private APIs can monitor a user&rsquo;s input. In this attack, a malicious app can use a private API IOHIDEventSystemClientRegisterEventCallback() method within IOKit.framework to register a callback to receive system wide user input. This vulnerability can enable malware to record all of the user&rsquo;s touch/press events in the background, including touches on the screen, home button press, volume button press, and TouchID presses, as shown in <a href="#figure.4">Figure 4</a>. Attackers can use such information to reconstruct every character the victim inputs. Upon our notification, <span class="emphasis"><em>Apple</em></span> issued CVE-2014-1276 for this issue and pushed out a fix shortly afterwards.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Background monitoring." src="/uploads/images/figures/2014/11/Wei-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Background monitoring.</b></p></div><p>We have since found (and notified <span class="emphasis"><em>Apple</em></span> about) another flaw on<span class="emphasis"><em> iOS 7 </em></span>devices that enables telephone and SMS activity to be monitored from the background. Malware can register a callback by using the &lsquo;CTTelephonyCenterAddObserver&rsquo; function in the CoreTelephony.framework and then it can record all of the telephone and SMS events in the background, including incoming phone number, the SMS sender&rsquo;s number and SMS content, and then it can send all user events to any remote server. In this way, malware can eavesdrop on sensitive communication and bypass two-factor authentication based on SMS.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3755416"></a>5.5 Attacks by deceptive behaviours</h3></div></div></div><p>The <span class="emphasis"><em>App Store</em></span> review guidelines [<span class="citation"><a href="#citation.5">5</a></span>] list many app behaviours as forbidden. However, these behaviours become possible for an app distributed with enterprise provisioning. We list two cases where the attacker can break the guidelines for malicious activities. Attackers can do more based on their social engineering techniques:</p><div class="itemizedlist"><ul type="disc"><li><p>A malicious app may create alternative home screen environments or mimic the apps bundled on <span class="emphasis"><em>iPhone</em></span>, such as <span class="emphasis"><em>App Store</em></span> and <span class="emphasis"><em>iTunes Store</em></span>. By doing so, the attacker can trick the user into using a fake <span class="emphasis"><em>iTunes Store</em></span> app, and prompt the user to enter their password. For a user who lacks security knowledge, this phishing prompt may be enough for the attacker to steal the user&rsquo;s <span class="emphasis"><em>Apple</em></span> ID password successfully.</p></li><li><p>A malicious app may also disguise itself as another popular app and lure the user to use it. The attacker can embed malicious code inside such fake apps to carry out further attacks.</p></li></ul></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3418453"></a>5.6 Attacks by using root exploits</h3></div></div></div><p>It&rsquo;s known that <span class="emphasis"><em>Apple</em></span> can&rsquo;t fix all known vulnerabilities, or may fix them incorrectly [<span class="citation"><a href="#citation.16">16</a></span>]. Malware installed through enterprise provisioning has more freedom to exploit known or zero-day vulnerabilities. Attackers can even use dynamic code downloading to prevent the exploit from being captured by security vendors.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4525564"></a>6. Discussion</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4819455"></a>6.1 UDID and ad-hoc provisioning</h3></div></div></div><p>Besides enterprise certificates, apps can also be distributed using ad-hoc provisioning. Compared with enterprise certificates, ad-hoc distribution has the limitation that each development account can only distribute to 100 devices per membership year. Each of the devices receiving apps will have its unique device ID (UDID) registered in the ad-hoc provisioning profile to use the app. However, stealing the UDID from a target device on which the attacker wants to install a malicious app is not a hard job. Previously stealing the UDID may be treated just as private information leakage. </p><p>However, stealing the UDID is a crucial link towards targeted attacks: attackers can use the UDID to deliver ad-hoc distributed apps to the victim&rsquo;s phone. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3645900"></a>6.2 Abusing private APIs through bypassing review</h3></div></div></div><p>Since private APIs are loaded as framework code into the app&rsquo;s address space, together with the app developer&rsquo;s own code, there are no obstacles to calling private APIs from a technical perspective. <span class="emphasis"><em>Apple</em></span> does prohibit doing so. However, works like Jekyll [<span class="citation"><a href="#citation.8">8</a></span>] have shown the possibility of bypassing <span class="emphasis"><em>Apple</em></span>&rsquo;s review process.</p><p>Fooling <span class="emphasis"><em>Apple</em></span> still has the risk of being banned once caught [<span class="citation"><a href="#citation.6">6</a></span>]. However, since distributing apps using enterprise certificates avoids the <span class="emphasis"><em>App Store</em></span>, there&rsquo;s no regulation on usage of private APIs. Currently, <span class="emphasis"><em>Apple</em></span> doesn&rsquo;t have an ideal way to supervise and manage these enterprise certificates.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3854496"></a>6.3 Challenges of iOS security architecture against targeted attacks</h3></div></div></div><p>While <span class="emphasis"><em>Apple</em></span> does a good job of protecting ordinary <span class="emphasis"><em>App Store</em></span> users from being infected by malware, there is still a big gap for enterprise security. Targeted attacks through enterprise provisioning pose a severe threat for enterprise users. Once attackers compromise victims&rsquo; devices, they can access useful information such as intellectual property, steal numerous accounts of cloud services, and take photos or record audio/video through <span class="emphasis"><em>iOS</em></span> devices.</p><p>Currently, security on <span class="emphasis"><em>iOS</em></span> runs into a dilemma: <span class="emphasis"><em>Apple</em></span> doesn&rsquo;t allow security vendors to implement system-level protections, whereas malware can freely call powerful private APIs and exploit vulnerabilities through enterprise provisioning. Furthermore, since most <span class="emphasis"><em>iPhones</em></span> can access the Internet directly through their carriers (e.g. <span class="emphasis"><em>AT&amp;T </em></span>and <span class="emphasis"><em>Verizon</em></span>) when they are not connected to a company-managed wireless network, classic network security devices in company networks can&rsquo;t protect these devices all the time.</p><p>In the long run, <span class="emphasis"><em>Apple</em></span> needs more investment in improving enterprise-level security against advanced targeted attacks. <span class="emphasis"><em>Apple</em></span> should consider bringing dedicated security vendors into its platform to help with enterprise-level security solutions.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2982138"></a>7. Conclusion</h2></div></div></div><p>Though <span class="emphasis"><em>Apple</em></span> enforces a rigorous review process forbidding apps on<span class="emphasis"><em> App Store</em></span> from conducting many dangerous/deceptive behaviours, enterprise provisioning becomes a valid venue for apps to circumvent <span class="emphasis"><em>Apple</em></span>&rsquo;s regulations. Apps distributed using enterprise provisioning profiles can abuse powerful private APIs, deceive users and exploit vulnerabilities, thus becoming a severe threat to enterprise users. Using these apps, an attacker can use a bigger attack surface to launch persistent and targeted attacks against the victim&rsquo;s device. <span class="emphasis"><em>Apple</em></span> may improve its architecture to co-operate with security vendors in order to provide a better enterprise-level security solution.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2181004"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Tim Cook to shareholders: iPhone 5s/c outpace predecessors, Apple bought 23 companies in 16 months. <span class="bibliosource"><a href="/virusbulletin/2014/11/paper-apple-without-shell-ios-under-targeted-attack
" target="_top">http://appleinsider.com/articles/14/02/28/tim-cook-at-shareholder-meeting-iphone-5s-5c-outpace-predecessors-apple-bought-23-companies-in-16-months</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] How Many Apps Are in the iPhone App Store. <span class="bibliosource"><a href="http://ipod.about.com/od/iphonesoftwareterms/qt/apps-in-app-store.htm" target="_blank">http://ipod.about.com/od/iphonesoftwareterms/qt/apps-in-app-store.htm</a></span>. </p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Felt, A. P.; Finifter, M.; Chin, E. Hanna, S.; Wagner, D. A survey of mobile malware in the wild. In Proceedings of the 1st ACM workshop on Security and privacy in smartphones and mobile devices, pp.3&ndash;14. ACM, 2011.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] When Malware Goes Mobile. <span class="bibliosource"><a href="https://www.sophos.com/en-us/security-news-trends/security-trends/malware-goes-mobile/why-ios-is-safer-than-android.aspx" target="_blank">http://www.sophos.com/en-us/security-news-trends/security-trends/malware-goes-mobile/why-ios-is-safer-than-android.aspx</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] App store review guidelines. <span class="bibliosource"><a href="https://developer.apple.com/appstore/resources/approval/guidelines.html" target="_blank">https://developer.apple.com/appstore/resources/approval/guidelines.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] Apple Bans Qihoo Apps From iTunes App Store. February 2012. <span class="bibliosource"><a href="https://www.techinasia.com/apple-bans-qihoo-apps/" target="_blank">http://www.techinasia.com/apple-bans-qihoo-apps/</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] Qihoo Double Blow as iOS Apps Banned by Apple, China Warns of Anti-Competitive Practices. January 2013. <span class="bibliosource"><a href="https://www.techinasia.com/qihoo-apps-banned-apple-app-store/" target="_blank">http://www.techinasia.com/qihoo-apps-banned-apple-app-store/</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] Wang, T.; Lu, K.; Lu, L.; Chung, S.; Lee, W. Jekyll on iOS: when benign apps become evil. Presented as part of the 22nd USENIX Security Symposium, pp.559&ndash;572, 2013. </p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] CVE-2014-1276. <span class="bibliosource"><a href="https://support.apple.com/kb/HT6162" target="_blank">http://support.apple.com/kb/HT6162</a></span>.</p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] How Apple&rsquo;s Enterprise Distribution Program was abused to enable the installation of a GameBoy emulator. 2014. <span class="bibliosource"><a href="http://www.imore.com/how-gameboy-emulator-finding-its-way-non-jailbroken-devices" target="_blank">http://www.imore.com/how-gameboy-emulator-finding-its-way-non-jailbroken-devices</a></span>. </p></div><div class="bibliomixed"><a id="citation.11"></a><p class="bibliomixed">[11] Background Monitoring on Non-Jailbroken iOS 7 Devices &ndash; and a Mitigation. <span class="bibliosource"><a href="https://www.fireeye.com/blog/technical/2014/02/background-monitoring-on-non-jailbroken-ios-7-devices-and-a-mitigation.html" target="_blank">http://www.fireeye.com/blog/technical/2014/02/background-monitoring-on-non-jailbroken-ios-7-devices-and-a-mitigation.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.12"></a><p class="bibliomixed">[12] otool. <span class="bibliosource"><a href="https://www.opensource.apple.com/source/cctools/cctools-499/otool/" target="_blank">https://www.opensource.apple.com/source/cctools/cctools-499/otool/</a></span>.</p></div><div class="bibliomixed"><a id="citation.13"></a><p class="bibliomixed">[13] classdump. <span class="bibliosource"><a href="http://stevenygard.com/projects/class-dump/" target="_blank">http://stevenygard.com/projects/class-dump/</a></span>.</p></div><div class="bibliomixed"><a id="citation.14"></a><p class="bibliomixed">[14] iOS Developer Library Reference. <span class="bibliosource"><a href="https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&amp;topic=Reference" target="_blank">https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&amp;topic=Reference</a></span>. </p></div><div class="bibliomixed"><a id="citation.15"></a><p class="bibliomixed">[15] iOS Deployment Technical Reference. <span class="bibliosource"><a href="https://images.apple.com/iphone/business/docs/iOS_Deployment_Technical_Reference_EN_May14.pdf" target="_blank">http://images.apple.com/iphone/business/docs/iOS_Deployment_Technical_Reference_EN_May14.pdf</a></span>. </p></div><div class="bibliomixed"><a id="citation.16"></a><p class="bibliomixed">[16] Exploiting unpatched iOS vulnerabilities for fun and profit. <span class="bibliosource"><a href="https://www.blackhat.com/us-14/briefings.html#exploiting-unpatched-ios-vulnerabilities-for-fun-and-profit" target="_blank">https://www.blackhat.com/us-14/briefings.html#exploiting-unpatched-ios-vulnerabilities-for-fun-and-profit</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-WeiZhengXueSong.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: Apple without a shell – iOS under targeted attack&url=https://www.virusbulletin.com/virusbulletin/2014/11/paper-apple-without-shell-ios-under-targeted-attack"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/11/paper-apple-without-shell-ios-under-targeted-attack'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/11/paper-apple-without-shell-ios-under-targeted-attack&title=VB2014 paper: Apple without a shell – iOS under targeted attack"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/11/paper-apple-without-shell-ios-under-targeted-attack&t=VB2014 paper: Apple without a shell – iOS under targeted attack"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/11/paper-apple-without-shell-ios-under-targeted-attack"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>