<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Not old enough to be forgotten: the new chic of Visual Basic 6</title>
<meta name="description" content="Marion Marschalek looks at the unusual case of Miuref samples that use two different runtime packers to protect against being analysed: one binary being wrapped in a C++ protector, and another in a Visual Basic 6 wrapper." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1721;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201407-VB6"></a>Not old enough to be forgotten: the new chic of Visual Basic 6</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2014-07-10</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Marion</span> <span class="surname">Marschalek</span></h3><span class="orgname">Cyphort</span>, <span class="orgdiv">USA</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Marion Marschalek looks at the unusual case of Miuref samples that use two different runtime packers to protect against being analysed: one binary being wrapped in a C++ protector, and another in a Visual Basic 6 wrapper.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2617" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2617" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id4494156"></a></span></dt><dt><span class="sect1"><a href="#id4598801">Malware delivery</a></span></dt><dt><span class="sect1"><a href="#id3871070">A thoroughly packaged payload</a></span></dt><dt><span class="sect1"><a href="#id4181841">Classical analysis approaches</a></span></dt><dt><span class="sect1"><a href="#id2750447">Looking at the evil twin</a></span></dt><dt><span class="sect1"><a href="#id4349854">VB6 for fun and ... well</a></span></dt><dt><span class="sect1"><a href="#id3428944">The final payload</a></span></dt><dt><span class="sect1"><a href="#id4926392">What we learned and have yet to learn</a></span></dt><dt><span class="sect1"><a href="#id4787700">Acknowledgements</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4494156"></a></h2></div></div></div><p>A while ago, our lab spotted an infection coming from the website of a popular men&rsquo;s lifestyle magazine. I thought it was a nice coincidence that I had been assigned to that analysis, and wondered if there was any further motivation for the attack beyond just infecting anyone. Basing our assumption on the structure and the final payload of the infection, let&rsquo;s assume there was not.</p><p>Within a day, we had determined that two binaries of the same malware family were being spread via the Fiesta Exploit Kit (EK), in both cases using the same exploit for the CVE-2013-2551 vulnerability. Both samples were dropped as NSIS-packed binaries containing an infector and an encrypted file which, once unpacked, resulted in a malicious DLL. That malicious library was identified as Miuref, a rather popular clickjack trojan.</p><p>What made this case particularly interesting were the different runtime packers that protect Miuref against being analysed. One binary was wrapped in a C++ protector (MD5: D4A38E03010E1DA7DE7D1B942FF222BA), while the other appeared in a Visual Basic 6 wrapper (MD5: B999D1AD460BD367275A798B5F334F37).</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4598801"></a>Malware delivery</h2></div></div></div><p>Both samples were delivered via the same infection chain, beginning with the download of malicious JavaScript from the aforementioned magazine&rsquo;s website.</p><div class="itemizedlist"><ul type="disc"><li><p>The first request took the form &lsquo;/js/responsive/min/main-b87ba20746a80e1104da210172b634c4.min.js&rsquo; and delivered JavaScript. This script first checked whether the user agent showed that <span class="emphasis"><em>MS Windows Internet Explorer</em></span> was being used, and if it did, it deobfuscated a string constant that revealed the URL to be requested in the next step. The implication is that any browser other than<span class="emphasis"><em> Internet Explorer</em></span> would have been safe from this attack.</p></li><li><p>The second request went to stat.litecsys.com/d2.php?ds=true&amp;dr=2711950755, where the variable &lsquo;dr&rsquo; is a randomly generated value.</p></li><li><p>The JavaScript at this stage differed between<span class="emphasis"><em> Internet Explorer</em></span> versions 6&ndash;8 and 9&ndash;11. In both cases, the third request was directed to the domain vstat.feared.eu. For earlier versions of <span class="emphasis"><em>IE</em></span>, the GET request remained static; for later versions, a variable, nrk, was randomly generated and attached to the request. Throughout the infection chain, it is clear that the attack was targeted specifically at <span class="emphasis"><em>Internet Explorer</em></span>.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Distinguishing between current and early versions of IE." src="/uploads/images/figures/2014/07/VB6-fig1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Distinguishing between current and early versions of IE.</b></p></div></li><li><p>Request number three resulted in a piece of JavaScript code packed with the Dean Edwards packer, which can easily be unpacked. The resulting script finally decoded the URL of the exploit-hosting server, using an ancient ROT13 algorithm.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="ROT13 algorithm used to decrypt the URL." src="/uploads/images/figures/2014/07/VB6-fig2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;ROT13 algorithm used to decrypt the URL.</b></p></div></li><li><p>Finally, a dedicated<span class="emphasis"><em> IE </em></span>exploit was downloaded from g12z4pj3k4k9y4wd517-ll6.dienami.ru/. This was an exploit packed with Gzip and a Fiesta EK-specific packer, targeting CVE-2013-2551 (a use-after-free vulnerability in <span class="emphasis"><em>Internet Explorer</em></span> versions 6 to 10, which was patched back in May 2013). The link to the Fiesta EK can be made via the final GET request for downloading the malicious binary: /f/1398361080/5/x007cf6b534e520804090407000700080150050f0304045106565601;1;5.</p></li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3871070"></a>A thoroughly packaged payload</h2></div></div></div><p>Both executables derived from this infection came as NSIS (Nullsoft Scriptable Install Systems) packed binaries. The NSIS unpacking scripts don&rsquo;t seem to contain any maliciousness, so it seems likely that this stage was present just to package the resulting infector and the encrypted DLL (and probably to cause even more confusion than ultimately necessary).</p><p>Both samples, once decompressed, yielded an encrypted DLL and an infector. Both infectors appeared with legitimate icons and names, such as &lsquo;KShortcutCleaner.exe&rsquo; or &lsquo;NRWConfig.exe&rsquo;, and were about 75&ndash;80KB in size. Meanwhile, the encrypted file in both cases came with the name &lsquo;setup.dat&rsquo;. However, a closer look at the infectors revealed that one was a C++ compiled binary, and the other a Visual Basic 6 binary.</p><p>My level of excitement went through the roof: there were clearly two pieces of malware from the same family, with different packers, one of which could cause a significant headache.</p><p>Visual Basic 6 has been the bane of analysts&rsquo; lives since the first pieces of VB6 malware reached epidemic levels at the beginning of the 2000s. Visual Basic is widely considered to produce the most hated binaries in the history of reverse engineering &ndash; indeed, on mentioning this topic to some reverse engineers, they didn&rsquo;t know whether to laugh or to cry (and most of them did both).</p><p>The laughing vs. crying aspect of VB6 is primarily related to the fact that VB6 internals lack any sort of official documentation. The inner workings of the VB6 virtual machine and the functionality of its exported functions are literally a mystery to anyone who has not taken an in-depth look at msvbvm60.dll.</p><p>VB6 can be compiled to pseudo code or native code &ndash; neither of which is easy to understand, but the latter does at least result in x86 binary code. Meanwhile, pseudo code is VB6 byte code, interpreted by the VB6 virtual machine at runtime.</p><p>For native code reversing, it is crucial to understand the challenges of event-driven binaries. Also, the reverser must interpret the functionality of the VB6 APIs called from the binary. But, given that malware executes pretty linearly by nature, and the VB6 APIs are mostly assigned understandable names, native code reversing is just another colourful facet of x86 binaries.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Native code vs. pseudo code." src="/uploads/images/figures/2014/07/VB6-fig3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Native code vs. pseudo code.</b></p></div><p>VB6 pseudo code, on the other hand, is a mess by design. Like some of the reversing challenges one finds at a Capture the Flag, or in very sophisticated runtime packers, VB6 pseudo code translates instructions to undocumented byte code and parses it through a VM &ndash; and has been doing so since the 1990s.</p><p>Valuable groundwork has been done by Jurriaan Bremer with VB6Tracer [<span class="citation"><a href="#citation.1">1</a></span>]. Visual Basic code, compiled to pseudo code, results in two- or four-byte instructions that are parsed by msvbvm60.dll. These VB6 instructions can be likened to indices which tell the VB6 VM which dedicated instruction handler to call. For the translation of byte codes, the virtual machine uses a function named ProcCallEngine that parses the byte code through six look-up tables. The single-byte instructions are looked up in the first table, where each instruction byte itself is the table index. All two-byte instructions are designed so that the first byte points to the right table, while the second byte is the index that leads to the right handler. This way, each table has a space of 256 instructions. Altogether, VB6 pseudo code makes use of no fewer than 800 instructions.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Byte code translation in VB6 pseudo code." src="/uploads/images/figures/2014/07/VB6-fig4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Byte code translation in VB6 pseudo code.</b></p></div><p>Visual Basic&rsquo;s interface to Win32 and its APIs is supported either by calling the wrappers provided by msvbvm60.dll or by calling the original APIs via VB6&rsquo;s DllFunctionCall wrapper. Msvbvm60.dll offers everything a <span class="emphasis"><em>Windows</em></span> developer could dream of: __vbaPrintFile and __vbaStrComp, for example. Still, it is worth mentioning again that none of these exports are documented. Meanwhile, DllFunctionCall simply uses LoadLibraryA/GetProcAddress to get hold of a specific <span class="emphasis"><em>Windows</em></span> API directly.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4181841"></a>Classical analysis approaches</h2></div></div></div><p>Thinking about it this way, pseudo code presents a bit of a black hole for reverse engineers. Every time a pseudo code instruction is interpreted, one might be tempted to dive into the dedicated instruction handler to determine the instruction&rsquo;s purpose. But, given that VB6 pseudo code has a set of around 800 instructions, some of which are non-trivial, it could take a while to reverse engineer a binary.</p><p>As with many other structured byte code languages, pseudo code binaries come with a lot of management information that is very useful for decompilation. This works pretty well: pseudo code executables can be decompiled sufficiently to produce readable VB code. However, as soon as one meets a packed or heavily obfuscated binary, this purely static approach becomes infeasible. Getting back to the obfuscated VB6 binary at hand, one can easily see that decompilation is not fruitful.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Snippet of the VB6 decompiler output." src="/uploads/images/figures/2014/07/VB6-fig5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Snippet of the VB6 decompiler output.</b></p></div><p>The VB code that is produced shows heavy data copy operations, a call to VirtualAlloc and another one to EnumWindows, but that&rsquo;s about all the analyst can derive from it.</p><p>Taking a step further, sandboxes like <span class="emphasis"><em>Cuckoo</em></span> and <span class="emphasis"><em>Anubis</em></span> lose track of execution at one of the many steps in the process of unpacking the payload. The <span class="emphasis"><em>Cuckoo</em></span> trace ends right after the NSIS layer [<span class="citation"><a href="#citation.2">2</a></span>]; <span class="emphasis"><em>Anubis</em></span> quits after starting the VB6 packed infector [<span class="citation"><a href="#citation.3">3</a></span>].</p><p>Summing the situation up, there is no easy road to El Dorado.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2750447"></a>Looking at the evil twin</h2></div></div></div><p>Meanwhile, dissecting the C++ sample presented only a minor challenge. Examining the two samples side by side, they did indeed prove to come from the same malware family. Visualizing their Procmon execution graphs, there is almost no notable difference. But it is not just the payloads that are similar &ndash; even the packers seem to operate in the same way, despite being coded in different programming languages. Both create a sub-process, terminate the parent, and have the sub process decrypt setup.dat and perform malicious actions.</p><p>The C++ twin starts by executing its code in the context of a Microsoft Foundation Class (MFC) application. Next, it walks through two layers of decompression, finally unpacking what could be called the next stage of the payload.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="The recursive loader, which is barely used." src="/uploads/images/figures/2014/07/VB6-fig6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;The recursive loader, which is barely used.</b></p></div><p>This final stage is a fairly big function, incorporating a lot of character-wise string construction and a lot of code &ndash; which, if we look at it more closely, is never executed. The function itself is recursive, managed by a state variable, which is handed over as a function parameter. The majority of code is beautiful, fully functioning x86 code, not obfuscated garbage code. The state variable ranges from 0 to 9 and can either be invoked from a superior caller or from within the function itself.</p><p>Some of the functionality we spotted includes:</p><div class="itemizedlist"><ul type="disc"><li><p>Enumerating processes, searching for names like &lsquo;VBoxService.exe&rsquo; or &lsquo;vmtoolsd.exe&rsquo;.</p></li><li><p>Creating/checking for a mutex named &lsquo;UACMutexxxxx&rsquo;, which has also been used in the context of various other, unrelated malware.</p></li><li><p>Registering itself under HKLM\Software\Microsoft\Windows\CurrentVersion\Run.</p></li><li><p>Executing a shell with the command &lsquo;net stop MpsSvc&rsquo;, which basically stops the <span class="emphasis"><em>Windows</em></span> firewall service manually.</p></li><li><p>Creating a suspended process, overwriting its process memory and its thread context, and calling resume thread.</p></li></ul></div><p>The function snippet that fiddles with the suspended process rang a bell somewhere in the back of my head. This is indeed the primary action of said function. In fact, the procedure starts off with state 1, checking if a file named &lsquo;myapp.exe&rsquo; is present in the system directory root. If it is, the application terminates; otherwise it goes to state 7, where it ends up creating a process with the suspended flag set. This procedure has been analysed before [<span class="citation"><a href="#citation.4">4</a></span>] and apparently stems from a packer known as Local-App-Wizard.</p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Initialization of the RunPE technique." src="/uploads/images/figures/2014/07/VB6-fig7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Initialization of the RunPE technique.</b></p></div><p>The applied technique has long been known as RunPE and works as follows:</p><div class="itemizedlist"><ul type="disc"><li><p>Create a process with the CREATE_SUSPENDED flag set.</p></li><li><p>Request and store its thread context.</p></li><li><p>Hollow the process memory with NtUnmapViewOfSection.</p></li><li><p>Overwrite the process memory with the binary of choice.</p></li><li><p>Write the thread context back using SetThreadContext, with the entry point set to fit the new binary.</p></li><li><p>Call ResumeThread to kick off execution of the sub process.</p></li></ul></div><p>The point of this trick is that the runtime packer and payload are clearly separated, while the packed executable never touches the hard disk. A fun modification of this version of Local-App-Wizard/RunPE relates to the aforementioned binary of choice in overwriting the sub process memory: the RunPE routine iterates a hundred times, starting a copy of itself that terminates immediately. Only copy number 101 results in the unpacked payload, which later decrypts Miuref&rsquo;s DLL. Conditional breakpoints prove to be a valuable asset here.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="101 RunPE attempts." src="/uploads/images/figures/2014/07/VB6-fig8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;101 RunPE attempts.</b></p></div><p>So, sitting on the 101st call to ResumeThread, one can just inspect the unpacked binary in memory and patch the new entry point with the infamous EB FE, attaching a second debugger instance after ResumeThread.</p><p>Interestingly, after state 7, the application goes to state 0, which means termination of the process. This state is not invoked recursively, but from a superior caller function, thus the programmer explicitly refused to make use of any of the excessive capabilities of the packer.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4349854"></a>VB6 for fun and ... well</h2></div></div></div><p>Visual Basic 6 runtime packers using the RunPE technique have been around for a while, according to [<span class="citation"><a href="#citation.5">5</a></span>] and [<span class="citation"><a href="#citation.6">6</a></span>]. Their speciality is embedding anti-analysis tricks into the pseudo code part of the packer, making it close to impossible to identify them. VB6 is great for obfuscation, of code as well as strings. It cannot easily be debugged, and dynamic analysis often fails. One possible approach is to hook into the Win32 APIs to understand the sample&rsquo;s operation, but the challenge remains: one has to get around the protection mechanisms and gain control over the spawned sub process before it takes off to perform its malicious actions.</p><p>So, given that the VB6 packer can implement anti-debug, anti-virtualization and anti-sandbox mechanisms, and that there are numerous different implementations of RunPE using different Win32 APIs, such a sample can be a very hard nut to crack.</p><p>Thankfully, in this case the bad guys didn&rsquo;t seem to bother too much. The VB6 packer of the Miuref sample at hand performs the following tricks:</p><div class="itemizedlist"><ul type="disc"><li><p>It iterates a total number of 8,032 times over garbage code that performs string and date operations. The purpose of this is to eat up a lot of CPU for quite a while, probably to kill time or escape emulators.</p></li><li><p>The sample evades sandbox analysis thanks to its multiple packers.</p></li><li><p>The sample checks for the PEB, BeingDebugged flag and the NtGlobalFlag. (The obligatory anti-debug tricks can be found the lazy way, by brute-forcing with the<span class="emphasis"><em> IDA Stealth</em></span> plug-in.)</p></li><li><p>The sample implements RunPE in VB6, using direct calls to ntdll.dll instead of kernel32.dll, such as NtMapViewOfSection and NtResumeThread.</p></li></ul></div><p>Thus bypassing the VB6 layer is a question of intercepting execution at the right time. Given that the sample executes perfectly well in a virtual environment, and anti-debugging is sparse, unpacking can be achieved by placing a breakpoint on NtResumeThread. From there, one can inspect the memory of the yet-to-be-started sub process and patch its entry point with a breakpoint or an EB FE. Stepping over NtResumeThread, a second debugger instance can then get hold of the unpacked payload, dump the binary or continue debugging.</p><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="Tracing ntdll APIs to catch the unpacked payload." src="/uploads/images/figures/2014/07/VB6-fig9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;Tracing ntdll APIs to catch the unpacked payload.</b></p></div><p>Another possibility is to force the sample to load a patched ntdll.dll by tricking its module search order [<span class="citation"><a href="#citation.7">7</a></span>]. This way, even a debugger- and virtual-machine-aware sample can be unpacked, using a real machine and placing the breakpoints very carefully on the right APIs.</p><p>Unsurprisingly, the starting routine of the unpacked binary looks very much like the sub process the C++ sample created. From there on, the new process executes Miuref.</p><div class="figure"><a id="figure.10"></a><div class="mediaobject"><img alt="Equal starting routines." src="/uploads/images/figures/2014/07/VB6-fig10.jpg" /></div><p class="title"><b>Figure&nbsp;10.&nbsp;Equal starting routines.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3428944"></a>The final payload</h2></div></div></div><p>After successfully unpacking Miuref, the final executable reads like a novel. Miuref is a click fraud trojan that has been around since the end of 2013. Its primary purpose is to produce fake clicks on web advertisements in order to generate revenue for specific ads.</p><p>The malware can register extensions for the <span class="emphasis"><em>Google Chrome</em></span> browser or inject add-ons into <span class="emphasis"><em>Mozilla Firefox </em></span>using silent add-on injection. Both techniques have been described by Nicolas Paglieri [<span class="citation"><a href="#citation.8">8</a></span>]. These add-ons will then perform the click fraud operation, but potentially could also harvest data handled by the browser or modify browser display content on the fly. For coordination of multiple malware instances, Miuref uses an event, which is named using a combination of computer name and executable path.</p><div class="figure"><a id="figure.11"></a><div class="mediaobject"><img alt="Sneaking an add-on into Mozilla Firefox." src="/uploads/images/figures/2014/07/VB6-fig11.jpg" /></div><p class="title"><b>Figure&nbsp;11.&nbsp;Sneaking an add-on into Mozilla Firefox.</b></p></div><p>Miuref also operates as an information stealer. It collects extensive machine-related data via the WMI (Windows Management Instrumentation) interface and sends it via HTTP POST to the hard-coded IP address 195.2.253.38. Exfiltrated information includes the operating system, BIOS, processor type, video controller and sound device information.</p><div class="figure"><a id="figure.12"></a><div class="mediaobject"><img alt="Miuref collects information from the Windows WMI." src="/uploads/images/figures/2014/07/VB6-fig12.jpg" /></div><p class="title"><b>Figure&nbsp;12.&nbsp;Miuref collects information from the Windows WMI.</b></p></div><p>Interestingly, at startup the malware opens the client end of a pipe named &lsquo;\\.\pipe\MBAMGuiPipe-1&rsquo;, which is hard coded in the binary. Mbamgui.exe is part of <span class="emphasis"><em>Malwarebytes Anti-Malware</em></span>. However, no direct connection between the pipe and the <span class="emphasis"><em>Malwarebytes</em></span> software could be found.</p><p>Miuref includes a 2,048-bit base-64-encoded public key for encrypting the C&amp;C communication with an RSA cryptographic service provider. The analysed sample communicates with the hard-coded domain 1service.org, which resolves to 146.255.195.124. Supported communication protocols are HTTP and HTTPS; messages received from the C&amp;C server are embedded within the &lt;body&gt; tags of an HTML page and compressed with Gzip.</p><p>During analysis, the inspected sample downloaded an additional DLL (MD5: BC206A13218F064CC2BCCCC377664B0A) and another .dat file (MD5: 217ED8FA9CBD9774596AC60E4BA0E3D2).</p><p>For persistence, Miuref creates an entry under HKU\Software\Microsoft\Windows\CurrentVersion\Run so that regsvr32.exe will load the downloaded DLL every time the system boots.</p><div class="figure"><a id="figure.13"></a><div class="mediaobject"><img alt="Regsvr32.exe loads the Miuref DLL on every startup." src="/uploads/images/figures/2014/07/VB6-fig13.jpg" /></div><p class="title"><b>Figure&nbsp;13.&nbsp;Regsvr32.exe loads the Miuref DLL on every startup.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4926392"></a>What we learned and have yet to learn</h2></div></div></div><p>Miuref comes NSIS packed and wrapped with either C++ or Visual Basic 6 protection. In each case, a sub process is created and its memory overwritten with the unpacked payload to execute.</p><p>Thinking logically, the two packers can hardly be related, yet they use the same tricks. In both cases the protection can be handled fairly well by an analyst, but automated analysis systems and anti-virus engines still struggle. While VirusTotal indicates good detection for the packed binaries, feeding it the plain Miuref DLL results in a hit rate of only 10 out of 52. The final payload is almost unprotected and easy to dissect.</p><p>So in conclusion, the bad boys are smart, but they do not appear to be getting that much smarter over time &ndash; a lot of code and technique re-use can be seen in this example. Meanwhile, our analysis tools are brilliant, but after 20 years of Visual Basic, they still don&rsquo;t provide a comprehensive solution for dissecting such binaries. Neither side of the anti-malware arms race has demonstrated all of its sophistication where this piece of malware is concerned.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4787700"></a>Acknowledgements</h2></div></div></div><p>Special thanks go to Jurriaan Bremer and Nicolas Brulez for their valuable input at the time of writing this article.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4394316"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Bremer, J. VB6Tracer Repository and Documentation. June 2014. <span class="bibliosource"><a href="https://github.com/jbremer/vb6tracer" target="_blank">https://github.com/jbremer/vb6tracer</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Cuckoo Sandbox Analysis. June 2014. <span class="bibliosource"><a href="https://malwr.com/analysis/NTEzNDRkYWQ4YmZk NDFlMGExZTJmMjM1ODI5OTgzOTU/#" target="_blank">https://malwr.com/analysis/NTEzNDRkYWQ4YmZk NDFlMGExZTJmMjM1ODI5OTgzOTU/#</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Anubis Sandbox Analysis. June 2014. <span class="bibliosource"><a href="https://anubis.iseclab.org/?action=result&amp;task_id=19ca20f0561936174450dc89b494d9f36&amp;format=html" target="_blank">https://anubis.iseclab.org/?action=result&amp;task_id=19ca20f0561936174450dc89b494d9f36&amp;format=html</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Unpacking the Local-App-Wizard Packer. May 2014. <span class="bibliosource"><a href="http://www.gironsec.com/blog/2014/05/unpacking-the-local-app-wizard-packer/" target="_blank">http://www.gironsec.com/blog/2014/05/unpacking-the-local-app-wizard-packer/</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] Assar, W. Visual Basic Malware. March 2012. <span class="bibliosource"><a href="https://waleedassar.blogspot.co.at/2012/03/visual-basic-malware-part-1.html" target="_blank">http://waleedassar.blogspot.co.at/2012/03/visual-basic-malware-part-1.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] Unpacking VBInject/VBCrypt/RunPE. July 2010. <span class="bibliosource"><a href="https://interestingmalware.blogspot.co.at/2010/07/unpacking-vbinjectvbcryptrunpe.html" target="_blank">http://interestingmalware.blogspot.co.at/2010/07/unpacking-vbinjectvbcryptrunpe.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] Module Search Order Dialog. <span class="bibliosource"><a href="http://www.dependencywalker.com/help/html/hidd_search_order.htm" target="_blank">http://www.dependencywalker.com/help/html/hidd_search_order.htm</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] Paglieri, N. Attacking Web Browsers. February 2012. <span class="bibliosource"><a href="http://www.ni69.info/documents/security/AttackingWebBrowsers.pdf" target="_blank">http://www.ni69.info/documents/security/AttackingWebBrowsers.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] Chubchenko, S. Decompiling P-code In Your Mind&rsquo;s Eye. <span class="bibliosource"><a href="http://www.vb-decompiler.org/pcode_decompiling.htm" target="_blank">http://www.vb-decompiler.org/pcode_decompiling.htm</a></span>.</p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] Decrypting RunPE Malware. January 2011. <span class="bibliosource"><a href="https://thunked.org/programming/decrypting-runpe-malware-t110.html" target="_blank">https://thunked.org/programming/decrypting-runpe-malware-t110.html</a></span>.</p></div><div class="bibliomixed"><p class="bibliomixed">Analysis of Trojan:Win32/Miuref.A. January 2014. <span class="bibliosource"><a href="http://stopmalvertising.com/malware-reports/analysis-of-trojan-win32-miuref-a.html" target="_blank">http://stopmalvertising.com/malware-reports/analysis-of-trojan-win32-miuref-a.html</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2014/vb201407-VB6.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Not old enough to be forgotten: the new chic of Visual Basic 6&url=https://www.virusbulletin.com/virusbulletin/2014/07/not-old-enough-be-forgotten-new-chic-visual-basic-6"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/07/not-old-enough-be-forgotten-new-chic-visual-basic-6'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/07/not-old-enough-be-forgotten-new-chic-visual-basic-6&title=Not old enough to be forgotten: the new chic of Visual Basic 6"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/07/not-old-enough-be-forgotten-new-chic-visual-basic-6&t=Not old enough to be forgotten: the new chic of Visual Basic 6"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/07/not-old-enough-be-forgotten-new-chic-visual-basic-6"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>