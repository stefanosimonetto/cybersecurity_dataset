<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Dridex in the wild</title>
<meta name="description" content="Dridex is a descendent of the Cridex malware. Its initial spread occurred in late 2014 via spam and the malware is still active in the wild today. Meng Su describes its working mechanism and how it gathers information and communicates with the C&amp;C server." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1609;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201507-Dridex"></a>Dridex in the wild</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2015-07-13</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Meng</span> <span class="surname">Su</span></h3><span class="orgname">Tencent</span>, <span class="orgdiv">China</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Dridex is a descendent of the Cridex malware. Its initial spread occurred in late 2014 via spam and the malware is still active in the wild today. Meng Su describes its working mechanism and how it gathers information and communicates with the C&amp;C server.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2015 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2292" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2292" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id4184526"></a></span></dt><dt><span class="sect1"><a href="#id2870251">Obtaining APIs</a></span></dt><dt><span class="sect1"><a href="#id3546619">Getting server data</a></span></dt><dt><span class="sect1"><a href="#id4776546">Getting and encoding system information</a></span></dt><dt><span class="sect1"><a href="#id2329347">Communication</a></span></dt><dt><span class="sect1"><a href="#id4494156">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4184526"></a></h2></div></div></div><p>Dridex is a descendent of the Cridex malware. Its initial spread occurred in late 2014 via spam and the malware is still active in the wild today. Dridex is a <span class="emphasis"><em>Windows</em></span> executable which uploads system information to its C&amp;C server before downloading a DLL. After the DLL has been installed by the executable, the C&amp;C server will control the infected PC, sending it commands to carry out further harmful instructions. In this article, we will analyse the main executable, focusing on the following actions: obtaining APIs, getting server data, getting and encoding system information, and communicating with the C&amp;C server.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2870251"></a>Obtaining APIs</h2></div></div></div><p>All of the <span class="emphasis"><em>Windows</em></span> APIs the bot uses are obtained by a function. The argument passed into this function is only an index. This &lsquo;index&rsquo; is an index number of the API_Address array &ndash; the API-name-encode-data-block uses the same index value. </p><p>At first, the malware checks the API_Address array, which is initiated with a NULL value. If API_Address[API_index] is found with a valid value, the function returns the address. Otherwise the malware moves onto the next step. </p><p>In the second step, the malware decodes the API_Name from the API-name-encode-data-block with the API_index using an algorithm which is predefined by the malware itself. The decoded data contains two parts, DLL_index and API_Name: </p><pre class="programlisting">API_Data
{
BYTE DLL_index;
BYTE[] API_Name;
};
</pre><p>The role of DLL_index is the same as that of the API_index. The malware has a DLL_Module array which is similar to the API_Address array and also a similar DLL-name-encode-data-block. </p><p>The malware checks the DLL_Module array. If it finds valid data at DLL_Module[DLL_index], then it returns the DLL module for the next step. Otherwise the malware will get the DLL module using the following method: similar to API_Name, the DLL_Name is decoded from the DLL-name-encode-data-block by DLL_index. After that, the malware checks whether the DLL_index value is equal to one. By the design of the malware, the DLL_index of kernel32.dll is one. The way to get this DLL&rsquo;s module is using register fs:[0x30], which points to the PEB structure, and then finding the PEB_LDR_DATA structure via the PEB. In the PEB_LDR_DATA structure we can find out the DLL base address by comparing the DLL name. If the DLL_index value is not one, the malware will get the LoadLibrary API whose API_index value is one. The malware then uses this API to get the DLL module. The malware records the DLL module into the DLL_Module array, regardless of whether or not the DLL_index is 1. </p><p>If the API_index passed is 2, which represents the GetProcAddress API in this malware, the bot will traverse the DLL&rsquo;s export table to get the API address. Otherwise the malware will get the GetProcAddress API first and then call this API to get the other API&rsquo;s address. The API address will be saved into the API_Address array. </p><p>Note that the addresses of the LoadLibrary and GetProcAddress APIs are always the first two addresses obtained by the malware. The flowchart in <a href="#figure.1">Figure 1</a> shows the full logic steps of getting any single API address. </p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Obtaining APIs." src="/uploads/images/figures/2015/07/Dridex-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Obtaining APIs.</b></p></div><p>(Click <a href="/uploads/images/figures/2015/07/Dridex-1-large.jpg" target="_top">here</a> to view a larger version of Figure 1.)</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3546619"></a>Getting server data</h2></div></div></div><p>In this malware, the C&amp;C server address is not stored as plain text. The malware uses the GetModuleHandleW API to locate the IMAGE_DOS_HEADER, and then locates the section header. It will find one section&rsquo;s virtual address whose section name is &lsquo;.sdata&rsquo; (<a href="#figure.2">Figure 2</a>).</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt=".sdata section content." src="/uploads/images/figures/2015/07/Dridex-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;.sdata section content.</b></p></div><p>This section contains only 0x7A valid bytes. The first DWORD (0xA9E97561 in this case) is a key which is used to XOR the other 0x76 bytes. <a href="#figure.3">Figure 3</a> shows the content after it has been XOR&rsquo;ed. </p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="XOR content." src="/uploads/images/figures/2015/07/Dridex-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;XOR content.</b></p></div><p>As shown in<a href="#figure.3">Figure 3</a> , this data is still encrypted. The 0x76 byte-long decoded data consists of three parts: the size of the encoded data (0x6E), the size of the raw data (0x99), and the encoded data: </p><pre class="programlisting">Encoded_Server_Data
{
DWORD szEncodeData;
DWORD  szRawData;
BYTE[]  EncodedData;
};
</pre><p>The &lsquo;EncodedData&rsquo; is compressed by the aPLib algorithm [<span class="citation"><a href="#citation.1">1</a></span>]. The decompressed raw data is shown in <a href="#figure.4">Figure 4</a>. </p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="The raw data." src="/uploads/images/figures/2015/07/Dridex-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;The raw data.</b></p></div><p>The first four bytes of this raw data indicate the length of the data behind it. Figure 5 shows the configuration of the server. The &lsquo;botnet&rsquo; attribute shows the botnet_id; the &lsquo;server_list&rsquo; tag shows the server URLs. </p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Server data." src="/uploads/images/figures/2015/07/Dridex-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Server data.</b></p></div><p>After getting the server URL, the malware will collect system information for further communication.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4776546"></a>Getting and encoding system information</h2></div></div></div><p>The collected information will be stored in XML format in two parts. The first part is composed as follows: </p><p>&lt;loader&gt;&lt;get_module unique=&quot;%s&quot; botnet=&quot;%d&quot; system=&quot;%dv&quot; name=&quot;bot&quot; bit=&quot;%d&quot;/&gt; </p><p>Meanwhile, the format of the other part is: </p><p>&lt;soft&gt;&lt;![CDATA[%s]]&gt;&lt;/soft&gt;&lt;/loader&gt;. </p><p>In the first part, the value of the &lsquo;unique&rsquo; attribute records a string relating to three registry entries: </p><pre class="programlisting">Key: HKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/ComputerName/ComputerName
Name: ComputerName

Key: HKEY_LOCAL_MACHINE/Volatile Environment
Name: USERNAME

Key: HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion
Name: InstallDate
</pre><p>The malware retrieves the values of these three keys and combines them as a data block, System_Info, then calculates the MD5 of this data block. The malware also checks every character of the &lsquo;ComputerName&rsquo; value. If a character is not found on a list which contains the Latin letters and some special symbols, it will be replaced with the character &lsquo;?&rsquo;. I think the malware author made a mistake here: there is no letter &lsquo;D&rsquo; on the letter list and there is an extra &lsquo;S&rsquo; &ndash; I guess that&rsquo;s because &lsquo;D&rsquo; is pretty close to &lsquo;S&rsquo; on the keyboard and this was probably a typo. This means that the malware will replace &lsquo;D&rsquo; with &lsquo;?&rsquo;. In the end, the changed &lsquo;ComputerName&rsquo; value and the MD5 of the System_Info are joined with the character &lsquo;_&rsquo; (<a href="#figure.6">Figure 6</a>), then set with the &lsquo;unique&rsquo; attribute.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="The content of the &lsquo;unique&rsquo; argument." src="/uploads/images/figures/2015/07/Dridex-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;The content of the &lsquo;unique&rsquo; argument.</b></p></div><p>The value of the &lsquo;botnet&rsquo; argument is a botnet_id which is the same botnet_id as in the server configuration (<a href="#figure.5">Figure 5</a>). The value of the &lsquo;system&rsquo; attribute is a hash value which indicates the version of the operating system (e.g. <span class="emphasis"><em>XP</em></span> or <span class="emphasis"><em>Win7</em></span>), whether it is an NT kernel or not, whether or not it is running as administrator, and whether or not the UAC is enabled. The value of the &lsquo;bit&rsquo; attribute indicates whether the operating system is 32-bit (32) or 64-bit (64). </p><p>In the second part, the content in &lsquo;CDATA&rsquo; is the information about the installed software. The malware enumerates all the subkeys of HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows/CurrentVersion/Uninstall and gets the value of their key name, &lsquo;DisplayName&rsquo; and &lsquo;DisplayVersion&rsquo;. It will compose a string with the format &lsquo;DisplayName_value (DisplayVersion_value)&rsquo; and connects every subkey&rsquo;s string with the character &lsquo;;&rsquo;. It should be noted that the malware only recognizes English characters, so it changes the non-English characters to &lsquo;?&rsquo;. </p><p>The malware attaches a string, &lsquo;Starting path: %d&rsquo;, to the end of the connected string. Despite what its name may suggest, the content of &lsquo;Starting path&rsquo; is not a real path of the malware. Instead, it is a figure indicated in the MIC (Mandatory Integrity Control [<span class="citation"><a href="#citation.2">2</a></span>]) level of the path which the malware located. There are seven levels: untrusted, low, medium, medium plus, high, system and protect process, which correspond to the values 1&ndash;7. If the operating system version is higher than or equal to <span class="emphasis"><em>Windows NT 6.0</em></span>, the malware uses the GetSidSubAuthority API to get the MIC level. Otherwise, it sets the figure to 5. <a href="#figure.7">Figure 7</a> shows the raw data which will be sent to the server. </p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="The raw data sent to the server." src="/uploads/images/figures/2015/07/Dridex-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;The raw data sent to the server.</b></p></div><p>Finally, the malware gets a random DWORD key and uses a XOR operation to encode the raw data of every DWORD. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2329347"></a>Communication</h2></div></div></div><p>Before the communication begins, the malware will parse the server data (Figure 5). The parsing function checks the special characters (e.g. &lsquo;://&rsquo;, &lsquo;@&rsquo;, &lsquo;/&rsquo;, &lsquo;:&rsquo;, &lsquo;?&rsquo;, &lsquo;#&rsquo;) to locate the communication protocol, server address, file path, arguments, port, user name and password. If the hard-coded URL does not have a communication protocol, the malware will set &lsquo;HTTP&rsquo; as default. The port field also has default values: for HTTP it is 80, for HTTPS it is 443 and for FTP it is 21. Other fields default to NULL if no matching value is found in the string. In this sample, the server data is very simple, with only server address and port. As shown in Figure 5, the server URL is of the format 194.28.87.125:4443. By design, the malware uses HTTPS for communication, so before calling the parsing function, the malware will prepend the URL string with the HTTPS protocol. After calling the parsing function, the malware will get the server address as 194.28.87.125 and the port as 4443. After parsing, the malware uses the InternetConnectW API to connect to the server, sends the encrypted data using the HttpSendRequestW API, and finally reads the response from the server using the InternetReadFile API. </p><p>The data received from the server is also encrypted. The first four bytes is a DWORD key which is used as the XOR key to decode the data after it by DWORD (<a href="#figure.8">Figure 8</a>). </p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="XOR the downloaded data." src="/uploads/images/figures/2015/07/Dridex-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;XOR the downloaded data.</b></p></div><p>(Click <a href="/uploads/images/figures/2015/07/Dridex-8-large.jpg" target="_top">here</a> to view a larger version of Figure 8.)</p><p>The decoded data is encased in XML code which starts with a &lsquo;&lt;root&gt;&lt;/root&gt;&rsquo; element. In the root node, there are two sub nodes, &lt;nodes&gt;&lt;/nodes&gt; and &lt;module name=&quot;bot&quot; bit=&quot;32&quot;&gt;&lt;/module&gt;. The content in the &lsquo;module&rsquo; node is encoded with the BASE64 algorithm. <a href="#figure.9">Figure 9</a> shows a piece of the data after decoding. </p><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="A piece of data decoded with BASE64." src="/uploads/images/figures/2015/07/Dridex-9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;A piece of data decoded with BASE64.</b></p></div><p>The first 0x80 bytes of the decoded data is junk code, after which is a DLL. The malware writes this DLL into a TEMP file whose directory is the same as the malware. Then it creates a registry entry: HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Explorer/CLSID/%s/ShellFolder. The &lsquo;%s&rsquo; is a GUID which is transformed from the MD5 of a variant of the System_Info data block (described earlier). The System_Info variant only adds a byte, 0x13, following the System_Info block. The value of this registry is encrypted by a customized algorithm. Its raw data is in the format &lt;cfg net=&quot;%d&quot; build=&quot;0&quot;&gt;&lt;startup&gt;%s&lt;/startup&gt;&lt;del&gt;%S&lt;/del&gt;&lt;/cfg&gt;. The value of the &lsquo;net&rsquo; attribute is botnet_id, the content in the &lsquo;startup&rsquo; section is retrieved from the &lsquo;nodes&rsquo; section, which is sent from the C&amp;C server, the content of the &lsquo;del&rsquo; section is the path of the malware. Finally, the malware calls the CreateProcessW API to run the DLL with argument &lsquo;rundll32.exe &quot;&lt;DLL_path&gt;&quot; NotifierInit&rsquo;. The DLL has an export function, NotifierInit, and this DLL will carry out further orders received from the server. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4494156"></a>Conclusion</h2></div></div></div><p>By analysing the malware in detail, we have learned about its working mechanism and how it gathers information and communicates with the C&amp;C server. We can now forge data and send it to the server, decode the response and check the server commands. In this way, we might obtain more commands for further research or obtain the latest variants in order to keep track of this malware.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4430479"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] <span class="bibliosource"><a href="http://ibsensoftware.com/products_aPLib.html" target="_blank">http://ibsensoftware.com/products_aPLib.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] <span class="bibliosource"><a href="https://en.wikipedia.org/wiki/Mandatory_Integrity_Control" target="_blank">http://en.wikipedia.org/wiki/Mandatory_Integrity_Control</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2015/vb201507-Dridex.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Dridex in the wild&url=https://www.virusbulletin.com/virusbulletin/2015/07/dridex-wild"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2015/07/dridex-wild'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2015/07/dridex-wild&title=Dridex in the wild"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2015/07/dridex-wild&t=Dridex in the wild"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2015/07/dridex-wild"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>