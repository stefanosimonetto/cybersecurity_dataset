<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2018 paper: Android app deobfuscation using static-dynamic cooperation</title>
<meta name="description" content="Malicious Android applications are quite common, and can even be found from time to time in the Google Play Store. Thus, a lot of work has been done in both industry and academia on Android app analysis, and in particular, static code analysis. One of the problems faced by static code analysis is encryption of sensitive strings. App developers can perform such encryption by writing custom code, or using off-the-shelf obfuscators. Dynamic code analysis is not affected by such obfuscation techniques, because the sensitive data is decrypted by the app’s code at runtime. This paper describes a combined analysis process, composed of both dynamic and static analysis modules, in which the dynamic module extracts the decrypted data and passes it to the static module." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 6300;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-vb2018-paper-android-app-deobfuscation-using-static-dynamic-cooperation"></a>VB2018 paper: Android app deobfuscation using static-dynamic cooperation</h1>
<h3><a class="chapter" name="h3-yoni-moses-amp-yaniv-mordekhay"></a>Yoni Moses &amp; Yaniv Mordekhay</h3>
<p>Check Point, Israel</p>
<p><em>Copyright © 2018 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-13641" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-13641" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-introduction">Introduction</a><br /> <a class="toc-level2" href="#h2-obfuscators">Obfuscators</a><br /> <a class="toc-level4" href="#h4-how-string-encryption-works-common-obfuscators">How string encryption works in common obfuscators</a><br /> <a class="toc-level3" href="#h3-simple-case">A simple case</a><br /> <a class="toc-level4" href="#h4-excerpt-1">Excerpt 1:</a><br /> <a class="toc-level3" href="#h3-more-sophisticated-case">A more sophisticated case</a><br /> <a class="toc-level4" href="#h4-excerpt-2">Excerpt 2:</a><br /> <a class="toc-level2" href="#h2-deobfuscation-flow">Deobfuscation flow</a><br /> <a class="toc-level2" href="#h2-experiments-and-results">Experiments and results</a><br /> <a class="toc-level3" href="#h3-data-collection">Data collection</a><br /> <a class="toc-level3" href="#h3-dasho-experiment">DashO experiment</a><br /> <a class="toc-level3" href="#h3-results">Results</a><br /> <a class="toc-level2" href="#h2-conclusions-and-further-research">Conclusions and further research</a><br /> <a class="toc-level2" href="#h2-references">References</a><br /> <a class="toc-level2" href="#h2-appendix">Appendix A</a><br /> <a class="toc-level4" href="#h4-excerpt-3-dasho-string-decryption-code">Excerpt 3: DashO string decryption code</a><br /> <a class="toc-level4" href="#h4-excerpt-4-dexguard-string-decryption-code">Excerpt 4: DexGuard string decryption code</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>Malicious <em>Android</em> applications are quite common, and can even be found from time to time in the <em>Google Play Store</em>. Thus, a lot of work has been done in both industry and academia on <em>Android</em> app analysis, and in particular, static code analysis.</p>
<p>One of the problems faced by static code analysis is encryption of sensitive strings, e.g. names of functions called by reflection. App developers can perform such encryption by writing custom code, or using off-the-shelf obfuscators.</p>
<p>Dynamic code analysis – running the app in an emulator – is not affected by such obfuscation techniques, because the sensitive data is decrypted by the app's code at runtime. To leverage this advantage, we created a combined analysis process, composed of both dynamic and static analysis modules, in which the dynamic module extracts the decrypted data and passes it to the static module.</p>
<p>One challenge immediately comes to mind: while static analysis can analyse every line of code in the app, dynamic analysis is only aware of the code that actually runs. In other words, we might have to work hard during dynamic analysis to reach all possible flows where encrypted data is used. The solution is to make the dynamic module more active by showing it the right direction. The static module searches the app code for all invocations of the decryption code, which is usually in the form of a static function (e.g. in off-the-shelf obfuscators such as <em>DashO</em>, <em>KlassMaster</em> and others). It provides the dynamic module with a list of function calls, including argument values. The dynamic module performs these function calls and returns the results to the static module, which then patches the app code using the decrypted strings.</p>
<p>We implemented this concept and tested it on samples obfuscated by <em>DashO</em>. As we hoped, this approach enabled static analysis to detect new suspicious behaviours in applications with previously limited analysis coverage.</p>
<p> </p>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>As of May 2018, <em>Android</em> is the most popular commercial operating system in the world (<em>definitely the most popular mobile OS; prevalence over Windows is within statistical error [<a href="#ref1">1</a>]</em>), with millions of applications available for download from numerous global application markets [<a href="#ref2">2</a>]. The prevalence of the OS, its open ecosystem and well established global app distribution model contribute to the creation of a dangerous attack surface that is exploited by numerous threat actors ranging from opportunistic 'script kiddies' looking for fame and glory, via criminal organizations hacking for profit, to government agencies on spying missions.</p>
<p>In spite of genuine efforts by the operators of the app markets, malware does manage to find its way inside, sometimes reaching millions of downloads before being removed. Malware apps sometimes even manage to sneak into <em>Google Play</em>, the largest and the most well protected of the <em>Android</em> app markets [<a href="#ref3">3</a>]. Alternative app stores are often even less well protected.</p>
<p>As a result, a lot of effort has been invested, both in the industry and academia, into developing methods of automatic <em>Android</em> app analysis that could quickly and accurately separate malicious apps from benign ones.</p>
<p>One of the widely used methods, often called 'dynamic analysis', involves running the application in a controlled environment: a sandbox, an emulator or a quarantined physical device. During runtime, the analysis code monitors the state of the application and the operating system. If the app accesses sensitive user information, tries to exploit a known vulnerability, communicates with its C&amp;C server or exhibits other suspicious behaviour, it will be discovered by the analysis code. And since the malicious code is contained inside the sandbox, no actual harm can be done.</p>
<p>Although dynamic analysis can be very effective, it also has shortcomings – its coverage of the app's behaviour can be limited as it can only analyse behaviours actually happening during the analysis time. Malicious behaviours that are triggered by input from the user, network events and temporal events could be completely invisible to the dynamic analysis. Some malicious applications take advantage of this weakness by intentionally employing various evasion or anti-emulation techniques, for example by implementing a 'time bomb', which is a mechanism that defers the execution of a malicious behaviour until some time later in the future, hopefully beyond the scope of the ongoing analysis.</p>
<p>A completely different approach to code analysis, which is also very common, is known as 'static code analysis', 'data-flow analysis' or 'taint analysis' [<a href="#ref4">4</a>]. In this method, the analysis tries to gain insights about the code's functionality without running it. In particular, it analyses the flow of data within the code, in order to find out how sensitive user data is handled. For example, the analysis can look for all function calls that result in opening a network socket, and then follow the variable that references the socket, to find out if any sensitive user data is written to the socket.</p>
<p>Static analysis can sometimes cover behaviour that isn't covered by dynamic analysis. For example, if the code that performs this behaviour is protected by a time bomb or another evasion technique.</p>
<p>One of the obstacles that static analysis faces when analysing real-world applications is code obfuscation. Code obfuscation is used by legitimate app developers to protect their intellectual property, but also by malicious apps to evade detection. Some developers may choose to implement their own methods of obfuscation, but most use off-the-shelf obfuscation solutions.</p>
<p>Unlike static analysis, dynamic analysis isn't hindered by obfuscation. The functionality of the obfuscated code during runtime is equivalent to the functionality of the original code, regardless of whether it runs in a sandbox/virtual device or on a real <em>Android</em> device. For example, sensitive strings encrypted during obfuscation are decrypted at runtime. This means dynamic analysis can reveal information that is potentially beneficial to static analysis, and could enable it to improve its coverage of obfuscated code.</p>
<p>In our research, we chose to tackle two related obfuscation techniques: string encryption and dynamic method binding via reflection. The second technique is often combined with the first one. That is, the strings containing the names of the classes and methods called by reflection are also encrypted.</p>
<p>We considered multiple approaches. For example, we considered making the dynamic analysis module intercept the decrypted strings when they are returned from the decryption code by placing breakpoints. Unfortunately, full code coverage is the Achilles' heel of dynamic analysis. Therefore, this approach doesn't guarantee decryption of all the needed data – the dynamic analysis might just not reach it in its usual flow.</p>
<p>To maximize coverage, we implemented a more sophisticated approach. Instead of passively waiting for the string to be decrypted, the dynamic analysis can actively execute the decryption code. Of course, cherry-picking the interesting calls could be very complicated, especially if the call depends on the context or some previously calculated state. Fortunately, many common obfuscators use static, stateless code to perform the decryption. For the first stage of our research we limited ourselves to such obfuscators, as we'll show in the following sections.</p>
<p> </p>
<h2><a class="chapter" name="h2-obfuscators"></a>Obfuscators</h2>
<p>Common obfuscation techniques include, among others:</p>
<ul>
<li>Class and method renaming</li>
<li>Encryption of sensitive strings: file paths, URLs, etc.</li>
<li>Dynamic method binding by reflection, often combined with string encryption (that is, encryption of the strings that contain the names of the classes and methods called by reflection)</li>
<li>Code packing, i.e. the app code is encrypted and wrapped with an unpacker that decrypts it at runtime.</li>
</ul>
<p>Class and method renaming seems to be the most common technique in malicious apps and apps found in third-party markets [<a href="#ref5">5</a>], so it might seem like a natural choice for deobfuscation research. However, since the original names are completely removed from the app installation file, deobfuscation is simply not possible. Fortunately, renaming only poses a problem to 'manual' reverse engineering, because automated static analysis doesn't rely on the meaning of the names found in the code (except for names from the <em>Android</em> API or Java library, but these cannot be modified). Therefore, we chose to focus on string encryption and reflection. They are both quite common, and dealing with the first one allows us to deal also with the second.</p>
<p>Although previous work has already been done to assess the prevalence of different obfuscators in the <em>Google Play Store</em> [<a href="#ref6">6</a>], we wanted to gather such statistics on a larger scale. Also, many of the obfuscators that support string encryption allow the user to choose whether to use it or not, since it can impact performance [<a href="#ref7">7</a>, <a href="#ref8">8</a>]. Therefore it was important to find out specifically how common are different implementations of string encryption, by different off-the-shelf obfuscators.</p>
<p>We ran statistics on 400,000 malicious APKs and 6 million non-malicious <em>Android</em> apps from <em>Check Point</em>'s app repository. Using code signatures for different implementations of string decryption, we identified whether an app is obfuscated by one of the common obfuscators known to us (refer to the '<a href="#h2-experiments-and-results">Experiments and results</a>' section for an example of such a signature). We found that 3.6% of the apps were obfuscated using string encryption. It's interesting to note that string encryption isn't more common among malicious apps. In fact, only 3.5% of the malicious apps we examined contained encrypted strings. Figure 1 shows a breakdown of the data.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Obfuscator</strong></td>
<td><strong>Out of obfuscated apps</strong></td>
<td><strong>Out of all apps</strong></td>
</tr>
<tr>
<td>Allatori</td>
<td>0.37%</td>
<td>0.01%</td>
</tr>
<tr>
<td>DashO</td>
<td>2.71%</td>
<td>0.10%</td>
</tr>
<tr>
<td>DexGuard</td>
<td>60.2%</td>
<td>2.17%</td>
</tr>
<tr>
<td>DexProtector</td>
<td>0.1%</td>
<td>&lt;0.01%</td>
</tr>
<tr>
<td>KlassMaster</td>
<td>32.93%</td>
<td>1.18%</td>
</tr>
<tr>
<td>Other</td>
<td>3.87%</td>
<td>0.14%</td>
</tr>
</tbody>
</table>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/3615/4539/4816/chart_1.png" alt="chart 1.png" width="1011" height="598" /></p>
<p class="centered-caption">Figure 1: Prevalence of string-encrypting obfuscators.</p>
<p> </p>
<h4><a class="chapter" name="h4-how-string-encryption-works-common-obfuscators"></a>How string encryption works in common obfuscators</h4>
<p>The typical obfuscator implements string encryption in the following manner. During build time:</p>
<ol>
<li>The app developer (who is the user of the obfuscator) chooses where to apply string encryption.</li>
<li>The obfuscator overwrites the original strings with encrypted strings.</li>
<li>The obfuscator generates decryption code (including decryption keys) and embeds it inside the app code. The decryption code is often a static function, that returns the decrypted string.</li>
<li>The obfuscator adds function calls that call the decryption code when the app code uses an encrypted string.</li>
</ol>
<p>During runtime, the decryption code for any particular string runs immediately before the app code reads that string.</p>
<p> </p>
<h3><a class="chapter" name="h3-simple-case"></a>A simple case</h3>
<p>As an example of a relatively simple method of string encryption, we chose <em>DashO</em>, a commercial obfuscator developed by <em>PreEmptive Solutions</em> [<a href="#ref9">9</a>].</p>
<p><em>DashO</em> replaces occurrences of sensitive strings with function calls to a static decryption function. The arguments passed to the function include a string and a number. Both arguments are constants, whose initialization is adjacent to the decryption function call. An example can be seen in <a href="#h4-excerpt-1">Excerpt 1</a>, which is from a malicious app called com.software.app [<a href="#ref10">10</a>], disassembled into smali code [<a href="#ref11">11</a>].</p>
<p> </p>
<h4><a class="chapter" name="h4-excerpt-1"></a>Excerpt 1:</h4>
<pre>const-string v1, "\t\u001b\u0002\u0019\u0019\u0001\u0014EX"<br />const/16 v2, 0x79<br />invoke-static {v1, v2}, Lcom/software/app/Activator$2;-&gt;getChars(Ljava/lang/String;I)Ljava/lang/String;<br />move-result-object v1</pre>
<p>The same decryption function, <span class="monospace">Activator$2;-&gt;getChars</span>, is called many times throughout the application code, each time with different arguments. The decryption logic is contained entirely inside the decryption function, and doesn't use additional data apart from the arguments passed to the function. The code (from the same malicious app) can be seen in <a href="#h4-excerpt-3-dasho-string-decryption-code">Excerpt 3</a>, in the <a href="#h2-appendix">Appendix</a>.</p>
<p> </p>
<h3><a class="chapter" name="h3-more-sophisticated-case"></a>A more sophisticated case</h3>
<p><em>DexGuard</em> is a commercial obfuscator developed by <em>GuardSquare</em> [<a href="#ref12">12</a>] (who also develop <em>ProGuard</em>, a popular open-source obfuscation and optimization tool). Its implementation of string encryption is more complex than the previous example.</p>
<p><em>DexGuard</em> replaces string occurrences with calls to a static decryption function, as in the previous example. But it doesn't use the same function for all decryption instances. Instead, variations of the function are generated for each of the classes where string encryption is used. These variations differ both in the constants they contain as well as in the opcodes.</p>
<p>Also, the decryption logic isn't at all contained within the decryption function. Some of it is actually inserted into the function where the original string instance appears, as can be observed in <a href="#h4-excerpt-2">Excerpt 2</a>, which is from a malicious app called com.xomyjmqmlapu.pahrxyxea [<a href="#ref13">13</a>]. In addition, a static binary array containing encrypted data is generated in each class where string encryption is enabled. This array is accessed by the decryption function, and also by the function that calls it. The result is that discovering the value of the arguments passed to the decryption function isn't as trivial as in the case of <em>DashO</em>.</p>
<p> </p>
<h4><a class="chapter" name="h4-excerpt-2"></a>Excerpt 2:</h4>
<pre>sget-object v2, Lcom/ipduqdlyvx/dakgeycodriu/s;-&gt;aa:[B<br />const/16 v3, 0x65<br />aget-byte v2, v2, v3<br />neg-int v2, v2<br />sget-object v3, Lcom/ipduqdlyvx/dakgeycodriu/s;-&gt;aa:[B<br />const/16 v4, 0x19f<br />aget-byte v3, v3, v4<br />neg-int v3, v3<br />const/16 v4, 0xde<br />invoke-static {v2, v4, v3}, Lcom/ipduqdlyvx/dakgeycodriu/s;-&gt;Q(III)Ljava/lang/String;</pre>
<p> </p>
<h2><a class="chapter" name="h2-deobfuscation-flow"></a>Deobfuscation flow</h2>
<p>The deobfuscation flow is illustrated in <a href="#figure2">Figure 2</a>. The steps are as follows:</p>
<ol>
<li>The static analysis module uses signatures to locate all calls to decryption functions.</li>
<li>The static analysis module searches for the values of the arguments passed to the functions.</li>
<li>The static analysis module passes to the dynamic analysis module a list of all decryption calls, including their location in the app code.</li>
<li>The dynamic analysis module starts the <em>Android</em> emulation and installs the app.</li>
<li>When the application is already loaded into the memory but <em>before</em> the application code starts its execution, the special instrumentation code injected by the dynamic analysis module executes, one by one, all the function calls requested by the static analysis module.</li>
<li>The results are collected and put aside for the static analysis that runs again immediately after the dynamic analysis.</li>
<li>The static analysis module patches the app code, replacing calls to the decryption code with decrypted string values.</li>
<li>The static analysis module looks for reflection function calls, e.g. calls to <span class="monospace">java.lang.reflect.Method.invoke()</span>, and performs a backtrack search to find the names of the class and method being invoked by reflection. It then patches the code, replacing the reflection function calls with ordinary ones. Note that the class and method names were decrypted in stage 7 (if indeed they were originally encrypted by the obfuscator).<a class=" anchor" name="figure2"></a></li>
</ol>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/d0ee623a3cf49715030f52b1629e00f7_f3318.png" alt="chart 2.png" width="840" height="848" /><span class="centered-caption">Figure 2: Deobfuscation flow.</span></p>
<p> </p>
<h2><a class="chapter" name="h2-experiments-and-results"></a>Experiments and results</h2>
<p>Our experiments employed the existing application analysis infrastructures in <em>Check Point</em>. The central elements we used were:</p>
<ol>
<li>A samples database containing millions of applications.</li>
<li>The static analysis infrastructure that enables execution of a custom analysis algorithm on a large set of samples.</li>
<li>The dynamic analysis infrastructure that enables custom instrumentation of the operating system and the analysed apps.</li>
<li>An orchestration infrastructure that collects, transfers and stores the data generated by the analysis algorithms.</li>
</ol>
<p> </p>
<h3><a class="chapter" name="h3-data-collection"></a>Data collection</h3>
<p>The first step of our research was to collect the data. Although we had a huge set of applications, they were not properly tagged with the obfuscation information. We used the following signature to locate the required obfuscated apps for further analysis:</p>
<p><strong>Signature for <em>DashO</em> decryption function</strong></p>
<ul>
<li>static function</li>
<li>return value of type String</li>
<li>receives 2-3 integers and one String as input parameters</li>
<li>handles exceptions that inherit from RuntimeException</li>
<li>only calls methods of class String</li>
</ul>
<p>Once the samples were tagged, we could finally run our algorithm and validate the thesis.</p>
<p> </p>
<h3><a class="chapter" name="h3-dasho-experiment"></a>DashO experiment</h3>
<p>Since <em>DashO</em>'s implementation of string encryption is relatively simple, we chose it for the first experiment.</p>
<p><em>We</em> created a data set composed of 586 samples, each of them an <em>Android</em> application, either malicious or benign, containing strings encrypted by DashO.</p>
<p>We ran all the apps in our dynamic analysis infrastructure, which first used the static analysis infrastructure to identify all decryption calls and extract argument values. After the first static analysis phase, the dynamic analysis executed all the decryption calls. The decryption results were saved to JSON files that were passed to the static analysis infrastructure in order to perform full static analysis of each sample.</p>
<p>We also ran the static analysis infrastructure on the same samples without feeding it with any decrypted string data.</p>
<p> </p>
<h3><a class="chapter" name="h3-results"></a>Results</h3>
<p><a href="#figure3">Figure 3</a> shows the distribution of the number of encrypted strings among the different apps we tested. Recall that obfuscators such as <em>DashO</em> allow the user to encrypt just some of the strings in the code, to reduce the performance hit caused by having to run the decryption code during the application runtime.</p>
<p>Since we have no ground truth for these samples, we cannot estimate the recall of the decryption call identification. But we do know that argument values were successfully retrieved for 99% of the decryption calls, on average.</p>
<p>In 61 out of 586 samples (10.4%), static analysis detected new data flows that it had not detected without the string decryption. Some of these flows involved:</p>
<ul>
<li>access to the user's Google account credentials</li>
<li>access to the SMS content provider (for example, to delete a message) and to the contacts content provider</li>
<li>device administrator privileges request.<a class=" anchor" name="figure3"></a></li>
</ul>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/8c9165a01d2e1634c1bca4f701a16ddb_f3319.png" alt="new-figure 3.png" width="680" height="508" /><span class="centered-caption">Figure 3: Encryptions per app.</span></p>
<p> </p>
<h2><a class="chapter" name="h2-conclusions-and-further-research"></a>Conclusions and further research</h2>
<p>We implemented the complete deobfuscation solution and tested it on hundreds of <em>Android</em> applications. The experiment confirmed our assumptions and enabled detection of new behaviours in applications with previously limited analysis coverage. More importantly, the research demonstrates that modern threats require holistic approaches to application analysis. It is not enough to choose one approach – effective threat prevention requires collaboration of multi-disciplinary teams employing a wide range of techniques.</p>
<p>Possible directions for further research include:</p>
<ul>
<li>Support for decryption of strings even when the decryption logic isn't contained in a single function (e.g. as implemented by <em>DexGuard</em>).</li>
<li>Use of heuristics to generically identify decryption logic, instead of relying on signatures [<a href="#ref14">14</a>].</li>
</ul>
<p>Finally, since obfuscation is often used to protect intellectual property in benign apps, rather than to conceal malicious behaviour, it is worth mentioning that implementing a deobfuscation system as we described here is far from trivial. This research is aimed at developers of automated malware detection solutions, rather than for researchers interested in reverse-engineering particular obfuscated <em>Android</em> apps for their intellectual property.</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] <a href="http://gs.statcounter.com/os-market-share" target="_blank">http://gs.statcounter.com/os-market-share</a>.</p>
<p><a class=" anchor" name="ref2"></a>[2] <a href="https://www.statista.com/statistics/266210/number-of-available-applications-in-the-google-play-store/" target="_blank">https://www.statista.com/statistics/266210/number-of-available-applications-in-the-google-play-store/</a>.</p>
<p><a class=" anchor" name="ref3"></a>[3] <a href="https://source.android.com/security/reports/Google_Android_Security_2017_Report_Final.pdf" target="_blank">https://source.android.com/security/reports/Google_Android_Security_2017_Report_Final.pdf</a>.</p>
<p><a class=" anchor" name="ref4"></a>[4] <a href="https://orbilu.uni.lu/bitstream/10993/20223/1/far%2B14flowdroid.pdf" target="_blank">https://orbilu.uni.lu/bitstream/10993/20223/1/far%2B14flowdroid.pdf</a>.</p>
<p><a class=" anchor" name="ref5"></a>[5] Understanding Android Obfuscation Techniques: A Large-Scale Investigation in the Wild. <a href="https://arxiv.org/pdf/1801.01633.pdf" target="_blank">https://arxiv.org/pdf/1801.01633.pdf</a>.</p>
<p><a class=" anchor" name="ref6"></a>[6] Who Changed You? Obfuscator Identification for Android. <a href="http://web.cse.ohio-state.edu/presto/pubs/msoft17.pdf" target="_blank">http://web.cse.ohio-state.edu/presto/pubs/msoft17.pdf</a>.</p>
<p><a class=" anchor" name="ref7"></a>[7] <a href="https://link.springer.com/chapter/10.1007/978-3-319-65687-8_21" target="_blank">https://link.springer.com/chapter/10.1007/978-3-319-65687-8_21</a>.</p>
<p><a class=" anchor" name="ref8"></a>[8] <a href="https://www.sciencedirect.com/science/article/pii/S0167404817302092" target="_blank">https://www.sciencedirect.com/science/article/pii/S0167404817302092</a>.</p>
<p><a class=" anchor" name="ref9"></a>[9] <a href="https://www.preemptive.com/products/dasho/overview" target="_blank">https://www.preemptive.com/products/dasho/overview</a>.</p>
<p><a class=" anchor" name="ref10"></a>[10] <a href="https://www.virustotal.com/#/file/833ac61ca31366995f9b3ad4f77a838d44fac0317ecfd5bc31f1adeb149c3543/detection" target="_blank">https://www.virustotal.com/#/file/833ac61ca31366995f9b3ad4f77a838d44fac0317ecfd5bc31f1adeb149c3543/detection</a>.</p>
<p><a class=" anchor" name="ref11"></a>[11] <a href="https://github.com/JesusFreke/smali/wiki" target="_blank">https://github.com/JesusFreke/smali/wiki</a>.</p>
<p><a class=" anchor" name="ref12"></a>[12] <a href="https://www.guardsquare.com/en/dexguard" target="_blank">https://www.guardsquare.com/en/dexguard</a>.</p>
<p><a class=" anchor" name="ref13"></a>[13] <a href="https://www.virustotal.com/#/file/d3ca9e40a2bd04896a0336ef2eb3dd6824786f2b7d040107cb7a5c39d945370f/detection" target="_blank">https://www.virustotal.com/#/file/d3ca9e40a2bd04896a0336ef2eb3dd6824786f2b7d040107cb7a5c39d945370f/detection</a>.</p>
<p><a class=" anchor" name="ref14"></a>[14] <a title="VB2017 paper: Crypton - exposing malware's deepest secrets" href="/virusbulletin/2017/10/vb2017-paper-crypton-exposing-malwares-deepest-secrets/">https://www.virusbulletin.com/virusbulletin/2017/10/vb2017-paper-crypton-exposing-malwares-deepest-secrets/</a>.</p>
<p> </p>
<h2><a class="chapter" name="h2-appendix"></a>Appendix A</h2>
<h4><a class="chapter" name="h4-excerpt-3-dasho-string-decryption-code"></a>Excerpt 3: DashO string decryption code</h4>
<pre>.method public static getChars(Ljava/lang/String;I)Ljava/lang/String;<br />   .locals 5<br />   const/4 v0, 0x0<br />   :try_start_0<br />   invoke-virtual {p0}, Ljava/lang/String;-&gt;toCharArray()[C<br />   move-result-object v2<br />   array-length v3, v2<br />   :goto_0<br />   if-eq v0, v3, :cond_0<br />   aget-char v1, v2, v0<br />   and-int/lit8 v4, p1, 0x5f<br />   xor-int/2addr v4, v1<br />   add-int/lit8 p1, p1, 0x1<br />   add-int/lit8 v1, v0, 0x1<br />   int-to-char v4, v4<br />   aput-char v4, v2, v0<br />   move v0, v1<br />   goto :goto_0<br />  :cond_0<br />   const/4 v0, 0x0<br />   invoke-static {v2, v0, v3}, Ljava/lang/String;-&gt;valueOf([CII)Ljava/lang/String;<br />   move-result-object v0<br />   invoke-virtual {v0}, Ljava/lang/String;-&gt;intern()Ljava/lang/String;<br />   :try_end_0<br />   .catch Lcom/software/app/Activator$ArrayOutOfBoundsException; {:try_start_0 .. :try_end_0} :catch_0<br />   move-result-object v0<br />  :goto_1<br />   return-object v0<br />   :catch_0<br />   move-exception v0<br />   const/4 v0, 0x0<br />   goto :goto_1<br />.end method</pre>
<p> </p>
<h4><a class="chapter" name="h4-excerpt-4-dexguard-string-decryption-code"></a>Excerpt 4: DexGuard string decryption code</h4>
<pre>.method private static Q(III)Ljava/lang/String;<br />   .registers 9<br />   add-int/lit8 p0, p0, 0x20<br />   add-int/lit8 p1, p1, 0x4<br />   new-instance v0, Ljava/lang/String;<br />   const/4 v4, 0x0<br />   sget-object v5, Lcom/ipduqdlyvx/dakgeycodriu/s;-&gt;aa:[B<br />   rsub-int/lit8 p2, p2, 0x34<br />   new-array v1, p2, [B<br />   add-int/lit8 p2, p2, -0x1<br />   if-nez v5, :cond_16<br />   move v2, p0<br />   move v3, p2<br />   :goto_13<br />   add-int/2addr v2, v3<br />   add-int/lit8 p0, v2, -0x2<br />   :cond_16<br />   int-to-byte v2, p0<br />   add-int/lit8 p1, p1, 0x1<br />   aput-byte v2, v1, v4<br />   if-ne v4, p2, :cond_26<br />   const/4 v2, 0x0<br />   invoke-direct {v0, v1, v2}, Ljava/lang/String;-&gt;&lt;init&gt;([BI)V<br />   invoke-virtual {v0}, Ljava/lang/String;-&gt;intern()Ljava/lang/String;<br />   move-result-object v0<br />   return-object v0<br />   :cond_26<br />   move v2, p0<br />   add-int/lit8 v4, v4, 0x1<br />   aget-byte v3, v5, p1<br />   goto :goto_13<br />.end method</pre> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2018/VB2018-Moses-Mordekhay.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2018 paper: Android app deobfuscation using static-dynamic cooperation&url=https://www.virusbulletin.com/virusbulletin/2019/03/vb2018-paper-android-app-deobfuscation-using-static-dynamic-cooperation"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2019/03/vb2018-paper-android-app-deobfuscation-using-static-dynamic-cooperation'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2019/03/vb2018-paper-android-app-deobfuscation-using-static-dynamic-cooperation&title=VB2018 paper: Android app deobfuscation using static-dynamic cooperation"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2019/03/vb2018-paper-android-app-deobfuscation-using-static-dynamic-cooperation&t=VB2018 paper: Android app deobfuscation using static-dynamic cooperation"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2019/03/vb2018-paper-android-app-deobfuscation-using-static-dynamic-cooperation"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>