<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: The pluginer - Caphaw</title>
<meta name="description" content="Caphaw, also known as Shylock, has been a quiet, yet persistent player on the botnet scene since 2011. It stands in great contrast to most botnet malware in that it was released with complete functionality rather than being released into the wild while still in the testing phase. The bold nature of the campaign (an easily identifiable entry point code sequence) was backed up by Caphawâ€™s intricately designed code structure which made it hard for analysts to create a complete profile of its malicious behaviour with various obfuscation and anti-sandbox techniques. In their VB2014 paper, Micky Pun and Neo Tan discuss the technical aspects of handling the anti-reversing strategies devised by the malware writer and evaluate how Caphaw could become a permanent fixture in the botnet scene in the future." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1574;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201502-Caphaw"></a>VB2014 paper: The pluginer - Caphaw</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2015-02-27</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Micky</span> <span class="surname">Pun</span></h3><span class="orgname">Fortinet</span>, <span class="orgdiv">Canada</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Neo</span> <span class="surname">Tan</span></h3><span class="orgname">Fortinet</span>, <span class="orgdiv">Canada</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Caphaw, also known as Shylock, has been a quiet, yet persistent player on the botnet scene since 2011. It stands in great contrast to most botnet malware in that it was released with complete functionality rather than being released into the wild while still in the testing phase. The bold nature of the campaign (an easily identifiable entry point code sequence) was backed up by Caphaw&rsquo;s intricately designed code structure which made it hard for analysts to create a complete profile of its malicious behaviour with various obfuscation and anti-sandbox techniques. In their VB2014 paper, Micky Pun and Neo Tan discuss the technical aspects of handling the anti-reversing strategies devised by the malware writer and evaluate how Caphaw could become a permanent fixture in the botnet scene in the future.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2015 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2155" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2155" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id4011857">Abstract</a></span></dt><dt><span class="sect1"><a href="#id4135356">Brief history of Caphaw</a></span></dt><dt><span class="sect1"><a href="#id2610391">Basic features</a></span></dt><dt><span class="sect1"><a href="#id4401787">Information collection</a></span></dt><dt><span class="sect1"><a href="#id3903419">Anti-debug/analysis tricks</a></span></dt><dt><span class="sect1"><a href="#id2194013">Communication with C&amp;C Server</a></span></dt><dt><span class="sect1"><a href="#id4621650">Inline hooking and anti-hooking</a></span></dt><dt><span class="sect1"><a href="#id3987900">Modules and plug-ins</a></span></dt><dt><span class="sect1"><a href="#id4450314">Botnet operations</a></span></dt><dt><span class="sect1"><a href="#id3239995">Conclusion</a></span></dt><dt><span class="sect1"><a href="#id2665913">Appendix 1: Detected anti-virus vendors and targeted process</a></span></dt><dt><span class="sect1"><a href="#id3216117">Appendix 2: Recognized XML tag for configuration file</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4011857"></a>Abstract</h2></div></div></div><p>Often identified by its abilities to spread through <span class="emphasis"><em>Skype</em></span> and inject bank pages, Caphaw, also known as Shylock, has been a quiet, yet persistent player on the botnet scene since 2011. Caphaw is a rare kind of botnet in that it was released with complete functionality. It stands in great contrast to most botnet malware that is released into the wild while still in the testing phase. The bold nature of the campaign (an easily identifiable entry point code sequence) was backed up by Caphaw&rsquo;s intricately designed code structure which made it hard for analysts to create a complete profile of its malicious behaviour with various obfuscation and anti-sandbox techniques. In this article, we will discuss the technical aspects of handling the anti reversing strategies devised by the malware writer and evaluate how Caphaw could become a permanent fixture in the botnet scene in the future.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4135356"></a>Brief history of Caphaw</h2></div></div></div><p>Our research team first received a sample of Caphaw in late October 2011. In this version, the Caphaw client was extracted from the .data section of a companion memory injector and written into the memory of explorer.exe. Since every Caphaw sample includes its build version in order to identify itself to different instances through a named pipe, we have been able to build up a decent picture of major developmental milestones (see <a href="#figure.1">Figure 1</a>).</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Caphaw version timeline." src="/uploads/images/figures/2015/02/PunTan-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Caphaw version timeline.</b></p></div><p>(Click <a href="/uploads/images/figures/2015/02/PunTan-1-large.jpg" target="_top">here</a> to view a larger version of Figure 1.)</p><p>The 1.0.x versions of Caphaw client consisted only of master mode and slave mode. Some of the modules, namely backsocket and dllhook, were bundled together with the Caphaw client in the custom packer. Some other capabilities, such as VNC and archiver, could be downloaded from the Internet later, after the configuration files enabled them. Most of the strings were not encrypted, hence they were visible after unpacking.</p><p>In the 1.4.1 version, the memory injector was combined into the Caphaw client, hence the malware also needed to handle the situation when the Caphaw DLL client was not invoked by a memory injector. It also added anti-VM and anti-debug mechanisms so that the malicious payload would not trigger if it detected that it was running in a sandbox or debugging environment. Plug-ins were also introduced in this version to remove the limitations of the original &lsquo;modules&rsquo; system. The introduction of plug ins provided a more convenient way to introduce new functionalities and standardize communication with the master between different modules. In addition, the malware author created a test mode in order for the developer to be able to test the module and plug-in after download without being bothered by the newly added anti-VM and anti-debugging features.</p><p>Caphaw showed signs of stability when version 1.7.x was introduced in February 2013. No major structural changes were made at this point. Even later, in version 1.8.x, there were only slight changes to the traffic data pattern and additional code obfuscation. One obvious change in this version was the improvement to the custom encryption method of strings to eliminate wasted spaces (four zero bytes) at each encrypted string.</p><p>Other than modifications to Caphaw which allow it to run more stably on an infected host, some small changes can be seen in its configuration parsing through different versions. Some older features (e.g. /hijackcfg/backconnect, /hijackcfg/oskill) have become obsolete in later versions, while new features (e.g. /hijackcfg/upload_file, /hijackcfg /grabemails/, /hijackcfg/upload_file) have been added in newer clients. Detailed information on the available configuration in different versions is listed in Appendix 2.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2610391"></a>Basic features</h2></div></div></div><p>The Caphaw client is a DLL which can easily be identified by its entry point code where it checks the fdwReason parameter. The earlier version of Caphaw was packed in a memory injector, so it would only continue to execute the malicious DLL if it recognized itself being loaded into the virtual memory space by the LoadLibrary API. In the later versions, Caphaw used a more advanced custom packer and integrated the memory injected into the DLL client. The entry point of the DLL client reflects the fact that the malware is also capable of being a standalone memory injecting payload based on the fdwReason value.</p><p>Newer versions of Caphaw have been improving their condition checking so that malicious behaviour is not launched in unintended environments. The main idea of the payload starts with setting up named pipes for inter-process communication, paving the way for a multi-thread system operating the client. The older versions consist only of a master mode and a slave mode, where the master (shown in <a href="#figure.2">Figure 2</a>) is responsible for communication with the C&amp;C server while interacting with the slaves to run tasks that are enabled by the configuration file. Later versions also introduced &lsquo;plug-ins&rsquo;, which have standardized communication with the master, making plug-ins compatible with different versions of the master.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Caphaw overview." src="/uploads/images/figures/2015/02/PunTan-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Caphaw overview.</b></p></div><p>(Click <a href="/uploads/images/figures/2015/02/PunTan-2-large.jpg" target="_top">here</a> to view a larger version of Figure 2.)</p><p>Prior to launching the master, Caphaw will determine whether it has been injected into to a specific browser (&lsquo;iexplore.exe&rsquo; or &lsquo;firefox.exe&rsquo;). On hooking a recognized browser, it starts individual threads on the master to cover four areas of C&amp;C server communication:</p><div class="orderedlist"><ol type="1"><li><p>Pinging the C&amp;C server</p></li><li><p>Sending back computer information</p></li><li><p>Downloading and parsing the configuration file and carrying out tasks</p></li><li><p>Logging (errors or master, slave, plug-in messages).</p></li></ol></div><p>Information sent to the C&amp;C server is encrypted with RC4 using a key (known as ID here) generated based on the host&rsquo;s environment. Then all of the traffic is encapsulated with the SSL protocol. A few default C&amp;C server domains are included in the code and the malware uses a special generator to create a subnet name assuming that the DNS server will respond with an active C&amp;C server IP address. When the right condition is reached on the server side, the C&amp;C server will send back a configuration file encrypted with base64 and RC4 using the unique ID mentioned previously as the key.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4401787"></a>Information collection</h2></div></div></div><p>To encrypt the data that is sent, the malware author uses a custom algorithm to create a unique identification number. The algorithm can be described as follows:</p><div class="itemizedlist"><ul type="disc"><li><p>Data = CustomHashingCpuid [8 bytes] + VolumeSerialNumber [4 bytes] + ComputerName [? Bytes] + SecurityIdentifier [? Bytes]</p></li><li><p>ID = CustomOrderSwapping(MD5sum(Data))</p></li></ul></div><p>Since executing cpuid with different values stored in EAX yields different results, the malware author devised a wise plan to hash important information into eight bytes &ndash; see Listing 1.</p><pre class="programlisting">Func  CustomHashingCpuid
For (i = 0 to 1):   ;Get vendor ID and Processor Info and Feature Bits
 CPUID( i)
 Result[0..3] ^=  eax

 If  i == 1:
 Ebx  &amp;= 0xFFFFFFh //store with processor&rsquo;s additional feature info
 Result[0..3] ^= ebx
 Result[4..8] ^= ecx
 Result[4..8] ^= edx

For (i = 0x80000002h to 0x80000004h): ;Processor Brand String
 CPUID(i)
 Result[0..3] ^= eax
 Result[0..3] ^= ebx
 Result[4..8] ^= ecx
 Result[4..8] ^= edx

 return Result

<span class="bold"><strong>Listing 1: The malware author devised a wise plan to hash important information into eight bytes.</strong></span>
</pre><p>The malware uses the unique ID to encrypt the other information sent to the C&amp;C server. <a href="#table.1">Table 1</a> depicts the parameters and their request values (e.g. key=a323e7d52d&amp;id=012F789B3884E1400F7F5D954521F85B&amp;inst=master&amp;net=usa&amp;cmd=cfg&amp;time=2013.05.15+08%3a02%3a29.421).</p><div class="table"><a id="table.1"></a><table border="1" summary="Information sent back to the C&amp;C server."><colgroup><col /><col /><col /></colgroup><thead><tr><th align="center">Parameter</th><th align="center">Length (bytes)</th><th align="center">Description</th></tr></thead><tbody><tr><td>key</td><td>5</td><td>Using a custom algorithm to render a five-byte number from a hard-coded number in the malware binary</td></tr><tr><td>id</td><td>32</td><td>Unique ID generated based on the infected host&rsquo;s information <p>Also used as RC4 key </p></td></tr><tr><td>inst</td><td>5-8</td><td>Installation type which affects how the client parses and executes the downloaded file<div class="orderedlist"><ol type="1"><li><p>master</p></li><li><p>slave</p></li><li><p>pluginer</p></li></ol></div></td></tr><tr><td>net</td><td>N/A</td><td>Hard-coded botnet name</td></tr><tr><td>cmd</td><td>3-4</td><td>Command<div class="orderedlist"><ol type="1"><li><p>log</p></li><li><p>ping</p></li><li><p>cfg</p></li></ol></div></td></tr><tr><td>w</td><td>N/A</td><td>Message type<div class="orderedlist"><ol type="1"><li><p>fileupload</p></li><li><p>cmpinfo</p></li><li><p>sols</p></li><li><p>rqt</p></li></ol></div></td></tr><tr><td>bt</td><td>23</td><td>Build time (hard coded)</td></tr><tr><td>version</td><td>11</td><td>Build version (hard coded)</td></tr><tr><td>time</td><td>23</td><td>Current time</td></tr><tr><td>jt</td><td>N/A</td><td>Job time (in seconds)<p>Current time minus initial infection time</p></td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Information sent back to the C&amp;C server.</b></p></div><p>The key is generated using the following algorithm:</p><pre class="programlisting">Byte input[4] = hard-coded_value;
temp = sprintf( &lsquo;%u%u%u%u&rsquo;,input[0],input[1], input[2], input[3]);
temp = lldiv(temp , 0x3) // long unsigned division
temp = sprint( &lsquo;%I64u&rsquo;,atoi64(temp))
temp = md5sum(temp)
temp = md5sum(temp[0..9] )
result = temp[0-4]
</pre><p>The hard-coded value for generating the key is the build time of the malware.</p><p>The malware will also generate a detailed report on the victim&rsquo;s computer if the client determines that this is the first time the malware has run on the machine. The report will be encrypted slightly more simply than the other communications and sent back to the server with the command &lsquo;cmd=log&amp;w=cmpinfo&rsquo;. This contains extended details of the infected host. The list is surprisingly thorough; we will list just some of the more interesting parts:</p><div class="itemizedlist"><ul type="disc"><li><p>OS version, serial and CDKey</p></li><li><p>CPU, RAM information</p></li><li><p>File system structure and available space</p></li><li><p>Computer name, user name and privileges</p></li><li><p>Code pages &ndash; <span class="emphasis"><em>Windows</em></span> character encoding</p></li><li><p>Browser version</p></li><li><p>List of anti-malware products (the relationships between the anti-malware value and the process names are shown in Appendix 1)</p></li><li><p>Whether it is running in a virtual machine</p></li><li><p>Certain local executable file information, including: userinit.exe, cftmon.exe, vsdrv.exe, etc.</p></li><li><p>List of running services</p></li><li><p>List of running processes</p></li><li><p>List of installed programs</p></li><li><p>Snapshots of register values (EAX, EBX, ECX, EDX)</p></li></ul></div><p><a href="#figure.3">Figure 3</a> shows an example of the report. As you can see, AntiMalware=VMware here, since the bot considers the sandbox technique to be a kind of anti-virus method. Besides looking for a sandbox environment, it also scans through every current process to find matches of other anti-virus products. A complete list is shown in Appendix 1.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="A small fraction of the initial report." src="/uploads/images/figures/2015/02/PunTan-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;A small fraction of the initial report.</b></p></div><p>The purpose of this is obviously to draw a detailed description of the victim for more precise or tailored payloads/plug-ins to attack.</p><p>After the initial report, it also tries to search for a bitcoin wallet in some known directories and upload it using w=rqt if it finds one. This attack can only affect an unprotected wallet file, since it doesn&rsquo;t check whether the file is encrypted or not.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3903419"></a>Anti-debug/analysis tricks</h2></div></div></div><p>The following strategy is employed to obstruct reverse engineering of the malware:</p><div class="orderedlist"><ol type="1"><li><p>Caphaw has demonstrated an effective technique of obstructing static analysis by encrypting strings such as library names and condition constants using a custom encryption routine and encoding API names using their hashing values. With a low probability of collision on string name hashes, the API call addresses can easily be retrieved by generating the hash of each API name in the import table and retrieving the API call address when a match is found. This method can avoid revealing the API name strings. Besides, with all other critical string information encrypted, the analyst can only predict the function of the routines by looking at the numeric values and call follows, thus, static analysis is nearly impossible (see <a href="#figure.4">Figure 4</a>).</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Code snippet showing how the API is resolved by using its hash value." src="/uploads/images/figures/2015/02/PunTan-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Code snippet showing how the API is resolved by using its hash value.</b></p></div><p>(Click <a href="/uploads/images/figures/2015/02/PunTan-4-large.jpg" target="_top">here</a> to view a larger version of Figure 4.)</p></li><li><p><a href="#table.2">Table 2</a> depicts the tests the malware uses to detect virtual machine (VM) environments. For example, by iterating the full module name path returned by the ZwQuerySystemInformation API, it can detect a VM environment by detecting the existence of a known hash of a known VM filename (such as vmscsi.sys) with the hashes of all module names. If a sandbox environment is detected, the malware will delete itself and exit the process.</p><div class="table"><a id="table.2"></a><table border="1" summary="Sandbox detection methods."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Targeted virtual environment</th><th align="center">Detection method</th></tr></thead><tbody><tr><td><span class="bold"><strong>VMware</strong></span></td><td class="auto-generated">&nbsp;</td></tr><tr><td>&nbsp;</td><td>Test 1: (system module check)</td></tr><tr><td>&nbsp;</td><td>Use the ZwQuerySystemInformation API to obtain a list of system modules. Iterate through the list and attempt to match the hash of the system module with the hash of any of the following strings:<div class="itemizedlist"><ul type="disc"><li><p>vmhgfs.sys</p></li><li><p>vmx_svga.sys</p></li><li><p>vmxnet.sys</p></li><li><p>vmmouse.sys</p></li><li><p>vmscsi.sys</p></li><li><p>vmdebug.sys</p></li></ul></div></td></tr><tr><td>&nbsp;</td><td>Test 2: (running process check)</td></tr><tr><td>&nbsp;</td><td>Match the hash of a running process with the hash of the following strings:<div class="itemizedlist"><ul type="disc"><li><p>vmwarerray.exe</p></li><li><p>vmwareuser.exe</p></li></ul></div></td></tr><tr><td>&nbsp;</td><td>Test 3: (registry value check)</td></tr><tr><td>&nbsp;</td><td>Check if any of the following registry entries exist and contain the string &lsquo;VMware&rsquo; at &lsquo;SystemProductName&rsquo; and &lsquo;SystemManufacturer&rsquo;:<div class="itemizedlist"><ul type="disc"><li><p>HARDWARE\DESCRIPTION\System\BIOS</p></li><li><p>SYSTEM\ControlSet001\Control\SystemInformation</p></li></ul></div></td></tr><tr><td><span class="bold"><strong>Virtual Box</strong></span></td><td class="auto-generated">&nbsp;</td></tr><tr><td>&nbsp;</td><td>Test 1: (system module check)</td></tr><tr><td>&nbsp;</td><td>Use the ZwQuerySystemInformation API to obtain a list of system modules. Iterate through the list and attempt to match the hash of the system module with the hash of any of the following strings:<div class="itemizedlist"><ul type="disc"><li><p>vboxvideo.sys</p></li><li><p>vbocsf.sys</p></li><li><p>vboxdisp.dll</p></li><li><p>vboxmouse.sys</p></li><li><p>vboxguest.sys</p></li></ul></div></td></tr><tr><td>&nbsp;</td><td>Test 2: (running process check)</td></tr><tr><td>&nbsp;</td><td>Match the hash of a running process with the hash of the following strings:<div class="itemizedlist"><ul type="disc"><li><p>vboxservice.exe</p></li><li><p>vboxtray.exe</p></li></ul></div></td></tr><tr><td>&nbsp;</td><td>Test 3: (registry value check)</td></tr><tr><td>&nbsp;</td><td>Check if any of the following registry entries exist and contain the string &lsquo;VirtualBox&rsquo; at &lsquo;BIOVersion&rsquo; and &lsquo;SystemManufacturer&rsquo;:<div class="itemizedlist"><ul type="disc"><li><p>SYSTEM\ControlSet001\Control\SystemInformation</p></li></ul></div></td></tr><tr><td><span class="bold"><strong>Virtual PC</strong></span></td><td class="auto-generated">&nbsp;</td></tr><tr><td>&nbsp;</td><td>Test 1: (system module check)</td></tr><tr><td>&nbsp;</td><td>Match the hash of a running process with the hash of the following string:<div class="itemizedlist"><ul type="disc"><li><p>vmsrvc.exe</p></li><li><p>vpcmap.exe</p></li></ul></div></td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;Sandbox detection methods.</b></p></div></li><li><p>Unlike most malware, Caphaw has dedicated a huge amount of code to condition checking to ensure that the payload is deployed under the exact conditions intended. Buried in a massive amount of obfuscated code, recovering all the capabilities of this malware is rather time consuming and could easily be missed.</p></li></ol></div><p>In the process of reversing the code, we discovered that the author had left a few backdoors open for testing the malware. When executing the malicious routine with these special arguments, it will execute the client in different modes. The malware will first check if the local time is within two hours of the malware build time. If this is the case, it will go further and check whether the &lsquo;-testing&rsquo; and &lsquo;-vm&rsquo; arguments are provided in the command. If these conditions are met accordingly, the malware will not release any payload, or trigger the anti-VM detection routine.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="The malware compares the difference between the current time and the build time to two hours (7,200 seconds)." src="/uploads/images/figures/2015/02/PunTan-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;The malware compares the difference between the current time and the build time to two hours (7,200 seconds).</b></p></div><p>(Click <a href="/uploads/images/figures/2015/02/PunTan-5-large.jpg" target="_top">here</a> to view a larger version of Figure 5.)</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2194013"></a>Communication with C&amp;C Server</h2></div></div></div><p>The initial list of C&amp;C server domains is encrypted in the binary. However, Caphaw uses a special technique to hide the active server IPs. The life of the domains is usually very short &ndash; it usually ranges from a couple of hours to one or two days &ndash; and on the client side, it generates the full server domains and request URLs by using the hard-coded ones in the following format: [random generated prefix].[hard-coded domain]?r=[random number]. All of the communication traffic goes through C&amp;C server port 443 using the SSL protocol.</p><p>The pseudocode of the sub domain name generation is as follows:</p><pre class="programlisting">CHAR_TABLE = {abcdefghijklmnopqrstuvwxyz0123456789};
while ( char_count != 0)
{
    generated_sname += CHAR_TABLE[calcRandom(0x24)];
    char_count --;
}
int  calcRandom(int char_count_max)//generates random number under char_count_max
{
    v1 = randomDGASeed;
    if ( !randomDGASeed )
        v1 = gettickcount();
    randomDGASeed = 214013 * v1 + 2531011;
    return ((randomDGASeed &gt;&gt; 16) &amp; 32767) / 32767.0 * char_count_max;
}
</pre><p>The char_count is also generated randomly using the calcRandom() function with char_count_max obtained from the following function with a fixed argument: a1 = 0xC and a2=0x32. Therefore, char_count_max is constrained between 0xC and 0x12.</p><pre class="programlisting">int  generateCharCount (int a1, int a2)
{
    return calcRandom(2 * a2 * a1 / 100) + a1 * (100 - a2) / 100;
}
</pre><p>The thread responsible for communicating keeps generating domain names and querying them until it gets a response (see <a href="#figure.6">Figure 6</a>).</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Retrying generated URLs." src="/uploads/images/figures/2015/02/PunTan-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Retrying generated URLs.</b></p></div><p>(Click <a href="/uploads/images/figures/2015/02/PunTan-6-large.jpg" target="_top">here</a> to view a larger version of Figure 6.)</p><p>Then it sends the message to the response IP address in SSL protocol. A sample message in plaintext is as follows:</p><pre class="programlisting">key=a323e7d52d&amp;id=012F789B3884E1400F7F5D954521F85B&amp;inst=master&amp;net=usa&amp;cmd=cfg&amp;time=2013.05.15+08%3a02%3a29.421</pre><p>It is then encrypted using RC4 algorithm with the key being the domain it was querying appended to the fixed string &lsquo;ca5f2abe&rsquo; (e.g. &lsquo;bzdfv2bjw791h.e-protections.suca5f2abe&rsquo;). However, in the current version, the initial report is encrypted using a different RC4 key generated by a simpler format which appends a hard-coded string to the C&amp;C IP address (e.g. &lsquo;189.127.48.11bzdfv2bjw791h&rsquo;). Then it is encoded with base64, and posted to the server with &lsquo;z=&rsquo; in front of the encoded message. If the &lsquo;cmd&rsquo; variable is equal to &lsquo;cfg&rsquo;, the C&amp;C server will send back the base64 result of the configuration message, subsequently encrypted by RC4 algorithm with a different key. The key is the string of the &lsquo;id&rsquo; value generated on the victim&rsquo;s environment. After decryption, the configuration is in XML format. Listing 2 shows a sample configuration.</p><pre class="programlisting">&lt;hijackcfg&gt;
&lt;botnet name=&rdquo;15aug&rdquo;/&gt;
&lt;timer_cfg success=&rdquo;1200&rdquo;faail=&rdquo;1200&rdquo;/&gt;
&lt;timer_log success=&rdquo;600&rdquo;fail=&rdquo;600&rdquo;/&gt;
&lt;timer_ping success=&rdquo;1200&rdquo;fail=&rdquo;1200&rdquo;/&gt;
&lt;urls_server&gt;
&lt;url_server url=&rdquo;https://sysinfonet.cc/ping.html&rdquo;/&gt;
&lt;url_server url=&rdquo;https://sysinfo.cc/ping.html&rdquo;/&gt;
&lt;url_server url=&rdquo;https://netprotections.cc/ping.html&rdquo;/&gt;
&lt;/urls_server&gt;
&lt;archiver url=&rdquo;https://netprotections.cc/files/rar.exe&rdquo;cmd=&rdquo;a -r -dh -ep2 -v500k&rdquo;/&gt;
&lt;url_update md5=&rdquo;62b8e4b26b46eb58cb10a00b5ed390ea&rdquo;url=&rdquo;/files/010-update-2ds5b9dp3db5/15aug_xcv.exe&rdquo;updating=&rdquo;offline&rdquo;/&gt;
&lt;vnc url dll=&rdquo;/files/010-update-2ds5b9dp3db5/vnc.dll&rdquo;urldll_md5=&rdquo;456a5739345754ad4af562a0c7d0ab0b&rdquo;url=&rdquo;https://80.86.88.87:8890&rdquo;value=&rdquo;off&rdquo;/&gt;
&lt;httpinject value=&rdquo;on&rdquo;url=&rdquo;/files/010-update-2ds5b9dp3db5/hidden7770777.jpg&rdquo;md5=&rdquo;5dc90a34b59ea12414bd2923dc72e77d&rdquo;/&gt;
&lt;grabemails value=&rdquo;off&rdquo;/&gt;
&lt;plugins&gt;
&lt;plugin name=&rdquo;archbot&rdquo;url=&rdquo;https://store-imgs.net/files/xmlz.gsm&rdquo;value=&rdquo;on&rdquo;cmd=&rdquo;https://store-imgs.net&rdquo;/&gt;
&lt;plugin name=&rdquo;BackSocks&rdquo;url=&rdquo;/files/010-update-2ds5b9dp3db5/Bot.dll&rdquo;value=&rdquo;load&rdquo;cmd=&rdquo;higuards.cc:18365&rdquo;/&gt;
&lt;plugin name=&rdquo;DiskSpread&rdquo;url=&rdquo;/files/010-update-2ds5b9dp3db5/dsp.psd&rdquo;value=&rdquo;on&rdquo;cmd=&rdquo;usa_xcv.exe&rdquo;/&gt;
&lt;plugin name=&rdquo;MessengerSpread&rdquo;url=&rdquo;/files/010-update-2ds5b9dp3db5/msg.gsm&rdquo;value=&rdquo;on&rdquo;cmd=&rdquo;astats.su|||15aug_xcv.exe&rdquo;/&gt;
&lt;/plugins&gt;
&lt;/hijackcfg&gt;

<span class="bold"><strong>Listing 2: A sample configuration.</strong></span>
</pre><p>As you can see, the root level tag &lsquo;hijackcfg&rsquo; suggests that this configuration is mainly for the hijacking process. With different install modes, the bot parses different parts of the configuration.</p><div class="table"><a id="table.3"></a><table border="1" summary="Comparison of parsing tags in different modes."><colgroup><col /><col /><col /><col /></colgroup><thead><tr><th align="center">Tag</th><th align="center">Inst = Master</th><th align="center">Inst = Slaver</th><th align="center">Inst = Pluginer</th></tr></thead><tbody><tr><td>Botnet</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>Timer_cfg</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>Timer_log</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>Timer_ping</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>Url_server</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>Archiver</td><td>&#x2714;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Url_update</td><td>&#x2714;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Vnc</td><td>&#x2714;</td><td>&nbsp;</td><td>&#x2714;</td></tr><tr><td>Httpinject</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>Grabemails</td><td>&#x2714;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Plugin</td><td>&nbsp;</td><td>&nbsp;</td><td>&#x2714;</td></tr></tbody></table><p class="title"><b>Table&nbsp;3.&nbsp;Comparison of parsing tags in different modes.</b></p></div><p>The XML configuration is then parsed and saved into the named pipe. In this example, the &lsquo;botnet&rsquo; tag shows the name of the botnet. The &lsquo;timer&rsquo; tags are the retry timeout settings. The &lsquo;url_server&rsquo; tag stores the latest C&amp;C server URLs. The &lsquo;archiver&rsquo; tag contains a download address of a legitimate packer tool named &lsquo;RAR 3.00&rsquo;, which is used to pack the botnet client into a size of around 500KB with the command line options &lsquo;a -r -dh -ep2 -v500k&rsquo;. The &lsquo;url_update&rsquo; tag contains the address of the update file of this bot. Therefore, the bot has two ways of updating its C&amp;C server list: one from the url_server tag, and one from the update of the bot&rsquo;s binary. This makes tracking solely the downloading of the cfg file meaningless, because someone could just recompile the bot with a new C&amp;C server list to get rid of the tracker. </p><p>Then there are the download modules. These modules can be either installed or uninstalled according to whether the &lsquo;value&rsquo; is &lsquo;on&rsquo; or &lsquo;off&rsquo;. The &lsquo;vnc&rsquo; tag contains the download address of the vnc module. The &lsquo;httpinject&rsquo; tag contains the download address of the script file which is to be injected into the web pages. And the &lsquo;grabemails&rsquo; tag may contain the download address of the module which can harvest users&rsquo; email address books. </p><p>The MD5 is for pre-download comparison &ndash; if a module already exists in the system, it will not be downloaded again. The &lsquo;plugin&rsquo; tags contain the download addresses of the DLLs to be loaded into the injected process. To be distinct from the executable modules, the DLLs are always loaded via the exported function in order, &lsquo;Init&rsquo; then &lsquo;Start&rsquo;. And the &lsquo;cmd&rsquo; values are fed as the command line options of the DLL. </p><p>Notice that most of the &lsquo;URLs&rsquo; in this configuration are missing domain names. The bot generates domains using the same algorithm as described previously, appends &lsquo;r=[random]&rsquo; to the end of the URL, and sends a Get message to try to download the file (e.g. https://bzdfv2bjw791h.netprotections.cc/files/010-update-2ds5b9dp3db5/msg.gsm?r=1312723419). In the most recent version of the malware (at the time of writing), the message is changed to POST with an empty z= value. </p><p>For keeping track of the updated C&amp;C servers, the parsed url_server and the httpinject information is also saved into a local file in %AppData% with a random name (e.g. 1937592302.dat) and encrypted using the RC4 algorithm with the id (as seen in <a href="#table.1">Table 1</a>). The following is a sample content of the decrypted .dat file: </p><pre class="programlisting">botnet=usa
injects=/files/010-update-9gdrdhb30/hidden7770777.jpg
server1=https://ehistats.su/ping.html
server2=https://sysinfo.cc/ping.html
server3=https://netprotections.cc/ping.html
server4=https://sysinfonet.cc/ping.html
server5=https://iestats.cc/ping.html
server6=https://ieguards.su/ping.html
</pre></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4621650"></a>Inline hooking and anti-hooking</h2></div></div></div><p>The malware injects itself into other active processes. If it finds out that the host process is either iexplore.exe or firefox.exe, it will inline hook the communication APIs used by the browser processes, then contact the C&amp;C server with the &lsquo;cmd&rsquo; value set to &lsquo;cfg&rsquo; in order to get the latest configuration. Otherwise, if the host process is not explorer.exe, userinit.exe or rundll32.exe, it will start to contact the C&amp;C server with the &lsquo;cmd&rsquo; value set to &lsquo;ping&rsquo; in the message. </p><p>The APIs it is targeting in iexplore.exe are the following: </p><p>ws2_32.dll:</p><div class="itemizedlist"><ul type="disc"><li><p>send</p></li></ul></div><p>wininet.dll:</p><div class="itemizedlist"><ul type="disc"><li><p>HttpOpenRequestA</p></li><li><p>HttpOpenRequestW</p></li><li><p>HttpSendRequestA</p></li><li><p>HttpSendRequestW</p></li><li><p>HttpSendRequestExA</p></li><li><p>HttpSendRequestExW</p></li><li><p>InternetReadFile</p></li><li><p>InternetReadFileExA</p></li><li><p>InternetReadFileExW</p></li><li><p>InternetCloseHandle</p></li><li><p>InternetQueryDataAvailable</p></li><li><p>InternetSetStatusCallback</p></li></ul></div><p>The screenshot in <a href="#figure.7">Figure 7</a> shows that the HttpSendRequestW API in iexplore.exe is inline-hooked. </p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="The beginning of the HttpSendRequestW API is hooked." src="/uploads/images/figures/2015/02/PunTan-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;The beginning of the HttpSendRequestW API is hooked.</b></p></div><p>The APIs it targets in firefox.exe are the following:</p><p>nspr4.dll:</p><div class="itemizedlist"><ul type="disc"><li><p>PR_Read</p></li><li><p>PR_Write</p></li><li><p>PR_Close</p></li></ul></div><p>nss3.dll:</p><div class="itemizedlist"><ul type="disc"><li><p>CERT_VerifyCertName</p></li><li><p>CERT_VerifyCertNow</p></li></ul></div><p>The functions hooking these APIs can disable security warnings and manipulate the sending and receiving of the web pages. This is the core feature that enables Caphaw&rsquo;s man-in-the-browser abilities. And because the bot uses some of these APIs for communication with the C&amp;C servers as well, it creates a backdoor table to store the first couple of instructions of the API call following a push-retn jump back to the original routine. When contacting the C&amp;C server, it calls these addresses directly to bypass the inline hooks, which were made by itself.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="Pre-defined location used to store dummy code, now stores the initial instructions (in red) and a jump to the API." src="/uploads/images/figures/2015/02/PunTan-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;Pre-defined location used to store dummy code, now stores the initial instructions (in red) and a jump to the API.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3987900"></a>Modules and plug-ins</h2></div></div></div><p>The following is a list of modules and plug-ins that have been downloaded by Caphaw over the years:</p><div class="orderedlist"><ol type="1"><li><p>Browser cookie stealer (using archiver to archive and upload)</p></li><li><p>Flash cookies (SOLS) stealer</p></li><li><p>VNC server</p></li><li><p>Video capture and uploader (using archiver to archive and upload)</p></li><li><p>Message Spreader (via <span class="emphasis"><em>Skype</em></span>)</p></li><li><p>Disk Spreader (worm)</p></li><li><p>Backsocks (modifies source code of 3proxy &ndash; a 3APA3A simplest proxy server, socks.c precisely).</p></li></ol></div><p>The cookie stealer has the ability to steal or delete HTML and Flash cookies to facilitate the HTTP inject. The VNC server can enable the attacker to gain remote access to the victim&rsquo;s computer. The video capture and uploader can be used to monitor the victim&rsquo;s interaction with the computer, therefore drawing an even more complete picture of the target. The last three plug-ins are the recently active ones. Message Spreader can send spam messages via Skype to spread itself or other malware. Disk Spreader can spread the bot via removable drives. Backsocks can tunnel the attacker&rsquo;s traffic through the victim&rsquo;s machine into its internal networks, which opens up a new area of resources for the attacker to gain access to &ndash; and because it uses the back SOCKS protocol, it can also work in a NAT network. </p><p>All of these plug-ins can easily be installed/uninstalled. We believe the actual list of downloadable plug-ins will be larger than this. By knowing the user&rsquo;s information, the bot master can also tailor the list of plug-ins to be installed on the victim&rsquo;s machine. BoB</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4450314"></a>Botnet operations</h2></div></div></div><p>Caphaw is known for its ability to steal banking information and is most active in North America and western European countries. <a href="#figure.9">Figure 9</a> shows the distribution of active Caphaw C&amp;C server locations during May 2014. In 31 days we discovered in total 28 active servers which were mainly located in North America and western European countries. Note that North America has alone has 12 C&amp;C servers which are evenly distributed between the east and west coast. </p><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="Location of active Caphaw C&amp;C servers in May 2014." src="/uploads/images/figures/2015/02/PunTan-9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;Location of active Caphaw C&amp;C servers in May 2014.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3239995"></a>Conclusion</h2></div></div></div><p>After two years of development, Caphaw has become a dangerous piece of malware. Unlike other botnets, Caphaw is meticulous about its targets and extremely cautious in not launching any malicious activities if the environment is not deemed &lsquo;safe&rsquo;. In addition to generating profit through man-in-the-browser attacks and occasional bitcoin mining, Caphaw has also shown great interest in infiltrating internal networks with its arsenal of tools (Backsocks, Disk Spreader, video capturing and VNC server), which seems far beyond the requirements of simply making money quickly. </p><p>Having two ways of updating its C&amp;C server list and utilizing advanced code obfuscation techniques have benefited Caphaw in its ability to remain undiscovered in a host for a long time. All of these signs indicate that Caphaw is a competent APT candidate which is capable of hosting a reliable botnet. However, taking the time to reverse engineer Caphaw has proven fruitful as we have uncovered its core module&rsquo;s code structure, anti-analysis tricks and communication protocol. This gives us great leverage in terms of tracking and fighting this threat. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2665913"></a>Appendix 1: Detected anti-virus vendors and targeted process</h2></div></div></div><div class="informaltable"><table border="1"><colgroup><col /><col /></colgroup><thead><tr><th align="center">Anti-malware value</th><th align="center">Process name</th></tr></thead><tbody><tr><td>Agava firewall</td><td>Fwservice.exe</td></tr><tr><td>AtGuard firewall</td><td>iamapp.exe</td></tr><tr><td>Authentium</td><td>vseamps.exe</td></tr><tr><td>Authentium</td><td>vsedsps.exe</td></tr><tr><td>Avast</td><td>ashServ.exe</td></tr><tr><td>Avast</td><td>AvastSvc.exe</td></tr><tr><td>Avast</td><td>aswUpdSv.exe</td></tr><tr><td>Avast</td><td>ashDisp.exe</td></tr><tr><td>Avira</td><td>avgnt.exe</td></tr><tr><td>Avira</td><td>avguard.exe</td></tr><tr><td>Avira</td><td>sched.exe</td></tr><tr><td>AVG</td><td>avgwdsvc.exe</td></tr><tr><td>AVG</td><td>avgfws.exe</td></tr><tr><td>AVG</td><td>avgemcx.exe</td></tr><tr><td>AVG</td><td>avgrsx.exe</td></tr><tr><td>AVG</td><td>avgchsvx.exe</td></tr><tr><td>AVG</td><td>avgcc.exe</td></tr><tr><td>AVG</td><td>avgemc.exe</td></tr><tr><td>AVG</td><td>avgupsvc.exe</td></tr><tr><td>AVG</td><td>avgw.exe</td></tr><tr><td>AVG</td><td>guard.exe</td></tr><tr><td>AVG</td><td>avgamsvr.exe</td></tr><tr><td>BitDefender</td><td>vsserv.exe</td></tr><tr><td>Anti-malware value</td><td>Process name</td></tr><tr><td>BullGuard</td><td>BullGuard.exe</td></tr><tr><td>BullGuard</td><td>BullGuardBhvScanner.exe</td></tr><tr><td>CA</td><td>caamsvc.exe</td></tr><tr><td>CA</td><td>isafe.exe</td></tr><tr><td>CA</td><td>casc.exe</td></tr><tr><td>CA</td><td>ccEvtMgr.exe</td></tr><tr><td>CA</td><td>ccprovsp.exe</td></tr><tr><td>CA</td><td>ccschedulersvc.exe</td></tr><tr><td>Comodo firewall</td><td>cfp.exe</td></tr><tr><td>Comodo firewall</td><td>cssurf.exe</td></tr><tr><td>Comodo firewall</td><td>cmdagent.exe</td></tr><tr><td>Comcast Spyware Scan</td><td>ComcastAntiSpyService.exe</td></tr><tr><td>Comcast Spyware Scan</td><td>ComcastAntispy.exe</td></tr><tr><td>DeepFreeze</td><td>deepfreeze.exe </td></tr><tr><td>Doctor Web</td><td>dwengine.exe</td></tr><tr><td>Doctor Web</td><td>drweb32w.exe</td></tr><tr><td>Doctor Web</td><td>frwl_svc.exe</td></tr><tr><td>Emsisoft</td><td>a2service.exe</td></tr><tr><td>iS3</td><td>SZServer.exe</td></tr><tr><td>Kaspersky</td><td>avp.exe</td></tr><tr><td>KERIO</td><td>winroute.exe</td></tr><tr><td>Malwarebytes</td><td>mbamservice.exe</td></tr><tr><td>Malwarebytes</td><td>mbam.exe</td></tr><tr><td>MSEssentials</td><td>msseces.exe</td></tr><tr><td>Nod32</td><td>egui.exe</td></tr><tr><td>Nod32</td><td>ekrn.exe</td></tr><tr><td>Nod32</td><td>nod32krn.exe</td></tr><tr><td>Nod32</td><td>nod32kui.exe</td></tr><tr><td>NeT firewall</td><td>Firewall.msc</td></tr><tr><td>Norton360</td><td>ccSvcHst.exe</td></tr><tr><td>Norton</td><td>navapw32.exe</td></tr><tr><td>Norton</td><td>navapsvc.exe</td></tr><tr><td>McAfee</td><td>SSScheduler.exe</td></tr><tr><td>McAfee</td><td>EngineServer.exe</td></tr><tr><td>McAfee</td><td>Mcshield.exe</td></tr><tr><td>McAfee</td><td>mfeann.exe</td></tr><tr><td>McAfee</td><td>mcagent.exe</td></tr><tr><td>McAfee</td><td>VsTskMgr.exe</td></tr><tr><td>McAfee</td><td>myAgtSvc.exe</td></tr><tr><td>McAfee</td><td>McSACore.exe</td></tr><tr><td>MS Firewall Client</td><td>FwcAgent.exe</td></tr><tr><td>MS Firewall Client</td><td>FwcMgmt.exe</td></tr><tr><td>Lavasoft Ad-Aware</td><td>AAWService.exe</td></tr><tr><td>Lavasoft Ad-Aware</td><td>AAWWSC.exe</td></tr><tr><td>Lavasoft Ad-Aware</td><td>AAWTray.exe</td></tr><tr><td>OnlineArmor firewall</td><td>oasrv.exe</td></tr><tr><td>Outpost firewall</td><td>op_mon.exe</td></tr><tr><td>Panda</td><td>avengine.exe</td></tr><tr><td>Panda</td><td>PavFnSvr.exe</td></tr><tr><td>Panda</td><td>PavPrSvr.exe</td></tr><tr><td>Panda</td><td>psksvc.exe</td></tr><tr><td>Panda firewall</td><td>pshost.exe</td></tr><tr><td>Panda firewall</td><td>ppfw.exe</td></tr><tr><td>Rapport</td><td>rapportservice.exe</td></tr><tr><td>Rapport</td><td>rapportmgmtservice.exe</td></tr><tr><td>PC Cleaner</td><td>PCCleaners.exe</td></tr><tr><td>Prevx</td><td>prevx.exe</td></tr><tr><td>PC Tools</td><td>SSDMonitor.exe</td></tr><tr><td>Sophos</td><td>ALsvc.exe</td></tr><tr><td>Sophos</td><td>almon.exe</td></tr><tr><td>Sophos</td><td>ManagementAgentNT.exe</td></tr><tr><td>Sophos</td><td>RouterNT.exe</td></tr><tr><td>Sophos</td><td>SAVAdminService.exe</td></tr><tr><td>Sophos</td><td>SavService.exe</td></tr><tr><td>Sophos</td><td>swi_service.exe</td></tr><tr><td>SoftPerfect Personal Firewall</td><td>fw.exe</td></tr><tr><td>Spyware Doctor</td><td>FGuard.exe</td></tr><tr><td>Spyware Doctor</td><td>pctsGui.exe</td></tr><tr><td>SpybotSD</td><td>TeaTimer.exe</td></tr><tr><td>SUPERAntiSpyware</td><td>SUPERAntiSpyware.exe</td></tr><tr><td>Symantec</td><td>ccApp.exe</td></tr><tr><td>Symantec</td><td>ccSvcHst.exe</td></tr><tr><td>Symantec</td><td>Rtvscan.exe</td></tr><tr><td>Symantec</td><td>DefWatch.exe</td></tr><tr><td>Symantec</td><td>ccEvtMgr.exe</td></tr><tr><td>Symantec</td><td>ccSetMgr.exe</td></tr><tr><td>Symantec</td><td>ccSvcHst.exe</td></tr><tr><td>Symantec</td><td>DoScan.exe</td></tr><tr><td>Symantec</td><td>SPBBCSvc.exe</td></tr><tr><td>Symantec</td><td>SmcGui.exe</td></tr><tr><td>Trend Micro</td><td>coreFrameworkHost.exe</td></tr><tr><td>Trend Micro</td><td>PccNTMon.exe</td></tr><tr><td>QuickHeal</td><td>onlinent.exe</td></tr><tr><td>QuickHeal</td><td>SCANMSG.exe</td></tr><tr><td>Webroot</td><td>WRConsumerService.exe</td></tr><tr><td>Windows Defender</td><td>MSASCui.exe</td></tr><tr><td>Windows Defender</td><td>MsMpEng.exe</td></tr><tr><td>Virgin Media</td><td>Fws.exe</td></tr><tr><td>Virgin Media</td><td>RpsSecurityAwareR.exe</td></tr><tr><td>Virgin Media</td><td>ServicepointService.exe</td></tr><tr><td>Virgin Media</td><td>ServiceManager.exe</td></tr><tr><td>Virgin Media</td><td>AVGIDSAgent.exe</td></tr><tr><td>ZoneAlarm</td><td>vsmon.exe</td></tr><tr><td>ZoneAlarm</td><td>IswSvc.exe</td></tr></tbody></table></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3216117"></a>Appendix 2: Recognized XML tag for configuration file</h2></div></div></div><div class="informaltable"><table border="1"><colgroup><col /><col /><col /><col /><col /></colgroup><thead><tr><th align="center">&nbsp;</th><th align="center">1.2</th><th align="center">1.4</th><th align="center">1.6</th><th align="center">1.9</th></tr></thead><tbody><tr><td>/hijackcfg/vnc</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&nbsp;</td></tr><tr><td>/hijackcfg/urls_server/url_server</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/url_update</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/upload_file</td><td>&nbsp;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/uninstall</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/timer_ping</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/timer_inj_log</td><td>&#x2714;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>/hijackcfg/timer_err_log</td><td>&#x2714;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>/hijackcfg/timer_log</td><td>&nbsp;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/timer_dll_cfg</td><td>&#x2714;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>/hijackcfg/timer_cfg</td><td>&nbsp;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/solfiles value=%s</td><td>&#x2714;</td><td>&#x2714;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>/hijackcfg/solfiles</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/oskill</td><td>&#x2714;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>/hijackcfg/plugins/plugin</td><td>&nbsp;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/modules</td><td>&nbsp;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/httpinject</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/grabemails</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/execute</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/dll_load/dll</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/cookies value=%s</td><td>&#x2714;</td><td>&#x2714;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>/hijackcfg/cookies</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/certfiles</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&nbsp;</td></tr><tr><td>/hijackcfg/botnet</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/hijackcfg/backconnect</td><td>&#x2714;</td><td>&#x2714;</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>/hijackcfg/archiver</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/unit</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/inject</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/end</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/data</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr><tr><td>/begin</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td><td>&#x2714;</td></tr></tbody></table></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-PunTan.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: The pluginer - Caphaw&url=https://www.virusbulletin.com/virusbulletin/2015/02/paper-pluginer-caphaw"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2015/02/paper-pluginer-caphaw'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2015/02/paper-pluginer-caphaw&title=VB2014 paper: The pluginer - Caphaw"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2015/02/paper-pluginer-caphaw&t=VB2014 paper: The pluginer - Caphaw"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2015/02/paper-pluginer-caphaw"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p>Â </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">Â©1989-2022 Virus Bulletin.Â Â Â Â Â Â Â Â <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>Â Â Â Â Â Â Â Â <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>Â Â Â Â Â Â Â Â <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>