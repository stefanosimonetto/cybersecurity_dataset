<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2016 paper: Great crypto failures</title>
<meta name="description" content="This VB2016 paper surveys selected recent case studies of unfortunate cryptographic implementations in malware. When considered together, these examples illustrate a picture of design anti-patterns that is either worrying or encouraging, depending on one’s point of view. Malware authors compose primitives based on gut feeling and superstition; jump with eagerness at opportunities to poorly reinvent the wheel; jump with equal eagerness at opportunities to use ready-made code that perfectly solves the wrong problem; and, ever‑pragmatic, take care to misinform their audience about how their software works, to dissuade anyone from taking too close a look." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 5141;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1>VB2016 paper: Great crypto failures</h1>
<h3>Ben Herzog &amp; Yaniv Balmas</h3>
<p>Check Point Software Technologies, Israel</p>
<p><em>Copyright © 2016 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-9215" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="500">Table of contents</div><div id="ccm-remo-expand-content-9215" class="ccm-remo-expand-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /><a class="toc-level2" href="#h2-introduction">Introduction</a><br /><a class="toc-level2" href="#h2-voodoo-programming">Voodoo programming</a><br /><a class="toc-level3" href="#h3-zeus">Zeus</a><br /><a class="toc-level3" href="#h3-linuxencoder">Linux.Encoder</a><br /><a class="toc-level2" href="#h2-cargo-cult-programming-aka-the-ctrlcv-method">Cargo cult programming, a.k.a. the Ctrl+C+V method</a><br /><a class="toc-level3" href="#h3-cryptodefense">CryptoDefense</a><br /><a class="toc-level2" href="#h2-reinventing-the-square-wheel">Reinventing the square wheel</a><br /><a class="toc-level3" href="#h3-petya">Petya</a><br /><a class="toc-level3" href="#h3-nuclear">Nuclear</a><br /><a class="toc-level3" href="#h3-dircrypt">DirCrypt</a><br /><a class="toc-level2" href="#h2-what-you-see-is-not-what-you-get">What you see is not what you get</a><br /><a class="toc-level3" href="#h3-nemucod">Nemucod</a><br /><a class="toc-level3" href="#h3-poshcoder">Poshcoder</a><br /><a class="toc-level2" href="#h2-takeaway-amp-conclusion">Takeaway &amp; conclusion</a><br /><a class="toc-level2" href="#h2-references">References</a></p>
<p> </p></div></div><h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>In this work, we survey selected recent case studies of unfortunate cryptographic implementations in malware. When considered together, these examples illustrate a picture of design anti-patterns that is either worrying or encouraging, depending on one's point of view. Malware authors compose primitives based on gut feeling and superstition; jump with eagerness at opportunities to poorly reinvent the wheel; jump with equal eagerness at opportunities to use ready-made code that perfectly solves the wrong problem; and, ever‑pragmatic, take care to misinform their audience about how their software works, to dissuade anyone from taking too close a look.</p>
<p>We draw conclusions from these case studies that might be of use to those of us on the wrong side of the malware barrel – victims and analysts.</p>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>Cryptography has become part and parcel of malware. It is used to subject victims to extortion, perform covert communications and achieve stealth. But just as it is essential, cryptography is easy to misimplement. Even the most experienced and astute of developers are wont to be tripped up by the pitfalls of cryptography.</p>
<p>Most malware authors operate in a unique environment and are subject to unique incentives. They are as cynical about code quality as the most cynical developing houses: they are on a tight schedule, they have no customers to answer to, and they only care about quality design or implementation insofar as either of these things affects their immediate bottom line. Their creations survive by being stealthy, unique and simple; therefore, they would rather not borrow an existing solution to a large problem if they can help it.</p>
<p>This cocktail of constraints pushes malware authors into committing a class of errors that one would be hard pressed to find in legitimate software of any repute. These are not padding oracle vulnerabilities or goto-fails; these are basic misunderstandings of how to use cryptographic tools properly, which at best broadcast 'I have no idea what I am doing', and at worst cripple the malware catastrophically such that it does not actually do what it set out to do.</p>
<p>It is difficult to give this class of errors a name or a rigid definition. We have found that it is useful to look at them through the lens of design anti-patterns – specifically those that stem from the incentives to which most malware authors bow: a fuzzy understanding of the details, a great rush, and the temptation (sometimes necessity) to Do It Yourself.</p>
<h2><a class="chapter" name="h2-voodoo-programming"></a>Voodoo programming</h2>
<p>The<em> Jargon File</em> [<a href="#ref1">1</a>] gives the following definition of 'voodoo programming':</p>
<p style="padding-left: 30px;">'<em>The use, by guess or cookbook, of an obscure or hairy system, feature, or algorithm that one does not truly understand. The implication is that the technique may not work, and if it doesn't, one will never know why.</em>'</p>
<p>Voodoo programming is something beyond a mere dodgy implementation choice. It is an implementation choice that betrays a deep confusion about the functionality being invoked – what it is, what it does, and why it might fail. We describe two examples of malware we have encountered that, we believe, contain cryptographic code that falls under this category.</p>
<h3><a class="chapter" name="h3-zeus"></a>Zeus</h3>
<p>Zeus is a banking trojan that originated in Russia in 2007. It is estimated to have infected millions of machines and caused tens of millions of dollars in damages in the US alone [<a href="#ref2">2</a>]. In 2011, the source code of Zeus was leaked [<a href="#ref3">3</a>], which enabled a more thorough look through Zeus' internal functionality.</p>
<p>One of the major aspects of Zeus is its dependency on communication with a working C&amp;C server. Much of the malware's functionality is configurable dynamically through this server, and Zeus periodically contacts it for further orders. The authors chose to encrypt all such control traffic with RC4, a popular stream cipher.</p>
<p>The security of RC4 is the subject of some debate, which we will not cover here. The bottom line is that, for the purposes required by the authors here, RC4 definitely ought to be secure enough, barring some egregious design error. However, the authors of Zeus did not share this feeling, which is why they introduced their own tweak: after the traffic is encrypted using RC4, every byte is modified by XORing it with the next byte to produce the final ciphertext [<a href="#ref4">4</a>].</p>
<p>It is not difficult to show that this tweaked variant of RC4 is exactly as secure as plain, vanilla RC4. The following Python script converts tweaked RC4 ciphertext to equivalent vanilla RC4 ciphertext:</p>
<pre>chrxor = lambda c1, c2: chr(ord(c1)^ord(c2))<br />def untweakRC4(buf):<br />  bytes = []<br />  while(buf):<br />     bytes = [buf[-1]] + bytes<br />     buf = buf[:-1]<br />     try: bytes[0] = chrxor(bytes[0],bytes[1])<br />     except IndexError: pass #first byte<br />  return "".join(bytes)</pre>
<p>The authors either did not realize this, or did realize this, and were aiming for security by obscurity. Security by obscurity is not a recommended approach, least of all here, where there is plenty of encrypted traffic to analyse and plenty of Zeus samples floating around that can be reverse engineered.</p>
<h3><a class="chapter" name="h3-linuxencoder"></a>Linux.Encoder</h3>
<p>The Linux.Encoder ransomware's initial claim to infamy lay in using rand() with the current timestamp as a random seed. This turned out to be insecure; the timestamp was invariably close to the victim file's 'last modified' timestamp, which enabled an efficient attack against Linux.Encoder encryption, as pointed out by Caragea [<a href="#ref5">5</a>].</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/f8c2df2e81536e91e64575d118d45f48_f993.jpg" alt="crypto-failures-1.jpg" width="660" height="355" /></p>
<p class="centered-caption">Figure 1: Twitter reacts to the first version of Linux.Encoder.</p>
<p>Linux.Encoder's authors were subsequently met with a hail of ridicule on <em>Twitter</em>, and decided to go back to the drawing board. One of the modifications they eventually made to their malware involved hashing the timestamp eight times and using the result as an AES key [<a href="#ref6">6</a>].</p>
<p>Using a hash function eight consecutive times on an input shows a deep misunderstanding of what hash functions are. An ideal hash function is deterministic, easy to compute and difficult to invert. An ideal hash function, composed with itself, does not yield a better hash function, but rather an odd creation that has weaker security properties and is marginally less efficient to compute. The details will vary depending on the exact function used, but in all probability, they will not be good news.</p>
<p>It is true that hash functions used in the real world are not ideal mathematical abstractions, but their faults and vulnerabilities have not been shown to improve when composed with themselves, and it is not clear where the magic number eight came from.</p>
<p>Were the authors truly worried that their chosen hash function was not secure enough? We will probably never know; in the actual implementation, they neglected to choose a hash function at all. As a result, all eight calls to the hashing logic did not, in fact, do anything.</p>
<h2><a class="chapter" name="h2-cargo-cult-programming-aka-the-ctrlcv-method"></a>Cargo cult programming, a.k.a. the Ctrl+C+V method</h2>
<p>The late physicist Richard Feynman is known for many things, one of which is the popularization of the term 'cargo cult science' [<a href="#ref7">7</a>] – activity that superficially emulates science without emulating the core principles that make science work. From this neologism, others have derived 'cargo cult programming' – programming that emulates solutions to problems without understanding why, or how, these solutions work. This <em>modus operandi</em> is also, and more commonly, known as 'copying and pasting from Stack Overflow'.</p>
<p>Emulating a solution that is known to work is a viable strategy. It might, however, turn out to be the solution to the wrong problem. Without an understanding of what the solution does, one cannot really make the distinction, and might end up using code that performs <em>almost</em> what one had in mind, but not quite. The consequences can be dire, as we will see in the example below.</p>
<h3><a class="chapter" name="h3-cryptodefense"></a>CryptoDefense</h3>
<p>The recent flood of ransomware was preceded by a slow drip of copycats that goes back years, to the first pioneers who braved the unknown and copied what CryptoLocker did. One of the 'early adopters' to have been a part of this trend was CryptoDefense, a malware effort inspired by CryptoLocker, which surfaced around February 2014 [<a href="#ref8">8</a>].</p>
<p>On the face of it, CryptoDefense did everything by the book: RSA-2048 encryption, payment via Bitcoin, communication with C&amp;C servers via Tor – where it matters, the authors put in the effort. One front on which they did not put in the effort, however, was re-implementing RSA. Instead, they reasonably opted to use a low-level cryptographic API offered by <em>Windows</em> OS.</p>
<p>To be more specific, they set out to acquire <em>Windows</em>' cryptographic services by calling the CryptAcquireContext API function. A typical developer would just use one of the many wrapper functions available for this API function, but malware authors are not typical developers, and one imagines they soon found themselves reading the <em>MSDN</em> documentation for CryptAcquireContext. The documentation [<a href="#ref9">9</a>] is typically exhausting, but thankfully at the end of it lies the holy grail – a fully formed call to CryptAcquireContext that <em>just works</em>, and can be copied. It goes as follows:</p>
<pre class="prettyprint">CryptAcquireContext(<br />   &amp;hCryptProv, // handle to the CSP<br />   UserName, // container name<br />   NULL, // use the default provider<br />   PROV_RSA_FULL, // provider type<br />   0); // flag values</pre>
<p>And now all is right with the world, and the malware can invoke RSA to its heart's content. This code, or at least something suspiciously like it, appears in CryptoDefense verbatim. There is only one problem, though – which was noted first by researchers at <em>Emsisoft</em> [<a href="#ref10">10</a>], and which makes itself apparent to any soul brave enough to actually read through all of the documentation. It concerns a certain option that can be set in the flags variable:</p>
<table border="0">
<tbody>
<tr>
<td valign="top">CRYPT_VERIFYCONTEXT</td>
<td>For file-based CSPs, when this flag is set, the pszContainer parameter must be set to null. The application has no access to the persisted private keys of public/private key pairs. When this flag is set, temporary public/private key pairs can be created, but they are not persisted.</td>
</tr>
</tbody>
</table>
<p> </p>
<p>One might conclude that, if this option is not set, the application has access to the persisted private keys of public/private key pairs, which are persisted. Or, in other words, the private key is kept in the local key-store. A justifiable choice for some applications, but clearly not something the authors of CryptoDefense would have knowingly endorsed; their extortion pivot – the private key – was kept safely in the victim system, ready to be found by anyone who knew where to look. By taking advantage of this little misstep, <em>Emsisoft</em> researchers were able to reach out to victims and help them decrypt their files for free.</p>
<h2><a class="chapter" name="h2-reinventing-the-square-wheel"></a>Reinventing the square wheel</h2>
<p>The adage goes, 'if you find yourself typing the letters A E S, then you are doing it wrong'. But malware operates under a set of constraints very unlike those relevant to most other software. If Joe Developer finds an open source project that solves a problem for him, he can happily lean on the project and save himself needless work; in contrast, if James Malware-Author finds himself in a similar situation, the way forward for him is not so simple. Compiling software with statically linked third-party code is a minor yet real hassle, compared to the cowboy programming typical of malware development. The extra code will bloat the executable size, and under certain circumstances, may well act as a giant neon sign announcing the malware's intent to the world.</p>
<p>Given the above, malware authors tend to improvise. If a solution to a problem cannot be copied and pasted from anywhere, but can be hacked together in 100 lines of code, a malware author will choose simply to hack together the 100 lines of code rather than comb the web for an existing solution and link against it.</p>
<p>When one sets out to reinvent the wheel, one takes upon oneself the risk of reinventing the wheel poorly. We list three examples of malware projects that ran head-first into that risk.</p>
<h3><a class="chapter" name="h3-petya"></a>Petya</h3>
<p>Petya, a member of the recent tidal wave of ransomware, made headlines due to its ability to encrypt the internal data structures of the victim's hard drive (such as the Master Boot Record and the Master File Tables). These abilities were pioneered by Petya; no other ransomware before it boasted this feature. Generally speaking, the Petya authors were tired of the same old ransomware routines and wanted to do something fresh and exciting, which is why – faced with the choice of encryption algorithm – they went with the lesser-known stream cipher, Salsa20 [<a href="#ref11">11</a>].</p>
<p>Salsa20 is thought to be more resistant against scary NSA-level attacks than its cousin stream cipher RC4, but that's really neither here nor there; the prototypical victim of ransomware is Aunt Alice and her precious vacation photos, and Alice does not work for the NSA (or at least her husband, Bob, believes as much).</p>
<p>Given that it is a lesser-known cipher, public resources detailing how to implement Salsa20 are less obviously abundant. The top result on programmer collaboration site <em>Stack Overflow</em> regarding Salsa20 involves a wide‑eyed newcomer asking how to implement that algorithm in C++, and a horrified regular contributor responding:</p>
<p style="padding-left: 30px;">'<em>If you are going to use Salsa20 in real code and you are asking questions like this, you probably want to use the NaCl library with nice friendly C++ wrappers.</em>'</p>
<p>Having no patience for NaCl and with juicy ransomware dollars within their sight, the authors of Petya bravely rushed in where angels fear to tread and went at it – reimplementing Salsa20 from scratch. It was a difficult mission, the odds were against them, there were points at which all must have seemed lost. Naturally, given the above, they failed.</p>
<p>To understand how, we must first delve a little into Salsa20 – specifically its keystream. It is structured as follows:</p>
<ol>
<li>Sigma (a string with a constant value: 'expand 32‑byte k')</li>
<li>First 16 bytes of the user-controlled password</li>
<li>The IV (nonce)</li>
<li>64-bit stream position</li>
<li>Last 16 bytes of the user-controlled password</li>
</ol>
<p>On the face of it, this should be completely straightforward to implement. Yet, given the example set by Petya, it begins to emerge that if you believe anything in cryptography is completely straightforward to implement, either you don't understand cryptography, or it doesn't understand you. The Petya implementation of this apparently straightforward logic had no fewer than three distinct major flaws that made possible an attack on the resulting cipher.</p>
<p>The first flaw was the use of a 32-bit integer type for the 64-bit stream position key-stream value, which forces the high part of the stream position buffer to have the predictable value of 0.</p>
<p>The second flaw was in the implementation of the ROTL (rotate left) function:</p>
<pre class="prettyprint">static unit32_t rotl(uint32_t value, int shift) {<br />  return (value &lt;&lt; shift) | (value &gt;&gt; (32 - shift));<br />}</pre>
<p>This re-implementation is nearly identical to the original, except for one difference – for an unknown reason, the authors chose to use 16-bit parameters instead of the original 32-bit.</p>
<p>The third flaw is located in the Salsa20 core hashing function responsible for producing the key stream. The original implementation receives a 512-bit input key buffer which is split into two internal 256-bit buffers:</p>
<pre class="prettyprint">static void s20_hash(uint8_t seq[64]) {<br />  int i;<br />  uint32_t x[16]; // &lt;&lt;&lt; 32-bit vectors<br />  unit32_t z[16]; // &lt;&lt;&lt; 32-bit vectors<br /><br />  for (i=0; i&lt;16; ++i)<br />     x[i] = z[i] = s20_littleendian(seq + (4 * i));<br /><br />  for (i=0; i&lt;10; ++i)<br />     s20_doubleround(z)<br /><br />  for (i=0; i&lt;16; ++i) {<br />     z[i] += x[i];<br />     s20_rev_littleendian(seq + (4 * i), z[i]);<br />  }<br />}</pre>
<p>Petya's implementation uses the same code but the internal buffers are – yes, you guessed it – wrongly downsized to 16-bit values:</p>
<pre class="prettyprint">static void s20_hash(uint8_t seq[64]) {<br />  int i;<br />  uint16_t x[16]; // &lt;&lt;&lt; 32-bit vectors<br />  unit16_t z[16]; // &lt;&lt;&lt; 32-bit vectors<br /><br />  for (i=0; i&lt;16; ++i)<br />     x[i] = z[i] = s20_littleendian(seq + (4 * i));<br /><br />  for (i=0; i&lt;10; ++i)<br />     s20_doubleround(z)<br /><br />  for (i=0; i&lt;16; ++i) {<br />     z[i] += x[i];<br />     s20_rev_littleendian(seq + (4 * i), z[i]);<br />  }<br />}</pre>
<p>Thanks to these three flaws, Petya generates a 512-bit key containing 256 bits of constant and predictable values.</p>
<p>When your implementation of a cipher cuts its effective key size by half, and the required time for a break by 256 orders of magnitude, it's time to go and sit in the corner and think about what you've done.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/7714/7808/2765/crypto-failures-2.jpg" alt="crypto-failures-2.jpg" width="710" height="98" /></p>
<p class="centered-caption">Figure 2: Illustration of reduced-entropy key. Constant, predictable values of the key are coloured grey.</p>
<h3><a class="chapter" name="h3-nuclear"></a>Nuclear</h3>
<p>From this document one might get the impression that ransomware instances are the sole perpetrators of crypto failures in malware. Lest the reader leave with this false impression, we turn our attention to one of the most widely distributed exploit kits of recent times: Nuclear.</p>
<p>Nuclear has been around since as early as 2009, and has constantly evolved to keep up with developments in the exciting field of exploit kits [<a href="#ref12">12</a>]. Following in the footsteps of Angler and others, it eventually began obfuscating its exploit delivery by using Diffie-Hellman key exchange to encrypt information passed to exploits during execution [<a href="#ref13">13</a>].</p>
<p>The variables needed for the Diffie-Hellman key exchange are sent by the exploit code to the server as a JSON file containing strings of hexdigits, as shown in <a href="#figure3">Figure 3</a>. <a name="figure3"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/1314/7808/2822/crypto-failures-3.jpg" alt="crypto-failures-3.jpg" width="845" height="220" /><span class="centered-caption">Figure 3: JSON in transit.</span></p>
<p>This JSON is parsed and each value is passed as a parameter to the getGmp() function:</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/002294462d9e69b382357663857bf8cc_f996.jpg" alt="crypto-failures-4.jpg" width="390" height="179" /></p>
<p class="centered-caption">Figure 4: Parameters being passed to getGmp function.</p>
<p>The getGmp() function handles the parameters using base64 decoding:</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/499ac8909ed92ecc45eeaa79f957145e_f997.jpg" alt="crypto-failures-5.jpg" width="410" height="85" /></p>
<p class="centered-caption">Figure 5: Base64 decoding takes place.</p>
<p>And everything is in order, except for one small technical caveat, which is that a string of hexdigits and base64 encoding are not the same thing.</p>
<p>getGmp() sees the stream of hexdigits, attempts to decode it as a base64 string, fails, shrugs, and returns False. The Nuclear server is then tasked with using this value as the infected client's public key. For a fleeting moment it stops and thinks, 'huh, false? How is that a key?'. The moment passes quickly. False, the server recalls, is just another name for the integer. Having realized this, the server then happily proceeds to follow the DH scheme as scheduled, and the same goes for the client. Thus, they successfully agree on a secret shared key:</p>
<p><em>A<sup>b</sup> = 0<sup>b</sup> = 0 = 0<sup>a</sup> = g<sup>ba</sup> =B<sup>a</sup></em></p>
<p>All future communication between the client and the server is encrypted using the secret key, 0.</p>
<h3><a class="chapter" name="h3-dircrypt"></a>DirCrypt</h3>
<p>Like CryptoDefense, DirCrypt is an early contender that sought to ride the ransomware wave during 2014, when it was just getting started. Unlike CryptoDefense, DirCrypt does not check all the boxes for how to perform extortion 'properly'; rather, it makes its own bold artistic decisions, some of which are decent while others are less so.</p>
<p>DirCrypt adopts a hybrid approach to encrypting victim files. The first 1,024 bytes are encrypted using RSA, and the rest are encrypted using the ever-popular RC4, which is a relative breeze to implement and therefore often finds its way into malware.</p>
<p>Unfortunately for the authors of DirCrypt, a system does not become secure just because you're using RC4. That cipher is, as mentioned earlier, secure enough for the purposes of presenting a total stumbling block to the typical malware analyst with only traffic to look at, but this only applies if the cipher is operated correctly. In the case of DirCrypt, the encryption machinery is invoked from scratch, using the same key, when encrypting each file [<a href="#ref14">14</a>]. This is a classical key-reuse vulnerability, and it exposes the encrypted files to trivial known-plaintext attacks, and even some known-ciphertext attacks (in particular see [<a href="#ref15">15</a>]).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/16df2de143f6a26a0da7fc96cf946928_f998.jpg" alt="crypto-failures-6.jpg" width="600" height="464" /></p>
<p class="centered-caption">Figure 6: DirCrypt stores the RC4 key in the victim file.</p>
<p>What makes the story of DirCrypt truly extraordinary, however, is not the key-reuse. That is an understandable mistake; to avoid it, one must have some elementary knowledge of how stream ciphers work and how they can fail, and sometimes you just don't know what you don't know. The truly astounding bit with DirCrypt is the design choice for where to store the RC4 key. The authors opted to keep the key appended to the encrypted file, where it is directly accessible to the victim. It thus became trivially possible to recover bytes 1024 and on for every encrypted file. For some files, with long enough and predictable enough headers, it became possible to recover the entire file this way.</p>
<h2><a class="chapter" name="h2-what-you-see-is-not-what-you-get"></a>What you see is not what you get</h2>
<p>In the game of malware authorship it is often the case that the winning move is to bluff. A malware author can work tirelessly to fortify their creation using the most impeccable cryptographic design and implementation; or, for a fraction of the effort, they can intimidate victims into believing that they have done so.</p>
<p>We present two examples of malware outright lying to victims, handing out baseless threats and promises in lieu of solid code to actually back up those threats and promises.</p>
<h3><a class="chapter" name="h3-nemucod"></a>Nemucod</h3>
<p>Nemucod is a JavaScript trojan, spread mainly through spam email. Originally a mere dropper, in early 2016 it decided to jump onto the now-speeding ransomware bandwagon. Users unfortunate enough to run the new and improved Nemucod soon faced a triumphant announcement that their files had been encrypted with RSA-1024 encryption and that they had no choice but to pay up.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/6f80858689c1f0985e0daa2dafb4792b_f999.jpg" alt="crypto-failures-7.jpg" width="740" height="672" /></p>
<p class="centered-caption">Figure 7: Nemucod ransom note.</p>
<p>However, this triumphant announcement is, in fact, not entirely true. First of all, it is displayed after the necessary components for encryption have been downloaded from the campaign's C&amp;C server, but before even a single file has been encrypted. If a victim's AV engine is vigilant enough, or if the downloaded encryption machinery meets with some other unfortunate accident, the encryption routine proceeds to fail hilariously: all 'rename file' calls that follow go through successfully, but all the 'encrypt' calls fail. The result is confused victims who have been quoted as saying, 'all this ransomware does is change your file extensions'.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/6e5223dfab37cedb5fc264b990a3d05a_f1000.jpg" alt="crypto-failures-8.jpg" width="380" height="448" /></p>
<p class="centered-caption">Figure 8: Nemucod encryption logic. Not pictured: RSA-1024.</p>
<p>Of course, most of the time, the encryption will go through – but not the RSA-1024 encryption promised by the menacing ransom note. Rather, Nemucod encrypts files using a simple rotating XOR cipher. This is basically one step of sophistication up from XORing every byte with 0x55. As far as ransomware sophistication goes, Nemucod sets the gold standard for minimal effort. It trusts that this minimal effort should be enough, and that would-be adversaries will become light-headed and weak at the knees the moment they hear the phrase 'RSA-1024'.</p>
<h3><a class="chapter" name="h3-poshcoder"></a>Poshcoder</h3>
<p>Poshcoder is yet another member of the first wave of CryptoLocker-act-alikes that hit the malware scene during 2014. It would be another faceless name in the crowd of ransomware but for several unusual features – first among which is the fact that it is written in <em>Windows</em> PowerShell.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/4814/7808/3257/crypto-failures-9.jpg" alt="crypto-failures-9.jpg" width="845" height="210" /></p>
<p class="centered-caption">Figure 9: Poshcoder ransom note.</p>
<p>Poshcoder, like Nemucod, makes empty threats of strong asymmetric encryption [<a href="#ref16">16</a>]. In fact, its fictional strong encryption is notably more heavy-duty than Nemucod's, as its various iterations claim to use RSA-2048 and even RSA-4096. The actual encryption being delivered is symmetric: victim files are encrypted using AES, not RSA. This is significant in itself, as symmetric ciphers are open to a number of attacks to which asymmetric ciphers are typically immune (all of which broadly fall under the headline, 'you had the decryption key at one point, all that's left is to find a surviving record of it'). Further probing into Poshcoder's encryption mechanism reveals the following:</p>
<pre>$PASSWORD = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(R2hjalJc[..]))<br />$SALT = [Text.Encoding]::UTF8.GetBytes("SqfmPRgx[..])<br />[..]<br />$RijndaelManaged_Var.Key = (new-Object Security.Cryptography.Rfc2898DriveBytes $PASSWORD, $SALT, 5).GetBytes(32)<br />[..]<br />$RijndalManaged_Var.Padding="Zeroes"<br />$RijndaelManaged_Var.Mode="CBC"</pre>
<p>Rather than the RSA-4096 implementation it promises, Poshcoder actually encrypts victim files with AES using a fixed key. Eventually, the authors seem to have been alerted to the fact that this is not the best practice (if only by lost revenue). In response, they began routinely modifying the hard-coded key included with the PowerShell script. This may not be the best solution; when resorting to ransomware based on symmetric encryption, an author is betting the success of their scheme on the victim never recovering a record of their copy of the key. In this case, such a copy might well be available to download directly from the campaign's C&amp;C server.</p>
<p>As we mentioned, malware not only makes empty cryptographic threats, but also empty cryptographic promises. Poshcoder, like the rest of its breed, posits a deal to its victim: pay up, and you can have your files back by the end of the hour. Unfortunately, Poshcoder's implementation of that functionality is not quite on the mark, either. A look into the encryption mechanism yields the following:</p>
<pre>if($binReader.BaseStream.Length -lt 42871) {<br />  $binReader_flen = $binReader.BaseStream.Length<br />} else {<br />  $binReader_flen = 42871<br />}<br />[..]<br />$binWriter.Write($memStream_Array,0,$memStream_Array.Length)<br />[..]</pre>
<p>Where binWriter writes to the victim file and memStream holds the AES-encryption of the first binReader_flen bytes.</p>
<p>First of all, we have here a short callback to the 'voodoo programming' header, above. As the author of the <em>Malware Clipboard</em> blog put it:</p>
<p style="padding-left: 30px;">'<em>I would almost pay the ransom value just to know why the author chose this arbitrary seeming value of 42,871 bytes.</em>'</p>
<p>The more pressing issue here, though, is that this encryption logic irreversibly breaks any files longer than that. When such a file is given as input to this code, its first 42,871 bytes are encrypted; due to the zero padding, the length of the resulting ciphertext is not actually 42,871 bytes, but the closest larger multiple of 128 (AES block length) – which is 42,880. These 42,880 bytes overwrite the first 42,880 bytes of the victim file, and as a result, bytes 42871–42879 of the original file are lost forever.</p>
<p>For the missing nine letters in your interminable teenage diary, this error is a mere nuisance. For the missing nine bytes in the middle of the ZIP archive containing a backup of your financial records for the last three years, it would probably be more of an issue. The CRC32 checksum has failed; the archive is corrupted; have a nice day.</p>
<h2><a class="chapter" name="h2-takeaway-amp-conclusion"></a>Takeaway &amp; conclusion</h2>
<p>Many malware authors know that cryptographic tools are useful, and will achieve things that there are no other ways to achieve. All the same, evidence heavily suggests that most malware authors view those tools as wondrous black boxes of black magic, and figure they should be content if they can get the encryption code to run at all.</p>
<p>As a result, the cryptographic facilities of malware can offer pleasant surprises – if you know where to look. A solid forensic investigation can sway the outcome of a nasty ransomware incident, allow access to traffic that malicious actors would have preferred to stay secret, and, generally, allow subversion of whatever original functionality the cryptography was invoked for in the first place.</p>
<p>One day, malware authors will collectively figure out how to use encryption properly – and when they do, it's going to be a completely different playing field. Until that day, opportunities will abound – and malware analysts and victims had better keep their eyes open and their ears perked for these opportunities, as long as they are still here.</p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a><span class="anchor">[1] Raymond, E. The Jargon File. 2003. <a href="http://catb.org/jargon/html/V/voodoo-programming.html" target="_blank">http://catb.org/jargon/html/V/voodoo-programming.html</a>.</span></p>
<p><a class=" anchor" name="ref2"></a><span class="anchor">[2] Finkle, J. Hackers steal U.S. government, corporate data from PCs. Reuters, 2007. <a href="https://www.reuters.com/article/us-internet-attack-idUSN1638118020070717" target="_blank">ht</a></span><a href="https://www.reuters.com/article/us-internet-attack-idUSN1638118020070717" target="_blank">tp://www.reuters.com/article/us-internet-attack-idUSN1638118020070717</a>.</p>
<p><a class=" anchor" name="ref3"></a><span class="anchor">[3] Goodin, D. Source code leaked for pricey ZeuS crimeware kit. The Register, 2007.</span><br /><a href="https://www.theregister.co.uk/2011/05/10/zeus_crimeware_kit_leaked" target="_blank">http://www.theregister.co.uk/2011/05/10/zeus_crimeware_kit_leaked</a>/.</p>
<p><a class=" anchor" name="ref4"></a><span class="anchor">[4] Andriesse, D.; Bos, H. An analysis of the zeus peer-to-peer protocol. Technical report, VU University Amsterdam, 2013.</span></p>
<p><a class=" anchor" name="ref5"></a><span class="anchor">[5] Caragea, R. Linux.Encoder.0 technical writeup: a story about light-weight cryptanalysis and blind reverse engineering. BitDefender, 2015. </span><a href="http://labs.bitdefender.com/wp-content/plugins/download-monitor/download.php?id=1251711000741210279.pdf" target="_blank">http://labs.bitdefender.com/wp-content/plugins/download-monitor/download.php?id=1251711000741210279.pdf</a>.</p>
<p><a class=" anchor" name="ref6"></a><span class="anchor">[6] Caragea, R. Third Iteration of Linux Ransomware Still not Ready for Prime-Time. BitDefender, 2016.</span><br /><a href="https://labs.bitdefender.com/2016/01/third-iteration-of-linux-ransomware-still-not-ready-for-prime-time/" target="_blank">https://labs.bitdefender.com/2016/01/third-iteration-of-linux-ransomware-still-not-ready-for-prime-time/</a>.</p>
<p><a class=" anchor" name="ref7"></a><span class="anchor">[7] Feynman, R. P. Cargo cult science. The Art and Science of Analog Circuit Design, p. 55, 1998.</span></p>
<p><a class=" anchor" name="ref8"></a><span class="anchor">[8] CryptoDefense, the CryptoLocker Imitator, Makes Over 34,000 in One Month. Symantec, 2014.</span><br /><a href="https://www.symantec.com/connect/blogs/cryptodefense-cryptolocker-imitator-makes-over-34000-one-month" target="_blank">http://www.symantec.com/connect/blogs/cryptodefense-cryptolocker-imitator-makes-over-34000-one-month</a>.</p>
<p><a class=" anchor" name="ref9"></a><span class="anchor">[9] CryptAcquireContext Function. Microsoft Corporation. <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa379886(v=vs.85).aspx" target="_blank">https://msdn.microsoft.com/en-us/library/windows/desktop/aa379886(v=vs.85).aspx</a>.</span></p>
<p><a class=" anchor" name="ref10"></a><span class="anchor">[10] Wosar, F. CryptoDefense: The Story of Insecure Ransomware Keys and Self-Serving Bloggers. Emsisoft, 2014. <a href="http://blog.emsisoft.com/2014/04/04/cryptodefense-the-story-of-insecure-ransomware-keys-and-self-serving-bloggers/" target="_blank">http://blog.emsisoft.com/2014/04/04/cryptodefense-the-story-of-insecure-ransomware-keys-and-self-serving-bloggers/</a>.</span></p>
<p><a class=" anchor" name="ref11"></a><span class="anchor">[11] Trafimchuk, A. Decrypting the Petya Ransomware. Check Point Software Technologies, 2016 .</span><br /><a href="https://blog.checkpoint.com/2016/04/11/decrypting-the-petya-ransomware/" target="_blank">http://blog.checkpoint.com/2016/04/11/decrypting-the-petya-ransomware/</a>.</p>
<p><a class=" anchor" name="ref12"></a><span class="anchor">[12] Neagu, A. All You Need to Know About Nuclear Exploit Kit. Heimdal Security, 2015.</span><br /><a href="https://heimdalsecurity.com/blog/nuclear-exploit-kit-flash-player/" target="_blank">https://heimdalsecurity.com/blog/nuclear-exploit-kit-flash-player/</a>.</p>
<p><a class=" anchor" name="ref13"></a><span class="anchor">[13] Unraveling a Malware as a Service Infrastructure. Check Point Software Technologies, 2016.</span><br /><a href="https://blog.checkpoint.com/wp-content/uploads/2016/04/Inside-Nuclear-1-2.pdf" target="_blank">http://blog.checkpoint.com/wp-content/uploads/2016/04/Inside-Nuclear-1-2.pdf</a>.</p>
<p><a class=" anchor" name="ref14"></a><span class="anchor">[14] Artenstein, N. How (and Why) We Defeated DirCrypt. Check Point Software Technologies, 2014.</span><br /><a href="https://www.checkpoint.com/download/public-files/TCC_WP_Hacking_The_Hacker.pdf" target="_blank">https://www.checkpoint.com/download/public-files/TCC_WP_Hacking_The_Hacker.pdf</a>.</p>
<p><a class=" anchor" name="ref15"></a><span class="anchor">[15] Mason, J.; Watkins, K.; Eisner, J.; Stubblefield, A. A natural language approach to automated cryptanalysis of two-time pads. Proceedings of the 13th ACM conference on computer and communications security, 2006, pp. 235–244.</span></p>
<p><a class=" anchor" name="ref16"></a><span class="anchor">[16] A. (@CyberClues). How to Fail at Ransomware. Malware Clipboard, 2015. </span><a href="http://blog.malwareclipboard.com/2015/09/how-to-fail-at-ransomware.html" target="_blank">http://blog.malwareclipboard.com/2015/09/how-to-fail-at-ransomware.html</a>.</p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2016/VB2016-Herzog-Balmas.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2016 paper: Great crypto failures&url=https://www.virusbulletin.com/virusbulletin/2017/01/vb2016-paper-great-crypto-failures"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2017/01/vb2016-paper-great-crypto-failures'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2017/01/vb2016-paper-great-crypto-failures&title=VB2016 paper: Great crypto failures"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2017/01/vb2016-paper-great-crypto-failures&t=VB2016 paper: Great crypto failures"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2017/01/vb2016-paper-great-crypto-failures"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>