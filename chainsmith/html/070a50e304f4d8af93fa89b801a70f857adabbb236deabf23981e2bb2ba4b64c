<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2019 paper: A vine climbing over the Great Firewall: a long‑term attack against China</title>
<meta name="description" content="This paper discloses details of a little-known APT group, PoisonVine, and its long history of cyberespionage activities lasting 11 years. The group is keen on Chinese entities and aims to harvest political and military intelligence. The paper describes the group’s campaigns in detail, including malware, vulnerabilities, infrastructure and TTP. " />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 6658;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-vb2019-paper-vine-climbing-over-great-firewall-longterm-attack-against-china"></a>VB2019 paper: A vine climbing over the Great Firewall: a long‑term attack against China</h1>
<h3><a class="chapter" name="h3-lion-gu-amp-bowen-pan"></a>Lion Gu &amp; Bowen Pan</h3>
<p><em>Qi An Xin Threat Intelligence Center, China</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-15014" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-15014" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-introduction">Introduction</a><br /> <a class="toc-level2" href="#h2-11-years-campaigns">11 years of campaigns</a><br /> <a class="toc-level2" href="#h2-capabilities-and-cyber-weapons">Capabilities and cyber weapons</a><br /> <a class="toc-level2" href="#h2-rats">RATs</a><br /> <a class="toc-level3" href="#h3-poison-ivy">Poison Ivy</a><br /> <a class="toc-level3" href="#h3-zxshell">ZxShell</a><br /> <a class="toc-level3" href="#h3-kanbox-rat">Kanbox RAT</a><br /> <a class="toc-level3" href="#h3-custom-shellcode-loader">Custom shellcode loader</a><br /> <a class="toc-level2" href="#h2-vulnerabilities">Vulnerabilities</a><br /> <a class="toc-level3" href="#h3-cve-2012-0158">CVE-2012-0158</a><br /> <a class="toc-level3" href="#h3-cve-2014-6352">CVE-2014-6352</a><br /> <a class="toc-level3" href="#h3-cve-2017-8759">CVE-2017-8759</a><br /> <a class="toc-level2" href="#h2-infrastructures">Infrastructures</a><br /> <a class="toc-level3" href="#h3-dynamic-domain-services">Dynamic domain services</a><br /> <a class="toc-level3" href="#h3-disguised-legitimate-websites">Disguised legitimate websites</a><br /> <a class="toc-level3" href="#h3-cloud-storage">Cloud storage</a><br /> <a class="toc-level3" href="#h3-third-party-blogger">Third-party blogger</a><br /> <a class="toc-level2" href="#h2-tactics-techniques-and-procedures">Tactics, techniques and procedures</a><br /> <a class="toc-level2" href="#h2-data-exfiltration-and-impact">Data exfiltration and impact</a><br /> <a class="toc-level2" href="#h2-attribution-actor">Attribution of the actor</a><br /> <a class="toc-level2" href="#h2-conclusion">Conclusion</a><br /> <a class="toc-level2" href="#h2-acknowledgement">Acknowledgement</a><br /> <a class="toc-level2" href="#h2-references">References</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>In this paper we will disclose details of a little-known APT group, PoisonVine, and its long history of cyberespionage activities lasting 11 years. The group is keen on Chinese entities and aims to harvest political and military intelligence. Targets include government agencies, military personnel, research institutes and maritime agencies. The group has compromised multiple entities successfully and is still active in 2019. We will describe the group’s campaigns in detail, including malware, vulnerabilities, infrastructure and TTP. Furthermore, we will shed light on the impact of the attacks and on actor attribution, thanks to mistakes made by the group when all stolen data, including profiles of victim machines and sensitive documents, was saved to cloud storage at the data exfiltration stage.</p>
<p> </p>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>PoisonVine is a little-known Traditional Chinese-speaking APT group that was first disclosed in 2018 by <em>Qi An Xin Threat Intelligence Center</em> [<a href="#ref1">1</a>, <a href="#ref2">2</a>]. Starting in 2007, the PoisonVine group has carried out 11 years of cyberespionage campaigns against Chinese key units and departments, including national defence, government, science and technology, education and maritime agencies. The group mainly targets the military industry, Sino-US relations, cross-strait relations and ocean‑related fields.</p>
<p>The PoisonVine group obtained an established foothold by sending spear-phishing emails and delivering decoy documents, the contents of which were closely related to the target industry or field (for example, specific conference materials, research papers or announcements). They mainly used implants including publicly available RATs and custom trojans, such as ZxShell and Poison Ivy, and preferred to use cloud storage for the exfiltration of stolen information.</p>
<p>Because the group mainly uses Poison Ivy and cloud storage, making it similar to vines that can climb across a wall, we named it ‘PoisonVine’.</p>
<p> </p>
<h2><a class="chapter" name="h2-11-years-campaigns"></a>11 years of campaigns</h2>
<p>The earliest activities of PoisonVine were seen in December 2007, since when the group has been active for 11 years. We list some of the major events in the timeline below:</p>
<ul>
<li>In December 2007, the trojan associated with the group was first discovered. Marine-related fields (suspected to be related to a large shipping company) were involved.</li>
<li>In March 2008, a key laboratory (a scientific research institute) at a university in China was attacked.</li>
<li>In February 2009, attacks against the military industry began (involving a well-known military journal).</li>
<li>In October 2009, the trojan added a special method for avoiding detection via static scanning: API string reverse order. The method was used in most versions of the trojan and continued to be used until 2018.</li>
<li>In December 2011, the trojan added a special method to combat dynamic detection (error API parameters). Related methods were used in most versions of the trojan and continued to be used until 2015.</li>
<li>In February 2012, the first modified version of a backdoor based on ZxShell code was discovered. The key function was to steal document files such as .doc, .ppt, .xls and .wps.</li>
<li>In March 2013, intense attacks were conducted targeting the Chinese Academy of Sciences and a number of national ministries and commissions in the fields of science and technology, maritime affairs, etc.</li>
<li>In October 2013, a watering hole attack was carried out against a Chinese government website.</li>
<li>In May 2014, an evolved version of ZxShell was discovered. In addition to the functions based on the previous version, a search was added for keywords such as ‘military (军)’, ‘aviation (航)’, and ‘report (报告)’.</li>
<li>On 12 September 2014, events and samples related to CVE-2014-4114 (a zero-day vulnerability) were first discovered.</li>
<li>On 14 October 2014,<em> iSIGHT Partners</em> [<a href="#ref3">3</a>] released a report and disclosed CVE-2014-4114. On the same day, <em>Microsoft</em> released relevant security bulletins.</li>
<li>On 25 February 2015, an attack was detected against a military industry association (national defence technology) and the Chinese Academy of Engineering. Kanbox (酷盘) [<a href="#ref4">4</a>] samples were discovered.</li>
<li>In October 2017, the CVE-2017-8759 vulnerability document was used to initiate a spear‑phishing attack against a large media agency website and an individual working in Quanzhou.</li>
<li>In April 2018, the <em>Qi An Xin Threat Intelligence Center</em> disclosed the malicious attack code of the group, exploit CVE-2017-8759 [<a href="#ref1">1</a>].</li>
<li>In May 2018, the actor launched attacks against several maritime organizations including ship‑building companies and port‑operating companies.</li>
<li>In April 2019, the <em>Qi An Xin Threat Intelligence Center</em> found new samples using exploit CVE-2018-20250 [<a href="#ref5">5</a>] and <em>JianguoYun</em> cloud storage [<a href="#ref6">6</a>].</li>
</ul>
<p> </p>
<h2><a class="chapter" name="h2-capabilities-and-cyber-weapons"></a>Capabilities and cyber weapons</h2>
<p>PoisonVine has used publicly available RATs, custom trojans and several vulnerabilities in its activities. In this section, we will analyse the group’s main capabilities and its cyber arsenal, including RATs, vulnerabilities and infrastructures.</p>
<p> </p>
<h2><a class="chapter" name="h2-rats"></a>RATs</h2>
<h3><a class="chapter" name="h3-poison-ivy"></a>Poison Ivy</h3>
<p>The Poison Ivy trojan is essentially a remote access trojan (RAT). <em>FireEye</em> conducted a special analysis of Poison Ivy [<a href="#ref7">7</a>]. The Poison Ivy trojan in this report corresponds to the 2.3.2 version. The Poison Ivy Trojan Generator has a total of 10 versions starting from version 1.0.0. The latest version is 2.3.2. The Poison Ivy Trojan Generator can generate both EXE and shellcode versions. The trojans generated in this case are in shellcode form. Most of the related mutexes use the default value of ‘)!VoqA.I4’.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/b78ea8051dc3d615fe82925fc43652ac_f3981.png" alt="PoisonVine-fig1.png" width="400" height="400" /> <span class="centered-caption">Figure 1: Poison Ivy Trojan Generator.</span></p>
<p>The Poison Ivy trojan decrypts the shellcode using two rounds of a one-character XOR operation.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/9bcc4467552bfeea98278775050bf7ef_f3982.png" alt="PoisonVine-fig2.png" width="800" height="351" /></p>
<p class="centered-caption">Figure 2: Decrypting the shellcode using a one-character XOR operation.</p>
<p> </p>
<h3><a class="chapter" name="h3-zxshell"></a>ZxShell</h3>
<p>ZxShell was used by PoisonVine continuously from December 2007 until October 2014. Due to a large difference between the relevant versions, ZxShell can be regarded as existing in two versions. They are the internal published version and the open-source version. The first version refers to the ZxShell trojan used by PoisonVine from 2007 to 2012. The second version refers to the ZxShell trojan used by the group from 2012 to 2014. The related trojan is developed based on the open‑source version, which we call the secondary development version. The internal published version and the open-source version are both version 3.0. The former is not widely publicized, but intergrated with features. The latter version’s source code is widely distributed, and the functions are eliminated from the previous versions. For a more detailed analysis of ZxShell, please refer to <em>Cisco</em>’s report [<a href="#ref8">8</a>].</p>
<p>The samples we captured are based on ZxShell source code modifications. They have retained the original structure. ZxShell itself has more than 20 instructions. In addition to retaining some instructions, the samples we captured excluded a large number of instructions, such as: installation start, clone system account, shutdown firewall, port scan, proxy server and other functions, but had the ‘IEPass’ command added.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/5315/7303/5364/PoisonVine-fig3.png" alt="PoisonVine-fig3.png" width="721" height="503" /> <span class="centered-caption">Figure 3: The IEPass command.</span></p>
<p> </p>
<h3><a class="chapter" name="h3-kanbox-rat"></a>Kanbox RAT</h3>
<p>Kanbox RAT is a customized tool which was developed by the group. It is often disguised as a folder icon. After execution, it will release the ‘svch0st.exe’ trojan file as well as the normal folder and a ‘.doc’ file to confuse the user.</p>
<p>‘svch0st.exe’ is a trojan transmitted using the SSL encryption protocol. It will execute all the trojan processes every hour, and the trojan processes will pack and upload all the information on the computer (including: file directory, system version, network card information, process list information, package specified files, network information and disk information), as well as files with related keywords (such as ‘Taiwan’, ‘Army’ and ‘War’ in Chinese), to the Kanbox that the attacker registered in advance via the SSL protocol.</p>
<p>The C&amp;C address is a Kanbox address. The file will be uploaded via the API provided by Kanbox. Kanbox is a free cloud service in China which provides online file storage services.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/92785faf30d179c721ac04040d96eb25_f3984.png" alt="PoisonVine-fig4.png" width="800" height="656" /></p>
<p class="centered-caption">Figure 4: The file is uploaded via the API provided by Kanbox.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/41e9444fde0efaa56bd9d35e00d025f7_f3985.png" alt="PoisonVine-fig5.png" width="500" height="384" /></p>
<p class="centered-caption">Figure 5: Kanbox.</p>
<p> </p>
<h3><a class="chapter" name="h3-custom-shellcode-loader"></a>Custom shellcode loader</h3>
<p>We discovered this custom shellcode loader in early 2018. The custom shellcode loader is delivered by a malicious HTA file, which will download and execute a PE implant.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/8415/7303/5825/PoisonVine-fig6.png" alt="PoisonVine-fig6.png" width="721" height="309" /></p>
<p class="centered-caption">Figure 6: Custom shellcode loader.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/8015/7303/5853/PoisonVine-fig7.png" alt="PoisonVine-fig7.png" width="564" height="410" /></p>
<p class="centered-caption">Figure 7: Malicious HTA file.</p>
<p>From the ‘SCLoaderByWeb’ string in the implant file, we believe, from the literal meaning, that the actor built it as a shellcode loader.</p>
<p>The loader program will first try to connect to a common URL to check network connectivity. If there is no connection, it will try to connect every five seconds until the network is connected. Then it downloads the payload from hxxp://updateinfo.servegame.org/tiny1detvghrt.tmp, as shown in Figure 8.</p>
<p><a class="zoom-img" title="Figure 8: The loader program." href="/files/7215/7303/5879/PoisonVine-fig8.png"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/11a178080bdc5003d335053a8d862f38_f3988.png" alt="PoisonVine-fig8.png" width="840" height="612" /></a></p>
<p class="centered-caption">Figure 8: The loader program.</p>
<p>The downloaded file is decrypted using a multiple round character XOR operation. For example, as shown in Figure 9, each round of the XOR key is 0xac, 0x5c, 0xdd, the result is equivalent to XOR 0x2d. After the decryption, the file will execute in a created thread.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/8115/7303/6314/PoisonVine-fig9.png" alt="PoisonVine-fig9.png" width="529" height="492" /><span class="centered-caption">Figure 9: Each round of the XOR key is 0xac, 0x5c, 0xdd, the result is equivalent to XOR 0x2d.</span></p>
<p>The shellcode is generated by the Poison Ivy RAT.</p>
<p> </p>
<h2><a class="chapter" name="h2-vulnerabilities"></a>Vulnerabilities</h2>
<h3><a class="chapter" name="h3-cve-2012-0158"></a>CVE-2012-0158</h3>
<p>CVE-2012-0158 is a vulnerability that could allow remote code execution – the attacker would have to convince users to open a specially crafted document. CVE-2012-0158 is typically exploited in the RTF and DOC formats, but the PoisonVine group saved the exploit document to MHT format, which helps avoid detection by anti-virus engines.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/1515/7303/6366/PoisonVine-fig10.png" alt="PoisonVine-fig10.png" width="574" height="503" /><span class="centered-caption">Figure 10: The exploit document.</span></p>
<p> </p>
<h3><a class="chapter" name="h3-cve-2014-6352"></a>CVE-2014-6352</h3>
<p>CVE-2014-6352 is an OLE code execution vulnerability that can bypass the patch for CVE‑2014‑4114, a vulnerability of <em>Windows</em> OLE package manager code execution that has been exploited in the wild by the Sandworm APT group (found by<em> iSIGHT Partners</em>). CVE-2014-4114 is exploited by executing an INF file via a crafted OLE object in a PPSX document.</p>
<p>CVE-2014-6352 can bypass the patch for CVE-2014-4114. The patch for CVE-2014-4114 fixes the problem by adding a ‘MarkFileUnsafe’ function. The MarkFileUnsafe function sets the file security zone to URLZONE_INTERNET if it comes from a remote computer, and alerts the user when the file executes.</p>
<p>The CVE-2014-6352 exploit triggers the opening of an executable file, which is embedded in a <em>PowerPoint</em> document, directly and without using the INF file.</p>
<p>We found the PoisonVine group using CVE-2014-6352 as a 0-day. Related samples are listed in the table below.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>MD5</strong></td>
<td><strong>SHA256</strong></td>
<td><strong>Filename</strong></td>
</tr>
<tr>
<td>da807804fa5f53f7cbcaac82b901689c</td>
<td>5e4a081a63f0122328e75cae991a1<br />9b3ae25af9c68bccf4ae514ce972ef<br />2148d</td>
<td>指挥控制专委会评审责<br />任书.ppsx</td>
</tr>
<tr>
<td>19f967e27e21802fe92bc9705ae0a770</td>
<td>e99f089bf209d5caea948f424881c<br />bf6652658b973a5b97dbb59db6e0<br />3e8c907</td>
<td>南 海 课 题 项 目 建 议<br />书.ppsx</td>
</tr>
</tbody>
</table>
<p> </p>
<p>The earliest we found the exploitation document, which is named ‘指挥控制专委会评审责任书.ppsx’ in Chinese, was on 4 September 2014 based on the document created date. The first activities were captured on 12 September 2014.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/d05f6cfa7dc76cd00ba3f74fb7ad8c75_f3991.png" alt="PoisonVine-fig11.png" width="843" height="531" /></p>
<p class="centered-caption">Figure 11: The exploitation document named ‘指挥控制专委会评审责任书.ppsx’.</p>
<p> </p>
<h3><a class="chapter" name="h3-cve-2017-8759"></a>CVE-2017-8759</h3>
<p>We found several malicious HTA files on one of the remote servers used by the PoisonVine group. The content of the HTA file is as shown in Figure 12.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/7215/7303/6592/PoisonVine-fig12.png" alt="PoisonVine-fig12.png" width="788" height="334" /></p>
<p class="centered-caption">Figure 12: The content of HTA.</p>
<p>We can certainly recognize these as exploits of CVE-2017-8759, so we believe the PoisonVine group also built a malicious document which exploits CVE-2017-8759. After the vulnerability is triggered, mshta.exe executes the HTA file remotely.</p>
<p>The HTA file is an HTML page with malicious VBS code embedded. The VBS code calls POWERSHELL to download the subsequent exe loader.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/6515/7303/6620/PoisonVine-fig13.png" alt="PoisonVine-fig13.png" width="804" height="308" /></p>
<p class="centered-caption">Figure 13: An HTML page with malicious VBS code embedded.</p>
<p> </p>
<h2><a class="chapter" name="h2-infrastructures"></a>Infrastructures</h2>
<p>The PoisonVine group preferred to use dynamic domain services and cloud storage for C&amp;C and data exfiltration.</p>
<p> </p>
<h3><a class="chapter" name="h3-dynamic-domain-services"></a>Dynamic domain services</h3>
<p>The group used several DDNS services. The table below lists the distribution of the service providers’ usage. ChangeIP and No-IP are the group’s preferred choice.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>DDNS service provider</strong></td>
<td><strong>Domains</strong></td>
</tr>
<tr>
<td>ChangeIP</td>
<td>30</td>
</tr>
<tr>
<td>No-IP</td>
<td>9</td>
</tr>
<tr>
<td>DynDNS</td>
<td>2</td>
</tr>
<tr>
<td>Afraid(FreeDNS)</td>
<td>1</td>
</tr>
<tr>
<td>dnsExit</td>
<td>1</td>
</tr>
</tbody>
</table>
<p> </p>
<h3><a class="chapter" name="h3-disguised-legitimate-websites"></a>Disguised legitimate websites</h3>
<p>The group used domains that mimicked those of legitimate Chinese websites to confuse their victims. They chose government websites, email service providers and the sites of some anti-virus software.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>C&amp;C</strong></td>
<td><strong>Legitimate website</strong></td>
</tr>
<tr>
<td>chinamil.lflink.com</td>
<td>Website of Chinese Military: www.chinamil.com.cn</td>
</tr>
<tr>
<td>
<p>soagov.sytes.net</p>
<p>soagov.zapto.org</p>
soasoa.sytes.net</td>
<td valign="middle">State Oceanic Administration: www.soa.gov.cn</td>
</tr>
<tr>
<td>xinhua.redirectme.net</td>
<td>Xinhua News: www.xinhuanet.com</td>
</tr>
<tr>
<td>
<p>126mailserver.serveftp.com</p>
mail163.mypop3.net</td>
<td>Famous mail service provider in China: 126.com, 163.com</td>
</tr>
<tr>
<td>
<p>kav2011.mooo.com</p>
<p>safe360.dns05.com</p>
<p>cluster.safe360.dns05.com</p>
rising.linkpc.net</td>
<td>Chinese anti-virus software</td>
</tr>
</tbody>
</table>
<p> </p>
<h3><a class="chapter" name="h3-cloud-storage"></a>Cloud storage</h3>
<p>In previous activities, we found two samples that used <em>Kanbox</em>, a Chinese cloud storage service provider, for data exfiltration.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>client_id</strong></td>
<td><strong>client_secret</strong></td>
<td><strong>refresh_token</strong></td>
</tr>
<tr>
<td>3edfe684ded31a7cca6378c022<br />6f5629</td>
<td>bfa89eebf29032076e9cffb755<br />49fee5</td>
<td>75cdc35b1cdaee24047f3afb23<br />a5ccce</td>
</tr>
<tr>
<td>7a5691b81bf4322fd88f5fa994<br />07fbbc</td>
<td>d44cfa7dd3c852b69c59efacf76<br />6cc23</td>
<td>14b6685330bf32a22688910e7<br />65b5dce</td>
</tr>
</tbody>
</table>
<p> </p>
<p> By using the token and <em>Kanbox</em> API we can retrieve the register information, which contains a telephone number:</p>
<pre>{"status":"ok","email":"","phone":"15811848796","spaceQuota":1700807049216,"spaceUsed":508800279,"emailIsActive":0,"phoneIsActive":1}</pre>
<p> </p>
<h3><a class="chapter" name="h3-third-party-blogger"></a>Third-party blogger</h3>
<p>The PoisonVine group also use blogging services for payload transmission. In their previous activities they used <em>Sina</em>, which is a popular blogging service in China. By using a blogging service and hiding malicious code in the blog content, it is easy to penetrate target organization networks without triggering a firewall alert.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/4415/7303/7172/PoisonVine-fig14.png" alt="PoisonVine-fig14.png" width="465" height="451" /></p>
<p class="centered-caption">Figure 14: Malicious code hidden in blog content.</p>
<p> </p>
<h2><a class="chapter" name="h2-tactics-techniques-and-procedures"></a>Tactics, techniques and procedures</h2>
<p>The PoisonVine group used spear-phishing emails to deliver decoy documents or achieve an executable payload. The content of the email and attached file appear sufficiently legitimate to confuse the targeted victim. If the target opens the attached file, some vulnerabilities are triggered and payloads are executed. In this way the actor gains initial access to target networks.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/3015/7303/7347/PoisonVine-fig15.jpg" alt="PoisonVine-fig15.jpg" width="600" height="473" /><span class="centered-caption">Figure 15: The content of the email.</span></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/621eefef6620174e693e3b186bdddf97_f3997.png" alt="PoisonVine-fig16.png" width="780" height="400" /> <span class="centered-caption">Figure 16: The attached file.</span></p>
<p> <img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/7d47aeaad7a10dc0e21f0424a399ce51_f3998.png" alt="PoisonVine-fig17.png" width="700" height="190" /></p>
<p class="centered-caption">Figure 17: Payloads executed.</p>
<p>The actor also used RLO, appending a number of spaces to the end of the filename, and disguising the file using a legitimate software icon such as a folder or <em>Office</em> document. These techniques help to hide the file extension name and confuse the target victim.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/1234a87ee751b79e873655c29f2b6b55_f3999.png" alt="PoisonVine-fig18a.png" width="600" height="85" /><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/847934deb838299e5bab365a5e362dcf_f4000.png" alt="PoisonVine-fig18b.png" width="600" height="44" /><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/e4b5f8b7e14f47fa61ee3165d61560bb_f4001.png" alt="PoisonVine-fig18c.png" width="600" height="46" /><span class="centered-caption">Figure 18: The actor also used RLO and appended a number of spaces to the end of the file name.</span></p>
<p>The implant RATs used some techniques to evade detection. One of the evasion techniques is to reverse the order of the API names. When the trojan executes, the reverse string is converted to a normal API string by the ‘_strrev’ function, and the ‘GetProcAddress’ function is called to dynamically obtain the API address. The use of reverse order API strings increases the difficulty of string detection. In addition, the API address is obtained dynamically during the execution of the trojan, which is difficult to detect in the static information of the PE, which increases the difficulty of API detection. This technique is known to have been used between 2009 and 2018.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/c3db819f8f4db3485814df409fa1f5c5_f4002.png" alt="PoisonVine-fig19.png" width="840" height="405" /></p>
<p class="centered-caption">Figure 19: API names are reversed.</p>
<p>Another way to evade detection systems is to pass the wrong parameter to the ‘GetClientRect’ function. The first parameter of GetClientRect is to obtain a target window handler. The trojan passes 0 to GetClientRect, which will fail forever in the <em>Windows</em> operating system, and the return value is 0. At present, many anti-virus solutions use dynamic scanning technology (mostly in heuristic detection). The simulation of executing the GetClientRect function does not consider error parameters, meaning that the GetClientRect function is always executed successfully by simulation, and the return value is non-zero. In this way, the anti-virus software’s virtual environment and the user’s real system can be distinguished by trojans, thus allowing them to bypass anti-virus software detection.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/88822de1cb788f40cf10b841862e2833_f4003.png" alt="PoisonVine-fig20.png" width="840" height="530" /></p>
<p class="centered-caption">Figure 20: Another way to evade detection systems is to pass the wrong parameter to ‘GetClientRect’.</p>
<p>After implanting the RATs in the target endpoint, information will be collected from the local system, including MAC address, operating system version, host name, user name, process list, disk volume information, and so on. It will also scan the document files for filename that contain hard‑coded keywords, such as ‘military (军)’, ‘international (国际)’, ‘Taiwan (对台)’, ‘technology (科技)’ and ‘national (国)’ (see Figure 21).</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/3115/7303/7729/PoisonVine-fig21.png" alt="PoisonVine-fig21.png" width="691" height="262" /><span class="centered-caption">Figure 21: Hard-coded keywords.</span></p>
<p>The following is a list of MITRE ATT&amp;CK techniques we have observed based on our analysis of the PoisonVine group.</p>
<ul>
<li>T1193 Spearphishing Attachment</li>
<li>T1203 Exploitation for Client Execution</li>
<li>T1204 User Execution</li>
<li>T1170 Mshta</li>
<li>T1064 Scripting</li>
<li>T1102 Web Service</li>
<li>T1022 Data Encrypted</li>
<li>T1005 Data from Local System</li>
</ul>
<p> </p>
<h2><a class="chapter" name="h2-data-exfiltration-and-impact"></a>Data exfiltration and impact</h2>
<p>The PoisonVine group used cloud storage to store the exfiltration data – the access token was embedded in the implant. This is helpful for security researchers investigating the exfiltration data and the real impact of the attack on the victims.</p>
<p>The actor only used a simple XOR function to encrypt the data that is uploaded. After decrypting the token by reversing RAT samples, we were able to access the full data with at least 3GB uncompressed file size. Most of the data consists of documents relating to the logged in user or data of installed programs.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/9115/7303/7799/PoisonVine-fig22.png" alt="PoisonVine-fig22.png" width="335" height="366" /></p>
<p class="centered-caption">Figure 22: We were able to access the full data.</p>
<p>We discovered that the actor used another cloud storage service, named <em>JianGuoYun</em>, in its recent activity, which was used for tests and exfiltration.</p>
<p> <img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/1415/7303/8099/PoisonVine-fig23a.jpg" alt="PoisonVine-fig23a.jpg" width="780" height="530" /><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/2915/7303/8162/PoisonVine-fig23b.jpg" alt="PoisonVine-fig23b.jpg" width="780" height="495" /><span class="centered-caption">Figure 23: The actor recently used another cloud storage service named JianGuoYun</span>.</p>
<p>Besides the data we mentioned, the actor also collects information about the target PC. The RATs collected information from the victim PC, including OS, process list, IP address, host name, user name, and so on.</p>
<p> </p>
<h2><a class="chapter" name="h2-attribution-actor"></a>Attribution of the actor</h2>
<p>Attribution is always a problem for the security investigator. For the PoisonVine group, we found several pieces of evidence which could help identify the actor, including language, encoding and character set. We found several cases of metadata written in Traditional Chinese in the payloads.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/66aa7cb5b63bc548154267463374500f_f4008.png" alt="PoisonVine-fig24a.png" width="750" height="251" /><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/9615/7303/7926/PoisonVine-fig24b.png" alt="PoisonVine-fig24b.png" width="377" height="480" /><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/a535b2e6f25b8c6ede7b6ea4debd8310_f4010.png" alt="PoisonVine-fig24c.png" width="750" height="202" /><span class="centered-caption">Figure 24: We found several cses of metadata written in Traditional Chinese in payloads.</span></p>
<p>The default character set in the decoy document is ‘PMingLiU’, which is used most commonly in the Traditional Chinese-speaking regions. And most of the names of the decoy documents related to cross-strait relations in China.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/fcc8729c64f983d42bddcbe152a37f08_f4011.png" alt="PoisonVine-fig25.png" width="780" height="438" /></p>
<p class="centered-caption">Figure 25: The default character set in the decoy document is ‘PMingLiU’.</p>
<p>The Whois information for one of the C&amp;C domains (javainfo.upgrinfo.com) is shown in Figure 26. The registrant address is in Taiwan, New Taipei. And the registrant name may use the Wade–Giles romanization system.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/fa2a578e54cff0005ac19250fcdb067b_f4015.jpg" alt="PoisonVine-fig26.jpg" width="780" height="490" /><span class="centered-caption">Figure 26: Whois information for javainfo.upgrinfo.com.</span></p>
<p> </p>
<h2><a class="chapter" name="h2-conclusion"></a>Conclusion</h2>
<p>Geopolitics is always a major motivation of a cyberespionage threat. Based on the techniques it uses, we believe that the PoisonVine group isn’t a sophisticated APT group. However, it has been active for 11 years and remains active. Furthermore, the group’s purpose is to collect intelligence regarding national defence, military, government, science and technology, education and so on.</p>
<p> </p>
<h2><a class="chapter" name="h2-acknowledgement"></a>Acknowledgement</h2>
<p>We acknowledge the <em>360 Core Security Team</em> from<em> Qihoo 360</em> for their cooperation in the analysis of and report on the PoisonVine group, as well as the English version of the report [<a href="#ref2">2</a>, <a href="#ref9">9</a>].</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] APT Group (APT-C-01) New Utilization Vulnerability Sample Analysis and Association Mining (in Chinese). 360 Threat Intelligence Center. <a href="https://ti.qianxin.com/blog/articles/analysis-of-apt-c-01/" target="_blank">https://ti.qianxin.com/blog/articles/analysis-of-apt-c-01/</a>.</p>
<p><a class=" anchor" name="ref2"></a>[2] APT-C-01. <a href="https://ti.qianxin.com/uploads/2018/09/20/6f8ad451646c9eda1f75c5d31f39f668.pdf" target="_blank">https://ti.qianxin.com/uploads/2018/09/20/6f8ad451646c9eda1f75c5d31f39f668.pdf</a>.</p>
<p><a class=" anchor" name="ref3"></a>[3] <a href="http://www.isightpartners.com/2014/10/cve-2014-4114/" target="_blank">http://www.isightpartners.com/2014/10/cve-2014-4114/</a>.</p>
<p><a class=" anchor" name="ref4"></a>[4] Kanbox. <a href="https://kanbox.com/" target="_blank">https://kanbox.com/</a>.</p>
<p><a class=" anchor" name="ref5"></a>[5] RedDrip Team. <a href="https://twitter.com/RedDrip7/status/1118009381679878144" target="_blank">https://twitter.com/RedDrip7/status/1118009381679878144</a>.</p>
<p><a class=" anchor" name="ref6"></a>[6] Jianguoyun. <a href="https://www.jianguoyun.com/" target="_blank">https://www.jianguoyun.com/</a>.</p>
<p><a class=" anchor" name="ref7"></a>[7] POISON IVY: Assessing Damage and Extracting Intelligence. <a href="https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-poison-ivy.pdf" target="_blank">https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-poison-ivy.pdf</a>.</p>
<p><a class=" anchor" name="ref8"></a>[8] Allievi, A.; Goddard, D.; Hurley, S.; Zidouemba, A. Threat Spotlight: Group 72, Opening the ZxShell <a href="https://blogs.cisco.com/security/talos/opening-zxshell" target="_blank">https://blogs.cisco.com/security/talos/opening-zxshell</a>.</p>
<p><a class=" anchor" name="ref9"></a>[9] Poison Ivy Group and the Cyberespionage Campaign Against Chinese Military and Goverment. <a href="http://blogs.360.cn/post/APT_C_01_en.html" target="_blank">http://blogs.360.cn/post/APT_C_01_en.html</a>.</p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2019/VB2019-Pan-Gu.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2019 paper: A vine climbing over the Great Firewall: a long‑term attack against China&url=https://www.virusbulletin.com/virusbulletin/2019/11/vb2019-paper-vine-climbing-over-great-firewall-longterm-attack-against-china"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2019/11/vb2019-paper-vine-climbing-over-great-firewall-longterm-attack-against-china'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2019/11/vb2019-paper-vine-climbing-over-great-firewall-longterm-attack-against-china&title=VB2019 paper: A vine climbing over the Great Firewall: a long‑term attack against China"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2019/11/vb2019-paper-vine-climbing-over-great-firewall-longterm-attack-against-china&t=VB2019 paper: A vine climbing over the Great Firewall: a long‑term attack against China"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2019/11/vb2019-paper-vine-climbing-over-great-firewall-longterm-attack-against-china"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>