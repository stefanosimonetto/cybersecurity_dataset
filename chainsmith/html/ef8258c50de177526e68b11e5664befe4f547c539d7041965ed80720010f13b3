<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Inside a Black Hole: Part 1</title>
<meta name="description" content="The most actively deployed exploit kit over the past year has without doubt been the Blackhole exploit kit. Gabor Szappanos attempts to fill in the (black)holes in our knowledge about this threat. In this article he covers how the server-side code can be analysed." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1972;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201210-Blackhole"></a>Inside a Black Hole: Part 1</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2012-10-10</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="surname">Gabor Szappanos</span></h3><span class="orgname">Sophos</span>, <span class="orgdiv">Hungary</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>The most actively deployed exploit kit over the past year has without doubt been the Blackhole exploit kit. Gabor Szappanos attempts to fill in the (black)holes in our knowledge about this threat. In this article he covers how the server-side code can be analysed.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2012 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-3279" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-3279" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3064729"></a></span></dt><dt><span class="sect1"><a href="#id2216146">Backend</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3106494">How was the source code obtained?</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2772875">About ionCube</a></span></dt><dt><span class="sect1"><a href="#id3515458">ionCube in action</a></span></dt><dt><span class="sect1"><a href="#id3599283">Decoding ionCube</a></span></dt><dt><span class="sect1"><a href="#id2851944">Reconstructing the code</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4624685">Cookbook examples</a></span></dt><dt><span class="sect2"><a href="#id2812335">Orientating constants</a></span></dt><dt><span class="sect2"><a href="#id3628768">Code functionality analysis</a></span></dt><dt><span class="sect2"><a href="#id2618762">Compare the code with the output</a></span></dt><dt><span class="sect2"><a href="#id2309053">Ask the pro</a></span></dt><dt><span class="sect2"><a href="#id4908151">Origins</a></span></dt><dt><span class="sect2"><a href="#id3291713">The author</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2190720">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3064729"></a></h2></div></div></div><p>The most actively deployed exploit kit over the past year has without doubt been the Blackhole exploit kit. New mass-attacks have been performed daily using various initial distribution methods and a supporting server backend. While several aspects of these attacks have already been covered in great detail [<span class="citation"><a href="#citation.1">1</a></span>], the interaction with and the role of the backend in the attacks has not been explained satisfactorily. This paper attempts to fill in the (black)holes in our knowledge about this particular threat. The first part covers how the server-side code could be analysed, while the second part will discuss the operation of the backend in detail. </p><p>The kit itself has been updated regularly over the past two years, as shown in <a href="#table.1">Table 1</a>. </p><div class="table"><a id="table.1"></a><table border="1" summary="Release history of the exploit kit."><colgroup><col align="center" /><col /></colgroup><tbody><tr><td align="center"><span class="bold"><strong>Version</strong></span></td><td align="center"><span class="bold"><strong>Release date</strong></span></td></tr><tr><td align="center">2.0</td><td align="center">09/2012(?)</td></tr><tr><td align="center">1.2.5</td><td align="center">30/07/2012</td></tr><tr><td align="center">1.2.4</td><td align="center">11/07/2012</td></tr><tr><td align="center">1.2.3</td><td align="center">28/03/2012</td></tr><tr><td align="center">1.2.2</td><td align="center">26/02/2012</td></tr><tr><td align="center">1.2.1</td><td align="center">09/12/2011</td></tr><tr><td align="center">1.2.0</td><td align="center">11/09/2011</td></tr><tr><td align="center">1.1.0</td><td align="center">26/06/2011</td></tr><tr><td align="center">1.0.2</td><td align="center">20/11/2010</td></tr><tr><td align="center">1.0.0 (beta)</td><td align="center">08/2010 </td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Release history of the exploit kit.</b></p></div><p>The analysis in this paper is based on version 1.0.2, which is certainly one of the older versions of the exploit kit, but which has the overwhelming advantage of being available. None of the later versions are known to be available in wider circulation (i.e. wider than its author and the purchasers) in the research community. When I started this work, my main concern was that analysing a version from over a year ago would not give results that would be applicable to current threats. As it turned out, the code did not change too much structurally, and provided valuable insight into the anatomy of the current attacks as well. In fact, very few characteristics have been observed in the current attacks that feature more than the 1.0.2 architecture could service.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2216146"></a>Backend</h2></div></div></div><p>The Blackhole backend is available to purchase or rent from its author(s). The author(s) advertise the pricing scheme as follows:</p><p><span class="emphasis"><em>Annual license: $1500 </em></span></p><p><span class="emphasis"><em>Half-year license: $1000 </em></span></p><p><span class="emphasis"><em>3-month license: $700 </em></span></p><p><span class="emphasis"><em>Update cryptor $50 </em></span></p><p><span class="emphasis"><em>Changing domain $20 multidomain $200 to license. </em></span></p><p><span class="emphasis"><em>During the term of the license all the updates are free. </em></span></p><p><span class="emphasis"><em>Rent on our server: </em></span></p><p><span class="emphasis"><em>1 week (7 full days): $200 </em></span></p><p><span class="emphasis"><em>2 weeks (14 full days): $300 </em></span></p><p><span class="emphasis"><em>3 weeks (21 full days): $400 </em></span></p><p><span class="emphasis"><em>4 weeks (31 full days): $500 </em></span></p><p><span class="emphasis"><em>24-hour test: $50</em></span></p><p><span class="emphasis"><em>There is restriction on the volume of incoming traffic to a leasehold system, depending on the time of the contract. </em></span></p><p><span class="emphasis"><em>Providing our proper domain included. The subsequent change of the domain: $35</em></span></p><p><span class="emphasis"><em>No longer any hidden fees, rental includes full support for the duration of the contract.</em></span></p><p> A lot changed in the world between the announcement of the 1.0.0 version in August 2010 and the 2.0 version which is being promoted for upcoming release at the time of writing this article. The good news for readers is that the pricing has remained the same, unaffected by inflation, oil prices or the global economic crisis. It is reassuring to know that there are some things in this ever-changing world of ours that retain their value. </p><p>The server-side components of exploit kits are usually hard to obtain. Occasionally law enforcement bodies can seize the C&amp;C servers including the installed software, but these sources are not likely to surface for general availability. </p><p>For this reason it was surprising to see that in May 2011 (the earliest report was 22 May [<span class="citation"><span class="application"><a href="#citation.2">2</a></span></span>]) a leaked version of the Blackhole exploit kit appeared on underground forums and torrent sites. Security experts speculated that this could lead to a flood of alternative exploit kits based on the modification of the source [<span class="citation"><a href="#citation.3">3</a></span>]. Fortunately, this did not happen &ndash; a reason for which will become clear after reading this paper. </p><p>I could easily accept the lack of new clones of Blackhole, but from a malware researcher&rsquo;s point of view it was disturbing that despite the source code having been available for such a long time, there was still no comprehensive analysis available. Certainly, there must be a reason for that.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3106494"></a>How was the source code obtained?</h3></div></div></div><p>Before going into the details of the complexities of the analysis, another very important question came up: how was this code obtained in the first place? There is no first-hand information available, but putting together some of the observations and connecting the dots could lead to a reasonably strong explanation.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="The main clue." src="/uploads/images/figures/2012/10/blackhole-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;The main clue.</b></p></div><p>The leading clue was a file named &lsquo;27&rsquo; in the files directory. We know from analysis of the backend code that this is the file upload directory, to which new executable payloads can be uploaded for distribution to the infected endpoints. </p><p>However, this file was something different. It was not a botnet executable or a keylogger installer, as one would normally expect, but a copy of the infamous C99Shell backdoor, which is a popular choice for hacking into websites. One could argue that this could be an intended payload for some infected systems, but the payload from the file directory is always delivered with an .exe extension and &lsquo;application/x-msdownload&rsquo; content type &ndash; the system is not set up to deliver a PHP script. The file 27 is a foreign body within the Blackhole code complex. </p><p>Additionally, there is a related directory, dir27, which contains an index.php file. All directories in the hosting server contain this file, which displays a standard 404 error message to disable directory browsing. However, unlike all of the other index.php files, this one is not protected with <span class="emphasis"><em>ionCube</em></span>. Analysis of the code shows that the file was probably created dynamically at runtime, and thus install-time protection was not applicable. </p><p>Evidence suggests that the site was hacked by uploading C99Shell. Using it, the attacker gathered all files from the Blackhole home directory. Presumably the hacker did not gain access to files outside this directory (or had no idea about the structure of the set-up, and did not bother to grab other files from the server), as the files outside this home directory (most importantly the <span class="emphasis"><em>MySQL</em></span> database files) were not retrieved. Having the database could have been a great help in understanding the internals of the operation. </p><p>But before reaching this point, there was an initial hurdle to jump. The exploit kit provides the option to upload files, but only after admin authentication. So in order to hack into the server, the attacker had to gain access to the web admin interface. How was this possible? It all became clear after having a quick look at the code: the config.php file contains, among many other general settings, the MD5 hash of the admin password. It is considered to be a safe approach to store only the one-way hash of the password (though even in that case MD5 is not the advisable choice for the hash algorithm), and on authentication the calculated hash of the submitted password is compared with the stored hash. What should not be considered safe under any circumstances is the password itself. <a href="#figure.2">Figure 2</a> demonstrates that using a common password-cracking tool and an even more common password list, a dictionary attack was able to break the password in about 310 milliseconds. Not surprisingly, the password used for the admin interface can be found in just about every password list available on the Internet. To give you a hint, it was as good a choice for a password as 12345 (which is not the actual password, but close enough, the Levenshtein distance from the real one is only 2). </p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Admin password cracked within a fraction of a second." src="/uploads/images/figures/2012/10/blackhole-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Admin password cracked within a fraction of a second.</b></p></div><p>So my educated guess for the method of obtaining the source is the following: the attacker identified a Blackhole attack, then traffic or static analysis led to the C&amp;C server. Then came a tricky bit: finding out the login filename leading to the admin interface, which was the guessable adm.php. However, a more easily guessable file (and the one commonly used in exploit kits), stats.php, redirects to the admin page. I have no data to support the suggestion that the attacker knew about this, or could decode Russian, but there were screenshots available of the 1.0.0 version admin panel, which could have given the attacker a clue as to the filenames. </p><p>Having figured that out, the attacker could gain access to the admin interface and in somewhere between five and 50 attempts guessed the admin password. After that the attacker uploaded the C99Shell file, directly accessed it in a browser, which gave access to the files within the Blackhole home directory. Mental note: if you maintain a C&amp;C server, use a strong password. </p><p>There is also a clue regarding where this particular server was originally located. Blackhole kits use (among others) Java components for downloading the Win32 binaries, and these Java components were linked into the HTML page returned by the server during the attack. </p><p>In the specific server set-up (defined in config.php and used in the main downloader generator file, index.php, when dynamically creating the downloader script), the path to this component was set to 195.80.151.59\pub\new.avi. </p><p>Storing these JAR files in the /pub directory was common in early 2011 Blackhole attacks. This file was not found in the leaked source for the obvious reason that it was not present in the kit&rsquo;s home directory. </p><p>Despite the .avi extension, the components used this way were in fact JAR files. The actual usage varied during the observed period, with two main tendencies: they were either referenced from the main download HTML page in an &lt;applet&gt; tag, with full URL (the more common approach in the analysed sample set), or from within the encrypted main script, dynamically creating the applet with createElement and assigning the relative or absolute path within the server home to the archive attribute. Server code analysis revealed that in this particular case the URL to the Java component was used from within the encrypted main code &ndash; fortunately this time the full URL version was configured. </p><p>What was found in all analysed cases was the fact that the JAR was referenced from the same server as the one that hosted the exploit kit, never pointing to an external server. This leads us to the conclusion that the cracked server was in fact 195.80.151.59. </p><p>This IP was known to host various malware back in February 2011 (though not Blackhole, but the Phoenix backend was reported), then under domain name tuqidig5.co.cc (and a few others, like dubezov3.co.cc, gube2qome8.cz.cc, cepepeler28.co.cc and dofubuhud57.co.cc were listed with the same IP), registered to a company located in Belize. Nowadays it belongs to a Polish ISP and is unrelated to malware. </p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Server config including crucial script names." src="/uploads/images/figures/2012/10/blackhole-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Server config including crucial script names.</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2772875"></a>About ionCube</h2></div></div></div><p>Most of the server backend code is encrypted with the commercial <span class="emphasis"><em>ionCube</em></span> encoder [<span class="citation"><a href="#citation.1">1</a></span>], which is one of the most popular PHP encryptors. It has a rich set of features, including:</p><div class="itemizedlist"><ul type="disc"><li><p>Encoding of PHP scripts with compiled byte codes for accelerated runtime performance and maximum security. </p></li><li><p>Obfuscation of byte codes after compilation for extra security.</p></li><li><p>Selectable ASCII or binary encoded file format. </p></li><li><p>Prevention of file tampering through use of digital signatures.</p></li><li><p>Prevention of unauthorized files including encoded files. </p></li><li><p>Generation of files to expire on a given date or after a time period.</p></li><li><p>Restricting of files to run on any combination of IP addresses and/or server names. </p></li><li><p>Restricting of files to run on specific MAC addresses. </p></li><li><p>Customized messages when files expire or don&rsquo;t have permission to run. </p></li><li><p>Fast encoding.</p></li></ul></div><p>The obfuscation of byte codes includes a few methods to protect against reverse engineering. These are illustrated in <a href="#figure.4">Figure 4</a>:</p><div class="itemizedlist"><ul type="disc"><li><p>Obfuscation of local variables</p></li><li><p>Obfuscation of function names</p></li><li><p>Obfuscation of line numbers.</p></li></ul></div><p>Of those the obfuscation of function names has the most devastating effect on the readability of decrypted code, as we will see later in the paper.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Obfuscation settings." src="/uploads/images/figures/2012/10/blackhole-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Obfuscation settings. </b></p></div><p>The cryptor uses the technique of compiling to byte code prior to encoding, consequently source code is eliminated and runtime overheads are reduced. A PHP extension called the<span class="emphasis"><em> ionCube Loader</em></span>, provided for all supported platforms, handles the preprocessing and execution of encoded files at run time. </p><p>The popularity of the cryptor is demonstrated by its prevalence among the exploit kits. Going through a moderate collection of 55 different exploit kits it was somewhat surprising that only nine of them were protected with any kind of PHP encryption, and six of them used the ominous <span class="emphasis"><em>ionCube</em></span>. </p><div class="table"><a id="table.2"></a><table border="1" summary="PHP cryptor usage on exploit kit server sides."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Exploit kit</th><th align="center">Cryptor used</th></tr></thead><tbody><tr><td>Adrenalin</td><td>Zend</td></tr><tr><td>Blackhole</td><td>ionCube</td></tr><tr><td>Bleeding life</td><td>ionCube</td></tr><tr><td>Crimepack</td><td>ionCube</td></tr><tr><td>Intoxicated</td><td>ionCube</td></tr><tr><td>Liberty</td><td>Php Express</td></tr><tr><td>Pay0c</td><td>ionCube+custom </td></tr><tr><td>Tornado</td><td>Zend</td></tr><tr><td>Yes</td><td>ionCube</td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;PHP cryptor usage on exploit kit server sides.</b></p></div><p>However, those using <span class="emphasis"><em>ionCube</em></span> have not benefited from the highest security services provided by the cryptor. <a href="#table.3">Table 3</a> summarizes the usage of restricted domains and function name obfuscation among these exploit kits. (The lack of data for Pay0c is the consequence of using a new version of <span class="emphasis"><em>ionCube</em></span>, not supported by the available analysis tools.)</p><div class="table"><a id="table.3"></a><table border="1" summary="ionCube feature utilization."><colgroup><col /><col /><col /></colgroup><thead><tr><th align="center">Exploit kit </th><th align="center">Restricted domain count</th><th align="center">Function name obfuscation</th></tr></thead><tbody><tr><td>Intoxicated</td><td>3</td><td>No</td></tr><tr><td>Blackhole</td><td>28</td><td>Yes</td></tr><tr><td>Bleeding-life-pack</td><td>2</td><td>No</td></tr><tr><td>Crimepack</td><td>1</td><td>No</td></tr><tr><td>Pay0c</td><td>N/A</td><td>N/A</td></tr><tr><td>Yes</td><td>-</td><td>Yes</td></tr></tbody></table><p class="title"><b>Table&nbsp;3.&nbsp;ionCube feature utilization.</b></p></div><p>Only Blackhole and Yes featured function name obfuscation, which is a very effective way to protect against reverse engineering. And Yes does not benefit from domain restriction, which is a good defence against illegal use (as controversial as it sounds, referring to a tool used in computer crimes) on unauthorized servers. Running it on an inappropriate server will result in error messages such as: </p><pre class="programlisting">The encoded file C:\Program Files\EasyPHP\www\blackhole\index.php is not permissioned for 127.0.0.1 
in Unknown on line 0)</pre><p><a href="#table.3">Table 3</a> also underlines my introductory claim that Blackhole is the most widely deployed attack kit. While the examined versions of the other kits were deployed on between one and three servers, Blackhole was licensed for use on 28! Quite a success story. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3515458"></a>ionCube in action</h2></div></div></div><p>The <span class="emphasis"><em>ionCube</em></span> encoder strips the comments from the code then converts the remaining code to byte code, encrypts it based on the selected protection settings, and prepends a short and static loader code. This checks the availability of the <span class="emphasis"><em>ionCube</em></span> loader, and if it is found, hands the script to the loader. </p><p>The loader then checks the validity of the licence and whether it is running on the server it is licensed to. If all checks pass, it decrypts and loads the byte code into the PHP interpreter. </p><p>The original code:</p><pre class="programlisting">&lt;?php
### This file is part of the dictionaries-common package.
### It has been automatically generated.
### DO NOT EDIT!

$SQSPELL_APP = array (
  &lsquo;American English (aspell)&rsquo; =&gt; &lsquo;aspell -a -d en_US   &lsquo;,
  &lsquo;British English (aspell)&rsquo; =&gt; &lsquo;aspell -a -d en_GB   &lsquo;,
  &lsquo;Canadian English (aspell)&rsquo; =&gt; &lsquo;aspell -a -d en_CA   &lsquo;,
  &lsquo;English (aspell)&rsquo; =&gt; &lsquo;aspell -a -d en   &lsquo;
);</pre><p>is thus transformed into a far less comprehensible form: </p><pre class="programlisting">&lt;?php //0035e
if(!extension_loaded(&lsquo;ionCube Loader&rsquo;)){$__oc=strtolower(substr(php_uname(),0,3));$__ln=&rsquo;
/ioncube/ioncube_loader_&rsquo;.$__oc.&rsquo;_&rsquo;.substr(phpversion(),0,3).(($__oc==&rsquo;win&rsquo;)?&rsquo;.dll&rsquo;:&rsquo;.so&rsquo;);
$__oid=$__id=realpath(ini_get(&lsquo;extension_dir&rsquo;));$__here=dirname(__FILE__);if(strlen($__id)
&gt;1&amp;&amp;$__id[1]==&rsquo;:&rsquo;){$__id=str_replace(&lsquo;\\&rsquo;,&rsquo;/&rsquo;,substr($__id,2));$__here=str_replace(&lsquo;\\&rsquo;,&rsquo;/&rsquo;,
substr($__here,2));}$__rd=str_repeat(&lsquo;/..&rsquo;,substr_count($__id,&rsquo;/&rsquo;)).$__here.&rsquo;/&rsquo;;$__i=strlen
($__rd);while($__i--){if($__rd[$__i]==&rsquo;/&rsquo;){$__lp=substr($__rd,0,$__i).$__ln;if(file_exists
($__oid.$__lp)){$__ln=$__lp;break;}}}@dl($__ln);}else{die(&lsquo;The file &lsquo;.__FILE__.&rdquo; is corrupted.
\n&rdquo;);}if(function_exists(&lsquo;_il_exec&rsquo;)){return _il_exec();}echo(&lsquo;Site error: the file &lt;b&gt;&rsquo;.__FILE__.&rsquo;
&lt;/b&gt; requires the ionCube PHP Loader &lsquo;.basename($__ln).&rsquo; to be installed by the site administrator.&rsquo;)
;exit(199);
?&gt;

4+oV584oGn8W1xWbEOlMCSe7+5xpGsdDr0UqMyicg6oxyLZb16BluFQpCr+D7yMqMhqOmkX4yABG

UKwVZfc7Fa33Xop85AWlurw0+VnDpnXgCG9sXDOnOC9ZY839Z9t1rQ5tDwpUkxvO388zFwJnhL8t

HFJiu3BxAvnoJ7SbPDuE/J0jq1PvzQJubQ00n2i0qucXQWp4DqGIIdbqP1GoaFrwVjVK80KM9uCO

4VYWKfNPrKgeOzYLfqROaektFtx8m/TYNAwAyABKV374GJ7NzOTcbJengE6+2vmu83PjyIDH/7Y1

fAtoE+RRFefDKlnBdZzPrvtowt/281w8ZQQaFaBK/P9IqxFIg/IXH8kXIuXtPAMNPNNVhKMoiLhO

Zi3scRC8k2Ez3KQZUb5LSOjjM+hQNyrRVhjOaOstjGTYbV6DvNoQkkMZDusxcYe/I3fXTw58+nCb

w+7W5H32VXXm3juUR1SovZOqejy7Vs/DqhdL1r/+SIOSGHlw7BKZUc+Y8g9NtInkpUWBaf5r3CZF

Sq0XitNW/EZopkHyT6SNoFSXnLmEtvEINqJBrkR5zNeDutXgcZ4sp3rPZ8kTiDEQ9mgjiDleJcXp

Dfw/c6/vNnjwAcSLzzYQUwLrvC55FREiVksS
</pre></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3599283"></a>Decoding ionCube</h2></div></div></div><p>Despite all the transformations and obfuscation that it performs, decoding <span class="emphasis"><em>ionCube</em></span> is not entirely hopeless. But then again, it is not entirely easy to solve either. </p><p>There are a few tools available that are reasonably successful in reconstructing the original source. At least that is true for the simple cases. </p><p>One of the most usable ones is <span class="emphasis"><em>ionCube Decoder</em></span>, written in Visual Basic. It decodes the above example script into the following form: </p><pre class="programlisting">&lt;?php
$SQSPELL_APP=array(&ldquo;aspell -a -d en_US   &ldquo;, &ldquo;aspell -a -d en_GB   &ldquo;, &ldquo;aspell -a -d en_CA   &ldquo;, &ldquo;aspell -a -d en   &ldquo;);
Return (1);
?&gt;

<span class="emphasis"><em>Decoded with ionCube decoder.</em></span></pre><p>According to my tests, the most promising output is created by another tool, called <span class="emphasis"><em>Dezender</em></span>, which outputs a more correct source:</p><pre class="programlisting">&lt;?php
/*********************/
/*                   */
/*  Dezend for PHP5  */
/*         NWS       */
/*      Nulled.WS    */
/*                   */
/*********************/
$SQSPELL_APP = array( &ldquo;American English (aspell)&rdquo; =&gt; &ldquo;aspell -a -d en_US   &ldquo;, &ldquo;British English (aspell)&rdquo; =&gt; &ldquo;aspell -a -d en_GB   &ldquo;, &ldquo;Canadian English (aspell)&rdquo; =&gt; &ldquo;aspell -a -d en_CA   &ldquo;, &ldquo;English (aspell)&rdquo; =&gt; &ldquo;aspell -a -d en   &ldquo; );
?&gt;

<span class="emphasis"><em>Decoded with Dezender.</em></span></pre><p>The difference may not be that obvious from this very simple code sample, but when dealing with the real server code, the shortcomings of <span class="emphasis"><em>ionCube Decoder </em></span>turned out to be numerous:</p><div class="itemizedlist"><ul type="disc"><li><p>It failed to decompile if the input file had other than Unix-style line breaks (0x0a).</p></li><li><p>It crashed consistently on a couple of files. </p></li><li><p>On some occasions the code was truncated. </p></li><li><p>The resulting decompiled code was a lot more challenging to read in the case of<span class="emphasis"><em> ionCube Decoder </em></span>than in the case of <span class="emphasis"><em>Dezender</em></span>.</p></li></ul></div><p>As an example, the following is the form of the code generated by <span class="emphasis"><em>Dezender</em></span>:</p><pre class="programlisting">_obfuscate_DVwqWwoiNxQrDDcnLgE0MgkuDREiWxE&yuml;( &ldquo;display_errors&rdquo;, 1 );
_obfuscate_DTAWFiwpFRcvMSo8LSEJDQc7JS44DwE&yuml;( E_ALL );
$configFileName = &ldquo;config.php&rdquo;;
_obfuscate_DS0eLQw1WwE0Ly4nPiopNzgiCyENEiI&yuml;( ); </pre><p>It was a lot easier to analyse and post-process than the (in this case admittedly equivalent) form provided by<span class="emphasis"><em> ionCube Decoder</em></span>:</p><pre class="programlisting">[Obfuscated]0D 5C 2A 5B 0A 22 37 14 2B 0C 37 27 2E 01 34 32 09 2E 0D 11 22 5B 11 (&ldquo;display_errors&rdquo;,1);
[Obfuscated]0D 30 16 16 2C 29 15 17 2F 31 2A 3C 2D 21 09 0D 07 3B 25 2E 38 0F 01 (1);
$configFileName=&rdquo;config.php&rdquo;;
[Obfuscated]0D 2D 1E 2D 0C 35 5B 01 34 2F 2E 27 3E 2A 29 37 38 22 0B 21 0D 12 22 ();
</pre><p>Having said all that,<span class="emphasis"><em> ionCube Decoder </em></span>has one definite advantage over <span class="emphasis"><em>Dezender</em></span>: it identifies and interprets the settings data stored in the header of the decrypted block, thus providing useful meta-information about the exploit packs, revealing some of the settings used during the creation of the package. As an example, in the case of the particular Blackhole installation, the following set of data was revealed:</p><pre class="programlisting">Minimum Loader Version: 00.00.00 (for ex. ioncube_loader_win_4.3.dll requires &gt;0301010)
VerData 0x00000003
ObfuFlags 00000003 00000000
    <span class="bold"><strong>0x0001  Obfuscate Vars
    0x0002  Obfuscate Funcs</strong></span>

ObfuFuncHashSeed: FF 29 24 50 76 F6 A4 13 77 0D 5E 38 79 9F 8F C2 
Bytecode_XorKey: 01806081
IncludeXorKey[should be 0xE9FC23B1]: E9FC23B1
DisableCheckingOfLicenseRestrictions: 0
CustomErrCallbackHandler: &lsquo; _event_handler&rsquo;
Enable_auto_prepend_Append_file: 0
Customised error messages entries: 0x00
Include file protection entries: 0x00
Server restrictions entries: 0x1C
<span class="bold"><strong>#1 Domains: ajaxstat.net  | 
...
#28 IPs: 195.80.151.59_NetMask(255.255.255.255),  | 
</strong></span>Adler32_CRC for &lsquo;&lt;?php //... ?&gt;&rsquo; and calculated MATCH. CRC: EB60391D
IC_HeaderEx start: 01E7
IC_HeaderEx end: 020F  IC_Header HeaderSize: 021F</pre><p>Among many others, the highlighted lines provide information about the selected obfuscation methods (variables and functions) and the list of the server restrictions. </p><p>As it seems, it is a widely implemented pack &ndash; this particular compilation was supposed to serve 28 different sites, most of them specified by IP addresses in very distinct IP ranges. Reassuringly, the IP address 195.80.151.59 &ndash; from which we claimed earlier that the kit was stolen &ndash; is present on the list. </p><p>The listing contains the obfuscation hash seed for the function name, but as of writing this article, the exact algorithm for gaining it from the password was not identified. It is likely to be some form of a salted MD5 generated from the selected obfuscation password. </p><p>All in all, none of the available tools can produce a runnable source from the original, but they provide enough information to start the analysis. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2851944"></a>Reconstructing the code</h2></div></div></div><p>The code snippets from the previous section already illustrate that there is a huge problem when <span class="emphasis"><em>ionCube</em></span>&rsquo;s encrypting of functions option is selected. The PHP library names are replaced with a one-way hash generated from the function name perturbed by the obfuscation key [<span class="citation"><a href="#citation.4">4</a></span>]. </p><p>Since the obfuscated names depend on the selected password these are usually different between <span class="emphasis"><em>ionCube</em></span> installations, therefore no useful cross-reference table is available. </p><p>This is about the point that all available sources found on the Internet reached: they have the decompiled code with unrecognizable function names. The most complete (but still only a small step away) result was found on the site v0nsch3lling.tistory.com. Here, a handful of function names were guessed, though some of them incorrectly (see the moderately readable <a href="#figure.5">Figure 5</a>). </p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="&lsquo;Documented, decoded&rsquo; source." src="/uploads/images/figures/2012/10/blackhole-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;&lsquo;Documented, decoded&rsquo; source.</b></p></div><p>This &lsquo;documented&rsquo; source was later picked up and quoted in a few available Blackhole analyses [<span class="citation"><a href="#citation.5">5</a></span>]. </p><p>The obfuscated function names efficiently prevented further analysis. But we don&rsquo;t necessarily have to stop here. If enough effort is invested, a lot more results can be achieved. </p><p>As usual, the path to success was not an easy one. There would have been an easy way if I could have guessed the password used for obfuscation. I had my turn with five to 50 attempts to guess it, but it was not as trivial a password choice as for the admin panel. Having failed to find the right one, I had to proceed the hard way. </p><p>With systematic effort, most of the code could be cleared from the cryptic function names. At this point I have to confess that despite my best efforts I could not reach a runnable or even a syntactically correct source code. But that was never my goal; I just wanted to clean it up to a level that made it possible to understand the server operation. And that level was reached.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4624685"></a>Cookbook examples</h3></div></div></div><p>It is understandable that malware authors do not have time to write each module from scratch, thus they use the generally available example codes. For instance, it is easy to recognize that this code snippet is a standard <span class="emphasis"><em>MySQL</em></span> query sequence:</p><pre class="programlisting">if ( @!_obfuscate_DQgSFjcQI1w8Wxo7GjUTMhwUJhc1BiI&yuml;( @( &ldquo;MysqlHost&rdquo; ), @( &ldquo;MysqlUsername&rdquo; ), @( &ldquo;MysqlPassword&rdquo; ) ) )
{
   throw new exception( _obfuscate_DRgQDxsMHjgbHQcLKBgoNiQXCgYnGRE&yuml;( ) );
}
   if ( @!_obfuscate_DQsfFxgOEDw_MhIiDiRbORcpFiQqWwE&yuml;( @( &ldquo;MysqlDatabase&rdquo; ) ) )
{
   throw new exception( &ldquo;unable to select database&rdquo; );
}
_obfuscate_DQIuEgQHBzM_MTQkFD4YCjILNzcvCCI&yuml;( &ldquo;UPDATE Logs SET ExploitID=&rdquo;._obfuscate_DRkHJz41OylAAiEOLBQJXAMvJgUnIhE&yuml;
( $_GET[&lsquo;e&rsquo;] ).&rdquo;, FileID=&rdquo;._obfuscate_DRkHJz41OylAAiEOLBQJXAMvJgUnIhE&yuml;( $_GET[&lsquo;f&rsquo;] ).&rdquo;, IPStatus=1 WHERE (IP = inet_aton
(&lsquo;&rdquo;.$_SERVER[&lsquo;REMOTE_ADDR&rsquo;].&rdquo;&rsquo;)) and (Redirect=0) and (IPStatus=0) order by DateTime desc limit 1&rdquo; );
if ( _obfuscate_DQUzJRIPGzAQDgM3EwM5CzEUJgMWKSI&yuml;( ) == 0 )
{
   exit( );
}</pre><p>From the messages it is straightforward to identify the key functions, and rewrite the code in this more readable form:</p><pre class="programlisting">if ( @!mysql_connect( @( &ldquo;MysqlHost&rdquo; ), @( &ldquo;MysqlUsername&rdquo; ), @( &ldquo;MysqlPassword&rdquo; ) ) )
{
     throw new exception( mysql_connect_error( ) );
}
if ( @!mysql_select_db( @( &ldquo;MysqlDatabase&rdquo; ) ) )
{
     throw new exception( &ldquo;unable to select database&rdquo; );
}
mysql_query( &ldquo;UPDATE Logs SET ExploitID=&rdquo;.mysql_real_escape_string( $_GET[&lsquo;e&rsquo;] ).&rdquo;, FileID=&rdquo;.mysql_real_escape_string
( $_GET[&lsquo;f&rsquo;] ).&rdquo;, IPStatus=1 WHERE (IP = inet_aton(&lsquo;&rdquo;.$_SERVER[&lsquo;REMOTE_ADDR&rsquo;].&rdquo;&rsquo;)) and (Redirect=0) and (IPStatus=0) 
order by DateTime desc limit 1&rdquo; );
if ( mysql_error( ) == 0 )
{
     exit( );
}</pre><p>I could never be sure about mysql_real_escape_string(). It is clear that at that point of the code one of the input sanitizer functions should be present. It could alternatively be stripslashes(), but as it was used in contexts where I felt it was less likely to make sense, I picked the other one. </p><p>PHP experts will notice at this point that the code makes no sense this way, the fragment @( &ldquo;MysqlHost&rdquo; ) would not compile &ndash; clearly something is missing. Good observation, but more on this later&hellip; </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2812335"></a>Orientating constants</h3></div></div></div><p>Some of the function calls use such characteristic parameters that their value reveals the function itself. </p><p>As an example, from this code: </p><pre class="programlisting">_obfuscate_DTg5Dh0xBTxbFg4MARciKw88CwI4FDI&yuml;( &ldquo;LastLanguage&rdquo;, $AuthLanguage, _obfuscate_DSElGBkPOTMkCgoSJD0WDTIyKB0LFiI&yuml;
( ) + 3600 * 24 * 30, &ldquo;/&rdquo; );</pre><p>it was clear that it has something to do with some variables, a time duration and a path. The logical conclusion is that it is involved in setting a cookie, as this requires these two parameters that are normally not present in function parameter lists together.</p><pre class="programlisting">setcookie( &ldquo;LastLanguage&rdquo;, $AuthLanguage, time( ) + 3600 * 24 * 30, &ldquo;/&rdquo; );</pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3628768"></a>Code functionality analysis</h3></div></div></div><p>Encountering a piece of code like this:</p><pre class="programlisting">$good = true;
$i = 0;
while ( $i &lt; _obfuscate_DRAxBQwdBxskCygsEhQtIzAOJBUtNAE&yuml;( $arr ) )
{
    if ( $arr2[$i] != &ldquo;*&rdquo; &amp;&amp; $arr2[$i] != $arr[$i] )
    {
       $good = false;
       break;
    }</pre><p>one could easily guess that it is some sort of array comparison. And the obfuscated function in this case should have to do something with the upper boundary of the comparison, which in the case of arrays logically can be nothing else but count().</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2618762"></a>Compare the code with the output</h3></div></div></div><p>There are analyses available [<span class="citation"><a href="#citation.6">6</a></span>] that show screenshots of the admin panel. Unfortunately not from the 1.0.2 version, but it was possible to obtain screenshots of both a much newer version (1.2.4) and an earlier one (1.0.0 beta). The overall layout around the Files list did not change enough to make the basic elements unrecognizable.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Layout of version 1.2.4." src="/uploads/images/figures/2012/10/blackhole-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Layout of version 1.2.4.</b></p></div><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Layout of version 1.0.0" src="/uploads/images/figures/2012/10/blackhole-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Layout of version 1.0.0</b></p></div><p>This observation helped to determine that in this code snippet:</p><pre class="programlisting">echo ( &ldquo;Size&rdquo; );
echo &ldquo;:&lt;/div&gt; &ldquo;;
echo _obfuscate_DQkmBwc9GR0BMSMUPCQRJTgaHzcGCxE&yuml;( _obfuscate_DREhMjIUKiQPLx0kHA0pAw4qDjs DzI&yuml;
( ( &ldquo;FilesDir&rdquo; ).&rdquo;/&rdquo;.( $file[&lsquo;ID&rsquo;], $file[&lsquo;Title&rsquo;] ) ) );
</pre><p>_obfuscate_DREhMjIUKiQPLx0kHA0pAw4qDjs DzI&yuml; should be the built-in function filesize().</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2309053"></a>Ask the pro</h3></div></div></div><p>As a last resort, when my very limited knowledge of PHP was exhausted, I had to seek external help, and turned to an experienced PHP programmer (who happened to be a former colleague of mine, not unknown to regular readers of <span class="emphasis"><em>Virus Bulletin</em></span> [<span class="citation"><a href="#citation.7">7</a></span>]). He pointed out obvious (to him) mistakes, and made new observations about the missing pieces. </p><p>He discovered one of the reasons why the <span class="emphasis"><em>Dezender</em></span> output is not runnable (apart from the obvious fact that the function names are encrypted). Due to the internals of decryption, the methods for setting and getting the parameters in the config file are completely missing. Thus the previously mentioned database connection code had the form: </p><pre class="programlisting">if ( @!mysql_connect( @( &ldquo;MysqlHost&rdquo; ), @( &ldquo;MysqlUsername&rdquo; ), @( &ldquo;MysqlPassword&rdquo; ) )</pre><p>whereas it should be:</p><pre class="programlisting">if ( @!mysql_connect( @Config::get( &ldquo;MysqlHost&rdquo; ), @ Config::get ( &ldquo;MysqlUsername&rdquo; ), 
@ Config::get ( &ldquo;MysqlPassword&rdquo; ) )</pre><p>In these cases the decoder either left the method blank, or even worse, incorrectly inserted the upcoming decoded function call(s) found in the same source line. </p><p>This created indecipherable monsters in the code: </p><pre class="programlisting">$res = -&gt;_obfuscate_DRkHJz41OylAAiEOLBQJXAMvJgUnIhE&yuml;-&gt;_obfuscate_DRkHJz41OylAAiEOLBQJXAMvJgUnIhE&yuml;
( &ldquo;select Sort from FilesInRules where (FileID = &ldquo;._obfuscate_DRkHJz41OylAAiEOLBQJXAMvJgUnIhE&yuml;( $fileID ).&rdquo;) 
and (RuleID = &ldquo;._obfuscate_DRkHJz41OylAAiEOLBQJXAMvJgUnIhE&yuml;( $ruleID ).&rdquo;)&rdquo; );</pre><p>whereas it was supposed to be the more friendly:</p><pre class="programlisting">$res = db::query( &ldquo;select Sort from FilesInRules where (FileID = &ldquo;.mysql_real_escape_string( $fileID ).&rdquo;) 
and (RuleID = &ldquo;.mysql_real_escape_string( $ruleID ).&rdquo;)&rdquo; );</pre><p>Looking deeper into this phenomenon revealed that this type of function name omission persists for all public class functions calls when they are called from a file other than the one that defined it.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4908151"></a>Origins</h3></div></div></div><p>When it comes to the question of from where a particular malware specimen originated, researchers are in a very comfortable situation. We just flip a coin and if it&rsquo;s heads, then it&rsquo;s China; if it&rsquo;s tails, then it&rsquo;s Russia. If it lands on the edge, then we conclude government sponsored espionage. But there is a more scientific approach as well. </p><p>The first thing to investigate is the code itself. At this point we pretend that we have no information gathered from the Internet and underground forums, and rely only on what we have in our hands. What could have been the most revealing factor &ndash; the comments inside the source code &ndash; were unfortunately removed when the code was treated with <span class="emphasis"><em>ionCube</em></span>. Fortunately, enough traces were left though. </p><p>The default time zone of the installation is hard-coded to Europe/Moscow. And it is set in adm.php, the admin interface, and not in config.php, where the settings are expected to modify on installation. </p><p>The user interface supports two languages, English and Russian, the default being set to Russian. The user interface could support several languages in lang.php. The only alternative language supported in the code with its own code branch is Russian. So the two main options are that it was written by an English speaker for the Russian market or by a Russian person for the international market. The admin interfaces experienced in the wild were set to Russian language each time I tried to access them. </p><p>The text and variable names in the English user interface are noticeably (even for a non-native English speaker) incorrect in places. On the other hand (and as far as a non-Russian speaking person can determine), the Russian interface texts are grammatically more correct. </p><p>There are two character encodings supported in the code with conversion functions: UTF-8, which is a standard, and <span class="emphasis"><em>Windows</em></span>-1251, which is a Cyrillic encoding. </p><p>And as an additional hint, the date format in the code in all places is set to little-endian (D-M-Y). It applies to the majority of the planet, including Russia. The two notable exceptions are fortunately the other two usual suspects; USA uses middle-endian format (M-D-Y), while China uses big-endian format (Y-M-D). </p><p>All the evidence supports the assumption that the development of the Blackhole exploit kit took place in Russia. </p><p>I can&rsquo;t say that this was a great surprise, because the first version of this kit was announced on Russian underground forums, and the author claims to be Russian, but it is always good to support anecdotal evidence with facts that are not as trivial to fake as forum comments. </p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="The latest version was also announced in Russian by the author." src="/uploads/images/figures/2012/10/blackhole-8-600.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;The latest version was also announced in Russian by the author.</b></p></div><p>(For a larger version of the image in Figure 8 click <a href="/uploads/images/figures/2012/10/blackhole-8-large.jpg" target="_top">here</a>.)</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3291713"></a>The author</h3></div></div></div><p>The author of the Blackhole kit is reported to be a Russian individual known by the handle Pauncher. More precisely, when the first version of the kit appeared in 2010, there were three people associated with it. The English translation of the readme file of version 1.0 listed Legacy (sales), Pauncher (programmer) and Naron (founder). </p><p>As time passed, only Pauncher remained involved with the development and distribution of the kit. </p><p>The announcements of the new versions contain an email address and an ICQ number serving as contacts for the author. The very same contacts are listed for the http://crypt.am site, which provides service for inline crypting of scripts in the following construction: </p><pre class="programlisting">One-time crypt (5 WMZ) &ndash; each crypt worths money
Monthly unlim (50 WMZ) &ndash; unlimited crypts count in one month</pre><p>This service seems to be a spin-off enterprise, logically benefiting from the development of the JavaScript cryptor used in the Blackhole main script.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2190720"></a>Conclusion</h2></div></div></div><p>By now we have reached the point where the Blackhole server code is readable enough to understand its overall structure and functionality. </p><p>The second part of this article will build on this knowledge and focus on the operation of a Blackhole server. We will examine in detail what happens on the server side during a typical attack, what kind of interaction goes on between the infected-to-be host and the infecting hosting server. </p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3493469"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Howard, F. Exploring the Blackhole exploit kit. Sophos Naked Security blog. <span class="bibliosource"><a href="https://nakedsecurity.sophos.com/exploring-the-blackhole-exploit-kit" target="_blank">http://nakedsecurity.sophos.com/exploring-the-blackhole-exploit-kit</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] BlackHole Exploit Kit 1.0.2 download. The Hacker News. <span class="bibliosource"><a href="https://thehackernews.com/2011/05/blackhole-exploit-kit-download.html" target="_blank">http://thehackernews.com/2011/05/blackhole-exploit-kit-download.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Blackhole exploit kit now being offered for free. Infosecurity Magazine. <span class="bibliosource"><a href="http://www.infosecurity-magazine.com/view/18159/blackhole-exploit-kit-now-being-offered-for-free/" target="_blank">http://www.infosecurity-magazine.com/view/18159/blackhole-exploit-kit-now-being-offered-for-free/</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] ionCube Forum. <span class="bibliosource"><a href="http://forum.ioncube.com/viewtopic.php?p=3827&amp;sid=255b9bc1dbcb12a902be8c1713900d3e" target="_blank">http://forum.ioncube.com/viewtopic.php?p=3827&amp;sid=255b9bc1dbcb12a902be8c1713900d3e</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] Black Hole Exploit Kit 1.0.2 Analysis. SoftForum. <span class="bibliosource"><a href="https://sofosecurity.files.wordpress.com/2011/10/blackholeexploitkit_kr_softforum.pdf" target="_blank">http://sofosecurity.files.wordpress.com/2011/10/blackholeexploitkit_kr_softforum.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] Inside Blackhole Exploits Kit v1.2.4 &ndash; Exploit Kit Control Panel. Malware don&rsquo;t need Coffee. <span class="bibliosource"><a href="http://malware.dontneedcoffee.com/2012/07/inside-blackhole-exploits-kit-v124.html" target="_blank">http://malware.dontneedcoffee.com/2012/07/inside-blackhole-exploits-kit-v124.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] Papp, G. &lsquo;Signatures are dead.&rsquo; &lsquo;Really? And what about pattern matching?&rsquo; Virus Bulletin, April 2010. <span class="bibliosource"><a href="/virusbulletin/2010/04/signatures-are-dead-really-and-what-about-pattern-matching
" target="_top">http://www.virusbtn.com/virusbulletin/archive/2010/04/vb201004-signatures-are-dead</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] ionCube PHP Encoder features. <span class="bibliosource"><a href="http://www.ioncube.com/sa_encoder.php?page=features" target="_blank">http://www.ioncube.com/sa_encoder.php?page=features</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Inside a Black Hole: Part 1&url=https://www.virusbulletin.com/virusbulletin/2012/10/inside-black-hole-part-1"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2012/10/inside-black-hole-part-1'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2012/10/inside-black-hole-part-1&title=Inside a Black Hole: Part 1"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2012/10/inside-black-hole-part-1&t=Inside a Black Hole: Part 1"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2012/10/inside-black-hole-part-1"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>