<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: BYOT: Bring Your Own Target</title>
<meta name="description" content="The author of Simbot doesn’t take anything for granted: all the necessary components for the malware’s execution are bundled and dropped onto the system, including the relevant vulnerable application for exploitation and regular Windows system binaries." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1681;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201403-Simbot"></a>BYOT: Bring Your Own Target</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2014-03-04</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Gabor</span> <span class="surname">Szappanos</span></h3><span class="orgname">Sophos</span>, <span class="orgdiv">Hugary</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>The author of Simbot doesn&rsquo;t take anything for granted: all the necessary components for the malware&rsquo;s execution are bundled and dropped onto the system, including the relevant vulnerable application for exploitation and regular Windows system binaries.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2504" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2504" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id2773617"></a></span></dt><dt><span class="sect1"><a href="#id3364387">Installation process</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4230767">1. Exploited carrier document</a></span></dt><dt><span class="sect2"><a href="#id3908063">2. First-stage dropper</a></span></dt><dt><span class="sect2"><a href="#id4645634">3. Intermediate dropper</a></span></dt><dt><span class="sect2"><a href="#id4852150">4. Installer</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2924810">Loading process</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id2977624">Science.exe</a></span></dt><dt><span class="sect2"><a href="#id3885481">Shellcode from science.exe</a></span></dt><dt><span class="sect2"><a href="#id2547551">Memory loader</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3590348">Main payload</a></span></dt><dt><span class="sect1"><a href="#id3146440">Conclusion</a></span></dt><dt><span class="sect1"><a href="#id3996135">Appendix: Files with the same certificate</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2773617"></a></h2></div></div></div><p>It is nothing new for a piece of malware to exploit a vulnerability found in an application &ndash; in fact, that is the routine procedure for infecting a computer. This approach does, however, have a weak point: the application in question must be installed on the target computer; furthermore, it must be a vulnerable version of it.</p><p>One malware sample we analysed recently breaks the traditional mould in two ways: the purpose of the exploitation is not intrusion, but to minimize the detectable system footprint, and it does not rely on preinstalled applications. Apart from that, so as not to break with tradition completely, the system infection is achieved via a common <span class="emphasis"><em>Word</em></span> exploitation technique.</p><p>Following successful infection, only a handful of clean applications are left on the system, along with the encrypted payload file and a single registry key, which is a crucial element of the infection scheme.</p><p>The issue of whether or not the appropriate version of the vulnerable application is installed on the target system is eliminated simply: the trojan drops the vulnerable application onto the system itself, and uses it for its own purposes. In fact, the author of this malware does not take anything for granted: all the necessary components for the malware&rsquo;s execution are bundled and dropped onto the system, including regular <span class="emphasis"><em>Windows</em></span> system binaries.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3364387"></a>Installation process</h2></div></div></div><p>The installation of the malware is a little complicated. It starts with a document exploit, runs through multiple intermediate dropper stages, and concludes in the final infected state with a handful of clean components and the encrypted payload on the system. The process is summarized in <a href="#figure.1">Figure 1</a>.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Installation flow of Simbot." src="/uploads/images/figures/2014/03/Simbot-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Installation flow of Simbot.</b></p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4230767"></a>1. Exploited carrier document</h3></div></div></div><p><span class="bold"><strong>File size:</strong></span> 830,336 bytes</p><p><span class="bold"><strong>SHA1:</strong></span> 0ddae43498e1b03a274f8ca8b32cd48a1a440e7d</p><p><span class="bold"><strong>MD5: </strong></span>6282568857a120a93de3af57e21952e1</p><p>The starting point of the infection chain is an encrypted <span class="emphasis"><em>Excel</em></span> workbook with default hard coded null password, the meaning of which was explained in [<span class="citation"><a href="#citation.1">1</a></span>]. The same vulnerability as described in [<span class="citation"><a href="#citation.1">1</a></span>] (CVE 2012-0158) was used in this case as well.</p><p>The carrier document is a very unique compound, as illustrated in <a href="#figure.2">Figure 2</a>. Normally, in document exploitations we see either <span class="emphasis"><em>Excel</em></span> workbooks or <span class="emphasis"><em>Word</em></span> RTF documents that contain the (usually multi staged) shellcode with the encrypted payload executable appended. In this case, the first stage shellcode is within an encrypted <span class="emphasis"><em>Excel</em></span> workbook, the second stage shellcode is in an appended <span class="emphasis"><em>Word</em></span> RTF fragment, and then comes the encrypted executable. It gives the impression of a project that has been copy pasted from different sources with minimal integration effort.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Exploit document structure." src="/uploads/images/figures/2014/03/Simbot-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Exploit document structure.</b></p></div><p>The encrypted workbook contains the first stage shellcode, which enumerates open file handles, checking for the file size. The file size must be exactly 830,336 bytes &ndash; the size of the carrier workbook. Then it reads in, decodes and executes the content from file offset 0x1de00, at which the hexadecimal text representation of the second stage shellcode is located.</p><p>The second-stage shellcode once again checks for the correct file size for the carrier workbook and searches for the start marker for the embedded .exe (TSRQPONMP). If the marker is found, the DWORD following it is used as the length of the embedded file, followed by the whole payload content, which will be encrypted with a single byte XOR encoding, the key being decremented by one after each byte.</p><p>After the second stage code, further shellcode fragments are found, which are not used and are corrupted when decrypting the shellcode (running over the real length). This is an indication that the carrier was created by reusing older components and overwriting the (longer) shellcode with the new code, not caring about what happens to the trailing remainder of the old code. Again, this underlines the minimal integration effort made in the creation of the exploited workbook.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3908063"></a>2. First-stage dropper</h3></div></div></div><p><span class="bold"><strong>File size: </strong></span>654,675 bytes</p><p><span class="bold"><strong>SHA1: </strong></span>16fbb14ef6c7ae9c401859aedf99cfd762f00794</p><p><span class="bold"><strong>MD5: </strong></span>dfed4bdf77892f2c62b8c68782c16132</p><p>This component is a very simple dropper. It reads the next stage executable from offset 0x1800 in 0x400 byte chunks, saves it to a temporary file in the %TEMP% folder, then executes the dropped file.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4645634"></a>3. Intermediate dropper</h3></div></div></div><p><span class="bold"><strong>File size: </strong></span>647,168 bytes <span class="bold"><strong></strong></span></p><p><span class="bold"><strong>SHA1:</strong></span> 79ef9296a2a0913e60a925da2f9d061ae3a364c7</p><p><span class="bold"><strong>MD5:</strong></span> 91d26990f22a4584e631395f5ae234c3</p><p>This dropper searches for a mutex named &lsquo;Sample06&rsquo; to determine whether another instance of the dropper is already running &ndash; if it finds the mutex, it exits.</p><p>It checks for the presence of a debugger by looking for magic bytes in the allocated heap:</p><div class="itemizedlist"><ul type="disc"><li><p>0ABABABABh (used by <span class="emphasis"><em>Microsoft</em></span>&rsquo;s debug-built HeapAlloc() implementation to mark &lsquo;no man&rsquo;s land&rsquo; guard bytes after allocated heap memory)</p></li><li><p>0BAADF00Dh (used by <span class="emphasis"><em>Microsoft</em></span>&rsquo;s debug-built HeapAlloc() implementation to mark uninitialized allocated heap memory)</p></li><li><p>0FEEEFEEEh (used by <span class="emphasis"><em>Microsoft</em></span>&rsquo;s debug-built HeapFree() implementation to mark freed heap memory).</p></li></ul></div><p>If a debugger is found, only an empty window with the title &lsquo;NewSetup&rsquo; is displayed.</p><p>Otherwise, in an untainted environment, it decodes an offset independent code (using a single-byte XOR algorithm, with key 0x97), and executes it.</p><p>This component creates the HKLM\SOFTWARE\Microsoft\Windows\Help -&gt; Config registry key and saves the encrypted configuration data there (see <a href="#figure.3">Figure 3</a>).</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Configuration data stored in the registry." src="/uploads/images/figures/2014/03/Simbot-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Configuration data stored in the registry.</b></p></div><p>If, for any reason, saving the configuration data to the registry fails, then as a backup method, the same data is dumped into the file C:\Documents and Settings\All Users\NetWork\t1.dat.</p><p>This configuration data is used by the final stage payload, with the C&amp;C server address extracted from the key value of the file.</p><p>Finally, it decodes and executes the next stage dropper.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4852150"></a>4. Installer</h3></div></div></div><p><span class="bold"><strong>File size:</strong></span> 466,872 bytes</p><p><span class="bold"><strong>SHA1: </strong></span>5a22efba829c259f1cb17f9ffe529c398397e25c</p><p><span class="bold"><strong>MD5:</strong></span> 138f32de8f53fe651a7b6967c63cf7ac</p><p>This component is actually a <span class="emphasis"><em>Windows</em></span> DLL with obfuscated entry code and a lot of redirections.</p><p>It drops the following files:</p><div class="itemizedlist"><ul type="disc"><li><p>C:\Documents and Settings\All Users\NetWork\Config.dat (encrypted main payload)</p></li><li><p>C:\Documents and Settings\All Users\NetWork\DDVCtrlLib.dll (clean DLL, needed for science.exe to execute)</p></li><li><p>C:\Documents and Settings\All Users\NetWork\DDVEC.dll (clean DLL, needed for science.exe to execute)</p></li><li><p>C:\Documents and Settings\All Users\NetWork\science.exe (clean executable).</p></li></ul></div><p>In order to survive a reboot, it registers the dropped executable as a service, passing an enormously long command line with three command-line parameters:</p><pre class="programlisting">HKLM\SYSTEM\CurrentControlSet\Services\NetWork Service  ImagePath:
C:\Documents and Settings\All Users\NetWork\science.exe LLLLYIIII7QZAkA0D2A00A0kA0D2A12B10B1ABjAX8A1uIN2
uNkXlMQJLePvbUPePJgW59t7kwOKDSPJgg5hh2ZezxFVXJg75xlr
ebuXbtKyWqUXp5FKfZvYPKwpEzTm7xosdLUO7w5zXLnN0dVNKO72
eKLYKJs3ROEucKypdnkgEVP5PgpUPLKRVtLLKT6ELLKw6WxlKQnw
PLKp6u6vYPOr8RUzRnkyHlKRs7LNkpTvzt8w

...{7760 further ASCII characters skipped}...

pW2kOhRD2A00A0kA0D2A12B10B1ABjAX8A1uIN2unkZLk1jLGpdB
Wpwpo73uKTWkwOIdU0iWW5kX0z5zjfTxO7rexlsu2uM2TKxGbejP
5Fn6HVyPXG1Ul4M7XoRtZ5yW2ezXNNxP4VlkO73uilYKhSSR856S
HIsTnkgE6PGpUPUPLKPvtLNkafWllKr 100 <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="47170407">[email&#160;protected]</a>
</pre><p>The first parameter is intended to cause a buffer overflow in the clean executable and, by invoking a shellcode, run the loader for Config.dat. It should be noted that, of the three parameters passed in the command line, the second bears no relevance, but the last one is of crucial importance.</p><p>Not wanting to wait for the next reboot, CreateProcess is called with the same parameter to execute the payload immediately (the final couple of bytes differ; also the second command-line argument, 100, is replaced with 300).</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2924810"></a>Loading process</h2></div></div></div><p>When all of the required pieces have been installed on the system, the malware deletes the temporary components, and the infected computer is ready for (ab)use. During system start up, the dropped science.exe file is loaded as a service, with a malicious command line.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2977624"></a>Science.exe</h3></div></div></div><p><span class="bold"><strong>File size: </strong></span>112,064 bytes</p><p><span class="bold"><strong>SHA1: </strong></span>6261e967baf09e608e5d5b156a3701339c73fb95</p><p><span class="bold"><strong>MD5: </strong></span>0070a38553997de066b2aba8c0574d6f</p><p>This is a legitimate, digitally signed clean application (certificate issued to <span class="emphasis"><em>Jinhua 9158 Network Science and Technology Co. Ltd</em></span>), the original name of which is Download.exe. Looking up other files signed by the same certificate, we found a handful of other application installers that dropped similar versions of Download.exe (see Appendix). All of them proved to be vulnerable to the same abuse, but due to reorganization of the code and memory layout, modifications would be needed in order for them to be used in this way.</p><p>As shown in <a href="#figure.4">Figure 4</a>, the science.exe file is intact, not modified by the malware author.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Digital signature checked OK." src="/uploads/images/figures/2014/03/Simbot-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Digital signature checked OK.</b></p></div><p>The program is executed either via the registry key, or using the CreateProcess API. In both cases the extremely long command line is passed to it. Either way, the long command line causes a stack overflow, and leads to the execution of a piece of shellcode. Although not obvious at first, the shellcode is actually hidden within the command line argument itself.</p><p>Crash dumps show that an access violation occurs at virtual offset 404350h in science.exe, which is an interesting coincidence (actually, a lot more than a coincidence), given that the last command-line argument, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c9998a89">[email&#160;protected]</a>, is exactly this value in hexadecimal representation.</p><p>Looking at the executable in a disassembler, one can observe that at this virtual address there is a POP ECX, RET sequence:</p><pre class="programlisting">.text:00404350 59  pop ecx
.text:00404351 C3  retn
</pre><p>A bit of debugging reveals that, upon reaching this point, the stack contains the command-line parameter address and a zero; the code above pops the zero and transfers execution to the first byte of the command line.</p><p>The mechanism of this exploitation is exactly the reason why the <span class="emphasis"><em>MSDN</em></span> library documentation contains warnings such as the following for some of the function references:</p><p>&lsquo;U<span class="emphasis"><em>sing vsprintf, there is no way to limit the number of characters written, which means that code using this function is susceptible to buffer overruns. Use _vsnprintf instead, or call _vscprintf to determine how large a buffer is needed</em></span>.&rsquo;</p><p>The overflow occurs when the command-line arguments are written out to the log file (Download.log) and vsprintf is used on this buffer without any precaution. This will cause an overflow if the command line is longer than 0x2000 bytes.</p><pre class="programlisting">char *write_log(int a1, char *Format, ...)
{
  va_list va; // [sp+200Ch] [bp+Ch]@1
  char *result; // <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ef8a8e97afde">[email&#160;protected]</a>
  char Dest; // [sp+0h] [bp-2000h]@2
  va_start(va, Format);
  result = Format;
  if ( Format )
  {
    result = (char *)vsprintf(&amp;Dest, Format, va);
    if ( (unsigned int)result &lt; 0x2000 )
      result = (char *)CLog__ADD_Log(g_Log, &amp;Dest, result, a1);
  }
  return result;
}
</pre><p>The function calls vsprintf to print the argument list into a string buffer allocated with a size of 0x2000 bytes; the format string is the command-line argument, which in our case turns out to be longer than the allocated space for the buffer. As a result, vsprintf will overwrite the return address on the top of the stack.</p><p>The command-line argument is filled with junk characters just to make sure that the <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="57071417">[email&#160;protected]</a> at the end will end up at the location at which the return address is stored.</p><p>This way, the return at the end of the function:</p><pre class="programlisting">add  esp, 2000h
retn
</pre><p>will position the stack pointer to the 0x404350 DWORD on the overwritten stack.</p><p>To illustrate this, the top of the stack on the entry of the write_log() function looks like this:</p><div class="informaltable"><table border="1"><colgroup><col /></colgroup><tbody><tr><td align="center">return address</td></tr><tr><td align="center">Param 1: log entry ID</td></tr><tr><td align="center">Param 2: address of command line</td></tr></tbody></table></div><p>Then, after the stack overrun on the exit of write_log(), the stack will contain:</p><div class="informaltable"><table border="1"><colgroup><col /></colgroup><tbody><tr><td align="center">0x404350</td></tr><tr><td align="center">Param 1: log entry ID</td></tr><tr><td align="center">Param 2: address of command line</td></tr></tbody></table></div><p>When the execution returns to offset 0x404350, the first value is popped from the stack, leaving only the entry ID and the address of the command line:</p><div class="informaltable"><table border="1"><colgroup><col /></colgroup><tbody><tr><td align="center">Param 1: log entry ID</td></tr><tr><td align="center">Param 2: address of command line</td></tr></tbody></table></div><p>At offset 0x404350 in the program, a function epilogue is found:</p><pre class="programlisting">.text:00404350  pop  ecx
.text:00404351  retn
</pre><p>This will pop the log entry ID from the top of the stack, and return to the next address found on the stack, which is the address of the command line. Consequently, the execution starts at the first byte of the command-line argument.</p><p>I should mention that this is a very simple stack overflow exploitation &ndash; a textbook example that was commonly being practised over 10 years ago. Nowadays, secure coding methods make applications a lot harder to break. Nevertheless, the malware writers only needed to find one vulnerable application, and use it for their purpose.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3885481"></a>Shellcode from science.exe</h3></div></div></div><p>At first glance, the command-line parameter looks like a random string:</p><pre class="programlisting">LLLLYIIII7QZAkA0D2A00A0kA0D2A12B10B1ABjAX8A1uIN2uNkXl
MQJLePvbUPePJgW59t7kwOKDSPJgg5hh2ZezxFVXJg75xlrebuXbt
KyWqUXp5FKfZvYPKwpEzTm7xosdLUO7w5zXLnN0dVNKO72eKLYKJs
3ROEucKypdnkgEVP5PgpUPLKRVtLLKT6ELLKw6WxlKQnwPLK...
</pre><p>But in fact it is a valid 32-bit <span class="emphasis"><em>Intel</em></span> code, starting with a short decoder, which is followed by the decrypted shellcode. It is very likely that it was created by the unicode_upper encoder of the Metasploit toolkit. This encoder generates a final form where each byte of both the decoder and the decoded content is an alphanumeric character &ndash; very suitable if it has to be passed as a command line. However, an important part of the shellcode usually cannot be represented in ASCII bytes. This is the prologue, which is responsible for determining the exact memory position. Without knowing this, it is not possible to decode the main shellcode body.</p><p>Normally, the Metasploit decoders begin with a &lsquo;get EIP&rsquo; fragment, similar to this:</p><pre class="programlisting">fabs
fnstenv byte ptr [esi-0Ch]
pop  ebp
</pre><p>First, a random floating point instruction is executed, and then the fnstenv instruction is used to get the floating point environment structure. Among many properties, at offset 0x0C this structure contains the EIP of the last executed floating point instruction (fabs, in this case). The structure is aligned 0x0C bytes into the stack, thus the top of the stack will just contain the EIP value, which is later popped into the EBP register. This is a commonly used, portable solution, but has one major disadvantage: the byte code of the floating point instructions contains non-printable characters, thus can&rsquo;t be used in a string command-line parameter.</p><p>The shellcode used in the Simbot infection scheme is limited by the fact that it also has to serve as a command line parameter, and can thus only contain printable characters. This means that it can&rsquo;t contain the usual code to find its own memory offset, but it can make use of the fact that it knows the exact stack layout during the exploitation &ndash; thanks to the very controlled environment (i.e. only the specific science.exe, dropped during the installation, has to be exploited).</p><p>Simbot&rsquo;s shellcode uses the following &lsquo;get EIP&rsquo; snippet:</p><pre class="programlisting">dec esp
dec esp
dec esp
dec esp
pop ecx
</pre><p>The advantage is obvious: all of these instructions are represented by printable characters. But the exploitation must be very strict; this prologue requires the stack pointer to be controlled to an exact value. In the previous section we saw that this is the case &ndash; the stack pointer is well known by the time the execution reaches this point.</p><p>The code was reached via a RET instruction from science.exe, therefore decreasing the stack pointer by four will position it back to the memory address of the command line, which coincides with the start of the shellcode, the two being the same.</p><p>The first part of the shellcode is the unicode_upper decoder, which performs a single-byte XOR decryption, the key value being modified in each loop.</p><p>After the decoding, a more or less traditional piece of shellcode is found.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Unicode_upper decoder." src="/uploads/images/figures/2014/03/Simbot-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Unicode_upper decoder.</b></p></div><p>(<a href="/uploads/images/figures/2014/03/Simbot-5-large.jpg" target="_top">Click here </a>to view a larger version of Figure 5.)</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="A more or less traditional piece of shellcode is found." src="/uploads/images/figures/2014/03/Simobt-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;A more or less traditional piece of shellcode is found.</b></p></div><p>The API resolver code (a combination of shift left by three bytes, and a bytewise XOR of the last byte of the checksum with the actual character of the name) is unusual, and has not yet been seen in other samples.</p><p>The shellcode reads the content of Config.dat (the main payload) from the folder from which the exploited science.exe was executed, and decrypts it.</p><p>The decryption has two layers: first is a single-byte XOR, the key being the first byte of the file; the second is a running key single-byte XOR, which starts with 1, and is incremented in each loop.</p><p>Finally, it executes the decrypted content.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2547551"></a>Memory loader</h3></div></div></div><p>The decrypted Config.dat contains the embedded main payload, which starts at offset 0xc13, and a loader code.</p><p>The loader code, executed by the shellcode, does the necessary housekeeping to transfer this embedded data (which is actually a <span class="emphasis"><em>Windows</em></span> PE executable) to an executable memory image: it fixes the section permissions, resolves the imports, and performs the necessary relocations. This way, the payload can be decoded and executed without hitting the hard disk (and without giving on-access anti virus products the chance to check and detect it).</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3590348"></a>Main payload</h2></div></div></div><p>The final payload is a <span class="emphasis"><em>Windows</em></span> DLL with an obfuscated entry code, using a couple of redirections before reaching the DllMain function, which itself is also obfuscated to make tracing more complicated.</p><p>It contains yet another encrypted PE loader code and a large, 0x18A00-byte-long encrypted embedded DLL which is packed using the zlib algorithm and dropped as instsrv.dat in the %TEMP% directory. This loader is very similar to the loader of Config.dat. It serves as a back up loader (in case the execution runs into access restrictions), which checks the OS version: if it is 5.2 (<span class="emphasis"><em>Windows 8</em></span>), then it injects the loader code into the explorer.exe process; if it is anything else, it injects the loader code into dwm.exe.</p><p>The injected code uses a UAC bypassing technique that is very similar to [<span class="citation"><a href="#citation.2">2</a></span>]. Using this, it executes the instsrv.dat file dropped in the %TEMP% directory.</p><p>Instsrv.dat is a PE executable that first adds %ALLUSERSPROFILE%\NetWork\science.exe to the DEP exclusion list by invoking the NoExecuteAddFileOptOutList export of the sysdm.cpl applet, passing the path name as a parameter. After that, it terminates the science.exe process, deletes the NetworkService service, and registers science.exe with the exploiting buffer as a service again. Finally, it restarts the service.</p><p>Now back to the final payload.</p><p>It connects to 59.188.23.121 (which is a dial-up IP located in Hong Kong) on ports 8001 and 8433.</p><p>It loads configuration data from the registry key HKLM\SOFTWARE\Microsoft\Windows\Help -&gt; Config (two byte XOR with key 0x004f). Alternatively, if the key for some reason cannot be created in the dropping process, it reads from the file %ALLUSERSPROFILE%\NetWork\t1.dat. The decoded content has the value 585e9b41ebebe0126cfa878bdea036bc.</p><p>This is the encoded form of the C&amp;C IP address. Interestingly, the trojan does not decrypt it, rather it is later brute-forced to match the IP &ndash; all possible IP address strings are generated and tested. The IP addresses (two of them, both the same) are decoded character-by-character.</p><p>Given the complexity of the installation and the loading process, the backdoor component has disappointingly little functionality: once the connection is established, it sends and receives data. The data is BASE64 encoded and zlib compressed (version 1.2.3 code is compiled into the code), it is decompressed in memory, and executed. An uncompressed PE executable in the network traffic would be too obvious a sign of suspicious activity, hence the compression.</p><p>So the result of all the efforts described here is &lsquo;only&rsquo; to open a channel to the infected computer and facilitate the execution of arbitrary code.</p><p>At the time of writing this article, we are not aware of the components that are pushed to the infected computer, but it would be safe to say that the usual data stealing and remote access components are the most likely candidates.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3146440"></a>Conclusion</h2></div></div></div><p>It is common in APT-related attack scenarios for an application vulnerability (usually in one of the <span class="emphasis"><em>MS Office</em></span> suite) to be used to breach a system and infect it. The unique feature in Simbot is that an additional exploitation is utilized, this time to hide the presence of the malware on the infected system, and persist after the system restarts.</p><p>This malware does not rely on a preinstalled application for infection, rather it carries and drops the target itself &ndash; a very convenient approach to ensure that the system contains a vulnerable version of the application in question. Even if the vulnerable application is fixed by the vendor, and the fix is distributed to all users, this will not affect the malware: as long as the malware authors have a single vulnerable version, no matter how old, they can bundle it with the installation package, and drop it onto the system. As mentioned previously, this malware does not take anything for granted, carrying all the necessary components (both malicious and clean) itself.</p><p>Ironically, the original purpose of science.exe, as its developer intended, was to download executable updates. Indeed, the Simbot backdoor makes use of this downloader application to download executable updates, but not by using the natural functionality of the downloader, rather by exploiting its logging function to load and execute a binary payload that, after some twists and turns, does the downloading itself.</p><p>After a successful infection we will find the following on the system:</p><div class="itemizedlist"><ul type="disc"><li><p>A clean signed application registered for start up</p></li><li><p>Two clean DLL files needed for the execution of the clean executable</p></li><li><p>An encrypted payload file</p></li><li><p>A registry subkey that contains an encrypted shellcode.</p></li></ul></div><p>This is not very much on which to base a reliable detection. And this is a functioning backdoor infection &ndash; I can&rsquo;t think of a case with a less detectable fingerprint on the infected system.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4106542"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Szappanos, G. Needle in a haystack. Virus Bulletin, February 2014, p.19. <span class="bibliosource"><a href="/uploads/pdf/magazine/2014/201402.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2014/201402.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Windows 7 UAC whitelist: Proof-of-concept source code. <span class="bibliosource"><a href="http://www.pretentiousname.com/misc/W7E_Source/Win7Elevate_Inject.cpp.html" target="_blank">http://www.pretentiousname.com/misc/W7E_Source/Win7Elevate_Inject.cpp.html</a></span>.</p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3996135"></a>Appendix: Files with the same certificate</h2></div></div></div><p>The clean science.exe application was signed by &lsquo;JINHUA 9158 NETWORK SCIENCE AND TECHNOLOGY CO., LTD.&rsquo; This company is tied to the website 9158.com, which is registered to <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="670a0e0c02011227135513554904080a">[email&#160;protected]</a>, to the organization Jinhua 9158Network Science and Technology Co., Ltd, in Hangzhou, China.</p><p>We were able to identify a number of further files in our collection that use a certificate from the same issuer; all of them were clean installers. Some of them (the 9158 KTV installers) dropped Download.exe as a component. Clearly, this application would be the source of the exploited binary.</p><div class="itemizedlist"><ul type="disc"><li><p>4d2f9aac4408237a56dadb89e256e637a703b4ee: 9158 Virtual Camera installer &ndash; looks legitimate</p></li><li><p>4d64bb02d287f2f4e3707f8f7c64a92fbe6621b5: 9158 KTV installer (a version of Download.exe is installed) &ndash; looks legitimate</p></li><li><p>4f1e67bfe5c2698698f7abffbfa740507aaaeb49 : CHOUZHOUGame (an add-on of some sort, not a standalone application) &ndash; looks legitimate</p></li><li><p>878f09552e7277544f6b3702e310757c0bde1b42: DuoDuoVideoGame installer (a version of Download.exe is installed) &ndash; looks legitimate</p></li><li><p>9e7cb141eb97e4a83946b3494344b55bbbf0691a: 9158 KTV installer (a version of Download.exe is installed) &ndash; looks legitimate</p></li><li><p>a8fb2fa2d1fdbeb45831c3ba08d6d73cd08cb44b: 9158 KTV installer (a version of Download.exe is installed &ndash; same as with 9e7cb141eb97e4a83946b3494344b55bbbf0691a) &ndash; looks legitimate</p></li><li><p>f1dae1ee4ece2d5e30b199663f721a3718a661b9: XinGuang installer &ndash; looks legitimate</p></li></ul></div><p>Altogether, four different versions of Download.exe were found (including the one carried by the malware). Differentiating between them was made difficult by the fact that all versions had exactly the same version information, as seen on the following output of the <span class="emphasis"><em>Sysinternals</em></span> sigcheck tool:</p><pre class="programlisting">Verified:     Signed
Signing date: 07:20 23/02/2012
Publisher:
Description:  DownLoad Microsoft ???????
Product:      DownLoad ????
Version:      1, 0, 0, 1
File version: 10, 3, 19, 1
</pre><p>Testing the other versions of Download.exe (replacing science.exe right before the CreateProcessA) caused a crash and a debug dialog pop-up. All of these variations were vulnerable to the exploitation, with the same bogus write_log() function, but due to reorganization of the code in the development process, the 0x404350 address, where the execution is re-routed does not contain the required POP RET instruction sequence. Fixing the return value could make these variants vulnerable to full exploitation as well.</p></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=BYOT: Bring Your Own Target&url=https://www.virusbulletin.com/virusbulletin/2014/03/byot-bring-your-own-target"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/03/byot-bring-your-own-target'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/03/byot-bring-your-own-target&title=BYOT: Bring Your Own Target"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/03/byot-bring-your-own-target&t=BYOT: Bring Your Own Target"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/03/byot-bring-your-own-target"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>