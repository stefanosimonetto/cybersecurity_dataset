<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2018 paper: Office bugs on the rise</title>
<meta name="description" content="It has never been easier to attack Office vulnerabilities than it is nowadays. In this paper Gabor Szappanos looks more deeply into the dramatic changes that have happened in the past 12 months in the Office exploit scene." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 6203;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-vb2018-paper-office-bugs-rise"></a>VB2018 paper: Office bugs on the rise</h1>
<h3><a class="chapter" name="h3-gabor-szappanos"></a>Gabor Szappanos</h3>
<p>Sophos, Hungary</p>
<p><em>Copyright © 2018 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-13228" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-13228" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-introduction">Introduction</a><br /> <a class="toc-level2" href="#h2-document-exploit-stats">Document exploit stats</a><br /> <a class="toc-level2" href="#h2-exploit-builders">Exploit builders</a><br /> <a class="toc-level3" href="#h3-threadkit">Threadkit</a><br /> <a class="toc-level3" href="#h3-eqn-kit1">EQN_kit1</a><br /> <a class="toc-level3" href="#h3-eqn-kit2">EQN_kit2</a><br /> <a class="toc-level3" href="#h3-eqn-kit3">EQN_kit3</a><br /> <a class="toc-level3" href="#h3-other-builders">Other builders</a><br /> <a class="toc-level4" href="#h4-embedi">Embedi</a><br /> <a class="toc-level4" href="#h4-nebulaone">NebulaOne</a><br /> <a class="toc-level4" href="#h4-omree">Omree</a><br /> <a class="toc-level4" href="#h4-anony-sec">Anony_sec</a><br /> <a class="toc-level4" href="#h4-elm0d">Elm0d</a><br /> <a class="toc-level2" href="#h2-timeline-exploit">Timeline of an exploit</a><br /> <a class="toc-level2" href="#h2-timeline-cve-2017-0199">Timeline of CVE-2017-0199</a><br /> <a class="toc-level3" href="#h3-early-apt">Early APT</a><br /> <a class="toc-level4" href="#h4-finspy">FinSpy</a><br /> <a class="toc-level3" href="#h3-cybercrime">Cybercrime</a><br /> <a class="toc-level4" href="#h4-dridex">Dridex</a><br /> <a class="toc-level3" href="#h3-av-evasion-game">The AV evasion game</a><br /> <a class="toc-level4" href="#h4-player-1-white-hat-researcher">Player 1: White hat researcher (?)</a><br /> <a class="toc-level4" href="#h4-player-2-chinese-apt">Player 2: Chinese APT(?)</a><br /> <a class="toc-level2" href="#h2-exploit-builders">The exploit builders</a><br /> <a class="toc-level3" href="#h3-metasploit">Metasploit</a><br /> <a class="toc-level3" href="#h3-builder-1">Builder 1</a><br /> <a class="toc-level3" href="#h3-builder-2">Builder 2</a><br /> <a class="toc-level3" href="#h3-builder-3">Builder 3</a><br /> <a class="toc-level2" href="#h2-conclusions">Conclusions</a><br /> <a class="toc-level2" href="#h2-references">References</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>It has never been easier to attack <em>Office</em> vulnerabilities than it is nowadays. <em>Office</em> exploits have always been high-value assets for criminal groups because <em>Microsoft Office</em> documents are very efficient in delivering their malicious content – users tend to open them without a second thought. This paper will look more deeply into the dramatic changes that have happened in the past 12 months in the <em>Office</em> exploit scene – a scene that has appeared stale in the past couple of years, with only one or two new vulnerabilities appearing each year that made their way to the commercial exploit builders. There has always been a hunger for new exploitable <em>Office</em> vulnerabilities in cybercrime, but the most important builders supported exploits that had been fixed for a couple of years already – which hurt the efficiency of the malware delivery process. 2017 brought a drastic change in many respects. The number of widely used exploits multiplied compared to the previous five years. More importantly, the new exploits turned out to be much simpler. The previous major vulnerabilities were complex memory corruption vulnerabilities, and working with them required a deep knowledge of document file formats and an advanced understanding of the concepts of exploitation. Last year's new vulnerabilities, on the other hand, were much simpler logic bugs (CVE-2017-0199, CVE-2017-8759) or very simple classic stack overflows (CVE-2017-11882, CVE-2018-0802) – easier to understand and more robust to detection evasion tweaking.</p>
<p>Creating builders for these exploits is no longer the privilege of skilled hackers – average programming skills are now sufficient. As a result, we have seen a lot of these builders showing up on <em>GitHub</em>, free for the taking. This triggered a decline in the usage of commercial exploit builders: their usual customers switched to the free offerings. In this paper we will look at this transition, and at the efforts of the commercial exploit builder developers to keep up with the changing trends. The easy availability of these builders enabled many cybercrime actors to use the exploits with little to no investment, resulting in the large number of <em>Office</em> exploit-related attacks seen in the past 12 months.</p>
<p>The life cycle of an <em>Office</em> exploit starts with initial zero-day targeted attacks, then at some point a few well-resourced cybercrime groups start using it. Later, the exploit ends up in builders, which leads to an explosion of its use by many groups, hitting the general user population.</p>
<p>This cycle usually takes a few months, as we have observed with many exploits in the past few years. However, last year, driven by the great demand for fresh <em>Office</em> exploits, the cycle was cut down to just weeks.</p>
<p>This paper will reconstruct the timeline one of the hottest <em>Office</em> exploits (CVE-2017-0199) that featured the following typical scenarios in its life cycle:</p>
<ul>
<li>Zero-day APT activities.</li>
<li>Enthusiastic security researchers playing with the exploit.</li>
<li>APT groups experimenting with bypassing virus scanners.</li>
<li>The appearance of exploit builders (both commercial and free).</li>
<li>The explosion of the usage of the exploit in cybercrime.</li>
</ul>
<p> </p>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>2018 brought a dramatic change in the usage of document exploits. The old legacy exploits that had been so popular in the previous couple of years became obsolete and were replaced with the emerging exploits of 2017 and 2018. In our research we investigated the malware attacks that used <em>Microsoft Office</em> exploits in the first quarter (Q1) of 2018.</p>
<p>The key findings are the following:</p>
<ul>
<li>New vulnerabilities from 2017/2018 completely replaced the old ones: 96% of the attacks were carried out using vulnerabilities that were no more than a year old.</li>
<li>This was powered by the emergence of a new generation of exploit builders: three new exploit builders were responsible for 75% of the attacks, while the older tools were completely abandoned.</li>
<li>Over 90% of the attacks used Rich Text Format documents because of the powerful obfuscation methods it enables.</li>
<li>Criminal groups who previously had no interest in <em>Office</em> exploits started to use them in their distribution campaigns, adding previously unseen malware families (most notably Trickbot) to this specific threat scene.</li>
<li>New exploits were utilized with a shorter turnover time, usually within weeks of discovery.</li>
</ul>
<p> </p>
<h2><a class="chapter" name="h2-document-exploit-stats"></a>Document exploit stats</h2>
<p>Figure 1 shows the overall distribution of vulnerabilities in the 2018 Q1 malware campaigns.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/7535367b294e6aeaf8465bf6cd587652_f3062.jpg" alt="Szappanos-Fig1.jpg" width="560" height="333" /></p>
<p class="centered-caption">Figure 1: Exploit prevalence in attacks.</p>
<p>In a number of cases, the criminals used samples with multiple exploits within the same file; in these cases, each of the vulnerabilities was accounted for in the final stats.</p>
<p>The most prominent exploit in use was one targeting the recent<em> Equation Editor</em> vulnerability (CVE-2017-11882) – this alone was responsible for over half of the attacks. Combined with the newer CVE-2018-0802 variation of the same kind, attacks on the <em>Equation Editor</em> component were responsible for 80% of all <em>Office</em> exploitation attempts.</p>
<p>The even newer Flash vulnerability (CVE-2018-4878) also made a significant impact, landing in fourth position in the chart, indicating that fresh vulnerabilities quickly make their way through the ecosystem.</p>
<p>It is worth mentioning that the high prevalence of the two previously mentioned 2018 vulnerabilities is mainly attributable to the Threadkit builder, which uses multiple new vulnerabilities.</p>
<p>However, analysing the latest attacks indicates that some exploits don't stick around: shortly after the Flash bug was added to the kit, we saw it used in many attacks, but as time went on, the exploit was dropped from the malicious samples.</p>
<p>A similar thing seemed to happen with the CVE-2018-8174 <em>Internet Explorer</em> exploit: it was added to Threadkit, used in a few instances, but not utilized thereafter.</p>
<p>It was interesting to observe that, after dominating the second half of 2017, the CVE-2017-0199 vulnerability fell off the charts. This was the vulnerability that last year broke the four-year dominance of the infamous CVE-2012-0158 vulnerability that just didn't seem to want to go away [<a href="#ref1">1</a>]. Not more than six months later, it had joined the other obsolete old bugs down the plughole.</p>
<p>This proves that criminals are quick to turn their attention to newer vulnerabilities if they are given a chance. By 'chance', we mean a new exploit builder.</p>
<p>We have observed that a complete shift can happen in the usage of vulnerabilities, and within a very short time frame – only a couple of months are needed.</p>
<p> </p>
<h2><a class="chapter" name="h2-exploit-builders"></a>Exploit builders</h2>
<p>It is no secret that cybercrime groups prefer to use exploit builders rather than creating the malicious files themselves. The impact of the builders in 2018 was clear. We have seen the offspring of at least four exploit builders, with the documents generated by them responsible for 75% of all the attacks.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/86a61e686b3aa4054e22a031e38d25cf_f3063.jpg" alt="Szappanos-Fig2.jpg" width="540" height="301" /><span class="centered-caption">Figure 2: Exploit builder utilization in attacks.</span></p>
<p>The most active of the builders was Threadkit, which alone was responsible for one third of all incidents.</p>
<p>It is important to note that the old exploit builders – like Microsoft Word Intruder and AKBuilder, using the older <em>Microsoft Office</em> vulnerabilities – were completely absent from the attacks.</p>
<p>In the following sections we summarize the characteristics of the samples and campaigns related to the exploit builders featured in our stats. In most cases we have not (yet) been able to identify the builder itself, we have merely observed the effects of its utilization.</p>
<p> </p>
<h3><a class="chapter" name="h3-threadkit"></a>Threadkit</h3>
<p>Threadkit is a commercial product implemented in Python, sold on Russian-speaking underground forums. The typical price is 800 USD for the licence; 400 USD for an update [<a href="#ref2">2</a>].</p>
<p>Threadkit supports all of the recent vulnerabilities:</p>
<ul>
<li>CVE-2017-0199</li>
<li>CVE-2017-8750</li>
<li>CVE-2017-11882</li>
<li>CVE-2018-0802</li>
<li>CVE-2018-4878</li>
<li>CVE-2018-8174</li>
</ul>
<p>The generated samples are RTF documents that contain multiple exploit blocks, each exploiting one of the above-listed vulnerabilities.</p>
<p>A typical exploited document has multiple consecutive exploit blocks that independently trigger the batch installer that finally executes the Win32 payload, which is also embedded in the malicious document.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/7015/3935/7932/Szappanos-Fig3.png" alt="Szappanos-Fig3.png" width="709" height="651" /><span class="centered-caption">Figure 3: Structure of a Threadkit-generated document.</span></p>
<p>In the incidents observed in 2018 Q1, all of the samples were droppers, as described above. Recently, we have started to see downloaders, where the embedded executable is missing, and a short PowerShell script is triggered that downloads the Win32 payload from an external website.</p>
<p>The malware families distributed in the Threadkit-related incidents (weighted by the number of reports) are shown in Figure 4.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/18187af83511a189c588bc8a86e48b9b_f3065.png" alt="Szappanos-Fig4.png" width="540" height="364" /><span class="centered-caption">Figure 4: Payload delivered in Threadkit-powered attacks.</span></p>
<p>The distributed payload had a couple of newcomers. Threadkit was the only builder to deliver Trickbot (in a couple of very intensive campaigns), Ursnif and Quant loader – malware families that we had not seen associated with <em>Office</em> exploits before. Apparently, cybercrime groups that had previously used other methods to distribute their payload were now purchasing this exploit builder and starting to use it for their campaigns.</p>
<p>Other than that, the usual low-end cybercrime gangs utilized Threadkit to deliver their usual malware payloads (e.g. Lokibot, Betabot).</p>
<p> </p>
<h3><a class="chapter" name="h3-eqn-kit1"></a>EQN_kit1</h3>
<p>This builder generates RTF documents to exploit the CVE‑2017-11882 vulnerability. Junk keywords are inserted at certain positions in the RTF file.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/1f743168f796ee2a360073585ef9634a_f3066.png" alt="Szappanos-Fig5.png" width="760" height="341" /><span class="centered-caption">Figure 5: EQN_kit1-generated document.</span></p>
<p>In the example shown in Figure 5, tags like this are the junk content:</p>
<p class="monospace">\PTBWFFWPJMMPZERXAKDUDXJVEFWSAJRXEMBQIPJWRPZSGTVLGCVXYMHOPUQBEJAMAJRKGBWDFDLEJZCOMAXBKQIADEDIXPQRTJSP<br />DZNFYNLZWLAHLQHSQLDWUBJADYHGRAKZYSBDOHQWYKRXOGFVCFXKRAUYKYCCZYFSXLWWVFQFZMIMPSAINMBSTGPHAQZFCUWCFDCS</p>
<p>These tags have no role in the exploitation process; in fact, the RTF parser in <em>Word</em> ignores them when opening the files.</p>
<p>The payloads delivered by EQN_kit1 are shown in Figure 6.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/6283891aff8e2178f798ec0b5230c7f6_f3067.jpg" alt="Szappanos-Fig6.jpg" width="540" height="357" /><span class="centered-caption">Figure 6: Payloads delivered by EQN_kit1.</span></p>
<p>Only four malware families were observed as being delivered by this kit, and those are the usual low-end cybercrime trojans. It looks like this is not a commercial tool but a custom solution (developed by modifying one of the many free builders) used by only one or a few closely connected criminal groups.</p>
<p> </p>
<h3><a class="chapter" name="h3-eqn-kit2"></a>EQN_kit2</h3>
<p>This kit generates samples that exploit the CVE-2017-11882 vulnerability. The generated samples are usually <em>Word</em> RTF documents or <em>Excel</em> XLSX workbooks, but we have seen PDF files with embedded RTF as well. It is much more sophisticated than the previous builder, and very likely a commercial tool. A recent case involving this builder was documented in [<a href="#ref3">3</a>].</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/9015/3936/3602/Szappanos-Fig7.png" alt="Szappanos-Fig7.png" width="641" height="138" /><span class="centered-caption">Figure 7: Stripped down object in EQN_kit2.</span></p>
<p>The samples exploit the vulnerability in a very peculiar way. Usually, the malicious samples targeting this vulnerability have an embedded <em>Equation Editor</em> object, which is stored as an embedded <em>Equation Editor</em> stream. The samples generated by EQN_kit2 are different: they contain only an Ole10Native stream and the CLSID for the<em> Equation Editor</em> object.</p>
<p>This alone is enough for <em>Microsoft Word</em> to handle the embedded object and trigger the vulnerability. The stream contains the exploit trigger, followed by a very short redirector code (which points to the second-stage shellcode), and finally an address to a location in EQNEDT32.EXE (ROP address) that contains a RET instruction. This RET instruction is the first to execute after the exploit is triggered and continues the execution on the first-stage redirector code.</p>
<p>The polymorphic redirector code calculates the memory address of the second stage in one of the registers and jumps there. But the calculation of the memory address varies from sample to sample. In one of the samples the values might be set by a combination of MOV and ADD, as shown in Figure 8.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/7815/3936/3626/Szappanos-Fig8.png" alt="Szappanos-Fig8.png" width="646" height="230" /><span class="centered-caption">Figure 8: Redirector variation 1.</span></p>
<p>In another sample it is achieved by a combination of MOV and XOR, as shown in Figure 9.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/1015/3936/3666/Szappanos-Fig9.png" alt="Szappanos-Fig9.png" width="575" height="227" /><span class="centered-caption">Figure 9: Redirector variation 2.</span></p>
<p>In other samples OR and SUB instructions were also used to perform the same task. Additionally, the address of the RET instruction varies from sample to sample – after all, EQNEDT32.EXE contains a lot of RET instructions to choose from.</p>
<p>The second-stage shellcode is protected by a highly polymorphic decryptor layer, which performs a four-byte XOR decryption. There are a lot of junk redirections to make the code analysis difficult.</p>
<p>The decrypted final code is a downloader that gets the Win32 payload from an external website and executes it.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/3115/3936/3719/Szappanos-Fig10.png" alt="Szappanos-Fig10.png" width="559" height="423" /><span class="centered-caption">Figure 10: Final downloader shellcode.</span></p>
<p>The malware families distributed by the samples generated with this kit are shown in Figure 11.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/c7bf773fcfe73b3de8a86ec62018c147_f3072.png" alt="Szappanos-Fig11.png" width="540" height="345" /><span class="centered-caption">Figure 11: Payload delivered by EQN_kit2.</span></p>
<p>The families are the typical tools used by the Nigerian BEC scammers, who are the typical customers of this kit. Agent Tesla, Lokibot and Fareit were long-time favourites of these groups, while Formbook has recently been added to their toolkit.</p>
<p> </p>
<h3><a class="chapter" name="h3-eqn-kit3"></a>EQN_kit3</h3>
<p>Only a handful of malicious documents were seen belonging to this group, which is responsible for only 1% of the attacks. The small number of samples and incidents does not give us sufficient data to produce reliable stats.</p>
<p>The samples use the same exploit implementation as <em>Metasploit</em>, but the embedded object is obfuscated by embedding the data bytes in do-nothing \par tags, as shown in Figure 12.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/7615/3936/3807/Szappanos-Fig12.png" alt="Szappanos-Fig12.png" width="574" height="145" /><span class="centered-caption">Figure 12: Obfuscation used by EQN_kit3.</span></p>
<p>For example, the nibble 0 is represented as<em> {\*\par574 0}</em>. The RTF parser in Word ignores everything but the 0 value. Thus, the following RTF fragment</p>
<pre>{\*\par574 0}{\*\par603 1}{\*\par736 0}{\*\par943 5}{\*\par778 0}{\*\par611 0}</pre>
<p>will be simplified to the three-byte sequence <em>010500</em> (which denotes the header of the embedded OLE object).</p>
<p> </p>
<h3><a class="chapter" name="h3-other-builders"></a>Other builders</h3>
<p>There are many other exploit builders available for the new <em>Office</em> exploits. This section describes a handful of them. Some of them may be connected to the builders listed in the previous sections, but there is no conclusive proof of that.</p>
<p> </p>
<h4><a class="chapter" name="h4-embedi"></a>Embedi</h4>
<p>The mother of all CVE-2017-11882 builders was the builder published by <em>Embedi</em> on <em>GitHub</em> [<a href="#ref4">4</a>] just a week after the initial <em>Microsoft</em> Security Bulletin [<a href="#ref5">5</a>]. This security company was the first to report the vulnerability and publish detailed information about it, along with a proof-of-concept builder (see Figure 13).</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/4615/3936/4210/Szappanos-Fig13.png" alt="Szappanos-Fig13.png" width="745" height="625" /><span class="centered-caption">Figure 13: Proof-of-concept builder by Embedi.</span></p>
<p>(On a totally unrelated note, in an interesting twist, the US Department of Treasury blocked the properties of <em>Embedi</em> for having provided material and technical support to Russia's Federal Security Service (FSB) [<a href="#ref6">6</a>].)</p>
<p>The builder is a Python script that assembles the exploited documents from the hard-coded header, trailer and exploit segments:</p>
<pre>RTF_HEADER = R"""{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}<br />{\*\generator Riched20 6.3.9600}\viewkind4\uc1<br />\pard\sa200\sl276\slmult1\f0\fs22\lang9"""<br />RTF_TRAILER = R"""\par}<br />"""<br />OBJECT_HEADER = R"""{\object\objemb\objupdate{\*\objclass Equation.3}\objw380\objh260{\*\objdata """<br />OBJECT_TRAILER = R"""<br />}{\result{\pict{\*\picprop}\wmetafile8\picw380\pich260\picwgoal380\pichgoal260<br />0100090000039e00000002001c0000000000050000000902000000000500000002010100000005<br />0000000102ffffff00050000002e0118000000050000000b0200000000050000000c02a0016002<br />1200000026060f001a00ffffffff000010000000c0ffffffc6ffffff20020000660100000b0000<br />0026060f000c004d61746854797065000020001c000000fb0280fe000000000000900100000000<br />0402001054696d6573204e657720526f6d616e00feffffff5f2d0a6500000a0000000000040000<br />002d01000009000000320a6001100003000000313131000a00000026060f000a00ffffffff0100<br />000000001c000000fb021000070000000000bc02000000000102022253797374656d000048008a<br />0100000a000600000048008a01ffffffff6ce21800040000002d01010004000000f00100000300<br />00000000</pre>
<p>The builder itself was republished several times, and subsequent builders followed the same logic and even borrowed large chunks of code from it. This proof-of-concept code inspired many of the later released builders.</p>
<p> </p>
<h4><a class="chapter" name="h4-nebulaone"></a>NebulaOne</h4>
<p>This builder was promoted and distributed (for free) on hacking forums. Figure 14 shows an advertisement.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/6715/3936/4856/Szappanos-Fig14.png" alt="Szappanos-Fig14.png" width="1113" height="567" /><span class="centered-caption">Figure 14: NebulaOne advertisement.</span></p>
<p>The Nebula builder is a .Net application, but it only serves as a user interface. The core of the builder is the exploit module, which targets CVE-2017-11882.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/5215/3936/4885/Szappanos-Fig15.png" alt="Szappanos-Fig15.png" width="401" height="464" /><span class="centered-caption">Figure 15: NebulaOne exploit module.</span></p>
<p>The exploit module itself is a standalone Python script, stored as a separate file in the /bin directory.</p>
<p>This Python script is very similar to the original proof-of-concept code released by <em>Embedi</em>. It uses an earlier implementation of the exploit that was limited to an at most 43-character-long command line. The other builders discussed here overcome this limitation with an improved implementation.</p>
<p> </p>
<h4><a class="chapter" name="h4-omree"></a>Omree</h4>
<p>This is a Python script compiled into a standalone executable for easier portability.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/5115/3936/4949/Szappanos-Fig16.png" alt="Szappanos-Fig16.png" width="450" height="194" /><span class="centered-caption">Figure 16: Omree usage.</span></p>
<p>The malicious documents generated by this kit match the characteristics of the EQN_kit1 samples except for the junk comments.</p>
<p>However, the object reference is slightly different, using</p>
<pre>{\object\objemb\objupdate{\*\a Equation.3}</pre>
<p>instead of</p>
<pre>{\object\objemb\objupdate{\*\objclass Equation.3}</pre>
<p> </p>
<h4><a class="chapter" name="h4-anony-sec"></a>Anony_sec</h4>
<p>This builder was published on <em>GitHub</em> and described in a Chinese forum [<a href="#ref7">7</a>]. We found several thousand malicious documents generated by this builder – it is very actively used (see Figure 17).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/6215/3936/5343/Szappanos-Fig17.png" alt="Szappanos-Fig17.png" width="820" height="216" /><span class="centered-caption">Figure 17: Anony_Sec builder usage.</span></p>
<p>This builder matches the EQN_kit1 samples most closely, but there are no random comments inserted. Still, EQN_kit1 is the most likely origin, with someone adding the random junk comment feature to the Python script.</p>
<p> </p>
<h4><a class="chapter" name="h4-elm0d"></a>Elm0d</h4>
<p>A typical example of the current 'commercial' exploit builders available on the scene is the Elm0d (a.k.a Elmod) builder mentioned in [8].</p>
<p>Its pricing structure places it in the high-end market, with a yearly subscription rate of 450 USD [<a href="#ref9">9</a>].</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/2715/3936/5400/Szappanos-Fig18.png" alt="Szappanos-Fig18.png" width="661" height="823" /><span class="centered-caption">Figure 18: Elm0d builder pricing.</span></p>
<p>The builder itself support multiple exploits, including most of the recent <em>Office</em> vulnerabilities. Unlike Threadkit, the documents generated by this builder will only contain a single vulnerability, selected during generation. Figure 19 shows the vulnerability selection process.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/8615/3936/5441/Szappanos-Fig19.png" alt="Szappanos-Fig19.png" width="646" height="618" /><span class="centered-caption">Figure 19: Selection of vulnerabilities.</span></p>
<p>The higher price tag and the multiple selection of fresh vulnerabilities would indicate that there is some serious development effort behind the builder.</p>
<p>However, on looking behind the scenes (see Figure 20) we can see that this assumption is not correct. The modules that implement the individual exploits are stored as resources inside the executable. Taking a closer look reveals that the exploit modules for the <em>Office</em> vulnerabilities are nothing other than the freely available builders taken from <em>GitHub</em>.</p>
<p><a class="zoom-img" title="Figure 20: Behind the scenes of the Elm0d builder." href="/files/3815/3936/5494/Szappanos-Fig20.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/08d629934d57ad51674929222f032550_f3081.png" alt="Szappanos-Fig20.png" width="843" height="386" /></a><span class="centered-caption">Figure 20: Behind the scenes of the Elm0d builder.</span></p>
<p>Despite its fancy user interface, this builder is merely a pricey front end built around the free solutions.</p>
<p> </p>
<h2><a class="chapter" name="h2-timeline-exploit"></a>Timeline of an exploit</h2>
<p>We mentioned earlier in this paper that the new exploits follow an accelerated timeline compared to the vulnerabilities we had become accustomed to seeing in previous years. In this section we explain this observation in detail.</p>
<p><em>Microsoft Office</em> exploits usually follow the same path – they go through a couple of stages in their life cycle, as illustrated in Figure 21.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/ad757947a329d526ae3911db32d1e387_f3082.png" alt="Szappanos-Fig21.png" width="720" height="469" /><span class="centered-caption">Figure 21: Life cycle of a typical Office exploit.</span></p>
<p>The following stages are usual for exploits that end up being used in the wild:</p>
<ul>
<li>The exploit is used in limited-distribution early APT attacks.</li>
<li>At some point the vulnerability is discovered and a patch is released.</li>
<li>The exploit slowly exfiltrates into further targeted attacks.</li>
<li>At some point a sample becomes available to the security and criminal community.</li>
<li>Within a few weeks, a <em>Metasploit</em> module is released.</li>
<li>Within a couple of months, commercial exploit builders release support for the exploit.</li>
<li>At this point the exploit is available for the cybercrime groups who start massive infection campaigns.</li>
</ul>
<p>In this classical scheme there is an approximate one-to-two-month window between a patch for the vulnerability being made available and the mass-distribution of the exploit by cybercrime groups. This allows enough time for defences to be prepared and for fixes to be deployed throughout organizations.</p>
<p>However, with the recent <em>Office</em> exploits we have observed an accelerated timeline that changes the nature of the game.</p>
<p> </p>
<h2><a class="chapter" name="h2-timeline-cve-2017-0199"></a>Timeline of CVE-2017-0199</h2>
<p>As an example, we take the most popular vulnerability of 2017, CVE-2017-0199. In this case we were able to reconstruct all stages of the life cycle. The other vulnerabilities should follow the same path.</p>
<p>The main events related to the exploit are summarized in Table 1.<a class=" anchor" name="table1"></a></p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td>23/11/2016</td>
<td>First known sample of the exploit</td>
</tr>
<tr>
<td>07/04/2017</td>
<td>McAfee releases report about zero-day samples [<a href="#ref10">10</a>]</td>
</tr>
<tr>
<td>08/04/2017</td>
<td>FireEye first blogs about the exploit [<a href="#ref11">11</a>]</td>
</tr>
<tr>
<td><strong>10/04/2017</strong></td>
<td><strong>Massive Dridex distribution</strong></td>
</tr>
<tr>
<td>10/04/2017</td>
<td>Proofpoint releases report with first hashes [<a href="#ref12">12</a>]</td>
</tr>
<tr>
<td>11/04/2017</td>
<td>Microsoft releases the patch [<a href="#ref13">13</a>]</td>
</tr>
<tr>
<td>11/04/2017</td>
<td>FireEye releases full report [<a href="#ref14">14</a>]</td>
</tr>
<tr>
<td>12/04/2107</td>
<td>AV evasion experiments start</td>
</tr>
<tr>
<td>14/04/2017</td>
<td>Metasploit module released</td>
</tr>
<tr>
<td><strong>18/04/2017</strong></td>
<td><strong>Builder 1 released (based on Metasploit)</strong></td>
</tr>
<tr>
<td><strong>24/04/2017</strong></td>
<td><strong>Builder 2 released (based on Dridex)</strong></td>
</tr>
<tr>
<td>08/05/2017</td>
<td>MWI support released [<a href="#ref15">15</a>]</td>
</tr>
<tr>
<td>19/06/2017</td>
<td>Builder 3 first known sample (based on Builder 1)</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 1: Early stages of CVE-2017-0199.</p>
<p>This vulnerability has been used for months in targeted attacks. Most of the activity went on in March and April 2017, but the earliest sample that we could locate dated back to November 2016.</p>
<p>The vulnerability was first mentioned in a <em>McAfee</em> blog post talking about a recently analysed sample exploiting an unidentified zero-day <em>Office</em> vulnerability [<a href="#ref10">10</a>]. This forced <em>FireEye</em> researchers to come out with a follow-up post, revealing the fact that they had been working with <em>Microsoft</em> on this vulnerability [<a href="#ref11">11</a>] for some time. These two reports triggered wide media coverage and boosted general interest in the exploit.</p>
<p>At this point, most security researchers and virus labs had no reliable information about the exploit, let alone any samples. Yet somehow, the criminals behind the Dridex distribution campaigns found a working sample of the exploit and started using it for malware distribution, all within a day. They were able to react quickly because they were reusing existing distribution mechanisms, replacing only the first-stage downloader with the new exploit.</p>
<p>The large volume of exploited Dridex loader samples made it possible for security researchers to obtain samples, analyse them and publish reports. The first one was by <em>Proofpoint</em> researchers [<a href="#ref12">12</a>], who were the first to publish sample hashes.</p>
<p>This amount of exposure forced <em>Microsoft</em> to release a patch earlier than planned [<a href="#ref13">13</a>], after which <em>FireEye</em> published a report [<a href="#ref14">14</a>] containing full details of the exploit. At this point, information about the exploit was available in the public domain, and not surprisingly, experiments soon began.</p>
<p>Within a week a <em>Metasploit</em> module had been released, after which a series of free and commercial builders surfaced.</p>
<p>The timeline features a couple of unusual events, which are highlighted in <a href="#table1">Table 1</a>.</p>
<p>First, massive cybercrime campaigns started while the exploit was still in zero-day stage. Second, the exploit builders appeared within a couple of weeks of the release of the patch.</p>
<p>As a result of the accelerated timeline, this exploit was already dominating the scene just two weeks after its initial public appearance, with over three quarters of all document exploit attacks using this new vulnerability.</p>
<p class="centered-caption"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/10388c03955756abf93fc9b7482c6217_f3083.png" alt="Szappanos-Fig22.png" width="560" height="380" />Figure 22: Shift in exploit usage.</p>
<p> </p>
<h3><a class="chapter" name="h3-early-apt"></a>Early APT</h3>
<p>In the early lifetime of this vulnerability, it was used in a handful of targeted attacks.</p>
<p> </p>
<h4><a class="chapter" name="h4-finspy"></a>FinSpy</h4>
<p class="monospace" style="padding-left: 30px;">Hash: fceffd0fb6959cca75c781bc3310b6e50f9b5941</p>
<p class="monospace" style="padding-left: 30px;">Original name: testThis.txt</p>
<p class="monospace" style="padding-left: 30px;">Downloads hxxp://95.141.38.110/mo/dnr/tmp/template.doc (decoy) and hxxp://95.141.38.110/mo/dnr/copy.jpg (payload)</p>
<p>After completing its downloads, it displays a decoy that looks like it comes from a textbook for the military forces in Donetsk People's Republic.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/95c9565a2f48d0172ef1c84df9a74151_f3084.png" alt="Szappanos-Fig23.png" width="740" height="673" /><span class="centered-caption">Figure 23: Military-themed decoy used by FinSpy</span>.</p>
<p>The payload was the commercial spyware program FinSpy [<a href="#ref14">14</a>].</p>
<p> </p>
<h3><a class="chapter" name="h3-cybercrime"></a>Cybercrime</h3>
<p>Soon after the initial exposure, an explosion of samples turned up, all related to cybercrime activities. It took a very short time for cybercriminals to jump on the opportunity and integrate the exploit into their malware distributions [<a href="#ref5">5</a>].</p>
<p>It is extremely rare for cybercriminals to manage to integrate an exploit while the vulnerability is still unpatched, but it happened in this case, with a handful of samples that were distributing the Dridex banking trojan.</p>
<p> </p>
<h4><a class="chapter" name="h4-dridex"></a>Dridex</h4>
<p>The first cybercrime campaigns started in the zero-day stage, on day before the Microsoft patch was released. Distributed in email messages, the exploited documents delivered the Dridex banking trojan.</p>
<p class="monospace" style="padding-left: 30px;">Hash: 3770051d8cb7df081b5409f2be3b8d6c916a2755</p>
<p class="monospace" style="padding-left: 30px;">Original name: Scan_45807.pdf</p>
<p class="monospace" style="padding-left: 30px;">First seen: 10/04/2017</p>
<p class="monospace" style="padding-left: 30px;">Downloads hxxp://rottastics36w[.]net/template.doc</p>
<p>This sample was distributed in an unsophisticated form in email messages with hardly any content, as shown in Figure 24.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/6115/3958/2444/Szappanos-Fig24.png" alt="Szappanos-Fig24.png" width="442" height="288" /><span class="centered-caption">Figure 24: Zero-day Dridex campaign.</span></p>
<p class="monospace" style="padding-left: 30px;">Hash: c10b1c9a34d3d09a720aacecd55f704fc42e1267</p>
<p class="monospace" style="padding-left: 30px;">Original name: uk_confirmation_ph887064796.pdf</p>
<p class="monospace" style="padding-left: 30px;">First seen: 11/04/2017</p>
<p class="monospace" style="padding-left: 30px;">Activity:</p>
<p class="monospace" style="padding-left: 30px;">Downloads hxxp://hyoeyeep[.]ws/template.doc; probably downloads hxxp://hyoeyeep[.]ws/sp.exe</p>
<p>This sample was distributed in large volumes in email messages, mostly in Australia. The messages were disguised as scanned images, and in some cases even the message date was faked in the header to date back to 2014, as can be seen in Figure 25.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/4415/3958/2743/Szappanos-Fig25.png" alt="Szappanos-Fig25.png" width="566" height="436" /><span class="centered-caption">Figure 25: Dridex delivery message.</span></p>
<p> </p>
<h3><a class="chapter" name="h3-av-evasion-game"></a>The AV evasion game</h3>
<p>As information about the exploit become widespread, and the related samples became widely available (the latter mostly due to the massive Dridex distributions), security researchers and criminals started to experiment with it in an attempt to understand the exploit and find out how to evade detection by anti-virus programs. This generated a lot of test files from different sources. The following sections detail two typical examples.</p>
<p> </p>
<h4><a class="chapter" name="h4-player-1-white-hat-researcher"></a>Player 1: White hat researcher (?)</h4>
<p>These samples were submitted to VirusTotal from China by the same submitter. The samples were derived from 04a2977b0307834806214fd219636711352b67c7 (Dridex downloader) by manually editing the RTF file in multiple points and eventually breaking the download URL. The original URL was hxxp://hyoeyeep[.]ws/template.doc, the changes are highlighted in the following list. All of the samples were submitted on 13 April, two days after the availability of the original sample:</p>
<p class="monospace" style="padding-left: 30px;">Hash: 289f7fcf7765890d324eb373d601667cfa0b09be</p>
<p class="monospace" style="padding-left: 30px;">Downloads hxxp://hyoeyeep[.]ws/template.dod</p>
<p class="monospace" style="padding-left: 30px;">Hash: 064709d96ab41398fc2956edafb13d8835637abd</p>
<p class="monospace" style="padding-left: 30px;">Downloads hstp://hyoeyeep[.]ws/template.doc</p>
<p class="monospace" style="padding-left: 30px;">Hash: 0c20ffc3d9b8396d78eaa009ce5442af1aa177f8</p>
<p class="monospace" style="padding-left: 30px;">Downloads hxxp://hyoeyeep.ws/templatc.doc</p>
<p> </p>
<h4><a class="chapter" name="h4-player-2-chinese-apt"></a>Player 2: Chinese APT(?)</h4>
<p>These samples were submitted to <em>VirusTotal</em> from Vietnam by the same submitter.</p>
<p>The samples were derived from the Dridex downloaders (as one of the used file names suggests from the one with SHA256 value ae48d23e39bf4619881b5c4dd2712b8fabd4f8bd6beb0ae167647995ba68100e), but with more modifications than Player 1, who only changed a couple of bytes in the embedded object. In this case larger (though insignificant) portions of the RTF file were modified.</p>
<p style="padding-left: 30px;">Ha<span class="monospace">sh: 660f52c8d1db7d700a04be2baac77f84da693b09</span></p>
<p class="monospace" style="padding-left: 30px;">Original name: simpleize.rtf</p>
<p style="padding-left: 30px;"><span class="monospace">First seen</span>: 12/04/2017</p>
<p>This is the same as the original Dridex sample, with some of the decoy content removed.</p>
<p class="monospace" style="padding-left: 30px;">Hash: 20978bcc3f08c3b7b850e8ec6c520449ad96db28</p>
<p class="monospace" style="padding-left: 30px;">Original name: goc2.rtf</p>
<p class="monospace" style="padding-left: 30px;">First seen: 13/04/2017</p>
<p class="monospace" style="padding-left: 30px;">Downloads hxxp://hyoeyeep.ws/template.doc</p>
<p>Then there were a series of samples from the same submitter that all had the download URL set to hxxp://127.0.0.1/s/template.doc, a clear indication of being a test sample:</p>
<p class="monospace" style="padding-left: 30px;">Hash: 5ad786f8835bc5e29339e12fb0a69ff589e845e1</p>
<p class="monospace" style="padding-left: 30px;">Original name: ae48d23e39bf4619881b5c4dd2712b8fabd4f8bd6beb0ae167647995ba68100e_mod.doc</p>
<p class="monospace" style="padding-left: 30px;">First seen: 13/04/2017</p>
<p class="monospace" style="padding-left: 30px;"> </p>
<p class="monospace" style="padding-left: 30px;">Hash: 7916bbc2af42fcb90bdd59336a7f2913ad7b1da4</p>
<p class="monospace" style="padding-left: 30px;">Original name: mod2.rtf</p>
<p class="monospace" style="padding-left: 30px;">First seen: 13/04/2017</p>
<p class="monospace" style="padding-left: 30px;"> </p>
<p class="monospace" style="padding-left: 30px;">Hash: c3d491d92d6bfb5e3f6396beadcfd6b856468e86</p>
<p class="monospace" style="padding-left: 30px;">Original name: mod2.rtf</p>
<p class="monospace" style="padding-left: 30px;">First seen: 13/04/2017</p>
<p class="monospace" style="padding-left: 30px;"> </p>
<p class="monospace" style="padding-left: 30px;">Hash: 93ab0452b1e1b2ea3b40e88ca182c02f94c084ce</p>
<p class="monospace" style="padding-left: 30px;">Original name: mod2z.rtf</p>
<p class="monospace" style="padding-left: 30px;">First seen: 13/04/2017</p>
<p class="monospace" style="padding-left: 30px;"> </p>
<p class="monospace" style="padding-left: 30px;">Hash: c578eeedc7d2fd0a1a3837dcc66d0b4792f3fdca</p>
<p class="monospace" style="padding-left: 30px;">Original name: mod2.rtf</p>
<p class="monospace" style="padding-left: 30px;">First seen: 13/04/2017</p>
<p class="monospace" style="padding-left: 30px;"> </p>
<p class="monospace" style="padding-left: 30px;">Hash: eef36fcdc606e072987c0a5b640200d7f8e2ab45</p>
<p class="monospace" style="padding-left: 30px;">Original name: mod3.doc</p>
<p class="monospace" style="padding-left: 30px;">First seen: 13/04/2017</p>
<p class="monospace" style="padding-left: 30px;"> </p>
<p class="monospace" style="padding-left: 30px;">Hash 1922b1ab0b8b77412bb24d1496215b97b1829867</p>
<p class="monospace" style="padding-left: 30px;">Original name: mod3.doc</p>
<p class="monospace" style="padding-left: 30px;">First seen: 13/04/2017</p>
<p>The experiments culminated in the final sample, which was used in real-world attacks, mostly against Vietnamese targets:</p>
<p class="monospace" style="padding-left: 30px;">Hash: c281898ca141104ba791dc146a4407f53814d00d</p>
<p class="monospace" style="padding-left: 30px;">Original name: g-mirror.rtf</p>
<p class="monospace" style="padding-left: 30px;">First seen: 17/04/2017</p>
<p class="monospace" style="padding-left: 30px;">Reported from:</p>
<p class="monospace" style="padding-left: 30px;">Activity:</p>
<p class="monospace" style="padding-left: 30px;">Downloads hxxps://g-mirror.appspot[.]com/report.rtf which downloads hxxps://g-mirror.appspot[.]com/favicon.ico;</p>
<p>It drops two components:</p>
<ul>
<li>%PROFILE%\AppData\Roaming\Microsoft\Display Control Panel\DpiScaling.exe (installer)</li>
<li>%PROFILE%\AppData\Roaming\Microsoft\Dynamic COM+\comuid.dll (main backdoor)</li>
</ul>
<p>It registers the latter for autostart in HKCU\Software\Microsoft\Windows\CurrentVersion\Run → DpiScaling.</p>
<p>A backup copy of the original dropped component is created in an alternate data stream (ADS) – a rarely used trick that works only on NTFS file systems.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/4015/3958/2967/Szappanos-Fig26.png" alt="Szappanos-Fig26.png" width="638" height="137" /><span class="centered-caption">Figure 26: Dimoc backup copy stored in ADS.</span></p>
<p>It also displays a simple decoy document in Vietnamese.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/b8b314f0426fc7622414ae4aa74c1a71_f3088.png" alt="Szappanos-Fig27.png" width="840" height="132" /><span class="centered-caption">Figure 27: Simple Vietnamese decoy content.</span></p>
<p>The decoy is stored as a resource within the executable file, with the bytes stored in reverse order, as shown in Figure 28.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/551c50e132825972c910d292d2685ef2_f3089.png" alt="Szappanos-Fig28.png" width="840" height="191" /><span class="centered-caption">Figure 28: Decoy document stored in the resources.</span></p>
<p>The installer contains the payload in a similar way, stored with the bytes in reverse order, as shown in Figure 29.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/8315/3958/3116/Szappanos-Fig29.png" alt="Szappanos-Fig29.png" width="647" height="402" /><span class="centered-caption">Figure 29: Payload ‘encrypted’ by reversing byte order.</span></p>
<p>The final payload is the Dimoc backdoor that connects to the C&amp;C server at fillin.michellegipps[.]com.</p>
<p> </p>
<h2><a class="chapter" name="h2-exploit-builders"></a>The exploit builders</h2>
<p>The next logical step was the appearance of the underground exploit builders, which ignited an explosion of the use of this exploit.</p>
<p> </p>
<h3><a class="chapter" name="h3-metasploit"></a>Metasploit</h3>
<p><em>Metasploit Framework</em> support was added for the exploit on 14 April, only four days after the availability of the first sample (Figure 30).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/e3dc8ef9a20d2126524e78cbe2a5dbdc_f3092.jpg" alt="szappanos-figure30.jpg" width="843" height="68" /></p>
<p class="centered-caption">Figure 30: The Metaploit Framework support was added for this exploit on 14 April.</p>
<p><em>Metasploit</em> is not an underground tool; it is a legitimate commercial product with a free community edition, frequently used by security researchers. However, the disclosure of this module led to the development and release of a builder that was later heavily used by criminal groups.</p>
<p> </p>
<h3><a class="chapter" name="h3-builder-1"></a>Builder 1</h3>
<p>This builder is a Python script, developed using a <em>Metasploit</em>‑generated document as a skeleton template.</p>
<p>The code of this builder was first published on <em>GitHub</em> on 18 April 2017 [<a href="#ref16">16</a>], just four days after the <em>Metasploit</em> module, and is clearly based on a document generated by it.</p>
<p>In fact, the only difference between the two is that the <em>Metasploit</em>-generated document has author info in the header (<em>Microsoft</em>), while Builder 1 has this information removed.</p>
<p>The original <em>Metasploit</em>-generated file looked like this:</p>
<pre>{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe2052\themelang1033\themelangfe2052\themelangcs0<br />{\info<br />{\author Microsoft}<br />{\operator Microsoft}<br />}<br />{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}<br />{<br />{\object\objautlink\objupdate\rsltpict\objw291\objh230\objscalex99\objscaley101</pre>
<p>Meanwhile, the file generated by Builder 1 looked like this:</p>
<pre>{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe2052\themelang1033\themelangfe2052\themelangcs0<br />{\info<br />{\author }<br />{\operator }<br />}<br />{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}<br />{<br />{\object\objautlink\objupdate\rsltpict\objw291\objh230\objscalex99\objscaley101</pre>
<p>Later versions of the builder introduced another feature. The –x option will add obfuscation to the RTF output – random keywords are inserted at several locations, as shown in Figure 31.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/9215/3958/3941/Szappanos-Fig30.png" alt="Szappanos-Fig30.png" width="784" height="153" /><span class="centered-caption">Figure 31: Obfuscation inserted by Builder 1.</span></p>
<p>Here, the random<em> {\*\NZOWDLYSVM}</em> blocks are inserted into the embedded object, and the download URL is inserted with the <em>{\*\92a79a58c2a29bae81c59a37d171a0}</em> elements.</p>
<p>There were hundreds of documents generated by this builder within a couple of weeks – we can only provide a couple of examples. The distributed payload is a wide variety of malware, including Dofoil, Remote Utilities and Sennoma.</p>
<p>The following file was probably the first file generated by the builder, surfacing one day after the release of the builder. The sample was generated without obfuscation:</p>
<p class="monospace" style="padding-left: 30px;">Hash: e310acf0a13351268df24721d1366f696bb4f0ed</p>
<p class="monospace" style="padding-left: 30px;">Original name: coolxm.rtf</p>
<p class="monospace" style="padding-left: 30px;">First seen: 19/04/2017</p>
<p class="monospace" style="padding-left: 30px;">Downloads hxxp://135.84.177.155/svchost.exe.</p>
<p>There were also samples with obfuscation.</p>
<p>Obfuscation was added to the builder on 24 April 2017 (at least that is when the update was uploaded to <em>GitHub</em>), and we started to see these samples immediately after the release.</p>
<p class="monospace" style="padding-left: 30px;">Hash: aa194b24f7017301c4f4d8ab60ede0b9d915cdf0</p>
<p class="monospace" style="padding-left: 30px;">Original name: 2.rtf</p>
<p class="monospace" style="padding-left: 30px;">First seen: 23/04/2017</p>
<p class="monospace" style="padding-left: 30px;">Downloads hxxp://192.168.56.1/test.doc.</p>
<p>The downloaded file is most likely a test document created during the development of the builder to test the new obfuscation feature, because the upload time predates the official release by a day.</p>
<p class="monospace" style="padding-left: 30px;">Hash: aa194b24f7017301c4f4d8ab60ede0b9d915cdf0</p>
<p class="monospace" style="padding-left: 30px;">Original name:</p>
<p class="monospace" style="padding-left: 30px;">First seen: 24/04/2017</p>
<p class="monospace" style="padding-left: 30px;">Downloads hxxp://5.79.98.106/logo.doc.</p>
<p>The downloaded file is the first document that we could find that used the obfuscation feature of this builder.</p>
<p> </p>
<h3><a class="chapter" name="h3-builder-2"></a>Builder 2</h3>
<p>This builder represents a different development branch. It started with an earlier exploited document (the infamous Dridex downloader, that was already used by Player 2 in the evasion games), as clearly stated in the script itself:</p>
<pre>#CVE-2017-0199<br />#create from: https://www.hybrid-analysis.com/sample/ae48d23e39bf4619881b5c4dd2712b8fabd4f8bd6beb0ae167647995ba68100e?environmentId=100</pre>
<p>It adds a bit of randomness to the generated documents by inserting random meta info into the RTF header. This results in samples like this one:</p>
<p class="monospace" style="padding-left: 30px;">{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe1033\themelang1033\themelangfe1042\themelangcs0</p>
<p class="monospace" style="padding-left: 30px;">{\info{\<strong>author B9bW7MOjGnwWJUJ4</strong>}{\creatim\yr2009\mo10\dy13\hr12\min18}{\revtim\yr2009\mo10\dy13\hr12\min21}{\version1}{\edmins3}{\nofpages1}{\nofwords36}{\nofchars1585}{\*\<strong>company CxgxJRNxQIBtKKEM</strong>}{\nofcharsws1585}{\vern27079}}</p>
<p>It may also insert a random tag in the middle of the download URL:</p>
<p class="monospace" style="padding-left: 30px;">48007400540070003<strong>{\*\deftab8348281122134805066348220</strong><br /><strong>978309385951184984042156131477750345227410818617252</strong><br /><strong>5099943469a}</strong>002f002f003100320037002e0030002e0030002e0<br />031002f0074006500730074002e0064006f0063000000000000000<br />00000000000000000000000000000000000000000000000000000</p>
<p>The first samples generated by this builder started to appear around 24 April 2017. After that we observed hundreds of malicious documents generated by it within a few weeks. The most notable payload distributed by this builder was the Cerber ransomware.</p>
<p>A full distribution site was found when following the download link of the sample with SHA1: ee19337c75a4afdc6b46f1a311a0</p>
<p>fd23815bf837. This downloaded the second stage from 5.101.5.24/0199/tasks/lxE5Hb/hta.php. The site was open for browsing and a large set of prebuilt documents were found there, as shown in Figure 32.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/8eb8ddde72f524da0f7b8ec8cc1fa0ca_f3093.png" alt="Szappanos-Fig32.png" width="380" height="631" /><span class="centered-caption">Figure 32: Cerber distribution site.</span></p>
<p>The site also conveniently stored the original builder and a slightly modified version of it (for no obvious reason), as shown in Figure 33.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/bcd2726c88a63bb4a1b8a76e54ab13ef_f3094.png" alt="Szappanos-Fig33.png" width="380" height="228" /><span class="centered-caption">Figure 33: Exploit builder stored on site.</span></p>
<p>The payload in this case was Kasidet (Neutrino bot).</p>
<p>Samples:</p>
<p class="monospace" style="padding-left: 30px;">Hash: d0756e4b252521bafeab10f4db15505727efd75b</p>
<p class="monospace" style="padding-left: 30px;">Original name: Порядок определения размера пени .doc</p>
<p class="monospace" style="padding-left: 30px;">First seen: 24/04/2017</p>
<p class="monospace" style="padding-left: 30px;">Downloads hxxp://87.120.254.189/BFbGXDVNjwJaGfFg.txt.</p>
<p>This is probably the first sample generated by this builder.</p>
<p class="monospace" style="padding-left: 30px;">Hash: 7a4ae8b7fa54d1685c99bf0fac04153a0f873a03</p>
<p class="monospace" style="padding-left: 30px;">Original name: coolxm.rtf</p>
<p class="monospace" style="padding-left: 30px;">First seen: 27/04/2017</p>
<p class="monospace" style="padding-left: 30px;">Downloads hxxp://wowaskopoq.top/1.xls</p>
<p>The downloaded file is not an <em>Excel</em> workbook, as the extension would suggest, but a <em>Windows</em> executable that drops the Cerber ransomware.</p>
<p>Interestingly, this builder was used by groups distributing Cerber and Kasidet. In the past, these groups had showed no interest in using <em>Office</em> exploits for malware distribution. But as opportunity presented itself in the form of a fresh exploit, they did not hesitate to use it.</p>
<p> </p>
<h3><a class="chapter" name="h3-builder-3"></a>Builder 3</h3>
<p>This builder was found in the open directory on subaat.com, along with a lot of other tools:</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/de2224cb658e419933d86719c1dd2ac9_f3095.png" alt="Szappanos-Fig34.png" width="380" height="497" /><span class="centered-caption">Figure 34: Repository containing the builder.</span></p>
<p>This builder appears to have been released by a well-known player, known by the handle kareem.alex1, who was also very active with AKBuilder [<a href="#ref17">17</a>].</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/7715/3958/4755/Szappanos-Fig35.png" alt="Szappanos-Fig35.png" width="481" height="245" /><span class="centered-caption">Figure 35: Kareem.alex1 is a well-known figure.</span></p>
<p>Just as in the case of AKBuilder released by the same author, this is a wrapper, Builder 1 is repackaged and protected with the MPress runtime cryptor. The Python script is dropped into the %TEMP% directory and executed with a simple batch file:</p>
<p class="monospace" style="padding-left: 30px;">cmd /c C:\Python27\python.exe dle.py -M gen -w usx.doc -u 127.0.0.1/test.hta -x 1</p>
<p> </p>
<h2><a class="chapter" name="h2-conclusions"></a>Conclusions</h2>
<p>We have seen that the new <em>Office</em> exploits completely replaced the old ones. This is a result of the appearance of a new generation of exploit builders, which are usually available for free in the public domain. Criminal groups simply switched to the new builders.</p>
<p>The easy availability of fresh <em>Office</em> exploits is a great temptation that pushed a handful of high-end cybercrime groups (those behind Trickbot, Kasidet, etc.) to use them in their distribution campaigns, even though in the past they had showed no interest in <em>Office</em> exploits.</p>
<p>We have observed an accelerated timeline for the new <em>Office</em> vulnerabilities. Previously, it took a couple of months for the appearance of the exploit builders and the escalation to cybercrime campaigns. Nowadays it takes only a couple of weeks to reach the same threat level. This forces defenders into shorter reaction times in patch deployment and protection development.</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] <a href="https://www.sophos.com/en-us/medialibrary/PDFs/technical%20papers/CVE-2012-0158-An-Anatomy-of-a-Prolific-Exploit.PDF" target="_blank">https://www.sophos.com/en-us/medialibrary/PDFs/technical%20papers/CVE-2012-0158-An-Anatomy-of-a-Prolific-Exploit.PDF</a>.</p>
<p><a class=" anchor" name="ref2"></a>[2] <a href="https://www.proofpoint.com/us/threat-insight/post/unraveling-ThreadKit-new-document-exploit-builder-distribute-The-Trick-Formbook-Loki-Bot-malware" target="_blank">https://www.proofpoint.com/us/threat-insight/post/unraveling-ThreadKit-new-document-exploit-builder-distribute-The-Trick-Formbook-Loki-Bot-malware</a>.</p>
<p><a class=" anchor" name="ref3"></a>[3] <a href="https://blog.talosintelligence.com/2018/06/my-little-formbook.html" target="_blank">https://blog.talosintelligence.com/2018/06/my-little-formbook.html</a>.</p>
<p><a class=" anchor" name="ref4"></a>[4] <a href="https://github.com/embedi/CVE-2017-11882" target="_blank">https://github.com/embedi/CVE-2017-11882</a>.</p>
<p><a class=" anchor" name="ref5"></a>[5] <a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-11882" target="_blank">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-11882</a>.</p>
<p><a class=" anchor" name="ref6"></a>[6] <a href="https://home.treasury.gov/news/press-releases/sm0410" target="_blank">https://home.treasury.gov/news/press-releases/sm0410</a>.</p>
<p><a class=" anchor" name="ref7"></a>[7] <a href="http://www.anonysec.cn/2017/12/01/cve-2017-182-combined-with-msf-replication/" target="_blank">http://www.anonysec.cn/2017/12/01/cve-2017-182-combined-with-msf-replication/</a>.</p>
<p><a class=" anchor" name="ref8"></a>[8] <a href="https://heimdalsecurity.com/blog/security-alert-malicious-exploit-kits-target-microsoft-office/" target="_blank">https://heimdalsecurity.com/blog/security-alert-malicious-exploit-kits-target-microsoft-office/</a>.</p>
<p><a class=" anchor" name="ref9"></a>[9] <a href="https://twitter.com/itsreallynick/status/955469701022273536" target="_blank">https://twitter.com/itsreallynick/status/955469701022273536</a>.</p>
<p><a class=" anchor" name="ref10"></a>[10] <a href="https://securingtomorrow.mcafee.com/mcafee-labs/critical-office-zero-day-attacks-detected-wild/" target="_blank">https://securingtomorrow.mcafee.com/mcafee-labs/critical-office-zero-day-attacks-detected-wild/</a>.</p>
<p><a class=" anchor" name="ref11"></a>[11] <a href="https://www.fireeye.com/blog/threat-research/2017/04/acknowledgement_ofa.html" target="_blank">https://www.fireeye.com/blog/threat-research/2017/04/acknowledgement_ofa.html</a>.</p>
<p><a class=" anchor" name="ref12"></a>[12] <a href="https://www.proofpoint.com/us/threat-insight/post/dridex-campaigns-millions-recipients-unpatched-microsoft-zero-day" target="_blank">https://www.proofpoint.com/us/threat-insight/post/dridex-campaigns-millions-recipients-unpatched-microsoft-zero-day</a>.</p>
<p><a class=" anchor" name="ref13"></a>[13] <a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-0199" target="_blank">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-0199</a>.</p>
<p><a class=" anchor" name="ref14"></a>[14] <a href="https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199-hta-handler.html" target="_blank">https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199-hta-handler.html</a>.</p>
<p><a class=" anchor" name="ref15"></a>[15] <a href="https://www.proofpoint.com/us/threat-insight/post/microsoft-windows-intruder-integrates-cve-2017-0199-utilized-cobalt-group-target" target="_blank">https://www.proofpoint.com/us/threat-insight/post/microsoft-windows-intruder-integrates-cve-2017-0199-utilized-cobalt-group-target</a>.</p>
<p><a class=" anchor" name="ref16"></a>[16] <a href="https://github.com/bhdresh/CVE-2017-0199" target="_blank">https://github.com/bhdresh/CVE-2017-0199</a>.</p>
<p><a class=" anchor" name="ref17"></a>[17] <a href="https://www.virusbulletin.com/conference/vb2017/abstracts/when-worlds-collide-story-office-exploit-builders" target="_blank">https://www.virusbulletin.com/conference/vb2017/abstracts/when-worlds-collide-story-office-exploit-builders</a>.</p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2018/VB2018-Szappanos.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2018 paper: Office bugs on the rise&url=https://www.virusbulletin.com/virusbulletin/2018/12/vb2018-paper-office-bugs-rise"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2018/12/vb2018-paper-office-bugs-rise'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2018/12/vb2018-paper-office-bugs-rise&title=VB2018 paper: Office bugs on the rise"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2018/12/vb2018-paper-office-bugs-rise&t=VB2018 paper: Office bugs on the rise"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2018/12/vb2018-paper-office-bugs-rise"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>