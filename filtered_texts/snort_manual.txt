Copyright c⃝2014-2020 Cisco and/or its afﬁliates. All rights reserved.
[Word Count: 9]

1.1
Getting Started
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9
[Word Count: 50]

1.2
Sniffer Mode
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9
[Word Count: 51]

1.3
Packet Logger Mode
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
10
[Word Count: 48]

1.4
Network Intrusion Detection System Mode
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
[Word Count: 38]

1.4.1
NIDS Mode Output Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
[Word Count: 41]

1.4.2
Understanding Standard Alert Output . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12
[Word Count: 36]

1.4.3
High Performance Conﬁguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12
[Word Count: 38]

1.4.4
Changing Alert Order
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
13
[Word Count: 43]

1.5
Packet Acquisition
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
13
[Word Count: 48]

1.5.1
Conﬁguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
13
[Word Count: 46]

1.5.2
pcap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
14
[Word Count: 51]

1.5.3
AFPACKET
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
15
[Word Count: 46]

1.5.4
NFQ
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
15
[Word Count: 50]

1.5.5
IPQ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
16
[Word Count: 51]

1.5.6
IPFW . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
16
[Word Count: 50]

1.5.7
Dump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
16
[Word Count: 50]

1.5.8
Statistics Changes
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17
[Word Count: 44]

1.6
Reading pcap ﬁles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17
[Word Count: 50]

1.6.1
Command line arguments
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17
[Word Count: 41]

1.6.2
Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17
[Word Count: 48]

1.7
Basic Output
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19
[Word Count: 51]

1.7.1
Timing Statistics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19
[Word Count: 45]

1.7.2
Packet I/O Totals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19
[Word Count: 46]

1.7.3
Protocol Statistics
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
20
[Word Count: 44]

1.7.4
Snort Memory Statistics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21
[Word Count: 42]

1.7.5
Actions, Limits, and Verdicts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21
[Word Count: 41]

1.8
Tunneling Protocol Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
22
[Word Count: 45]

1.8.1
Multiple Encapsulations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
[Word Count: 41]

1.8.2
Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
[Word Count: 49]

1.9
Miscellaneous . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
[Word Count: 50]

1.9.1
Running Snort as a Daemon . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
[Word Count: 42]

1.9.2
Running in Rule Stub Creation Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
24
[Word Count: 38]

1.9.3
Obfuscating IP Address Printouts
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
24
[Word Count: 38]

1.9.4
Specifying Multiple-Instance Identiﬁers . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
24
[Word Count: 34]

1.9.5
Snort Modes
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
25
[Word Count: 47]

1.10 Control socket . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
26
[Word Count: 51]

1.11 Conﬁgure signal value
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
26
[Word Count: 47]

1.12 More Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
27
[Word Count: 49]

2.1
Includes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
28
[Word Count: 53]

2.1.1
Format
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
28
[Word Count: 49]

2.1.2
Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
28
[Word Count: 48]

2.1.3
Conﬁg . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
31
[Word Count: 50]

2.2
Preprocessors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
40
[Word Count: 50]

2.2.1
Frag3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
40
[Word Count: 50]

2.2.2
Session . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
43
[Word Count: 49]

2.2.3
Stream
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
45
[Word Count: 49]

2.2.4
sfPortscan . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
49
[Word Count: 48]

2.2.5
RPC Decode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
55
[Word Count: 47]

2.2.6
Performance Monitor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
55
[Word Count: 43]

2.2.7
HTTP Inspect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
60
[Word Count: 47]

2.2.8
SMTP Preprocessor
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
76
[Word Count: 43]

2.2.9
POP Preprocessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
81
[Word Count: 45]

2.2.10 IMAP Preprocessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
83
[Word Count: 44]

2.2.11 FTP/Telnet Preprocessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
85
[Word Count: 41]

2.2.12 SSH . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
92
[Word Count: 51]

2.2.13 DNS
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
93
[Word Count: 50]

2.2.14 SSL/TLS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
94
[Word Count: 48]

2.2.15 ARP Spoof Preprocessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
96
[Word Count: 42]

2.2.16 DCE/RPC 2 Preprocessor
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
96
[Word Count: 41]

2.2.17 Sensitive Data Preprocessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
[Word Count: 40]

2.2.18 Normalizer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
[Word Count: 47]

2.2.19 SIP Preprocessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
[Word Count: 45]

2.2.20 Reputation Preprocessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
[Word Count: 41]

2.2.21 GTP Decoder and Preprocessor
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
[Word Count: 39]

2.2.22 Modbus Preprocessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
[Word Count: 43]

2.2.23 DNP3 Preprocessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138
[Word Count: 44]

2.2.24 AppId Preprocessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141
[Word Count: 44]

2.3
Decoder and Preprocessor Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
[Word Count: 43]

2.3.1
Conﬁguring . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
[Word Count: 47]

2.3.2
Reverting to original behavior . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
[Word Count: 40]

2.4
Event Processing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
[Word Count: 49]

2.4.1
Rate Filtering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147
[Word Count: 47]

2.4.2
Event Filtering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149
[Word Count: 46]

2.4.3
Event Suppression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151
[Word Count: 44]

2.4.4
Event Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152
[Word Count: 46]

2.4.5
Event Trace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153
[Word Count: 48]

2.5
Performance Proﬁling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153
[Word Count: 47]

2.5.1
Rule Proﬁling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
[Word Count: 47]

2.5.2
Preprocessor Proﬁling
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155
[Word Count: 42]

2.5.3
Packet Performance Monitoring (PPM) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
[Word Count: 35]

2.6
Output Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
[Word Count: 50]

2.6.1
alert syslog . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
[Word Count: 48]

2.6.2
alert fast
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
[Word Count: 49]

2.6.3
alert full
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
[Word Count: 49]

2.6.4
alert unixsock . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
[Word Count: 47]

2.6.5
log tcpdump
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
[Word Count: 47]

2.6.6
csv
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
[Word Count: 51]

2.6.7
uniﬁed 2
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166
[Word Count: 49]

2.6.8
log null . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168
[Word Count: 50]

2.6.9
Log Limits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
[Word Count: 48]

2.7
Host Attribute Table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
[Word Count: 49]

2.7.1
Rule evaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
[Word Count: 46]

2.7.2
Snort Conﬁguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
[Word Count: 44]

2.7.3
Host Attribute Table File Format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
[Word Count: 40]

2.7.4
Attribute Table Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
[Word Count: 42]

2.7.5
Attribute Table Affect on preprocessors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172
[Word Count: 36]

2.8
Dynamic Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
[Word Count: 49]

2.8.1
Format
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
[Word Count: 49]

2.8.2
Directives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
[Word Count: 48]

2.9
Reloading a Snort Conﬁguration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
[Word Count: 43]

2.9.1
Enabling support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
[Word Count: 45]

2.9.2
Reloading a conﬁguration
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
[Word Count: 41]

2.9.3
Non-reloadable conﬁguration options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
[Word Count: 35]

2.10 Multiple Conﬁgurations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176
[Word Count: 46]

2.10.1 Creating Multiple Conﬁgurations
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176
[Word Count: 37]

2.10.2 Conﬁguration Speciﬁc Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
[Word Count: 38]

2.10.3 How Conﬁguration is applied? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
[Word Count: 40]

2.11 Active Response
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
[Word Count: 49]

2.11.1 Enabling Active Response . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
[Word Count: 41]

2.11.2 Conﬁgure Sniping
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
[Word Count: 44]

2.11.3 Flexresp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
[Word Count: 49]

2.11.4 React . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
[Word Count: 50]

2.11.5 Rule Actions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
[Word Count: 47]

3.1
The Basics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
[Word Count: 53]

3.2
Rules Headers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
[Word Count: 51]

3.2.1
Rule Actions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
[Word Count: 47]

3.2.2
Protocols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
[Word Count: 48]

3.2.3
IP Addresses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
[Word Count: 47]

3.2.4
Port Numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
[Word Count: 47]

3.2.5
The Direction Operator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 184
[Word Count: 43]

3.2.6
Activate/Dynamic Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
[Word Count: 41]

3.3
Rule Options
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
[Word Count: 51]

3.4
General Rule Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
[Word Count: 48]

3.4.1
msg . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
[Word Count: 51]

3.4.2
reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
[Word Count: 48]

3.4.3
gid
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
[Word Count: 51]

3.4.4
sid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
[Word Count: 52]

3.4.5
rev
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
[Word Count: 51]

3.4.6
classtype
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
[Word Count: 48]

3.4.7
priority . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
[Word Count: 49]

3.4.8
metadata
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
[Word Count: 48]

3.4.9
General Rule Quick Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
[Word Count: 40]

3.5
Payload Detection Rule Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
[Word Count: 43]

3.5.1
content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
[Word Count: 49]

3.5.2
protected content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
[Word Count: 45]

3.5.3
hash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192
[Word Count: 51]

3.5.4
length . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
[Word Count: 50]

3.5.5
nocase . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
[Word Count: 50]

3.5.6
rawbytes
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
[Word Count: 48]

3.5.7
depth . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
[Word Count: 50]

3.5.8
offset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194
[Word Count: 50]

3.5.9
distance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194
[Word Count: 49]

3.5.10 within . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
[Word Count: 50]

3.5.11 http client body . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
[Word Count: 47]

3.5.12 http cookie . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
[Word Count: 48]

3.5.13 http raw cookie . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
[Word Count: 47]

3.5.14 http header . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197
[Word Count: 48]

3.5.15 http raw header . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197
[Word Count: 47]

3.5.16 http method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198
[Word Count: 48]

3.5.17 http uri . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198
[Word Count: 50]

3.5.18 http raw uri . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198
[Word Count: 49]

3.5.19 http stat code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
[Word Count: 48]

3.5.20 http stat msg . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
[Word Count: 48]

3.5.21 http encode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200
[Word Count: 48]

3.5.22 fast pattern . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
[Word Count: 48]

3.5.23 uricontent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202
[Word Count: 48]

3.5.24 urilen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
[Word Count: 50]

3.5.25 isdataat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204
[Word Count: 49]

3.5.26 pcre . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204
[Word Count: 51]

3.5.27 pkt data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
[Word Count: 50]

3.5.28 ﬁle data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
[Word Count: 50]

3.5.29 base64 decode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207
[Word Count: 46]

3.5.30 base64 data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208
[Word Count: 48]

3.5.31 byte test . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208
[Word Count: 50]

3.5.32 byte jump . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
[Word Count: 49]

3.5.33 byte extract . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211
[Word Count: 48]

3.5.34 byte math . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
[Word Count: 49]

3.5.35 ftpbounce . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
[Word Count: 48]

3.5.36 asn1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
[Word Count: 51]

3.5.37 cvs
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
[Word Count: 51]

3.5.38 dce iface
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
[Word Count: 49]

3.5.39 dce opnum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
[Word Count: 48]

3.5.40 dce stub data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
[Word Count: 48]

3.5.41 sip method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
[Word Count: 48]

3.5.42 sip stat code
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
[Word Count: 48]

3.5.43 sip header . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
[Word Count: 49]

3.5.44 sip body
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
[Word Count: 49]

3.5.45 gtp type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
[Word Count: 50]

3.5.46 gtp info . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
[Word Count: 50]

3.5.47 gtp version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
[Word Count: 48]

3.5.48 ssl version
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
[Word Count: 48]

3.5.49 ssl state . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217
[Word Count: 50]

3.5.50 Payload Detection Quick Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
[Word Count: 37]

3.6
Non-Payload Detection Rule Options
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
[Word Count: 40]

3.6.1
fragoffset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
[Word Count: 48]

3.6.2
ttl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219
[Word Count: 52]

3.6.3
tos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219
[Word Count: 52]

3.6.4
id . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220
[Word Count: 52]

3.6.5
ipopts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220
[Word Count: 50]

3.6.6
fragbits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221
[Word Count: 49]

3.6.7
dsize
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221
[Word Count: 50]

3.6.8
ﬂags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222
[Word Count: 51]

3.6.9
ﬂow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223
[Word Count: 51]

3.6.10 ﬂowbits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
[Word Count: 49]

3.6.11 seq
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226
[Word Count: 51]

3.6.12 ack
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227
[Word Count: 51]

3.6.13 window . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227
[Word Count: 49]

3.6.14 itype
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227
[Word Count: 50]

3.6.15 icode
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
[Word Count: 50]

3.6.16 icmp id . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
[Word Count: 50]

3.6.17 icmp seq
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229
[Word Count: 49]

3.6.18 rpc
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229
[Word Count: 51]

3.6.19 ip proto . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229
[Word Count: 50]

3.6.20 sameip
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230
[Word Count: 49]

3.6.21 stream reassemble . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230
[Word Count: 44]

3.6.22 stream size . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230
[Word Count: 48]

3.6.23 Non-Payload Detection Quick Reference
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
[Word Count: 34]

3.7
Post-Detection Rule Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232
[Word Count: 44]

3.7.1
logto
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232
[Word Count: 50]

3.7.2
session
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232
[Word Count: 49]

3.7.3
resp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232
[Word Count: 51]

3.7.4
react . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
[Word Count: 51]

3.7.5
tag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
[Word Count: 52]

3.7.6
replace
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
[Word Count: 49]

3.7.7
detection ﬁlter
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
[Word Count: 46]

3.7.8
Post-Detection Quick Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
[Word Count: 38]

3.8
Rule Thresholds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
[Word Count: 50]

3.9
Writing Good Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
[Word Count: 49]

3.9.1
Content Matching
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
[Word Count: 44]

3.9.2
Catch the Vulnerability, Not the Exploit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
[Word Count: 37]

3.9.3
Catch the Oddities of the Protocol in the Rule . . . . . . . . . . . . . . . . . . . . . . . . . . 237
[Word Count: 37]

3.9.4
Optimizing Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 237
[Word Count: 45]

3.9.5
Testing Numerical Values
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 239
[Word Count: 41]

4.1
Data Structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242
[Word Count: 50]

4.1.1
DynamicPluginMeta . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242
[Word Count: 42]

4.1.2
DynamicPreprocessorData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242
[Word Count: 39]

4.1.3
DynamicEngineData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243
[Word Count: 42]

4.1.4
SFSnortPacket
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243
[Word Count: 45]

4.1.5
Dynamic Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 244
[Word Count: 46]

4.2
Required Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250
[Word Count: 48]

4.2.1
Preprocessors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251
[Word Count: 46]

4.2.2
Detection Engine . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251
[Word Count: 45]

4.2.3
Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
[Word Count: 50]

4.3
Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
[Word Count: 52]

4.3.1
Preprocessor Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
[Word Count: 42]

4.3.2
Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255
[Word Count: 50]

5.1
Submitting Patches . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258
[Word Count: 48]

5.2
Snort Data Flow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258
[Word Count: 51]

5.2.1
Preprocessors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258
[Word Count: 46]

5.2.2
Detection Plugins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
[Word Count: 45]

5.2.3
Output Plugins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
[Word Count: 46]

5.3
Uniﬁed2 File Format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
[Word Count: 48]

5.3.1
Serial Uniﬁed2 Header . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
[Word Count: 43]

5.3.2
Uniﬁed2 Packet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260
[Word Count: 46]

5.3.3
Uniﬁed2 IDS Event . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260
[Word Count: 45]

5.3.4
Uniﬁed2 IDS Event IP6
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260
[Word Count: 43]

5.3.5
Uniﬁed2 IDS Event (Version 2)
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
[Word Count: 40]

5.3.6
Uniﬁed2 IDS Event IP6 (Version 2) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
[Word Count: 39]

5.3.7
Uniﬁed2 Extra Data
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262
[Word Count: 44]

5.3.8
Description of Fields . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262
[Word Count: 44]

5.4
Buffer dump utility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264
[Word Count: 49]

5.4.1
Example Buffer Dump output . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265
[Word Count: 40]

5.5
The Snort Team . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
[Word Count: 51]

Snort really isn’t very hard to use, but there are a lot of command line options to play with, and it’s not always obvious
which ones go together well. This ﬁle aims to make using Snort easier for new users.
[Word Count: 40]

Before we proceed, there are a few basic concepts you should understand about Snort. Snort can be conﬁgured to run
in three modes:
[Word Count: 23]

• Sniffer mode, which simply reads the packets off of the network and displays them for you in a continuous
stream on the console (screen).
[Word Count: 25]

• Packet Logger mode, which logs the packets to disk.
[Word Count: 10]

• Network Intrusion Detection System (NIDS) mode, which performs detection and analysis on network trafﬁc.
This is the most complex and conﬁgurable mode.
[Word Count: 23]

First, let’s start with the basics. If you just want to print out the TCP/IP packet headers to the screen (i.e. sniffer mode),
try this:
[Word Count: 25]

This command will run Snort and just show the IP and TCP/UDP/ICMP headers, nothing else. If you want to see the
application data in transit, try the following:
[Word Count: 28]

This instructs Snort to display the packet data as well as the headers. If you want an even more descriptive display,
showing the data link layer headers, do this:
[Word Count: 29]

As an aside, notice that the command line switches can be listed separately or in a combined form. The last command
could also be typed out as:
[Word Count: 27]

OK, all of these commands are pretty cool, but if you want to record the packets to the disk, you need to specify a
logging directory and Snort will automatically know to go into packet logger mode:
[Word Count: 37]

Of course, this assumes you have a directory named log in the current directory. If you don’t, Snort will exit with
an error message. When Snort runs in this mode, it collects every packet it sees and places it in a directory hierarchy
based upon the IP address of one of the hosts in the datagram.
[Word Count: 56]

If you just specify a plain -l switch, you may notice that Snort sometimes uses the address of the remote computer
as the directory in which it places packets and sometimes it uses the local host address. In order to log relative to the
home network, you need to tell Snort which network is the home network:
[Word Count: 57]

If you’re on a high speed network or you want to log the packets into a more compact form for later analysis, you
should consider logging in binary mode. Binary mode logs the packets in tcpdump format to a single binary ﬁle in the
logging directory:
[Word Count: 46]

Once the packets have been logged to the binary ﬁle, you can read the packets back out of the ﬁle with any sniffer that
supports the tcpdump binary format (such as tcpdump or Ethereal). Snort can also read the packets back by using the
-r switch, which puts it into playback mode. Packets from any tcpdump formatted ﬁle can be processed through Snort
in any of its run modes. For example, if you wanted to run a binary log ﬁle through Snort in sniffer mode to dump the
packets to the screen, you can try something like this:
[Word Count: 98]

You can manipulate the data in the ﬁle in a number of ways through Snort’s packet logging and intrusion detection
modes, as well as with the BPF interface that’s available from the command line. For example, if you only wanted to
see the ICMP packets from the log ﬁle, simply specify a BPF ﬁlter at the command line and Snort will only see the
ICMP packets in the ﬁle:
[Word Count: 69]

For more info on how to use the BPF interface, read the Snort and tcpdump man pages.
[Word Count: 17]

1.4
Network Intrusion Detection System Mode
[Word Count: 6]

To enable Network Intrusion Detection System (NIDS) mode so that you don’t record every single packet sent down
the wire, try this:
[Word Count: 22]

./snort -dev -l ./log -h 192.168.1.0/24 -c snort.conf
[Word Count: 8]

where snort.conf is the name of your snort conﬁguration ﬁle. This will apply the rules conﬁgured in the snort.conf
ﬁle to each packet to decide if an action based upon the rule type in the ﬁle should be taken. If you don’t specify an
output directory for the program, it will default to /var/log/snort.
[Word Count: 54]

One thing to note about the last command line is that if Snort is going to be used in a long term way as an IDS, the
-v switch should be left off the command line for the sake of speed. The screen is a slow place to write data to, and
packets can be dropped while writing to the display.
[Word Count: 61]

It’s also not necessary to record the data link headers for most applications, so you can usually omit the -e switch, too.
[Word Count: 22]

./snort -d -h 192.168.1.0/24 -l ./log -c snort.conf
[Word Count: 8]

This will conﬁgure Snort to run in its most basic NIDS form, logging packets that trigger rules speciﬁed in the
snort.conf in plain ASCII to disk using a hierarchical directory structure (just like packet logger mode).
[Word Count: 36]

There are a number of ways to conﬁgure the output of Snort in NIDS mode. The default logging and alerting mecha-
nisms are to log in decoded ASCII format and use full alerts. The full alert mechanism prints out the alert message in
addition to the full packet headers. There are several other alert output modes available at the command line, as well
as two logging facilities.
[Word Count: 67]

Alert modes are somewhat more complex. There are seven alert modes available at the command line: full, fast,
socket, syslog, console, cmg, and none. Six of these modes are accessed with the -A command line switch. These
options are:
[Word Count: 39]

Option
Description
-A fast
Fast alert mode. Writes the alert in a simple format with a timestamp, alert message, source and
destination IPs/ports.
-A full
Full alert mode. This is the default alert mode and will be used automatically if you do not specify
a mode.
-A unsock
Sends alerts to a UNIX socket that another program can listen on.
-A none
Turns off alerting.
-A console
Sends “fast-style” alerts to the console (screen).
-A cmg
Generates “cmg style” alerts.
[Word Count: 80]

Packets can be logged to their default decoded ASCII format or to a binary log ﬁle via the -b command line switch.
To disable packet logging altogether, use the -N command line switch.
[Word Count: 33]

For output modes available through the conﬁguration ﬁle, see Section 2.6.
△
! NOTE
Command line logging options override any output options speciﬁed in the conﬁguration ﬁle. This allows
debugging of conﬁguration issues quickly via the command line.
[Word Count: 38]

To send alerts to syslog, use the -s switch. The default facilities for the syslog alerting mechanism are LOG AUTHPRIV
and LOG ALERT. If you want to conﬁgure other facilities for syslog output, use the output plugin directives in
snort.conf. See Section 2.6.1 for more details on conﬁguring syslog output.
[Word Count: 50]

For example, use the following command line to log to default (decoded ASCII) facility and send alerts to syslog:
[Word Count: 19]

./snort -c snort.conf -l ./log -h 192.168.1.0/24 -s
[Word Count: 8]

As another example, use the following command line to log to the default facility in /var/log/snort and send alerts to a
fast alert ﬁle:
[Word Count: 24]

./snort -c snort.conf -A fast -h 192.168.1.0/24
[Word Count: 7]

1.4.2
Understanding Standard Alert Output
[Word Count: 5]

When Snort generates an alert message, it will usually look like the following:
[Word Count: 13]

[**] [116:56:1] (snort_decoder): T/TCP Detected [**]
[Word Count: 6]

The ﬁrst number is the Generator ID, this tells the user what component of Snort generated this alert. For a list of
GIDs, please read etc/generators in the Snort source. In this case, we know that this event came from the “decode”
(116) component of Snort.
[Word Count: 46]

The second number is the Snort ID (sometimes referred to as Signature ID). For a list of preprocessor SIDs, please see
etc/gen-msg.map. Rule-based SIDs are written directly into the rules with the sid option. In this case, 56 represents a
T/TCP event.
[Word Count: 42]

The third number is the revision ID. This number is primarily used when writing signatures, as each rendition of the
rule should increment this number with the rev option.
[Word Count: 29]

If you want Snort to go fast (like keep up with a 1000 Mbps connection), you need to use uniﬁed2 logging and a
uniﬁed2 log reader such as barnyard2. This allows Snort to log alerts in a binary form as fast as possible while another
program performs the slow actions, such as writing to a database.
[Word Count: 56]

If you want a text ﬁle that’s easily parsed, but still somewhat fast, try using binary logging with the “fast” output
mechanism.
[Word Count: 22]

This will log packets in tcpdump format and produce minimal alerts. For example:
[Word Count: 13]

The default way in which Snort applies its rules to packets may not be appropriate for all installations. The Pass rules
are applied ﬁrst, then the Drop rules, then the Alert rules and ﬁnally, Log rules are applied.
△
! NOTE
Sometimes an errant pass rule could cause alerts to not show up, in which case you can change the default
ordering to allow Alert rules to be applied before Pass rules. For more information, please refer to the
--alert-before-pass option.
[Word Count: 81]

Several command line options are available to change the order in which rule actions are taken.
[Word Count: 16]

• --alert-before-pass option forces alert rules to take affect in favor of a pass rule.
[Word Count: 15]

• --treat-drop-as-alert causes drop and reject rules and any associated alerts to be logged as alerts, rather
then the normal action. This allows use of an inline policy with passive/IDS mode. The sdrop rules are not
loaded.
[Word Count: 37]

• --process-all-events option causes Snort to process every event associated with a packet, while taking the
actions based on the rules ordering. Without this option (default case), only the events for the ﬁrst action based
on rules ordering are processed.
[Word Count: 40]

△
! NOTE
Pass rules are special cases here, in that the event processing is terminated when a pass rule is encountered,
regardless of the use of --process-all-events.
[Word Count: 28]

Assuming that you did not disable static modules or change the default DAQ type, you can run Snort just as you always
did for ﬁle readback or snifﬁng an interface. However, you can select and conﬁgure the DAQ when Snort is invoked
as follows:
[Word Count: 44]

./snort \
[--daq <type>] \
[--daq-mode <mode>] \
[--daq-dir <dir>] \
[--daq-var <var>]
[Word Count: 13]

config daq: <type>
config daq_dir: <dir>
config daq_var: <var>
config daq_mode: <mode>
[Word Count: 12]

<type> ::= pcap | afpacket | dump | nfq | ipq | ipfw
<mode> ::= read-file | passive | inline
<var> ::= arbitrary <name>=<value> passed to DAQ
<dir> ::= path where to look for DAQ module so’s
[Word Count: 37]

The DAQ type, mode, variable, and directory may be speciﬁed either via the command line or in the conf ﬁle. You
may include as many variables and directories as needed by repeating the arg / conﬁg. DAQ type may be speciﬁed at
most once in the conf and once on the command line; if conﬁgured in both places, the command line overrides the
conf.
[Word Count: 64]

If the mode is not set explicitly, -Q will force it to inline, and if that hasn’t been set, -r will force it to read-ﬁle, and
if that hasn’t been set, the mode defaults to passive. Also, -Q and –daq-mode inline are allowed, since there is no
conﬂict, but -Q and any other DAQ mode will cause a fatal error at start-up.
[Word Count: 62]

Note that if Snort ﬁnds multiple versions of a given library, the most recent version is selected. This applies to static
and dynamic versions of the same library.
[Word Count: 28]

./snort --daq-list[=<dir>]
./snort --daq-dir=<dir> --daq-list
[Word Count: 5]

The above commands search the speciﬁed directories for DAQ modules and print type, version, and attributes of each.
This feature is not available in the conf. Snort stops processing after parsing –daq-list so if you want to add one or more
directories add –daq-dir options before –daq-list on the command line. (Since the directory is optional to –daq-list,
you must use an = without spaces for this option.)
[Word Count: 68]

pcap is the default DAQ. if snort is run w/o any DAQ arguments, it will operate as it always did using this module.
These are equivalent:
[Word Count: 26]

./snort --daq pcap --daq-mode passive -i <device>
./snort --daq pcap --daq-mode read-file -r <file>
[Word Count: 14]

You can specify the buffer size pcap uses with:
[Word Count: 9]

./snort --daq pcap --daq-var buffer_size=<#bytes>
[Word Count: 5]

Note that the pcap DAQ does not count ﬁltered packets.
[Word Count: 10]

afpacket functions similar to the memory mapped pcap DAQ but no external library is required:
[Word Count: 15]

./snort --daq afpacket -i <device>
[--daq-var buffer_size_mb=<#MB>]
[--daq-var debug]
[Word Count: 9]

If you want to run afpacket in inline mode, you must set device to one or more interface pairs, where each member of
a pair is separated by a single colon and each pair is separated by a double colon like this:
[Word Count: 42]

By default, the afpacket DAQ allocates 128MB for packet memory. You can change this with:
[Word Count: 15]

Note that the total allocated is actually higher, here’s why. Assuming the default packet memory with a snaplen of
1518, the numbers break down like this:
[Word Count: 26]

1.
The frame size is 1518 (snaplen) + the size of the AFPacket header (66 bytes) = 1584 bytes.
[Word Count: 19]

2.
The number of frames is 128 MB / 1518 = 84733.
[Word Count: 12]

3.
The smallest block size that can ﬁt at least one frame is 4 KB = 4096 bytes @ 2 frames per block.
[Word Count: 23]

4.
As a result, we need 84733 / 2 = 42366 blocks.
[Word Count: 12]

5.
Actual memory allocated is 42366 * 4 KB = 165.5 MB.
[Word Count: 12]

NFQ is the new and improved way to process iptables packets:
[Word Count: 11]

./snort --daq nfq \
[--daq-var device=<dev>] \
[--daq-var proto=<proto>] \
[--daq-var queue=<qid>] \
[--daq-var queue_len=<qlen>]
[Word Count: 15]

<dev> ::= ip | eth0, etc; default is IP injection
<proto> ::= ip4 | ip6 | ip*; default is ip4
<qid> ::= 0..65535; default is 0
<qlen> ::= 0..65535; default is 0
[Word Count: 32]

Notes on iptables can be found in the DAQ distro README.
[Word Count: 11]

IPQ is the old way to process iptables packets. It replaces the inline version available in pre-2.9 versions built with
this:
[Word Count: 21]

./snort --daq ipq \
[--daq-var device=<dev>] \
[--daq-var proto=<proto>] \
[Word Count: 10]

<dev> ::= ip | eth0, etc; default is IP injection
<proto> ::= ip4 | ip6; default is ip4
[Word Count: 18]

IPFW is available for BSD systems. It replaces the inline version available in pre-2.9 versions built with this:
[Word Count: 18]

./configure --enable-ipfw / -DGIDS -DIPFW
[Word Count: 5]

This command line argument is no longer supported:
[Word Count: 8]

./snort --daq ipfw [--daq-var port=<port>]
[Word Count: 5]

The dump DAQ allows you to test the various inline mode features available in 2.9 Snort like injection and normaliza-
tion.
[Word Count: 21]

./snort -i <device> --daq dump
./snort -r <pcap> --daq dump
[Word Count: 10]

By default a ﬁle named inline-out.pcap will be created containing all packets that passed through or were generated
by snort. You can optionally specify a different name.
[Word Count: 27]

./snort --daq dump --daq-var file=<name>
[Word Count: 5]

dump uses the pcap daq for packet acquisition. It therefore does not count ﬁltered packets.
[Word Count: 15]

Note that the dump DAQ inline mode is not an actual inline mode. Furthermore, you will probably want to have the
pcap DAQ acquire in another mode like this:
[Word Count: 29]

./snort -r <pcap> -Q --daq dump --daq-var load-mode=read-file
./snort -i <device> -Q --daq dump --daq-var load-mode=passive
[Word Count: 16]

The Packet Wire Totals and Action Stats sections of Snort’s output include additional ﬁelds:
[Word Count: 14]

• Filtered count of packets ﬁltered out and not handed to Snort for analysis.
[Word Count: 14]

• Injected packets Snort generated and sent, e.g. TCP resets.
[Word Count: 10]

• Allow packets Snort analyzed and did not take action on.
[Word Count: 11]

• Block packets Snort did not forward, e.g. due to a block rule.
[Word Count: 13]

• Whitelist packets that caused Snort to allow a ﬂow to pass w/o inspection by any analysis program.
[Word Count: 18]

• Blacklist packets that caused Snort to block a ﬂow from passing.
[Word Count: 12]

• Ignore packets that caused Snort to allow a ﬂow to pass w/o inspection by this instance of Snort.
[Word Count: 19]

The action stats show ”blocked” packets instead of ”dropped” packets to avoid confusion between dropped packets
(those Snort didn’t actually see) and blocked packets (those Snort did not allow to pass).
[Word Count: 31]

Instead of having Snort listen on an interface, you can give it a packet capture to read. Snort will read and analyze the
packets as if they came off the wire. This can be useful for testing and debugging Snort.
[Word Count: 40]

Any of the below can be speciﬁed multiple times on the command line (-r included) and in addition to other Snort
command line options. Note, however, that specifying --pcap-reset and --pcap-show multiple times has the same
effect as specifying them once.
[Word Count: 41]

$ snort -r foo.pcap
$ snort --pcap-single=foo.pcap
[Word Count: 7]

$ cat foo.txt
foo1.pcap
foo2.pcap
/home/foo/pcaps
[Word Count: 6]

This will read foo1.pcap, foo2.pcap and all ﬁles under /home/foo/pcaps. Note that Snort will not try to determine
whether the ﬁles under that directory are really pcap ﬁles or not.
[Word Count: 30]

$ snort --pcap-list="foo1.pcap foo2.pcap foo3.pcap"
[Word Count: 5]

This will read foo1.pcap, foo2.pcap and foo3.pcap.
[Word Count: 7]

This will include all of the ﬁles under /home/foo/pcaps.
[Word Count: 9]

$ cat foo.txt
foo1.pcap
foo2.pcap
/home/foo/pcaps
[Word Count: 6]

$ snort --pcap-filter="*.pcap" --pcap-file=foo.txt
$ snort --pcap-filter="*.pcap" --pcap-dir=/home/foo/pcaps
[Word Count: 8]

The above will only include ﬁles that match the shell pattern ”*.pcap”, in other words, any ﬁle ending in ”.pcap”.
[Word Count: 20]

$ snort --pcap-filter="*.pcap --pcap-file=foo.txt \
> --pcap-filter="*.cap" --pcap-dir=/home/foo/pcaps
[Word Count: 8]

In the above, the ﬁrst ﬁlter ”*.pcap” will only be applied to the pcaps in the ﬁle ”foo.txt” (and any directories that are
recursed in that ﬁle). The addition of the second ﬁlter ”*.cap” will cause the ﬁrst ﬁlter to be forgotten and then applied
to the directory /home/foo/pcaps, so only ﬁles ending in ”.cap” will be included from that directory.
[Word Count: 61]

$ snort --pcap-filter="*.pcap --pcap-file=foo.txt \
> --pcap-no-filter --pcap-dir=/home/foo/pcaps
[Word Count: 8]

In this example, the ﬁrst ﬁlter will be applied to foo.txt, then no ﬁlter will be applied to the ﬁles found under
/home/foo/pcaps, so all ﬁles found under /home/foo/pcaps will be included.
[Word Count: 32]

$ snort --pcap-filter="*.pcap --pcap-file=foo.txt \
> --pcap-no-filter --pcap-dir=/home/foo/pcaps \
> --pcap-filter="*.cap" --pcap-dir=/home/foo/pcaps2
[Word Count: 12]

In this example, the ﬁrst ﬁlter will be applied to foo.txt, then no ﬁlter will be applied to the ﬁles found under
/home/foo/pcaps, so all ﬁles found under /home/foo/pcaps will be included, then the ﬁlter ”*.cap” will be applied
to ﬁles found under /home/foo/pcaps2.
[Word Count: 44]

$ snort --pcap-dir=/home/foo/pcaps --pcap-reset
[Word Count: 4]

The above example will read all of the ﬁles under /home/foo/pcaps, but after each pcap is read, Snort will be reset to
a post-conﬁguration state, meaning all buffers will be ﬂushed, statistics reset, etc. For each pcap, it will be like Snort
is seeing trafﬁc for the ﬁrst time.
[Word Count: 49]

$ snort --pcap-dir=/home/foo/pcaps --pcap-show
[Word Count: 4]

The above example will read all of the ﬁles under /home/foo/pcaps and will print a line indicating which pcap is
currently being read.
[Word Count: 23]

Snort does a lot of work and outputs some useful statistics when it is done. Many of these are self-explanatory. The
others are summarized below. This does not include all possible output data, just the basics.
[Word Count: 36]

This section provides basic timing statistics. It includes total seconds and packets as well as packet processing rates.
The rates are based on whole seconds, minutes, etc. and only shown when non-zero.
[Word Count: 32]

===============================================================================
Run time for packet processing was 175.856509 seconds
Snort processed 3716022 packets.
Snort ran for 0 days 0 hours 2 minutes 55 seconds
Pkts/min:
1858011
Pkts/sec:
21234
===============================================================================
[Word Count: 29]

This section shows basic packet acquisition and injection peg counts obtained from the DAQ. If you are reading pcaps,
the totals are for all pcaps combined, unless you use –pcap-reset, in which case it is shown per pcap.
[Word Count: 38]

• Outstanding indicates how many packets are buffered awaiting processing. The way this is counted varies per
DAQ so the DAQ documentation should be consulted for more info.
[Word Count: 28]

• Filtered packets are not shown for pcap DAQs.
[Word Count: 9]

• Injected packets are the result of active response which can be conﬁgured for inline or passive modes.
[Word Count: 18]

===============================================================================
Packet I/O Totals:
Received:
3716022
Analyzed:
3716022 (100.000%)
[Word Count: 9]

Dropped:
0 (
0.000%)
Filtered:
0 (
0.000%)
Outstanding:
0 (
0.000%)
Injected:
0
===============================================================================
[Word Count: 15]

Trafﬁc for all the protocols decoded by Snort is summarized in the breakdown section. This trafﬁc includes internal
”pseudo-packets” if preprocessors such as frag3 and stream5 are enabled so the total may be greater than the number
of analyzed packets in the packet I/O section.
[Word Count: 45]

• Disc counts are discards due to basic encoding integrity ﬂaws that prevents Snort from decoding the packet.
[Word Count: 18]

• Other includes packets that contained an encapsulation that Snort doesn’t decode.
[Word Count: 12]

• S5 G 1/2 is the number of client/server sessions stream5 ﬂushed due to cache limit, session timeout, session
reset.
[Word Count: 20]

IPX:
60 (
0.002%)
Eth Loop:
0 (
0.000%)
Eth Disc:
0 (
0.000%)
IP4 Disc:
0 (
0.000%)
IP6 Disc:
0 (
0.000%)
TCP Disc:
0 (
0.000%)
UDP Disc:
1385 (
0.037%)
ICMP Disc:
0 (
0.000%)
All Discard:
1385 (
0.037%)
Other:
57876 (
1.555%)
Bad Chk Sum:
32135 (
0.863%)
Bad TTL:
0 (
0.000%)
S5 G 1:
1494 (
0.040%)
S5 G 2:
1654 (
0.044%)
Total:
3722347
===============================================================================
[Word Count: 74]

On systems with mallinfo (3), you will see additional statistics. Check the man page of mallinfo for details
[Word Count: 18]

===============================================================================
Memory usage summary:
Total non-mmapped bytes (arena):
415481856
Bytes in mapped regions (hblkhd):
409612288
Total allocated space (uordblks):
92130384
Total free space (fordblks):
323351472
Topmost releasable block (keepcost):
3200
===============================================================================
[Word Count: 31]

Action and verdict counts show what Snort did with the packets it analyzed. This information is only output in IDS
mode (when snort is run with the -c <conf> option).
[Word Count: 30]

• Alerts is the number of alert, and block actions processed as determined by the rule actions. Here block includes
block, drop, and reject actions.
[Word Count: 25]

Limits arise due to real world constraints on processing time and available memory. These indicate potential actions
that did not happen:
[Word Count: 21]

• Match Limit counts rule matches were not processed due to the config detection:
max queue events
setting. The default is 5.
[Word Count: 22]

• Queue Limit counts events couldn’t be stored in the event queue due to the config event queue:
max queue
setting. The default is 8.
[Word Count: 25]

• Log Limit counts events were not alerted due to the config event queue:
log setting. The default is 3.
[Word Count: 20]

• Event Limit counts events not alerted due to event filter limits.
[Word Count: 12]

• Alert Limit counts events were not alerted because they already were triggered on the session.
[Word Count: 16]

Verdicts are rendered by Snort on each packet:
[Word Count: 8]

• Allow = packets Snort analyzed and did not take action on.
[Word Count: 12]

• Block = packets Snort did not forward, e.g. due to a block rule. ”Block” is used instead of ”Drop” to avoid
confusion between dropped packets (those Snort didn’t actually see) and blocked packets (those Snort did not
allow to pass).
[Word Count: 41]

• Replace = packets Snort modiﬁed, for example, due to normalization or replace rules. This can only happen in
inline mode with a compatible DAQ.
[Word Count: 25]

• Whitelist = packets that caused Snort to allow a ﬂow to pass w/o inspection by any analysis program. Like
blacklist, this is done by the DAQ or by Snort on subsequent packets.
[Word Count: 33]

• Blacklist = packets that caused Snort to block a ﬂow from passing. This is the case when a block TCP rule ﬁres.
If the DAQ supports this in hardware, no further packets will be seen by Snort for that session. If not, snort will
block each packet and this count will be higher.
[Word Count: 54]

• Ignore = packets that caused Snort to allow a ﬂow to pass w/o inspection by this instance of Snort. Like blacklist,
this is done by the DAQ or by Snort on subsequent packets.
[Word Count: 34]

• Int Blklst = packets that are GTP, Teredo, 6in4 or 4in6 encapsulated that are being blocked. These packets could
get the Blacklist verdict if config tunnel verdicts was set for the given protocol. Note that these counts are
output only if non-zero. Also, this count is incremented on the ﬁrst packet in the ﬂow that alerts. The alerting
packet and all following packets on the ﬂow will be counted under Block.
[Word Count: 72]

• Int Whtlst = packets that are GTP, Teredo, 6in4 or 4in6 encapsulated that are being allowed. These packets could
get the Whitelist verdict if config tunnel verdicts was set for the given protocol. Note that these counts
are output only if non-zero. Also, this count is incremented for all packets on the ﬂow starting with the alerting
packet.
[Word Count: 59]

===============================================================================
Action Stats:
Alerts:
0 (
0.000%)
Logged:
0 (
0.000%)
Passed:
0 (
0.000%)
Limits:
Match:
0
Queue:
0
Log:
0
Event:
0
Alert:
0
Verdicts:
Allow:
3716022 (100.000%)
Block:
0 (
0.000%)
Replace:
0 (
0.000%)
Whitelist:
0 (
0.000%)
Blacklist:
0 (
0.000%)
Ignore:
0 (
0.000%)
===============================================================================
[Word Count: 51]

Snort supports decoding of many tunneling protocols, including GRE, PPTP over GRE, MPLS, IP in IP, and ERSPAN,
all of which are enabled by default.
[Word Count: 25]

To disable support for any GRE related encapsulation, PPTP over GRE, IPv4/IPv6 over GRE, and ERSPAN, an extra
conﬁguration option is necessary:
[Word Count: 22]

To disable support for MPLS, an separate extra conﬁguration option is necessary:
[Word Count: 12]

Snort will not decode more than one encapsulation. Scenarios such as
[Word Count: 11]

will not be handled and will generate a decoder alert.
[Word Count: 10]

Currently, only the encapsulated part of the packet is logged, e.g.
[Word Count: 11]

△
! NOTE
Decoding of PPTP, which utilizes GRE and PPP, is not currently supported on architectures that require word
alignment such as SPARC.
[Word Count: 24]

If you want to run Snort as a daemon, you can the add -D switch to any combination described in the previous sections.
Please notice that if you want to be able to restart Snort by sending a SIGHUP signal to the daemon, you must specify
the full path to the Snort binary when you start it, for example:
[Word Count: 59]

/usr/local/bin/snort -d -h 192.168.1.0/24 \
-l /var/log/snortlogs -c /usr/local/etc/snort.conf -s -D
[Word Count: 11]

Relative paths are not supported due to security concerns.
[Word Count: 9]

When Snort is run as a daemon , the daemon creates a PID ﬁle in the log directory. In Snort 2.6, the --pid-path
command line switch causes Snort to write the PID ﬁle in the directory speciﬁed.
[Word Count: 37]

Additionally, the --create-pidfile switch can be used to force creation of a PID ﬁle even when not running in
daemon mode.
[Word Count: 21]

The PID ﬁle will be locked so that other snort processes cannot start. Use the --nolock-pidfile switch to not lock
the PID ﬁle.
[Word Count: 23]

If you do not wish to include the name of the interface in the PID ﬁle, use the --no-interface-pidfile switch.
[Word Count: 20]

1.9.2
Running in Rule Stub Creation Mode
[Word Count: 7]

If you need to dump the shared object rules stub to a directory, you must use the –dump-dynamic-rules command line
option. These rule stub ﬁles are used in conjunction with the shared object rules. The path can be relative or absolute.
[Word Count: 41]

/usr/local/bin/snort -c /usr/local/etc/snort.conf \
--dump-dynamic-rules=/tmp
[Word Count: 5]

This path can also be conﬁgured in the snort.conf using the conﬁg option dump-dynamic-rules-path as follows:
[Word Count: 16]

config dump-dynamic-rules-path: /tmp/sorules
[Word Count: 3]

The path conﬁgured by command line has precedence over the one conﬁgured using dump-dynamic-rules-path.
[Word Count: 14]

/usr/local/bin/snort -c /usr/local/etc/snort.conf \
--dump-dynamic-rules
[Word Count: 5]

snort.conf:
config dump-dynamic-rules-path: /tmp/sorules
[Word Count: 4]

In the above mentioned scenario the dump path is set to /tmp/sorules.
[Word Count: 12]

./snort -d -v -r snort.log -O -h 192.168.1.0/24
[Word Count: 8]

1.9.4
Specifying Multiple-Instance Identiﬁers
[Word Count: 4]

In Snort v2.4, the -G command line option was added that speciﬁes an instance identiﬁer for the event logs. This option
can be used when running multiple instances of snort, either on different CPUs, or on the same CPU but a different
interface. Each Snort instance will use the value speciﬁed to generate unique event IDs. Users can specify either a
decimal value (-G 1) or hex value preceded by 0x (-G 0x11). This is also supported via a long option --logid.
[Word Count: 82]

Snort can operate in three different modes namely tap (passive), inline, and inline-test. Snort policies can be conﬁgured
in these three modes too.
[Word Count: 23]

When Snort is in Inline mode, it acts as an IPS allowing drop rules to trigger. Snort can be conﬁgured to run in
inline mode using the command line argument -Q and snort conﬁg option policy mode as follows:
[Word Count: 39]

When Snort is in Passive mode, it acts as a IDS. Drop rules are not loaded (without –treat-drop-as-alert). Snort
can be conﬁgured to passive mode using the snort conﬁg option policy mode as follows:
[Word Count: 34]

Inline-Test mode simulates the inline mode of snort, allowing evaluation of inline behavior without affecting
trafﬁc. The drop rules will be loaded and will be triggered as a Wdrop (Would Drop) alert. Snort can be
conﬁgured to run in inline-test mode using the command line option (–enable-inline-test) or using the snort
conﬁg option policy mode as follows:
[Word Count: 57]

snort --enable-inline-test
config policy_mode:inline_test
[Word Count: 4]

Please note –enable-inline-test cannot be used in conjunction with -Q.
[Word Count: 10]

Behavior of different modes with rule options
[Word Count: 7]

Rule Option
Inline Mode
Passive Mode
Inline-Test Mode
[Word Count: 8]

reject
Drop + Response
Alert + Response
Wdrop + Response
react
Blocks and send notice
Blocks and send notice
Blocks and send notice
normalize
Normalizes packet
Doesn’t normalize
Doesn’t normalize
replace
replace content
Doesn’t replace
Doesn’t replace
respond
close session
close session
close session
[Word Count: 44]

Behavior of different modes with rules actions
[Word Count: 7]

Snort can be conﬁgured to provide a Unix socket that can be used to issue commands to the running process. You must
build snort with the --enable-control-socket option. The control socket functionality is supported on Linux only.
[Word Count: 37]

Snort can be conﬁgured to use control socket using the command line argument --cs-dir <path> and snort conﬁg
option cs dir as follows:
[Word Count: 23]

snort --cs-dir <path>
config cs_dir:<path>
[Word Count: 5]

<path> speciﬁes the directory for snort to create the socket. If relative path is used, the path is relative to pid path
speciﬁed. If there is no pid path speciﬁed, it is relative to current working directory.
[Word Count: 37]

A command snort control is made and installed along with snort in the same bin directory when conﬁgured with
the --enable-control-socket option.
[Word Count: 22]

On some systems, signal used by snort might be used by other functions. To avoid conﬂicts, users can change the
default signal value through ./configure options for non-Windows system.
[Word Count: 29]

./configure SIGNAL_SNORT_RELOAD=<value/name>
SIGNAL_SNORT_DUMP_STATS=<value/name>\
SIGNAL_SNORT_READ_ATTR_TBL=<value/name> SIGNAL_SNORT_ROTATE_STATS=<value/name>
[Word Count: 5]

You can set those signals to user deﬁned values or known signal names in the system. The following example changes
the rotate stats signal to 31 and reload attribute table to signal SIGUSR2 :
[Word Count: 34]

./configure SIGNAL_SNORT_ROTATE_STATS=31 SIGNAL_SNORT_READ_ATTR_TBL=SIGUSR2
[Word Count: 3]

If the same signal is assigned more than once a warning will be logged during snort initialization. If a signal handler
cannot be installed a warning will be logged and that has to be ﬁxed, otherwise the functionality will be lost.
[Word Count: 41]

Signal name
Default value
Action
SIGTERM
SIGTERM
exit
SIGINT
SIGINT
exit
SIGQUIT
SIGQUIT
exit
SIGPIPE
SIGPIPE
ignore
SIGNAL SNORT RELOAD
SIGHUP
reload snort
SIGNAL SNORT DUMP STATS
SIGUSR1
dump stats
SIGNAL SNORT ROTATE STATS
SIGUSR2
rotate stats
SIGNAL SNORT READ ATTR TBL
SIGURG
reload attribute table
SIGNAL SNORT CHILD READY
SIGCHLD
internal use in daemon mode
[Word Count: 56]

Chapter 2 contains much information about many conﬁguration options available in the conﬁguration ﬁle. The Snort
manual page and the output of snort -? or snort --help contain information that can help you get Snort running
in several different modes.
△
! NOTE
In many shells, a backslash (\) is needed to escape the ?, so you may have to type snort -\? instead of
snort -? for a list of Snort command line options.
[Word Count: 75]

The Snort web page (http://www.snort.org) and the Snort Users mailing list:
[Word Count: 11]

http://marc.theaimsgroup.com/?l=snort-users
[Word Count: 1]

at snort-users@lists.snort.org provide informative announcements as well as a venue for community discussion
and support. There’s a lot to Snort, so sit back with a beverage of your choosing and read the documentation and
mailing list archives.
[Word Count: 37]

The include keyword allows other snort conﬁg ﬁles to be included within the snort.conf indicated on the Snort
command line. It works much like an #include from the C programming language, reading the contents of the named
ﬁle and adding the contents in the place where the include statement appears in the ﬁle.
[Word Count: 53]

△
! NOTE
Note that there is no semicolon at the end of this line.
[Word Count: 15]

Included ﬁles will substitute any predeﬁned variable values into their own variable references. See Section 2.1.2 for
more information on deﬁning and using variables in Snort conﬁg ﬁles.
[Word Count: 28]

Three types of variables may be deﬁned in Snort:
[Word Count: 9]

These are simple substitution variables set with the var, ipvar, or portvar keywords as follows:
[Word Count: 15]

var RULES_PATH rules/
portvar MY_PORTS [22,80,1024:1050]
ipvar MY_NET [192.168.1.0/24,10.1.1.0/24]
alert tcp any any -> $MY_NET $MY_PORTS (flags:S; msg:"SYN packet";)
include $RULE_PATH/example.rule
[Word Count: 21]

IPs may be speciﬁed individually, in a list, as a CIDR block, or any combination of the three. IP variables should be
speciﬁed using ’ipvar’ instead of ’var’. Using ’var’ for an IP variable is still allowed for backward compatibility, but it
will be deprecated in a future release.
[Word Count: 49]

IP variable name can begin with an alphanumeric character [A-Za-z0-9] or ’ ’ and should be followed by characters
and numbers. Only numbers are not accepted as variable names.
[Word Count: 29]

IPs, IP lists, and CIDR blocks may be negated with ’!’. Negation is handled differently compared with Snort versions
2.7.x and earlier. Previously, each element in a list was logically OR’ed together. IP lists now OR non-negated
elements and AND the result with the OR’ed negated elements.
[Word Count: 47]

The following example list will match the IP 1.1.1.1 and IP from 2.2.2.0 to 2.2.2.255, with the exception of IPs 2.2.2.2
and 2.2.2.3.
[Word Count: 23]

The order of the elements in the list does not matter. The element ’any’ can be used to match all IPs, although ’!any’
is not allowed. Also, negated IP ranges that are more general than non-negated IP ranges are not allowed.
[Word Count: 41]

See below for some valid examples if IP variables and IP lists.
[Word Count: 12]

ipvar EXAMPLE [1.1.1.1,2.2.2.0/24,![2.2.2.2,2.2.2.3]]
[Word Count: 3]

alert tcp $EXAMPLE any -> any any (msg:"Example"; sid:1;)
[Word Count: 9]

alert tcp [1.0.0.0/8,!1.1.1.0/24] any -> any any (msg:"Example";sid:2;)
[Word Count: 8]

The following examples demonstrate some invalid uses of IP variables and IP lists.
[Word Count: 13]

ipvar EXAMPLE any
alert tcp !$EXAMPLE any -> any any (msg:"Example";sid:3;)
[Word Count: 11]

ipvar EXAMPLE !any
alert tcp $EXAMPLE any -> any any (msg:"Example";sid:3;)
[Word Count: 11]

Portlists supports the declaration and lookup of ports and the representation of lists and ranges of ports. Variables,
ranges, or lists may all be negated with ’!’. Also, ’any’ will specify any ports, but ’!any’ is not allowed. Valid port
ranges are from 0 to 65535.
[Word Count: 46]

Lists of ports must be enclosed in brackets and port ranges may be speciﬁed with a ’:’, such as in:
[Word Count: 20]

Port variables should be speciﬁed using ’portvar’. The use of ’var’ to declare a port variable will be deprecated in a
future release. For backwards compatibility, a ’var’ can still be used to declare a port variable, provided the variable
name either ends with ’ PORT’ or begins with ’PORT ’.
[Word Count: 51]

The following examples demonstrate several valid usages of both port variables and port lists.
[Word Count: 14]

alert tcp any $EXAMPLE1 -> any $EXAMPLE2_PORT (msg:"Example"; sid:1;)
[Word Count: 9]

alert tcp any $PORT_EXAMPLE2 -> any any (msg:"Example"; sid:2;)
[Word Count: 9]

alert tcp any 90 -> any [100:1000,9999:20000] (msg:"Example"; sid:3;)
[Word Count: 9]

Several invalid examples of port variables and port lists are demonstrated below:
[Word Count: 12]

Incorrect declaration and use of a port variable:
[Word Count: 8]

var EXAMPLE8 80
alert tcp any $EXAMPLE8 -> any any (msg:"Example"; sid:4;)
[Word Count: 12]

alert tcp $EXAMPLE1 any -> any any (msg:"Example"; sid:5;)
[Word Count: 9]

Rule variable names can be modiﬁed in several ways. You can deﬁne meta-variables using the $ operator. These can
be used with the variable modiﬁer operators ? and -, as described in the following table:
[Word Count: 35]

Variable Syntax
Description
var
Deﬁnes a meta-variable.
$(var) or $var
Replaces with the contents of variable var.
$(var:-default)
Replaces the contents of the variable var with “default” if var is undeﬁned.
$(var:?message)
Replaces with the contents of variable var or prints out the error message and
exits.
[Word Count: 47]

Here is an example of advanced variable usage in action:
[Word Count: 10]

ipvar MY_NET 192.168.1.0/24
log tcp any any -> $(MY_NET:?MY_NET is undefined!) 23
[Word Count: 12]

When embedding variables, types can not be mixed. For instance, port variables can be deﬁned in terms of other port
variables, but old-style variables (with the ’var’ keyword) can not be embedded inside a ’portvar’.
[Word Count: 35]

portvar pvar1 80
portvar pvar2 [$pvar1,90]
[Word Count: 6]

Likewise, variables can not be redeﬁned if they were previously deﬁned as a different type. They should be renamed
instead:
[Word Count: 20]

Many conﬁguration and command line options of Snort can be speciﬁed in the conﬁguration ﬁle.
[Word Count: 15]

Conﬁg Directive
Description
config alert with interface name
Appends interface name to alert (snort -I).
config alertfile:
<filename>
Sets the alerts output ﬁle.
config asn1:
<max-nodes>
Speciﬁes the maximum number of nodes to track when doing
ASN1 decoding. See Section 3.5.36 for more information and
examples.
config autogenerate preprocessor
[Word Count: 49]

Enable or disable the decoding of Encapsulated Security Proto-
col (ESP). This is disabled by default. Some networks use ESP
for authentication without encryption, allowing their content to
be inspected. Encrypted ESP may cause some false positives if
this option is enabled.
[Word Count: 42]

config detection:
[search-method
<method>]
[Word Count: 4]

Select type of fast pattern matcher algorithm to use.
• search-method <method>
[Word Count: 12]

– Queued match search methods - Matches are
queued until the fast pattern matcher is ﬁnished with
the payload, then evaluated. This was found to gen-
erally increase performance through fewer cache
misses (evaluating each rule would generally blow
away the fast pattern matcher state in the cache).
[Word Count: 48]

∗ac and ac-q - Aho-Corasick Full (high mem-
ory, best performance).
∗ac-bnfa and ac-bnfa-q - Aho-Corasick Bi-
nary NFA (low memory, high performance)
∗lowmem and lowmem-q - Low Memory Key-
word Trie (low memory, moderate perfor-
mance)
∗ac-split - Aho-Corasick Full with ANY-
ANY port group evaluated separately (low
memory,
high performance).
Note this
is
shorthand
for
search-method ac,
split-any-any
∗intel-cpm - Intel CPM library (must have
compiled Snort with location of libraries to en-
able this)
[Word Count: 77]

– No queue search methods - The ”nq” option spec-
iﬁes that matches should not be queued and evalu-
ated as they are found.
[Word Count: 24]

∗ac-nq - Aho-Corasick Full (high memory, best
performance).
∗ac-bnfa-nq - Aho-Corasick Binary NFA (low
memory, high performance). This is the default
search method if none is speciﬁed.
∗lowmem-nq - Low Memory Keyword Trie (low
memory, moderate performance)
[Word Count: 37]

– Other search methods (the above are considered su-
perior to these)
[Word Count: 12]

∗ac-std - Aho-Corasick Standard (high mem-
ory, high performance)
∗acs - Aho-Corasick Sparse (high memory,
moderate performance)
∗ac-banded - Aho-Corasick Banded (high
memory, moderate performance)
∗ac-sparsebands
-
Aho-Corasick
Sparse-
Banded (high memory, moderate performance)
[Word Count: 34]

config detection:
[split-any-any]
[search-optimize] [max-pattern-len
<int>]
[Word Count: 6]

Other options that affect fast pattern matching.
[Word Count: 7]

– Optimizes fast pattern memory when used with
search-method ac or ac-split by dynamically
determining the size of a state based on the total
number of states. When used with ac-bnfa, some
fail-state resolution will be attempted, potentially
increasing performance. Default is not to optimize.
[Word Count: 45]

config detection:
[no stream inserts]
[max queue events <int>]
[enable-single-rule-group]
[bleedover-port-limit]
[Word Count: 11]

– Speciﬁes that stream inserted packets should not be
evaluated against the detection engine. This is a po-
tential performance improvement with the idea that
the stream rebuilt packet will contain the payload
in the inserted one so the stream inserted packet
doesn’t need to be evaluated. Default is to inspect
stream inserts.
[Word Count: 53]

– Speciﬁes the maximum number of matching fast-
pattern states to queue per packet.
Default is 5
events.
[Word Count: 18]

– Put all rules into one port group. Not recommended.
Default is not to do this.
[Word Count: 16]

– The maximum number of source or destination
ports designated in a rule before the rule is consid-
ered an ANY-ANY port group rule. Default is 1024.
[Word Count: 27]

config detection:
[debug]
[debug-print-nocontent-rule-tests]
[debug-print-rule-group-build-details]
[debug-print-rule-groups-uncompiled]
[debug-print-rule-groups-compiled]
[debug-print-fast-pattern]
[bleedover-warnings-enabled]
[Word Count: 9]

– Prints fast pattern information for a particular port
group.
[Word Count: 10]

– Prints port group information during packet evalua-
tion.
[Word Count: 9]

– Prints port group information during port group
compilation.
[Word Count: 9]

– Prints uncompiled port group information.
[Word Count: 6]

– Prints compiled port group information.
[Word Count: 6]

– For each rule with fast pattern content, prints infor-
mation about the content being used for the fast pat-
tern matcher.
[Word Count: 22]

– Prints a warning if the number of source or
destination ports used in
a
rule exceed the
bleedover-port-limit forcing the rule to be
moved into the ANY-ANY port group.
[Word Count: 30]

config disable decode alerts
Turns off the alerts generated by the decode phase of Snort.
config disable inline init failopen
Disables failopen thread that allows inline trafﬁc to pass
while Snort is starting up.
Only useful if Snort was
conﬁgured
with
–enable-inline-init-failopen.
(snort
--disable-inline-init-failopen)
config disable ipopt alerts
Disables IP option length validation alerts.
config disable tcpopt alerts
Disables option length validation alerts.
config
disable tcpopt experimental alerts
[Word Count: 68]

Turns off alerts generated by experimental TCP options.
[Word Count: 8]

Enables the dropping of bad packets with experimental TCP op-
tion. (only applicable in inline mode).
config enable tcpopt obsolete drops
Enables the dropping of bad packets with obsolete TCP option.
(only applicable in inline mode).
config enable tcpopt ttcp drops
Enables the dropping of bad packets with T/TCP option. (only
applicable in inline mode).
config enable ttcp drops
Enables the dropping of bad packets with T/TCP option. (only
applicable in inline mode).
config event filter:
memcap
<bytes>
[Word Count: 78]

Set global memcap in bytes for thresholding.
Default is
1048576 bytes (1 megabyte).
config event queue:
[max queue
<num>] [log <num>] [order events
<order>]
[Word Count: 24]

Speciﬁes conditions about Snort’s event queue. You can use the
following options:
[Word Count: 12]

• max queue <integer> (max events supported)
[Word Count: 7]

• log <integer> (number of events to log)
[Word Count: 8]

• order events [priority|content length] (how to
order events within the queue)
[Word Count: 12]

See Section 2.4.4 for more information and examples.
config flowbits size:
<num-bits>
Speciﬁes the maximum number of ﬂowbit tags that can be used
within a rule set. The default is 1024 bits and maximum is 2048.
config ignore ports:
<proto>
<port-list>
[Word Count: 41]

Speciﬁes ports to ignore (useful for ignoring noisy NFS trafﬁc).
Specify the protocol (TCP, UDP, IP, or ICMP), followed by a
list of ports. Port ranges are supported.
config interface:
<iface>
Sets the network interface (snort -i).
[Word Count: 37]

config ipv6 frag:
[bsd icmp frag alert on|off]
[, bad ipv6 frag alert on|off]
[, frag timeout <secs>] [,
max frag sessions <max-track>]
[Word Count: 23]

• bsd icmp frag alert on|off (Specify whether or not
to alert. Default is on)
[Word Count: 15]

• bad ipv6 frag alert on|off (Specify whether or not
to alert. Default is on)
[Word Count: 15]

• frag timeout <integer> (Specify amount of time in
seconds to timeout ﬁrst frag in hash table)
[Word Count: 17]

• max frag sessions <integer> (Specify the number
of fragments to track in the hash table)
[Word Count: 16]

Sets a per host limit on the maximum number of services to
read from the attribute table. Minimum value is 1 and the max-
imum is 65535. The default is 100. For a given host, if the
number of services in the attribute table exceeds this value, an
error is logged and the remainder of the services for that host
are ignored. This option is only supported with a Host Attribute
Table (see section 2.7).
config max mpls labelchain len:
<num-hdrs>
[Word Count: 81]

Sets a Snort-wide limit on the number of MPLS headers a
packet can have. Its default value is -1, which means that there
is no limit on label chain length.
config max ip6 extensions:
<num-extensions>
[Word Count: 35]

Sets the maximum number of IPv6 extension headers that Snort
will decode. Default is 8.
config min ttl:
<ttl>
Sets a Snort-wide minimum ttl to ignore all trafﬁc.
config mpls payload type:
ipv4|ipv6|ethernet
[Word Count: 33]

Sets a Snort-wide MPLS payload type. In addition to ipv4, ipv6
and ethernet are also valid options. The default MPLS payload
type is ipv4
config no promisc
Disables promiscuous mode (snort -p).
config nolog
Disables logging. Note: Alerts will still occur. (snort -N).
config nopcre
Disables pcre pattern matching.
config obfuscate
Obfuscates IP Addresses (snort -O).
config order:
<order>
Changes the order that rules are evaluated, e.g.: pass alert log
activation.
config pcre match limit:
<integer>
[Word Count: 76]

Restricts the amount of backtracking a given PCRE option. For
example, it will limit the number of nested repeats within a pat-
tern. A value of -1 allows for unlimited PCRE, up to the PCRE
library compiled limit (around 10 million). A value of 0 results
in no PCRE evaluation. The snort default value is 1500.
config pcre match limit recursion:
<integer>
[Word Count: 62]

Restricts the amount of stack used by a given PCRE option. A
value of -1 allows for unlimited PCRE, up to the PCRE library
compiled limit (around 10 million). A value of 0 results in no
PCRE evaluation. The snort default value is 1500. This option
is only useful if the value is less than the pcre match limit
config pkt count:
<N>
Exits after N packets (snort -n).
[Word Count: 69]

config policy version:
<base-version-string>
[<binding-version-string>]
[Word Count: 5]

Supply versioning information to conﬁguration ﬁles. Base ver-
sion should be a string in all conﬁguration ﬁles including in-
cluded ones. In addition, binding version must be in any ﬁle
conﬁgured with config binding. This option is used to avoid
race conditions when modifying and loading a conﬁguration
within a short time span - before Snort has had a chance to load
a previous conﬁguration.
config profile preprocs
Print statistics on preprocessor performance. See Section 2.5.2
for more details.
config profile rules
Print statistics on rule performance. See Section 2.5.1 for more
details.
config protected content:
md5|sha256|sha512
[Word Count: 97]

Speciﬁes a default algorithm to use for protected content rules.
[Word Count: 10]

config vlan agnostic
Causes Snort to ignore vlan headers for the purposes of con-
nection and frag tracking. This option is only valid in the base
conﬁguration when using multiple conﬁgurations, and the de-
fault is off.
config address space agnostic
Causes Snort to ignore DAQ address space ID for the purposes
of connection and frag tracking. This option is only valid in the
base conﬁguration when using multiple conﬁgurations, and the
default is off.
config policy mode:
tap|inline|inline test
[Word Count: 80]

Sets
the
policy
mode
to
either
passive,
inline
or
inline test.
config disable replace
Disables content replace option. Default behaviour is to replace
content.
config tunnel verdicts:
gtp|teredo|6in4|4in6
[Word Count: 28]

Preprocessors were introduced in version 1.5 of Snort. They allow the functionality of Snort to be extended by allowing
users and programmers to drop modular plugins into Snort fairly easily. Preprocessor code is run before the detection
engine is called, but after the packet has been decoded. The packet can be modiﬁed or analyzed in an out-of-band
manner using this mechanism.
[Word Count: 61]

Preprocessors are loaded and conﬁgured using the preprocessor keyword. The format of the preprocessor directive
in the Snort conﬁg ﬁle is:
[Word Count: 21]

The frag3 preprocessor is a target-based IP defragmentation module for Snort. Frag3 is designed with the following
goals:
[Word Count: 18]

1.
Fast execution with less complex data management.
[Word Count: 8]

2.
Target-based host modeling anti-evasion techniques.
[Word Count: 6]

Frag3 uses the sfxhash data structure and linked lists for data handling internally which allows it to have much more
predictable and deterministic performance in any environment which should aid us in managing heavily fragmented
environments.
[Word Count: 36]

The basic idea behind target-based IDS is that we tell the IDS information about hosts on the network so that it can
avoid Ptacek & Newsham style evasion attacks based on information about how an individual target IP stack operates.
Vern Paxson and Umesh Shankar did a great paper on this very topic in 2003 that detailed mapping the hosts on a net-
work and determining how their various IP stack implementations handled the types of problems seen in IP defragmen-
tation and TCP stream reassembly. Check it out at http://www.icir.org/vern/papers/activemap-oak03.pdf.
[Word Count: 91]

We can also present the IDS with topology information to avoid TTL-based evasions and a variety of other issues, but
that’s a topic for another day. Once we have this information we can start to really change the game for these complex
modeling problems.
[Word Count: 44]

Frag3 was implemented to showcase and prototype a target-based module within Snort to test this idea.
[Word Count: 16]

There are at least two preprocessor directives required to activate frag3, a global conﬁguration directive and an engine
instantiation. There can be an arbitrary number of engines deﬁned at startup with their own conﬁguration, but only
one global conﬁguration.
[Word Count: 39]

• Available options: NOTE: Global conﬁguration options are comma separated.
[Word Count: 10]

– max frags <number> - Maximum simultaneous fragments to track. Default is 8192.
[Word Count: 13]

– memcap <bytes> - Memory cap for self preservation. Default is 4MB.
[Word Count: 12]

– prealloc memcap <bytes> - alternate memory management mode, use preallocated fragment nodes
based on a memory cap (faster in some situations).
[Word Count: 22]

– prealloc frags <number> - Alternate memory management mode, use preallocated fragment nodes
(faster in some situations).
[Word Count: 17]

– disabled - This optional keyword is allowed with any policy to avoid packet processing. This option
disables the preprocessor for this conﬁg, but not for other instances of multiple conﬁgurations. Use the
disable keyword in the base conﬁguration to specify values for the options memcap, prealloc memcap,
and prealloc frags without having the preprocessor inspect trafﬁc for trafﬁc applying to the base con-
ﬁguration. The other options are parsed but not used. Any valid conﬁguration may have ”disabled” added
to it.
[Word Count: 82]

• Available options: NOTE: Engine conﬁguration options are space separated.
[Word Count: 10]

– timeout <seconds> - Timeout for fragments. Fragments in the engine for longer than this period will
be automatically dropped. Default is 60 seconds.
[Word Count: 24]

– min ttl <value> - Minimum acceptable TTL value for a fragment packet. Default is 1. The accepted
range for this option is 1 - 255.
[Word Count: 26]

– detect anomalies - Detect fragment anomalies.
[Word Count: 7]

– bind to <ip list> - IP List to bind this engine to. This engine will only run for packets with destination
addresses contained within the IP List. Default value is all.
[Word Count: 32]

– overlap limit <number> - Limits the number of overlapping fragments per packet. The default is ”0”
(unlimited). This conﬁg option takes values equal to or greater than zero. This is an optional parameter.
detect anomalies option must be conﬁgured for this option to take effect.
[Word Count: 46]

– min fragment length <number> - Deﬁnes smallest fragment size (payload size) that should be consid-
ered valid. Fragments smaller than or equal to this limit are considered malicious and an event is raised,
if detect anomalies is also conﬁgured. The default is ”0” (unlimited), the minimum is ”0”. This is an
optional parameter. detect anomalies option must be conﬁgured for this option to take effect.
[Word Count: 66]

– policy <type> - Select a target-based defragmentation mode. Available types are ﬁrst, last, bsd, bsd-
right, linux, windows and solaris. Default type is bsd.
The Paxson Active Mapping paper introduced the terminology frag3 is using to describe policy types. The
known mappings are as follows. Anyone who develops more mappings and would like to add to this list
please feel free to send us an email!
[Word Count: 67]

Note in the advanced conﬁguration below that there are three engines speciﬁed running with Linux, first and last
policies assigned. The ﬁrst two engines are bound to speciﬁc IP address ranges and the last one applies to all other
trafﬁc. Packets that don’t fall within the address requirements of the ﬁrst two engines automatically fall through to the
third one.
[Word Count: 60]

preprocessor frag3_global
preprocessor frag3_engine
[Word Count: 4]

preprocessor frag3_global: prealloc_nodes 8192
preprocessor frag3_engine: policy linux bind_to 192.168.1.0/24
preprocessor frag3_engine: policy first bind_to [10.1.47.0/24,172.16.8.0/24]
preprocessor frag3_engine: policy last detect_anomalies
[Word Count: 21]

Frag3 is capable of detecting eight different types of anomalies. Its event output is packet-based so it will work with
all output modes of Snort. Read the documentation in the doc/signatures directory with ﬁlenames that begin with
“123-” for information on the different event types.
[Word Count: 45]

The Session preprocessor is a global stream session management module for Snort. It is derived from the session
management functions that were part of the Stream5 preprocessor.
[Word Count: 27]

Since Session implements part of the functionality and API that was previously in Stream5 it cannot be used with
Stream5 but must be used in conjunction with the new Stream preprocessor. Similarly, due to the API changes, the
other preprocessors in Snort 2.9.7 work only with the new Session and Stream preprocessers.
[Word Count: 52]

Global settings for the Session preprocessor.
[Word Count: 6]

preprocessor stream5_global: \
[track_tcp <yes|no>], [max_tcp <number>], \
[memcap <number bytes>], \
[track_udp <yes|no>], [max_udp <number>], \
[track_icmp <yes|no>], [max_icmp <number>], \
[track_ip <yes|no>], [max_ip <number>], \
[flush_on_alert], [show_rebuilt_packets], \
[prune_log_max <number bytes>], [disabled], \
[enable_ha]
[Word Count: 36]

Conﬁguration for HA session state sharing.
[Word Count: 6]

preprocessor stream5_ha: [min_session_lifetime <num millisecs>], \
[min_sync_interval <num millisecs>], [startup_input_file <filename>], \
[runtime_output_file <filename>], [use_side_channel]
[Word Count: 15]

1. This example conﬁguration sets a maximum number of TCP session control blocks to 8192, enables tracking
of TCP and UPD sessions, and disables tracking of ICMP sessions. The number of UDP session control blocks
will be set to the compiled default.
[Word Count: 42]

preprocessor stream5_global: \
max_tcp 8192, track_tcp yes, track_udp yes, track_icmp no
[Word Count: 11]

preprocessor stream5_tcp: \
policy first, use_static_footprint_sizes
[Word Count: 6]

preprocessor stream5_udp: \
ignore_any_rules
[Word Count: 4]

The Stream preprocessor is a target-based TCP reassembly module for Snort. It is capable of tracking sessions for
both TCP and UDP.
[Word Count: 22]

TCP sessions are identiﬁed via the classic TCP ”connection”. UDP sessions are established as the result of a series of
UDP packets from two end points via the same set of ports. ICMP messages are tracked for the purposes of checking
for unreachable and service unavailable messages, which effectively terminate a TCP or UDP session.
[Word Count: 55]

Stream, like Frag3, introduces target-based actions for handling of overlapping data and other TCP anomalies. The
methods for handling overlapping data, TCP Timestamps, Data on SYN, FIN and Reset sequence numbers, etc. and
the policies supported by Stream are the results of extensive research with many target operating systems.
[Word Count: 49]

Stream supports the modiﬁed Stream API that is now focused on functions speciﬁc to reassembly and protocol aware
ﬂushing operations. Session management functions have been moved to the Session API. The remaining API functions
enable other protocol normalizers/preprocessors to dynamically conﬁgure reassembly behavior as required by the
application layer protocol.
[Word Count: 50]

TCP protocol anomalies, such as data on SYN packets, data received outside the TCP window, etc are conﬁgured via
the detect anomalies option to the TCP conﬁguration. Some of these anomalies are detected on a per-target basis.
For example, a few operating systems allow data in TCP SYN packets, while others do not.
[Word Count: 53]

Protocol aware ﬂushing of HTTP, SMB and DCE/RPC can be enabled with this option:
[Word Count: 14]

where <max-pdu> is between zero (off) and 63780. This allows Snort to statefully scan a stream and reassemble a
complete PDU regardless of segmentation. For example, multiple PDUs within a single TCP segment, as well as one
PDU spanning multiple TCP segments will be reassembled into one PDU per packet for each PDU. PDUs larger than
the conﬁgured maximum will be split into multiple packets.
[Word Count: 65]

Provides a means on a per IP address target to conﬁgure TCP policy. This can have multiple occurrences, per policy
that is bound to an IP address or network. One default policy must be speciﬁed, and that policy is not bound to an IP
address or network.
[Word Count: 47]

preprocessor stream5_tcp: \
[log_asymmetric_traffic <yes|no>], \
[bind_to <ip_addr>], \
[timeout <number secs>], [policy <policy_id>], \
[overlap_limit <number>], [max_window <number>], \
[require_3whs [<number secs>]], [detect_anomalies], \
[check_session_hijacking], [use_static_footprint_sizes], \
[dont_store_large_packets], [dont_reassemble_async], \
[max_queued_bytes <bytes>], [max_queued_segs <number segs>], \
[small_segments <number> bytes <number> [ignore_ports number [number]*]],
\
[ports <client|server|both> <all|number|!number [number]* [!number]*>], \
[protocol <client|server|both> <all|service name [service name]*>], \
[ignore_any_rules], [flush_factor <number segs>]
[Word Count: 62]

Option
Description
bind to <ip addr>
IP address or network for this policy. The default is set to any.
timeout <num seconds>
Session timeout. The default is ”30”, the minimum is ”1”, and the maxi-
mum is ”86400” (approximately 1 day).
policy <policy id>
The Operating System policy for the target OS. The policy id can be one
of the following:
[Word Count: 61]

Establish sessions only on completion of a SYN/SYN-ACK/ACK hand-
shake. The default is set to off. The optional number of seconds speci-
ﬁes a startup timeout. This allows a grace period for existing sessions to
be considered established during that interval immediately after Snort is
started. The default is ”0” (don’t consider existing sessions established),
the minimum is ”0”, and the maximum is ”86400” (approximately 1
day).
[Word Count: 67]

Specify the client, server, or both and list of ports in which to perform
reassembly. This can appear more than once in a given conﬁg. The de-
fault settings are ports client 21 23 25 42 53 80 110 111 135
136 137 139 143 445 513 514 1433 1521 2401 3306. The mini-
mum port allowed is ”1” and the maximum allowed is ”65535”. To dis-
able reassembly for a port speciﬁy the port number preceeded by an ’!’,
e.g. !8080 !25
protocol
<client|server|both>
<all|service name(s)>
[Word Count: 87]

flush factor
Useful in ips mode to ﬂush upon seeing a drop in segment size after N
segments of non-decreasing size. The drop in size often indicates an end
of request or response.
[Word Count: 33]

△
! NOTE
If no options are speciﬁed for a given TCP policy, that is the default TCP policy. If only a bind to option is
used with no other options that TCP policy uses all of the default values.
[Word Count: 40]

Conﬁguration for UDP session tracking. Since there is no target based binding, there should be only one occurrence
of the UDP conﬁguration.
[Word Count: 22]

preprocessor stream5_udp: [timeout <number secs>], [ignore_any_rules]
[Word Count: 6]

Option
Description
timeout <num seconds>
Session timeout. The default is ”30”, the minimum is ”1”, and the maximum is
”86400” (approximately 1 day).
ignore any rules
Don’t process any -> any (ports) rules for UDP that attempt to match payload
if there are no port speciﬁc rules for the src or destination port. Rules that have
ﬂow or ﬂowbits will never be ignored. This is a performance improvement and
may result in missed attacks. Using this does not affect rules that look at protocol
headers, only those with content, PCRE, or byte test options. The default is ”off”.
[Word Count: 98]

△
! NOTE
With the ignore any rules option, a UDP rule will be ignored except when there is another port speciﬁc rule
that may be applied to the trafﬁc. For example, if a UDP rule speciﬁes destination port 53, the ’ignored’ any
-> any rule will be applied to trafﬁc to/from port 53, but NOT to any other source or destination port. A list
of rule SIDs affected by this option are printed at Snort’s startup.
[Word Count: 77]

△
! NOTE
With the ignore any rules option, if a UDP rule that uses any -> any ports includes either ﬂow or ﬂowbits,
the ignore any rules option is effectively pointless. Because of the potential impact of disabling a ﬂowbits
rule, the ignore any rules option will be disabled in this case.
[Word Count: 53]

Conﬁguration for ICMP session tracking. Since there is no target based binding, there should be only one occurrence
of the ICMP conﬁguration.
△
! NOTE
ICMP is currently untested, in minimal code form and is NOT ready for use in production networks. It is not
turned on by default.
[Word Count: 49]

preprocessor stream5_icmp: [timeout <number secs>]
[Word Count: 5]

Option
Description
timeout <num seconds>
Session timeout. The default is ”30”, the minimum is ”1”, and the maximum is
”86400” (approximately 1 day).
[Word Count: 23]

Conﬁguration for IP session tracking. Since there is no target based binding, there should be only one occurrence of
the IP conﬁguration.
△
! NOTE
”IP” includes all non-TCP/UDP trafﬁc over IP including ICMP if ICMP not otherwise conﬁgured. It is not
turned on by default.
[Word Count: 46]

preprocessor stream5_ip: [timeout <number secs>]
[Word Count: 5]

Option
Description
timeout <num seconds>
Session timeout. The default is ”30”, the minimum is ”1”, and the maximum is
”86400” (approximately 1 day).
[Word Count: 23]

1. This example conﬁguration is the default conﬁguration in snort.conf and can be used for repeatable tests of
stream reassembly in readback mode.
[Word Count: 23]

preprocessor stream5_global: \
max_tcp 8192, track_tcp yes, track_udp yes, track_icmp no
[Word Count: 11]

preprocessor stream5_tcp: \
policy first, use_static_footprint_sizes
[Word Count: 6]

preprocessor stream5_udp: \
ignore_any_rules
[Word Count: 4]

2. This conﬁguration maps two network segments to different OS policies, one for Windows and one for Linux,
with all other trafﬁc going to the default policy of Solaris.
[Word Count: 29]

preprocessor stream5_global: track_tcp yes
preprocessor stream5_tcp: bind_to 192.168.1.0/24, policy windows
preprocessor stream5_tcp: bind_to 10.1.1.0/24, policy linux
preprocessor stream5_tcp: policy solaris
[Word Count: 20]

The sfPortscan module, developed by Sourceﬁre, is designed to detect the ﬁrst phase in a network attack: Recon-
naissance. In the Reconnaissance phase, an attacker determines what types of network protocols or services a host
supports. This is the traditional place where a portscan takes place. This phase assumes the attacking host has no prior
knowledge of what protocols or services are supported by the target; otherwise, this phase would not be necessary.
[Word Count: 73]

As the attacker has no beforehand knowledge of its intended target, most queries sent by the attacker will be negative
(meaning that the service ports are closed). In the nature of legitimate network communications, negative responses
from hosts are rare, and rarer still are multiple negative responses within a given amount of time. Our primary objective
in detecting portscans is to detect and track these negative responses.
[Word Count: 67]

One of the most common portscanning tools in use today is Nmap. Nmap encompasses many, if not all, of the current
portscanning techniques. sfPortscan was designed to be able to detect the different types of scans Nmap can produce.
[Word Count: 39]

sfPortscan will currently alert for the following types of Nmap scans:
[Word Count: 11]

These alerts are for one→one portscans, which are the traditional types of scans; one host scans multiple ports on
another host. Most of the port queries will be negative, since most hosts have relatively few services available.
[Word Count: 37]

sfPortscan also alerts for the following types of decoy portscans:
[Word Count: 10]

Decoy portscans are much like the Nmap portscans described above, only the attacker has a spoofed source address
inter-mixed with the real scanning address. This tactic helps hide the true identity of the attacker.
[Word Count: 34]

sfPortscan alerts for the following types of distributed portscans:
[Word Count: 9]

These are many→one portscans. Distributed portscans occur when multiple hosts query one host for open services.
This is used to evade an IDS and obfuscate command and control hosts.
△
! NOTE
Negative queries will be distributed among scanning hosts, so we track this type of scan through the scanned
host.
[Word Count: 51]

sfPortscan alerts for the following types of portsweeps:
[Word Count: 8]

These alerts are for one→many portsweeps. One host scans a single port on multiple hosts. This usually occurs when
a new exploit comes out and the attacker is looking for a speciﬁc service.
△
! NOTE
The characteristics of a portsweep scan may not result in many negative responses. For example, if an attacker
portsweeps a web farm for port 80, we will most likely not see many negative responses.
[Word Count: 70]

sfPortscan alerts on the following ﬁltered portscans and portsweeps:
[Word Count: 9]

“Filtered” alerts indicate that there were no network errors (ICMP unreachables or TCP RSTs) or responses on closed
ports have been suppressed. It’s also a good indicator of whether the alert is just a very active legitimate host. Active
hosts, such as NATs, can trigger these alerts because they can send out many connection attempts within a very small
amount of time. A ﬁltered alert may go off before responses from the remote hosts are received.
[Word Count: 76]

sfPortscan only generates one alert for each host pair in question during the time window (more on windows below).
On TCP scan alerts, sfPortscan will also display any open ports that were scanned. On TCP sweep alerts however,
sfPortscan will only track open ports after the alert has been triggered. Open port events are not individual alerts, but
tags based on the original scan alert.
[Word Count: 65]

Use of the Stream preprocessor is required for sfPortscan. Stream gives portscan direction in the case of connectionless
protocols like ICMP and UDP. You should enable the Stream preprocessor in your snort.conf, as described in Section
2.2.3.
[Word Count: 37]

The parameters you can use to conﬁgure the portscan module are:
[Word Count: 11]

• low - “Low” alerts are only generated on error packets sent from the target host, and because of the nature
of error responses, this setting should see very few false positives. However, this setting will never trigger
a Filtered Scan alert because of a lack of error responses. This setting is based on a static time window of
60 seconds, after which this window is reset.
[Word Count: 67]

• medium - “Medium” alerts track connection counts, and so will generate ﬁltered scan alerts. This setting
may false positive on active hosts (NATs, proxies, DNS caches, etc), so the user may need to deploy the
use of Ignore directives to properly tune this directive.
[Word Count: 45]

• high - “High” alerts continuously track hosts on a network using a time window to evaluate portscan
statistics for that host. A ”High” setting will catch some slow scans because of the continuous monitoring,
but is very sensitive to active hosts. This most deﬁnitely will require the user to tune sfPortscan.
[Word Count: 52]

4.
watch ip <ip1|ip2/cidr[ [port|port2-port3]]>
[Word Count: 5]

Deﬁnes which IPs, networks, and speciﬁc ports on those hosts to watch. The list is a comma separated list of
IP addresses, IP address using CIDR notation. Optionally, ports are speciﬁed after the IP address/CIDR using a
space and can be either a single port or a range denoted by a dash. IPs or networks not falling into this range are
ignored if this option is used.
[Word Count: 67]

5.
ignore scanners <ip1|ip2/cidr[ [port|port2-port3]]>
[Word Count: 5]

Ignores the source of scan alerts. The parameter is the same format as that of watch ip.
[Word Count: 17]

6.
ignore scanned <ip1|ip2/cidr[ [port|port2-port3]]>
[Word Count: 5]

Ignores the destination of scan alerts. The parameter is the same format as that of watch ip.
[Word Count: 17]

This option will output portscan events to the ﬁle speciﬁed. If file does not contain a leading slash, this ﬁle
will be placed in the Snort conﬁg dir.
[Word Count: 28]

This option will include sessions picked up in midstream by Stream. This can lead to false alerts, especially
under heavy load with dropped packets; which is why the option is off by default.
[Word Count: 33]

This option will include sessions picked up in midstream by the stream module, which is necessary to detect
ACK scans. However, this can lead to false alerts, especially under heavy load with dropped packets; which is
why the option is off by default.
[Word Count: 43]

This optional keyword is allowed with any policy to avoid packet processing. This option disables the preproces-
sor. When the preprocessor is disabled only the memcap option is applied when speciﬁed with the conﬁguration.
The other options are parsed but not used. Any valid conﬁguration may have ”disabled” added to it.
[Word Count: 51]

preprocessor sfportscan: proto <protocols> \
scan_type <portscan|portsweep|decoy_portscan|distributed_portscan|all> \
sense_level <low|medium|high> \
watch_ip <IP or IP/CIDR> \
ignore_scanners <IP list> \
ignore_scanned <IP list> \
logfile <path and filename> \
disabled
[Word Count: 30]

preprocessor flow: stats_interval 0 hash 2
preprocessor sfportscan:\
proto { all } \
scan_type { all } \
sense_level { low }
[Word Count: 22]

Uniﬁed Output
In order to get all the portscan information logged with the alert, snort generates a pseudo-packet
and uses the payload portion to store the additional portscan information of priority count, connection count, IP count,
port count, IP range, and port range. The characteristics of the packet are:
[Word Count: 49]

Src/Dst MAC Addr == MACDAD
IP Protocol == 255
IP TTL == 0
[Word Count: 13]

Other than that, the packet looks like the IP portion of the packet that caused the portscan alert to be generated. This
includes any IP options, etc. The payload and payload size of the packet are equal to the length of the additional
portscan information that is logged. The size tends to be around 100 - 200 bytes.
[Word Count: 58]

Open port alerts differ from the other portscan alerts, because open port alerts utilize the tagged packet output system.
This means that if an output system that doesn’t print tagged packets is used, then the user won’t see open port alerts.
The open port information is stored in the IP payload and contains the port that is open.
[Word Count: 58]

The sfPortscan alert output was designed to work with uniﬁed2 packet logging, so it is possible to extend favorite Snort
GUIs to display portscan alerts and the additional information in the IP payload using the above packet characteristics.
[Word Count: 38]

Log File Output
Log ﬁle output is displayed in the following format, and explained further below:
[Word Count: 16]

Time: 09/08-15:07:31.603880
event_id: 2
192.168.169.3 -> 192.168.169.5 (portscan) TCP Filtered Portscan
Priority Count: 0
Connection Count: 200
IP Count: 2
Scanner IP Range: 192.168.169.3:192.168.169.4
Port/Proto Count: 200
Port/Proto Range: 20:47557
[Word Count: 30]

If there are open ports on the target, one or more additional tagged packet(s) will be appended:
[Word Count: 17]

Time: 09/08-15:07:31.603881
event_ref: 2
192.168.169.3 -> 192.168.169.5 (portscan) Open Port
Open Port: 38458
[Word Count: 13]

These ﬁelds are used to link an alert with the corresponding Open Port tagged packet
[Word Count: 15]

Priority Count keeps track of bad responses (resets, unreachables). The higher the priority count, the more
bad responses have been received.
[Word Count: 21]

Connection Count lists how many connections are active on the hosts (src or dst).
This is accurate for
connection-based protocols, and is more of an estimate for others. Whether or not a portscan was ﬁltered is
determined here. High connection count and low priority count would indicate ﬁltered (no response received
from target).
[Word Count: 53]

IP Count keeps track of the last IP to contact a host, and increments the count if the next IP is different. For
one-to-one scans, this is a low number. For active hosts this number will be high regardless, and one-to-one
scans may appear as a distributed scan.
[Word Count: 48]

This ﬁeld changes depending on the type of alert. Portsweep (one-to-many) scans display the scanned IP range;
Portscans (one-to-one) display the scanner IP.
[Word Count: 23]

Port Count keeps track of the last port contacted and increments this number when that changes. We use this
count (along with IP Count) to determine the difference between one-to-one portscans and one-to-one decoys.
[Word Count: 34]

The most important aspect in detecting portscans is tuning the detection engine for your network(s). Here are some
tuning tips:
[Word Count: 20]

1.
Use the watch ip, ignore scanners, and ignore scanned options.
[Word Count: 11]

It’s important to correctly set these options. The watch ip option is easy to understand. The analyst should set
this option to the list of CIDR blocks and IPs that they want to watch. If no watch ip is deﬁned, sfPortscan will
watch all network trafﬁc.
[Word Count: 46]

2.
Filtered scan alerts are much more prone to false positives.
[Word Count: 11]

When determining false positives, the alert type is very important. Most of the false positives that sfPortscan
may generate are of the ﬁltered scan alert type. So be much more suspicious of ﬁltered portscans. Many times
this just indicates that a host was very active during the time period in question. If the host continually generates
these types of alerts, add it to the ignore scanners list or use a lower sensitivity level.
[Word Count: 73]

3.
Make use of the Priority Count, Connection Count, IP Count, Port Count, IP Range, and Port Range to
determine false positives.
[Word Count: 22]

The portscan alert details are vital in determining the scope of a portscan and also the conﬁdence of the portscan.
In the future, we hope to automate much of this analysis in assigning a scope level and conﬁdence level, but
for now the user must manually do this. The easiest way to determine false positives is through simple ratio
estimations. The following is a list of ratios to estimate and the associated values that indicate a legitimate scan
and not a false positive.
[Word Count: 83]

Connection Count / IP Count: This ratio indicates an estimated average of connections per IP. For portscans,
this ratio should be high, the higher the better. For portsweeps, this ratio should be low.
[Word Count: 33]

Port Count / IP Count: This ratio indicates an estimated average of ports connected to per IP. For portscans, this
ratio should be high and indicates that the scanned host’s ports were connected to by fewer IPs. For portsweeps,
this ratio should be low, indicating that the scanning host connected to few ports but on many hosts.
[Word Count: 57]

Connection Count / Port Count: This ratio indicates an estimated average of connections per port. For
portscans, this ratio should be low. This indicates that each connection was to a different port. For portsweeps,
this ratio should be high. This indicates that there were many connections to the same port.
[Word Count: 50]

The reason that Priority Count is not included, is because the priority count is included in the connection
count and the above comparisons take that into consideration. The Priority Count play an important role in
tuning because the higher the priority count the more likely it is a real portscan or portsweep (unless the host is
ﬁrewalled).
[Word Count: 57]

4.
If all else fails, lower the sensitivity level.
[Word Count: 9]

If none of these other tuning techniques work or the analyst doesn’t have the time for tuning, lower the sensitivity
level. You get the best protection the higher the sensitivity level, but it’s also important that the portscan detection
engine generate alerts that the analyst will ﬁnd informative. The low sensitivity level only generates alerts based
on error responses. These responses indicate a portscan and the alerts generated by the low sensitivity level are
highly accurate and require the least tuning. The low sensitivity level does not catch ﬁltered scans; since these
are more prone to false positives.
[Word Count: 98]

The rpc decode preprocessor normalizes RPC multiple fragmented records into a single un-fragmented record. It does
this by normalizing the packet into the packet buffer. If stream5 is enabled, it will only process client-side trafﬁc. By
default, it runs against trafﬁc on ports 111 and 32771.
[Word Count: 46]

preprocessor rpc_decode: \
<ports> [ alert_fragments ] \
[no_alert_multiple_requests] \
[no_alert_large_fragments] \
[no_alert_incomplete]
[Word Count: 13]

Option
Description
alert fragments
Alert on any fragmented RPC record.
no alert multiple requests
Don’t alert when there are multiple records in one packet.
no alert large fragments
Don’t alert when the sum of fragmented records exceeds one packet.
no alert incomplete
Don’t alert when a single fragment record exceeds the size of one packet.
[Word Count: 55]

This preprocessor measures Snort’s real-time and theoretical maximum performance. Whenever this preprocessor is
turned on, it should have an output mode enabled, either “console” which prints statistics to the console window or
“ﬁle” with a ﬁle name, where statistics get printed to the speciﬁed ﬁle name. By default, Snort’s real-time statistics
are processed. This includes:
[Word Count: 55]

• Mbits/Sec (wire) [duplicated below for easy comparison with other rates]
[Word Count: 11]

• K-Pkts/Sec (wire) [duplicated below for easy comparison with other rates]
[Word Count: 11]

• Avg Bytes/Pkt (wire) [duplicated below for easy comparison with other rates]
[Word Count: 12]

• Pat-Matched [percent of data received that Snort processes in pattern matching]
[Word Count: 12]

• Frag-Auto Deletes/Sec [memory DoS protection]
[Word Count: 6]

• Frag-Current [number of current Frag Trackers]
[Word Count: 7]

• Frag-Max [max number of Frag Trackers at any time]
[Word Count: 10]

• Number of CPUs [*** Only if compiled with LINUX SMP ***, the next three appear for each CPU]
[Word Count: 19]

• Mbits/Sec (wire) [average mbits of total trafﬁc]
[Word Count: 8]

• Mbits/Sec (ipfrag) [average mbits of IP fragmented trafﬁc]
[Word Count: 9]

• Mbits/Sec (ipreass) [average mbits Snort injects after IP reassembly]
[Word Count: 10]

• Mbits/Sec (tcprebuilt) [average mbits Snort injects after TCP reassembly]
[Word Count: 10]

• Mbits/Sec (applayer) [average mbits seen by rules and protocol decoders]
[Word Count: 11]

• Current Attribute Table Hosts (Target Based)
[Word Count: 7]

• Attribute Table Reloads (Target Based)
[Word Count: 6]

There are over 100 individual statistics included. A header line is output at startup and rollover that labels each column.
[Word Count: 20]

The following options can be used with the performance monitor:
[Word Count: 10]

• flow - Prints out statistics about the type and amount of trafﬁc and protocol distributions that Snort is seeing.
This option can produce large amounts of output.
[Word Count: 28]

• flow-file - Prints flow statistics in a comma-delimited format to the ﬁle that is speciﬁed.
[Word Count: 16]

– TCP port ﬂow entries : port,%total,%src,%dst
[Word Count: 7]

– UDP port ﬂow entries : port,%total,%src,%dst
[Word Count: 7]

Specifying this option implicitly enables flow statistics.
[Word Count: 7]

• max - Turns on the theoretical maximum performance that Snort calculates given the processor speed and current
performance. This is only valid for uniprocessor machines, since many operating systems don’t keep accurate
kernel statistics for multiple CPUs.
[Word Count: 38]

• console - Prints statistics at the console.
[Word Count: 8]

• file - Prints statistics in a comma-delimited format to the ﬁle that is speciﬁed. Not all statistics are output to
this ﬁle. You may also use snortfile which will output into your deﬁned Snort log directory. Both of these
directives can be overridden on the command line with the -Z or --perfmon-file options. At startup, Snort
will log a distinctive line to this ﬁle with a timestamp to all readers to easily identify gaps in the stats caused by
Snort not running.
[Word Count: 83]

• pktcnt - Adjusts the number of packets to process before checking for the time sample. This boosts perfor-
mance, since checking the time sample reduces Snort’s performance. By default, this is 10000.
[Word Count: 33]

• time - Represents the number of seconds between intervals.
[Word Count: 10]

• accumulate or reset - Deﬁnes which type of drop statistics are kept by the operating system. By default,
reset is used.
[Word Count: 22]

• atexitonly - Dump stats for entire life of Snort. One or more of the following arguments can be given to
specify speciﬁc statistic types to dump at exit:
[Word Count: 29]

– base-stats
– flow-stats
– flow-ip-stats
– events-stats
[Word Count: 8]

Without any arguments, all enabled stats will be dumped only when Snort exits.
[Word Count: 13]

• max file size - Deﬁnes the maximum size of the comma-delimited ﬁle. Before the ﬁle exceeds this size, it
will be rolled into a new date stamped ﬁle of the format YYYY-MM-DD, followed by YYYY-MM-DD.x, where
x will be incremented each time the comma delimited ﬁle is rolled over. The minimum is 4096 bytes and the
maximum is 2147483648 bytes (2GB). The default is the same as the maximum.
[Word Count: 70]

• flow-ip - Collects IP trafﬁc distribution statistics based on host pairs. For each pair of hosts for which IP trafﬁc
has been seen, the following statistics are collected for both directions (A to B and B to A):
[Word Count: 39]

– TCP Packets
– TCP Trafﬁc in Bytes
– TCP Sessions Established
– TCP Sessions Closed
– UDP Packets
– UDP Trafﬁc in Bytes
– UDP Sessions Created
– Other IP Packets
– Other IP Trafﬁc in Bytes
[Word Count: 38]

These statistics are printed and reset at the end of each interval.
[Word Count: 12]

• flow-ip-file - Prints the ﬂow IP statistics in a comma-delimited format to the ﬁle that is speciﬁed. All of the
statistics mentioned above, as well as the IP addresses of the host pairs in human-readable format, are included.
[Word Count: 39]

Each line in the ﬁle will have its values correspond (in order) to those below:
[Word Count: 15]

• flow-ip-memcap - Sets the memory cap on the hash table used to store IP trafﬁc statistics for host pairs. Once
the cap has been reached, the table will start to prune the statistics for the least recently seen host pairs to free
memory. This value is in bytes and the default value is 52428800 (50MB).
[Word Count: 56]

preprocessor perfmonitor: \
time 30 events flow file stats.profile max console pktcnt 10000
[Word Count: 13]

preprocessor perfmonitor: \
time 300 file /var/tmp/snortstat pktcnt 10000
[Word Count: 9]

preprocessor perfmonitor: \
time 30 flow-ip flow-ip-file flow-ip-stats.csv pktcnt 1000
[Word Count: 10]

preprocessor perfmonitor: \
time 30 pktcnt 1000 snortfile base.csv flow-file flows.csv atexitonly flow-stats
[Word Count: 13]

preprocessor perfmonitor: \
time 30 pktcnt 1000 flow events atexitonly base-stats flow-stats console
[Word Count: 13]

HTTP Inspect is a generic HTTP decoder for user applications. Given a data buffer, HTTP Inspect will decode the
buffer, ﬁnd HTTP ﬁelds, and normalize the ﬁelds. HTTP Inspect works on both client requests and server responses.
[Word Count: 37]

HTTP Inspect has a very “rich” user conﬁguration. Users can conﬁgure individual HTTP servers with a variety of
options, which should allow the user to emulate any type of web server. Within HTTP Inspect, there are two areas of
conﬁguration: global and server.
[Word Count: 43]

The global conﬁguration deals with conﬁguration options that determine the global functioning of HTTP Inspect. The
following example gives the generic global conﬁguration format:
[Word Count: 24]

preprocessor http_inspect: \
global \
iis_unicode_map <map_filename> \
codemap <integer> \
[detect_anomalous_servers] \
[proxy_alert] \
[max_gzip_mem <num>] \
[compress_depth <num>] [decompress_depth <num>] \
[memcap <num>] \
disabled
[Word Count: 27]

You can only have a single global conﬁguration, you’ll get an error if you try otherwise.
[Word Count: 16]

1.
iis unicode map <map filename> [codemap <integer>]
[Word Count: 8]

This is the global iis unicode map ﬁle. The iis unicode map is a required conﬁguration parameter. The map
ﬁle can reside in the same directory as snort.conf or be speciﬁed via a fully-qualiﬁed path to the map ﬁle.
[Word Count: 39]

The iis unicode map ﬁle is a Unicode codepoint map which tells HTTP Inspect which codepage to use when
decoding Unicode characters. For US servers, the codemap is usually 1252.
[Word Count: 30]

A Microsoft US Unicode codepoint map is provided in the Snort source etc directory by default. It is called
unicode.map and should be used if no other codepoint map is available. A tool is supplied with Snort to
generate custom Unicode maps--ms unicode generator.c, which is available at http://www.snort.org/
dl/contrib/.
△
! NOTE
[Word Count: 53]

Remember that this conﬁguration is for the global IIS Unicode map, individual servers can reference their
own IIS Unicode map.
[Word Count: 20]

This global conﬁguration option enables generic HTTP server trafﬁc inspection on non-HTTP conﬁgured ports,
and alerts if HTTP trafﬁc is seen. Don’t turn this on if you don’t have a default server conﬁguration that
encompasses all of the HTTP server ports that your users might access. In the future, we want to limit this to
speciﬁc networks so it’s more useful, but for right now, this inspects all network trafﬁc. This option is turned off
by default.
[Word Count: 77]

This enables global alerting on HTTP server proxy usage. By conﬁguring HTTP Inspect servers and enabling
allow proxy use, you will only receive proxy use alerts for web users that aren’t using the conﬁgured proxies
or are using a rogue proxy server.
[Word Count: 42]

Please note that if users aren’t required to conﬁgure web proxy use, then you may get a lot of proxy alerts. So,
please only use this feature with traditional proxy environments. Blind ﬁrewall proxies don’t count.
[Word Count: 36]

4.
compress depth <integer> This option speciﬁes the maximum amount of packet payload to decompress.
This value can be set from 1 to 65535. The default for this option is 1460.
△
! NOTE
[Word Count: 34]

Please note, in case of multiple policies, the value speciﬁed in the default policy is used and this value
overwrites the values speciﬁed in the other policies. In case of unlimited decompress this should be set to
its max value. This value should be speciﬁed in the default policy even when the HTTP inspect preprocessor
is turned off using the disabled keyword.
[Word Count: 62]

5.
decompress depth <integer> This option speciﬁes the maximum amount of decompressed data to obtain
from the compressed packet payload. This value can be set from 1 to 65535. The default for this option is 2920.
△
! NOTE
[Word Count: 39]

Please note, in case of multiple policies, the value speciﬁed in the default policy is used and this value
overwrites the values speciﬁed in the other policies. In case of unlimited decompress this should be set to
its max value. This value should be speciﬁed in the default policy even when the HTTP inspect preprocessor
is turned off using the disabled keyword.
[Word Count: 62]

This option determines (in bytes) the maximum amount of memory the HTTP Inspect preprocessor will use for
decompression. The minimum allowed value for this option is 3276 bytes. This option determines the number of
concurrent sessions that can be decompressed at any given instant. The default value for this option is 838860.
[Word Count: 52]

This value is also used for the optional SWF/PDF ﬁle decompression. If these modes are enabled this same
value sets the maximum about of memory used for ﬁle decompression session state information.
△
! NOTE
[Word Count: 35]

This value should be speciﬁed in the default policy even when the HTTP inspect preprocessor is turned off
using the disabled keyword.
[Word Count: 22]

This option determines (in bytes) the maximum amount of memory the HTTP Inspect preprocessor will use for
logging the URI and Hostname data. This value can be set from 2304 to 603979776 (576 MB). This option
along with the maximum uri and hostname logging size (which is deﬁned in snort) will determine the maximum
HTTP sessions that will log the URI and hostname data at any given instant. The maximum size for logging
URI data is 2048 and for hostname is 256. The default value for this option is 150994944 (144 MB).
△
! NOTE
[Word Count: 95]

This value should be speciﬁed in the default policy even when the HTTP inspect preprocessor is turned off
using the disabled keyword. In case of multiple policies, the value speciﬁed in the default policy will
overwrite the value speciﬁed in other policies.
max http sessions logged = memcap /( max uri logging size + max hostname logging size ) max uri logging
size deﬁned in snort : 2048 max hostname logging size deﬁned in snort : 256
[Word Count: 77]

This option normalizes the text content with randomly encoded null bytes in 16LE,16BE,32LE and 32BE UTF
encodings to UTF8 in the server response. It relies on ﬁle preprocessor to determine if the content is text. Hence
ﬁle preprocessor should be enabled and conﬁgured with prepackaged ﬁle magics wihtout which this option is
not effective.
△
! NOTE
[Word Count: 57]

This opton relies on ﬁle prepreprocessor to determine if content can safely be considered as text before
normalizing. However, it is possible that non text ﬁle types unknown to ﬁle preprocessor may get normalized
as this option treats ﬁle types unknown to ﬁle preprocessor as text. Such cases may result in false positives
or false negatives in detection.
[Word Count: 58]

This option enables inspecting http data before the data is ﬂushed. This enables early IPS rule evaluation so that
the block rules will take into effect and the connection is blocked at the earliest instead of blocking later after
ﬂushing the data. This conﬁg will be effective only when inline normalisation is enabled.
[Word Count: 53]

This optional keyword is allowed with any policy to avoid packet processing. This option disables the pre-
processor. When the preprocessor is disabled only the ”memcap”, ”max gzip mem”, ”compress depth” and
”decompress depth” options are applied when speciﬁed with the conﬁguration. Other options are parsed but not
used. Any valid conﬁguration may have ”disabled” added to it.
[Word Count: 58]

preprocessor http_inspect: \
global iis_unicode_map unicode.map 1252
[Word Count: 7]

There are two types of server conﬁgurations: default and by IP address.
[Word Count: 12]

Default
This conﬁguration supplies the default server conﬁguration for any server that is not individually conﬁgured.
Most of your web servers will most likely end up using the default conﬁguration.
[Word Count: 30]

preprocessor http_inspect_server: \
server default profile all ports { 80 }
[Word Count: 11]

Conﬁguration by IP Address
This format is very similar to “default”, the only difference being that speciﬁc IPs
can be conﬁgured.
[Word Count: 21]

preprocessor http_inspect_server: \
server 10.1.1.1 profile all ports { 80 }
[Word Count: 11]

Conﬁguration by Multiple IP Addresses
This format is very similar to “Conﬁguration by IP Address”, the only
difference being that multiple IPs can be speciﬁed via a space separated list. There is a limit of 40 IP addresses or
CIDR notations per http inspect server line.
[Word Count: 46]

preprocessor http_inspect_server: \
server { 10.1.1.1 10.2.2.0/24 } profile all ports { 80 }
[Word Count: 14]

Important: Some conﬁguration options have an argument of ‘yes’ or ‘no’. This argument speciﬁes whether the user
wants the conﬁguration option to generate an HTTP Inspect alert or not. The ‘yes/no’ argument does not specify
whether the conﬁguration option itself is on or off, only the alerting functionality. In other words, whether set to ‘yes’
or ’no’, HTTP normalization will still occur, and rules based on HTTP trafﬁc will still trigger.
[Word Count: 71]

1.
profile <all|apache|iis|iis5 0|iis4 0>
[Word Count: 5]

Users can conﬁgure HTTP Inspect by using pre-deﬁned HTTP server proﬁles. Proﬁles allow the user to easily
conﬁgure the preprocessor for a certain type of server, but are not required for proper operation.
[Word Count: 33]

There are ﬁve proﬁles available: all, apache, iis, iis5 0, and iis4 0.
[Word Count: 13]

1-A.
all
The all proﬁle is meant to normalize the URI using most of the common tricks available. We alert on the
more serious forms of evasions. This is a great proﬁle for detecting all types of attacks, regardless of the
HTTP server. profile all sets the conﬁguration options described in Table 2.3.
[Word Count: 53]

1-B.
apache
The apache proﬁle is used for Apache web servers. This differs from the iis proﬁle by only accepting
UTF-8 standard Unicode encoding and not accepting backslashes as legitimate slashes, like IIS does.
Apache also accepts tabs as whitespace. profile apache sets the conﬁguration options described in
Table 2.4.
[Word Count: 50]

1-C.
iis
The iis proﬁle mimics IIS servers. So that means we use IIS Unicode codemaps for each server, %u
encoding, bare-byte encoding, double decoding, backslashes, etc. profile iis sets the conﬁguration
options described in Table 2.5.
[Word Count: 37]

1-D.
iis4 0, iis5 0
In IIS 4.0 and IIS 5.0, there was a double decoding vulnerability. These two proﬁles are identical to iis,
except they will alert by default if a URL has a double encoding. Double decode is not supported in IIS
5.1 and beyond, so it’s disabled by default.
[Word Count: 52]

1-E.
default, no profile
The default options used by HTTP Inspect do not use a proﬁle and are described in Table 2.6.
Proﬁles must be speciﬁed as the ﬁrst server option and cannot be combined with any other options except:
[Word Count: 40]

• ports
• iis unicode map
• allow proxy use
• server flow depth
• client flow depth
• post depth
• no alerts
• inspect uri only
• oversize dir length
• normalize headers
• normalize cookies
• normalize utf
• max header length
• max spaces
• max headers
• extended response inspection
• enable cookie
• inspect gzip
• unlimited decompress
• normalize javascript
• max javascript whitespaces
• enable xff
• http methods
[Word Count: 77]

Table 2.4: Options for the apache Proﬁle
Option
Setting
server ﬂow depth
300
client ﬂow depth
300
post depth
0
chunk encoding
alert on chunks larger than 500000 bytes
ASCII decoding
on, alert off
multiple slash
on, alert off
directory normalization
on, alert off
webroot
on, alert on
apache whitespace
on, alert on
utf 8 encoding
on, alert off
non strict url parsing
on
tab uri delimiter
is set
max header length
0, header length not checked
max spaces
200
max headers
0, number of headers not checked
[Word Count: 88]

• log uri
• log hostname
• small chunk length
• decompress swf
• decompress pdf
• legacy mode
[Word Count: 19]

These options must be speciﬁed after the profile option.
[Word Count: 9]

preprocessor http_inspect_server: \
server 1.1.1.1 profile all ports { 80 3128 }
[Word Count: 12]

This is how the user conﬁgures which ports to decode on the HTTP server. However, HTTPS trafﬁc is encrypted
and cannot be decoded with HTTP Inspect. To ignore HTTPS trafﬁc, use the SSL preprocessor.
[Word Count: 34]

3.
iis unicode map <map filename> codemap <integer>
[Word Count: 8]

The IIS Unicode map is generated by the program ms unicode generator.c. This program is located on the
Snort.org web site at http://www.snort.org/dl/contrib/ directory. Executing this program generates a
Unicode map for the system that it was run on. So, to get the speciﬁc Unicode mappings for an IIS web server,
you run this program on that server and use that Unicode map in this conﬁguration.
[Word Count: 66]

When using this option, the user needs to specify the ﬁle that contains the IIS Unicode map and also specify
the Unicode map to use. For US servers, this is usually 1252. But the ms unicode generator program tells you
which codemap to use for you server; it’s the ANSI code page. You can select the correct code page by looking
at the available code pages that the ms unicode generator outputs.
[Word Count: 72]

This enables the extended HTTP response inspection. The default http response inspection does not inspect the
various ﬁelds of a HTTP response. By turning this option the HTTP response will be thoroughly inspected. The
different ﬁelds of a HTTP response such as status code, status message, headers, cookie (when enable cookie is
conﬁgured) and body are extracted and saved into buffers. Different rule options are provided to inspect these
buffers.
[Word Count: 70]

This option must be enabled to make use of the decompress swf or decompress pdf options.
[Word Count: 16]

When this option is turned on, if the HTTP response packet has a body then any content pattern matches
( without http modiﬁers ) will search the response body ((decompressed in case of gzip) and not the entire
packet payload. To search for patterns in the header of the response, one should use the http modiﬁers with
content such as http header, http stat code, http stat msg and http cookie.
[Word Count: 71]

This options turns on the cookie extraction from HTTP requests and HTTP response. By default the cookie
inspection and extraction will be turned off. The cookie from the Cookie header line is extracted and stored
in HTTP Cookie buffer for HTTP requests and cookie from the Set-Cookie is extracted and stored in HTTP
Cookie buffer for HTTP responses. The Cookie: and Set-Cookie: header names itself along with leading
spaces and the CRLF terminating the header line are stored in the HTTP header buffer and are not stored in the
HTTP cookie buffer.
[Word Count: 92]

In this case, Set-Cookie: \r\n will be in the HTTP header buffer and the pattern
mycookie will be in the HTTP cookie buffer.
[Word Count: 23]

Table 2.6: Default HTTP Inspect Options
Option
Setting
port
80
server ﬂow depth
300
client ﬂow depth
300
post depth
-1
chunk encoding
alert on chunks larger than 500000 bytes
ASCII decoding
on, alert off
utf 8 encoding
on, alert off
multiple slash
on, alert off
directory normalization
on, alert off
webroot
on, alert on
iis backslash
on, alert off
apache whitespace
on, alert off
iis delimiter
on, alert off
non strict URL parsing
on
max header length
0, header length not checked
max spaces
200
max headers
0, number of headers not checked
[Word Count: 94]

Http Inspect generates a preprocessor alert with gid 120 and sid 6 when the decompression fails. When the
decompression fails due to a CRC error encountered by zlib, HTTP Inspect will also provide the detection
module with the data that was decompressed by zlib.
[Word Count: 44]

This option enables the user to decompress unlimited gzip data (across multiple packets).Decompression will
stop when the compressed data ends or when a out of sequence packet is received. To ensure unlimited decom-
pression, user should set the ’compress depth’ and ’decompress depth’ to its maximum values in the default
policy. The decompression in a single packet is still limited by the ’compress depth’ and ’decompress depth’.
[Word Count: 67]

The ’decompress depth’, ’compress depth’, and ’unlimited decompress’ are optionally used to place limits on
the decompression process. The semantics for SWF ﬁles are similar to the gzip decompression process.
[Word Count: 30]

During the decompression process, the preprocessor may generate alert 120:12 if Deﬂate decompression fails
or alert 120:13 if LZMA decompression fails.
△
! NOTE
[Word Count: 24]

LZMA decompression is only available if Snort is built with the liblzma package present and functional. If
the LZMA package is not present, then the lzma option will indicate a fatal parsing error. If the liblzma
package IS present, but one desires to disable LZMA support, then the –disable-lzma option on conﬁgure
will disable usage of the library.
[Word Count: 58]

This option will enable decompression of the compressed portions of PDF ﬁles encountered as the HTTP Re-
sponse body in a GET transaction. A prerequisite is enabling extended response inspection (described above).
[Word Count: 32]

When enabled, the preprocessor will examine the response body for the ’PDF ﬁles are then parsed, locating PDF
’streams’ with a single ’/FlateDecode’ ﬁlter. These streams are decompressed in-place, replacing the compressed
content.
[Word Count: 33]

The ’decompress depth’, ’compress depth’, and ’unlimited decompress’ are optionally used to place limits on
the decompression process. The semantics for PDF ﬁles are similar to the gzip decompression process.
[Word Count: 30]

During the ﬁle parsing/decompression process, the preprocessor may generate several alerts:
[Word Count: 11]

Alert
Description
120:14
Deﬂate decompression failure
120:15
Located a ’stream’ with an unsupported compression (’/Filter’) algorithm
120:16
Located a ’stream’ with unsupported cascaded ’/FlateDecode’ options, e.g.:
[Word Count: 26]

HTTP/1.1 200 OK\r\n
Date: Wed, 29 Jul 2009 13:35:26 GMT\r\n
Server: Apache/2.2.3 (Debian) PHP/5.2.0-8+etch10 mod_ssl/2.2.3 OpenSSL/0.9.8c\r\n
Last-Modified: Sun, 20 Jan 2008 12:01:21 GMT\r\n
Accept-Ranges: bytes\r\n
Content-Length: 214\r\n
Keep-Alive: timeout=15, max=99\r\n
Connection: Keep-Alive\r\n
Content-Type: application/octet-stream\r\n\r\n
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>FIXME</title>
</head>
<body>
<script>document.write(unescape(unescape("%48%65%6C%6C%6F%2C%20%73%6E%6F%72%74%20%74%65%61%6D%21")));
</script>
</body>
</html>
[Word Count: 44]

The above javascript will generate the preprocessor alert with SID 9 and GIDF 120 when normalize javascript
is turned on.
[Word Count: 20]

Http Inspect will also generate a preprocessor alert with GID 120 and SID 11 when there are more than one type
of encodings within the escaped/encoded data.
[Word Count: 27]

unescape("%48\x65%6C%6C%6F%2C%20%73%6E%6F%72%74%20%74%65%61%6D%21");
String.fromCharCode(0x48, 0x65, 0x6c, 0x6c, 111, 44, 32, 115, 110, 111, 114, 116, 32, 116, 101, 97, 10
[Word Count: 18]

The above obfuscation will generate the preprocessor alert with GID 120 and SID 11.
[Word Count: 14]

This option is turned off by default in HTTP Inspect.
[Word Count: 10]

This option enables Snort to parse and log the original client IP present in the X-Forwarded-For or True-Client-
IP HTTP request headers along with the generated events. The XFF/True-Client-IP Original client IP address is
logged only with uniﬁed2 output and is not logged with console (-A cmg) output.
[Word Count: 48]

xff_headers { [ x-forwarded-highest-priority 1 ] [ x-forwarded-second-highest-priority 2 ] \
[ x-forwarded-lowest-priority-custom 3 ] }
[Word Count: 16]

The default X-Forwarded-For and True-Client-IP headers are always present. They may be explicitly speciﬁed
in the xff headers conﬁg in order to determine their priority. If not speciﬁed, they will be automatically added
to the xff list as the lowest priority headers.
[Word Count: 42]

For example, let us say that we have the following (abbreviated) HTTP request header:
[Word Count: 14]

...
Host: www.snort.org
X-Forwarded-For: 192.168.1.1
X-Was-Originally-Forwarded-From: 10.1.1.1
...
[Word Count: 8]

With the default xff behavior (no xff headers), the ’X-Forwarded-For’ header would be used to provide a
192.168.1.1 Original Client IP address in the uniﬁed2 log. Custom headers are not parsed.
[Word Count: 31]

xff_headers { [ x-was-originally-forwarded-from 1 ] [ x-another-forwarding-header 2 ] \
[ x-forwarded-for 3 ] }
[Word Count: 16]

The X-Was-Originally-Forwarded-From header is the highest priority present and its value of 10.1.1.1 will be
logged as the Original Client IP in the uniﬁed2 log.
[Word Count: 25]

xff_headers { [ x-was-originally-forwarded-from 3 ] [ x-another-forwarding-header 2 ] \
[ x-forwarded-for 1 ] }
[Word Count: 16]

Now the X-Forwarded-For header is the highest priority and its value of 192.168.1.1 is logged.
△
! NOTE
[Word Count: 18]

The original client IP from XFF/True-Client-IP in uniﬁed2 logs can be viewed using the tool u2spewfoo.
This tool is present in the tools/u2spewfoo directory of snort source tree.
[Word Count: 28]

server flow depth is the same as the old flow depth option, which will be deprecated in a future release.
[Word Count: 20]

This speciﬁes the amount of raw client request payload to inspect. This value can be set from -1 to 1460. Unlike
server flow depth this value is applied to the ﬁrst packet of the HTTP request. It is not a session based ﬂow
depth. It has a default value of 300. It primarily eliminates Snort from inspecting larger HTTP Cookies that
appear at the end of many client request Headers.
[Word Count: 70]

request beyond 1460 bytes will be ineffective unless ﬂow depth is set to 0. Note that the 1460 byte maximum
ﬂow depth applies to stream reassembled packets as well. It is suggested to set the client flow depth to its
maximum value.
[Word Count: 42]

This speciﬁes the amount of data to inspect in a client post message. The value can be set from -1 to 65495. The
default value is -1. A value of -1 causes Snort to ignore all the data in the post message. Inversely, a value of 0
causes Snort to inspect all the client post message. This increases the performance by inspecting only speciﬁed
bytes in the post message.
[Word Count: 69]

The ascii decode option tells us whether to decode encoded ASCII chars, a.k.a %2f = /, %2e = ., etc. It is
normal to see ASCII encoding usage in URLs, so it is recommended that you disable HTTP Inspect alerting for
this option.
[Word Count: 43]

This option enables the support for extended ASCII codes in the HTTP request URI. This option is turned off
by default and is not supported with any of the proﬁles.
[Word Count: 30]

The utf-8 decode option tells HTTP Inspect to decode standard UTF-8 Unicode sequences that are in the URI.
This abides by the Unicode standard and only uses % encoding. Apache uses this standard, so for any Apache
servers, make sure you have this option turned on. As for alerting, you may be interested in knowing when you
have a UTF-8 encoded URI, but this will be prone to false positives as legitimate web clients use this type of
encoding. When utf 8 is enabled, ASCII decoding is also enabled to enforce correct functioning.
[Word Count: 93]

This option emulates the IIS %u encoding scheme. How the %u encoding scheme works is as follows: the
encoding scheme is started by a %u followed by 4 characters, like %uxxxx. The xxxx is a hex-encoded value
that correlates to an IIS Unicode codepoint. This value can most deﬁnitely be ASCII. An ASCII character is
encoded like %u002f = /, %u002e = ., etc. If no iis unicode map is speciﬁed before or after this option, the
default codemap is used.
[Word Count: 81]

You should alert on %u encodings, because we are not aware of any legitimate clients that use this encoding. So
it is most likely someone trying to be covert.
[Word Count: 29]

Bare byte encoding is an IIS trick that uses non-ASCII characters as valid values when decoding UTF-8 values.
This is not in the HTTP standard, as all non-ASCII values have to be encoded with a %. Bare byte encoding
allows the user to emulate an IIS server and interpret non-standard encodings correctly.
[Word Count: 52]

The alert on this decoding should be enabled, because there are no legitimate clients that encode UTF-8 this
way since it is non-standard.
[Word Count: 23]

The iis unicode option turns on the Unicode codepoint mapping. If there is no iis unicode map option spec-
iﬁed with the server conﬁg, iis unicode uses the default codemap. The iis unicode option handles the
mapping of non-ASCII codepoints that the IIS server accepts and decodes normal UTF-8 requests.
[Word Count: 50]

You should alert on the iis unicode option, because it is seen mainly in attacks and evasion attempts. When
iis unicode is enabled, ASCII and UTF-8 decoding are also enabled to enforce correct decoding. To alert on
UTF-8 decoding, you must enable also enable utf 8 yes.
[Word Count: 47]

This option lets users receive an alert if certain non-RFC chars are used in a request URI. For instance, a user
may not want to see null bytes in the request URI and we can alert on that. Please use this option with care,
because you could conﬁgure it to say, alert on all ‘/’ or something like that. It’s ﬂexible, so be careful.
[Word Count: 64]

This option normalizes multiple slashes in a row, so something like: “foo/////////bar” get normalized to “foo/bar.”
[Word Count: 16]

If you want an alert when multiple slashes are seen, then conﬁgure with a yes; otherwise, use no.
[Word Count: 18]

Normalizes backslashes to slashes. This is again an IIS emulation. So a request URI of “/foo\bar” gets normal-
ized to “/foo/bar.”
[Word Count: 21]

This option normalizes directory traversals and self-referential directories.
[Word Count: 8]

If you want to conﬁgure an alert, specify yes, otherwise, specify no. This alert may give false positives, since
some web sites refer to ﬁles using directory traversals.
[Word Count: 28]

This option deals with the non-RFC standard of using tab for a space delimiter. Apache uses this, so if the
emulated web server is Apache, enable this option. Alerts on this option may be interesting, but may also be
false positive prone.
[Word Count: 42]

This started out being IIS-speciﬁc, but Apache takes this non-standard delimiter was well. Since this is common,
we always take this as standard since the most popular web servers accept it. But you can still get an alert on
this option.
[Word Count: 41]

30.
chunk length <non-zero positive integer>
[Word Count: 6]

This option is an anomaly detector for abnormally large chunk sizes. This picks up the Apache chunk encoding
exploits, and may also alert on HTTP tunneling that uses chunk encoding.
[Word Count: 30]

31.
small chunk length { <chunk size> <consecutive chunks> }
[Word Count: 10]

This option is an evasion detector for consecutive small chunk sizes when either the client or server use
Transfer-Encoding:
chunked. <chunk size> speciﬁes the maximum chunk size for which a chunk will
be considered small. <consecutive chunks> speciﬁes the number of consecutive small chunks <= <chunk
size> before an event will be generated. This option is turned off by default. Maximum values for each are 255
and a <chunk size> of 0 disables. Events generated are gid:119, sid:26 for client small chunks and gid:120,
sid:7 for server small chunks.
[Word Count: 89]

Meaning alert if we see 5 consecutive chunk sizes of 10 or less.
[Word Count: 13]

This option turns HTTP pipeline decoding off, and is a performance enhancement if needed. By default, pipeline
requests are inspected for attacks, but when this option is enabled, pipeline requests are not decoded and ana-
lyzed per HTTP protocol ﬁeld. It is only inspected with the generic pattern matching.
[Word Count: 49]

This option turns on non-strict URI parsing for the broken way in which Apache servers will decode a URI.
Only use this option on servers that will accept URIs like this: ”get /index.html alsjdfk alsj lj aj la jsj s\n”. The
non strict option assumes the URI is between the ﬁrst and second space even if there is no valid HTTP identiﬁer
after the second space.
[Word Count: 66]

By specifying this keyword, the user is allowing proxy use on this server. This means that no alert will be
generated if the proxy alert global keyword has been used. If the proxy alert keyword is not enabled, then
this option does nothing. The allow proxy use keyword is just a way to suppress unauthorized proxy use for
an authorized server.
[Word Count: 61]

This option turns off all alerts that are generated by the HTTP Inspect preprocessor module. This has no effect
on HTTP rules in the rule set. No argument is speciﬁed.
[Word Count: 30]

36.
oversize dir length <non-zero positive integer>
[Word Count: 7]

This option takes a non-zero positive integer as an argument. The argument speciﬁes the max char directory
length for URL directory. If a url directory is larger than this argument size, an alert is generated. A good
argument value is 300 characters. This should limit the alerts to IDS evasion type attacks, like whisker -i 4.
[Word Count: 56]

This is a performance optimization. When enabled, only the URI portion of HTTP requests will be inspected
for attacks. As this ﬁeld usually contains 90-95% of the web attacks, you’ll catch most of the attacks. So if
you need extra performance, enable this optimization. It’s important to note that if this option is used without
any uricontent rules, then no inspection will take place. This is obvious since the URI is only inspected with
uricontent rules, and if there are none available, then there is nothing to inspect.
[Word Count: 88]

For example, if we have the following rule set:
[Word Count: 9]

alert tcp any any -> any 80 ( msg:"content"; content: "foo"; )
[Word Count: 12]

No alert will be generated when inspect uri only is enabled. The inspect uri only conﬁguration turns off
all forms of detection except uricontent inspection.
[Word Count: 25]

38.
max header length <positive integer up to 65535>
[Word Count: 9]

This option takes an integer as an argument. The integer is the maximum length allowed for an HTTP client
request header ﬁeld. Requests that exceed this length will cause a ”Long Header” alert. This alert is off by
default. To enable, specify an integer argument to max header length of 1 to 65535. Specifying a value of 0 is
treated as disabling the alert.
[Word Count: 64]

39.
max spaces <positive integer up to 65535>
[Word Count: 8]

This option takes an integer as an argument. The integer determines the maximum number of whitespaces
allowed with HTTP client request line folding. Requests headers folded with whitespaces equal to or more than
this value will cause a ”Space Saturation” alert with SID 26 and GID 119. The default value for this option is
200. To enable, specify an integer argument to max spaces of 1 to 65535. Specifying a value of 0 is treated as
disabling the alert.
[Word Count: 79]

This option generates an alert when a directory traversal traverses past the web server root directory. This
generates much fewer false positives than the directory option, because it doesn’t alert on directory traversals
that stay within the web server directory structure. It only alerts when the directory traversals go past the web
server root directory, which is associated with certain web attacks.
[Word Count: 62]

This option turns on the use of the tab character (0x09) as a delimiter for a URI. Apache accepts tab as a
delimiter; IIS does not. For IIS, a tab in the URI should be treated as any other character. Whether this option is
on or not, a tab is treated as whitespace if a space character (0x20) precedes it. No argument is speciﬁed.
[Word Count: 64]

This option turns on normalization for HTTP Header Fields, not including Cookies (using the same conﬁguration
parameters as the URI normalization (i.e., multi-slash, directory, etc.). It is useful for normalizing Referrer URIs
that may appear in the HTTP Header.
[Word Count: 39]

This option turns on normalization for HTTP Cookie Fields (using the same conﬁguration parameters as the
URI normalization (i.e., multi-slash, directory, etc.). It is useful for normalizing data in HTTP Cookies that may
be encoded.
[Word Count: 35]

This option turns on normalization of HTTP response bodies where the Content-Type header lists the character
set as ”utf-16le”, ”utf-16be”, ”utf-32le”, or ”utf-32be”. HTTP Inspect will attempt to normalize these back into
8-bit encoding, generating an alert if the extra bytes are non-zero.
[Word Count: 43]

45.
max headers <positive integer up to 1024>
[Word Count: 8]

This option takes an integer as an argument. The integer is the maximum number of HTTP client request header
ﬁelds. Requests that contain more HTTP Headers than this value will cause a ”Max Header” alert. The alert is
off by default. To enable, specify an integer argument to max headers of 1 to 1024. Specifying a value of 0 is
treated as disabling the alert.
[Word Count: 65]

46.
http methods {cmd[cmd]}
This speciﬁes additional HTTP Request Methods outside of those checked by
default within the preprocessor (GET and POST). The list should be enclosed within braces and delimited by
spaces, tabs, line feed or carriage return. The conﬁg option, braces and methods also needs to be separated by
braces.
[Word Count: 52]

Please note the maximum length for a method name is 256.
[Word Count: 11]

This option enables HTTP Inspect preprocessor to parse the URI data from the HTTP request and log it along
with all the generated events for that session. Stream reassembly needs to be turned on HTTP ports to enable
the logging. If there are multiple HTTP requests in the session, the URI data of the most recent HTTP request
during the alert will be logged. The maximum URI logged is 2048.
△
! NOTE
[Word Count: 73]

Please note, this is logged only with the uniﬁed2 output and is not logged with console output (-A cmg).
u2spewfoo can be used to read this data from the uniﬁed2.
[Word Count: 30]

This option enables HTTP Inspect preprocessor to parse the hostname data from the ”Host” header of the HTTP
request and log it along with all the generated events for that session. Stream reassembly needs to be turned on
HTTP ports to enable the logging. If there are multiple HTTP requests in the session, the Hostname data of the
most recent HTTP request during the alert will be logged. In case of multiple ”Host” headers within one HTTP
request, a preprocessor alert with sid 24 is generated. The maximum hostname length logged is 256.
△
! NOTE
[Word Count: 96]

Please note, this is logged only with the uniﬁed2 output and is not logged with console output (-A cmg).
u2spewfoo can be used to read this data from the uniﬁed2.
[Word Count: 30]

##########################################
# HTTP2 SUPPORT IS STILL EXPERIMENTAL!
# DO NOT USE IN PRODUCTION ENVIRONMENTS.
# Please send any issues to the Snort team
##########################################
[Word Count: 24]

49.
legacy mode By default, HTTP2 trafﬁc is not supported. You can use ”legacy mode no” to enable HTTP2
support. If http legacy mode is conﬁgured, HTTP2 inspection is disabled.
[Word Count: 30]

preprocessor http_inspect_server: \
server 10.1.1.1 \
ports { 80 3128 8080 } \
server_flow_depth 0 \
ascii no \
double_decode yes \
non_rfc_char { 0x00 } \
chunk_length 500000 \
non_strict \
no_alerts
[Word Count: 33]

preprocessor http_inspect_server: \
server default \
ports
{ 80 3128 }
\
non_strict \
non_rfc_char
{ 0x00 }
\
server_flow_depth 300
\
apache_whitespace yes \
directory no \
iis_backslash no \
u_encode yes \
ascii no \
chunk_length 500000 \
bare_byte yes \
double_decode yes \
iis_unicode yes \
iis_delimiter yes \
multi_slash no
[Word Count: 54]

preprocessor http_inspect_server: \
server default \
profile all \
ports { 80 8080 }
[Word Count: 14]

The SMTP preprocessor is an SMTP decoder for user applications. Given a data buffer, SMTP will decode the buffer
and ﬁnd SMTP commands and responses. It will also mark the command, data header data body sections, and TLS
data.
[Word Count: 39]

SMTP handles stateless and stateful processing. It saves state between individual packets. However maintaining
correct state is dependent on the reassembly of the client side of the stream (i.e., a loss of coherent stream data results
in a loss of state).
[Word Count: 41]

SMTP has the usual conﬁguration items, such as port and inspection type. Also, SMTP command lines can be
normalized to remove extraneous spaces. TLS-encrypted trafﬁc can be ignored, which improves performance. In
addition, regular mail data can be ignored for an additional performance boost. Since so few (none in the current snort
rule set) exploits are against mail data, this is relatively safe to do and can improve the performance of data inspection.
[Word Count: 73]

The conﬁguration options are described below:
[Word Count: 6]

This speciﬁes on what ports to check for SMTP data. Typically, this will include 25 and possibly 465, for
encrypted SMTP.
[Word Count: 21]

2.
inspection type <stateful | stateless>
[Word Count: 6]

Indicate whether to operate in stateful or stateless mode.
[Word Count: 9]

This turns on normalization. Normalization checks for more than one space character after a command. Space
characters are deﬁned as space (ASCII 0x20) or tab (ASCII 0x09).
[Word Count: 27]

none turns off normalization for all commands.
[Word Count: 7]

cmds just checks commands listed with the normalize cmds parameter.
[Word Count: 10]

Ignore data section of mail (except for mail headers) when processing rules.
[Word Count: 12]

Ignore TLS-encrypted data when processing rules.
[Word Count: 6]

Alert if an SMTP command line is longer than this value. Absence of this option or a ”0” means never alert on
command line length. RFC 2821 recommends 512 as a maximum command line length.
[Word Count: 35]

Alert if an SMTP DATA header line is longer than this value. Absence of this option or a ”0” means never alert
on data header line length. RFC 2821 recommends 1024 as a maximum data header line length.
[Word Count: 38]

Alert if an SMTP response line is longer than this value. Absence of this option or a ”0” means never alert on
response line length. RFC 2821 recommends 512 as a maximum response line length.
[Word Count: 35]

9.
alt max command line len <int> { <cmd> [<cmd>] }
[Word Count: 11]

Overrides max command line len for speciﬁc commands.
[Word Count: 8]

Turn off all alerts for this preprocessor.
[Word Count: 7]

11.
invalid cmds { <Space-delimited list of commands> }
[Word Count: 9]

Alert if this command is sent from client side. Default is an empty list.
[Word Count: 14]

12.
valid cmds { <Space-delimited list of commands> }
[Word Count: 9]

List of valid commands. We do not alert on commands in this list. Default is an empty list, but preprocessor has
this list hard-coded:
[Word Count: 24]

{ ATRN AUTH BDAT DATA DEBUG EHLO EMAL ESAM ESND ESOM ETRN EVFY EXPN HELO
HELP IDENT MAIL NOOP QUIT RCPT RSET SAML SOML SEND ONEX QUEU STARTTLS TICK
TIME TURN TURNME VERB VRFY X-EXPS X-LINK2STATE XADR XAUTH XCIR XEXCH50
XGEN XLICENSE XQUE XSTA XTRN XUSR }
[Word Count: 47]

13.
data cmds { <Space-delimited list of commands> }
[Word Count: 9]

List of commands that initiate sending of data with an end of data delimiter the same as that of the DATA
command per RFC 5321 - "<CRLF>.<CRLF>". Default is { DATA }.
[Word Count: 32]

14.
binary data cmds { <Space-delimited list of commands> }
[Word Count: 10]

List of commands that initiate sending of data and use a length value after the command to indicate the amount
of data to be sent, similar to that of the BDAT command per RFC 3030. Default is { BDAT XEXCH50 }.
[Word Count: 41]

15.
auth cmds { <Space-delimited list of commands> }
[Word Count: 9]

List of commands that initiate an authentication exchange between client and server. Default is { AUTH XAUTH
X-EXPS }.
[Word Count: 19]

Alert if we don’t recognize command. Default is off.
[Word Count: 9]

17.
normalize cmds { <Space-delimited list of commands> }
[Word Count: 9]

Normalize this list of commands Default is { RCPT VRFY EXPN }.
[Word Count: 12]

18.
xlink2state { enable | disable [drop] }
[Word Count: 8]

Enable/disable xlink2state alert. Drop if alerted. Default is enable.
[Word Count: 9]

List all commands understood by the preprocessor. This not normally printed out with the conﬁguration because
it can print so much data.
[Word Count: 22]

Disables the SMTP preprocessor in a conﬁg. This is useful when specifying the decoding depths such as
b64 decode depth, qp decode depth, uu decode depth, bitenc decode depth or the memcap used for de-
coding max mime mem in default conﬁg without turning on the SMTP preprocessor.
[Word Count: 48]

This conﬁg option is used to turn off/on or set the base64 decoding depth used to decode the base64 encoded
MIME attachments. The value ranges from -1 to 65535. A value of -1 turns off the base64 decoding of MIME
attachments. The value of 0 sets the decoding of base64 encoded MIME attachments to unlimited. A value
other than 0 or -1 restricts the decoding of base64 MIME attachments, and applies per attachment. A SMTP
preprocessor alert with sid 10 is generated (if enabled) when the decoding fails.
[Word Count: 88]

Multiple MIME attachments/data in one packet are pipelined. When stateful inspection is turned on the base64
encoded MIME attachments/data across multiple packets are decoded too.
[Word Count: 25]

The decoded data is available for detection using the rule option file data. See 3.5.28 rule option for more
details.
[Word Count: 20]

This option replaces the deprecated options, enable mime decoding and max mime depth. It is recommended
that user inputs a value that is a multiple of 4. When the value speciﬁed is not a multiple of 4, the SMTP
preprocessor will round it up to the next multiple of 4.
[Word Count: 50]

In case of multiple conﬁgs, the value speciﬁed in the non-default conﬁg cannot exceed the value speciﬁed in the
default conﬁg.
[Word Count: 21]

This conﬁg option is used to turn off/on or set the Quoted-Printable decoding depth used to decode the Quoted-
Printable(QP) encoded MIME attachments. The value ranges from -1 to 65535. A value of -1 turns off the
QP decoding of MIME attachments. The value of 0 sets the decoding of QP encoded MIME attachments
to unlimited. A value other than 0 or -1 restricts the decoding of QP MIME attachments, and applies per
attachment. A SMTP preprocessor alert with sid 11 is generated (if enabled) when the decoding fails.
[Word Count: 89]

Multiple MIME attachments/data in one packet are pipelined. When stateful inspection is turned on the QP
encoded MIME attachments/data across multiple packets are decoded too.
[Word Count: 25]

The decoded data is available for detection using the rule option file data. See 3.5.28 rule option for more
details.
[Word Count: 20]

In case of multiple conﬁgs, the value speciﬁed in the non-default conﬁg cannot exceed the value speciﬁed in the
default conﬁg.
[Word Count: 21]

This conﬁg option is used to turn off/on or set the non-encoded MIME extraction depth used to extract the non-
encoded MIME attachments. The value ranges from -1 to 65535. A value of -1 turns off the extraction of these
MIME attachments. The value of 0 sets the extraction of these MIME attachments to unlimited. A value other
than 0 or -1 restricts the extraction of these MIME attachments, and applies per attachment.
[Word Count: 73]

Multiple MIME attachments/data in one packet are pipelined. When stateful inspection is turned on the non-
encoded MIME attachments/data across multiple packets are extracted too.
[Word Count: 25]

The extracted data is available for detection using the rule option file data. See 3.5.28 rule option for more
details.
[Word Count: 20]

In case of multiple conﬁgs, the value speciﬁed in the non-default conﬁg cannot exceed the value speciﬁed in the
default conﬁg.
[Word Count: 21]

This conﬁg option is used to turn off/on or set the Unix-to-Unix decoding depth used to decode the Unix-to-
Unix(UU) encoded attachments. The value ranges from -1 to 65535. A value of -1 turns off the UU decoding
of SMTP attachments. The value of 0 sets the decoding of UU encoded SMTP attachments to unlimited. A
value other than 0 or -1 restricts the decoding of UU SMTP attachments, and applies per attachment. A SMTP
preprocessor alert with sid 13 is generated (if enabled) when the decoding fails.
[Word Count: 88]

Multiple UU attachments/data in one packet are pipelined. When stateful inspection is turned on the UU encoded
SMTP attachments/data across multiple packets are decoded too.
[Word Count: 25]

The decoded data is available for detection using the rule option file data. See 3.5.28 rule option for more
details.
[Word Count: 20]

In case of multiple conﬁgs, the value speciﬁed in the non-default conﬁg cannot exceed the value speciﬁed in the
default conﬁg.
[Word Count: 21]

Enables Base64 decoding of Mime attachments/data. Multiple base64 encoded MIME attachments/data in
one packet are pipelined. When stateful inspection is turned on the base64 encoded MIME attachments/data
across multiple packets are decoded too. The decoding of base64 encoded attachments/data ends when either
the max mime depth or maximum MIME sessions (calculated using max mime depth and max mime mem) is
reached or when the encoded data ends. The decoded data is available for detection using the rule option
file data. See 3.5.28 rule option for more details.
[Word Count: 87]

This option is deprecated. Use the option b64 decode depth to turn off or on the base64 decoding instead.
[Word Count: 19]

Speciﬁes the maximum number of base64 encoded data to decode per SMTP attachment. The option take values
ranging from 4 to 20480 bytes. The default value for this in snort in 1460 bytes.
[Word Count: 33]

It is recommended that user inputs a value that is a multiple of 4. When the value speciﬁed is not a multiple of
4, the SMTP preprocessor will round it up to the next multiple of 4.
[Word Count: 37]

This option is deprecated. Use the option b64 decode depth to turn off or on the base64 decoding instead.
[Word Count: 19]

This option determines (in bytes) the maximum amount of memory the SMTP preprocessor will use for decoding
base64 encoded/quoted-printable/non-encoded MIME attachments/data or Unix-to-Unix encoded attachments.
This value can be set from 3276 bytes to 100MB.
[Word Count: 35]

This option along with the maximum of the decoding depths will determine the SMTP sessions that will be
decoded at any given instant. The default value for this option is 838860.
[Word Count: 31]

Note: It is suggested to set this value such that the max smtp session calculated as follows is at least 1.
[Word Count: 21]

max smtp session = max mime mem /(2 * max of (b64 decode depth, uu decode depth, qp decode depth or
bitenc decode depth))
[Word Count: 24]

For example, if b64 decode depth is 0 (indicates unlimited decoding) and qp decode depth is 100, then
[Word Count: 18]

max smtp session = max mime mem/2*65535 (max value for b64 decode depth)
[Word Count: 13]

In case of multiple conﬁgs, the max mime mem of the non-default conﬁgs will be overwritten by the default
conﬁg’s value. Hence user needs to deﬁne it in the default conﬁg with the new keyword disabled (used to
disable SMTP preprocessor in a conﬁg).
[Word Count: 44]

28.
log mailfrom This option enables SMTP preprocessor to parse and log the sender’s email address extracted
from the ”MAIL FROM” command along with all the generated events for that session. The maximum number
of bytes logged for this option is 1024.
[Word Count: 42]

Please note, this is logged only with the uniﬁed2 output and is not logged with console output (-A cmg).
u2spewfoo can be used to read this data from the uniﬁed2.
[Word Count: 30]

29.
log rcptto This option enables SMTP preprocessor to parse and log the recipient’s email addresses extracted
from the ”RCPT TO” command along with all the generated events for that session. Multiple recipients are
appended with commas. The maximum number of bytes logged for this option is 1024.
[Word Count: 48]

Please note, this is logged only with the uniﬁed2 output and is not logged with console output (-A cmg).
u2spewfoo can be used to read this data from the uniﬁed2.
[Word Count: 30]

30.
log filename This option enables SMTP preprocessor to parse and log the MIME attachment ﬁlenames ex-
tracted from the Content-Disposition header within the MIME body along with all the generated events for that
session. Multiple ﬁlenames are appended with commas. The maximum number of bytes logged for this option
is 1024.
[Word Count: 52]

Please note, this is logged only with the uniﬁed2 output and is not logged with the console output (-A cmg).
u2spewfoo can be used to read this data from the uniﬁed2.
[Word Count: 31]

31.
log email hdrs This option enables SMTP preprocessor to parse and log the SMTP email headers extracted
from SMTP data along with all generated events for that session. The number of bytes extracted and logged
depends upon the email hdrs log depth.
[Word Count: 43]

Please note, this is logged only with the uniﬁed2 output and is not logged with the console output (-A cmg).
u2spewfoo can be used to read this data from the uniﬁed2.
[Word Count: 31]

32.
email hdrs log depth <int> This option speciﬁes the depth for logging email headers. The allowed range
for this option is 0 - 20480. A value of 0 will disable email headers logging. The default value for this option is
1464.
[Word Count: 42]

Please note, in case of multiple policies, the value speciﬁed in the default policy is used and the values speciﬁed
in the targeted policies are overwritten by the default value. This option must be conﬁgured in the default policy
even if the SMTP conﬁguration is disabled.
[Word Count: 46]

33.
memcap <int> This option determines in bytes the maximum amount of memory the SMTP preprocessor will
use for logging of ﬁlename, MAIL FROM addresses, RCPT TO addresses and email headers. This value along
with the buffer size used to log MAIL FROM, RCPT TO, ﬁlenames and email hdrs log depth will determine
the maximum SMTP sessions that will log the email headers at any given time. When this memcap is reached
SMTP will stop logging the ﬁlename, MAIL FROM address, RCPT TO addresses and email headers until
memory becomes available.
[Word Count: 91]

Max SMTP sessions logging email headers at any given time = memcap/(1024 + 1024 + 1024 + email hdrs log depth)
[Word Count: 21]

The size 1024 is the maximum buffer size used for logging ﬁlename, RCPTTO and MAIL FROM addresses.
[Word Count: 17]

Default value for this option is 838860. The allowed range for this option is 3276 to 104857600. The value
speciﬁed in the default conﬁg is used when this option is speciﬁed in multiple conﬁgs. This option must be
conﬁgured in the default conﬁg even if the SMTP conﬁguration is disabled.
[Word Count: 50]

Please note, in case of multiple policies, the value speciﬁed in the default policy is used and the values speciﬁed
in the targeted policies are overwritten by the default value. This option must be conﬁgured in the default policy
even if the SMTP conﬁguration is disabled.
[Word Count: 46]

preprocessor SMTP: \
ports { 25 } \
inspection_type stateful \
normalize cmds \
normalize_cmds { EXPN VRFY RCPT } \
ignore_data \
ignore_tls_data \
max_command_line_len
512 \
max_header_line_len
1024 \
max_response_line_len 512 \
no_alerts \
alt_max_command_line_len 300 { RCPT } \
invalid_cmds { } \
valid_cmds { } \
xlink2state { disable } \
print_cmds \
log_filename \
log_email_hdrs \
log_mailfrom \
log_rcptto \
email_hdrs_log_depth 2920 \
memcap 6000
[Word Count: 70]

preprocessor SMTP: \
b64_decode_depth 0\
max_mime_mem 4000 \
memcap 6000 \
email_hdrs_log_depth 2920 \
disabled
[Word Count: 15]

preprocessor SMTP: \
ports { 25 } \
inspection_type stateful \
normalize cmds \
normalize_cmds { EXPN VRFY RCPT } \
alt_max_command_line_len 260 { MAIL } \
alt_max_command_line_len 300 { RCPT } \
alt_max_command_line_len 500 { HELP HELO ETRN } \
alt_max_command_line_len 255 { EXPN VRFY }
[Word Count: 47]

RCPT TO: and MAIL FROM: are SMTP commands. For the preprocessor conﬁguration, they are referred to as RCPT
and MAIL, respectively. Within the code, the preprocessor actually maps RCPT and MAIL to the correct command
[Word Count: 35]

POP is an POP3 decoder for user applications. Given a data buffer, POP will decode the buffer and ﬁnd POP3
commands and responses. It will also mark the command, data header data body sections and extract the POP3
attachments and decode it appropriately.
[Word Count: 43]

POP will handle stateful processing. It saves state between individual packets. However maintaining correct state is
dependent on the reassembly of the server side of the stream (i.e., a loss of coherent stream data results in a loss of
state).
[Word Count: 40]

Stream should be turned on for POP. Please ensure that the POP ports are added to the stream5 ports for proper
reassembly.
[Word Count: 22]

The POP preprocessor uses GID 142 to register events.
[Word Count: 9]

The conﬁguration options are described below:
[Word Count: 6]

This speciﬁes on what ports to check for POP data. Typically, this will include 110. Default ports if none are
speciﬁed are 110 .
[Word Count: 24]

Disables the POP preprocessorin a conﬁg. This is useful when specifying the decoding depths such as b64 decode depth,
qp decode depth, uu decode depth, bitenc decode depth or the memcap used for decoding memcap in de-
fault conﬁg without turning on the POP preprocessor.
[Word Count: 45]

This conﬁg option is used to turn off/on or set the base64 decoding depth used to decode the base64 encoded
MIME attachments. The value ranges from -1 to 65535. A value of -1 turns off the base64 decoding of MIME
attachments. The value of 0 sets the decoding of base64 encoded MIME attachments to unlimited. A value
other than 0 or -1 restricts the decoding of base64 MIME attachments, and applies per attachment. A POP
preprocessor alert with sid 4 is generated (if enabled) when the decoding fails.
[Word Count: 88]

Multiple MIME attachments/data in one packet are pipelined. When stateful inspection is turned on the base64
encoded MIME attachments/data across multiple packets are decoded too.
[Word Count: 25]

The decoded data is available for detection using the rule option file data. See 3.5.28 rule option for more
details.
[Word Count: 20]

It is recommended that user inputs a value that is a multiple of 4. When the value speciﬁed is not a multiple of
4, the POP preprocessor will round it up to the next multiple of 4.
[Word Count: 37]

In case of multiple conﬁgs, the value speciﬁed in the non-default conﬁg cannot exceed the value speciﬁed in the
default conﬁg.
[Word Count: 21]

This conﬁg option is used to turn off/on or set the Quoted-Printable decoding depth used to decode the Quoted-
Printable(QP) encoded MIME attachments. The value ranges from -1 to 65535. A value of -1 turns off the
QP decoding of MIME attachments. The value of 0 sets the decoding of QP encoded MIME attachments
to unlimited. A value other than 0 or -1 restricts the decoding of QP MIME attachments, and applies per
attachment. A POP preprocessor alert with sid 5 is generated (if enabled) when the decoding fails.
[Word Count: 89]

Multiple MIME attachments/data in one packet are pipelined. When stateful inspection is turned on the QP
encoded MIME attachments/data across multiple packets are decoded too.
[Word Count: 25]

The decoded data is available for detection using the rule option file data. See 3.5.28 rule option for more
details.
[Word Count: 20]

In case of multiple conﬁgs, the value speciﬁed in the non-default conﬁg cannot exceed the value speciﬁed in the
default conﬁg.
[Word Count: 21]

This conﬁg option is used to turn off/on or set the non-encoded MIME extraction depth used to extract the non-
encoded MIME attachments. The value ranges from -1 to 65535. A value of -1 turns off the extraction of these
MIME attachments. The value of 0 sets the extraction of these MIME attachments to unlimited. A value other
than 0 or -1 restricts the extraction of these MIME attachments, and applies per attachment.
[Word Count: 73]

Multiple MIME attachments/data in one packet are pipelined. When stateful inspection is turned on the non-
encoded MIME attachments/data across multiple packets are extracted too.
[Word Count: 25]

The extracted data is available for detection using the rule option file data. See 3.5.28 rule option for more
details.
[Word Count: 20]

In case of multiple conﬁgs, the value speciﬁed in the non-default conﬁg cannot exceed the value speciﬁed in the
default conﬁg.
[Word Count: 21]

This conﬁg option is used to turn off/on or set the Unix-to-Unix decoding depth used to decode the Unix-to-
Unix(UU) encoded attachments. The value ranges from -1 to 65535. A value of -1 turns off the UU decoding of
POP attachments. The value of 0 sets the decoding of UU encoded POP attachments to unlimited. A value other
than 0 or -1 restricts the decoding of UU POP attachments, and applies per attachment. A POP preprocessor
alert with sid 7 is generated (if enabled) when the decoding fails.
[Word Count: 88]

Multiple UU attachments/data in one packet are pipelined. When stateful inspection is turned on the UU encoded
POP attachments/data across multiple packets are decoded too.
[Word Count: 25]

The decoded data is available for detection using the rule option file data. See 3.5.28 rule option for more
details.
[Word Count: 20]

In case of multiple conﬁgs, the value speciﬁed in the non-default conﬁg cannot exceed the value speciﬁed in the
default conﬁg.
[Word Count: 21]

This option determines (in bytes) the maximum amount of memory the POP preprocessor will use for decoding
base64 encoded/quoted-printable/non-encoded MIME attachments/data or Unix-to-Unix encoded attachments.
This value can be set from 3276 bytes to 100MB.
[Word Count: 35]

This option along with the maximum of the decoding depths will determine the POP sessions that will be
decoded at any given instant. The default value for this option is 838860.
[Word Count: 31]

Note: It is suggested to set this value such that the max pop session calculated as follows is at least 1.
[Word Count: 21]

max pop session = memcap /(2 * max of (b64 decode depth, uu decode depth, qp decode depth or bitenc decode depth))
[Word Count: 22]

For example, if b64 decode depth is 0 (indicates unlimited decoding) and qp decode depth is 100, then
[Word Count: 18]

max pop session = memcap/2*65535 (max value for b64 decode depth)
[Word Count: 11]

In case of multiple conﬁgs, the memcap of the non-default conﬁgs will be overwritten by the default conﬁg’s
value. Hence user needs to deﬁne it in the default conﬁg with the new keyword disabled (used to disable POP
preprocessor in a conﬁg).
[Word Count: 42]

When the memcap for decoding (memcap) is exceeded the POP preprocessor alert with sid 3 is generated (when
enabled).
[Word Count: 19]

preprocessor pop: \
ports { 110 } \
memcap 1310700 \
qp_decode_depth -1 \
b64_decode_depth 0 \
bitenc_decode_depth 100
[Word Count: 19]

preprocessor pop: \
memcap 1310700 \
qp_decode_depth 0 \
disabled
[Word Count: 10]

preprocessor pop: \
ports { 110 } \
b64_decode_depth 1460 \
qp_decode_depth 1460 \
bitenc_decode_depth 1460 \
uu_decode_depth 1460
[Word Count: 19]

IMAP is an IMAP4 decoder for user applications. Given a data buffer, IMAP will decode the buffer and ﬁnd IMAP4
commands and responses. It will also mark the command, data header data body sections and extract the IMAP4
attachments and decode it appropriately.
[Word Count: 43]

IMAP will handle stateful processing. It saves state between individual packets. However maintaining correct state
is dependent on the reassembly of the server side of the stream (i.e., a loss of coherent stream data results in a loss of
state).
[Word Count: 40]

Stream should be turned on for IMAP. Please ensure that the IMAP ports are added to the stream5 ports for proper
reassembly.
[Word Count: 22]

The IMAP preprocessor uses GID 141 to register events.
[Word Count: 9]

The conﬁguration options are described below:
[Word Count: 6]

This speciﬁes on what ports to check for IMAP data. Typically, this will include 143. Default ports if none are
speciﬁed are 143 .
[Word Count: 24]

Disables the IMAP preprocessor in a conﬁg. This is useful when specifying the decoding depths such as
b64 decode depth, qp decode depth, uu decode depth, bitenc decode depth or the memcap used for de-
coding memcap in default conﬁg without turning on the IMAP preprocessor.
[Word Count: 46]

This conﬁg option is used to turn off/on or set the base64 decoding depth used to decode the base64 encoded
MIME attachments. The value ranges from -1 to 65535. A value of -1 turns off the base64 decoding of MIME
attachments. The value of 0 sets the decoding of base64 encoded MIME attachments to unlimited. A value
other than 0 or -1 restricts the decoding of base64 MIME attachments, and applies per attachment. A IMAP
preprocessor alert with sid 4 is generated (if enabled) when the decoding fails.
[Word Count: 88]

Multiple MIME attachments/data in one packet are pipelined. When stateful inspection is turned on the base64
encoded MIME attachments/data across multiple packets are decoded too.
[Word Count: 25]

The decoded data is available for detection using the rule option file data. See 3.5.28 rule option for more
details.
[Word Count: 20]

It is recommended that user inputs a value that is a multiple of 4. When the value speciﬁed is not a multiple of
4, the IMAP preprocessor will round it up to the next multiple of 4.
[Word Count: 37]

In case of multiple conﬁgs, the value speciﬁed in the non-default conﬁg cannot exceed the value speciﬁed in the
default conﬁg.
[Word Count: 21]

This conﬁg option is used to turn off/on or set the Quoted-Printable decoding depth used to decode the Quoted-
Printable(QP) encoded MIME attachments. The value ranges from -1 to 65535. A value of -1 turns off the
QP decoding of MIME attachments. The value of 0 sets the decoding of QP encoded MIME attachments
to unlimited. A value other than 0 or -1 restricts the decoding of QP MIME attachments, and applies per
attachment. A IMAP preprocessor alert with sid 5 is generated (if enabled) when the decoding fails.
[Word Count: 89]

Multiple MIME attachments/data in one packet are pipelined. When stateful inspection is turned on the QP
encoded MIME attachments/data across multiple packets are decoded too.
[Word Count: 25]

The decoded data is available for detection using the rule option file data. See 3.5.28 rule option for more
details.
[Word Count: 20]

In case of multiple conﬁgs, the value speciﬁed in the non-default conﬁg cannot exceed the value speciﬁed in the
default conﬁg.
[Word Count: 21]

This conﬁg option is used to turn off/on or set the non-encoded MIME extraction depth used to extract the non-
encoded MIME attachments. The value ranges from -1 to 65535. A value of -1 turns off the extraction of these
MIME attachments. The value of 0 sets the extraction of these MIME attachments to unlimited. A value other
than 0 or -1 restricts the extraction of these MIME attachments, and applies per attachment.
[Word Count: 73]

Multiple MIME attachments/data in one packet are pipelined. When stateful inspection is turned on the non-
encoded MIME attachments/data across multiple packets are extracted too.
[Word Count: 25]

The extracted data is available for detection using the rule option file data. See 3.5.28 rule option for more
details.
[Word Count: 20]

In case of multiple conﬁgs, the value speciﬁed in the non-default conﬁg cannot exceed the value speciﬁed in the
default conﬁg.
[Word Count: 21]

This conﬁg option is used to turn off/on or set the Unix-to-Unix decoding depth used to decode the Unix-to-
Unix(UU) encoded attachments. The value ranges from -1 to 65535. A value of -1 turns off the UU decoding
of IMAP attachments. The value of 0 sets the decoding of UU encoded IMAP attachments to unlimited. A
value other than 0 or -1 restricts the decoding of UU IMAP attachments, and applies per attachment. A IMAP
preprocessor alert with sid 7 is generated (if enabled) when the decoding fails.
[Word Count: 88]

Multiple UU attachments/data in one packet are pipelined. When stateful inspection is turned on the UU encoded
IMAP attachments/data across multiple packets are decoded too.
[Word Count: 25]

The decoded data is available for detection using the rule option file data. See 3.5.28 rule option for more
details.
[Word Count: 20]

In case of multiple conﬁgs, the value speciﬁed in the non-default conﬁg cannot exceed the value speciﬁed in the
default conﬁg.
[Word Count: 21]

This option determines (in bytes) the maximum amount of memory the IMAP preprocessor will use for decoding
base64 encoded/quoted-printable/non-encoded MIME attachments/data or Unix-to-Unix encoded attachments.
This value can be set from 3276 bytes to 100MB.
[Word Count: 35]

This option along with the maximum of the decoding depths will determine the IMAP sessions that will be
decoded at any given instant. The default value for this option is 838860.
[Word Count: 31]

Note: It is suggested to set this value such that the max imap session calculated as follows is at least 1.
[Word Count: 21]

max imap session = memcap /(2 * max of (b64 decode depth, uu decode depth, qp decode depth or bitenc decode depth))
[Word Count: 22]

For example, if b64 decode depth is 0 (indicates unlimited decoding) and qp decode depth is 100, then
[Word Count: 18]

max imap session = memcap/2*65535 (max value for b64 decode depth)
[Word Count: 11]

In case of multiple conﬁgs, the memcap of the non-default conﬁgs will be overwritten by the default conﬁg’s
value. Hence user needs to deﬁne it in the default conﬁg with the new keyword disabled (used to disable IMAP
preprocessor in a conﬁg).
[Word Count: 42]

When the memcap for decoding (memcap) is exceeded the IMAP preprocessor alert with sid 3 is generated (when
enabled).
[Word Count: 19]

preprocessor imap: \
ports { 110 } \
memcap 1310700 \
qp_decode_depth -1 \
b64_decode_depth 0 \
bitenc_decode_depth 100
[Word Count: 19]

preprocessor imap: \
memcap 1310700 \
qp_decode_depth 0 \
disabled
[Word Count: 10]

preprocessor imap: \
ports { 110 } \
b64_decode_depth 1460 \
qp_decode_depth 1460 \
bitenc_decode_depth 1460 \
uu_decode_depth 1460
[Word Count: 19]

FTP/Telnet is an improvement to the Telnet decoder and provides stateful inspection capability for both FTP and
Telnet data streams. FTP/Telnet will decode the stream, identifying FTP commands and responses and Telnet escape
sequences and normalize the ﬁelds. FTP/Telnet works on both client requests and server responses.
[Word Count: 47]

FTP/Telnet has the capability to handle stateless processing, meaning it only looks for information on a packet-by-
packet basis.
[Word Count: 19]

The default is to run FTP/Telnet in stateful inspection mode, meaning it looks for information and handles reassembled
data correctly.
[Word Count: 20]

The global conﬁguration deals with conﬁguration options that determine the global functioning of FTP/Telnet. The
following example gives the generic global conﬁguration format:
[Word Count: 23]

preprocessor ftp_telnet: \
global \
inspection_type stateful \
encrypted_traffic yes \
check_encrypted
[Word Count: 12]

You can only have a single global conﬁguration, you’ll get an error if you try otherwise. The FTP/Telnet global
conﬁguration must appear before the other three areas of conﬁguration.
[Word Count: 29]

This indicates whether to operate in stateful or stateless mode.
[Word Count: 10]

This option enables detection and alerting on encrypted Telnet and FTP command channels.
△
! NOTE
When inspection type is in stateless mode, checks for encrypted trafﬁc will occur on every packet, whereas
in stateful mode, a particular session will be noted as encrypted and not inspected any further.
[Word Count: 49]

Instructs the preprocessor to continue to check an encrypted session for a subsequent command to cease encryp-
tion.
[Word Count: 18]

preprocessor ftp_telnet: \
global inspection_type stateful encrypted_traffic no
[Word Count: 8]

The telnet conﬁguration deals with conﬁguration options that determine the functioning of the Telnet portion of the
preprocessor. The following example gives the generic telnet conﬁguration format:
[Word Count: 27]

preprocessor ftp_telnet_protocol: \
telnet \
ports { 23 } \
normalize \
ayt_attack_thresh 6 \
detect_anomalies
[Word Count: 16]

There should only be a single telnet conﬁguration, and subsequent instances will override previously set values.
[Word Count: 16]

This is how the user conﬁgures which ports to decode as telnet trafﬁc. SSH tunnels cannot be decoded, so adding
port 22 will only yield false positives. Typically port 23 will be included.
[Word Count: 33]

This option tells the preprocessor to normalize the telnet trafﬁc by eliminating the telnet escape sequences. It
functions similarly to its predecessor, the telnet decode preprocessor. Rules written with ’raw’ content options
will ignore the normalized buffer that is created when this option is in use.
[Word Count: 46]

This option causes the preprocessor to alert when the number of consecutive telnet Are You There (AYT)
commands reaches the number speciﬁed. It is only applicable when the mode is stateful.
[Word Count: 31]

In order to support certain options, Telnet supports subnegotiation. Per the Telnet RFC, subnegotiation begins
with SB (subnegotiation begin) and must end with an SE (subnegotiation end). However, certain implementa-
tions of Telnet servers will ignore the SB without a corresponding SE. This is anomalous behavior which could
be an evasion case. Being that FTP uses the Telnet protocol on the control connection, it is also susceptible to
this behavior. The detect anomalies option enables alerting on Telnet SB without the corresponding SE.
[Word Count: 83]

preprocessor ftp_telnet_protocol: \
telnet ports { 23 } normalize ayt_attack_thresh 6
[Word Count: 11]

There are two types of FTP server conﬁgurations: default and by IP address.
[Word Count: 13]

Default
This conﬁguration supplies the default server conﬁguration for any FTP server that is not individually con-
ﬁgured. Most of your FTP servers will most likely end up using the default conﬁguration.
[Word Count: 32]

preprocessor ftp_telnet_protocol: \
ftp server default ports { 21 }
[Word Count: 10]

Refer to 89 for the list of options set in default ftp server conﬁguration.
[Word Count: 14]

Conﬁguration by IP Address
This format is very similar to “default”, the only difference being that speciﬁc IPs
can be conﬁgured.
[Word Count: 21]

Example IP speciﬁc FTP Server Conﬁguration
[Word Count: 6]

preprocessor _telnet_protocol: \
ftp server 10.1.1.1 ports { 21 } ftp_cmds { XPWD XCWD }
[Word Count: 15]

This is how the user conﬁgures which ports to decode as FTP command channel trafﬁc. Typically port 21 will
be included.
[Word Count: 21]

During initialization, this option causes the preprocessor to print the conﬁguration for each of the FTP commands
for this server.
[Word Count: 20]

The preprocessor is conﬁgured to alert when it sees an FTP command that is not allowed by the server.
[Word Count: 19]

This option speciﬁes a list of additional commands allowed by this server, outside of the default FTP command
set as speciﬁed in RFC 959. This may be used to allow the use of the ’X’ commands identiﬁed in RFC 775, as
well as any additional commands as needed.
[Word Count: 48]

This speciﬁes the default maximum allowed parameter length for an FTP command. It can be used as a basic
buffer overﬂow detection.
[Word Count: 22]

5.
alt max param len <number> {cmd[cmd]}
[Word Count: 7]

This speciﬁes the maximum allowed parameter length for the speciﬁed FTP command(s). It can be used as a
more speciﬁc buffer overﬂow detection. For example the USER command – usernames may be no longer than
16 bytes, so the appropriate conﬁguration would be:
[Word Count: 43]

This option causes a check for string format attacks in the speciﬁed commands.
[Word Count: 13]

This option speciﬁes the valid format for parameters of a given command.
[Word Count: 12]

fmt must be enclosed in <>’s and may contain the following:
[Word Count: 11]

Examples of the cmd validity option are shown below. These examples are the default checks, per RFC 959 and
others performed by the preprocessor.
[Word Count: 24]

cmd_validity MODE <char SBC>
cmd_validity STRU <char FRP>
cmd_validity ALLO < int [ char R int ] >
cmd_validity TYPE < { char AE [ char NTC ] | char I | char L [ number ] } >
cmd_validity PORT < host_port >
[Word Count: 44]

A cmd validity line can be used to override these defaults and/or add a check for other commands.
[Word Count: 18]

# This allows additional modes, including mode Z which allows for
# zip-style compression.
cmd_validity MODE < char ASBCZ >
[Word Count: 20]

# Allow for a date in the MDTM command.
cmd_validity MDTM < [ date nnnnnnnnnnnnnn[.n[n[n]]] ] string >
[Word Count: 18]

MDTM is an off case that is worth discussing. While not part of an established standard, certain FTP servers ac-
cept MDTM commands that set the modiﬁcation time on a ﬁle. The most common among servers that do, accept
a format using YYYYMMDDHHmmss[.uuu]. Some others accept a format using YYYYMMDDHHmmss[+—-
]TZ format. The example above is for the ﬁrst case (time format as speciﬁed in http://www.ietf.org/internet-
drafts/draft-ietf-ftpext-mlst-16.txt)
[Word Count: 67]

To check validity for a server that uses the TZ format, use the following:
[Word Count: 14]

cmd_validity MDTM < [ date nnnnnnnnnnnnnn[{+|-}n[n]] ] string >
[Word Count: 9]

This option turns on detection and alerting when telnet escape sequences are seen on the FTP command channel.
Injection of telnet escape sequences could be used as an evasion attempt on an FTP command channel.
[Word Count: 35]

This option allows Snort to ignore telnet escape sequences for erase character (TNC EAC) and erase line (TNC
EAL) when normalizing FTP command channel. Some FTP servers do not process those telnet escape se-
quences.
[Word Count: 35]

This option causes the rest of snort (rules, other preprocessors) to ignore FTP data channel connections. Using
this option means that NO INSPECTION other than TCP state will be performed on FTP data transfers. It
can be used to improve performance, especially with large ﬁle transfers from a trusted source. If your rule set
includes virus-type rules, it is recommended that this option not be used.
[Word Count: 66]

Use of the ”data chan” option is deprecated in favor of the ”ignore data chan” option. ”data chan” will be
removed in a future release.
[Word Count: 25]

This option causes the rest of Snort (rules, other preprocessors) to ignore FTP data channel connections. Setting
this option to ”yes” means that NO INSPECTION other than TCP state will be performed on FTP data transfers.
It can be used to improve performance, especially with large ﬁle transfers from a trusted source. If your rule set
includes virus-type rules, it is recommended that this option not be used.
[Word Count: 68]

The base FTP server conﬁguration is as follows. Options speciﬁed in the conﬁguration ﬁle will modify this set of
options. FTP commands are added to the set of allowed commands. The other options will override those in the base
conﬁguration.
[Word Count: 40]

Similar to the FTP Server conﬁguration, the FTP client conﬁgurations has two types: default, and by IP address.
[Word Count: 18]

Default
This conﬁguration supplies the default client conﬁguration for any FTP client that is not individually con-
ﬁgured. Most of your FTP clients will most likely end up using the default conﬁguration.
[Word Count: 32]

preprocessor ftp_telnet_protocol: \
ftp client default bounce no max_resp_len 200
[Word Count: 10]

Conﬁguration by IP Address
This format is very similar to “default”, the only difference being that speciﬁc IPs
can be conﬁgured.
[Word Count: 21]

Example IP speciﬁc FTP Client Conﬁguration
[Word Count: 6]

preprocessor ftp_telnet_protocol: \
ftp client 10.1.1.1 bounce yes max_resp_len 500
[Word Count: 10]

This speciﬁes the maximum allowed response length to an FTP command accepted by the client. It can be used
as a basic buffer overﬂow detection.
[Word Count: 25]

This option turns on detection and alerting of FTP bounce attacks. An FTP bounce attack occurs when the FTP
PORT command is issued and the speciﬁed host does not match the host of the client.
[Word Count: 35]

3.
bounce to < CIDR,[port|portlow,porthi] >
[Word Count: 6]

When the bounce option is turned on, this allows the PORT command to use the IP address (in CIDR format) and
port (or inclusive port range) without generating an alert. It can be used to deal with proxied FTP connections
where the FTP data channel is different from the client.
[Word Count: 50]

• Allow bounces to 192.162.1.1 port 20020 – i.e., the use of PORT 192,168,1,1,78,52.
[Word Count: 14]

• Allow bounces to 192.162.1.1 ports 20020 through 20040 – i.e., the use of PORT 192,168,1,1,78,xx,
where xx is 52 through 72 inclusive.
[Word Count: 23]

• Allow bounces to 192.162.1.1 port 20020 and 192.168.1.2 port 20030.
[Word Count: 11]

bounce_to { 192.168.1.1,20020 192.168.1.2,20030 }
[Word Count: 5]

• Allows bounces to IPv6 address fe8::5 port 59340.
[Word Count: 9]

This option turns on detection and alerting when telnet escape sequences are seen on the FTP command channel.
Injection of telnet escape sequences could be used as an evasion attempt on an FTP command channel.
[Word Count: 35]

This option allows Snort to ignore telnet escape sequences for erase character (TNC EAC) and erase line (TNC
EAL) when normalizing FTP command channel. Some FTP clients do not process those telnet escape sequences.
[Word Count: 34]

Examples/Default Conﬁguration from snort.conf
[Word Count: 4]

preprocessor ftp_telnet: \
global \
encrypted_traffic yes \
inspection_type stateful
[Word Count: 10]

preprocessor ftp_telnet_protocol:\
telnet \
normalize \
ayt_attack_thresh 200
[Word Count: 8]

# This is consistent with the FTP rules as of 18 Sept 2004.
# Set CWD to allow parameter length of 200
# MODE has an additional mode of Z (compressed)
# Check for string formats in USER & PASS commands
# Check MDTM commands that set modification time on the file.
[Word Count: 52]

preprocessor ftp_telnet_protocol: \
ftp server default \
def_max_param_len 100 \
alt_max_param_len 200 { CWD } \
cmd_validity MODE < char ASBCZ > \
cmd_validity MDTM < [ date nnnnnnnnnnnnnn[.n[n[n]]] ] string > \
chk_str_fmt { USER PASS RNFR RNTO SITE MKD } \
telnet_cmds yes \
ignore_data_chan yes
[Word Count: 48]

ftp client default \
max_resp_len 256 \
bounce yes \
telnet_cmds yes
[Word Count: 12]

The SSH preprocessor detects the following exploits: Challenge-Response Buffer Overﬂow, CRC 32, Secure CRT,
and the Protocol Mismatch exploit.
[Word Count: 19]

Both Challenge-Response Overﬂow and CRC 32 attacks occur after the key exchange, and are therefore encrypted.
Both attacks involve sending a large payload (20kb+) to the server immediately after the authentication challenge. To
detect the attacks, the SSH preprocessor counts the number of bytes transmitted to the server. If those bytes exceed a
predeﬁned limit within a predeﬁned number of packets, an alert is generated. Since the Challenge-Response Overﬂow
only effects SSHv2 and CRC 32 only effects SSHv1, the SSH version string exchange is used to distinguish the attacks.
[Word Count: 89]

The Secure CRT and protocol mismatch exploits are observable before the key exchange.
[Word Count: 13]

By default, all alerts are disabled and the preprocessor checks trafﬁc on port 22.
[Word Count: 14]

The available conﬁguration options are described below.
[Word Count: 7]

1.
server ports {<port> [<port>< ... >]}
[Word Count: 7]

This option speciﬁes which ports the SSH preprocessor should inspect trafﬁc to.
[Word Count: 12]

The number of stream reassembled encrypted packets that Snort will inspect before ignoring a given SSH ses-
sion. The SSH vulnerabilities that Snort can detect all happen at the very beginning of an SSH session. Once
max encrypted packets packets have been seen, Snort ignores the session to increase performance. The default
is set to 25. This value can be set from 0 to 65535.
[Word Count: 65]

The number of unanswered bytes allowed to be transferred before alerting on Challenge-Response Overﬂow or
CRC 32. This number must be hit before max encrypted packets packets are sent, or else Snort will ignore the
trafﬁc. The default is set to 19600. This value can be set from 0 to 65535.
[Word Count: 51]

The maximum number of bytes allowed in the SSH server version string before alerting on the Secure CRT
server version string overﬂow. The default is set to 80. This value can be set from 0 to 255.
[Word Count: 37]

Enables checking for the Challenge-Response Overﬂow exploit.
[Word Count: 7]

Enables checking for the CRC 32 exploit.
[Word Count: 7]

Enables checking for the Secure CRT exploit.
[Word Count: 7]

Enables checking for the Protocol Mismatch exploit.
[Word Count: 7]

Enable alerts for trafﬁc ﬂowing the wrong direction. For instance, if the presumed server generates client trafﬁc,
or if a client generates server trafﬁc.
[Word Count: 24]

Enables alerts for invalid payload sizes.
[Word Count: 6]

Enable alerts for non-SSH trafﬁc on SSH ports.
[Word Count: 8]

The SSH preprocessor should work by default. After max encrypted packets is reached, the preprocessor will stop
processing trafﬁc for a given session. If Challenge-Response Overﬂow or CRC 32 false positive, try increasing the
number of required client bytes with max client bytes.
[Word Count: 43]

Looks for attacks on SSH server port 22. Alerts at 19600 unacknowledged bytes within 20 encrypted packets for the
Challenge-Response Overﬂow/CRC32 exploits.
[Word Count: 22]

preprocessor ssh: \
server_ports { 22 } \
max_client_bytes 19600 \
max_encrypted_packets 20 \
enable_respoverflow \
enable_ssh1crc32
[Word Count: 17]

The DNS preprocessor decodes DNS Responses and can detect the following exploits: DNS Client RData Overﬂow,
Obsolete Record Types, and Experimental Record Types.
[Word Count: 23]

DNS looks at DNS Response trafﬁc over UDP and TCP and it requires Stream preprocessor to be enabled for TCP
decoding.
[Word Count: 21]

By default, all alerts are disabled and the preprocessor checks trafﬁc on port 53.
[Word Count: 14]

The available conﬁguration options are described below.
[Word Count: 7]

This option speciﬁes the source ports that the DNS preprocessor should inspect trafﬁc.
[Word Count: 13]

Alert on Obsolete (per RFC 1035) Record Types
[Word Count: 8]

Alert on Experimental (per RFC 1035) Record Types
[Word Count: 8]

The DNS preprocessor does nothing if none of the 3 vulnerabilities it checks for are enabled. It will not operate on
TCP sessions picked up midstream, and it will cease operation on a session if it loses state because of missing data
(dropped packets).
[Word Count: 44]

Examples/Default Conﬁguration from snort.conf
[Word Count: 4]

Looks for trafﬁc on DNS server port 53. Check for the DNS Client RData overﬂow vulnerability. Do not alert on
obsolete or experimental RData record types.
[Word Count: 26]

preprocessor dns: \
ports { 53 } \
enable_rdata_overflow
[Word Count: 9]

Encrypted trafﬁc should be ignored by Snort for both performance reasons and to reduce false positives. The SSL
Dynamic Preprocessor (SSLPP) decodes SSL and TLS trafﬁc and optionally determines if and when Snort should
stop inspection of it.
[Word Count: 38]

Typically, SSL is used over port 443 as HTTPS. By enabling the SSLPP to inspect port 443 and enabling the noin-
spect encrypted option, only the SSL handshake of each connection will be inspected. Once the trafﬁc is determined
to be encrypted, no further inspection of the data on the connection is made.
[Word Count: 53]

By default, SSLPP looks for a handshake followed by encrypted trafﬁc traveling to both sides. If one side responds
with an indication that something has failed, such as the handshake, the session is not marked as encrypted. Verifying
that faultless encrypted trafﬁc is sent from both endpoints ensures two things: the last client-side handshake packet
was not crafted to evade Snort, and that the trafﬁc is legitimately encrypted.
[Word Count: 68]

In some cases, especially when packets may be missed, the only observed response from one endpoint will be TCP
ACKs. Therefore, if a user knows that server-side encrypted data can be trusted to mark the session as encrypted, the
user should use the ’trustservers’ option, documented below.
[Word Count: 47]

This option speciﬁes which ports SSLPP will inspect trafﬁc on.
[Word Count: 10]

By default, SSLPP watches the following ports:
[Word Count: 7]

Disable inspection on trafﬁc that is encrypted. Default is off.
[Word Count: 10]

Maximum length of heartbeat record allowed. This conﬁg option is used to detect the heartbleed attacks. The
allowed range is 0 to 65535. Setting the value to 0 turns off the heartbeat length checks. For heartbeat requests,
if the payload size of the request record is greater than the max heartbeat length an alert with sid 3 and gid 137
is generated. For heartbeat responses, if the record size itself is greater than the max heartbeat length an alert
with sid 4 and gid 137 is generated. Default is off.
[Word Count: 90]

Disables the requirement that application (encrypted) data must be observed on both sides of the session before
a session is marked encrypted. Use this option for slightly better performance if you trust that your servers are
not compromised. This requires the noinspect encrypted option to be useful. Default is off.
[Word Count: 50]

Examples/Default Conﬁguration from snort.conf
[Word Count: 4]

Enables the SSL preprocessor and tells it to disable inspection on encrypted trafﬁc.
[Word Count: 13]

The following rule options are supported by enabling the ssl preprocessor:
[Word Count: 11]

The ssl version rule option tracks the version negotiated between the endpoints of the SSL encryption. The
list of version identiﬁers are below, and more than one identiﬁer can be speciﬁed, via a comma separated list.
Lists of identiﬁers are OR’ed together.
[Word Count: 42]

The option will match if any one of the OR’ed versions are used in the SSL connection. To check for two or
more SSL versions in use simultaneously, multiple ssl version rule options should be used.
Syntax
[Word Count: 37]

version-list = version | version , version-list
version
= ["!"] "sslv2" | "sslv3" | "tls1.0" | "tls1.1" | "tls1.2"
[Word Count: 19]

ssl_version:sslv3;
ssl_version:tls1.0,tls1.1,tls1.2;
ssl_version:!sslv2;
[Word Count: 3]

The ssl state rule option tracks the state of the SSL encryption during the process of hello and key exchange.
The list of states are below. More than one state can be speciﬁed, via a comma separated list, and are OR’ed
together.
[Word Count: 42]

The option will match if the connection is currently in any one of the OR’ed states. To ensure the connection
has reached each of a set of states, multiple rules using the ssl state rule option should be used.
Syntax
[Word Count: 40]

state-list = state | state , state-list
state
= ["!"] "client_hello" | "server_hello" | "client_keyx" | "server_keyx" | "unknown"
[Word Count: 19]

ssl_state:client_hello;
ssl_state:client_keyx,server_keyx;
ssl_state:!server_hello;
[Word Count: 3]

The ARP spoof preprocessor decodes ARP packets and detects ARP attacks, unicast ARP requests, and inconsistent
Ethernet to IP mapping.
[Word Count: 20]

When no arguments are speciﬁed to arpspoof, the preprocessor inspects Ethernet addresses and the addresses in the
ARP packets. When inconsistency occurs, an alert with GID 112 and SID 2 or 3 is generated.
[Word Count: 34]

When ”-unicast” is speciﬁed as the argument of arpspoof, the preprocessor checks for unicast ARP requests. An
alert with GID 112 and SID 1 will be generated if a unicast ARP request is detected.
[Word Count: 34]

Specify a pair of IP and hardware address as the argument to arpspoof detect host. The host with the IP address
should be on the same layer 2 segment as Snort is. Specify one host IP MAC combo per line. The preprocessor will
use this list when detecting ARP cache overwrite attacks. Alert SID 4 is used in this case.
[Word Count: 60]

preprocessor arpspoof[: -unicast]
preprocessor arpspoof_detect_host: ip mac
[Word Count: 7]

Option
Description
ip
IP address.
mac
The Ethernet address corresponding to the preceding IP.
[Word Count: 14]

The ﬁrst example conﬁguration does neither unicast detection nor ARP mapping monitoring. The preprocessor merely
looks for Ethernet address inconsistencies.
[Word Count: 20]

The next example conﬁguration does not do unicast detection but monitors ARP mapping for hosts 192.168.40.1 and
192.168.40.2.
[Word Count: 18]

preprocessor arpspoof
preprocessor arpspoof_detect_host: 192.168.40.1 f0:0f:00:f0:0f:00
preprocessor arpspoof_detect_host: 192.168.40.2 f0:0f:00:f0:0f:01
[Word Count: 10]

The third example conﬁguration has unicast detection enabled.
[Word Count: 8]

preprocessor arpspoof: -unicast
preprocessor arpspoof_detect_host: 192.168.40.1 f0:0f:00:f0:0f:00
preprocessor arpspoof_detect_host: 192.168.40.2 f0:0f:00:f0:0f:01
[Word Count: 11]

The main purpose of the preprocessor is to perform SMB desegmentation and DCE/RPC defragmentation to avoid
rule evasion using these techniques. SMB desegmentation is performed for the following commands that can be
used to transport DCE/RPC requests and responses: Write, Write Block Raw, Write and Close, Write AndX,
Transaction, Transaction Secondary, Read, Read Block Raw and Read AndX. The following transports are sup-
ported for DCE/RPC: SMB, TCP, UDP and RPC over HTTP v.1 proxy and server. New rule options have been im-
plemented to improve performance, reduce false positives and reduce the count and complexity of DCE/RPC based
rules.
[Word Count: 100]

For proper functioning of the preprocessor:
[Word Count: 6]

• Stream session tracking must be enabled, i.e. stream5. The preprocessor requires a session tracker to keep its
data.
[Word Count: 19]

• Stream reassembly must be performed for TCP sessions. If it is decided that a session is SMB or DCE/RPC, ei-
ther through conﬁgured ports, servers or autodetecting, the dcerpc2 preprocessor will enable stream reassembly
for that session if necessary.
[Word Count: 40]

• IP defragmentation should be enabled, i.e. the frag3 preprocessor should be enabled and conﬁgured.
[Word Count: 15]

There are enough important differences between Windows and Samba versions that a target based approach has been
implemented. Some important differences:
[Word Count: 21]

A combination of valid login handle or UID, share handle or TID and ﬁle/named pipe handle or FID must be
used to write data to a named pipe. The binding between these is dependent on OS/software version.
[Word Count: 37]

Any valid UID and TID, along with a valid FID can be used to make a request, however, if the TID
used in creating the FID is deleted (via a tree disconnect), the FID that was created using this TID
becomes invalid, i.e. no more requests can be written to that named pipe instance.
[Word Count: 54]

These Windows versions require strict binding between the UID, TID and FID used to make a request
to a named pipe instance. Both the UID and TID used to open the named pipe instance must be
used when writing data to the same named pipe instance. Therefore, deleting either the UID or TID
invalidates the FID.
[Word Count: 56]

Windows 2000 is interesting in that the ﬁrst request to a named pipe must use the same binding as that
of the other Windows versions. However, requests after that follow the same binding as Samba 3.0.22
and earlier, i.e. no binding. It also follows Samba greater than 3.0.22 in that deleting the UID or TID
used to create the named pipe instance also invalidates it.
[Word Count: 65]

Samba in particular does not recognize certain commands under an IPC$ tree.
[Word Count: 12]

Accepts all of the above commands under an IPC$ tree.
[Word Count: 10]

Windows is very strict in what command combinations it allows to be chained. Samba, on the other hand, is
very lax and allows some nonsensical combinations, e.g. multiple logins and tree connects (only one place to
return handles for these), login/logoff and tree connect/tree disconnect. Ultimately, we don’t want to keep track
of data that the server won’t accept. An evasion possibility would be accepting a fragment in a request that the
server won’t accept that gets sandwiched between an exploit.
[Word Count: 81]

Uses a combination of PID and MID to deﬁne a ”thread”.
[Word Count: 11]

A Bind request is the ﬁrst request that must be made in a connection-oriented DCE/RPC session in order to
specify the interface/interfaces that one wants to communicate with.
[Word Count: 28]

For all of the Windows versions, only one Bind can ever be made on a session whether or not it
succeeds or fails. Any binding after that must use the Alter Context request. If another Bind is
made, all previous interface bindings are invalidated.
[Word Count: 44]

Any amount of Bind requests can be made.
[Word Count: 8]

Another Bind request can be made if the ﬁrst failed and no interfaces were successfully bound to. If
a Bind after a successful Bind is made, all previous interface bindings are invalidated.
[Word Count: 32]

DCE/RPC Fragmented requests - Context ID
[Word Count: 6]

Each fragment in a fragmented request carries the context id of the bound interface it wants to make the request
to.
[Word Count: 21]

The context id that is ultimately used for the request is contained in the ﬁrst fragment. The context id
ﬁeld in any other fragment can contain any value.
[Word Count: 28]

The context id that is ultimately used for the request is contained in the last fragment. The context id
ﬁeld in any other fragment can contain any value.
[Word Count: 28]

DCE/RPC Fragmented requests - Operation number
[Word Count: 6]

Each fragment in a fragmented request carries an operation number (opnum) which is more or less a handle to
a function offered by the interface.
[Word Count: 25]

The opnum that is ultimately used for the request is contained in the last fragment. The opnum ﬁeld
in any other fragment can contain any value.
[Word Count: 26]

The opnum that is ultimately used for the request is contained in the ﬁrst fragment. The opnum ﬁeld
in any other fragment can contain any value.
[Word Count: 26]

The byte order of the stub data is determined differently for Windows and Samba.
[Word Count: 14]

The byte order of the stub data is that which was used in the Bind request.
[Word Count: 16]

The byte order of the stub data is that which is used in the request carrying the stub data.
[Word Count: 19]

The dcerpc2 preprocessor has a global conﬁguration and one or more server conﬁgurations. The global preprocessor
conﬁguration name is dcerpc2 and the server preprocessor conﬁguration name is dcerpc2 server.
[Word Count: 29]

The global dcerpc2 conﬁguration is required. Only one global dcerpc2 conﬁguration can be speciﬁed.
[Word Count: 14]

memcap
<memcap>
NO
memcap 102400
disable defrag
NONE
NO
OFF
max frag len
<max-frag-len>
NO
OFF
events
<events>
NO
OFF
reassemble threshold
<re-thresh>
NO
OFF
disabled
NONE
NO
OFF
smb fingerprint policy
<fp-policy>
NO
OFF
smb legacy mode
NONE
NO
OFF
[Word Count: 41]

memcap
= 1024-4194303 (kilobytes)
max-frag-len
= 1514-65535
events
= pseudo-event | event | ’[’ event-list ’]’
pseudo-event
= "none" | "all"
event-list
= event | event ’,’ event-list
event
= "memcap" | "smb" | "co" | "cl"
re-thresh
= 0-65535
fp-policy
= "server" | "client" | "both"
[Word Count: 47]

Speciﬁes the maximum amount of run-time memory that can be allocated. Run-time memory includes any
memory allocated after conﬁguration. Default is 100 MB.
[Word Count: 23]

Disables the preprocessor. By default this value is turned off. When the preprocessor is disabled only the
memcap option is applied when speciﬁed with the conﬁguration.
[Word Count: 26]

Tells the preprocessor not to do DCE/RPC defragmentation. Default is to do defragmentation.
[Word Count: 13]

Speciﬁes the maximum fragment size that will be added to the defragmentation module. If a fragment is
greater than this size, it is truncated before being added to the defragmentation module. The allowed range
for this option is 1514 - 65535.
[Word Count: 41]

Speciﬁes the classes of events to enable. (See Events section for an enumeration and explanation of events.)
[Word Count: 17]

memcap
Only one event. If the memcap is reached or exceeded, alert.
[Word Count: 12]

smb
Alert on events related to SMB processing.
[Word Count: 8]

co
Stands for connection-orientedDCE/RPC. Alert on events related to connection-orientedDCE/RPC
processing.
[Word Count: 11]

cl
Stands for connectionless DCE/RPC. Alert on events related to connectionless DCE/RPC pro-
cessing.
[Word Count: 14]

Speciﬁes a minimum number of bytes in the DCE/RPC desegmentation and defragmentation buffers before
creating a reassembly packet to send to the detection engine. This option is useful in inline mode so as to
potentially catch an exploit early before full defragmentation is done. A value of 0 supplied as an argument
to this option will, in effect, disable this option. Default is disabled.
[Word Count: 64]

By default, SMBv1, SMBv2, and SMBv3 ﬁles are inspected. If legacy mode is conﬁgured, only SMBv1
ﬁle inspection is enabled.
[Word Count: 20]

In the initial phase of an SMB session, the client needs to authenticate with a SessionSetupAndX. Both the
request and response to this command contain OS and version information that can allow the preprocessor
to dynamically set the policy for a session which allows for better protection against Windows and Samba
speciﬁc evasions.
[Word Count: 53]

memcap 30000
max_frag_len 16840
events none
events all
events smb
events co
events [co]
events [smb, co]
events [memcap, smb, co, cl]
reassemble_threshold 500
smb_fingerprint_policy both
smb_fingerprint_policy client
smb_legacy_mode
[Word Count: 29]

preprocessor dcerpc2
preprocessor dcerpc2: memcap 500000
preprocessor dcerpc2: max_frag_len 16840, memcap 300000, events smb
preprocessor dcerpc2: memcap 50000, events [memcap, smb, co, cl], max_frag_len 14440
preprocessor dcerpc2: disable_defrag, events [memcap, smb]
preprocessor dcerpc2: reassemble_threshold 500
preprocessor dcerpc2: memcap 50000, events [memcap, smb, co, cl], max_frag_len 14440, smb_fingerprint_policy both
[Word Count: 48]

Option
Argument
Required
Default
default
NONE
YES
NONE
net
<net>
YES
NONE
policy
<policy>
NO
policy WinXP
detect
<detect>
NO
detect [smb [139,445], tcp 135,
udp 135, rpc-over-http-server
593]
autodetect
<detect>
NO
autodetect [tcp 1025:, udp 1025:,
rpc-over-http-server 1025:]
no autodetect http proxy ports
NONE
NO
DISABLED (The preprocessor autodetects
on all proxy ports by default)
smb invalid shares
<shares>
NO
NONE
smb max chain
<max-chain>
NO
smb max chain 3
smb file inspection
<file-inspect>
NO
smb file inspection off
[Word Count: 80]

Because the Snort main parser treats ’$’ as the start of a variable and tries to expand it, shares with ’$’ must be
enclosed quotes.
[Word Count: 25]

Speciﬁes that this conﬁguration is for the default server conﬁguration.
[Word Count: 10]

Speciﬁes that this conﬁguration is an IP or net speciﬁc conﬁguration. The conﬁguration will only apply to
the IP addresses and nets supplied as an argument.
[Word Count: 26]

Speciﬁes the target-based policy to use when processing. Default is ”WinXP”.
[Word Count: 11]

Speciﬁes the DCE/RPC transport and server ports that should be detected on for the transport. Defaults
are ports 139 and 445 for SMB, 135 for TCP and UDP, 593 for RPC over HTTP server and 80 for RPC
over HTTP proxy.
[Word Count: 41]

Speciﬁes the DCE/RPC transport and server ports that the preprocessor should attempt to autodetect on
for the transport. The autodetect ports are only queried if no detect transport/ports match the packet. The
order in which the preprocessor will attempt to autodetect will be - TCP/UDP, RPC over HTTP server,
RPC over HTTP proxy and lastly SMB. Note that most dynamic DCE/RPC ports are above 1024 and ride
directly over TCP or UDP. It would be very uncommon to see SMB on anything other than ports 139 and
445. Defaults are 1025-65535 for TCP, UDP and RPC over HTTP server.
[Word Count: 99]

By default, the preprocessor will always attempt to autodetect for ports speciﬁed in the detect conﬁguration
for rpc-over-http-proxy. This is because the proxy is likely a web server and the preprocessor should not
look at all web trafﬁc. This option is useful if the RPC over HTTP proxy conﬁgured with the detect option
is only used to proxy DCE/RPC trafﬁc. Default is to autodetect on RPC over HTTP proxy detect ports.
[Word Count: 71]

Speciﬁes SMB shares that the preprocessor should alert on if an attempt is made to connect to them via a
Tree Connect or Tree Connect AndX. Default is empty.
[Word Count: 29]

Speciﬁes the maximum amount of AndX command chaining that is allowed before an alert is generated.
Default maximum is 3 chained commands. A value of 0 disables this option. This value can be set from 0
to 255.
[Word Count: 38]

net 192.168.0.10
net 192.168.0.0/24
net [192.168.0.0/24]
net 192.168.0.0/255.255.255.0
net feab:45b3:ab92:8ac4:d322:007f:e5aa:7845
net feab:45b3:ab92:8ac4:d322:007f:e5aa:7845/128
net feab:45b3::/32
net [192.168.0.10, feab:45b3::/32]
net [192.168.0.0/24, feab:45b3:ab92:8ac4:d322:007f:e5aa:7845]
policy Win2000
policy Samba-3.0.22
detect none
detect smb
detect [smb]
detect smb 445
[Word Count: 33]

detect [smb 445]
detect smb [139,445]
detect [smb [139,445]]
detect [smb, tcp]
detect [smb 139, tcp [135,2103]]
detect [smb [139,445], tcp 135, udp 135, rpc-over-http-server [593,6002:6004]]
autodetect none
autodetect tcp
autodetect [tcp]
autodetect tcp 2025:
autodetect [tcp 2025:]
autodetect tcp [2025:3001,3003:]
autodetect [tcp [2025:3001,3003:]]
autodetect [tcp, udp]
autodetect [tcp 2025:, udp 2025:]
autodetect [tcp 2025:, udp, rpc-over-http-server [1025:6001,6005:]]
smb_invalid_shares private
smb_invalid_shares "private"
smb_invalid_shares "C$"
smb_invalid_shares [private, "C$"]
smb_invalid_shares ["private", "C$"]
smb_max_chain 1
smb_file_inspection on
smb_file_inspection off
smb_file_inspection [ on, file-depth -1 ]
smb_file_inspection [ on, file-depth 0 ]
smb_file_inspection [ on, file-depth 4294967296 ]
smb_file_inspection [ only, file-depth -1 ]
[Word Count: 100]

preprocessor dcerpc2_server: \
default, policy Win2000
[Word Count: 6]

preprocessor dcerpc2_server: \
default, policy Win2000, detect [smb, tcp], autodetect tcp 1025:, \
smb_invalid_shares ["C$", "D$", "ADMIN$"]
[Word Count: 17]

preprocessor dcerpc2_server: net 10.4.10.0/24, policy Win2000
[Word Count: 6]

preprocessor dcerpc2_server: \
net [10.4.10.0/24,feab:45b3::/126], policy WinVista, smb_max_chain 1
[Word Count: 9]

preprocessor dcerpc2_server: \
net [10.4.10.0/24,feab:45b3::/126], policy WinVista, \
detect [smb, tcp, rpc-over-http-proxy 8081],
autodetect [tcp, rpc-over-http-proxy [1025:6001,6005:]], \
smb_invalid_shares ["C$", "ADMIN$"], no_autodetect_http_proxy_ports
[Word Count: 22]

preprocessor dcerpc2_server: \
net [10.4.11.56,10.4.11.57], policy Samba, detect smb, autodetect none
[Word Count: 11]

preprocessor dcerpc2_server: default, policy WinXP, \
smb_file_inspection [ on, file-depth 0 ]
[Word Count: 12]

preprocessor dcerpc2_server: default, policy WinXP, \
detect [smb [139,445], tcp 135, udp 135, rpc-over-http-server 593], \
autodetect [tcp 1025:, udp 1025:, rpc-over-http-server 1025:], \
smb_max_chain 3, smb_file_inspection off
[Word Count: 28]

default, policy WinXP, \
detect [smb [139,445], tcp 135, udp 135, rpc-over-http-server 593], \
autodetect [tcp 1025:, udp 1025:, rpc-over-http-server 1025:], \
smb_max_chain 3, smb_file_inspection off
[Word Count: 26]

The preprocessor uses GID 133 to register events.
[Word Count: 8]

SID
Description
1
If the memory cap is reached and the preprocessor is conﬁgured to alert.
[Word Count: 16]

New rule options are supported by enabling the dcerpc2 preprocessor:
[Word Count: 10]

New modiﬁers to existing byte test and byte jump rule options:
[Word Count: 11]

dce_iface:<uuid>[, <operator><version>][, any_frag];
[Word Count: 3]

uuid
= hexlong ’-’ hexshort ’-’ hexshort ’-’ 2hexbyte ’-’ 6hexbyte
hexlong
= 4hexbyte
hexshort
= 2hexbyte
hexbyte
= 2HEXDIGIT
operator
= ’<’ | ’>’ | ’=’ | ’!’
version
= 0-65535
[Word Count: 32]

dce_iface:4b324fc8-1670-01d3-1278-5a47bf6ee188;
dce_iface:4b324fc8-1670-01d3-1278-5a47bf6ee188, <2;
dce_iface:4b324fc8-1670-01d3-1278-5a47bf6ee188, any_frag;
dce_iface:4b324fc8-1670-01d3-1278-5a47bf6ee188, =1, any_frag;
[Word Count: 8]

hexlong and hexshort will be speciﬁed and interpreted to be in big endian order (this is usually the default
way an interface UUID will be seen and represented). As an example, the following Messenger interface UUID
as taken off the wire from a little endian Bind request:
[Word Count: 47]

|f8 91 7b 5a 00 ff d0 11 a9 b2 00 c0 4f b6 e6 fc|
[Word Count: 16]

The same UUID taken off the wire from a big endian Bind request:
[Word Count: 13]

|5a 7b 91 f8 ff 00 11 d0 a9 b2 00 c0 4f b6 e6 fc|
[Word Count: 16]

This option matches if the speciﬁed interface UUID matches the interface UUID (as referred to by the context
id) of the DCE/RPC request and if supplied, the version operation is true. This option will not match if the
fragment is not a ﬁrst fragment (or full request) unless the any frag option is supplied in which case only the
interface UUID and version need match. Note that a defragmented DCE/RPC request will be considered a full
request.
△
! NOTE
[Word Count: 80]

The opnum represents a speciﬁc function call to an interface. After is has been determined that a client has
bound to a speciﬁc interface and is making a request to it (see above - dce iface) usually we want to know
what function call it is making to that service. It is likely that an exploit lies in the particular DCE/RPC function
call.
[Word Count: 63]

opnum-list
= opnum-item | opnum-item ’,’ opnum-list
opnum-item
= opnum | opnum-range
opnum-range
= opnum ’-’ opnum
opnum
= 0-65535
[Word Count: 20]

dce_opnum:15;
dce_opnum:15-18;
dce_opnum:15, 18-20;
dce_opnum:15, 17, 20-22;
[Word Count: 7]

This option is used to specify an opnum (or operation number), opnum range or list containing either or both
opnum and/or opnum-range. The opnum of a DCE/RPC request will be matched against the opnums speciﬁed
with this option. This option matches if any one of the opnums speciﬁed match the opnum of the DCE/RPC
request.
[Word Count: 55]

Since most netbios rules were doing protocol decoding only to get to the DCE/RPC stub data, i.e. the remote
procedure call or function call data, this option will alleviate this need and place the cursor at the beginning of
the DCE/RPC stub data. This reduces the number of rule option checks and the complexity of the rule.
[Word Count: 57]

This option is used to place the cursor (used to walk the packet payload in rules processing) at the beginning
of the DCE/RPC stub data, regardless of preceding rule options. There are no arguments to this option. This
option matches if there is DCE/RPC stub data.
[Word Count: 46]

A DCE/RPC request can specify whether numbers are represented in big or little endian. These rule options will
take as a new argument dce and will work basically the same as the normal byte test/byte jump, but since
the DCE/RPC preprocessor will know the endianness of the request, it will be able to do the correct conversion.
[Word Count: 57]

byte_test:<convert>, [!]<operator>, <value>, <offset> [, relative], dce;
[Word Count: 7]

convert
= 1 | 2 | 4 (only with option "dce")
operator
= ’<’ | ’=’ | ’>’ | ’<=’ | ’>=’ | ’&’ | ’ˆ’
value
= 0 - 4294967295
offset
= -65535 to 65535
[Word Count: 36]

byte_test:4, >, 35000, 0, relative, dce;
byte_test:2, !=, 2280, -10, relative, dce;
[Word Count: 12]

When using the dce argument to a byte test, the following normal byte test arguments will not be
allowed: big, little, string, hex, dec and oct.
[Word Count: 26]

byte_jump:<convert>, <offset>[, relative][, multiplier <mult_value>] \
[, align][, post_offset <adjustment_value>], dce;
[Word Count: 11]

convert
= 1 | 2 | 4 (only with option "dce")
offset
= -65535 to 65535
mult_value
= 0 - 65535
adjustment_value
= -65535 to 65535
[Word Count: 26]

byte_jump:4,-4,relative,align,multiplier 2,post_offset -4,dce;
[Word Count: 3]

When using the dce argument to a byte jump, the following normal byte jump arguments will not be
allowed: big, little, string, hex, dec, oct and from beginning.
[Word Count: 28]

The following two rules using the new rule options replace 64 (set and isset ﬂowbit) rules that are necessary if
the new rule options are not used:
[Word Count: 27]

alert tcp $EXTERNAL_NET any -> $HOME_NET [135,139,445,593,1024:] \
(msg:"dns R_Dnssrv funcs2 overflow attempt"; flow:established,to_server; \
dce_iface:50abc2a4-574d-40b3-9d66-ee4fd5fba076; dce_opnum:0-11; dce_stub_data; \
pcre:"/ˆ.{12}(\x00\x00\x00\x00|.{12})/s"; byte_jump:4,-4,relative,align,dce; \
byte_test:4,>,256,4,relative,dce; reference:bugtraq,23470; reference:cve,2007-1748; \
classtype:attempted-admin; sid:1000068;)
[Word Count: 28]

alert udp $EXTERNAL_NET any -> $HOME_NET [135,1024:] \
(msg:"dns R_Dnssrv funcs2 overflow attempt"; flow:established,to_server; \
dce_iface:50abc2a4-574d-40b3-9d66-ee4fd5fba076; dce_opnum:0-11; dce_stub_data; \
pcre:"/ˆ.{12}(\x00\x00\x00\x00|.{12})/s"; byte_jump:4,-4,relative,align,dce; \
byte_test:4,>,256,4,relative,dce; reference:bugtraq,23470; reference:cve,2007-1748; \
classtype:attempted-admin; sid:1000069;)
[Word Count: 28]

The Sensitive Data preprocessor is a Snort module that performs detection and ﬁltering of Personally Identiﬁable
Information (PII). This information includes credit card numbers, U.S. Social Security numbers, and email addresses.
A limited regular expression syntax is also included for deﬁning your own PII.
[Word Count: 44]

The Stream preprocessor must be enabled for the Sensitive Data preprocessor to work.
[Word Count: 13]

Sensitive Data conﬁguration is split into two parts: the preprocessor conﬁg, and the rule options. The preprocessor
conﬁg starts with:
[Word Count: 20]

alert threshold
<number>
NO
alert threshold 25
mask output
NONE
NO
OFF
ssn file
<filename>
NO
OFF
[Word Count: 17]

The preprocessor will alert when any combination of PII are detected in a session. This option speciﬁes
how many need to be detected before alerting. This should be set higher than the highest individual count
in your ”sd pattern” rules.
[Word Count: 40]

This option replaces all but the last 4 digits of a detected PII with ”X”s. This is only done on credit card &
Social Security numbers, where an organization’s regulations may prevent them from seeing unencrypted
numbers.
[Word Count: 37]

A Social Security number is broken up into 3 sections: Area (3 digits), Group (2 digits), and Serial (4
digits). On a monthly basis, the Social Security Administration publishes a list of which Group numbers
are in use for each Area. These numbers can be updated in Snort by supplying a CSV ﬁle with the new
maximum Group numbers to use. By default, Snort recognizes Social Security numbers issued up through
November 2009.
[Word Count: 73]

preprocessor sensitive_data: alert_threshold 25 \
mask_output \
ssn_file ssn_groups_Jan10.csv
[Word Count: 9]

Snort rules are used to specify which PII the preprocessor should look for. A new rule option is provided by the
preprocessor:
[Word Count: 22]

This rule option speciﬁes what type of PII a rule should detect.
[Word Count: 12]

This dictates how many times a PII pattern must be matched for an alert to be generated. The count is
tracked across all packets in a session.
[Word Count: 27]

This is where the pattern of the PII gets speciﬁed. There are a few built-in patterns to choose from:
[Word Count: 19]

The ”credit card” pattern matches 15- and 16-digit credit card numbers. These numbers may
have spaces, dashes, or nothing in between groups. This covers Visa, Mastercard, Discover, and
American Express. Credit card numbers matched this way have their check digits veriﬁed using
the Luhn algorithm.
[Word Count: 45]

This pattern matches against 9-digit U.S. Social Security numbers. The SSNs are expected to
have dashes between the Area, Group, and Serial sections.
SSNs have no check digits, but the preprocessor will check matches against the list of currently
allocated group numbers.
[Word Count: 42]

This pattern matches U.S. Social Security numbers without dashes separating the Area, Group,
and Serial sections.
[Word Count: 16]

This pattern matches against email addresses.
[Word Count: 6]

If the pattern speciﬁed is not one of the above built-in patterns, then it is the deﬁnition of a custom PII
pattern. Custom PII types are deﬁned using a limited regex-style syntax. The following special characters
and escape sequences are supported:
[Word Count: 41]

\d
matches any digit
\D
matches any non-digit
\l
matches any letter
\L
matches any non-letter
\w
matches any alphanumeric character
\W
matches any non-alphanumeric character
{num}
used to repeat a character or escape sequence ”num” times. example:
”{.3}” matches 3 digits.
?
makes the previous character or escape sequence optional. example: ”
?” matches an optional space. This behaves in a greedy manner.
\\
matches a backslash
\{, \}
matches { and }
\?
matches a question mark.
[Word Count: 79]

Other characters in the pattern will be matched literally.
△
! NOTE
Unlike PCRE, \w in this rule option does NOT match underscores.
[Word Count: 23]

Alerts when 2 social security numbers (with dashes) appear in a session.
[Word Count: 12]

Alerts on 5 U.S. phone numbers, following the format (123)456-7890
[Word Count: 10]

alert tcp $HOME_NET $HIGH_PORTS -> $EXTERNAL_NET $SMTP_PORTS \
(msg:"Credit Card numbers sent over email"; gid:138; sid:1000; rev:1; \
sd_pattern:4,credit_card; metadata:service smtp;)
[Word Count: 21]

sd pattern is not compatible with other rule options. Trying to use other rule options with sd pattern
will result in an error message.
Rules using sd pattern must use GID 138.
[Word Count: 32]

When operating Snort in inline mode, it is helpful to normalize packets to help minimize the chances of evasion.
[Word Count: 19]

To enable the normalizer, use the following when conﬁguring Snort:
[Word Count: 10]

The normalize preprocessor is activated via the conf as outlined below. There are also many new preprocessor and
decoder rules to alert on or drop packets with ”abnormal” encodings.
[Word Count: 29]

Note that in the following, ﬁelds are cleared only if they are non-zero. Also, normalizations will only be enabled if
the selected DAQ supports packet replacement and is operating in inline mode.
[Word Count: 32]

If a policy is conﬁgured for inline test or passive mode, any normalization statements in the policy conﬁg are
ignored.
[Word Count: 20]

preprocessor normalize_ip4: [df], [rf], [tos], [trim]
[Word Count: 6]

Base normalizations enabled with ”preprocessor normalize ip4” include:
[Word Count: 8]

• TTL normalization if enabled (explained below).
[Word Count: 7]

• Clear the differentiated services ﬁeld (formerly TOS).
[Word Count: 8]

• df don’t fragment: clear this bit on incoming packets.
[Word Count: 10]

• rf reserved ﬂag: clear this bit on incoming packets.
[Word Count: 10]

• tos type of service (differentiated services): clear this byte.
[Word Count: 10]

• trim truncate packets with excess payload to the datagram length speciﬁed in the IP header + the layer 2 header
(e.g. ethernet), but don’t truncate below minimum frame length. This is automatically disabled if the DAQ can’t
inject packets.
[Word Count: 40]

Base normalizations enabled with ”preprocessor normalize ip6” include:
[Word Count: 8]

• Hop limit normalization if enabled (explained below).
[Word Count: 8]

• NOP all options octets in hop-by-hop and destination options extension headers.
[Word Count: 12]

ICMP4 and ICMP6 normalizations are enabled with:
[Word Count: 7]

preprocessor normalize_icmp4
preprocessor normalize_icmp6
[Word Count: 4]

Base normalizations enabled with the above include:
[Word Count: 7]

• Clear the code ﬁeld in echo requests and replies.
[Word Count: 10]

preprocessor normalize_tcp: \
[block], [rsv], [pad], \
[req_urg], [req_pay], [req_urp], \
[ips], [urp], [trim], \
[trim_syn], [trim_rst], \
[trim_win], [trim_mss], \
[ecn <ecn_type>], \
[opts [allow <allowed_opt>+]]
[Word Count: 27]

<allowed_opt> ::= \
sack | echo | partial_order | conn_count | alt_checksum | md5 | <num>
[Word Count: 16]

<sack> ::= { 4, 5 }
<echo> ::= { 6, 7 }
<partial_order> ::= { 9, 10 }
<conn_count> ::= { 11, 12, 13 }
<alt_checksum> ::= { 14, 15 }
<md5> ::= { 19 }
<num> ::= (3..255)
[Word Count: 39]

• block allow packet drops during TCP normalization.
[Word Count: 8]

• rsv clear the reserved bits in the TCP header.
[Word Count: 10]

• req urg clear the urgent pointer if the urgent ﬂag is not set.
[Word Count: 14]

• req pay clear the urgent pointer and the urgent ﬂag if there is no payload.
[Word Count: 16]

• req urp clear the urgent ﬂag if the urgent pointer is not set.
[Word Count: 14]

• ips ensure consistency in retransmitted data (also forces reassembly policy to ”ﬁrst”). Any segments that can’t
be properly reassembled will be dropped.
[Word Count: 23]

• trim rst remove any data from RST packet.
[Word Count: 9]

• trim enable all of the above trim options.
[Word Count: 9]

clear ECN ﬂags on a per packet basis (regardless of negotiation).
[Word Count: 11]

clear ECN ﬂags if usage wasn’t negotiated. Should also enable require 3whs.
[Word Count: 12]

NOP all option bytes other than maximum segment size, window scaling, timestamp, and any explicitly allowed
with the allow keyword. You can allow options to pass by name or number.
[Word Count: 30]

if timestamp is present but invalid, or valid but not negotiated, NOP the timestamp octets.
[Word Count: 15]

if timestamp was negotiated but not present, block the packet.
[Word Count: 10]

MSS and window scale options are NOP’d if SYN ﬂag is not set.
[Word Count: 13]

TTL normalization pertains to both IP4 TTL (time-to-live) and IP6 (hop limit) and is only performed if both the
relevant base normalization is enabled (as described above) and the minimum and new TTL values are conﬁgured, as
follows:
[Word Count: 38]

config min_ttl: <min_ttl>
config new_ttl: <new_ttl>
[Word Count: 6]

<min_ttl> ::= (1..255)
<new_ttl> ::= (<min_ttl>+1..255)
[Word Count: 6]

If new ttl > min ttl, then if a packet is received with a TTL < min ttl, the TTL will be set to new ttl.
[Word Count: 26]

Note that this conﬁguration item was deprecated in 2.8.6:
[Word Count: 9]

By default min ttl = 1 (TTL normalization is disabled). When TTL normalization is turned on the new ttl is set to
5 by default.
[Word Count: 25]

Session Initiation Protocol (SIP) is an application-layer control (signaling) protocol for creating, modifying, and ter-
minating sessions with one or more participants. These sessions include Internet telephone calls, multimedia distribu-
tion, and multimedia conferences. SIP Preprocessor provides ways to tackle Common Vulnerabilities and Exposures
(CVEs) related with SIP found over the past few years. It also makes detecting new attacks easier.
[Word Count: 61]

For proper functioning of the preprocessor:
[Word Count: 6]

• Stream session tracking must be enabled, i.e. stream5. Both TCP and UDP must be enabled in stream5. The
preprocessor requires a session tracker to keep its data. In addition, Stream API is able to provide correct support
for ignoring audio/video data channel.
[Word Count: 43]

• IP defragmentation should be enabled, i.e. the frag3 preprocessor should be enabled and conﬁgured.
[Word Count: 15]

The preprocessor conﬁguration name is sip.
[Word Count: 6]

max_sessions
= 1024-4194303
max_dialogs
= 1-4194303
methods
= "invite"|"cancel"|"ack"|"bye"|"register"| "options"\
|"refer" |"subscribe"|"update"|"join"|"info"|"message"\
|"notify"|"prack"
max_uri_len
= 0-65535
max_call_id_len
= 0-65535
max_requestName_len = 0-65535
max_from_len
= 0-65535
max_to_len
= 0-65535
max_via_len
= 0-65535
max_contact_len
= 0-65535
max_content_len
= 0-65535
[Word Count: 37]

SIP dynamic preprocessor can be enabled/disabled through conﬁguration. By default this value is turned
off. When the preprocessor is disabled, only the max sessions option is applied when speciﬁed with the
conﬁguration.
[Word Count: 32]

This speciﬁes the maximum number of sessions that can be allocated. Those sessions are stream sessions,
so they are bounded by maximum number of stream sessions. Default is 10000.
[Word Count: 29]

This speciﬁes the maximum number of dialogs within one stream session. If exceeded, the oldest dialog
will be dropped. Default is 4.
[Word Count: 22]

This speciﬁes on what ports to check for SIP messages. Typically, this will include 5060, 5061.
[Word Count: 16]

Note: there are spaces before and after ‘{’ and ‘}’.
[Word Count: 10]

This speciﬁes on what methods to check for SIP messages: (1) invite, (2) cancel, (3) ack, (4) bye, (5)
register, (6) options, (7) refer, (8) subscribe, (9) update (10) join (11) info (12) message (13) notify (14)
prack. Note: those 14 methods are up to date list (Feb. 2011). New methods can be added to the list. Up
to 32 methods supported.
[Word Count: 62]

methods { <method-list> }
method-list = method|method method-list
methods
= "invite"|"cancel"|"ack"|"bye"|"register"| "options"\
|"refer"|"subscribe"|"update"|"join"|"info"|"message"\
|"notify"|"prack"
[Word Count: 14]

methods { invite cancel ack bye register options }
methods { invite cancel ack bye register options information }
[Word Count: 19]

Note: there are spaces before and after ‘{’ and ‘}’.
[Word Count: 10]

This speciﬁes the maximum Request URI ﬁeld size. If the Request URI ﬁeld is greater than this size, an
alert is generated. Default is set to 256. The allowed range for this option is 0 - 65535. “0” means never
alert.
[Word Count: 41]

This speciﬁes the maximum Call-ID ﬁeld size. If the Call-ID ﬁeld is greater than this size, an alert is
generated. Default is set to 256. The allowed range for this option is 0 - 65535. “0” means never alert.
[Word Count: 39]

This speciﬁes the maximum request name size that is part of the CSeq ID. If the request name is greater
than this size, an alert is generated. Default is set to 20. The allowed range for this option is 0 - 65535. “0”
means never alert.
[Word Count: 46]

This speciﬁes the maximum From ﬁeld size. If the From ﬁeld is greater than this size, an alert is generated.
Default is set to 256. The allowed range for this option is 0 - 65535. “0” means never alert.
[Word Count: 39]

This speciﬁes the maximum To ﬁeld size. If the To ﬁeld is greater than this size, an alert is generated.
Default is set to 256. The allowed range for this option is 0 - 65535. “0” means never alert.
[Word Count: 39]

This speciﬁes the maximum Via ﬁeld size. If the Via ﬁeld is greater than this size, an alert is generated.
Default is set to 1024. The allowed range for this option is 0 - 65535. “0” means never alert.
[Word Count: 39]

This speciﬁes the maximum Contact ﬁeld size. If the Contact ﬁeld is greater than this size, an alert is
generated. Default is set to 256. The allowed range for this option is 0 - 65535. “0” means never alert.
[Word Count: 39]

This speciﬁes the maximum content length of the message body. If the content length is greater than this
number, an alert is generated. Default is set to 1024. The allowed range for this option is 0 - 65535. “0”
means never alert.
[Word Count: 42]

This enables the support for ignoring audio/video data channel (through Stream API). By default, this is
disabled.
[Word Count: 17]

max_sessions 30000
disabled
ports { 5060 5061 }
methods { invite cancel ack bye register options }
methods { invite cancel ack bye register options information }
max_uri_len 1024
max_call_id_len 1024
max_requestName_len 10
max_from_len 1024
max_to_len 1024
max_via_len 1024
max_contact_len 1024
max_content_len 1024
max_content_len
ignore_call_channel
[Word Count: 45]

preprocessor sip
preprocessor sip: max_sessions 500000
preprocessor sip: max_contact_len 512, max_sessions 300000, methods { invite \
cancel ack bye register options } , ignore_call_channel
preprocessor sip: ports { 5060 49848 36780 10270 }, max_call_id_len 200, \
max_from_len 100, max_to_len 200, max_via_len 1000, \
max_requestName_len 50, max_uri_len 100, ignore_call_channel,\
max_content_len 1000
preprocessor sip: disabled
preprocessor sip: ignore_call_channel
[Word Count: 56]

The preprocessor uses GID 140 to register events.
[Word Count: 8]

New rule options are supported by enabling the sip preprocessor:
[Word Count: 10]

sip_method
sip_stat_code
sip_header
sip_body
[Word Count: 4]

Overload modiﬁers to existing pcre rule options:
[Word Count: 7]

H: Match SIP request or SIP response header, Similar to sip header.
[Word Count: 12]

P: Match SIP request or SIP response body, Similar to sip body.
[Word Count: 12]

The sip method keyword is used to check for speciﬁc SIP request methods. The list of methods is: invite,
cancel, ack, bye, register, options, refer, subscribe, update, join, info, message, notify, prack. More than one
method can be speciﬁed, via a comma separated list, and are OR’ed together. It will be applied in fast pattern
match if available. If the method used in this rule is not listed in the preprocessor conﬁguration, it will be added
to the preprocessor conﬁguration for the associated policy.
[Word Count: 84]

sip_method:<method-list>;
method-list = method|method, method-list
method
= ["!"] "invite"|"cancel"|"ack"|"bye"|"register"| "options"\
|"refer"|"subscribe"|"update"|"join"|"info"|"message"\
|"notify"|"prack"
Note: if "!" is used, only one method is allowed in sip_method.
[Word Count: 24]

sip_method:invite, cancel
sip_method:!invite
[Word Count: 3]

Note: If a user wants to use "and", they can use something like this:
sip_method:!invite; sip_method:!bye
[Word Count: 16]

The sip stat code is used to check the SIP response status code. This option matches if any one of the state
codes speciﬁed matches the status codes of the SIP response.
[Word Count: 32]

sip_stat_code:<code _list> ;
code_list = state_code|state_code, code_list
code
= "100-999"|"1-9"
[Word Count: 10]

Note: 1,2,3,4,5,6... mean to check for ”1xx”, ”2xx”, ’3xx’, ’4xx’, ’5xx’, ’6xx’... responses.
[Word Count: 13]

sip_stat_code:200
sip_stat_code: 2
sip_stat_code: 200, 180
[Word Count: 6]

The sip header keyword restricts the search to the extracted Header ﬁelds of a SIP message request or a re-
sponse. This works similar to file data.
[Word Count: 27]

alert udp any any -> any 5060 (sip_header; content:"CSeq"; )
[Word Count: 10]

The sip body keyword places the cursor at the beginning of the Body ﬁelds of a SIP message. This works
similar to file data and dce stub data. The message body includes channel information using SDP protocol
(Session Description Protocol).
[Word Count: 40]

alert udp any any -> any 5060 (sip_body; content:"C=IN 0.0.0.0"; within 100;)
[Word Count: 12]

– H: Match SIP header for request or response , Similar to sip header.
[Word Count: 14]

– P: Match SIP body for request or response , Similar to sip body.
[Word Count: 14]

alert udp any any -> any 5060 (pcre:"/INVITE/H"; sid:1000000;)
alert udp any any -> any 5060 (pcre:"/m=/P"; sid:2000000;)
[Word Count: 18]

Reputation preprocessor provides basic IP blacklist/whitelist capabilities, to block/drop/pass trafﬁc from IP addresses
listed. In the past, we use standard Snort rules to implement Reputation-based IP blocking. This preprocessor will
address the performance issue and make the IP reputation management easier. This preprocessor runs before other
preprocessors.
[Word Count: 47]

The preprocessor conﬁguration name is reputation.
[Word Count: 6]

memcap
<memcap>
NO
memcap 500
scan local
NONE
NO
OFF
blacklist
<list file name>
NO
NONE
whitelist
<list file name>
NO
NONE
priority
[blacklist whitelist]
NO
priority whitelist
nested ip
[inner outer both]
NO
nested ip inner
white
[unblack trust]
NO
white unblack
[Word Count: 43]

Maximum total memory supported. It can be set up to 4095 Mbytes.
[Word Count: 12]

Enable to inspect local address deﬁned in RFC 1918:
[Word Count: 9]

10.0.0.0 - 10.255.255.255 (10/8 preﬁx)
172.16.0.0 - 172.31.255.255 (172.16/12 preﬁx)
192.168.0.0 - 192.168.255.255 (192.168/16 preﬁx)
[Word Count: 15]

The IP lists are loaded from external ﬁles. It supports relative paths for inclusion and $variables for path.
Multiple blacklists or whitelists are supported.
[Word Count: 24]

Note: if the same IP is redeﬁned later, it will overwrite the previous one. In other words, IP lists always
favors the last ﬁle or entry processed.
[Word Count: 27]

Specify either blacklist or whitelist has higher priority when source/destination is on blacklist while des-
tination/source is on whitelist. By default, whitelist has higher priority. In other words, the packet will be
passed when either source or destination is whitelisted.
[Word Count: 40]

Note: this only deﬁnes priority when there is a decision conﬂict, during run-time. During initialization
time, if the same IP address is deﬁned in whitelist and blacklist, whoever the last one deﬁned will be the
ﬁnal one. Priority does not work on this case.
[Word Count: 44]

Specify which IP address to be used when there is IP encapsulation.
[Word Count: 12]

Specify the meaning of whitelist. When white means unblack, it unblacks IPs that are in blacklists; when
white means trust, the packet gets bypassed, without further detection by snort. You can only specify either
unblack or trust.
[Word Count: 37]

Note: when white means unblack, whitelist always has higher priority than blacklist.
[Word Count: 12]

preprocessor reputation:\
blacklist /etc/snort/default.blacklist, \
whitelist /etc/snort/default.whitelist
[Word Count: 7]

preprocessor reputation: \
nested_ip both, \
blacklist /etc/snort/default.blacklist, \
whitelist /etc/snort/default.whitelist
[Word Count: 11]

preprocessor reputation: \
memcap
4095, scan_local, nested_ip both, \
priority whitelist,
\
blacklist /etc/snort/default.blacklist, \
whitelist /etc/snort/default.whitelist,
white trust
[Word Count: 19]

$REP_BLACK_FILE1 = ../dshield.list
$REP_BLACK_FILE2 = ../snort.org.list
preprocessor reputation: \
blacklist $REP_BLACK_FILE1,\
blacklist $REP_BLACK_FILE2
[Word Count: 13]

The IP list ﬁle has 1 entry per line. The entry can be either IP entry or comment.
[Word Count: 18]

CIDR notation <comments> line break.
Example:
[Word Count: 6]

The comment start with #
# <comments>
Example
[Word Count: 8]

#
This is a full line comment
172.33.42.32/16
# This is a in-line comment
[Word Count: 14]

# This is a full line comment
172.16.42.32/32
# This is an inline comment, line with single CIDR block
172.33.42.32/16
[Word Count: 20]

A user wants to protect his/her network from unwanted/unknown IPs, only allowing some trusted IPs. Here is
the conﬁguration:
[Word Count: 19]

preprocessor reputation: \
blacklist /etc/snort/default.blacklist
whitelist /etc/snort/default.whitelist
[Word Count: 7]

In file "default.blacklist"
# These two entries will match all ipv4 addresses
1.0.0.0/1
128.0.0.0/1
[Word Count: 14]

In file "default.whitelist"
68.177.102.22 # sourcefire.com
74.125.93.104 # google.com
[Word Count: 9]

Reputation preprocessor uses GID 136 to register events.
[Word Count: 8]

SID
Description
1
Packet is blacklisted.
2
Packet is whitelisted.
3
Packet is inspected.
[Word Count: 14]

In order to minimize memory consumption when multiple Snort instances are running concurrently, we intro-
duce the support of shared memory. After conﬁgured, all the snort instances share the same IP tables in shared
memory.
[Word Count: 35]

This feature is supported only in Linux.
[Word Count: 7]

A new option, --enable-shared-rep is introduced to ./configure command. This option enables the
support for shared memory.
[Word Count: 17]

If the build supports shared memory, this conﬁguration will enable shared memory. If this option
isn’t set, standard memory is used. This option must specify a path or directory where IP lists will
be loaded in shared memory. One snort instance will create and maintain the shared IP lists. We use
instance ID 1, speciﬁed in the snort -G option to be the master snort. All the other snort instances are
clients (readers).
Syntax
[Word Count: 74]

This option changes the period of checking new shared memory segment, in the unit of second. By
default, the refresh rate is 60 seconds.
Syntax
[Word Count: 25]

shared_refresh <period>
period = "1 - 4294967295"
[Word Count: 7]

– When building Snort, add option --enable-shared-rep to ./configure
For example:
[Word Count: 11]

./configure --enable-gre --enable-sourcefire --enable-flexresp3
--enable-pthread --enable-linux-smp-stats
--enable-targetbased --enable-shared-rep --enable-control-socket
[Word Count: 9]

– Put your IP list ﬁle into a directory, where snort has full access.
For example:
[Word Count: 16]

In order to separate whitelist with blacklist, you need to specify whitelist with .wlf extension and blacklist
with .blf extension.
[Word Count: 20]

– In snort conﬁg ﬁle, specify shared memory support with the path to IP ﬁles.
For example:
[Word Count: 17]

If you want to change the period of checking new IP lists, add refresh period.
For example:
[Word Count: 17]

– Start shared memory master(writer) with -G 0 option. Note: only one master should be enabled.
[Word Count: 16]

– Start shared memory clients (readers) with -G 1 or other IDs. Note: for one ID, only one snort instance
should be enabled.
[Word Count: 23]

– You will see the IP lists got loaded and shared across snort instances!
[Word Count: 14]

– Run snort using command line with option --cs-dir <path> or conﬁgure snort with:
[Word Count: 14]

– (Optional) you can create a version ﬁle named “IPRVersion.dat” in the IP list directory. This ﬁle helps
managing reloading IP lists, by specifying a version. When the version isn’t changed, IP lists will not be
reloaded if they are already in shared memory. The version number should be a 32 bit number.
For example:
[Word Count: 55]

– In the <snort root>/src/tools/control directory, you will ﬁnd snort control command if built
with --enable-control-socket option.
[Word Count: 17]

– Type the following command to reload IP lists. Before typing this command, make sure to update version
ﬁle if you are using version ﬁle. The <path> is the same path in ﬁrst step.
[Word Count: 34]

<snort root>/src/tools/control/snort_control
<path> 1361
[Word Count: 4]

Using manifest ﬁle to manage loading (optional)
[Word Count: 7]

Using manifest ﬁle, you can control the ﬁle loading sequence, action taken, and support zone based detec-
tion. You can create a manifest ﬁle named “zone.info” in the IP list directory.
[Word Count: 31]

When Snort is signaled to load new lists, a manifest ﬁle is read ﬁrst to determine which zones the IPs in
each list are applicable to and what action to take per list (Block, White, Monitor).
[Word Count: 36]

Files listed in manifest are loaded from top to bottom. You should put ﬁles that have higher priority ﬁrst.
In manifest ﬁle, you can put up to 255 ﬁles. Without manifest ﬁle, ﬁles will be loaded in alphabet order.
[Word Count: 39]

Here’s the format of the manifest ﬁle. Each line of the ﬁle has the following format:
[Word Count: 16]

<filename>, <list id>,<action>[, <zone>]+
[Word Count: 4]

<list id> ::= 32 bit integer
<action> ::= "monitor"|"block"|"white"
<zone>
::= [0-1051]
[Word Count: 12]

Using manifest ﬁle, you can specify a new action called “monitor”, which indicates a packet needs to be
inspected, but does not disable detection. This is different from “block” action, which disables further
detection. This new action helps users evaluate their IP lists before applying it.
An example manifest ﬁle:
[Word Count: 50]

#ipreputation manifest file
white.wlf, 111 ,white,
black1.blf, 1112, black,
3, 12
black2.blf, 1113, black,
3, 12
monitor.blf,2222, monitor, 0, 2, 8
[Word Count: 21]

GTP (GPRS Tunneling Protocol) is used in core communication networks to establish a channel between GSNs (GPRS
Serving Node). GTP decoding preprocessor provides ways to tackle intrusion attempts to those networks through GTP.
It also makes detecting new attacks easier.
[Word Count: 40]

Two components are developed: GTP decoder and GTP preprocessor.
[Word Count: 9]

• GTP decoder extracts payload inside GTP PDU;
[Word Count: 8]

• GTP preprocessor inspects all the signaling messages and provide keywords for further inspection
[Word Count: 14]

When the decoder is enabled and conﬁgured, the decoder strips the GTP headers and parses the underlying IP/TCP/UDP
encapsulated packets. Therefore all rules and detection work as if there was no GTP header.
[Word Count: 33]

alert tcp any any ->
any $HTTP_PORTS (msg:"Test HTTP"; flow:to_server,established;
content:"SOMETHINGEVIL"; http_uri;
.... sid:X; rev:Y;)
[Word Count: 15]

it would alert on the inner HTTP data that is encapsulated in GTP without any changes to the rule other than
enabling and conﬁguring the GTP decoder.
[Word Count: 27]

For proper functioning of the preprocessor:
[Word Count: 6]

• Stream session tracking must be enabled, i.e. stream5. UDP must be enabled in stream5. The preprocessor
requires a session tracker to keep its data.
[Word Count: 25]

• IP defragmentation should be enabled, i.e. the frag3 preprocessor should be enabled and conﬁgured.
[Word Count: 15]

GTP decoder extracts payload from GTP PDU. The following conﬁguration sets GTP decoding:
[Word Count: 13]

By default, GTP decoder uses port number 2152 (GTPv1) and 3386 (GTPv0). If users want to change those values,
they can use portvar GTP PORTS:
[Word Count: 25]

GTP Control Channel Preprocessor Conﬁguration
[Word Count: 5]

Different from GTP decoder, GTP preprocessor examines all signaling messages. The preprocessor conﬁguration
name is gtp.
[Word Count: 16]

This speciﬁes on what ports to check for GTP messages. Typically, this will include 2123, 3386.
[Word Count: 16]

Note: there are spaces before and after ‘{’ and ‘}’.
[Word Count: 10]

SID
Description
297
Two or more GTP encapsulation layers present
298
GTP header length is invalid
[Word Count: 16]

SID
Description
1
Message length is invalid.
2
Information element length is invalid.
3
Information elements are out of order.
[Word Count: 20]

New rule options are supported by enabling the gtp preprocessor:
[Word Count: 10]

The gtp type keyword is used to check for speciﬁc GTP types. User can input message type value, an integer
in [0, 255], or a string deﬁned in the Table below. More than one type can be speciﬁed, via a comma separated
list, and are OR’ed together. If the type used in a rule is not listed in the preprocessor conﬁguration, an error
will be thrown.
[Word Count: 66]

A message type can have different type value in different GTP versions. For example, sgsn context request
has message type value 50 in GTPv0 and GTPv1, but 130 in GTPv2. gtp type will match to a different value
depending on the version number in the packet. In this example, evaluating a GTPv0 or GTPv1 packet will
check whether the message type value is 50; evaluating a GTPv2 packet will check whether the message type
value is 130. When a message type is not deﬁned in a version, any packet in that version will always return “No
match”.
[Word Count: 97]

If an integer is used to specify message type, every GTP packet is evaluated, no matter what version the packet
is. If the message type matches the value in packet, it will return “Match”.
[Word Count: 34]

gtp_type:<type-list>;
type-list = type|type, type-list
type
= "0-255"|
| "echo_request" | "echo_response" ...
[Word Count: 13]

Type
GTPv0
GTPv1
GTPv2
0
N/A
N/A
N/A
1
echo request
echo request
echo request
2
echo response
echo response
echo response
3
version not supported
version not supported
version not supported
4
node alive request
node alive request
N/A
5
node alive response
node alive response
N/A
6
redirection request
redirection request
N/A
7
redirection response
redirection response
N/A
16
create pdp context request
create pdp context request
N/A
17
create pdp context response
create pdp context response
N/A
18
update pdp context request
update pdp context request
N/A
19
update pdp context response
update pdp context response
N/A
[Word Count: 100]

The gtp info keyword is used to check for speciﬁc GTP information element. This keyword restricts the
search to the information element ﬁeld. User can input information element value, an integer in [0,255], or a
string deﬁned in the Table below. If the information element used in this rule is not listed in the preprocessor
conﬁguration, an error will be thrown.
[Word Count: 61]

When there are several information elements with the same type in the message, this keyword restricts the
search to the total consecutive buffer. Because the standard requires same types group together, this feature will
be available for all valid messages. In the case of “out of order information elements”, this keyword restricts the
search to the last buffer.
[Word Count: 58]

Similar to message type, same information element might have different information element value in different
GTP versions. For example, cause has value 1 in GTPv0 and GTPv1, but 2 in GTPv2. gtp info will match to
a different value depending on the version number in the packet. When an information element is not deﬁned in
a version, any packet in that version will always return “No match”.
[Word Count: 67]

If an integer is used to specify information element type, every GTP packet is evaluated, no matter what version
the packet is. If the message type matches the value in packet, it will return “Match”.
[Word Count: 35]

gtp_info:<ie>;
ie
= "0-255"|
"rai" | "tmsi"...
[Word Count: 7]

The gtp version keyword is used to check for speciﬁc GTP version.
[Word Count: 12]

Because different GTP version deﬁnes different message types and information elements, this keyword should
combine with gtp type and gtp info.
[Word Count: 21]

gtp_version:<version>;
version
= "0, 1, 2’
[Word Count: 6]

The Modbus preprocessor is a Snort module that decodes the Modbus protocol. It also provides rule options to access
certain protocol ﬁelds. This allows a user to write rules for Modbus packets without decoding the protocol with a
series of ”content” and ”byte test” options.
[Word Count: 45]

Modbus is a protocol used in SCADA networks. If your network does not contain any Modbus-enabled devices, we
recommend leaving this preprocessor turned off.
[Word Count: 24]

For proper functioning of the preprocessor:
[Word Count: 6]

• Stream session tracking must be enabled, i.e. stream5. TCP must be enabled in stream5. The preprocessor
requires a session tracker to keep its data.
[Word Count: 25]

• Protocol Aware Flushing (PAF) must be enabled.
[Word Count: 8]

• IP defragmentation should be enabled, i.e. the frag3 preprocessor should be enabled and conﬁgured.
[Word Count: 15]

To get started, the Modbus preprocessor must be enabled. The preprocessor name is modbus.
[Word Count: 14]

This speciﬁes on what ports to check for Modbus messages. Typically, this will include 502.
[Word Count: 15]

Note: there are spaces before and after ‘{’ and ‘}’.
[Word Count: 10]

The Modbus preprocessor adds 3 new rule options. These rule options match on various pieces of the Modbus headers:
[Word Count: 19]

The preprocessor must be enabled for these rule option to work.
[Word Count: 11]

This option matches against the Function Code inside of a Modbus header. The code may be a number (in
decimal format), or a string from the list provided below.
[Word Count: 29]

code
= 0-255 |
"read_coils" |
"read_discrete_inputs" |
"read_holding_registers" |
"read_input_registers" |
"write_single_coil" |
"write_single_register" |
"read_exception_status" |
"diagnostics" |
"get_comm_event_counter" |
"get_comm_event_log" |
"write_multiple_coils" |
[Word Count: 26]

"write_multiple_registers" |
"report_slave_id" |
"read_file_record" |
"write_file_record" |
"mask_write_register" |
"read_write_multiple_registers" |
"read_fifo_queue" |
"encapsulated_interface_transport"
[Word Count: 15]

modbus_func:1;
modbus_func:write_multiple_coils;
[Word Count: 2]

This option matches against the Unit ID ﬁeld in a Modbus header.
[Word Count: 12]

This rule option sets the cursor at the beginning of the Data ﬁeld in a Modbus request/response.
[Word Count: 17]

The Modbus preprocessor uses GID 144 for its preprocessor events.
[Word Count: 10]

SID
Description
1
The length in the Modbus header does not match the length needed
by the Modbus function code.
[Word Count: 20]

Each Modbus function has an expected format for requests and responses.
If the length of the message does not match the expected format, this
alert is generated.
2
Modbus protocol ID is non-zero.
[Word Count: 33]

The protocol ID ﬁeld is used for multiplexing other protocols with
Modbus. Since the preprocessor cannot handle these other protocols,
this alert is generated instead.
3
Reserved Modbus function code in use.
[Word Count: 32]

The DNP3 preprocessor is a Snort module that decodes the DNP3 protocol. It also provides rule options to access
certain protocol ﬁelds. This allows a user to write rules for DNP3 packets without decoding the protocol with a series
of ”content” and ”byte test” options.
[Word Count: 45]

DNP3 is a protocol used in SCADA networks. If your network does not contain any DNP3-enabled devices, we
recommend leaving this preprocessor turned off.
[Word Count: 24]

For proper functioning of the preprocessor:
[Word Count: 6]

• Stream session tracking must be enabled, i.e. stream5. TCP or UDP must be enabled in stream5. The prepro-
cessor requires a session tracker to keep its data.
[Word Count: 28]

• Protocol Aware Flushing (PAF) must be enabled.
[Word Count: 8]

• IP defragmentation should be enabled, i.e. the frag3 preprocessor should be enabled and conﬁgured.
[Word Count: 15]

To get started, the DNP3 preprocessor must be enabled. The preprocessor name is dnp3.
[Word Count: 14]

ports
<ports>
NO
ports { 20000 }
memcap
<number
NO
memcap 262144
check crc
NONE
NO
OFF
disabled
NONE
NO
OFF
[Word Count: 21]

This speciﬁes on what ports to check for DNP3 messages. Typically, this will include 20000.
[Word Count: 15]

Note: there are spaces before and after ‘{’ and ‘}’.
[Word Count: 10]

This sets a maximum to the amount of memory allocated to the DNP3 preprocessor for session-tracking
purposes. The argument is given in bytes. Each session requires about 4 KB to track, and the default is 256
kB. This gives the preprocessor the ability to track 63 DNP3 sessions simultaneously. Setting the memcap
below 4144 bytes will cause a fatal error. When multiple conﬁgs are used, the memcap in the non-default
conﬁgs will be overwritten by the memcap in the default conﬁg. If the default conﬁg isn’t intended to
inspect DNP3 trafﬁc, use the ”disabled” keyword.
[Word Count: 95]

This option makes the preprocessor validate the checksums contained in DNP3 Link-Layer Frames. Frames
with invalid checksums will be ignored. If the corresponding preprocessor rule is enabled, invalid check-
sums will generate alerts. The corresponding rule is GID 145, SID 1.
[Word Count: 41]

This option is used for loading the preprocessor without inspecting any DNP3 trafﬁc. The disabled
keyword is only useful when the DNP3 preprocessor is turned on in a separate policy.
[Word Count: 30]

The DNP3 preprocessor adds 4 new rule options. These rule options match on various pieces of the DNP3 headers:
[Word Count: 19]

The preprocessor must be enabled for these rule option to work.
[Word Count: 11]

This option matches against the Function Code inside of a DNP3 Application-Layer request/response header.
The code may be a number (in decimal format), or a string from the list provided below.
[Word Count: 31]

code
= 0-255 |
"confirm" |
"read" |
"write" |
"select" |
"operate" |
"direct_operate" |
"direct_operate_nr" |
"immed_freeze" |
"immed_freeze_nr" |
"freeze_clear" |
"freeze_clear_nr" |
"freeze_at_time" |
"freeze_at_time_nr" |
"cold_restart" |
"warm_restart" |
"initialize_data" |
"initialize_appl" |
"start_appl" |
"stop_appl" |
"save_config" |
"enable_unsolicited" |
"disable_unsolicited" |
"assign_class" |
"delay_measure" |
"record_current_time" |
"open_file" |
"close_file" |
"delete_file" |
"get_file_info" |
"authenticate_file" |
[Word Count: 64]

"abort_file" |
"activate_config" |
"authenticate_req" |
"authenticate_err" |
"response" |
"unsolicited_response" |
"authenticate_resp"
[Word Count: 13]

This option matches on the Internal Indicators ﬂags present in a DNP3 Application Response Header. Much
like the TCP ﬂags rule option, providing multiple ﬂags in one option will cause the rule to ﬁre if ANY one of the
ﬂags is set. To alert on a combination of ﬂags, use multiple rule options.
[Word Count: 53]

flag =
"all_stations"
"class_1_events"
"class_2_events"
"class_3_events"
"need_time"
"local_control"
"defice_trouble"
"device_restart"
"no_func_code_support"
"object_unknown"
"parameter_error"
"event_buffer_overflow"
"already_executing"
"config_corrupt"
"reserved_2"
"reserved_1"
[Word Count: 18]

# Alert on reserved_1 OR reserved_2
dnp3_ind:reserved_1,reserved_2;
[Word Count: 7]

# Alert on class_1 AND class_2 AND class_3 events
dnp3_ind:class_1_events; dnp3_ind:class_2_events; dnp3_ind:class_3_events;
[Word Count: 12]

This option matches on DNP3 object headers present in a request or response.
[Word Count: 13]

# Alert on DNP3 "Date and Time" object
dnp3_obj:50,1;
[Word Count: 9]

As Snort processes DNP3 packets, the DNP3 preprocessor collects Link-Layer Frames and reassembles them
back into Application-Layer Fragments. This rule option sets the cursor to the beginning of an Application-
Layer Fragment, so that other rule options can work on the reassembled data.
[Word Count: 43]

With the dnp3 data rule option, you can write rules based on the data within Fragments without splitting up the
data and adding CRCs every 16 bytes.
[Word Count: 27]

dnp3_data; content:"badstuff_longer_than_16chars";
[Word Count: 2]

The DNP3 preprocessor uses GID 145 for its preprocessor events.
[Word Count: 10]

With increasingly complex networks and growing network trafﬁc, network administrators require application aware-
ness in managing networks. An administrator may allow only applications that are business relevant, low bandwidth
and/or deal with certain subject matter.
[Word Count: 35]

AppId preprocessor adds application level view to manage networks. It does this by adding the following features
[Word Count: 17]

• Network control: The preprocessor provides simpliﬁed single point application awareness by making a set of
application identiﬁers (AppId) available to Snort Rule writers.
[Word Count: 24]

• Network usage awareness: the preprocessor outputs statistics to show network bandwidth used by each applica-
tion seen on network. Administrators can monitor bandwidth usage and may decide to block applications that
are wasteful.
[Word Count: 34]

• Custom applications: The preprocessor enables administrators to create their own application detectors to detect
new applications. The detectors are written in Lua and interface with Snort using a well-deﬁned C-Lua API.
[Word Count: 32]

For proper functioning of the preprocessor:
[Word Count: 6]

• Stream session tracking must be enabled, i.e. stream5. TCP or UDP must be enabled in stream5. The prepro-
cessor requires a session tracker to keep its data.
[Word Count: 28]

• Protocol Aware Flushing (PAF) must be enabled.
[Word Count: 8]

• IP defragmentation should be enabled, i.e. the frag3 preprocessor should be enabled and conﬁgured.
[Word Count: 15]

• HTTP preprocessor must be enabled and conﬁgured. The processor does not require any AppId speciﬁc con-
ﬁguration. The preprocessor provides parsed HTTP headers for application determination. Without HTTP
preprocessor, AppId preprocessor will identify only non-HTTP applications.
[Word Count: 37]

• LuaJIT version 2.0.2 must be installed on host where snort is being compiled and run. Newer versions of LuaJIT
are not tested for compatibility.
[Word Count: 25]

AppId dynamic preprocessor is enabled by default(from snort-2.9.12). The preprocessor can be disabled during build
time by including the following option in ./conﬁgure:
[Word Count: 23]

app detector dir
<directory>
NO
app detector dir {
/usr/local/etc/appid }
app stats filename
<filename>
NO
NULL
app stats period
<time in seconds>
NO
300 seconds
app stats rollover size
<disk size in bytes>
NO
20 MB
app stats rollover time
<time in seconds>
NO
1 day
memcap
<memory limit bytes>
NO
256 MB
debug
<"yes">
NO
disabled
dump ports
No
NO
disabled
[Word Count: 63]

speciﬁes base path where Cisco provided detectors and application conﬁguration ﬁles are installed by ODP
(Open Detector Package) package. The package contains Lua detectors and some application metadata.
Customer written detectors are stored in subdirectory ”custom” under the same base path.
[Word Count: 41]

name of ﬁle. If this conﬁguration is missing, application stats are disabled.
[Word Count: 12]

bucket size in seconds. Default 5 minutes.
Syntax
[Word Count: 8]

ﬁle size which will cause ﬁle rollover. Default 20 MB.
Syntax
[Word Count: 11]

app_stats_rollover_size <file size in bytes>
[Word Count: 5]

time since ﬁle creation which will cause rollover. Default 1 day.
Syntax
[Word Count: 12]

app_stats_rollover_time <time in seconds>
[Word Count: 4]

upper bound for memory used by AppId internal structures. Default 32MB.
Syntax
[Word Count: 12]

prints port only detectors and information on active detectors. Used for troubleshooting.
Syntax
[Word Count: 13]

Used in some old detectors for debugging.
Syntax
[Word Count: 8]

The AppId preprocessor adds 1 new rule option as follows:
[Word Count: 10]

The preprocessor must be enabled for this rule option to work.
[Word Count: 11]

The rule option allows users to customize rules to speciﬁc application in a simple manner. The option can take
up to 10 application names separated by spaces, tabs, or commas. Application names in rules are the names you
will see in last column in appMapping.data ﬁle. A rule is considered a match if one of the appId in a rule match
an appId in a session.
[Word Count: 66]

For client side packets, payloadAppId in a session is matched with all AppIds in a rule. Thereafter miscAppId,
clientAppId and serviceAppId are matched. Since Alert Events contain one AppId, only the ﬁrst match is
reported. If rule without appId option matches, then the most speciﬁc appId (in order of payload, misc, client,
server) is reported.
The same logic is followed for server side packets with one exception. Order of matching is changed to make
serviceAppId higher then clientAppId.
[Word Count: 78]

appid: http;
appid: ftp, ftp-data;
appid: cnn.com, zappos;
[Word Count: 8]

A new event type is deﬁned for logging application name in Snort Alerts in uniﬁed2 format only. These events contain
only one application name. The Events can be enabled for uniﬁed2 output using ’appid event types keyword.
[Word Count: 37]

For example, the following conﬁguration will log alert in my.alert ﬁle with application name.
[Word Count: 14]

output alert\_unified2: filename my.alert, appid\_event\_types
[Word Count: 5]

u2spewfoo, u2openappid, u2streamer tools can be used to print alerts in new format. Each event will display additional
application name at the end of the event.
[Word Count: 26]

#> u2spewfoo outputs the following event format
(Event)
sensor id: 0
event id: 6
event second: 1292962302
event microsecond: 227323
sig id: 18763
gen id: 1
revision: 4
classification: 0
priority: 0
ip source: 98.27.88.56
ip destination: 10.4.10.79
src port: 80
dest port: 54767
protocol: 6
impact\_flag: 0
blocked: 0
mpls label: 0
vland id: 0
policy id: 0
appid: zappos
[Word Count: 61]

AppId preprocessor prints application network usage periodically in snort log directory in uniﬁed2 format. File name,
time interval for statistic and ﬁle rollover are controlled by appId preprocessor conﬁguration. u2spewfoo, u2openappid,
u2streamer tools can be used to print contents of these ﬁles. An example output from u2openappid tools is as follows:
[Word Count: 51]

statTime="1292962290",appName="firefox",txBytes="9395",rxBytes="77021"
statTime="1292962290",appName="google\_analytic",txBytes="2024",rxBytes="928"
statTime="1292962290",appName="http",txBytes="28954",rxBytes="238000"
statTime="1292962290",appName="zappos",txBytes="26930",rxBytes="237072"
[Word Count: 4]

Open Detector Package (ODP) Installation
[Word Count: 5]

Application detectors from Snort team will be delivered in a separate package called Open Detector Package. ODP is
a package that contains the following artifacts:
[Word Count: 25]

1. Application detectors in Lua language.
[Word Count: 6]

2. Port detectors, which are port only application detectors, in meta-data in YAML format.
[Word Count: 14]

3. appMapping.data ﬁle containing application metadata. This ﬁle should not be modiﬁed. The ﬁrst column
contains application identiﬁer and second column contains application name. Other columns contain internal
information.
[Word Count: 29]

4. Lua library ﬁles DetectorCommon.lua, ﬂowTrackerModule.lua and hostServiceTrackerModule.lua
[Word Count: 8]

User can install ODP package in any directory of its choosing and conﬁgure this directory in app detector dir option in
appId preprocessor conﬁguration. Installing ODP will not modify any subdirectory named custom, where user-created
detectors are located.
[Word Count: 38]

When installed, ODP will create following sub-directories:
[Word Count: 7]

odp/port
//Cisco port-only detectors
odp/lua
//Cisco Lua detectors
odp/libs
//Cisco Lua modules
[Word Count: 12]

Users can create new applications by coding detectors in Lua language. Users can also copy Snort team provided
detectors into custom subdirectory and customize the detector. A document will be posted on Snort Website with
details on API usage.
[Word Count: 39]

Users must organize their Lua detectors and libraries by creating the following directory structure, under ODP instal-
lation directory.
[Word Count: 19]

custom/port
//port-only detectors
custom/lua
//Lua detectors
custom/libs
//Lua modules
[Word Count: 9]

Decoder and preprocessor rules allow one to enable and disable decoder and preprocessor events on a rule by rule
basis. They also allow one to specify the rule type or action of a decoder or preprocessor event on a rule by rule basis.
[Word Count: 43]

The decoder and preprocessor rules are located in the preproc rules/ directory in the top level source tree, and
have the names decoder.rules and preprocessor.rules respectively. These ﬁles are updated as new decoder and
preprocessor events are added to Snort. The gen-msg.map under etc directory is also updated with new decoder and
preprocessor rules.
[Word Count: 54]

To enable these rules in snort.conf, deﬁne the path to where the rules are located and uncomment the include lines
in snort.conf that reference the rules ﬁles.
[Word Count: 27]

var PREPROC_RULE_PATH /path/to/preproc_rules
...
include $PREPROC_RULE_PATH/preprocessor.rules
include $PREPROC_RULE_PATH/decoder.rules
[Word Count: 8]

To disable any rule, just comment it with a # or remove the rule completely from the ﬁle (commenting is recom-
mended).
[Word Count: 22]

To change the rule type or action of a decoder/preprocessor rule, just replace alert with the desired rule type. Any
one of the following rule types can be used:
[Word Count: 29]

alert ( msg: "DECODE_NOT_IPV4_DGRAM"; sid: 1; gid: 116; rev: 1; \
metadata: rule-type decode ; classtype:protocol-command-decode;)
[Word Count: 16]

drop ( msg: "DECODE_NOT_IPV4_DGRAM"; sid: 1; gid: 116; rev: 1; \
metadata: rule-type decode ; classtype:protocol-command-decode;)
[Word Count: 16]

to drop (as well as alert on) packets where the Ethernet protocol is IPv4 but version ﬁeld in IPv4 header has a value
other than 4.
[Word Count: 26]

See README.decode, README.gre and the various preprocessor READMEs for descriptions of the rules in decoder.rules
and preprocessor.rules.
[Word Count: 17]

The generator ids ( gid ) for different preprocessors and the decoder are as follows:
[Word Count: 15]

The following conﬁg option in snort.conf will make Snort revert to the old behavior:
[Word Count: 14]

config autogenerate_preprocessor_decoder_rules
[Word Count: 2]

Note that if you want to revert to the old behavior, you also have to remove the decoder and preprocessor rules and
any reference to them from snort.conf, otherwise they will be loaded. This option applies to rules not speciﬁed and
the default behavior is to alert.
[Word Count: 47]

Snort provides a variety of mechanisms to tune event processing to suit your needs:
[Word Count: 14]

Generator Id
Module
105
Back Oriﬁce preprocessor
106
RPC Decode preprocessor
112
Arpspoof preprocessor
116
Snort Decoder
119
HTTP Inspect preprocessor ( Client )
120
HTTP Inspect preprocessor ( Server )
122
Portscan preprocessor
123
Frag3 preprocessor
124
SMTP preprocessor
125
FTP (FTP) preprocessor
126
FTP (Telnet) preprocessor
127
ISAKMP preprocessor
128
SSH preprocessor
129
Stream preprocessor
131
DNS preprocessor
132
Skype preprocessor
133
DceRpc2 preprocessor
134
PPM preprocessor
136
Reputation preprocessor
137
SSL preprocessor
139
SDF preprocessor
140
SIP preprocessor
141
IMAP preprocessor
142
POP preprocessor
143
GTP preprocessor
[Word Count: 90]

You can use detection ﬁlters to specify a threshold that must be exceeded before a rule generates an event. This
is covered in section 3.7.7.
[Word Count: 25]

You can use rate ﬁlters to change a rule action when the number or rate of events indicates a possible attack.
[Word Count: 21]

You can use event ﬁlters to reduce the number of logged events for noisy rules. This can be tuned to signiﬁcantly
reduce false alarms.
[Word Count: 24]

You can completely suppress the logging of uninteresting events.
[Word Count: 9]

rate filter provides rate based attack prevention by allowing users to conﬁgure a new action to take for a speciﬁed
time when a given rate is exceeded. Multiple rate ﬁlters can be deﬁned on the same rule, in which case they are
evaluated in the order they appear in the conﬁguration ﬁle, and the ﬁrst applicable action is taken.
[Word Count: 59]

Rate ﬁlters are used as standalone conﬁgurations (outside of a rule) and have the following format:
[Word Count: 16]

rate_filter \
gen_id <gid>, sig_id <sid>, \
[Word Count: 7]

track <by_src|by_dst|by_rule>, \
count <c>, seconds <s>, \
new_action alert|drop|pass|log|sdrop|reject, \
timeout <seconds> \
[, apply_to <ip-list>]
[Word Count: 17]

The options are described in the table below - all are required except apply to, which is optional.
[Word Count: 18]

Option
Description
track by src | by dst |
by rule
[Word Count: 11]

Example 1 - allow a maximum of 100 connection attempts per second from any one IP address, and block further
connection attempts from that IP address for 10 seconds:
[Word Count: 29]

rate_filter \
gen_id 135, sig_id 1, \
track by_src, \
count 100, seconds 1, \
new_action drop, timeout 10
[Word Count: 19]

Example 2 - allow a maximum of 100 successful simultaneous connections from any one IP address, and block further
connections from that IP address for 10 seconds:
[Word Count: 27]

rate_filter \
gen_id 135, sig_id 2, \
track by_src, \
count 100, seconds 0, \
new_action drop, timeout 10
[Word Count: 19]

Event ﬁltering can be used to reduce the number of logged alerts for noisy rules by limiting the number of times a
particular event is logged during a speciﬁed time interval. This can be tuned to signiﬁcantly reduce false alarms.
[Word Count: 40]

Alerts on the 1st m events during the time interval, then ignores events for the rest of the time interval.
[Word Count: 20]

Alerts every m times we see this event during the time interval.
[Word Count: 12]

Alerts once per time interval after seeing m occurrences of the event, then ignores any additional events during
the time interval.
[Word Count: 21]

event_filter \
gen_id <gid>, sig_id <sid>, \
type <limit|threshold|both>, \
track <by_src|by_dst>, \
count <c>, seconds <s>
[Word Count: 17]

threshold \
gen_id <gid>, sig_id <sid>, \
type <limit|threshold|both>, \
track <by_src|by_dst>, \
count <c>, seconds <s>
[Word Count: 17]

threshold is an alias for event filter. Both formats are equivalent and support the options described below - all
are required. threshold is deprecated and will not be supported in future releases.
[Word Count: 32]

△
! NOTE
Only one event filter may be deﬁned for a given gen id, sig id. If more than one event filter is
applied to a speciﬁc gen id, sig id pair, Snort will terminate with an error while reading the conﬁguration
information.
[Word Count: 44]

Limit logging to 1 event per 60 seconds:
[Word Count: 8]

event_filter \
gen_id 1, sig_id 1851, \
type limit, track by_src,
\
count 1, seconds 60
[Word Count: 16]

event_filter \
gen_id 1, sig_id 1852,
\
type threshold, track by_src, \
count 3, seconds 60
[Word Count: 16]

Limit logging to just 1 event per 60 seconds, but only if we exceed 30 events in 60 seconds:
[Word Count: 19]

event_filter \
gen_id 1, sig_id 1853, \
type both, track by_src, \
count 30, seconds 60
[Word Count: 16]

Limit to logging 1 event per 60 seconds per IP triggering each rule (rule gen id is 1):
[Word Count: 18]

event_filter \
gen_id 1, sig_id 0, \
type limit, track by_src, \
count 1, seconds 60
[Word Count: 16]

Limit to logging 1 event per 60 seconds per IP, triggering each rule for each event generator:
[Word Count: 17]

event_filter \
gen_id 0, sig_id 0, \
type limit, track by_src, \
count 1, seconds 60
[Word Count: 16]

Events in Snort are generated in the usual way, event ﬁlters are handled as part of the output system. Read gen-
msg.map for details on gen ids.
[Word Count: 27]

Users can also conﬁgure a memcap for threshold with a “conﬁg:” option:
[Word Count: 12]

# this is deprecated:
config threshold: memcap <bytes>
[Word Count: 8]

Event suppression stops speciﬁed events from ﬁring without removing the rule from the rule base. Suppression uses
an IP list to select speciﬁc networks and users for suppression. Suppression tests are performed prior to either standard
or global thresholding tests.
[Word Count: 40]

Suppression are standalone conﬁgurations that reference generators, SIDs, and IP addresses via an IP list . This allows
a rule to be completely suppressed, or suppressed when the causative trafﬁc is going to or coming from a speciﬁc IP
or group of IP addresses.
[Word Count: 44]

You may apply multiple suppressions to a non-zero SID. You may also combine one event filter and several
suppressions to the same non-zero SID.
[Word Count: 24]

The suppress conﬁguration has two forms:
[Word Count: 6]

suppress \
gen_id <gid>, sig_id <sid>, \
track <by_src|by_dst>, ip <ip-list>
[Word Count: 11]

suppress gen_id 1, sig_id 1852, track by_src, ip 10.1.1.54
[Word Count: 9]

suppress gen_id 1, sig_id 1852, track by_dst, ip 10.1.1.0/24
[Word Count: 9]

Snort supports logging multiple events per packet/stream that are prioritized with different insertion methods, such as
max content length or event ordering using the event queue.
[Word Count: 26]

The general conﬁguration of the event queue is as follows:
[Word Count: 10]

config event_queue: [max_queue [size]] [log [size]] [order_events [TYPE]]
[Word Count: 8]

There are three conﬁguration options to the conﬁguration parameter ’event queue’.
[Word Count: 11]

This determines the maximum size of the event queue. For example, if the event queue has a max size of 8, only
8 events will be stored for a single packet or stream.
The default value is 8.
[Word Count: 38]

This determines the number of events to log for a given packet or stream. You can’t log more than the max event
number that was speciﬁed.
[Word Count: 26]

This argument determines the way that the incoming events are ordered. We currently have two different meth-
ods:
[Word Count: 18]

• priority - The highest priority (1 being the highest) events are ordered ﬁrst.
• content length - Rules are ordered before decode or preprocessor alerts, and rules that have a longer
content are ordered before rules with shorter contents.
[Word Count: 40]

The method in which events are ordered does not affect rule types such as pass, alert, log, etc.
[Word Count: 18]

config event_queue: max_queue 8 log 3 order_events content_length
[Word Count: 8]

config event_queue: max_queue 10 log 3 order_events content_length
[Word Count: 8]

Use the default event queue values, but change event order:
[Word Count: 10]

config event_queue: order_events priority
[Word Count: 4]

Use the default event queue values but change the number of logged events:
[Word Count: 13]

Snort supports logging additional information to a ﬁle about the events it is generating relative to speciﬁc blocks of
data that are matching the rule. The blocks of data logged include information about the event, the GID, SID, and
other data related to the event itself, plus packet data including sizes, timestamps, raw, normalized, and decompressed
buffers extracted from the packet that may have been used in evaluating the rule. The amount of packet data written is
limited with each entry. This is useful in debugging rules.
[Word Count: 87]

The config option event trace to snort.conf provides this control.
[Word Count: 10]

The general conﬁguration for event tracing is as follows:
[Word Count: 9]

config event_trace: [file <filename>] [max_data <int>]
[Word Count: 6]

The are two conﬁguration options for event trace.
[Word Count: 8]

This sets the ﬁle name into which the trace data is written, within Snort’s log directory (see -l command line
option).
[Word Count: 21]

This speciﬁes the maximum number of bytes from each buffer of data to write into the ﬁle.
[Word Count: 17]

The default is 64 bytes and valid values range from 1 to 65535 bytes.
[Word Count: 14]

config event_trace: file event_trace.txt max_data 64
[Word Count: 6]

Use the default ﬁle, but change the amount of data logged:
[Word Count: 11]

Change the ﬁle name to which event traces are logged:
[Word Count: 10]

config event_trace: file snort_event_trace.out
[Word Count: 4]

Snort can provide statistics on rule and preprocessor performance. Each require only a simple config option to
snort.conf and Snort will print statistics on the worst (or all) performers on exit. When a ﬁle name is provided in
profile rules or profile preprocs, the statistics will be saved in these ﬁles. If append is not speciﬁed, a new
ﬁle will be created each time Snort is run. The ﬁlenames will have timestamps appended to them. These ﬁles will be
found in the logging directory.
[Word Count: 84]

To use this feature, you must build snort with the --enable-perfprofiling option to the conﬁgure script.
[Word Count: 16]

config profile_rules: \
print [all | <num>], \
sort <sort_option> \
[,filename <filename> [append]]
[Word Count: 14]

• [append] dictates that the output will go to the same ﬁle each time (optional)
[Word Count: 15]

• Print all rules, sort by avg ticks (default conﬁguration if option is turned on)
[Word Count: 15]

• Print all rules, sort by avg ticks, and append to ﬁle rules stats.txt
[Word Count: 14]

config profile rules:
filename rules stats.txt append
[Word Count: 7]

• Print the top 10 rules, based on highest average time
[Word Count: 11]

config profile rules:
print 10, sort avg ticks
[Word Count: 8]

• Print all rules, sorted by number of checks
[Word Count: 9]

config profile rules:
print all, sort checks
[Word Count: 7]

• Print top 100 rules, based on total time
[Word Count: 9]

config profile rules:
print 100, sort total ticks
[Word Count: 8]

• Print with default options, save results to performance.txt each time
[Word Count: 11]

config profile rules:
filename performance.txt append
[Word Count: 6]

• Print top 20 rules, save results to perf.txt with timestamp in ﬁlename
[Word Count: 13]

config profile rules:
print 20, filename perf.txt
[Word Count: 7]

Rule Profile Statistics (worst 4 rules)
==========================================================
Num
SID GID Rev
Checks
Matches
Alerts
Ticks Avg/Check
Avg/Match Avg/Nonmatch
===
=== === ===
======
=======
======
===== =========
========= ============
1
2389
1
12
1
1
1
385698
385698.0
385698.0
0.0
2
2178
1
17
2
0
0
107822
53911.0
0.0
53911.0
3
2179
1
8
2
0
0
92458
46229.0
0.0
46229.0
4
1734
1
37
2
0
0
90054
45027.0
0.0
45027.0
[Word Count: 73]

Figure 2.1: Rule Proﬁling Example Output
[Word Count: 6]

Snort will print a table much like the following at exit.
[Word Count: 11]

Conﬁguration line used to print the above table:
[Word Count: 8]

config profile rules:
print 4, sort total ticks
[Word Count: 8]

• Checks (number of times rule was evaluated after fast pattern match within portgroup or any->any rules)
[Word Count: 17]

• Matches (number of times ALL rule options matched, will be high for rules that have no options)
[Word Count: 18]

• Alerts (number of alerts generated from this rule)
[Word Count: 9]

Interpreting this info is the key. The Microsecs (or Ticks) column is important because that is the total time spent
evaluating a given rule. But, if that rule is causing alerts, it makes sense to leave it alone.
[Word Count: 38]

A high Avg/Check is a poor performing rule, that most likely contains PCRE. High Checks and low Avg/Check is
usually an any->any rule with few rule options and no content. Quick to check, the few options may or may not match.
We are looking at moving some of these into code, especially those with low SIDs.
[Word Count: 56]

By default, this information will be printed to the console when Snort exits. You can use the ”ﬁlename” option in
snort.conf to specify a ﬁle where this will be written. If ”append” is not speciﬁed, a new ﬁle will be created each time
Snort is run. The ﬁlenames will have timestamps appended to them. These ﬁles will be found in the logging directory.
[Word Count: 63]

config profile_preprocs: \
print [all | <num>], \
sort <sort_option> \
[, filename <filename> [append]]
[Word Count: 15]

• <num> is the number of preprocessors to print
[Word Count: 9]

• [append] dictates that the output will go to the same ﬁle each time (optional)
[Word Count: 15]

• Print all preprocessors, sort by avg ticks (default conﬁguration if option is turned on)
[Word Count: 15]

• Print all preprocessors, sort by avg ticks, and append to ﬁle preprocs stats.txt
[Word Count: 14]

config profile preprocs:
filename preprocs stats.txt append
[Word Count: 7]

• Print the top 10 preprocessors, based on highest average time
[Word Count: 11]

config profile preprocs:
print 10, sort avg ticks
[Word Count: 8]

• Print all preprocessors, sorted by number of checks
[Word Count: 9]

config profile preprocs:
print all, sort checks
[Word Count: 7]

Snort will print a table much like the following at exit.
[Word Count: 11]

Conﬁguration line used to print the above table:
[Word Count: 8]

config profile_preprocs: \
print 10, sort total_ticks
[Word Count: 7]

• Number (rank) - The number is indented for each layer. Layer 1 preprocessors are listed under their respective
caller (and sorted similarly).
[Word Count: 23]

• Layer - When printing a speciﬁc number of preprocessors all subtasks info for a particular preprocessor is
printed for each layer 0 preprocessor stat.
[Word Count: 25]

• Checks (number of times preprocessor decided to look at a packet, ports matched, app layer header was correct,
etc)
[Word Count: 20]

• Exits (number of corresponding exits – just to verify code is instrumented correctly, should ALWAYS match
Checks, unless an exception was trapped)
[Word Count: 23]

• Percent of caller - For non layer 0 preprocessors, i.e. subroutines within preprocessors, this identiﬁes the percent
of the caller’s ticks that is spent for this subtask.
[Word Count: 28]

Because of task swapping, non-instrumented code, and other factors, the Pct of Caller ﬁeld will not add up to 100%
of the caller’s time. It does give a reasonable indication of how much relative time is spent within each subtask.
[Word Count: 40]

By default, this information will be printed to the console when Snort exits. You can use the ”ﬁlename” option in
snort.conf to specify a ﬁle where this will be written. If ”append” is not speciﬁed, a new ﬁle will be created each time
Snort is run. The ﬁlenames will have timestamps appended to them. These ﬁles will be found in the logging directory.
[Word Count: 63]

Figure 2.2: Preprocessor Proﬁling Example Output
[Word Count: 6]

2.5.3
Packet Performance Monitoring (PPM)
[Word Count: 5]

PPM provides thresholding mechanisms that can be used to provide a basic level of latency control for snort. It does
not provide a hard and fast latency guarantee but should in effect provide a good average latency control. Both rules
and packets can be checked for latency. The action taken upon detection of excessive latency is conﬁgurable. The
following sections describe conﬁguration, sample output, and some implementation details worth noting.
[Word Count: 70]

To use PPM, you must build with the –enable-ppm or the –enable-sourceﬁre option to conﬁgure.
[Word Count: 15]

# Packet configuration:
config ppm: max-pkt-time <micro-secs>, \
fastpath-expensive-packets, \
pkt-log, \
debug-pkts
[Word Count: 13]

# Rule configuration:
config ppm: max-rule-time <micro-secs>, \
threshold count, \
suspend-expensive-rules, \
suspend-timeout <seconds>, \
rule-log [log] [alert]
[Word Count: 19]

Packets and rules can be conﬁgured separately, as above, or together in just one conﬁg ppm statement. Packet and rule
monitoring is independent, so one or both or neither may be enabled.
[Word Count: 32]

• enables packet latency thresholding using ’micros-secs’ as the limit.
[Word Count: 10]

• default is 0 (packet latency thresholding disabled)
[Word Count: 8]

• reasonable starting defaults: 100/250/1000 for 1G/100M/5M nets
[Word Count: 8]

• enables stopping further inspection of a packet if the max time is exceeded
[Word Count: 14]

• enables logging packet event if packet exceeds max-pkt-time
[Word Count: 9]

• if no option is given for ’pkt-log’, ’pkt-log log’ is implied
[Word Count: 12]

• the log option enables output to syslog or console depending upon snort conﬁguration
[Word Count: 14]

• must build with the –enable-debug option to conﬁgure
[Word Count: 9]

• enables per packet timing stats to be printed after each packet
[Word Count: 12]

• enables rule latency thresholding using ’micros-secs’ as the limit.
[Word Count: 10]

• default is 0 (rule latency thresholding disabled)
[Word Count: 8]

• reasonable starting defaults: 100/250/1000 for 1G/100M/5M nets
[Word Count: 8]

• sets the number of cumulative rule time excesses before disabling a rule
[Word Count: 13]

• enables suspending rule inspection if the max rule time is exceeded
[Word Count: 12]

• set to zero to permanently disable expensive rules
[Word Count: 9]

• enables event logging output for rules
[Word Count: 7]

• one or both of the options ’log’ and ’alert’ must be used with ’rule-log’
[Word Count: 15]

• the log option enables output to syslog or console depending upon snort conﬁguration
[Word Count: 14]

Example 1: The following enables packet tracking:
[Word Count: 7]

config ppm: max-rule-time 50, threshold 5
[Word Count: 6]

If fastpath-expensive-packets or suspend-expensive-rules is not used, then no action is taken other than to increment
the count of the number of packets that should be fastpath’d or the rules that should be suspended. A summary of this
information is printed out when snort exits.
[Word Count: 45]

The following suspends rules and aborts packet inspection. These rules were used to generate the sample output that
follows.
[Word Count: 19]

config ppm: \
max-pkt-time 50, fastpath-expensive-packets, \
pkt-log, debug-pkts
[Word Count: 9]

config ppm: \
max-rule-time 50, threshold 5, suspend-expensive-rules, \
suspend-timeout 300, rule-log log alert
[Word Count: 14]

Packet Performance Monitor Config:
ticks per usec
: 1600 ticks
max packet time : 50 usecs
packet action
: fastpath-expensive-packets
packet logging
: log
debug-pkts
: disabled
[Word Count: 27]

Rule Performance Monitor Config:
ticks per usec
: 1600 ticks
max rule time
: 50 usecs
rule action
: suspend-expensive-rules
rule threshold
: 5
suspend timeout : 300 secs
rule logging
: alert log
[Word Count: 34]

...
PPM: Process-BeginPkt[61] caplen=60
PPM: Pkt[61] Used= 8.15385 usecs
PPM: Process-EndPkt[61]
[Word Count: 11]

PPM: Process-BeginPkt[62] caplen=342
PPM: Pkt[62] Used= 65.3659 usecs
PPM: Process-EndPkt[62]
[Word Count: 10]

PPM: Pkt-Event Pkt[63] used=56.0438 usecs, 0 rules, 1 nc-rules tested, packet fastpathed
(10.4.12.224:0 -> 10.4.14.108:54321).
PPM: Process-BeginPkt[63] caplen=60
PPM: Pkt[63] Used= 8.394 usecs
PPM: Process-EndPkt[63]
[Word Count: 25]

PPM: Process-BeginPkt[64] caplen=60
PPM: Pkt[64] Used= 8.21764 usecs
PPM: Process-EndPkt[64]
...
[Word Count: 11]

Packet Performance Summary:
max packet time
: 50 usecs
packet events
: 1
avg pkt time
: 0.633125 usecs
[Word Count: 19]

Rule Performance Summary:
max rule time
: 50 usecs
rule events
: 0
avg nc-rule time
: 0.2675 usecs
[Word Count: 19]

• Enforcement of packet and rule processing times is done after processing each rule. Latency control is not
enforced after each preprocessor.
[Word Count: 22]

• This implementation is software based and does not use an interrupt driven timing mechanism and is therefore
subject to the granularity of the software based timing tests. Due to the granularity of the timing measurements
any individual packet may exceed the user speciﬁed packet or rule processing time limit. Therefore this imple-
mentation cannot implement a precise latency guarantee with strict timing guarantees. Hence the reason this is
considered a best effort approach.
[Word Count: 74]

• Since this implementation depends on hardware based high performance frequency counters, latency threshold-
ing is presently only available on Intel and PPC platforms.
[Word Count: 24]

• Time checks are made based on the total system time, not processor usage by Snort. This was a conscious design
decision because when a system is loaded, the latency for a packet is based on the total system time, not just the
processor time the Snort application receives. Therefore, it is recommended that you tune your thresholding to
operate optimally when your system is under load.
[Word Count: 67]

Output modules are new as of version 1.6. They allow Snort to be much more ﬂexible in the formatting and presentation
of output to its users. The output modules are run when the alert or logging subsystems of Snort are called, after
the preprocessors and detection engine. The format of the directives in the conﬁg ﬁle is very similar to that of the
preprocessors.
[Word Count: 64]

Multiple output plugins may be speciﬁed in the Snort conﬁguration ﬁle. When multiple plugins of the same type (log,
alert) are speciﬁed, they are stacked and called in sequence when an event occurs. As with the standard logging and
alerting systems, output plugins send their data to /var/log/snort by default or to a user directed directory (using the -l
command line switch).
[Word Count: 62]

Output modules are loaded at runtime by specifying the output keyword in the conﬁg ﬁle:
[Word Count: 15]

This module sends alerts to the syslog facility (much like the -s command line switch). This module also allows the
user to specify the logging facility and priority within the Snort conﬁg ﬁle, giving users greater ﬂexibility in logging
alerts.
[Word Count: 40]

alert_syslog: \
<facility> <priority> <options>
[Word Count: 5]

△
! NOTE
As WIN32 does not run syslog servers locally by default, a hostname and port can be passed as options. The
default host is 127.0.0.1. The default port is 514.
[Word Count: 32]

output alert_syslog: \
[host=<hostname[:<port>],] \
<facility> <priority> <options>
[Word Count: 8]

output alert_syslog: host=10.1.1.1:514, <facility> <priority> <options>
[Word Count: 6]

This will print Snort alerts in a quick one-line format to a speciﬁed output ﬁle. It is a faster alerting method than full
alerts because it doesn’t need to print all of the packet headers to the output ﬁle and because it logs to only 1 ﬁle.
[Word Count: 47]

output alert_fast: [<filename> ["packet"] [<limit>]]
<limit> ::= <number>[(’G’|’M’|K’)]
[Word Count: 8]

• filename: the name of the log ﬁle. The default name is <logdir>/alert. You may specify ”stdout” for terminal
output. The name may include an absolute or relative path.
[Word Count: 29]

• packet: this option will cause multiline entries with full packet headers to be logged. By default, only brief
single-line entries are logged.
[Word Count: 23]

• limit: an optional limit on ﬁle size which defaults to 128 MB. The minimum is 1 KB. See 2.6.9 for more
information.
[Word Count: 23]

This will print Snort alert messages with full packet headers. The alerts will be written in the default logging directory
(/var/log/snort) or in the logging directory speciﬁed at the command line.
[Word Count: 31]

Inside the logging directory, a directory will be created per IP. These ﬁles will be decoded packet dumps of the packets
that triggered the alerts. The creation of these ﬁles slows Snort down considerably. This output method is discouraged
for all but the lightest trafﬁc situations.
[Word Count: 46]

output alert_full: [<filename> [<limit>]]
<limit> ::= <number>[(’G’|’M’|K’)]
[Word Count: 7]

• filename: the name of the log ﬁle. The default name is <logdir>/alert. You may specify ”stdout” for terminal
output. The name may include an absolute or relative path.
[Word Count: 29]

• limit: an optional limit on ﬁle size which defaults to 128 MB. The minimum is 1 KB. See 2.6.9 for more
information.
[Word Count: 23]

Sets up a UNIX domain socket and sends alert reports to it. External programs/processes can listen in on this socket
and receive Snort alert and packet data in real time.
[Word Count: 30]

△
! NOTE
On FreeBSD, the default sysctl value for net.local.dgram.recvspace is too low for alert unixsock
datagrams and you will likely not receive any data. You can change this value after booting by running:
[Word Count: 35]

$ sudo sysctl net.local.dgram.recvspace=100000
[Word Count: 4]

To have this value set on each boot automatically, add the following to /etc/sysctl.conf:
[Word Count: 14]

Note that the value of 100000 may be slightly generous, but the value should be at least 65864.
[Word Count: 18]

The log tcpdump module logs packets to a tcpdump-formatted ﬁle. This is useful for performing post-process analysis
on collected trafﬁc with the vast number of tools that are available for examining tcpdump-formatted ﬁles.
[Word Count: 33]

output log_tcpdump: [<filename> [<limit>]]
<limit> ::= <number>[(’G’|’M’|K’)]
[Word Count: 7]

• filename: the name of the log ﬁle. The default name is <logdir>/snort.log. The name may include an absolute
or relative path. A UNIX timestamp is appended to the ﬁlename.
[Word Count: 30]

• limit: an optional limit on ﬁle size which defaults to 128 MB. When a sequence of packets is to be logged, the
aggregate size is used to test the rollover condition. See 2.6.9 for more information.
[Word Count: 37]

The csv output plugin allows alert data to be written in a format easily importable to a database. The output ﬁelds and
their order may be customized.
[Word Count: 27]

output alert_csv: [<filename> [<format> [<limit>]]]
<format> ::= "default"|<list>
<list> ::= <field>(,<field>)*
<field> ::= "dst"|"src"|"ttl" ...
<limit> ::= <number>[(’G’|’M’|K’)]
[Word Count: 18]

• filename: the name of the log ﬁle. The default name is <logdir>/alert.csv. You may specify ”stdout” for
terminal output. The name may include an absolute or relative path.
[Word Count: 29]

• format: The list of formatting options is below. If the formatting option is ”default”, the output is in the order
of the formatting options listed.
[Word Count: 26]

• limit: an optional limit on ﬁle size which defaults to 128 MB. The minimum is 1 KB. See 2.6.9 for more
information.
[Word Count: 23]

output alert_csv: /var/log/alert.csv default
[Word Count: 4]

output alert_csv: /var/log/alert.csv timestamp, msg
[Word Count: 5]

Uniﬁed2 can work in one of three modes, packet logging, alert logging, or true uniﬁed logging. Packet logging includes
a capture of the entire packet and is speciﬁed with log unified2. Likewise, alert logging will only log events and is
speciﬁed with alert unified2. To include both logging styles in a single, uniﬁed ﬁle, simply specify unified2.
[Word Count: 57]

When MPLS support is turned on, MPLS labels can be included in uniﬁed2 events. Use option mpls event types to
enable this. If option mpls event types is not used, then MPLS labels will be not be included in uniﬁed2 events.
△
! NOTE
By default, uniﬁed 2 ﬁles have the ﬁle creation time (in Unix Epoch format) appended to each ﬁle when it is
created.
[Word Count: 66]

output alert_unified2: \
filename <base filename> [, <limit <size in MB>] [, nostamp] [, mpls_event_types] \
[, vlan_event_types]
[Word Count: 18]

output log_unified2: \
filename <base filename> [, <limit <size in MB>] [, nostamp]
[Word Count: 13]

output unified2: \
filename <base file name> [, <limit <size in MB>] [, nostamp] [, mpls_event_types] \
[, vlan_event_types]
[Word Count: 19]

output alert_unified2: filename snort.alert, limit 128, nostamp
output log_unified2: filename snort.log, limit 128, nostamp
output unified2: filename merged.log, limit 128, nostamp
output unified2: filename merged.log, limit 128, nostamp, mpls_event_types
output unified2: filename merged.log, limit 128, nostamp, vlan_event_types
[Word Count: 37]

Uniﬁed2 also has logging support for various extra data. The following conﬁguration items will enable these extra
data logging facilities.
[Word Count: 20]

This option enables Snort to log IPv6 source and destination address as uniﬁed2 extra data events.
[Word Count: 16]

This option enables HTTP Inspect to parse and log the original client IP present in the X-Forwarded-For, True-Client-
IP, or custom HTTP request headers along with the generated events.
[Word Count: 29]

This option enables HTTP Inspect to parse and log the URI data from the HTTP request and log it along with all the
generated events for that session.
[Word Count: 28]

This option enables HTTP Inspect to parse and log the Host header data from the HTTP request and log it along with
all the generated events for that session.
[Word Count: 29]

This option enables HTTP Inspect to parse and log the Host header data from the HTTP request and log it along with
all the generated events for that session.
[Word Count: 29]

This option enables SMTP preprocessor to parse and log the senders email address extracted from the ”MAIL FROM”
command along with all the generated events for that session.
[Word Count: 28]

This option enables SMTP preprocessor to parse and log the recipients email address extracted from the ”RCPT TO”
command along with all the generated events for that session.
[Word Count: 28]

This option enables SMTP preprocessor to parse and log the MIME attachment ﬁlenames extracted from the Content-
Disposition header within the MIME body along with all the generated events for that session.
[Word Count: 32]

This option enables SMTP preprocessor to parse and log the SMTP email headers extracted from the SMTP data along
with all the generated events for that session.
[Word Count: 27]

U2SpewFoo is a lightweight tool for dumping the contents of uniﬁed2 ﬁles to stdout.
[Word Count: 14]

(Event)
sensor id: 0
event id: 4 event second: 1299698138
event microsecond: 146591
sig id: 1
gen id: 1
revision: 0
classification: 0
priority: 0 ip source: 10.1.2.3 ip destination: 10.9.8.7
src port: 60710 dest port: 80
protocol: 6 impact_flag: 0
blocked: 0
[Word Count: 43]

Packet
sensor id: 0
event id: 4 event second: 1299698138
packet second: 1299698138
packet microsecond: 146591
linktype: 1 packet_length: 54
[
0] 02 09 08 07 06 05 02 01 02 03 04 05 08 00 45 00
..............E.
[
16] 00 28 00 06 00 00 40 06 5C B7 0A 01 02 03 0A 09
.(....@.\.......
[
32] 08 07 ED 26 00 50 00 00 00 62 00 00 00 2D 50 10
...&.P...b...-P.
[
48] 01 00 A2 BB 00 00
......
[Word Count: 86]

(ExtraDataHdr)
event type: 4
event length: 33
[Word Count: 7]

(ExtraData)
sensor id: 0
event id: 2 event second: 1299698138
type: 9 datatype: 1 bloblength: 9
HTTP URI: /
[Word Count: 19]

(ExtraDataHdr)
event type: 4
event length: 78
[Word Count: 7]

(ExtraData)
sensor id: 0
event id: 2 event second: 1299698138
type: 10
datatype: 1 bloblength: 12
HTTP Hostname: example.com
[Word Count: 19]

U2boat is a tool for converting uniﬁed2 ﬁles into different formats.
[Word Count: 11]

Currently supported conversion formats are: pcap
[Word Count: 6]

Sometimes it is useful to be able to create rules that will alert to certain types of trafﬁc but will not cause packet log
entries. In Snort 1.8.2, the log null plugin was introduced. This is equivalent to using the -n command line option but
it is able to work within a ruletype.
[Word Count: 53]

ruletype info {
type alert
output alert_fast: info.alert
output log_null
}
[Word Count: 11]

This section pertains to logs produced by alert fast, alert full, alert csv, and log tcpdump. unified2 also
may be given limits. Those limits are described in the respective sections.
[Word Count: 30]

When a conﬁgured limit is reached, the current log is closed and a new log is opened with a UNIX timestamp appended
to the conﬁgured log name.
[Word Count: 27]

<limit> ::= <number>[(<gb>|<mb>|<kb>)]
<gb> ::= ’G’|’g’
<mb> ::= ’M’|’m’
<kb> ::= ’K’|’k’
[Word Count: 12]

Rollover will occur at most once per second so if limit is too small for logging rate, limit will be exceeded. Rollover
works correctly if snort is stopped/restarted.
[Word Count: 28]

In rule evaluation, service information can be used instead of the ports when the metadata service(s) in the rule matches
the service corresponding to the trafﬁc. If the rule does not have metadata service(s), or the packet service was not
matched then the port checks are used exclusively.
[Word Count: 48]

attribute_table filename <PATH/TO/HOSTS.XML>
[Word Count: 3]

The attribute table uses an XML format and consists of two sections, a mapping section, used to reduce the size of the
ﬁle for common data elements, and the host attribute section. The mapping section is optional.
[Word Count: 37]

Provided below is an example attribute table
[Word Count: 7]

<SNORT_ATTRIBUTES>
<ATTRIBUTE_MAP>
<ENTRY>
<ID>1</ID>
<VALUE>Linux</VALUE>
</ENTRY>
<ENTRY>
<ID>2</ID>
<VALUE>ssh</VALUE>
</ENTRY>
</ATTRIBUTE_MAP>
<ATTRIBUTE_TABLE>
<HOST>
<IP>192.168.1.234</IP>
<OPERATING_SYSTEM>
<NAME>
<ATTRIBUTE_ID>1</ATTRIBUTE_ID>
<CONFIDENCE>100</CONFIDENCE>
</NAME>
<VENDOR>
<ATTRIBUTE_VALUE>Red Hat</ATTRIBUTE_VALUE>
<CONFIDENCE>99</CONFIDENCE>
</VENDOR>
<VERSION>
<ATTRIBUTE_VALUE>2.6</ATTRIBUTE_VALUE>
<CONFIDENCE>98</CONFIDENCE>
</VERSION>
<FRAG_POLICY>linux</FRAG_POLICY>
<STREAM_POLICY>linux</STREAM_POLICY>
</OPERATING_SYSTEM>
<SERVICES>
<SERVICE>
<PORT>
<ATTRIBUTE_VALUE>22</ATTRIBUTE_VALUE>
<CONFIDENCE>100</CONFIDENCE>
</PORT>
<IPPROTO>
<ATTRIBUTE_VALUE>tcp</ATTRIBUTE_VALUE>
<CONFIDENCE>100</CONFIDENCE>
</IPPROTO>
<PROTOCOL>
<ATTRIBUTE_ID>2</ATTRIBUTE_ID>
<CONFIDENCE>100</CONFIDENCE>
</PROTOCOL>
<APPLICATION>
<ATTRIBUTE_VALUE>OpenSSH</ATTRIBUTE_VALUE>
<CONFIDENCE>100</CONFIDENCE>
<VERSION>
<ATTRIBUTE_VALUE>3.9p1</ATTRIBUTE_VALUE>
<CONFIDENCE>93</CONFIDENCE>
</VERSION>
</APPLICATION>
</SERVICE>
<SERVICE>
<PORT>
<ATTRIBUTE_VALUE>2300</ATTRIBUTE_VALUE>
<CONFIDENCE>100</CONFIDENCE>
[Word Count: 58]

</PORT>
<IPPROTO>
<ATTRIBUTE_VALUE>tcp</ATTRIBUTE_VALUE>
<CONFIDENCE>100</CONFIDENCE>
</IPPROTO>
<PROTOCOL>
<ATTRIBUTE_VALUE>telnet</ATTRIBUTE_VALUE>
<CONFIDENCE>100</CONFIDENCE>
</PROTOCOL>
<APPLICATION>
<ATTRIBUTE_VALUE>telnet</ATTRIBUTE_VALUE>
<CONFIDENCE>50</CONFIDENCE>
</APPLICATION>
</SERVICE>
</SERVICES>
<CLIENTS>
<CLIENT>
<IPPROTO>
<ATTRIBUTE_VALUE>tcp</ATTRIBUTE_VALUE>
<CONFIDENCE>100</CONFIDENCE>
</IPPROTO>
<PROTOCOL>
<ATTRIBUTE_VALUE>http</ATTRIBUTE_VALUE>
<CONFIDENCE>91</CONFIDENCE>
</PROTOCOL>
<APPLICATION>
<ATTRIBUTE_VALUE>IE Http Browser</ATTRIBUTE_VALUE>
<CONFIDENCE>90</CONFIDENCE>
<VERSION>
<ATTRIBUTE_VALUE>6.0</ATTRIBUTE_VALUE>
<CONFIDENCE>89</CONFIDENCE>
</VERSION>
</APPLICATION>
</CLIENT>
</CLIENTS>
</HOST>
</ATTRIBUTE_TABLE>
</SNORT_ATTRIBUTES>
[Word Count: 40]

A DTD for veriﬁcation of the Host Attribute Table XML ﬁle is provided with the snort packages.
[Word Count: 17]

The conﬁdence metric may be used to indicate the validity of a given service or client application and its respective
elements. That ﬁeld is not currently used by Snort, but may be in future releases.
△
! NOTE
Snort requires that the ﬁle be a properly formatted schema of the format deﬁned above. Empty or incorrectly
formatted ﬁles will likely cause a Fatal Error.
[Word Count: 64]

In the example above, a host running Red Hat 2.6 is described. This host has an IP address of 192.168.1.234. On that
host, TCP port 22 is ssh (running Open SSH), and TCP port 2300 is telnet.
[Word Count: 37]

The IP fragmentation and TCP stream reassembly is mimicked by the ”linux” conﬁguration (see sections 2.2.1 and
2.2.3).
[Word Count: 18]

2.7.5
Attribute Table Affect on preprocessors
[Word Count: 6]

Each of the network layer preprocessors (frag3 and stream5) make use of the respective FRAG POLICY and
STREAM POLICY in terms of how data is handled for reassembly for packets being received by that host.
[Word Count: 35]

The application layer preprocessors (HTTP, SMTP, FTP, Telnet, etc) make use of the SERVICE information for
connections destined to that host on that port.
[Word Count: 24]

For example, even if the telnet portion of the FTP/Telnet preprocessor is only conﬁgured to inspect port 23,
Snort will inspect packets for a connection to 192.168.1.234 port 2300 as telnet.
[Word Count: 31]

Conversely, if, for example, HTTP Inspect is conﬁgured to inspect trafﬁc on port 2300, HTTP Inspect will NOT
process the packets on a connection to 192.168.1.234 port 2300 because it is identiﬁed as telnet.
[Word Count: 34]

Below is a list of the common services used by Snort’s application layer preprocessors and Snort rules (see below).
[Word Count: 19]

http
ftp
ftp-data
telnet
smtp
ssh
tftp
dcerpc
netbios-dgm
netbios-ns
netbios-ssn
nntp
ﬁnger
sunrpc
dns
isakmp
mysql
oracle
cvs
shell
x11
imap
pop2
pop3
snmp
[Word Count: 25]

Snort uses service information in two ways; initialization of detection engine and as a detection criteria. To take
advantage of this, Snort rules must contain the metadata:
service SERVICE convention speciﬁed. During rule
evaluation the default behavior will check ﬁrst that the packet has been matched to a service, and then check that the
packet’s service matches the service(s) speciﬁed in the rule; if both these checks passed then Snort will disable source
and destination port checks for the rule.
[Word Count: 80]

Snort 2.9.8 provides new functionality to control how rules use service information known as ”service overrides”.
Service overrides are speciﬁed in the same way that services are speciﬁed in the rule, or more simply as a ”reserved”
SERVICE. The table below deﬁnes the new reserved service override names.
[Word Count: 48]

• Packet service must match one of the rule services.
[Word Count: 10]

• Packet must match the ports speciﬁed in the rule header.
[Word Count: 11]

• Packet service is set and it matches one of the rule services (skipping port
checks).
[Word Count: 16]

• Packet service is set but it DOES NOT match one of the rule services; packet
must match the ports speciﬁed in the rule header.
[Word Count: 25]

• Packet service is NOT set, only perform port checks.
[Word Count: 10]

• Packet service is set, packet must match one of the rule services.
[Word Count: 13]

• Packet service is NOT set; then packet must match the ports speciﬁed in the
rule header.
[Word Count: 17]

This is the default behavior of a rule containing metadata service information.
service unknown
The keyword ”unknown” is an alias for ”service else-ports” above. It is intended
for use in rules that do not contain metadata service information (port only rules).
When used in a rule that doesn’t otherwise contain metadata (rule only speciﬁes
ports), the evaluation is:
[Word Count: 58]

• Packet service must NOT be set; then match ports.
[Word Count: 10]

Dynamically loadable modules were introduced with Snort 2.6. They can be loaded via directives in snort.conf or
via command-line options.
[Word Count: 20]

Syntax
Description
dynamicpreprocessor [ file
<shared library path> |
directory <directory of
shared libraries> ]
[Word Count: 15]

Tells snort to load the dynamic preprocessor shared library (if
ﬁle is used) or all dynamic preprocessor shared libraries (if di-
rectory is used).
Specify file,
followed by the full or rel-
ative path to the shared library.
Or, specify directory,
fol-
lowed by the full or relative path to a directory of preprocessor
shared libraries.
(Same effect as --dynamic-preprocessor-lib or
--dynamic-preprocessor-lib-dir options). See chapter 4 for more
information on dynamic preprocessor libraries.
dynamicengine [ file <shared
library path> | directory
<directory of shared
libraries> ]
[Word Count: 86]

Tells snort to load the dynamic engine shared library (if ﬁle is used) or
all dynamic engine shared libraries (if directory is used). Specify file,
followed by the full or relative path to the shared library. Or, specify
directory, followed by the full or relative path to a directory of pre-
processor shared libraries. (Same effect as --dynamic-engine-lib or
--dynamic-preprocessor-lib-dir options). See chapter 4 for more
information on dynamic engine libraries.
dynamicdetection [ file
<shared library path> |
directory <directory of
shared libraries> ]
[Word Count: 84]

Tells snort to load the dynamic detection rules shared library (if ﬁle
is used) or all dynamic detection rules shared libraries (if directory
is used).
Specify file, followed by the full or relative path to the
shared library. Or, specify directory, followed by the full or relative
path to a directory of detection rules shared libraries. (Same effect as
--dynamic-detection-lib or --dynamic-detection-lib-dir op-
tions). See chapter 4 for more information on dynamic detection rules
libraries.
[Word Count: 75]

To enable support for reloading a conﬁguration, add --enable-reload to conﬁgure when compiling.
[Word Count: 13]

There is also an ancillary option that determines how Snort should behave if any non-reloadable options are changed
(see section 2.9.3 below). This option is enabled by default and the behavior is for Snort to restart if any non-
reloadable options are added/modiﬁed/removed. To disable this behavior and have Snort exit instead of restart, add
--disable-reload-error-restart in addition to --enable-reload to conﬁgure when compiling.
△
! NOTE
This functionality is not currently supported in Windows.
Caveat : When Snort is run on the primary network interface of an OpenBSD system, the reload and failopen
operations may not function as expected.
[Word Count: 100]

First modify your snort.conf (the ﬁle passed to the -c option on the command line).
[Word Count: 15]

Then, to initiate a reload, send Snort a SIGHUP signal, e.g.
[Word Count: 11]

△
! NOTE
If reload support is not enabled, Snort will restart (as it always has) upon receipt of a SIGHUP.
[Word Count: 21]

△
! NOTE
An invalid conﬁguration will still result in a fatal error, so you should test your new conﬁguration before
issuing a reload, e.g. $ snort -c snort.conf -T
[Word Count: 30]

2.9.3
Non-reloadable conﬁguration options
[Word Count: 4]

There are a number of option changes that are currently non-reloadable because they require changes to output, startup
memory allocations, etc. Modifying any of these options will cause Snort to restart (as a SIGHUP previously did) or
exit (if --disable-reload-error-restart was used to conﬁgure Snort).
[Word Count: 45]

Reloadable conﬁguration options of note:
[Word Count: 5]

• Adding/modifying/removing text rules and variables are reloadable.
[Word Count: 8]

• Adding/modifying/removing preprocessor conﬁgurations are reloadable (except as noted below).
[Word Count: 10]

Non-reloadable conﬁguration options of note:
[Word Count: 5]

• Adding/modifying/removingshared objects via dynamicdetection, dynamicengine and dynamicpreprocessorare
not reloadable, i.e. any new/modiﬁed/removed shared objects will require a restart.
[Word Count: 19]

• Any changes to output will require a restart.
[Word Count: 9]

Changes to the following options are not reloadable:
[Word Count: 8]

attribute_table
config alertfile
config asn1
config chroot
config daemon
config detection_filter
config flowbits_size
config interface
config logdir
config max_attribute_hosts
config max_attribute_services_per_host
config nolog
config no_promisc
config pkt_count
config rate_filter
config response
config set_gid
config set_uid
config snaplen
config threshold
dynamicdetection
dynamicengine
dynamicpreprocessor
output
[Word Count: 43]

In certain cases, only some of the parameters to a conﬁg option or preprocessor conﬁguration are not reloadable.
Those parameters are listed below the relevant conﬁg option or preprocessor.
[Word Count: 29]

config ppm: max-rule-time <int>
rule-log
config profile_rules
filename
print
sort
config profile_preprocs
filename
print
sort
preprocessor dcerpc2
memcap
preprocessor frag3_global
max_frags
memcap
prealloc_frags
prealloc_memcap
disabled
preprocessor perfmonitor
file
[Word Count: 28]

snortfile
preprocessor sfportscan
memcap
logfile
disabled
preprocessor stream5_global
memcap
max_tcp
max_udp
max_icmp
track_tcp
track_udp
track_icmp
[Word Count: 15]

Snort now supports multiple conﬁgurations based on VLAN Id or IP subnet within a single instance of Snort. This will
allow administrators to specify multiple snort conﬁguration ﬁles and bind each conﬁguration to one or more VLANs
or subnets rather than running one Snort for each conﬁguration required. Each unique snort conﬁguration ﬁle will
create a new conﬁguration instance within snort. VLANs/Subnets not bound to any speciﬁc conﬁguration will use the
default conﬁguration. Each conﬁguration can have different preprocessor settings and detection rules.
[Word Count: 83]

Default conﬁguration for snort is speciﬁed using the existing -c option. A default conﬁguration binds multiple vlans
or networks to non-default conﬁgurations, using the following conﬁguration line:
[Word Count: 27]

config binding: <path_to_snort.conf> vlan <vlanIdList>
config binding: <path_to_snort.conf> net <ipList>
config binding: <path_to_snort.conf> policy_id <id>
[Word Count: 15]

path to snort.conf - Refers to the absolute or relative path to the snort.conf for speciﬁc conﬁguration.
[Word Count: 17]

vlanIdList - Refers to the comma separated list of vlandIds and vlanId ranges. The format for ranges is two vlanId
separated by a ”-”. Spaces are allowed within ranges. Valid vlanId is any number in 0-4095 range. Negative
vland Ids and alphanumeric are not supported.
[Word Count: 45]

ipList - Refers to ip subnets. Subnets can be CIDR blocks for IPV6 or IPv4. A maximum of 512 individual IPv4
or IPv6 addresses or CIDRs can be speciﬁed.
[Word Count: 29]

policy id - Refers to the speciﬁc policyi id to be applied. Valid policyi id is any number in 0-4095 range.
[Word Count: 21]

△
! NOTE
Vlan and Subnets can not be used in the same line. Conﬁgurations can be applied based on either Vlans or
Subnets not both.
[Word Count: 26]

△
! NOTE
Even though Vlan Ids 0 and 4095 are reserved, they are included as valid in terms of conﬁguring Snort.
[Word Count: 22]

Generally conﬁg options deﬁned within the default conﬁguration are global by default i.e. their value applies to all
other conﬁgurations. The following conﬁg options are speciﬁc to each conﬁguration.
[Word Count: 29]

The following conﬁg options are speciﬁc to each conﬁguration. If not deﬁned in a conﬁguration, the default values of
the option (not the default conﬁguration values) take effect.
[Word Count: 28]

config checksum_drop
config disable_decode_alerts
config disable_decode_drops
config disable_ipopt_alerts
config disable_ipopt_drops
config disable_tcpopt_alerts
config disable_tcpopt_drops
config disable_tcpopt_experimental_alerts
config disable_tcpopt_experimental_drops
config disable_tcpopt_obsolete_alerts
config disable_tcpopt_obsolete_drops
config disable_ttcp_alerts
config disable_tcpopt_ttcp_alerts
config disable_ttcp_drops
[Word Count: 28]

Rules are speciﬁc to conﬁgurations but only some parts of a rule can be customized for performance reasons. If a
rule is not speciﬁed in a conﬁguration then the rule will never raise an event for the conﬁguration. A rule shares all
parts of the rule options, including the general options, payload detection options, non-payload detection options, and
post-detection options. Parts of the rule header can be speciﬁed differently across conﬁgurations, limited to:
[Word Count: 73]

Source IP address and port
Destination IP address and port
Action
[Word Count: 11]

A higher revision of a rule in one conﬁguration will override other revisions of the same rule in other conﬁgurations.
[Word Count: 20]

Variables deﬁned using ”var”, ”portvar” and ”ipvar” are speciﬁc to conﬁgurations. If the rules in a conﬁguration use
variables, those variables must be deﬁned in that conﬁguration.
[Word Count: 27]

Preprocessors conﬁgurations can be deﬁned within each vlan or subnet speciﬁc conﬁguration. Options controlling
speciﬁc preprocessor memory usage, through speciﬁc limit on memory usage or number of instances, are processed
only in default policy. The options control total memory usage for a preprocessor across all policies. These options are
ignored in non-default policies without raising an error. A preprocessor must be conﬁgured in default conﬁguration be-
fore it can be conﬁgured in non-default conﬁguration. This is required as some mandatory preprocessor conﬁguration
options are processed only in default conﬁguration.
[Word Count: 89]

An unique policy id can be assigned by user, to each conﬁguration using the following conﬁg line:
[Word Count: 17]

id - Refers to a 16-bit unsigned value. This policy id will be used to identify alerts from a speciﬁc conﬁguration in
the uniﬁed2 records.
[Word Count: 25]

△
! NOTE
If no policy id is speciﬁed, snort assigns 0 (zero) value to the conﬁguration.
[Word Count: 17]

To enable vlanId logging in uniﬁed2 records the following option can be used.
[Word Count: 13]

output alert_unified2: vlan_event_types (alert logging only)
output unified2: filename <filename>, vlan_event_types (true unified logging)
[Word Count: 14]

filename - Refers to the absolute or relative ﬁlename.
[Word Count: 9]

vlan event types - When this option is set, snort will use uniﬁed2 event type 104 and 105 for IPv4 and IPv6
respectively.
[Word Count: 23]

△
! NOTE
Each event logged will have the vlanId from the packet if vlan headers are present otherwise 0 will be used.
[Word Count: 23]

Snort assigns every incoming packet to a unique conﬁguration based on the following criteria. If VLANID is present,
then the innermost VLANID is used to ﬁnd bound conﬁguration. If the bound conﬁguration is the default conﬁgura-
tion, then destination IP address is searched to the most speciﬁc subnet that is bound to a non-default conﬁguration.
The packet is assigned non-default conﬁguration if found otherwise the check is repeated using source IP address. In
the end, default conﬁguration is used if no other matching conﬁguration is found.
[Word Count: 86]

For addressed based conﬁguration binding, this can lead to conﬂicts between conﬁgurations if source address is bound
to one conﬁguration and destination address is bound to another. In this case, snort will use the ﬁrst conﬁguration in
the order of deﬁnition, that can be applied to the packet.
[Word Count: 48]

Snort 2.9 includes a number of changes to better handle inline operation, including:
[Word Count: 13]

• fully encoded reset or icmp unreachable packets
[Word Count: 8]

This enables active responses (snort will send TCP RST or ICMP unreachable/port) when dropping a session.
[Word Count: 16]

./configure --enable-active-response / -DACTIVE_RESPONSE
[Word Count: 4]

preprocessor stream5_global: \
max_active_responses <max_rsp>, \
min_response_seconds <min_sec>
[Word Count: 8]

<max_rsp> ::= (0..25)
<min_sec> ::= (1..300)
[Word Count: 6]

Active responses will be encoded based on the triggering packet. TTL will be set to the value captured at session
pickup.
[Word Count: 21]

Conﬁgure the number of attempts to land a TCP RST within the session’s current window (so that it is accepted by the
receiving TCP). This sequence ”straﬁng” is really only useful in passive mode. In inline mode the reset is put straight
into the stream in lieu of the triggering packet so straﬁng is not necessary.
[Word Count: 56]

Each attempt (sent in rapid succession) has a different sequence number. Each active response will actually cause this
number of TCP resets to be sent. TCP data (sent for react) is multiplied similarly. At most 1 ICMP unreachable is
sent, if and only if attempts > 0.
[Word Count: 47]

config response: [device <dev>] [dst_mac <MAC address>] attempts <att>
[Word Count: 9]

<dev> ::= ip | eth0 | etc.
<att> ::= (1..20)
<MAC address> ::= nn:nn:nn:nn:nn:nn
(n is a hex number from 0-F)
[Word Count: 21]

device ip will perform network layer injection. It is probably a better choice to specify an interface and avoid kernel
routing tables, etc.
[Word Count: 23]

dst mac will change response destination MAC address, if the device is eth0, eth1, eth2 etc. Otherwise, response
destination MAC address is derived from packet. Example:
[Word Count: 26]

config response: device eth0 dst_mac 00:06:76:DD:5F:E3 attempts 2
[Word Count: 8]

Flexresp and ﬂexresp2 are replaced with ﬂexresp3.
[Word Count: 7]

* Flexresp is deleted; these features are no longer available:
[Word Count: 10]

./configure --enable-flexresp / -DENABLE_RESPOND -DENABLE_RESPONSE
config flexresp: attempts 1
[Word Count: 9]

* Flexresp2 is deleted; these features are deprecated, non-functional, and will be deleted in a future release:
[Word Count: 17]

./configure --enable-flexresp2 / -DENABLE_RESPOND -DENABLE_RESPONSE2
[Word Count: 5]

config flexresp2_interface: eth0
config flexresp2_attempts: 4
config flexresp2_memcap: 1000000
config flexresp2_rows: 1000
[Word Count: 12]

* Flexresp3 is new: the resp rule option keyword is used to conﬁgure active responses for rules that ﬁre.
[Word Count: 19]

./configure --enable-flexresp3 / -DENABLE_RESPOND -DENABLE_RESPONSE3
[Word Count: 5]

alert tcp any any -> any 80 (content:"a"; resp:<resp_t>; sid:1;)
[Word Count: 10]

* resp t includes all ﬂexresp and ﬂexresp2 options:
[Word Count: 9]

<resp_t> ::= \
rst_snd | rst_rcv | rst_all | \
reset_source | reset_dest | reset_both | icmp_net | \
icmp_host | icmp_port | icmp_all
[Word Count: 24]

react is a rule option keyword that enables sending an HTML page on a session and then resetting it. This is built with:
[Word Count: 23]

./configure --enable-react / -DENABLE_REACT
[Word Count: 4]

The page to be sent can be read from a ﬁle:
[Word Count: 11]

<default_page> ::= \
"HTTP/1.1 403 Forbidden\r\n"
"Connection: close\r\n"
"Content-Type: text/html; charset=utf-8\r\n"
"\r\n"
"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\r\n" \
"
\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\r\n" \
"<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\r\n" \
"<head>\r\n" \
"<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\r\n" \
"<title>Access Denied</title>\r\n" \
"</head>\r\n" \
"<body>\r\n" \
"<h1>Access Denied</h1>\r\n" \
"<p>%s</p>\r\n" \
"</body>\r\n" \
"</html>\r\n";
[Word Count: 49]

Note that the ﬁle must contain the entire response, including any HTTP headers. In fact, the response isn’t strictly
limited to HTTP. You could craft a binary payload of arbitrary content.
[Word Count: 31]

Be aware of size when creating such responses. While it may be possible to respond with arbitrarily large responses,
responses for TCP sessions will need to take into account that the receiver’s window may only accept up to a certain
[Word Count: 40]

amount of data. Sending past this limit will result in truncated data. In general, the smaller the response, the more
likely it will be successful.
[Word Count: 25]

When the rule is conﬁgured, the page is loaded and the selected message, which defaults to:
[Word Count: 16]

<default_msg> ::= \
"You are attempting to access a forbidden site.<br />" \
"Consult your system administrator for details.";
[Word Count: 19]

Additional formatting operators beyond a single within a reference URL.
[Word Count: 10]

drop tcp any any -> any $HTTP_PORTS ( \
content: "d"; msg:"Unauthorized Access Prohibited!"; \
react: <react_opts>; sid:4;)
[Word Count: 18]

<dep_opts> ::= [block|warn], [proxy <port#>]
[Word Count: 5]

The original version sent the web page to one end of the session only if the other end of the session was port 80 or the
optional proxy port. The new version always sends the page to the client. If no page should be sent, a resp option can
be used instead. The deprecated options are ignored.
[Word Count: 57]

The block and sblock actions have been introduced as synonyms for drop and sdrop to help avoid confusion between
packets dropped due to load (e.g. lack of available buffers for incoming packets) and packets blocked due to Snort’s
analysis.
[Word Count: 39]

Snort uses a simple, lightweight rules description language that is ﬂexible and quite powerful. There are a number of
simple guidelines to remember when developing Snort rules that will help safeguard your sanity.
[Word Count: 33]

Most Snort rules are written in a single line. This was required in versions prior to 1.8. In current versions of Snort,
rules may span multiple lines by adding a backslash \ to the end of the line.
[Word Count: 38]

Snort rules are divided into two logical sections, the rule header and the rule options. The rule header contains
the rule’s action, protocol, source and destination IP addresses and netmasks, and the source and destination ports
information. The rule option section contains alert messages and information on which parts of the packet should be
inspected to determine if the rule action should be taken.
[Word Count: 64]

Figure 3.1 illustrates a sample Snort rule.
[Word Count: 7]

The text up to the ﬁrst parenthesis is the rule header and the section enclosed in parenthesis contains the rule options.
The words before the colons in the rule options section are called option keywords.
△
! NOTE
Note that the rule options section is not speciﬁcally required by any rule, they are just used for the sake of
making tighter deﬁnitions of packets to collect or alert on (or drop, for that matter).
[Word Count: 74]

All of the elements in that make up a rule must be true for the indicated rule action to be taken. When taken together,
the elements can be considered to form a logical AND statement. At the same time, the various rules in a Snort rules
library ﬁle can be considered to form a large logical OR statement.
[Word Count: 58]

The rule header contains the information that deﬁnes the who, where, and what of a packet, as well as what to do in
the event that a packet with all the attributes indicated in the rule should show up. The ﬁrst item in a rule is the rule
[Word Count: 48]

alert tcp any any -> 192.168.1.0/24 111 \
(content:"|00 01 86 a5|"; msg:"mountd access";)
[Word Count: 14]

action. The rule action tells Snort what to do when it ﬁnds a packet that matches the rule criteria. There are 3 available
default actions in Snort, alert, log, pass. In addition, if you are running Snort in inline mode, you have additional
options which include drop, reject, and sdrop.
[Word Count: 50]

1. alert - generate an alert using the selected alert method, and then log the packet
[Word Count: 16]

5. reject - block the packet, log it, and then send a TCP reset if the protocol is TCP or an ICMP port unreachable
message if the protocol is UDP.
[Word Count: 30]

6. sdrop - block the packet but do not log it.
[Word Count: 11]

You can also deﬁne your own rule types and associate one or more output plugins with them. You can then use the
rule types as actions in Snort rules.
[Word Count: 29]

This example will create a type that will log to just tcpdump:
[Word Count: 12]

ruletype suspicious
{
type log
output log_tcpdump: suspicious.log
}
[Word Count: 9]

This example will create a rule type that will log to syslog and tcpdump: database:
[Word Count: 15]

ruletype redalert
{
type alert
output alert_syslog: LOG_AUTH LOG_ALERT
output log_tcpdump: suspicious.log
}
[Word Count: 13]

The next ﬁeld in a rule is the protocol. There are four protocols that Snort currently analyzes for suspicious behavior
– TCP, UDP, ICMP, and IP. In the future there may be more, such as ARP, IGRP, GRE, OSPF, RIP, IPX, etc.
[Word Count: 42]

In Figure 3.1, the source IP address was set to match for any computer talking, and the destination address was set to
match on the 192.168.1.0 Class C network.
[Word Count: 29]

alert tcp !192.168.1.0/24 any -> 192.168.1.0/24 111 \
(content:"|00 01 86 a5|"; msg:"external mountd access";)
[Word Count: 15]

Figure 3.2: Example IP Address Negation Rule
[Word Count: 7]

alert tcp ![192.168.1.0/24,10.1.1.0/24] any -> \
[192.168.1.0/24,10.1.1.0/24] 111 (content:"|00 01 86 a5|"; \
msg:"external mountd access";)
[Word Count: 16]

There is an operator that can be applied to IP addresses, the negation operator. This operator tells Snort to match any
IP address except the one indicated by the listed IP address. The negation operator is indicated with a !. For example,
an easy modiﬁcation to the initial example is to make it alert on any trafﬁc that originates outside of the local net with
the negation operator as shown in Figure 3.2.
[Word Count: 73]

This rule’s IP addresses indicate any tcp packet with a source IP address not originating from the internal network and
a destination address on the internal network.
[Word Count: 27]

You may also specify lists of IP addresses. An IP list is speciﬁed by enclosing a comma separated list of IP addresses
and CIDR blocks within square brackets. For the time being, the IP list may not include spaces between the addresses.
See Figure 3.3 for an example of an IP list in action.
[Word Count: 54]

Port numbers may be speciﬁed in a number of ways, including any ports, static port deﬁnitions, ranges, and by
negation. Any ports are a wildcard value, meaning literally any port. Static ports are indicated by a single port
number, such as 111 for portmapper, 23 for telnet, or 80 for http, etc. Port ranges are indicated with the range operator
:. The range operator may be applied in a number of ways to take on different meanings, such as in Figure 3.4.
[Word Count: 82]

Port negation is indicated by using the negation operator !. The negation operator may be applied against any of the
other rule types (except any, which would translate to none, how Zen...). For example, if for some twisted reason you
wanted to log everything except the X Windows ports, you could do something like the rule in Figure 3.5.
[Word Count: 59]

The direction operator -> indicates the orientation, or direction, of the trafﬁc that the rule applies to. The IP address
and port numbers on the left side of the direction operator is considered to be the trafﬁc coming from the source
host, and the address and port information on the right side of the operator is the destination host. There is also a
bidirectional operator, which is indicated with a <> symbol. This tells Snort to consider the address/port pairs in
either the source or destination orientation. This is handy for recording/analyzing both sides of a conversation, such as
[Word Count: 99]

log udp any any -> 192.168.1.0/24 1:1024
log udp trafﬁc coming from any port and destination ports ranging from 1 to 1024
[Word Count: 22]

log tcp trafﬁc from any port going to ports less than or equal to 6000
[Word Count: 15]

log tcp any :1024 -> 192.168.1.0/24 500:
[Word Count: 7]

log tcp trafﬁc from privileged ports less than or equal to 1024 going to ports greater than or equal to 500
[Word Count: 21]

log tcp any any -> 192.168.1.0/24 !6000:6010
[Word Count: 7]

log tcp !192.168.1.0/24 any <> 192.168.1.0/24 23
[Word Count: 7]

Figure 3.6: Snort rules using the Bidirectional Operator
[Word Count: 8]

telnet or POP3 sessions. An example of the bidirectional operator being used to record both sides of a telnet session is
shown in Figure 3.6.
[Word Count: 25]

Also, note that there is no <- operator. In Snort versions before 1.8.7, the direction operator did not have proper
error checking and many people used an invalid token. The reason the <- does not exist is so that rules always read
consistently.
[Word Count: 43]

Activate and Dynamic rules are phased out in favor of a combination of tagging (3.7.5) and ﬂowbits (3.6.10).
[Word Count: 18]

Rule options form the heart of Snort’s intrusion detection engine, combining ease of use with power and ﬂexibility. All
Snort rule options are separated from each other using the semicolon (;) character. Rule option keywords are separated
from their arguments with a colon (:) character.
[Word Count: 45]

There are four major categories of rule options.
[Word Count: 8]

general These options provide information about the rule but do not have any affect during detection
[Word Count: 16]

payload These options all look for data inside the packet payload and can be inter-related
[Word Count: 15]

non-payload These options look for non-payload data
[Word Count: 7]

post-detection These options are rule speciﬁc triggers that happen after a rule has “ﬁred.”
[Word Count: 14]

The msg rule option tells the logging and alerting engine the message to print along with a packet dump or to an alert.
It is a simple text string that utilizes the \ as an escape character to indicate a discrete character that might otherwise
confuse Snort’s rules parser (such as the semi-colon ; character).
[Word Count: 55]

The reference keyword allows rules to include references to external attack identiﬁcation systems. The plugin currently
supports several speciﬁc systems as well as unique URLs. This plugin is to be used by output plugins to provide a link
to additional information about the alert produced.
[Word Count: 45]

Make sure to also take a look at http://www.snort.org/pub-bin/sigs-search.cgi/ for a system that is indexing
descriptions of alerts based on of the sid (See Section 3.4.4).
[Word Count: 26]

Table 3.1: Supported Systems
System
URL Preﬁx
bugtraq
http://www.securityfocus.com/bid/
cve
http://cve.mitre.org/cgi-bin/cvename.cgi?name=
nessus
http://cgi.nessus.org/plugins/dump.php3?id=
arachnids
(currently down) http://www.whitehats.com/info/IDS
mcafee
http://vil.nai.com/vil/content/v
osvdb
http://osvdb.org/show/osvdb/
msb
http://technet.microsoft.com/en-us/security/bulletin/
url
http://
[Word Count: 25]

reference:<id system>, <id>; [reference:<id system>, <id>;]
[Word Count: 6]

alert tcp any any -> any 7070 (msg:"IDS411/dos-realaudio"; \
flags:AP; content:"|fff4 fffd 06|"; reference:arachnids,IDS411;)
[Word Count: 14]

alert tcp any any -> any 21 (msg:"IDS287/ftp-wuftp260-venglin-linux"; \
flags:AP; content:"|31c031db 31c9b046 cd80 31c031db|"; \
reference:arachnids,IDS287; reference:bugtraq,1387; \
reference:cve,CAN-2000-1574;)
[Word Count: 19]

The ﬁle etc/gen-msg.map contains contains more information on preprocessor and decoder gids.
[Word Count: 12]

This example is a rule with a generator id of 1000001.
[Word Count: 11]

alert tcp any any -> any 80 (content:"BOB"; gid:1000001; sid:1; rev:1;)
[Word Count: 11]

The sid keyword is used to uniquely identify Snort rules. This information allows output plugins to identify rules
easily. This option should be used with the rev keyword. (See section 3.4.5)
[Word Count: 31]

• 100-999,999 Rules included with the Snort distribution
[Word Count: 8]

The ﬁle sid-msg.map contains a mapping of alert messages to Snort rule IDs. This information is useful when post-
processing alert to map an ID to an alert message.
[Word Count: 29]

This example is a rule with the Snort Rule ID of 1000983.
[Word Count: 12]

alert tcp any any -> any 80 (content:"BOB"; sid:1000983; rev:1;)
[Word Count: 10]

The rev keyword is used to uniquely identify revisions of Snort rules. Revisions, along with Snort rule id’s, allow
signatures and descriptions to be reﬁned and replaced with updated information. This option should be used with the
sid keyword. (See section 3.4.4)
[Word Count: 42]

This example is a rule with the Snort Rule Revision of 1.
[Word Count: 12]

alert tcp any any -> any 80 (content:"BOB"; sid:1000983; rev:1;)
[Word Count: 10]

The classtype keyword is used to categorize a rule as detecting an attack that is part of a more general type of attack
class. Snort provides a default set of attack classes that are used by the default set of rules it provides. Deﬁning
classiﬁcations for rules provides a way to better organize the event data Snort produces.
[Word Count: 58]

alert tcp any any -> any 25 (msg:"SMTP expn root"; flags:A+; \
content:"expn root"; nocase; classtype:attempted-recon;)
[Word Count: 16]

Attack classiﬁcations deﬁned by Snort reside in the classification.config ﬁle. The ﬁle uses the following syntax:
[Word Count: 16]

config classification:
<class name>,<class description>,<default priority>
[Word Count: 6]

These attack classiﬁcations are listed in Table 3.2. They are currently ordered with 4 default priorities. A priority of 1
(high) is the most severe and 4 (very low) is the least severe.
[Word Count: 33]

Classtype
Description
Priority
attempted-admin
Attempted Administrator Privilege Gain
high
attempted-user
Attempted User Privilege Gain
high
inappropriate-content
Inappropriate Content was Detected
high
policy-violation
Potential Corporate Privacy Violation
high
shellcode-detect
Executable code was detected
high
successful-admin
Successful Administrator Privilege Gain
high
successful-user
Successful User Privilege Gain
high
trojan-activity
A Network Trojan was detected
high
unsuccessful-user
Unsuccessful User Privilege Gain
high
web-application-attack
Web Application Attack
high
attempted-dos
Attempted Denial of Service
medium
attempted-recon
Attempted Information Leak
medium
bad-unknown
Potentially Bad Trafﬁc
medium
default-login-attempt
Attempt to login by a default username and
password
[Word Count: 89]

denial-of-service
Detection of a Denial of Service Attack
medium
misc-attack
Misc Attack
medium
non-standard-protocol
Detection of a non-standard protocol or event
medium
rpc-portmap-decode
Decode of an RPC Query
medium
successful-dos
Denial of Service
medium
successful-recon-largescale
Large Scale Information Leak
medium
successful-recon-limited
Information Leak
medium
suspicious-ﬁlename-detect
A suspicious ﬁlename was detected
medium
suspicious-login
An attempted login using a suspicious user-
name was detected
[Word Count: 62]

system-call-detect
A system call was detected
medium
unusual-client-port-connection
A client was using an unusual port
medium
web-application-activity
Access to a potentially vulnerable web appli-
cation
[Word Count: 25]

icmp-event
Generic ICMP event
low
misc-activity
Misc activity
low
network-scan
Detection of a Network Scan
low
not-suspicious
Not Suspicious Trafﬁc
low
protocol-command-decode
Generic Protocol Command Decode
low
string-detect
A suspicious string was detected
low
unknown
Unknown Trafﬁc
low
tcp-connection
A TCP connection was detected
very low
[Word Count: 46]

The classtype option can only use classiﬁcations that have been deﬁned in snort.conf by using the config
classification option. Snort provides a default set of classiﬁcations in classification.config that are used
by the rules it provides.
[Word Count: 36]

The priority tag assigns a severity level to rules. A classtype rule assigns a default priority (deﬁned by the config
classification option) that may be overridden with a priority rule. Examples of each case are given below.
[Word Count: 37]

alert tcp any any -> any 80 (msg:"WEB-MISC phf attempt"; flags:A+; \
content:"/cgi-bin/phf"; priority:10;)
[Word Count: 14]

alert tcp any any -> any 80 (msg:"EXPLOIT ntpdx overflow"; \
dsize:>128; classtype:attempted-admin; priority:10 );
[Word Count: 15]

The metadata tag allows a rule writer to embed additional information about the rule, typically in a key-value format.
Certain metadata keys and values have meaning to Snort and are listed in Table 3.3. Keys other than those listed in the
table are effectively ignored by Snort and can be free-form, with a key and a value. Multiple keys are separated by a
comma, while keys and values are separated by a space.
[Word Count: 73]

Table 3.3: Snort Metadata Keys
Key
Description
Value Format
engine
Indicate a Shared Library Rule
”shared”
soid
Shared Library Rule Generator and SID
gid|sid
service
Target-Based Service Identiﬁer
”http”
[Word Count: 29]

△
! NOTE
The service Metadata Key is only meaningful when a Host Attribute Table is provided. See Section 2.7 for
details on the Host Attribute Table.
[Word Count: 27]

The examples below show an stub rule from a shared library rule. The ﬁrst uses multiple metadata keywords, the
second a single metadata keyword, with keys separated by commas.
[Word Count: 29]

metadata:key1 value1;
metadata:key1 value1, key2 value2;
[Word Count: 6]

alert tcp any any -> any 80 (msg:"Shared Library Rule Example"; \
metadata:engine shared; metadata:soid 3|12345;)
[Word Count: 16]

alert tcp any any -> any 80 (msg:"Shared Library Rule Example"; \
metadata:engine shared, soid 3|12345;)
[Word Count: 16]

alert tcp any any -> any 80 (msg:"HTTP Service Rule Example"; \
metadata:service http;)
[Word Count: 14]

The content keyword is one of the more important features of Snort. It allows the user to set rules that search for
speciﬁc content in the packet payload and trigger response based on that data. Whenever a content option pattern
match is performed, the Boyer-Moore pattern match function is called and the (rather computationally expensive) test
is performed against the packet contents. If data exactly matching the argument data string is contained anywhere
within the packet’s payload, the test is successful and the remainder of the rule option tests are performed. Be aware
that this test is case sensitive.
[Word Count: 99]

The option data for the content keyword is somewhat complex; it can contain mixed text and binary data. The binary
data is generally enclosed within the pipe (|) character and represented as bytecode. Bytecode represents binary data
as hexadecimal numbers and is a good shorthand method for describing complex binary data. The example below
shows use of mixed text and binary data in a Snort rule.
[Word Count: 66]

Note that multiple content rules can be speciﬁed in one rule. This allows rules to be tailored for less false positives.
[Word Count: 21]

If the rule is preceded by a !, the alert will be triggered on packets that do not contain this content. This is useful when
writing rules that want to alert on packets that do not match a certain pattern
[Word Count: 40]

△
! NOTE
Also note that the following characters must be escaped inside a content rule:
; \ "
[Word Count: 19]

alert tcp any any -> any 139 (content:"|5c 00|P|00|I|00|P|00|E|00 5c|";)
[Word Count: 10]

alert tcp any any -> any 80 (content:!"GET";)
[Word Count: 8]

△
! NOTE
A ! modiﬁer negates the results of the entire content search, modiﬁers included. For example, if using
content:!"A"; within:50; and there are only 5 bytes of payload and there is no ”A” in those 5 bytes, the
result will return a match. If there must be 50 bytes for a valid match, use isdataat as a pre-cursor to the
content.
[Word Count: 63]

The content keyword has a number of modiﬁer keywords. The modiﬁer keywords change how the previously speci-
ﬁed content works. These modiﬁer keywords are:
[Word Count: 24]

Table 3.5: Content Modiﬁers
Modiﬁer
Section
nocase
3.5.5
rawbytes
3.5.6
depth
3.5.7
offset
3.5.8
distance
3.5.9
within
3.5.10
http client body
3.5.11
http cookie
3.5.12
http raw cookie
3.5.13
http header
3.5.14
http raw header
3.5.15
http method
3.5.16
http uri
3.5.17
http raw uri
3.5.18
http stat code
3.5.19
http stat msg
3.5.20
fast pattern
3.5.22
[Word Count: 57]

The protected content keyword provides much of the functionality of the content keyword, however it performs and is
utilized in a very different manner. The primary advantage protected content has over content is that protected allows
[Word Count: 36]

one to hide the target contents by only revealing secure hash digests of said content. As with the content keyword,
its primary purpose is to match strings of speciﬁc bytes. The search is performed by hashing portions of incoming
packets and comparing the results against the hash provided, and as such, it is computationally expensive.
[Word Count: 55]

Currently, it is possible to utilize the MD5, SHA256, and SHA512 hash algorithms with the protected content key-
word. A hashing algorithm must be speciﬁed in the rule using hash if a default has not be set in the Snort conﬁguration.
Additionally, a length modiﬁer must be speciﬁed with protected to indicate the length of the raw data.
[Word Count: 58]

As with content, it is possible to use multiple protected content rules can in one rule. Additionally, it is possible to
mix multiple protected content rules with multiple content rules.
[Word Count: 30]

If the rule is preceded by a !, the alert will be triggered on packets that do not contain the target content. This is useful
when writing rules that want to alert on packets that do not match a certain pattern
△
! NOTE
The protected content keyword can be used with some (but not all) of the content modiﬁers. Those not
supported include:
nocase
fast_pattern
depth
within
[Word Count: 68]

protected_content:[!]"<content hash>", length:orig_len[, hash:md5|sha256|sha512];
[Word Count: 4]

The following alert on the string ”HTTP”:
[Word Count: 7]

alert tcp any any <> any 80 (msg:"MD5 Alert";
protected_content:"293C9EA246FF9985DC6F62A650F78986"; hash:md5; offset:0; length:4;)
[Word Count: 13]

alert tcp any any <> any 80 (msg:"SHA256 Alert";
protected_content:"56D6F32151AD8474F40D7B939C2161EE2BBF10023F4AF1DBB3E13260EBDC6342";
hash:sha256; offset:0; length:4;)
[Word Count: 13]

△
! NOTE
A ! modiﬁer negates the results of the entire content search, modiﬁers included. For example, if using
content:!"A"; within:50; and there are only 5 bytes of payload and there is no ”A” in those 5 bytes, the
result will return a match. If there must be 50 bytes for a valid match, use isdataat as a pre-cursor to the
content.
[Word Count: 63]

The hash keyword is used to specify the hashing algorithm to use when matching a protected content rule. If a
default algorithm is not speciﬁed in the Snort conﬁguration, a protected content rule must specify the algorithm used.
Currently, MD5, SHA256, and SHA512 are supported.
[Word Count: 45]

The length keyword is used to specify the original length of the content speciﬁed in a protected content rule digest.
The value provided must be greater than 0 and less than 65536.
[Word Count: 32]

The nocase keyword allows the rule writer to specify that the Snort should look for the speciﬁc pattern, ignoring case.
nocase modiﬁes the previous content keyword in the rule.
[Word Count: 29]

alert tcp any any -> any 21 (msg:"FTP ROOT"; content:"USER root"; nocase;)
[Word Count: 12]

The rawbytes keyword allows rules to look at the raw packet data, ignoring any decoding that was done by preproces-
sors. This acts as a modiﬁer to the previous content 3.5.1 option.
[Word Count: 32]

HTTP Inspect has a set of keywords to use raw data, such as http raw cookie, http raw header, http raw uri
etc that match on speciﬁc portions of the raw HTTP requests and responses.
[Word Count: 35]

Most other preprocessors use decoded/normalized data for content match by default, if rawbytes is not speciﬁed
explicitly. Therefore, rawbytes should be speciﬁed in order to inspect arbitrary raw data from the packet.
[Word Count: 32]

This example tells the content pattern matcher to look at the raw trafﬁc, instead of the decoded trafﬁc provided by the
Telnet decoder.
[Word Count: 23]

alert tcp any any -> any 21 (msg:"Telnet NOP"; content:"|FF F1|"; rawbytes;)
[Word Count: 12]

The depth keyword allows the rule writer to specify how far into a packet Snort should search for the speciﬁed pattern.
depth modiﬁes the previous ‘content’ keyword in the rule.
[Word Count: 30]

A depth of 5 would tell Snort to only look for the speciﬁed pattern within the ﬁrst 5 bytes of the payload.
[Word Count: 22]

As the depth keyword is a modiﬁer to the previous content keyword, there must be a content in the rule before depth
is speciﬁed.
[Word Count: 24]

This keyword allows values greater than or equal to the pattern length being searched. The minimum allowed value is
1. The maximum allowed value for this keyword is 65535.
[Word Count: 29]

The value can also be set to a string value referencing a variable extracted by the byte extract keyword in the same
rule.
[Word Count: 23]

The offset keyword allows the rule writer to specify where to start searching for a pattern within a packet. offset
modiﬁes the previous ’content’ keyword in the rule.
[Word Count: 28]

An offset of 5 would tell Snort to start looking for the speciﬁed pattern after the ﬁrst 5 bytes of the payload.
[Word Count: 22]

As this keyword is a modiﬁer to the previous content keyword, there must be a content in the rule before offset is
speciﬁed.
[Word Count: 23]

This keyword allows values from -65535 to 65535.
[Word Count: 8]

The value can also be set to a string value referencing a variable extracted by the byte extract keyword in the same
rule.
[Word Count: 23]

The following example shows use of a combined content, offset, and depth search rule.
[Word Count: 14]

alert tcp any any -> any 80 (content:"cgi-bin/phf"; offset:4; depth:20;)
[Word Count: 10]

The distance keyword allows the rule writer to specify how far into a packet Snort should ignore before starting to
search for the speciﬁed pattern relative to the end of the previous pattern match.
[Word Count: 34]

This can be thought of as exactly the same thing as offset (See Section 3.5.8), except it is relative to the end of the last
pattern match instead of the beginning of the packet.
[Word Count: 34]

This keyword allows values from -65535 to 65535.
[Word Count: 8]

The value can also be set to a string value referencing a variable extracted by the byte extract keyword in the same
rule.
[Word Count: 23]

The rule below maps to a regular expression of /ABC.{1,}DEF/.
[Word Count: 10]

alert tcp any any -> any any (content:"ABC"; content:"DEF"; distance:1;)
[Word Count: 10]

The within keyword is a content modiﬁer that makes sure that at most N bytes are between pattern matches using the
content keyword ( See Section 3.5.1 ). It’s designed to be used in conjunction with the distance (Section 3.5.9) rule
option.
[Word Count: 42]

This keyword allows values greater than or equal to pattern length being searched. The maximum allowed value for
this keyword is 65535.
[Word Count: 22]

The value can also be set to a string value referencing a variable extracted by the byte extract keyword in the same
rule.
[Word Count: 23]

This rule constrains the search of EFG to not go past 10 bytes past the ABC match.
[Word Count: 17]

alert tcp any any -> any any (content:"ABC"; content:"EFG"; within:10;)
[Word Count: 10]

The http client body keyword is a content modiﬁer that restricts the search to the body of an HTTP client request.
[Word Count: 21]

As this keyword is a modiﬁer to the previous content keyword, there must be a content in the rule before ’http client body’
is speciﬁed.
[Word Count: 25]

The amount of data that is inspected with this option depends on the post depth conﬁg option of HttpInspect. Pattern
matches with this keyword wont work when post depth is set to -1.
[Word Count: 33]

This rule constrains the search for the pattern ”EFG” to the raw body of an HTTP client request.
[Word Count: 18]

alert tcp any any -> any 80 (content:"ABC"; content:"EFG"; http_client_body;)
[Word Count: 10]

△
! NOTE
The http client body modiﬁer is not allowed to be used with the rawbytes modiﬁer for the same content.
[Word Count: 22]

The http cookie keyword is a content modiﬁer that restricts the search to the extracted Cookie Header ﬁeld (excluding
the header name itself and the CRLF terminating the header line) of a HTTP client request or a HTTP server response
(per the conﬁguration of HttpInspect 2.2.7). The Cookie buffer does not include the header names (Cookie: for HTTP
requests or Set-Cookie: for HTTP responses) or leading spaces and the CRLF terminating the header line. These
are included in the HTTP header buffer.
[Word Count: 82]

As this keyword is a modiﬁer to the previous content keyword, there must be a content in the rule before http cookie
is speciﬁed. This keyword is dependent on the enable cookie conﬁg option. The Cookie Header ﬁeld will be
extracted only when this option is conﬁgured. If enable cookie is not speciﬁed, the cookie still ends up in HTTP
header. When enable cookie is not speciﬁed, using http cookie is the same as using http header.
[Word Count: 77]

The extracted Cookie Header ﬁeld may be NORMALIZED, per the conﬁguration of HttpInspect (see 2.2.7).
[Word Count: 15]

This rule constrains the search for the pattern ”EFG” to the extracted Cookie Header ﬁeld of a HTTP client request.
[Word Count: 20]

alert tcp any any -> any 80 (content:"ABC"; content:"EFG"; http_cookie;)
[Word Count: 10]

△
! NOTE
The http cookie modiﬁer is not allowed to be used with the rawbytes or fast pattern modiﬁers for the
same content.
[Word Count: 24]

The http raw cookie keyword is a content modiﬁer that restricts the search to the extracted UNNORMALIZED Cookie
Header ﬁeld of a HTTP client request or a HTTP server response (per the conﬁguration of HttpInspect 2.2.7).
[Word Count: 36]

As this keyword is a modiﬁer to the previous content keyword, there must be a content in the rule before http raw cookie
is speciﬁed. This keyword is dependent on the enable cookie conﬁg option. The Cookie Header ﬁeld will be ex-
tracted only when this option is conﬁgured.
[Word Count: 49]

This rule constrains the search for the pattern ”EFG” to the extracted Unnormalized Cookie Header ﬁeld of a HTTP
client request.
[Word Count: 21]

alert tcp any any -> any 80 (content:"ABC"; content:"EFG"; http_raw_cookie;)
[Word Count: 10]

△
! NOTE
The http raw cookie modiﬁer is not allowed to be used with the rawbytes, http cookie or fast pattern
modiﬁers for the same content.
[Word Count: 27]

The http header keyword is a content modiﬁer that restricts the search to the extracted Header ﬁelds of a HTTP client
request or a HTTP server response (per the conﬁguration of HttpInspect 2.2.7).
[Word Count: 33]

As this keyword is a modiﬁer to the previous content keyword, there must be a content in the rule before http header
is speciﬁed.
[Word Count: 24]

The extracted Header ﬁelds may be NORMALIZED, per the conﬁguration of HttpInspect (see 2.2.7).
[Word Count: 14]

This rule constrains the search for the pattern ”EFG” to the extracted Header ﬁelds of a HTTP client request or a HTTP
server response.
[Word Count: 24]

alert tcp any any -> any 80 (content:"ABC"; content:"EFG"; http_header;)
[Word Count: 10]

△
! NOTE
The http header modiﬁer is not allowed to be used with the rawbytes modiﬁer for the same content.
[Word Count: 21]

The http raw header keyword is a content modiﬁer that restricts the search to the extracted UNNORMALIZED Header
ﬁelds of a HTTP client request or a HTTP server response (per the conﬁguration of HttpInspect 2.2.7).
[Word Count: 35]

As this keyword is a modiﬁer to the previous content keyword, there must be a content in the rule before http raw header
is speciﬁed.
[Word Count: 25]

This rule constrains the search for the pattern ”EFG” to the extracted Header ﬁelds of a HTTP client request or a HTTP
server response.
[Word Count: 24]

alert tcp any any -> any 80 (content:"ABC"; content:"EFG"; http_raw_header;)
[Word Count: 10]

△
! NOTE
The http raw header modiﬁer is not allowed to be used with the rawbytes, http header or fast pattern
modiﬁers for the same content.
[Word Count: 27]

The http method keyword is a content modiﬁer that restricts the search to the extracted Method from a HTTP client
request.
[Word Count: 21]

As this keyword is a modiﬁer to the previous content keyword, there must be a content in the rule before http method
is speciﬁed.
[Word Count: 24]

This rule constrains the search for the pattern ”GET” to the extracted Method from a HTTP client request.
[Word Count: 18]

alert tcp any any -> any 80 (content:"ABC"; content:"GET"; http_method;)
[Word Count: 10]

△
! NOTE
The http method modiﬁer is not allowed to be used with the rawbytes or fast pattern modiﬁers for the
same content.
[Word Count: 24]

The http uri keyword is a content modiﬁer that restricts the search to the NORMALIZED request URI ﬁeld . Using a
content rule option followed by a http uri modiﬁer is the same as using a uricontent by itself (see: 3.5.23).
[Word Count: 41]

As this keyword is a modiﬁer to the previous content keyword, there must be a content in the rule before http uri
is speciﬁed.
[Word Count: 24]

This rule constrains the search for the pattern ”EFG” to the NORMALIZED URI.
[Word Count: 13]

alert tcp any any -> any 80 (content:"ABC"; content:"EFG"; http_uri;)
[Word Count: 10]

△
! NOTE
The http uri modiﬁer is not allowed to be used with the rawbytes modiﬁer for the same content.
[Word Count: 21]

The http raw uri keyword is a content modiﬁer that restricts the search to the UNNORMALIZED request URI ﬁeld .
[Word Count: 20]

As this keyword is a modiﬁer to the previous content keyword, there must be a content in the rule before http raw uri
is speciﬁed.
[Word Count: 25]

This rule constrains the search for the pattern ”EFG” to the UNNORMALIZED URI.
[Word Count: 13]

alert tcp any any -> any 80 (content:"ABC"; content:"EFG"; http_raw_uri;)
[Word Count: 10]

△
! NOTE
The http raw uri modiﬁer is not allowed to be used with the rawbytes, http uri or fast pattern mod-
iﬁers for the same content.
[Word Count: 28]

The http stat code keyword is a content modiﬁer that restricts the search to the extracted Status code ﬁeld from a
HTTP server response.
[Word Count: 24]

As this keyword is a modiﬁer to the previous content keyword, there must be a content in the rule before http stat code
is speciﬁed.
[Word Count: 25]

The Status Code ﬁeld will be extracted only if the extended response inspection is conﬁgured for the HttpInspect (see
2.2.7).
[Word Count: 20]

This rule constrains the search for the pattern ”200” to the extracted Status Code ﬁeld of a HTTP server response.
[Word Count: 20]

alert tcp any any -> any 80 (content:"ABC"; content:"200"; http_stat_code;)
[Word Count: 10]

△
! NOTE
The http stat code modiﬁer is not allowed to be used with the rawbytes or fast pattern modiﬁers for
the same content.
[Word Count: 25]

The http stat msg keyword is a content modiﬁer that restricts the search to the extracted Status Message ﬁeld from a
HTTP server response.
[Word Count: 24]

As this keyword is a modiﬁer to the previous content keyword, there must be a content in the rule before http stat msg
is speciﬁed.
[Word Count: 25]

The Status Message ﬁeld will be extracted only if the extended response inspection is conﬁgured for the HttpInspect
(see 2.2.7).
[Word Count: 20]

This rule constrains the search for the pattern ”Not Found” to the extracted Status Message ﬁeld of a HTTP server
response.
[Word Count: 21]

alert tcp any any -> any 80 (content:"ABC"; content:"Not Found"; http_stat_msg;)
[Word Count: 11]

△
! NOTE
The http stat msg modiﬁer is not allowed to be used with the rawbytes or fast pattern modiﬁers for
the same content.
[Word Count: 25]

The http encode keyword will enable alerting based on encoding type present in a HTTP client request or a HTTP
server response (per the conﬁguration of HttpInspect 2.2.7).
[Word Count: 28]

There are several keywords associated with http encode. The keywords ’uri’, ’header’ and ’cookie’ determine
the HTTP ﬁelds used to search for a particular encoding type. The keywords ’utf8’, ’double encode’, ’non ascii’,
’uencode’, ’iis encode’, ’ascii’ and ’bare byte’ determine the encoding type which would trigger the alert. These
keywords can be combined using a OR operation. Negation is allowed on these keywords.
[Word Count: 64]

The conﬁg option ’normalize headers’ needs to be turned on for rules to work with the keyword ’header’. The keyword
’cookie’ is dependent on conﬁg options ’enable cookie’ and ’normalize cookies’ (see 2.2.7). This rule option will not
be able to detect encodings if the speciﬁed HTTP ﬁelds are not NORMALIZED.
[Word Count: 51]

http_encode:<http buffer type>, [!]<encoding type>
http_encode:[uri|header|cookie], [!][<utf8|double_encode|non_ascii|uencode|bare_byte|ascii|iis_encode>]
[Word Count: 7]

alert tcp any any -> any any (msg:"UTF8/UEncode Encoding present"; http_encode:uri,utf8|uencode;)
alert tcp any any -> any any (msg:"No UTF8"; http_encode:uri,!utf8;)
[Word Count: 21]

△
! NOTE
Negation(!) and OR(|) operations cannot be used in conjunction with each other for the http encode key-
word. The OR and negation operations work only on the encoding type ﬁeld and not on http buffer type
ﬁeld.
[Word Count: 40]

The fast pattern keyword is a content modiﬁer that sets the content within a rule to be used with the fast pattern
matcher. The default behavior of fast pattern determination is to use the longest HTTP buffer content. If no HTTP
buffer is present, then the fast pattern is the longest content. Given this behavior, it is useful if a shorter content is more
”unique” than the longer content, meaning the shorter content is less likely to be found in a packet than the longer
content.
[Word Count: 86]

The fast pattern matcher is used to select only those rules that have a chance of matching by using a content in the rule
for selection and only evaluating that rule if the content is found in the payload. Though this may seem to be overhead,
it can signiﬁcantly reduce the number of rules that need to be evaluated and thus increases performance. The better
the content used for the fast pattern matcher, the less likely the rule will needlessly be evaluated.
[Word Count: 82]

As this keyword is a modiﬁer to the previous content keyword, there must be a content rule option in the rule before
fast pattern is speciﬁed. The fast pattern option may be speciﬁed only once per rule.
△
! NOTE
The fast pattern modiﬁer cannot be used with the following http content modiﬁers: http cookie,
http raw uri, http raw header, http raw cookie, http method, http stat code, http stat msg.
[Word Count: 72]

△
! NOTE
The fast pattern modiﬁer can be used with negated contents only if those contents are not modiﬁed with
offset, depth, distance or within.
[Word Count: 26]

△
! NOTE
The fast pattern matcher is always case insensitive.
[Word Count: 11]

The fast pattern option can be used alone or optionally take arguments. When used alone, the meaning is simply
to use the speciﬁed content as the fast pattern content for the rule.
[Word Count: 32]

The optional argument <offset>,<length> can be used to specify that only a portion of the content should be used
for the fast pattern matcher. This is useful if the pattern is very long and only a portion of the pattern is necessary to
satisfy ”uniqueness” thus reducing the memory required to store the entire pattern in the fast pattern matcher.
[Word Count: 60]

△
! NOTE
The optional arguments only and <offset>,<length> are mutually exclusive.
[Word Count: 12]

This rule causes the pattern ”IJKLMNO” to be used with the fast pattern matcher, even though it is shorter than the
earlier pattern ”ABCDEFGH”.
[Word Count: 24]

alert tcp any any -> any 80 (content:"ABCDEFGH"; content:"IJKLMNO"; fast_pattern;)
[Word Count: 10]

This rule says to use the content ”IJKLMNO” for the fast pattern matcher and that the content should only be used for
the fast pattern matcher and not evaluated as a content rule option.
[Word Count: 34]

alert tcp any any -> any 80 (content:"ABCDEFGH"; content:"IJKLMNO"; nocase; fast_pattern:only;)
[Word Count: 11]

This rule says to use ”JKLMN” as the fast pattern content, but still evaluate the content rule option as ”IJKLMNO”.
[Word Count: 20]

alert tcp any any -> any 80 (content:"ABCDEFGH"; content:"IJKLMNO"; fast_pattern:1,5;)
[Word Count: 10]

The uricontent keyword in the Snort rule language searches the NORMALIZED request URI ﬁeld. This is equiv-
alent to using the http uri modiﬁer to a content keyword. As such if you are writing rules that include things that
are normalized, such as %2f or directory traversals, these rules will not alert. The reason is that the things you are
looking for are normalized out of the URI buffer.
[Word Count: 69]

/scripts/..%c0%af../winnt/system32/cmd.exe?/c+ver
[Word Count: 1]

/cgi-bin/aaaaaaaaaaaaaaaaaaaaaaaaaa/..%252fp%68f?
[Word Count: 1]

When writing a uricontent rule, write the content that you want to ﬁnd in the context that the URI will be normalized.
For example, if Snort normalizes directory traversals, do not include directory traversals.
[Word Count: 34]

You can write rules that look for the non-normalized content by using the content option. (See Section 3.5.1)
[Word Count: 18]

uricontent can be used with several of the modiﬁers available to the content keyword. These include:
[Word Count: 16]

This option works in conjunction with the HTTP Inspect preprocessor speciﬁed in Section 2.2.7.
[Word Count: 14]

Table 3.6: Uricontent Modiﬁers
Modiﬁer
Section
nocase
3.5.5
depth
3.5.7
offset
3.5.8
distance
3.5.9
within
3.5.10
fast pattern
3.5.22
[Word Count: 19]

△
! NOTE
uricontent cannot be modiﬁed by a rawbytes modiﬁer or any of the other HTTP modiﬁers. If you wish to
search the UNNORMALIZED request URI ﬁeld, use the http raw uri modiﬁer with a content option.
[Word Count: 38]

The urilen keyword in the Snort rule language speciﬁes the exact length, the minimum length, the maximum length,
or range of URI lengths to match. By default the raw uri buffer will be used. With the optional <uribuf> argument,
you can specify whether the raw or normalized buffer are used.
[Word Count: 50]

urilen:min<>max[,<uribuf>];
urilen:[<|>]<number>[,<uribuf>];
[Word Count: 2]

The following example will match URIs that are 5 bytes long:
[Word Count: 11]

The following example will match URIs that are shorter than 5 bytes:
[Word Count: 12]

The following example will match URIs that are greater than 5 bytes and less than 10 bytes (inclusive):
[Word Count: 18]

The following example will match URIs that are greater than 500 bytes using the normalized URI buffer:
[Word Count: 17]

The following example will match URIs that are greater than 500 bytes explicitly stating to use the raw URI buffer:
[Word Count: 20]

This option works in conjunction with the HTTP Inspect preprocessor speciﬁed in Section 2.2.7.
[Word Count: 14]

Verify that the payload has data at a speciﬁed location, optionally looking for data relative to the end of the previous
content match.
[Word Count: 23]

alert tcp any any -> any 111 (content:"PASS"; isdataat:50,relative; \
content:!"|0a|"; within:50;)
[Word Count: 12]

This rule looks for the string PASS exists in the packet, then veriﬁes there is at least 50 bytes after the end of the string
PASS, then veriﬁes that there is not a newline character within 50 bytes of the end of the PASS string.
[Word Count: 45]

When the rawbytes modiﬁer is speciﬁed with isdataat, it looks at the raw packet data, ignoring any decoding that
was done by the preprocessors. This modiﬁer will work with the relative modiﬁer as long as the previous content
match was in the raw packet data.
[Word Count: 45]

A ! modiﬁer negates the results of the isdataat test. It will alert if a certain amount of data is not present within
the payload. For example, the rule with modiﬁers content:"foo"; isdataat:!10,relative; would alert if there
were not 10 bytes after ”foo” before the payload ended.
[Word Count: 47]

The pcre keyword allows rules to be written using perl compatible regular expressions. For more detail on what can
be done via a pcre regular expression, check out the PCRE web site http://www.pcre.org
[Word Count: 33]

pcre:[!]"(/<regex>/|m<delim><regex><delim>)[ismxAEGRUBPHMCOIDKYS]";
[Word Count: 1]

The post-re modiﬁers set compile time ﬂags for the regular expression. See tables 3.7, 3.8, and 3.9 for descriptions of
each modiﬁer.
[Word Count: 22]

Table 3.7: Perl compatible modiﬁers for pcre
i
case insensitive
s
include newlines in the dot metacharacter
m
By default, the string is treated as one big line of characters. ˆ and $ match at
the beginning and ending of the string. When m is set, ˆ and $ match immediately
following or immediately before any newline in the buffer, as well as the very start
and very end of the buffer.
x
whitespace data characters in the pattern are ignored except when escaped or in-
side a character class
[Word Count: 90]

△
! NOTE
The modiﬁers R (relative) and B (rawbytes) are not allowed with any of the HTTP modiﬁers such as U, I, P,
H, D, M, C, K, S and Y.
[Word Count: 32]

Table 3.8: PCRE compatible modiﬁers for pcre
A
the pattern must match only at the start of the buffer (same as ˆ )
E
Set $ to match only at the end of the subject string. Without E, $ also matches
immediately before the ﬁnal character if it is a newline (but not before any other
newlines).
G
Inverts the ”greediness” of the quantiﬁers so that they are not greedy by default,
but become greedy if followed by ”?”.
[Word Count: 79]

This example performs a case-insensitive search for the HTTP URI foo.php?id=<some numbers>
[Word Count: 12]

alert tcp any any -> any 80 (content:"/foo.php?id="; pcre:"/\/foo.php?id=[0-9]{1,10}/iU";)
[Word Count: 9]

△
! NOTE
It is wise to have at least one content keyword in a rule that uses pcre. This allows the fast-pattern matcher
to ﬁlter out non-matching packets so that the pcre evaluation is not performed on each and every packet
coming across the wire.
[Word Count: 46]

△
! NOTE
Snort’s handling of multiple URIs with PCRE does not work as expected. PCRE when used without a
uricontent only evaluates the ﬁrst URI. In order to use pcre to inspect all URIs, you must use either a
content or a uricontent.
[Word Count: 44]

This option sets the cursor used for detection to the raw transport payload.
[Word Count: 13]

Any relative or absolute content matches (without HTTP modiﬁers or rawbytes) and other payload detecting rule
options that follow pkt data in a rule will apply to the raw TCP/UDP payload or the normalized buffers (in case of
telnet, smtp normalization) until the cursor (used for detection) is set again.
[Word Count: 50]

This rule option can be used several times in a rule.
[Word Count: 11]

alert tcp any any -> any any(msg:"Absolute Match"; pkt_data; content:"BLAH"; offset:0; depth:10;)
alert tcp any any -> any any(msg:"PKT DATA"; pkt_data; content:"foo"; within:10;)
alert tcp any any -> any any(msg:"PKT DATA"; pkt_data; content:"foo";)
alert tcp any any -> any any(msg:"PKT DATA"; pkt_data; pcre:"/foo/i";)
[Word Count: 43]

Any relative or absolute content matches (without HTTP modiﬁers or rawbytes) and payload detecting rule options
that follow file data in a rule will apply to this buffer until explicitly reset by other rule options.
[Word Count: 35]

This rule option can be used several time in a rule.
[Word Count: 11]

The argument mime to file data is deprecated. The rule options file data will itself point to the decoded MIME
attachment.
[Word Count: 21]

alert tcp any any -> any any(msg:"Absolute Match"; file_data; content:"BLAH"; offset:0; depth:10;)
alert tcp any any -> any any(msg:"FILE DATA"; file_data; content:"foo"; within:10;)
alert tcp any any -> any any(msg:"FILE DATA"; file_data; content:"foo";)
alert tcp any any -> any any(msg:"FILE DATA"; file_data; pcre:"/foo/i";)
[Word Count: 43]

The following rule searches for content "foo" within the file_data buffer and content "bar" within the
entire packet payload. The rule option pkt_data will reset the cursor used for detection to the
TCP payload.
alert tcp any any -> any any(msg:"FILE DATA"; file_data; content:"foo"; pkt_data; content:"bar";)
[Word Count: 46]

This option is used to decode the base64 encoded data. This option is particularly useful in case of HTTP headers such
as HTTP authorization headers. This option unfolds the data before decoding it.
[Word Count: 33]

base64_decode[:[bytes <bytes_to_decode>][, ][offset <offset>[, relative]]];
[Word Count: 5]

bytes
Number of base64 encoded bytes to decode. This argument takes positive and
non-zero values only. When this option is not speciﬁed we look for base64 en-
coded data till either the end of header line is reached or end of packet payload is
reached.
offset
Determines the offset relative to the doe ptr when the option relative is speciﬁed
or relative to the start of the packet payload to begin inspection of base64 encoded
data. This argument takes positive and non-zero values only.
relative
Speciﬁes the inspection for base64 encoded data is relative to the doe ptr.
[Word Count: 98]

The above arguments to base64 decode are optional.
△
! NOTE
This option can be extended to protocols with folding similar to HTTP. If folding is not present the search for
base64 encoded data will end when we see a carriage return or line feed or both without a following space or
tab.
This option needs to be used in conjunction with base64 data for any other payload detecting rule options
to work on base64 decoded buffer.
[Word Count: 77]

alert tcp $EXTERNAL_NET any -> $HOME_NET any \
(msg:"Base64 Encoded Data"; base64_decode; base64_data; \
content:"foo bar"; within:20;)
[Word Count: 17]

alert tcp $EXTERNAL_NET any -> $HOME_NET any \
(msg:"Authorization NTLM"; content:"Authorization: NTLM";
[Word Count: 12]

base64_decode:relative; base64_data; content:"NTLMSSP"; )
[Word Count: 4]

alert tcp any any -> any any (msg:"Authorization NTLM"; \
content:"Authorization:"; http_header; \
base64_decode:bytes 12, offset 6, relative; base64_data; \
content:"NTLMSSP"; within:8;)
[Word Count: 22]

This option is similar to the rule option file data and is used to set the cursor used for detection to the beginning of
the base64 decoded buffer if present.
[Word Count: 30]

This option does not take any arguments. The rule option base64 decode needs to be speciﬁed before the base64 data
option.
[Word Count: 21]

This option matches if there is base64 decoded buffer.
△
! NOTE
Fast pattern content matches are not allowed with this buffer.
[Word Count: 22]

alert tcp any any -> any any (msg:"Authorization NTLM"; \
content:"Authorization:"; http_header; \
base64_decode:bytes 12, offset 6, relative; base64_data; \
content:"NTLMSSP"; within:8;)
[Word Count: 22]

Test a byte ﬁeld against a speciﬁc value (with operator). Capable of testing binary values or converting representative
byte strings to their binary equivalent and testing them.
[Word Count: 27]

For a more detailed explanation, please read Section 3.9.5.
[Word Count: 9]

byte_test:<bytes to convert>, [!]<operator>, <value>, <offset> \
[, relative][, <endian>][, string, <number type>][, dce] \
[, bitmask <bitmask_value>];
[Word Count: 18]

bytes
= 1 - 10
operator
= ’<’ | ’=’ | ’>’ | ’<=’ | ’>=’ | ’&’ | ’ˆ’
value
= 0 - 4294967295
offset
= -65535 to 65535
bitmask_value
= 1 to 4 byte hexadecimal value
[Word Count: 38]

bytes to convert
Number of bytes to pick up from the packet. The allowed values are 1 to 10 when
used without dce. If used with dce allowed values are 1, 2 and 4.
operator
Operation to perform to test the value:
[Word Count: 42]

value
Value to test the converted value against
offset
Number of bytes into the payload to start processing
relative
Use an offset relative to last pattern match
endian
Endian type of the number being read:
[Word Count: 35]

• big - Process data as big endian (default)
[Word Count: 9]

• little - Process data as little endian
[Word Count: 8]

string
Data is stored in string format in packet
number type
Type of number being read:
[Word Count: 16]

• hex - Converted string data is represented in hexadecimal
[Word Count: 10]

• dec - Converted string data is represented in decimal
[Word Count: 10]

• oct - Converted string data is represented in octal
[Word Count: 10]

dce
Let the DCE/RPC 2 preprocessor determine the byte order of the value to be con-
verted. See section 2.2.16 for a description and examples (2.2.16 for quick refer-
ence).
bitmask
Applies the AND operator on the bytes converted. The result will be right-shifted
by the number of bits equal to the number of trailing zeros in the mask.
[Word Count: 59]

Any of the operators can also include ! to check if the operator is not true. If ! is speciﬁed without an operator, then
the operator is set to =.
△
! NOTE
Snort uses the C operators for each of these operators. If the & operator is used, then it would be the same as
using if (data & value) { do something();}
[Word Count: 64]

alert udp $EXTERNAL_NET any -> $HOME_NET any \
(msg:"AMD procedure 7 plog overflow"; \
content:"|00 04 93 F3|"; \
content:"|00 00 00 07|"; distance:4; within:4; \
byte_test:4, >, 1000, 20, relative;)
[Word Count: 31]

alert tcp $EXTERNAL_NET any -> $HOME_NET any \
[Word Count: 8]

(msg:"AMD procedure 7 plog overflow"; \
content:"|00 04 93 F3|"; \
content:"|00 00 00 07|"; distance:4; within:4; \
byte_test:4, >, 1000, 20, relative;)
[Word Count: 23]

alert udp any any -> any 1234 \
(byte_test:4, =, 1234, 0, string, dec; \
msg:"got 1234!";)
[Word Count: 17]

alert udp any any -> any 1235 \
(byte_test:3, =, 123, 0, string, dec; \
msg:"got 123!";)
[Word Count: 17]

alert udp any any -> any 1236 \
(byte_test:2, =, 12, 0, string, dec; \
msg:"got 12!";)
[Word Count: 17]

alert udp any any -> any 1237 \
(byte_test:10, =, 1234567890, 0, string, dec; \
msg:"got 1234567890!";)
[Word Count: 17]

alert udp any any -> any 1238 \
(byte_test:8, =, 0xdeadbeef, 0, string, hex; \
msg:"got DEADBEEF!";)
[Word Count: 17]

alert tcp any any -> any any \
(byte_test:2, =, 568, 0, bitmask 0x3FF0; \
msg:"got 568 after applying bitmask 0x3FF0 on 2 bytes extracted";)
[Word Count: 25]

The byte jump keyword allows rules to be written for length encoded protocols trivially. By having an option that
reads the length of a portion of data, then skips that far forward in the packet, rules can be written that skip over
speciﬁc portions of length-encoded protocols and perform detection in very speciﬁc locations.
[Word Count: 54]

The byte jump option does this by reading some number of bytes, convert them to their numeric representation, move
that many bytes forward and set a pointer for later detection. This pointer is known as the detect offset end pointer, or
doe ptr.
[Word Count: 43]

For a more detailed explanation, please read Section 3.9.5.
[Word Count: 9]

byte_jump:<bytes_to_convert>, <offset> [, relative][, multiplier <mult_value>] \
[, <endian>][, string, <number_type>][, align][, from_beginning][, from_end] \
[, post_offset <adjustment value>][, dce][, bitmask <bitmask_value>];
[Word Count: 22]

bytes
= 1 - 10
offset
= -65535 to 65535
mult_value
= 0 - 65535
post_offset
= -65535 to 65535
bitmask_value
= 1 to 4 bytes hexadecimal value
[Word Count: 28]

alert udp any any -> any 32770:34000 (content:"|00 01 86 B8|"; \
content:"|00 00 00 01|"; distance:4; within:4; \
byte_jump:4, 12, relative, align; \
byte_test:4, >, 900, 20, relative; \
msg:"statd format string buffer overflow";)
[Word Count: 35]

alert tcp any any -> any any (content:"Begin"; \
byte_jump:0, 0, from_end, post_offset -6; \
content:"end.."; distance:0; within:5; \
msg:"Content match from end of the payload";)
[Word Count: 26]

alert tcp any any -> any any (content:"catalog"; \
byte_jump:2, 1, relative, post_offset 2, bitmask 0x03f0; \
byte_test:2, =, 968, 0, relative; \
msg:"Bitmask applied on the 2 bytes extracted for byte_jump";)
[Word Count: 32]

alert tcp any any -> any any (content:"catalog"; \
byte_jump:1, 2, from_end, post_offset -5, bitmask 0x3c; \
byte_test:1, =, 106, 0, relative; \
msg:"Byte jump calculated from end of payload after bitmask applied";)
[Word Count: 33]

The byte extract keyword is another useful option for writing rules against length-encoded protocols. It reads in
some number of bytes from the packet payload and saves it to a variable. These variables can be referenced later in
[Word Count: 38]

the rule, instead of using hard-coded values.
△
! NOTE
Only two byte extract variables may be created per rule. They can be re-used in the same rule any number
of times.
[Word Count: 32]

byte_extract:<bytes_to_extract>, <offset>, <name> [, relative] \
[, multiplier <multiplier value>][, <endian>][, string][, hex][, dec][, oct] \
[, align <align value>][, dce][, bitmask <bitmask>];
[Word Count: 23]

bytes_to_extract = 1 - 10
operator
= ’<’ | ’=’ | ’>’ | ’<=’ | ’>=’ | ’&’ | ’ˆ’
value
= 0 - 4294967295
offset
= -65535 to 65535
bitmask_value
= 1 to 4 byte hexadecimal value
[Word Count: 38]

Other options which use byte extract variables
[Word Count: 7]

A byte extract rule option detects nothing by itself. Its use is in extracting packet data for use in other rule options.
Here is a list of places where byte extract variables can be used:
[Word Count: 35]

Rule Option
Arguments that Take Variables
[Word Count: 6]

content/uricontent
offset, depth, distance, within
byte test
offset, value
byte jump
offset
isdataat
offset
[Word Count: 14]

• Read the offset of a string from a byte at offset 0.
[Word Count: 13]

• Read the depth of a string from a byte at offset 1.
[Word Count: 13]

• Use these values to constrain a pattern match to a smaller area.
[Word Count: 13]

alert tcp any any -> any any (byte_extract:1, 0, str_offset; \
byte_extract:1, 1, str_depth; \
content:"bad stuff"; offset:str_offset; depth:str_depth; \
msg:"Bad Stuff detected within field";)
[Word Count: 25]

alert tcp any any -> any any (content:"|04 63 34 35|"; offset:4; depth:4; \
byte_extract: 2, 0, var_match, relative, bitmask 0x03ff; \
byte_test: 2, =, var_match, 2, relative; \
msg:"Byte test value matches bitmask applied on bytes extracted";)
[Word Count: 38]

Perform a mathematical operation on an extracted value and a speciﬁed value or existing variable, and store the
outcome in a new resulting variable. These resulting variables can be referenced later in the rule, instead of using
hard-coded values.
[Word Count: 39]

byte_math:bytes <bytes_to_extract>, offset <offset_value>, oper <operator>,
rvalue <r_value>, result <result_variable> [, relative]
[, endian <endian>] [, string <number type>][, dce]
[, bitmask <bitmask_value>];
[Word Count: 23]

bytes_to_extract = 1 - 10
operator
= ’+’ | ’-’ | ’*’ | ’/’ | ’<<’ | ’>>’
r_value
= 0 - 4294967295 | byte extract variable
offset_value
= -65535 to 65535
bitmask_value
= 1 to 4 byte hexadecimal value
result_variable
= Result Variable name
[Word Count: 45]

bytes to extract
Number of bytes to pick up from the packet. The allowed values are 1 to 10 when
used without dce. If used with dce allowed values are 1, 2 and 4. If used with
<< or >> operator, allowed values are 1 to 4.
oper
Mathematical Operation to perform on the extracted value Operations allowed: +,
-, *, /, <<, >>
rvalue
Value to use mathematical operation against
offset
Number of bytes into the payload to start processing
relative
Use an offset relative to last pattern match
endian
Endian type of the number being read:
[Word Count: 98]

• big - Process data as big endian (default)
[Word Count: 9]

• little - Process data as little endian
[Word Count: 8]

string
Data is stored in string format in packet
number type
Type of number being read:
[Word Count: 16]

• hex - Converted string data is represented in hexadecimal
[Word Count: 10]

• dec - Converted string data is represented in decimal
[Word Count: 10]

• oct - Converted string data is represented in octal
[Word Count: 10]

dce
Let the DCE/RPC 2 preprocessor determine the byte order of the value to be con-
verted. See section 2.2.16 for a description and examples (2.2.16 for quick refer-
ence).
bitmask
Applies the AND operator on the bytes extracted. The result will be right-shifted
by the number of bits equal to the number of trailing zeros in the mask.
[Word Count: 59]

Other rule options which use byte math result variable
[Word Count: 9]

Rule Option
Arguments that take result variable
[Word Count: 7]

content
offset, depth, distance, within
byte test
offset, value
byte jump
offset
isdataat
offset
[Word Count: 14]

alert udp $EXTERNAL_NET any -> $HOME_NET any \
(msg:"Perform Arithmetic Operation on the extracted bytes"; \
content:"|00 04 93 F3|"; \
content:"|00 00 00 07|"; distance:4; within:4; \
byte_math:bytes 4, offset 0, oper +, rvalue 248, result var, relative; \
byte_test:4, >, var, 2, relative;)
[Word Count: 45]

alert tcp $EXTERNAL_NET any -> $HOME_NET any \
(msg:"Bitwise shift operator"; \
content:"|00 00 00 07|"; distance:4; within:4; \
byte_extract: 1, 0, extracted_val, relative; \
byte_math: bytes 1, offset 2, oper >>, rvalue extracted_val, result var, relative; \
byte_test:2, =, var, 0, relative;)
[Word Count: 43]

alert udp any any -> any 1234 \
(content: "Packets start"; \
byte_math: bytes 2, offset 0, oper -, rvalue 100, result var, relative, bitmask 0x7FF0; \
[Word Count: 27]

content: "Packets end"; distance: 2; within var; \
msg:"Content match with bitmask applied to the bytes extracted";)
[Word Count: 17]

alert udp any any -> any 1235 \
(byte_extract: 4, 3,
extracted_val, relative; \
byte_math: bytes 5, offset 0, oper +, rvalue extracted_val, result var, string hex; \
byte_test:5, =, var, 4, string, hex; \
msg:"String operator used with math rule option";)
[Word Count: 42]

The ftpbounce keyword detects FTP bounce attacks.
[Word Count: 7]

alert tcp $EXTERNAL_NET any -> $HOME_NET 21 (msg:"FTP PORT bounce attempt"; \
flow:to_server,established; content:"PORT"; nocase; ftpbounce; pcre:"/ˆPORT/smi";\
classtype:misc-attack; sid:3441; rev:1;)
[Word Count: 20]

The ASN.1 detection plugin decodes a packet or a portion of a packet, and looks for various malicious encodings.
[Word Count: 19]

Multiple options can be used in an ’asn1’ option and the implied logic is boolean OR. So if any of the arguments
evaluate as true, the whole option evaluates as true.
[Word Count: 31]

The ASN.1 options provide programmatic detection capabilities as well as some more dynamic type detection. If an
option has an argument, the option and the argument are separated by a space or a comma. The preferred usage is to
use a space between option and argument.
[Word Count: 46]

asn1:[bitstring_overflow][, double_overflow][, oversize_length <value>][, absolute_offset <value>|relat
[Word Count: 6]

alert udp any any -> any 161 (msg:"Oversize SNMP Length"; \
asn1:oversize_length 10000, absolute_offset 0;)
[Word Count: 15]

alert tcp any any -> any 80 (msg:"ASN1 Relative Foo"; content:"foo"; \
asn1:bitstring_overflow, relative_offset 0;)
[Word Count: 15]

The CVS detection plugin aids in the detection of: Bugtraq-10384, CVE-2004-0396: ”Malformed Entry Modiﬁed and
Unchanged ﬂag insertion”. Default CVS server ports are 2401 and 514 and are included in the default ports for stream
reassembly.
△
! NOTE
This plugin cannot do detection over encrypted sessions, e.g. SSH (usually port 22).
[Word Count: 52]

Option
Description
invalid-entry
Looks for an invalid Entry string, which is a way of causing a heap overﬂow (see
CVE-2004-0396) and bad pointer dereference in versions of CVS 1.11.15 and
before.
[Word Count: 31]

alert tcp any any -> any 2401 (msg:"CVS Invalid-entry"; \
flow:to_server,established; cvs:invalid-entry;)
[Word Count: 12]

See the DCE/RPC 2 Preprocessor section 2.2.16 for a description and examples of using this rule option.
[Word Count: 17]

See the DCE/RPC 2 Preprocessor section 2.2.16 for a description and examples of using this rule option.
[Word Count: 17]

See the DCE/RPC 2 Preprocessor section 2.2.16 for a description and examples of using this rule option.
[Word Count: 17]

See the SIP Preprocessor section 2.2.19 for a description and examples of using this rule option.
[Word Count: 16]

See the SIP Preprocessor section 2.2.19 for a description and examples of using this rule option.
[Word Count: 16]

See the SIP Preprocessor section 2.2.19 for a description and examples of using this rule option.
[Word Count: 16]

See the SIP Preprocessor section 2.2.19 for a description and examples of using this rule option.
[Word Count: 16]

See the GTP Preprocessor section 2.2.21 for a description and examples of using this rule option.
[Word Count: 16]

See the GTP Preprocessor section 2.2.21 for a description and examples of using this rule option.
[Word Count: 16]

See the GTP Preprocessor section 2.2.21 for a description and examples of using this rule option.
[Word Count: 16]

See the SSL/TLS Preprocessor section 2.2.14 for a description and examples of using this rule option.
[Word Count: 16]

See the SSL/TLS Preprocessor section 2.2.14 for a description and examples of using this rule option.
[Word Count: 16]

3.5.50
Payload Detection Quick Reference
[Word Count: 5]

Table 3.10: Payload detection rule option keywords
[Word Count: 7]

The fragoffset keyword allows one to compare the IP fragment offset ﬁeld against a decimal value. To catch all the ﬁrst
fragments of an IP session, you could use the fragbits keyword and look for the More fragments option in conjunction
with a fragoffset of 0.
[Word Count: 46]

alert ip any any -> any any \
(msg:"First Fragment"; fragbits:M; fragoffset:0;)
[Word Count: 12]

The ttl keyword is used to check the IP time-to-live value. This option keyword was intended for use in the detection
of traceroute attempts. This keyword takes numbers from 0 to 255.
[Word Count: 32]

ttl:[<, >, =, <=, >=]<number>;
ttl:[<number>]-[<number>];
[Word Count: 6]

This example checks for a time-to-live value that is less than 3.
[Word Count: 12]

This example checks for a time-to-live value that between 3 and 5.
[Word Count: 12]

This example checks for a time-to-live value that between 0 and 5.
[Word Count: 12]

This example checks for a time-to-live value that between 5 and 255.
[Word Count: 12]

The following examples are NOT allowed by ttl keyword:
[Word Count: 9]

The tos keyword is used to check the IP TOS ﬁeld for a speciﬁc value.
[Word Count: 15]

This example looks for a tos value that is not 4
[Word Count: 11]

The id keyword is used to check the IP ID ﬁeld for a speciﬁc value. Some tools (exploits, scanners and other odd
programs) set this ﬁeld speciﬁcally for various purposes, for example, the value 31337 is very popular with some
hackers.
[Word Count: 41]

This example looks for the IP ID of 31337.
[Word Count: 9]

The ipopts keyword is used to check if a speciﬁc IP option is present.
[Word Count: 14]

lsrre - Loose Source Routing (For MS99-038 and CVE-1999-0909)
[Word Count: 9]

The most frequently watched for IP options are strict and loose source routing which aren’t used in any widespread
internet applications.
[Word Count: 21]

ipopts:<rr|eol|nop|ts|sec|esec|lsrr|lsrre|ssrr|satid|any>;
[Word Count: 1]

This example looks for the IP Option of Loose Source Routing.
[Word Count: 11]

Only a single ipopts keyword may be speciﬁed per rule.
[Word Count: 10]

The fragbits keyword is used to check if fragmentation and reserved bits are set in the IP header.
[Word Count: 18]

The following modiﬁers can be set to change the match criteria:
[Word Count: 11]

+ match on the speciﬁed bits, plus any others
[Word Count: 9]

* match if any of the speciﬁed bits are set
[Word Count: 10]

! match if the speciﬁed bits are not set
[Word Count: 9]

This example checks if the More Fragments bit and the Do not Fragment bit are set.
[Word Count: 16]

The dsize keyword is used to test the packet payload size. This may be used to check for abnormally sized packets
that might cause buffer overﬂows.
[Word Count: 26]

This example looks for a dsize that is between 300 and 400 bytes (inclusive).
[Word Count: 14]

Note that segmentation makes dsize less reliable for TCP based protocols such as HTTP. Furthermore, dsize will fail
on stream rebuilt packets, regardless of the size of the payload, unless protocol aware ﬂushing (PAF) marks this packet
as the start of a message.
[Word Count: 43]

The ﬂags keyword is used to check if speciﬁc TCP ﬂag bits are present.
[Word Count: 14]

F - FIN - Finish (LSB in TCP Flags byte)
[Word Count: 10]

C - CWR - Congestion Window Reduced (MSB in TCP Flags byte)
[Word Count: 12]

E - ECE - ECN-Echo (If SYN, then ECN capable. Else, CE ﬂag in IP header is set)
[Word Count: 18]

The following modiﬁers can be set to change the match criteria:
[Word Count: 11]

+ - match on the speciﬁed bits, plus any others
[Word Count: 10]

* - match if any of the speciﬁed bits are set
[Word Count: 11]

! - match if the speciﬁed bits are not set
[Word Count: 10]

To handle writing rules for session initiation packets such as ECN where a SYN packet is sent with CWR and ECE
set, an option mask may be speciﬁed by preceding the mask with a comma. A rule could check for a ﬂags value of
S,CE if one wishes to ﬁnd packets with just the syn bit, regardless of the values of the reserved bits.
[Word Count: 64]

This example checks if just the SYN and the FIN bits are set, ignoring CWR (reserved bit 1) and ECN (reserved bit
2).
[Word Count: 23]

alert tcp any any -> any any (flags:SF,CE;)
[Word Count: 8]

△
! NOTE
The reserved bits ’1’ and ’2’ have been replaced with ’C’ and ’E’, respectively, to match RFC 3168, ”The
Addition of Explicit Congestion Notiﬁcation (ECN) to IP”. The old values of ’1’ and ’2’ are still valid for
the flag keyword, but are now deprecated.
[Word Count: 48]

The ﬂow keyword is used in conjunction with session tracking (see Section 2.2.2). It allows rules to only apply to
certain directions of the trafﬁc ﬂow.
[Word Count: 26]

This allows rules to only apply to clients or servers. This allows packets related to $HOME NET clients viewing web
pages to be distinguished from servers running in the $HOME NET.
[Word Count: 31]

The established keyword will replace the flags:+A used in many places to show established TCP connections.
[Word Count: 16]

flow:[(established|not_established|stateless)]
[,(to_client|to_server|from_client|from_server)]
[,(no_stream|only_stream)]
[,(no_frag|only_frag)];
[Word Count: 4]

alert tcp !$HOME_NET any -> $HOME_NET 21 (msg:"cd incoming detected"; \
flow:from_client; content:"CWD incoming"; nocase;)
[Word Count: 15]

alert tcp !$HOME_NET 0 -> $HOME_NET 0 (msg:"Port 0 TCP traffic"; \
flow:stateless;)
[Word Count: 13]

The flowbits keyword is used in conjunction with conversation tracking from the Session preprocessor(see Section2.2.2).
It allows rules to track states during a transport protocol session. The ﬂowbits option is most useful for TCP sessions,
as it allows rules to generically track the state of an application protocol.
[Word Count: 48]

There are several keywords associated with ﬂowbits. Most of the options need a user-deﬁned name for the speciﬁc
state that is being checked. Some keyword uses group name. When no group name is speciﬁed the ﬂowbits will belong
to a default group. A particular ﬂowbit can belong to more than one group. Flowbit name and group name should be
limited to any alphanumeric string including periods, dashes, and underscores.
[Word Count: 69]

flowbits:[set|setx|unset|toggle|isset|isnotset|noalert|reset][, <bits/bats>][, <GROUP_NAME>];
bits ::= bit[|bits]
bats ::= bit[&bats]
[Word Count: 9]

This keyword sets bits to group for a particular ﬂow. When no group speciﬁed, set the default group. This keyword
always returns true.
[Word Count: 23]

Syntax:
flowbits:set,bats[,group]
Usage:
flowbits:set,bit1,doc;
flowbits:set,bit2&bit3,doc;
First rule sets bit1 in doc group, second rule sets bit2 and bit3 in doc group.
So doc group has bit 1, bit2 and bit3 set
[Word Count: 31]

This keyword sets bits to group exclusively. This clears other bits in group. Group must present.This keyword always
returns true.
[Word Count: 20]

Syntax:
flowbits:setx,bats,group
Usage:
flowbits: setx, bit1, doc
flowbits: setx, bit2&bit3, doc
First rule sets bit1 in doc group, second rule sets bit2 and bit3 in doc group.
So doc group has bit2 and bit3 set, because bit1 is cleared by rule 2.
[Word Count: 42]

This keyword clears bits speciﬁed for a particular ﬂow or clears all bits in the group (Group must present). This
keyword always returns true.
[Word Count: 24]

Syntax:
flowbits:unset,bats
flowbits:unset,all,group
[Word Count: 3]

Usage:
flowbits: unset, bit1
Clear bit1.
[Word Count: 6]

flowbits: unset, bit1&bit2
Clear bit1 and bit2
[Word Count: 7]

flowbits: unset, all, doc
This clears all bits in the doc group.
[Word Count: 12]

If ﬂowbit is set, unset it. If it is unset, set it. Toggle every bit speciﬁed or toggle all the bits in group (Group must be
present). This keyword always returns true.
[Word Count: 32]

Syntax:
flowbits:toggle,bats
flowbits:toggle,all,group
[Word Count: 3]

Usage:
flowbits: toggle, bit1&bit2
If bit1 is 0 and bit2 is 1 before, after this rule, bit1 is 1 and bit2 is 0.
[Word Count: 23]

flowbits:toggle,all,doc
Toggle all the bits in group doc as described above.
[Word Count: 11]

This keyword checks a bit or several bits to see if it is set. It returns true or false based on the following syntax.
[Word Count: 24]

Syntax:
flowbits:isset, bits => Check whether any bit is set
flowbits:isset, bats => Check whether all bits are set
flowbits:isset, any, group => Check whether any bit in the group is set.
flowbits:isset, all, group => Check whether all bits in the group are set.
[Word Count: 45]

Usage
flowbits:isset, bit1|bit2 => If either bit1 or bit2 is set, return true
flowbits:isset, bit1&bit2 => If both bit1 and bit2 are set, return true, otherwise false
flowbits:isset, any, doc => If any bit in group doc is set, return true
flowbits:isset, all, doc => If all the bits in doc group are set, return true
[Word Count: 56]

This keyword is the reverse of isset. It returns true if isset is false, it returns false if isset is true. Isnotset works on the
ﬁnal result, not on individual bits.
[Word Count: 31]

Syntax:
flowbits:isnotset, bits => Check whether not any bit is set
flowbits:isnotset, bats => Check whether not all bits are set
flowbits:isnotset, any, group => Check whether not bit in the group is set.
flowbits:isnotset, all, group => Check whether not all bits in the group are set.
[Word Count: 48]

Usage
flowbits:isnotset, bit1|bit2 => If either bit1 or bit2 is set, return true
flowbits:isnotset, bit1&bit2 => If both bit1 and bit2 are set, return true, otherwise false
flowbits:isnotset, any, doc => If any bit in group doc is set, return true
flowbits:isnotset, all, doc => If all the bits in doc group are set, return true
[Word Count: 56]

This keyword always returns false. It allows users to write rules that set, unset, and toggle bit without generating an
alert. This is most useful for writing ﬂowbit rules that set bit on normal trafﬁc and signiﬁcantly reduces unwanted
alerts. There is no bit speciﬁed with this keyword.
[Word Count: 48]

This keyword resets all of the states on a given ﬂow if no group speciﬁed, otherwise, reset all the bits in a group. This
always returns true. There is no bit speciﬁed with this keyword.
[Word Count: 35]

Usage:
flowbits:reset => reset all the bits in the flow
flowbits: reset, doc => reset all the bits in the doc group
[Word Count: 22]

alert tcp any 143 -> any any (msg:"IMAP login";
content:"OK LOGIN"; flowbits:set,logged_in;
flowbits:noalert;)
[Word Count: 13]

alert tcp any any -> any 143 (msg:"IMAP LIST"; content:"LIST";
flowbits:isset,logged_in;)
[Word Count: 11]

The seq keyword is used to check for a speciﬁc TCP sequence number.
[Word Count: 13]

This example looks for a TCP sequence number of 0.
[Word Count: 10]

The ack keyword is used to check for a speciﬁc TCP acknowledge number.
[Word Count: 13]

This example looks for a TCP acknowledge number of 0.
[Word Count: 10]

The window keyword is used to check for a speciﬁc TCP window size.
[Word Count: 13]

This example looks for a TCP window size of 55808.
[Word Count: 10]

The itype keyword is used to check for a speciﬁc ICMP type value.
[Word Count: 13]

This example looks for an ICMP type greater than 30.
[Word Count: 10]

The icode keyword is used to check for a speciﬁc ICMP code value.
[Word Count: 13]

The <> operator in the ﬁrst format checks for an ICMP code within a speciﬁed range (exclusive). That is, strictly
greater than the min value and strictly less than the max value. Note that the min value can a -1 allowing an ICMP
code of zero to be included in the range.
[Word Count: 52]

Numerical values are validated with respect to permissible ICMP code values between 0 and 255 and other criteria.
[Word Count: 18]

icode:min<>max
-1 <= min <= 254
1 <= max <= 256
(max - min) > 1
[Word Count: 16]

This example looks for an ICMP code greater than 30.
[Word Count: 10]

This example looks for an ICMP code greater than zero and less than 30.
[Word Count: 14]

The icmp id keyword is used to check for a speciﬁc ICMP ID value.
[Word Count: 14]

This is useful because some covert channel programs use static ICMP ﬁelds when they communicate. This particular
plugin was developed to detect the stacheldraht DDoS agent.
[Word Count: 26]

The icmp seq keyword is used to check for a speciﬁc ICMP sequence value.
[Word Count: 14]

This is useful because some covert channel programs use static ICMP ﬁelds when they communicate. This particular
plugin was developed to detect the stacheldraht DDoS agent.
[Word Count: 26]

This example looks for an ICMP Sequence of 0.
[Word Count: 9]

The rpc keyword is used to check for a RPC application, version, and procedure numbers in SUNRPC CALL requests.
[Word Count: 19]

Wildcards are valid for both version and procedure numbers by using ’*’;
[Word Count: 12]

rpc:<application number>, [<version number>|*], [<procedure number>|*]>;
[Word Count: 6]

The following example looks for an RPC portmap GETPORT request.
[Word Count: 10]

alert tcp any any -> any 111 (rpc:100000, *, 3;);
[Word Count: 10]

Because of the fast pattern matching engine, the RPC keyword is slower than looking for the RPC values by using
normal content matching.
[Word Count: 23]

The ip proto keyword allows checks against the IP protocol header. For a list of protocols that may be speciﬁed by
name, see /etc/protocols.
[Word Count: 24]

alert ip any any -> any any (ip_proto:igmp;)
[Word Count: 8]

The sameip keyword allows rules to check if the source ip is the same as the destination IP.
[Word Count: 18]

This example looks for any trafﬁc where the Source IP and the Destination IP is the same.
[Word Count: 17]

The stream reassemble keyword allows a rule to enable or disable TCP stream reassembly on matching trafﬁc.
△
! NOTE
The stream reassemble option is only available when the Stream preprocessor is enabled.
[Word Count: 33]

stream_reassemble:<enable|disable>, <server|client|both>[, noalert][, fastpath];
[Word Count: 4]

• The optional noalert parameter causes the rule to not generate an alert when it matches.
[Word Count: 16]

• The optional fastpath parameter causes Snort to ignore the rest of the connection.
[Word Count: 14]

For example, to disable TCP reassembly for client trafﬁc when we see a HTTP 200 Ok Response message, use:
[Word Count: 19]

alert tcp any 80 -> any any (flow:to_client, established; content:"200 OK";
stream_reassemble:disable,client,noalert;)
[Word Count: 12]

The stream size keyword allows a rule to match trafﬁc according to the number of bytes observed, as determined by
the TCP sequence numbers.
△
! NOTE
The stream size option is only available when the Stream preprocessor is enabled.
[Word Count: 40]

stream_size:<server|client|both|either>, <operator>, <number>;
[Word Count: 3]

Where the operator is one of the following:
[Word Count: 8]

For example, to look for a session that is less that 6 bytes from the client side, use:
[Word Count: 18]

alert tcp any any -> any any (stream_size:client,<,6;)
[Word Count: 8]

3.6.23
Non-Payload Detection Quick Reference
[Word Count: 5]

Table 3.11: Non-payload detection rule option keywords
[Word Count: 7]

The logto keyword tells Snort to log all packets that trigger this rule to a special output log ﬁle. This is especially
handy for combining data from things like NMAP activity, HTTP CGI scans, etc. It should be noted that this option
does not work when Snort is in binary logging mode.
[Word Count: 52]

The session keyword is built to extract user data from TCP Sessions. There are many cases where seeing what users
are typing in telnet, rlogin, ftp, or even web sessions is very useful.
[Word Count: 33]

There are three available argument keywords for the session rule option: printable, binary, or all.
[Word Count: 15]

The printable keyword only prints out data that the user would normally see or be able to type. The binary keyword
prints out data in a binary format. The all keyword substitutes non-printable characters with their hexadecimal
equivalents.
[Word Count: 38]

The following example logs all printable strings in a telnet packet.
[Word Count: 11]

log tcp any any <> any 23 (session:printable;)
[Word Count: 8]

Given an FTP data session on port 12345, this example logs the payload bytes in binary form.
[Word Count: 17]

log tcp any any <> any 12345 (metadata:service ftp-data; session:binary;)
[Word Count: 10]

Using the session keyword can slow Snort down considerably, so it should not be used in heavy load situations. The
session keyword is best suited for post-processing binary (pcap) log ﬁles.
[Word Count: 31]

The binary keyword does not log any protocol headers below the application layer, and Stream reassembly will cause
duplicate data when the reassembled packets are logged.
[Word Count: 26]

The resp keyword enables an active response that kills the offending session. Resp can be used in both passive or
inline modes. See 2.11.3 for details.
[Word Count: 26]

The react keyword enables an active response that includes sending a web page or other content to the client and then
closing the connection. React can be used in both passive and inline modes. See 2.11.4 for details.
[Word Count: 38]

The tag keyword allow rules to log more than just the single packet that triggered the rule. Once a rule is triggered,
additional trafﬁc involving the source and/or destination host is tagged. Tagged trafﬁc is logged to allow analysis of
response codes and post-attack trafﬁc. tagged alerts will be sent to the same output plugins as the original alert, but it
is the responsibility of the output plugin to properly handle these special alerts.
[Word Count: 74]

tag:host, <count>, <metric>, <direction>;
tag:session[, <count>, <metric>][, exclusive];
[Word Count: 8]

• session - Log packets in the session that set off the rule
• host - Log packets from the host that caused the tag to activate (uses [direction] modiﬁer)
[Word Count: 30]

• <integer> - Count is speciﬁed as a number of units. Units are speciﬁed in the <metric> ﬁeld.
[Word Count: 18]

• packets - Tag the host/session for <count> packets
• seconds - Tag the host/session for <count> seconds
• bytes - Tag the host/session for <count> bytes
[Word Count: 27]

other
• src - Tag packets containing the source IP address of the packet that generated the initial event. Only
relevant if host type is used.
• dst - Tag packets containing the destination IP address of the packet that generated the initial event. Only
relevant if host type is used.
• exclusive - Tag packets only in the ﬁrst matching session. Only relevant if session type is used.
[Word Count: 69]

Note that neither subsequent alerts nor event ﬁlters will prevent a tagged packet from being logged. Subsequent tagged
alerts will cause the limit to reset.
[Word Count: 25]

alert tcp any any <> 10.1.1.1 any \
(flowbits:isnotset,tagged; content:"foobar"; nocase; \
flowbits:set,tagged; tag:host,600,seconds,src;)
[Word Count: 14]

alert tcp 10.1.1.4 any -> 10.1.1.1 any \
(content:"TAGMYPACKETS"; tag:host,0,packets,600,seconds,src;)
[Word Count: 10]

This example logs the ﬁrst 10 seconds or the tagged packet limit (whichever comes ﬁrst) of any telnet session.
[Word Count: 19]

alert tcp any any -> any 23 (flags:S,CE; tag:session,10,seconds;)
[Word Count: 9]

While at least one count and metric is required for tag:host, tag:session with exclusive without any metrics can be used
to get a full session like this:
[Word Count: 27]

pass tcp any any -> 192.168.1.1 80 (flags:S; tag:session,exclusive;)
[Word Count: 9]

The replace keyword is a feature available in inline mode which will cause Snort to replace the prior matching
content with the given string. Both the new string and the content it is to replace must have the same length. You can
have multiple replacements within a rule, one per content.
[Word Count: 51]

detection ﬁlter deﬁnes a rate which must be exceeded by a source or destination host before a rule can generate an
event. detection ﬁlter has the following format:
[Word Count: 28]

detection_filter: \
track <by_src|by_dst>, \
count <c>, seconds <s>;
[Word Count: 9]

Rate is tracked either by source IP address or destination IP address. This means
count is maintained for each unique source IP address or each unique destination
IP address.
count c
The maximum number of rule matches in s seconds allowed before the detection
ﬁlter limit to be exceeded. C must be nonzero.
seconds s
Time period over which count is accrued. The value must be nonzero.
[Word Count: 67]

Snort evaluates a detection filter as the last step of the detection phase, after evaluating all other rule options
(regardless of the position of the ﬁlter within the rule source). At most one detection filter is permitted per rule.
[Word Count: 39]

Example - this rule will ﬁre on every failed login attempt from 10.1.2.100 during one sampling period of 60 seconds,
after the ﬁrst 30 failed login attempts:
[Word Count: 27]

drop tcp 10.1.2.100 any > 10.1.1.100 22 ( \
msg:"SSH Brute Force Attempt";
flow:established,to_server; \
content:"SSH"; nocase; offset:0; depth:4; \
detection_filter:track by_src, count 30, seconds 60; \
sid:1000001; rev:1;)
[Word Count: 29]

Since potentially many events will be generated, a detection filter would normally be used in conjunction with
an event filter to reduce the number of logged events.
△
! NOTE
As mentioned above, Snort evaluates detection filter as the last step of the detection and not in post-
detection.
[Word Count: 49]

Table 3.12: Post-detection rule option keywords
[Word Count: 6]

△
! NOTE
Rule thresholds are deprecated and will not be supported in a future release. Use detection filters (3.7.7)
within rules, or event filters (2.4.2) as standalone conﬁgurations instead.
[Word Count: 30]

threshold: \
type <limit|threshold|both>, \
track <by_src|by_dst>, \
count <c>, seconds <s>;
[Word Count: 12]

This rule logs the ﬁrst event of this SID every 60 seconds.
[Word Count: 12]

alert tcp $external_net any -> $http_servers $http_ports \
(msg:"web-misc robots.txt access"; flow:to_server, established; \
uricontent:"/robots.txt"; nocase; reference:nessus,10302; \
classtype:web-application-activity; threshold:type limit, track \
by_src, count 1 , seconds 60; sid:1000852; rev:1;)
[Word Count: 31]

This rule logs every 10th event on this SID during a 60 second interval. So if less than 10 events occur in 60 seconds,
nothing gets logged. Once an event is logged, a new time period starts for type=threshold.
[Word Count: 39]

alert tcp $external_net any -> $http_servers $http_ports \
(msg:"web-misc robots.txt access"; flow:to_server, established; \
uricontent:"/robots.txt"; nocase; reference:nessus,10302; \
classtype:web-application-activity; threshold:type threshold, \
track by_dst, count 10 , seconds 60 ; sid:1000852; rev:1;)
[Word Count: 32]

This rule logs at most one event every 60 seconds if at least 10 events on this SID are ﬁred.
[Word Count: 20]

alert tcp $external_net any -> $http_servers $http_ports \
(msg:"web-misc robots.txt access"; flow:to_server, established; \
uricontent:"/robots.txt"; nocase; reference:nessus,10302; \
classtype:web-application-activity; threshold:type both, track \
by_dst, count 10, seconds 60; sid:1000852; rev:1;)
[Word Count: 30]

There are some general concepts to keep in mind when developing Snort rules to maximize efﬁciency and speed.
[Word Count: 18]

3.9.2
Catch the Vulnerability, Not the Exploit
[Word Count: 7]

Try to write rules that target the vulnerability, instead of a speciﬁc exploit.
[Word Count: 13]

For example, look for a the vulnerable command with an argument that is too large, instead of shellcode that binds a
shell.
[Word Count: 22]

By writing rules for the vulnerability, the rule is less vulnerable to evasion when an attacker changes the exploit
slightly.
[Word Count: 20]

3.9.3
Catch the Oddities of the Protocol in the Rule
[Word Count: 10]

Many services typically send the commands in upper case letters. FTP is a good example. In FTP, to send the
username, the client sends:
[Word Count: 24]

A simple rule to look for FTP root login attempts could be:
[Word Count: 12]

alert tcp any any -> any any 21 (content:"user root";)
[Word Count: 10]

While it may seem trivial to write a rule that looks for the username root, a good rule will handle all of the odd things
that the protocol might handle when accepting the user command.
[Word Count: 35]

For example, each of the following are accepted by most FTP servers:
[Word Count: 12]

user root
user root
user root
user root
user<tab>root
[Word Count: 9]

To handle all of the cases that the FTP server might handle, the rule needs more smarts than a simple string match.
[Word Count: 22]

A good rule that looks for root login on ftp would be:
[Word Count: 12]

alert tcp any any -> any 21 (flow:to_server,established; \
content:"root"; pcre:"/user\s+root/i";)
[Word Count: 11]

There are a few important things to note in this rule:
[Word Count: 11]

• The rule has a ﬂow option, verifying this is trafﬁc going to the server on an established session.
[Word Count: 19]

• The rule has a content option, looking for root, which is the longest, most unique string in the attack. This option
is added to allow the fast pattern matcher to select this rule for evaluation only if the content root is found in the
payload.
[Word Count: 46]

• The rule has a pcre option, looking for user, followed at least one space character (which includes tab), followed
by root, ignoring case.
[Word Count: 24]

The content matching portion of the detection engine has recursion to handle a few evasion cases. Rules that are not
properly written can cause Snort to waste time duplicating checks.
[Word Count: 30]

The way the recursion works now is if a pattern matches, and if any of the detection options after that pattern fail, then
look for the pattern again after where it was found the previous time. Repeat until the pattern is not found again or the
opt functions all succeed.
[Word Count: 50]

On ﬁrst read, that may not sound like a smart idea, but it is needed. For example, take the following rule:
[Word Count: 21]

alert ip any any -> any any (content:"a"; content:"b"; within:1;)
[Word Count: 10]

This rule would look for “a”, immediately followed by “b”. Without recursion, the payload “aab” would fail, even
though it is obvious that the payload “aab” has “a” immediately followed by “b”, because the ﬁrst ”a” is not immedi-
ately followed by “b”.
[Word Count: 43]

While recursion is important for detection, the recursion implementation is not very smart.
[Word Count: 13]

For example, the following rule options are not optimized:
[Word Count: 9]

Reordering the rule options so that discrete checks (such as dsize) are moved to the beginning of the rule speed up
Snort.
[Word Count: 22]

A packet of 1024 bytes of 0x13 would fail immediately, as the dsize check is the ﬁrst option checked and dsize is a
discrete check without recursion.
[Word Count: 27]

The following rule options are discrete and should generally be placed at the beginning of any rule:
[Word Count: 17]

The rule options byte test and byte jump were written to support writing rules for protocols that have length encoded
data. RPC was the protocol that spawned the requirement for these two rule options, as RPC uses simple length based
encoding for passing data.
[Word Count: 44]

In order to understand why byte test and byte jump are useful, let’s go through an exploit attempt against the sadmind
service.
[Word Count: 22]

Let’s break this up, describe each of the ﬁelds, and ﬁgure out how to write a rule to catch this exploit.
[Word Count: 21]

There are a few things to note with RPC:
[Word Count: 9]

• Numbers are written as uint32s, taking four bytes. The number 26 would show up as 0x0000001a.
[Word Count: 17]

• Strings are written as a uint32 specifying the length of the string, the string, and then null bytes to pad the length
of the string to end on a 4 byte boundary. The string “bob” would show up as 0x00000003626f6200.
[Word Count: 41]

89 09 9c e2
- the request id, a random uint32, unique to each request
00 00 00 00
- rpc type (call = 0, response = 1)
00 00 00 02
- rpc version (2)
00 01 87 88
- rpc program (0x00018788 = 100232 = sadmind)
00 00 00 0a
- rpc program version (0x0000000a = 10)
00 00 00 01
- rpc procedure (0x00000001 = 1)
00 00 00 01
- credential flavor (1 = auth\_unix)
00 00 00 20
- length of auth\_unix data (0x20 = 32
[Word Count: 91]

## the next 32 bytes are the auth\_unix data
40 28 3a 10 - unix timestamp (0x40283a10 = 1076378128 = feb 10 01:55:28 2004 gmt)
00 00 00 0a - length of the client machine name (0x0a = 10)
4d 45 54 41 53 50 4c 4f 49 54 00 00
- metasploit
[Word Count: 53]

00 00 00 00 - uid of requesting user (0)
00 00 00 00 - gid of requesting user (0)
00 00 00 00 - extra group ids (0)
[Word Count: 29]

00 00 00 00
- verifier flavor (0 = auth\_null, aka none)
00 00 00 00
- length of verifier (0, aka none)
[Word Count: 23]

The rest of the packet is the request that gets passed to procedure 1 of sadmind.
[Word Count: 16]

However, we know the vulnerability is that sadmind trusts the uid coming from the client. sadmind runs any request
where the client’s uid is 0 as root. As such, we have decoded enough of the request to write our rule.
[Word Count: 40]

First, we need to make sure that our packet is an RPC call.
[Word Count: 13]

content:"|00 00 00 00|"; offset:4; depth:4;
[Word Count: 6]

Then, we need to make sure that our packet is a call to sadmind.
[Word Count: 14]

content:"|00 01 87 88|"; offset:12; depth:4;
[Word Count: 6]

Then, we need to make sure that our packet is a call to the procedure 1, the vulnerable procedure.
[Word Count: 19]

content:"|00 00 00 01|"; offset:20; depth:4;
[Word Count: 6]

Then, we need to make sure that our packet has auth unix credentials.
[Word Count: 13]

content:"|00 00 00 01|"; offset:24; depth:4;
[Word Count: 6]

We don’t care about the hostname, but we want to skip over it and check a number value after the hostname. This is
where byte test is useful. Starting at the length of the hostname, the data we have is:
[Word Count: 40]

00 00 00 0a 4d 45 54 41 53 50 4c 4f 49 54 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00
[Word Count: 36]

We want to read 4 bytes, turn it into a number, and jump that many bytes forward, making sure to account for the
padding that RPC requires on strings. If we do that, we are now at:
[Word Count: 37]

00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00
[Word Count: 20]

which happens to be the exact location of the uid, the value we want to check.
[Word Count: 16]

In English, we want to read 4 bytes, 36 bytes from the beginning of the packet, and turn those 4 bytes into an integer
and jump that many bytes forward, aligning on the 4 byte boundary. To do that in a Snort rule, we use:
[Word Count: 45]

Now that we have all the detection capabilities for our rule, let’s put them all together.
[Word Count: 16]

content:"|00 00 00 00|"; offset:4; depth:4;
content:"|00 01 87 88|"; offset:12; depth:4;
content:"|00 00 00 01|"; offset:20; depth:4;
content:"|00 00 00 01|"; offset:24; depth:4;
byte_jump:4,36,align;
content:"|00 00 00 00|"; within:4;
[Word Count: 30]

The 3rd and fourth string match are right next to each other, so we should combine those patterns. We end up with:
[Word Count: 22]

content:"|00 00 00 00|"; offset:4; depth:4;
content:"|00 01 87 88|"; offset:12; depth:4;
content:"|00 00 00 01 00 00 00 01|"; offset:20; depth:8;
byte_jump:4,36,align;
content:"|00 00 00 00|"; within:4;
[Word Count: 28]

If the sadmind service was vulnerable to a buffer overﬂow when reading the client’s hostname, instead of reading the
length of the hostname and jumping that many bytes forward, we would check the length of the hostname to make
sure it is not too large.
[Word Count: 45]

To do that, we would read 4 bytes, starting 36 bytes into the packet, turn it into a number, and then make sure it is not
too large (let’s say bigger than 200 bytes). In Snort, we do:
[Word Count: 38]

content:"|00 00 00 00|"; offset:4; depth:4;
content:"|00 01 87 88|"; offset:12; depth:4;
content:"|00 00 00 01 00 00 00 01|"; offset:20; depth:8;
byte_test:4,>,200,36;
[Word Count: 23]

Preprocessors, detection capabilities, and rules can now be developed as dynamically loadable modules to snort. The
dynamic API presents a means for loading dynamic libraries and allowing the module to utilize certain functions
within the main snort code.
[Word Count: 38]

The remainder of this chapter will highlight the data structures and API functions used in developing preprocessors,
detection engines, and rules as a dynamic plugin to snort.
[Word Count: 27]

Beware: the deﬁnitions herein may be out of date; check the appropriate header ﬁles for the current deﬁnitions.
[Word Count: 18]

A number of data structures are central to the API. The deﬁnition of each is deﬁned in the following sections.
[Word Count: 20]

The DynamicPluginMeta structure deﬁnes the type of dynamic module (preprocessor, rules, or detection engine), the
version information, and path to the shared library. A shared library can implement all three types, but typically is
limited to a single functionality such as a preprocessor. It is deﬁned in sf dynamic meta.h as:
[Word Count: 51]

#define TYPE_ENGINE 0x01
#define TYPE_DETECTION 0x02
#define TYPE_PREPROCESSOR 0x04
[Word Count: 9]

typedef struct _DynamicPluginMeta
{
int type;
int major;
int minor;
int build;
char uniqueName[MAX_NAME_LEN];
char *libraryPath;
} DynamicPluginMeta;
[Word Count: 18]

The DynamicPreprocessorData structure deﬁnes the interface the preprocessor uses to interact with snort itself. This
includes functions to register the preprocessor’s conﬁguration parsing, restart, exit, and processing functions. It in-
[Word Count: 30]

cludes function to log messages, errors, fatal errors, and debugging info. It also includes information for setting
alerts, handling Inline drops, access to the StreamAPI, and it provides access to the normalized http and alternate
data buffers. This data structure should be initialized when the preprocessor shared library is loaded. It is deﬁned in
sf dynamic preprocessor.h. Check the header ﬁle for the current deﬁnition.
[Word Count: 65]

The DynamicEngineData structure deﬁnes the interface a detection engine uses to interact with snort itself. This
includes functions for logging messages, errors, fatal errors, and debugging info as well as a means to register and
check ﬂowbits. It also includes a location to store rule-stubs for dynamic rules that are loaded, and it provides access
to the normalized http and alternate data buffers. It is deﬁned in sf dynamic engine.h as:
[Word Count: 71]

typedef struct _DynamicEngineData
{
int version;
u_int8_t *altBuffer;
UriInfo *uriBuffers[MAX_URIINFOS];
RegisterRule ruleRegister;
RegisterBit flowbitRegister;
CheckFlowbit flowbitCheck;
DetectAsn1 asn1Detect;
LogMsgFunc logMsg;
LogMsgFunc errMsg;
LogMsgFunc fatalMsg;
char *dataDumpDirectory;
[Word Count: 26]

GetPreprocRuleOptFuncs getPreprocOptFuncs;
[Word Count: 2]

SetRuleData setRuleData;
GetRuleData getRuleData;
[Word Count: 4]

DebugMsgFunc debugMsg;
#ifdef HAVE_WCHAR_H
DebugWideMsgFunc debugWideMsg;
#endif
[Word Count: 7]

PCRECompileFunc pcreCompile;
PCREStudyFunc pcreStudy;
PCREExecFunc pcreExec;
[Word Count: 6]

The SFSnortPacket structure mirrors the snort Packet structure and provides access to all of the data contained in a
given packet.
[Word Count: 21]

It and the data structures it incorporates are deﬁned in sf snort packet.h. Additional data structures may be deﬁned
to reference other protocol ﬁelds. Check the header ﬁle for the current deﬁnitions.
[Word Count: 32]

A dynamic rule should use any of the following data structures. The following structures are deﬁned in sf snort plugin api.h.
[Word Count: 21]

The Rule structure deﬁnes the basic outline of a rule and contains the same set of information that is seen in a text
rule. That includes protocol, address and port information and rule information (classiﬁcation, generator and signature
IDs, revision, priority, classiﬁcation, and a list of references). It also includes a list of rule options and an optional
evaluation function.
[Word Count: 60]

#define RULE_MATCH 1
#define RULE_NOMATCH 0
[Word Count: 6]

typedef struct _Rule
{
IPInfo ip;
RuleInformation info;
[Word Count: 8]

RuleOption **options; /* NULL terminated array of RuleOption union */
[Word Count: 10]

char initialized;
/* Rule Initialized, used internally */
u_int32_t numOptions; /* Rule option count, used internally */
char noAlert;
/* Flag with no alert, used internally */
void *ruleData;
/* Hash table for dynamic data pointers */
} Rule;
[Word Count: 39]

The rule evaluation function is deﬁned as
[Word Count: 7]

where the parameter is a pointer to the SFSnortPacket structure.
[Word Count: 10]

The RuleInformation structure deﬁnes the meta data for a rule and includes generator ID, signature ID, revision,
classiﬁcation, priority, message text, and a list of references.
[Word Count: 26]

typedef struct _RuleInformation
{
u_int32_t genID;
u_int32_t sigID;
u_int32_t revision;
char
*classification; /* String format of classification name */
u_int32_t priority;
char
*message;
RuleReference **references; /* NULL terminated array of references */
RuleMetaData **meta; /* NULL terminated array of references */
} RuleInformation;
[Word Count: 43]

The RuleReference structure deﬁnes a single rule reference, including the system name and rereference identiﬁer.
[Word Count: 15]

typedef struct _RuleReference
{
char *systemName;
char *refIdentifier;
} RuleReference;
[Word Count: 10]

The IPInfo structure deﬁnes the initial matching criteria for a rule and includes the protocol, src address and port, des-
tination address and port, and direction. Some of the standard strings and variables are predeﬁned - any, HOME NET,
HTTP SERVERS, HTTP PORTS, etc.
[Word Count: 44]

typedef struct _IPInfo
{
u_int8_t protocol;
char *
src_addr;
char *
src_port; /* 0 for non TCP/UDP */
char
direction;
/* non-zero is bi-directional */
char *
dst_addr;
char *
dst_port; /* 0 for non TCP/UDP */
} IPInfo;
[Word Count: 39]

#define ANY_NET
"any"
#define HOME_NET
"$HOME_NET"
#define EXTERNAL_NET
"$EXTERNAL_NET"
#define ANY_PORT
"any"
#define HTTP_SERVERS
"$HTTP_SERVERS"
#define HTTP_PORTS
"$HTTP_PORTS"
#define SMTP_SERVERS
"$SMTP_SERVERS"
[Word Count: 21]

The RuleOption structure deﬁnes a single rule option as an option type and a reference to the data speciﬁc to that
option. Each option has a ﬂags ﬁeld that contains speciﬁc ﬂags for that option as well as a ”Not” ﬂag. The ”Not” ﬂag
is used to negate the results of evaluating that option.
[Word Count: 54]

typedef enum DynamicOptionType {
OPTION_TYPE_PREPROCESSOR,
OPTION_TYPE_CONTENT,
OPTION_TYPE_PCRE,
OPTION_TYPE_FLOWBIT,
OPTION_TYPE_FLOWFLAGS,
OPTION_TYPE_ASN1,
OPTION_TYPE_CURSOR,
OPTION_TYPE_HDR_CHECK,
OPTION_TYPE_BYTE_TEST,
OPTION_TYPE_BYTE_JUMP,
OPTION_TYPE_BYTE_EXTRACT,
OPTION_TYPE_SET_CURSOR,
OPTION_TYPE_LOOP,
OPTION_TYPE_MAX
[Word Count: 18]

typedef struct _RuleOption
{
int optionType;
union
{
void *ptr;
ContentInfo *content;
CursorInfo *cursor;
PCREInfo *pcre;
FlowBitsInfo *flowBit;
ByteData *byte;
ByteExtract *byteExtract;
FlowFlags *flowFlags;
Asn1Context *asn1;
HdrOptCheck *hdrData;
LoopInfo
*loop;
PreprocessorOption *preprocOpt;
} option_u;
} RuleOption;
[Word Count: 36]

Some options also contain information that is initialized at run time, such as the compiled PCRE information, Boyer-
Moore content information, the integer ID for a ﬂowbit, etc.
[Word Count: 28]

The option types and related structures are listed below.
[Word Count: 9]

• OptionType: Content & Structure: ContentInfo
[Word Count: 6]

typedef struct _ContentInfo
{
u_int8_t *pattern;
u_int32_t depth;
int32_t
offset;
u_int32_t flags;
/* must include a CONTENT_BUF_X */
void
*boyer_ptr;
u_int8_t *patternByteForm;
u_int32_t patternByteFormLength;
u_int32_t incrementLength;
} ContentInfo;
[Word Count: 28]

#define CONTENT_NOCASE
0x01
#define CONTENT_RELATIVE
0x02
#define CONTENT_UNICODE2BYTE
0x04
#define CONTENT_UNICODE4BYTE
0x08
#define CONTENT_FAST_PATTERN
0x10
#define CONTENT_END_BUFFER
0x20
[Word Count: 18]

#define CONTENT_BUF_RAW
0x200
#define CONTENT_BUF_URI
0x400
[Word Count: 6]

• OptionType: PCRE & Structure: PCREInfo
[Word Count: 6]

The PCREInfo structure deﬁnes an option for a PCRE search. It includes the PCRE expression, pcre ﬂags such
as caseless, as deﬁned in PCRE.h, and ﬂags to specify the buffer.
[Word Count: 30]

PCRE_CASELESS
PCRE_MULTILINE
PCRE_DOTALL
PCRE_EXTENDED
PCRE_ANCHORED
PCRE_DOLLAR_ENDONLY
PCRE_UNGREEDY
*/
[Word Count: 8]

typedef struct _PCREInfo
{
char
*expr;
void
*compiled_expr;
void
*compiled_extra;
u_int32_t compile_flags;
u_int32_t flags; /* must include a CONTENT_BUF_X */
} PCREInfo;
[Word Count: 22]

• OptionType: Flowbit & Structure: FlowBitsInfo
[Word Count: 6]

The FlowBitsInfo structure deﬁnes a ﬂowbits option. It includes the name of the ﬂowbit and the operation (set,
setx, unset, toggle, isset, isnotset).
[Word Count: 23]

#define FLOWBIT_SET
0x01
#define FLOWBIT_UNSET
0x02
#define FLOWBIT_TOGGLE
0x04
#define FLOWBIT_ISSET
0x08
#define FLOWBIT_ISNOTSET
0x10
#define FLOWBIT_RESET
0x20
#define FLOWBIT_NOALERT
0x40
#define FLOWBIT_SETX
0x80
[Word Count: 24]

typedef struct _FlowBitsInfo
{
char
*flowBitsName;
uint8_t
operation;
uint16_t
id;
uint32_t
flags;
char
*groupName;
uint8_t
eval;
uint16_t *ids;
uint8_t
num_ids;
[Word Count: 20]

• OptionType: Flow Flags & Structure: FlowFlags
[Word Count: 7]

The FlowFlags structure deﬁnes a ﬂow option. It includes the ﬂags, which specify the direction (from server,
to server), established session, etc.
[Word Count: 22]

#define FLOW_ESTABLISHED 0x10
#define FLOW_IGNORE_REASSEMBLED 0x1000
#define FLOW_ONLY_REASSMBLED
0x2000
#define FLOW_FR_SERVER
0x40
#define FLOW_TO_CLIENT
0x40 /* Just for redundancy */
#define FLOW_TO_SERVER
0x80
#define FLOW_FR_CLIENT
0x80 /* Just for redundancy */
[Word Count: 31]

typedef struct _FlowFlags
{
u_int32_t
flags;
} FlowFlags;
[Word Count: 8]

• OptionType: ASN.1 & Structure: Asn1Context
[Word Count: 6]

The Asn1Context structure deﬁnes the information for an ASN1 option. It mirrors the ASN1 rule option and
also includes a ﬂags ﬁeld.
[Word Count: 22]

#define ASN1_ABS_OFFSET 1
#define ASN1_REL_OFFSET 2
[Word Count: 6]

typedef struct _Asn1Context
{
int bs_overflow;
int double_overflow;
int print;
int length;
unsigned int max_length;
int offset;
int offset_type;
u_int32_t
flags;
} Asn1Context;
[Word Count: 23]

• OptionType: Cursor Check & Structure: CursorInfo
[Word Count: 7]

The CursorInfo structure deﬁnes an option for a cursor evaluation. The cursor is the current position within the
evaluation buffer, as related to content and PCRE searches, as well as byte tests and byte jumps. It includes an
offset and ﬂags that specify the buffer. This can be used to verify there is sufﬁcient data to continue evaluation,
similar to the isdataat rule option.
[Word Count: 64]

typedef struct _CursorInfo
{
int32_t
offset;
u_int32_t flags;
/* specify one of CONTENT_BUF_X */
} CursorInfo;
[Word Count: 16]

• OptionType: Protocol Header & Structure: HdrOptCheck
[Word Count: 7]

The HdrOptCheck structure deﬁnes an option to check a protocol header for a speciﬁc value. It includes the
header ﬁeld, the operation (<,>,=,etc), a value, a mask to ignore that part of the header ﬁeld, and ﬂags.
[Word Count: 37]

#define IP_HDR_ID
0x0001
/* IP Header ID */
#define IP_HDR_PROTO
0x0002
/* IP Protocol */
#define IP_HDR_FRAGBITS
0x0003
/* Frag Flags set in IP Header */
#define IP_HDR_FRAGOFFSET
0x0004
/* Frag Offset set in IP Header */
#define IP_HDR_OPTIONS
0x0005
/* IP Options -- is option xx included */
#define IP_HDR_TTL
0x0006
/* IP Time to live */
#define IP_HDR_TOS
0x0007
/* IP Type of Service */
[Word Count: 67]

#define TCP_HDR_ACK
0x0010
/* TCP Ack Value */
#define TCP_HDR_SEQ
0x0020
/* TCP Seq Value */
#define TCP_HDR_FLAGS
0x0030
/* Flags set in TCP Header */
#define TCP_HDR_OPTIONS
0x0040
/* TCP Options -- is option xx included */
#define TCP_HDR_WIN
0x0050
/* TCP Window */
#define TCP_HDR_OPTCHECK_MASK 0x00f0
[Word Count: 48]

#define ICMP_HDR_CODE
0x1000
/* ICMP Header Code */
#define ICMP_HDR_TYPE
0x2000
/* ICMP Header Type */
#define ICMP_HDR_ID
0x3000
/* ICMP ID for ICMP_ECHO/ICMP_ECHO_REPLY */
#define ICMP_HDR_SEQ
0x4000
/* ICMP ID for ICMP_ECHO/ICMP_ECHO_REPLY */
#define ICMP_HDR_OPTCHECK_MASK 0xf000
[Word Count: 37]

typedef struct _HdrOptCheck
{
u_int16_t hdrField;
/* Field to check */
u_int32_t op;
/* Type of comparison */
u_int32_t value;
/* Value to compare value against */
u_int32_t mask_value; /* bits of value to ignore */
u_int32_t flags;
} HdrOptCheck;
[Word Count: 40]

• OptionType: Byte Test & Structure: ByteData
[Word Count: 7]

The ByteData structure deﬁnes the information for both ByteTest and ByteJump operations. It includes the
number of bytes, an operation (for ByteTest, <,>,=,etc), a value, an offset, multiplier, and ﬂags. The ﬂags must
specify the buffer.
[Word Count: 36]

#define CHECK_EQ
0
#define CHECK_NEQ
1
#define CHECK_LT
2
#define CHECK_GT
3
#define CHECK_LTE
4
#define CHECK_GTE
5
#define CHECK_AND
6
#define CHECK_XOR
7
#define CHECK_ALL
8
#define CHECK_ATLEASTONE
9
#define CHECK_NONE
10
[Word Count: 33]

typedef struct _ByteData
{
u_int32_t bytes;
/* Number of bytes to extract */
u_int32_t op;
/* Type of byte comparison, for checkValue */
u_int32_t value;
/* Value to compare value against, for checkValue, or extracted value */
int32_t
offset;
/* Offset from cursor */
u_int32_t multiplier; /* Used for byte jump -- 32bits is MORE than enough */
u_int32_t flags;
/* must include a CONTENT_BUF_X */
} ByteData;
[Word Count: 68]

• OptionType: Byte Jump & Structure: ByteData
[Word Count: 7]

• OptionType: Set Cursor & Structure: CursorInfo
[Word Count: 7]

• OptionType: Loop & Structures: LoopInfo,ByteExtract,DynamicElement
[Word Count: 6]

The LoopInfo structure deﬁnes the information for a set of options that are to be evaluated repeatedly. The loop
option acts like a FOR loop and includes start, end, and increment values as well as the comparison operation for
termination. It includes a cursor adjust that happens through each iteration of the loop, a reference to a RuleInfo
structure that deﬁnes the RuleOptions are to be evaluated through each iteration. One of those options may be a
ByteExtract.
[Word Count: 78]

typedef struct _LoopInfo
{
DynamicElement *start;
/* Starting value of FOR loop (i=start) */
DynamicElement *end;
/* Ending value of FOR loop (i OP end) */
DynamicElement *increment;
/* Increment value of FOR loop (i+= increment) */
u_int32_t op;
/* Type of comparison for loop termination */
CursorInfo *cursorAdjust;
/* How to move cursor each iteration of loop */
struct _Rule *subRule;
/* Pointer to SubRule & options to evaluate within
* the loop */
u_int8_t initialized;
/* Loop initialized properly (safeguard) */
u_int32_t flags;
/* can be used to negate loop results, specifies
} LoopInfo;
[Word Count: 96]

The ByteExtract structure deﬁnes the information to use when extracting bytes for a DynamicElement used a
in Loop evaluation. It includes the number of bytes, an offset, multiplier, ﬂags specifying the buffer, and a
reference to the DynamicElement.
[Word Count: 38]

typedef struct _ByteExtract
{
u_int32_t bytes;
/* Number of bytes to extract */
int32_t
offset;
/* Offset from cursor */
u_int32_t multiplier; /* Multiply value by this (similar to byte jump) */
u_int32_t flags;
/* must include a CONTENT_BUF_X */
char *refId;
/* To match up with a DynamicElement refId */
void *memoryLocation; /* Location to store the data extracted */
} ByteExtract;
[Word Count: 63]

The DynamicElement structure is used to deﬁne the values for a looping evaluation. It includes whether the
element is static (an integer) or dynamic (extracted from a buffer in the packet) and the value. For a dynamic
element, the value is ﬁlled by a related ByteExtract option that is part of the loop.
[Word Count: 53]

#define DYNAMIC_TYPE_INT_STATIC 1
#define DYNAMIC_TYPE_INT_REF
2
[Word Count: 6]

typedef struct _DynamicElement
{
char dynamicType;
/* type of this field - static or reference */
char *refId;
/* reference ID (NULL if static) */
union
{
void *voidPtr;
/* Holder */
int32_t staticInt;
/* Value of static */
int32_t *dynamicInt;
/* Pointer to value of dynamic */
} data;
} DynamicElement;
[Word Count: 52]

Each dynamic module must deﬁne a set of functions and data objects to work within this framework.
[Word Count: 17]

Each dynamic preprocessor must deﬁne the following items. These must be deﬁned in the global scope of a source
ﬁle (e.g. spp example.c).
[Word Count: 23]

This speciﬁes the major version of the preprocessor.
[Word Count: 8]

This speciﬁes the minor version of the preprocessor.
[Word Count: 8]

This speciﬁes the build version of the preprocessor.
[Word Count: 8]

This speciﬁes the display name of the preprocessor.
[Word Count: 8]

This function is called to register the preprocessor to be called with packets data.
[Word Count: 14]

The preprocessor must be built with the same macros deﬁned as the Snort binary and linked with the dynamic prepro-
cessor library that was created during the Snort build. A package conﬁguration ﬁle is exported as part of the Snort build
and can be accessed using the following commands with PKG CONFIG PATH=<snort build preﬁx/lib/pkgconﬁg>:
[Word Count: 55]

Returns the macros and include path needed to compile the dynamic preprocessor.
[Word Count: 12]

Returns the library and library path needed to link the dynamic preprocessor.
[Word Count: 12]

Each dynamic detection engine library must deﬁne the following functions.
[Word Count: 10]

This function returns the metadata for the shared library.
[Word Count: 9]

• int InitializeEngineLib(DynamicEngineData *)
[Word Count: 4]

This function initializes the data structure for use by the engine.
[Word Count: 11]

The sample code provided with Snort predeﬁnes those functions and deﬁnes the following APIs to be used by a
dynamic rules library.
[Word Count: 22]

This is the function to iterate through each rule in the list, initialize it to setup content searches, PCRE evaluation
data, and register ﬂowbits.
[Word Count: 24]

This is the function to iterate through each rule in the list and write a rule-stop to be used by snort to control the
action of the rule (alert, log, drop, etc).
[Word Count: 32]

This is the function to evaluate a rule if the rule does not have its own Rule Evaluation Function. This uses the
individual functions outlined below for each of the rule options and handles repetitive content issues.
[Word Count: 37]

Each of the functions below returns RULE MATCH if the option matches based on the current criteria (cursor
position, etc).
[Word Count: 20]

– int contentMatch(void *p, ContentInfo* content, u int8 t **cursor)
This function evaluates a single content for a given packet, checking for the existence of that content as
delimited by ContentInfo and cursor. Cursor position is updated and returned in *cursor.
With a text rule, the with option corresponds to depth, and the distance option corresponds to offset.
[Word Count: 58]

– int checkFlow(void *p, FlowFlags *ﬂowﬂags)
This function evaluates the ﬂow for a given packet.
[Word Count: 15]

– int extractValue(void *p, ByteExtract *byteExtract, u int8 t *cursor)
This function extracts the bytes from a given packet, as speciﬁed by ByteExtract and delimited by cursor.
Value extracted is stored in ByteExtract memoryLocation parameter.
[Word Count: 35]

– int processFlowbits(void *p, FlowBitsInfo *ﬂowbits)
This function evaluates the ﬂowbits for a given packet, as speciﬁed by FlowBitsInfo. It will interact with
ﬂowbits used by text-based rules.
[Word Count: 28]

– int setCursor(void *p, CursorInfo *cursorInfo, u int8 t **cursor)
This function adjusts the cursor as delimited by CursorInfo. New cursor position is returned in *cursor.
It handles bounds checking for the speciﬁed buffer and returns RULE NOMATCH if the cursor is moved
out of bounds.
It is also used by contentMatch, byteJump, and pcreMatch to adjust the cursor position after a successful
match.
[Word Count: 64]

– int checkCursor(void *p, CursorInfo *cursorInfo, u int8 t *cursor)
This function validates that the cursor is within bounds of the speciﬁed buffer.
[Word Count: 23]

– int checkValue(void *p, ByteData *byteData, u int32 t value, u int8 t *cursor)
This function compares the value to the value stored in ByteData.
[Word Count: 25]

– int byteTest(void *p, ByteData *byteData, u int8 t *cursor)
This is a wrapper for extractValue() followed by checkValue().
[Word Count: 19]

– int byteJump(void *p, ByteData *byteData, u int8 t **cursor)
This is a wrapper for extractValue() followed by setCursor().
[Word Count: 19]

– int pcreMatch(void *p, PCREInfo *pcre, u int8 t **cursor)
This function evaluates a single pcre for a given packet, checking for the existence of the expression as
delimited by PCREInfo and cursor. Cursor position is updated and returned in *cursor.
[Word Count: 41]

– int detectAsn1(void *p, Asn1Context *asn1, u int8 t *cursor)
This function evaluates an ASN.1 check for a given packet, as delimited by Asn1Context and cursor.
[Word Count: 26]

– int checkHdrOpt(void *p, HdrOptCheck *optData)
This function evaluates the given packet’s protocol headers, as speciﬁed by HdrOptCheck.
[Word Count: 18]

– int loopEval(void *p, LoopInfo *loop, u int8 t **cursor)
This function iterates through the SubRule of LoopInfo, as delimited by LoopInfo and cursor. Cursor
position is updated and returned in *cursor.
[Word Count: 32]

– int preprocOptionEval(void *p, PreprocessorOption *preprocOpt, u int8 t **cursor)
This function evaluates the preprocessor deﬁned option, as speciﬁed by PreprocessorOption. Cursor posi-
tion is updated and returned in *cursor.
[Word Count: 30]

– void setTempCursor(u int8 t **temp cursor, u int8 t **cursor)
This function is used to handled repetitive contents to save off a cursor position temporarily to be reset at
later point.
[Word Count: 32]

– void revertTempCursor(u int8 t **temp cursor, u int8 t **cursor)
This function is used to revert to a previously saved temporary cursor position.
[Word Count: 24]

If you decide to write your own rule evaluation function, patterns that occur more than once may result in
false negatives. Take extra care to handle this situation and search for the matched pattern again if subsequent
rule options fail to match. This should be done for both content and PCRE options.
[Word Count: 52]

Each dynamic rules library must deﬁne the following functions. Examples are deﬁned in the ﬁle sfnort dynamic detection lib.c.
The metadata and setup function for the preprocessor should be deﬁned in sfsnort dynamic detection lib.h.
[Word Count: 35]

This function returns the metadata for the shared library.
[Word Count: 9]

• int EngineVersion(DynamicPluginMeta *)
[Word Count: 4]

This function deﬁnes the version requirements for the corresponding detection engine library.
[Word Count: 12]

This functions writes out the rule-stubs for rules that are loaded.
[Word Count: 11]

This function registers each rule in the rules library. It should set up fast pattern-matcher content, register
ﬂowbits, etc.
[Word Count: 19]

The sample code provided with Snort predeﬁnes those functions and uses the following data within the dynamic rules
library.
[Word Count: 19]

A NULL terminated list of Rule structures that this library deﬁnes.
[Word Count: 11]

This section provides a simple example of a dynamic preprocessor and a dynamic rule.
[Word Count: 14]

The following is an example of a simple preprocessor. This preprocessor always alerts on a packet if the TCP port
matches the one conﬁgured.
[Word Count: 24]

The following code is deﬁned in spp example.c and is compiled together with libsf dynamic preproc.a, using pkg-
conﬁg, into lib sfdynamic preprocessor example.so.
[Word Count: 24]

#define GENERATOR_EXAMPLE 256
extern DynamicPreprocessorData _dpd;
[Word Count: 6]

const int MAJOR_VERSION = 1;
const int MINOR_VERSION = 0;
const int BUILD_VERSION = 0;
const char *PREPROC_NAME = "SF_Dynamic_Example_Preprocessor";
[Word Count: 20]

#define ExampleSetup DYNAMIC_PREPROC_SETUP
[Word Count: 3]

Deﬁne the Setup function to register the initialization function.
[Word Count: 9]

void ExampleInit(unsigned char *);
void ExampleProcess(void *, void *);
[Word Count: 9]

void ExampleSetup()
{
_dpd.registerPreproc("dynamic_example", ExampleInit);
[Word Count: 5]

DEBUG_WRAP(_dpd.debugMsg(DEBUG_PLUGIN, "Preprocessor: Example is setup\n"););
}
[Word Count: 6]

The initialization function to parse the keywords from snort.conf.
[Word Count: 9]

void ExampleInit(unsigned char *args)
{
char *arg;
char *argEnd;
unsigned long port;
[Word Count: 12]

_dpd.logMsg("Example dynamic preprocessor configuration\n");
[Word Count: 4]

if(!strcasecmp("port", arg))
{
arg = strtok(NULL, "\t\n\r");
if (!arg)
{
_dpd.fatalMsg("ExamplePreproc: Missing port\n");
}
[Word Count: 14]

port = strtoul(arg, &argEnd, 10);
if (port < 0 || port > 65535)
{
_dpd.fatalMsg("ExamplePreproc: Invalid port %d\n", port);
}
portToCheck = port;
[Word Count: 23]

_dpd.logMsg("
Port: %d\n", portToCheck);
}
else
{
_dpd.fatalMsg("ExamplePreproc: Invalid option %s\n", arg);
}
[Word Count: 13]

/* Register the preprocessor function, Transport layer, ID 10000 */
_dpd.addPreproc(ExampleProcess, PRIORITY_TRANSPORT, 10000);
[Word Count: 13]

DEBUG_WRAP(_dpd.debugMsg(DEBUG_PLUGIN, "Preprocessor: Example is initialized\n"););
}
[Word Count: 6]

The function to process the packet and log an alert if the either port matches.
[Word Count: 15]

#define SRC_PORT_MATCH
1
#define SRC_PORT_MATCH_STR "example_preprocessor: src port match"
#define DST_PORT_MATCH
2
#define DST_PORT_MATCH_STR "example_preprocessor: dest port match"
void ExampleProcess(void *pkt, void *context)
{
SFSnortPacket *p = (SFSnortPacket *)pkt;
if (!p->ip4_header || p->ip4_header->proto != IPPROTO_TCP || !p->tcp_header)
{
/* Not for me, return */
return;
}
[Word Count: 46]

if (p->src_port == portToCheck)
{
/* Source port matched, log alert */
_dpd.alertAdd(GENERATOR_EXAMPLE, SRC_PORT_MATCH,
1, 0, 3, SRC_PORT_MATCH_STR, 0);
return;
}
[Word Count: 21]

if (p->dst_port == portToCheck)
{
/* Destination port matched, log alert */
_dpd.alertAdd(GENERATOR_EXAMPLE, DST_PORT_MATCH,
1, 0, 3, DST_PORT_MATCH_STR, 0);
return;
}
}
[Word Count: 22]

The following is an example of a simple rule, take from the current rule set, SID 109. It is implemented to work with
the detection engine provided with snort.
[Word Count: 29]

alert tcp $HOME_NET 12345:12346 -> $EXTERNAL_NET any \
(msg:"BACKDOOR netbus active"; flow:from_server,established; \
content:"NetBus"; reference:arachnids,401; classtype:misc-activity; \
sid:109; rev:5;)
[Word Count: 19]

This is the metadata for this rule library, deﬁned in detection lib meta.h.
[Word Count: 13]

/* Version for this rule library */
#define DETECTION_LIB_MAJOR_VERSION 1
#define DETECTION_LIB_MINOR_VERSION 0
#define DETECTION_LIB_BUILD_VERSION 1
#define DETECTION_LIB_NAME "Snort_Dynamic_Rule_Example"
[Word Count: 19]

/* Required version and name of the engine */
#define REQ_ENGINE_LIB_MAJOR_VERSION 1
#define REQ_ENGINE_LIB_MINOR_VERSION 0
#define REQ_ENGINE_LIB_NAME "SF_SNORT_DETECTION_ENGINE"
[Word Count: 18]

The deﬁnition of each data structure for this rule is in sid109.c.
[Word Count: 12]

Deﬁne the FlowFlags structure and its corresponding RuleOption. Per the text version, ﬂow is from server,established.
[Word Count: 16]

static FlowFlags sid109flow =
{
FLOW_ESTABLISHED|FLOW_TO_CLIENT
};
[Word Count: 7]

static RuleOption sid109option1 =
{
OPTION_TYPE_FLOWFLAGS,
{
&sid109flow
}
};
[Word Count: 10]

Deﬁne the ContentInfo structure and its corresponding RuleOption. Per the text version, content is ”NetBus”,
no depth or offset, case sensitive, and non-relative. Search on the normalized buffer by default. NOTE: This
content will be used for the fast pattern matcher since it is the longest content option for this rule and no contents
have a ﬂag of CONTENT FAST PATTERN.
[Word Count: 61]

static ContentInfo sid109content =
{
"NetBus",
/* pattern to search for */
0,
/* depth */
0,
/* offset */
CONTENT_BUF_NORMALIZED, /* flags */
NULL,
/* holder for boyer/moore info */
NULL,
/* holder for byte representation of "NetBus" */
0,
/* holder for length of byte representation */
0
/* holder for increment length */
};
[Word Count: 57]

static RuleOption sid109option2 =
{
OPTION_TYPE_CONTENT,
{
&sid109content
}
};
[Word Count: 10]

static RuleReference sid109ref_arachnids =
{
"arachnids",
/* Type */
"401"
/* value */
};
[Word Count: 14]

The list of rule options. Rule options are evaluated in the order speciﬁed.
[Word Count: 13]

RuleOption *sid109options[] =
{
&sid109option1,
&sid109option2,
NULL
};
[Word Count: 8]

The rule itself, with the protocol header, meta data (sid, classiﬁcation, message, etc).
[Word Count: 13]

• The List of rules deﬁned by this rules library
[Word Count: 10]

The NULL terminated list of rules. The InitializeDetection iterates through each Rule in the list and initializes
the content, ﬂowbits, pcre, etc.
[Word Count: 22]

Rule *rules[] =
{
&sid109,
&sid637,
NULL
};
[Word Count: 8]

Currently, this chapter is here as a place holder. It will someday contain references on how to create new detection
plugins and preprocessors. End users don’t really need to be reading this section. This is intended to help developers
get a basic understanding of whats going on quickly.
[Word Count: 48]

If you are going to be helping out with Snort development, please use the HEAD branch of cvs. We’ve had problems
in the past of people submitting patches only to the stable branch (since they are likely writing this stuff for their own
IDS purposes). Bug ﬁxes are what goes into STABLE. Features go into HEAD.
[Word Count: 56]

Patches to Snort should be sent to the snort-devel@lists.snort.org mailing list. Patches should done with the
command diff -nu snort-orig snort-new.
[Word Count: 21]

First, trafﬁc is acquired from the network link via libpcap. Packets are passed through a series of decoder routines that
ﬁrst ﬁll out the packet structure for link level protocols then are further decoded for things like TCP and UDP ports.
[Word Count: 41]

Packets are then sent through the registered set of preprocessors. Each preprocessor checks to see if this packet is
something it should look at.
[Word Count: 24]

Packets are then sent through the detection engine. The detection engine checks each packet against the various options
listed in the Snort conﬁg ﬁles. Each of the keyword options is a plugin. This allows this to be easily extensible.
[Word Count: 39]

For example, a TCP analysis preprocessor could simply return if the packet does not have a TCP header. It can do this
by checking:
[Word Count: 24]

Similarly, there are a lot of packet ﬂags available that can be used to mark a packet as “reassembled” or logged. Check
out src/decode.h for the list of pkt * constants.
[Word Count: 31]

Basically, look at an existing output plugin and copy it to a new item and change a few things. Later, we’ll document
what these few things are.
[Word Count: 27]

Generally, new output plugins should go into the barnyard project rather than the Snort project. We are currently
cleaning house on the available output options.
[Word Count: 25]

Uniﬁed 2 records should not be assumed to be in any order. All values are stored in network byte order.
[Word Count: 20]

[ Serial Unified2 Header
]
[ Unified2 IDS Event
]
[ Unified2 Packet
]
[ Unified2 Extra Data
]
.
.
.
[ Serial Unified2 Header
]
[ Unified2 IDS Event
]
[ Unified2 Packet
]
[ Unified2 Extra Data
]
[Word Count: 41]

record type
4 bytes
record length
4 bytes
[Word Count: 8]

All uniﬁed2 records are preceded by a Serial Uniﬁed2 header. This uniﬁed2 record allows an interpreting application
to skip past and apply simple heuristics against records.
[Word Count: 26]

The Record Type indicates one of the following uniﬁed2 records follows the Serial Uniﬁed2 Header:
[Word Count: 15]

Value
Record Type
----------
-----------
2
Unified2 Packet
7
Unified2 IDS Event
72
Unified2 IDS Event IP6
104
Unified2 IDS Event
(Version 2)
105
Unified2 IDS Event IP6
(Version 2)
110
Unified2 Extra Data
[Word Count: 34]

The record length ﬁeld speciﬁes the entire length of the record (not including the Serial Uniﬁed2 Header itself) up to
the next Serial Uniﬁed2 Header or EOF.
[Word Count: 27]

sensor id
4 bytes
event id
4 bytes
event seconds
4 bytes
packet seconds
4 bytes
packet microseconds
4 bytes
linktype
4 bytes
packet length
4 bytes
packet data
<variable length>
[Word Count: 31]

A Uniﬁed2 Packet is provided with each Uniﬁed2 Event record. This packet is the ‘alerting’ packet that caused a given
event.
[Word Count: 21]

Uniﬁed2 Packet records contain contain a copy of the packet that caused an alert (Packet Data) and is packet length
octets long.
[Word Count: 22]

sensor id
4 bytes
event id
4 bytes
event second
4 bytes
event microsecond
4 bytes
signature id
4 bytes
generator id
4 bytes
signature revision
4 bytes
classification id
4 bytes
priority id
4 bytes
ip source
4 bytes
ip destination
4 bytes
source port/icmp type
2 bytes
dest. port/icmp code
2 bytes
protocol
1 byte
impact flag
1 byte
impact
1 byte
blocked
1 byte
[Word Count: 67]

Uniﬁed2 IDS Event is logged for IPv4 Events without VLAN or MPLS tagging.
[Word Count: 13]

sensor id
4 bytes
event id
4 bytes
event second
4 bytes
event microsecond
4 bytes
signature id
4 bytes
generator id
4 bytes
signature revision
4 bytes
classification id
4 bytes
priority id
4 bytes
ip source
16 bytes
ip destination
16 bytes
source port/icmp type
2 bytes
dest. port/icmp code
2 bytes
protocol
1 byte
[Word Count: 57]

impact flag
1 byte
impact
1 byte
blocked
1 byte
[Word Count: 10]

Uniﬁed2 IDS Event IP6 is logged for IPv6 Events without VLAN or MPLS tagging.
[Word Count: 14]

sensor id
4 bytes
event id
4 bytes
event second
4 bytes
event microsecond
4 bytes
signature id
4 bytes
generator id
4 bytes
signature revision
4 bytes
classification id
4 bytes
priority id
4 bytes
ip source
4 bytes
ip destination
4 bytes
source port/icmp type
2 bytes
dest. port/icmp code
2 bytes
protocol
1 byte
impact flag
1 byte
impact
1 byte
blocked
1 byte
mpls label
4 bytes
vlan id
2 bytes
padding
2 bytes
[Word Count: 78]

Uniﬁed2 IDS Event (Version 2) are logged for IPv4 packets which contain either MPLS or VLAN headers. Otherwise
a Uniﬁed2 IDS Event is logged.
△
! NOTE
[Word Count: 27]

• Note that you’ll need to pass –enable-mpls to conﬁgure in order to have Snort ﬁll in the mpls label
ﬁeld.
[Word Count: 21]

• Note that you’ll need to conﬁgure uniﬁed2 logging with either mpls event types or vlan event types to
get this record type.
[Word Count: 23]

sensor id
4 bytes
event id
4 bytes
event second
4 bytes
event microsecond
4 bytes
signature id
4 bytes
generator id
4 bytes
signature revision
4 bytes
classification id
4 bytes
priority id
4 bytes
ip source
16 bytes
ip destination
16 bytes
source port/icmp type
2 bytes
dest. port/icmp code
2 bytes
[Word Count: 54]

protocol
1 byte
impact flag
1 byte
impact
1 byte
blocked
1 byte
mpls label
4 bytes
vlan id
2 bytes
padding
2 bytes
[Word Count: 24]

Uniﬁed2 IDS Event IP6 (Version 2) are logged for IPv6 packets which contain either MPLS or VLAN headers.
Otherwise a Uniﬁed2 IDS Event IP6 is logged.
△
! NOTE
[Word Count: 29]

• Note that you’ll need to pass –enable-mpls to conﬁgure in order to have Snort ﬁll in the mpls label
ﬁeld.
[Word Count: 21]

• Note that you’ll need to conﬁgure uniﬁed2 logging with either mpls event types or vlan event types to
get this record type.
[Word Count: 23]

sensor id
4 bytes
event id
4 bytes
event second
4 bytes
type
4 bytes
data type
4 bytes
data length
4 bytes
data
<variable length>
[Word Count: 26]

The upper 2 bytes represent the snort instance, if speciﬁed by passing the -G option to Snort.
[Word Count: 17]

The lower 2 bytes indicate the unique id of the event.
[Word Count: 11]

The Event ID ﬁeld is used to facilitate the task of coalescing events with packet data.
[Word Count: 16]

Timestamp represented as seconds since the epoch of when the alert was generated.
[Word Count: 13]

The Datalink type of the packet, typically EN10M but could be any of the values as returned by pcap datalink
that Snort handles.
[Word Count: 23]

The alerting packet, of Packet Length bytes long.
[Word Count: 8]

Type speciﬁes the type of extra data that was logged, the valid types are:
[Word Count: 14]

Value
Description
----------
-----------
1
Original Client IPv4
2
Original Client IPv6
3
UNUSED
4
GZIP Decompressed Data
5
SMTP Filename
6
SMTP Mail From
7
SMTP RCPT To
8
SMTP Email Headers
9
HTTP URI
10
HTTP Hostname
11
IPv6 Source Address
12
IPv6 Destination Address
13
Normalized Javascript Data
[Word Count: 51]

Value
Description
----------
-----------
1
Blob
[Word Count: 6]

Length of the data stored in the extra data record
[Word Count: 10]

Raw extra event data up to Data Length bytes in size.
[Word Count: 11]

All of these Extra data types, with the exception of 1, 2, 11, and 12 (IP Addresses) are stored in plain-text. The
IP Address types need to be interpreted as if they were coming off the wire.
[Word Count: 37]

The Signature ID of the alerting rule, as speciﬁed by the sid keyword.
[Word Count: 13]

The Generator ID of the alerting rule, as speciﬁed by the gid keyword.
[Word Count: 13]

Revision of the rule as speciﬁed by the rev keyword.
[Word Count: 10]

Classiﬁcation ID as mapped in the ﬁle classiﬁcations.conf
[Word Count: 8]

Priority of the rule as mapped in the ﬁle classiﬁcations.conf or overridden by the priority keyword for text rules.
[Word Count: 19]

Source IP of the packet that generated the event.
[Word Count: 9]

Destination IP of the packet that generated the event.
[Word Count: 9]

If Protocol is TCP or UDP than this ﬁeld contains the source port of the alerting packet.
[Word Count: 17]

If Protocol is ICMP than this ﬁeld contains the ICMP type of the alerting packet.
[Word Count: 15]

If protocol is TCP or UDP than this ﬁeld contains the source port of the alerting packet.
[Word Count: 17]

If protocol is icmp than this ﬁeld contains the icmp code of the alerting packet.
[Word Count: 15]

Transport protocol of the alerting packet. One of: ip, tcp, udp, or icmp.
[Word Count: 13]

Legacy ﬁeld, speciﬁes whether a packet was dropped or not.
[Word Count: 10]

Value
Description
----------
-----------
32
Blocked
[Word Count: 6]

Whether the packet was not dropped, was dropped or would have been dropped.
[Word Count: 13]

Value
Description
----------
-----------
0
Was NOT Dropped
1
Was Dropped
2
Would Have Dropped*
[Word Count: 15]

Note that you’ll obtain Would Have Dropped on rules which are set to drop while Snort is running in inline-
test mode. Would Have Dropped is also obtained when a drop rule ﬁres while pruning sessions or during
shutdown.
[Word Count: 39]

The extracted mpls label from the mpls header in the alerting packet.
[Word Count: 12]

The extracted vlan id from the vlan header in the alerting packet.
[Word Count: 12]

Padding is used to keep the event structures aligned on a 4 byte boundary.
[Word Count: 14]

Buffer dump option will dump the buffers used by snort during different stages of packet processing path.
[Word Count: 17]

./configure --enable-buffer-dump / -DDUMP_BUFFER
[Word Count: 4]

Two options are provided to dump buffers. ’–buffer-dump-alert’ will dump buffers only when there is an alert.
[Word Count: 17]

’–buffer-dump’ will dump buffers for every packet.
[Word Count: 7]

./snort -A cmg -k none -Q --daq-dir=<dir> --daq dump -r <pcap> -c snort.conf --buffer-dump-alert=<file>
or
./snort -A cmg -k none -Q --daq-dir=<dir> --daq dump -r <pcap> -c snort.conf --buffer-dump=<file>
[Word Count: 29]

Note: If <file> parameter is not used, buffers are dumped on the console
[Word Count: 13]

Lead Snort Developers
Steve Sturges
Bhagyashree Bantwal
Ed Borgoyn
Hui Cao
Russ Combs
Victor Roemer
Charles Summers
Josh Rosenbaum
Carter Waxman
Tom Peters
A V K Nageswara Rao (ANR)
Rahul Burman
Seshaiah Erugu
Krishnakanth K
[Word Count: 35]

Snort QA Team
Chris Spencer
Jigeshwar Patel
Albert Lewis
Nihal Desai
[Word Count: 11]

Vulnerability Research Team
Matt Watchinski
Aaron Benson
Nathan Benson
Andrew Blunck
Christoph Cordes
Joel Esler
Douglas Goddard
Ethan Gulla
Nigel Houghton
Pawel Janic
Richard Johnson
Tom Judge
Alex Kambis
Alex Kirk
Chris Marshall
Christopher McBee
Alex McDonnell
Kevin Miklavcic
Steve Morgan
Patrick Mullen
Katie Nolan
Matt Olney
Carlos Pacho
Ryan Pentney
Nick Randolph
Dave Raynor
Marcos Rodriguez
Ryan Steinmetz
Brandon Stultz
Andy Walker
Shawn Webb
Carl Wu
Yves Younan
Alain Zidouemba
[Word Count: 71]

Snort Web Team
Aaron Norling
Mike Verbeck
[Word Count: 7]

Major Contributors
Erek Adams
Michael Altizer
Ayushi Agarwal
Andrew Baker
Scott Campbell
Brian Caswell
Dilbagh Chahal
JJ Cummings
Scott Czajkowski
Roman D.
Michael Davis
Ron Dempster
Matt Donnan
Chris Green
Lurene Grenier
Mike Guiterman
Jed Haile
Justin Heath
Patrick Harper
Jeremy Hewlett
Ryan Jordan
Victor Julien
Glenn Mansﬁeld Keeni
Adam Keeton
Keith Konecnik
Veronica Kovah
Chad Kreimendahl
Kevin Liu
Rob McMillen
William Metcalf
Andrew Mullican
Jeff Nathan
Marc Norton
Judy Novak
Andreas Ostling
William Parker
Chris Reid
Daniel Roelker
Dragos Ruiu
Chris Sherwin
Matt Smith
Jennifer Steffens
Todd Wease
JP Vossen
Leon Ward
Daniel Wittenberg
Phil Wood
Fyodor Yarochkin
[Word Count: 99]

[1] http://packetstorm.securify.com/mag/phrack/phrack49/p49-06
[Word Count: 2]

[3] http://public.pacbell.net/dedicated/cidr.html
[Word Count: 2]

Total Paragraphs: 2724