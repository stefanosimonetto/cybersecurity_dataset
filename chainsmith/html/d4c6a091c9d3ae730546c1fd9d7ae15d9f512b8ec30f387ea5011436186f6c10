<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: A timeline of mobile botnets</title>
<meta name="description" content="With the recent explosion in smartphone usage, malware authors have increasingly focused their attention on mobile devices, leading to a steep rise in mobile malware over the past couple of years. In this paper, Ruchna Nigam focuses on mobile botnets, drawing up an inventory of types of known mobile bot variants." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1581;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201503-mobile-botnets"></a>A timeline of mobile botnets</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2015-03-30</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Ruchna</span> <span class="surname">Nigam</span></h3><span class="orgname">Fortinet</span>, <span class="orgdiv">France</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>With the recent explosion in smartphone usage, malware authors have increasingly focused their attention on mobile devices, leading to a steep rise in mobile malware over the past couple of years. In this paper, Ruchna Nigam focuses on mobile botnets, drawing up an inventory of types of known mobile bot variants.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2015 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2183" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2183" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id2925409"></a></span></dt><dt><span class="sect1"><a href="#id4393927">Introduction</a></span></dt><dt><span class="sect1"><a href="#id4428297">Botnets: PC vs. mobile</a></span></dt><dt><span class="sect1"><a href="#id3534466">The early stages of mobile botnets</a></span></dt><dt><span class="sect1"><a href="#id2550972">Proofs of concept (PoCs)</a></span></dt><dt><span class="sect1"><a href="#id4145197">Inventory</a></span></dt><dt><span class="sect1"><a href="#id3001339">Some particularly interesting variants</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4581861">Android/SmsHowU</a></span></dt><dt><span class="sect2"><a href="#id4944386">Android/NotCompatible</a></span></dt><dt><span class="sect2"><a href="#id3273821">Android/Twikabot</a></span></dt><dt><span class="sect2"><a href="#id4113108">Android/Tascudap</a></span></dt><dt><span class="sect2"><a href="#id3534001">Android/Claco</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3603533">Anti-debugging tricks</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4346022">Android/NickiSpy.B</a></span></dt><dt><span class="sect2"><a href="#id3488445">Android/Crosate.A</a></span></dt><dt><span class="sect2"><a href="#id2903862">Android/Pincer.A</a></span></dt><dt><span class="sect2"><a href="#id2618872">Android/Wroba.I</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2681481">Code obfuscation and traffic encryption</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id2497891">Android/PjApps.A</a></span></dt><dt><span class="sect2"><a href="#id2223017">Android/Vdloader.A</a></span></dt><dt><span class="sect2"><a href="#id4852378">Android/Tascudap.A</a></span></dt><dt><span class="sect2"><a href="#id3652675">Android/NotCompatible</a></span></dt><dt><span class="sect2"><a href="#id4758031">Android/LuckyCat</a></span></dt><dt><span class="sect2"><a href="#id2309936">Android/SaurFtp.A</a></span></dt><dt><span class="sect2"><a href="#id2617007">Android/JSmsHider.A</a></span></dt><dt><span class="sect2"><a href="#id4019571">Android/DroidKungFu.E</a></span></dt><dt><span class="sect2"><a href="#id3700647">Android/DroidKungFu.F, .G</a></span></dt><dt><span class="sect2"><a href="#id3752054">Android/Wroba.I</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4000978">Unusual attack vectors</a></span></dt><dt><span class="sect1"><a href="#id2676424">Statistics</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3608933">C&amp;C channel used</a></span></dt><dt><span class="sect2"><a href="#id4598843">Information leaked by default</a></span></dt><dt><span class="sect2"><a href="#id2305903">Device administrator privileges</a></span></dt><dt><span class="sect2"><a href="#id2305906">Main motivation</a></span></dt><dt><span class="sect2"><a href="#id4318839">Signing certificates</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2676427">Conclusion</a></span></dt><dt><span class="sect1"><a href="#id4388443">Acknowledgements</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2925409"></a></h2></div></div></div><p><span class="emphasis"><em>(This paper was presented at Botconf 2014.)</em></span></p><p>The recent explosion in smartphone usage has not gone unnoticed by malware authors. Indeed, malware authors have increasingly focused their attention on mobile devices, leading to a steep rise in mobile malware over the past couple of years. This paper focuses particularly on mobile bot variants that can be controlled remotely by an attacker.</p><p>The paper begins with a comparison between mobile and PC botnets, discussing fundamental, conceptual and implementational differences between them. Next, some precursors to fully functional mobile bots are discussed, along with some proof-of-concept mobile botnets that have been published for research purposes.</p><p>The crux of the paper is an inventory of known mobile bot variants in the wild. The inventory is presented in table form, ordered chronologically based on the variants&rsquo; date of discovery. The table lists features such as the command and control (C&amp;C) channel used, C&amp;C commands, the bots&rsquo; abilities, their main motivation(s), and the number of known samples of each. Some variants are then described in further detail, based on criteria such as unusual functionalities, anti-debugging tricks, code obfuscation and traffic encryption, and on whether they are served using unusual attack vectors.</p><p>The paper ends with some statistics based on the analysis of the bot variants listed in the inventory and some inferences that can be drawn from these statistics. My motivation for this paper stems ultimately from the possibility of this information being of use in the design of future mobile security systems.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4393927"></a>Introduction</h2></div></div></div><p>2014 marked the 10th year of the existence of mobile malware [<span class="citation"><a href="#citation.1">1</a></span>], which began with the discovery of Cabir (the first mobile worm) in 2004. Since then, mobile malware has broadly followed the same evolutionary path as PC malware, albeit at a much faster pace. This evolution includes the evident emergence of mobile phone bots &ndash; pieces of malware that can be controlled by a remote entity (a command and control [C&amp;C] server or botmaster) to perform various functions.</p><p>The concept of this paper came about with the idea of creating an inventory of types of known mobile bot variants and, more importantly, of studying the differences and commonalities between them. 60-odd mobile bot variants have been examined and analysed, starting with variants from as early as 2010, up until the recently discovered version of the CryptoLocker ransomware targeting the <span class="emphasis"><em>Android</em></span> platform.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4428297"></a>Botnets: PC vs. mobile</h2></div></div></div><p>In this section, some fundamental, conceptual and implementational differences between PC and mobile botnets will be discussed.</p><div class="itemizedlist"><ul type="disc"><li><p>Platform of operation: The platform on which the botmasters and slaves run is a fundamental difference between mobile and PC botnets. In the case of PC malware, both the botmaster and slave run on the same platform, i.e. a PC, whereas in the case of mobile botnets, the slave runs on a mobile phone, while the botmaster runs either on a PC or on a phone that is operated manually by an attacker. Botmasters haven&rsquo;t yet been observed running autonomously on phones. One could speculate that this is due to constraints on resources in mobile phones, such as battery life and computational power.</p></li><li><p>Connectivity: Mobile botnets are reliant on the connectivity of a mobile phone to a cellular network for communication with a C&amp;C server, whereas PC botnets are reliant on the Internet access of the PC, which is mostly affected only by network glitches or technical faults in the device itself. The field could theoretically be considered level for the two kinds of botnets in this case. However, in practice, cellular network coverage and connectivity varies significantly in different parts of the world, meaning that mobile bots may be subject to more variations in connectivity than their PC counterparts.</p></li><li><p>Lucrativeness: Mobile devices provide a fundamentally more lucrative attack surface owing to the fact that they are almost always carried around by the user, providing a greater probability of relevant information being grabbed from audio and video recordings and camera captures, as opposed to PC botnets that depend both on the device&rsquo;s uptime and the user&rsquo;s availability at the device. A particularly interesting motivation for mobile botnets that doesn&rsquo;t exist in their PC counterparts is the ability to track the location of a victim in real time.</p></li><li><p>Detection: Possibilities of detection using signs of infection exist for both mobile and PC botnets. In addition, mobile botnets also face the unique risk of detection via phone bills, i.e. either as a result of unexpectedly high bills due to Internet connection and/or SMS messages in fixed usage plans, or as a result of unusual/unrecognized numbers appearing in the call/SMS history on bills.</p></li><li><p>Takedown: Fortunately for security enforcers, mobile botnets are still fairly easy to take down &ndash; all cases seen in the wild so far have had a single point of takedown, i.e. either a phone number, a server or an email address. However, with the emergence of new variants with remotely upgradeable C&amp;Cs, mobile botnets might be heading towards the level of takedown complexity seen in PC botnets.</p></li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3534466"></a>The early stages of mobile botnets</h2></div></div></div><p>This section will introduce the infamous Yxes malware for the <span class="emphasis"><em>Symbian</em></span> platform, which was pitted as the first step towards mobile botnets, as well as some other proof-of-concept mobile botnets.</p><p>In 2009, a piece of <span class="emphasis"><em>Symbian</em></span> malware named Yxes was discovered. Yxes made the headlines particularly for being the foretaste of a mobile botnet [<span class="citation"><a href="#citation.2">2</a></span>]. There were two main reasons for this speculation:</p><div class="orderedlist"><ol type="1"><li><p>Internet access: The malware collected information from the infected phone, such as its serial number and subscription number, and forwarded them to a remote server, fulfilling one requirement for qualification as a bot client, i.e. reporting to a remote server.</p></li><li><p>SMS propagation: The malware, in effect, sent SMS messages to the phone&rsquo;s contacts. The SMS messages contained a download link which pointed to a copy of the malware itself, thus qualifying it as a self-propagating worm. This further fuelled speculation of it being part of a botnet since the remote copy of the malware could be upgraded by the attacker(s) to include other functionalities such as the ability to listen for commands.</p></li></ol></div><p>However, Yxes isn&rsquo;t classified as a bot since it lacks one fundamental bot functionality: the ability to take commands from a remote location.</p><p>In the same year, another piece of malware, known as Eeki.B, was discovered on <span class="emphasis"><em>iOS</em></span>. The variant possessed the ability to steal information from the infected phone, such as its SMS database, iPhoneOS version and SQL version, and to send the information to a remote server in targzipped format. It also scanned fixed IP ranges and the phone&rsquo;s local IP range for other jailbroken <span class="emphasis"><em>iPhones</em></span> and sent a copy of itself to them.</p><p>Eeki.B was not included in this paper&rsquo;s inventory for the following reasons:</p><div class="orderedlist"><ol type="1"><li><p>Jailbroken devices: The malware worked only on jailbroken devices, and in addition, only on ones that had an SSH-enabled application and used the default ssh password &lsquo;alpine&rsquo;.</p></li><li><p>C&amp;C down: As in the previous case, the malware would need to be able to receive (and act on) commands from a remote location in order for it to qualify as a bot. In this case, there were no confirmed cases of an exact response received from the C&amp;C. It appears that the C&amp;C was taken down fairly quickly.</p></li></ol></div><p>However, Eeki.B is considered a precursor to a mobile bot due to the fact that it possessed the ability to receive and execute shell scripts from a remote server [<span class="citation"><a href="#citation.3">3</a></span>].</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2550972"></a>Proofs of concept (PoCs)</h2></div></div></div><p>This section lists some mobile botnet PoCs that have been released over the years:</p><div class="itemizedlist"><ul type="disc"><li><p>In 2010, a PoC for a cellular botnet architecture was presented [<span class="citation"><a href="#citation.4">4</a></span>]. The authors evaluated a P2P-based C&amp;C mechanism for mobile phone botnets and implemented it on jailbroken iPhones. They compared multiple approaches for C&amp;C communication &ndash; P2P, SMS and SMS-HTTP &ndash; and concluded that an SMS-HTTP hybrid approach was optimal for C&amp;C communication because of the difficulty in monitoring and disrupting it.</p></li><li><p>In 2011, the PoC for an advanced (at the time) <span class="emphasis"><em>Android</em></span> botnet was introduced. The botnet, called Andbot [<span class="citation"><a href="#citation.5">5</a></span>], used a novel C&amp;C strategy named &lsquo;URL flux&rsquo;. The authors used a Username Generation Algorithm (UGA) to generate the username of a social media account that served as the C&amp;C. The account would generate encrypted Tweets that would serve as commands after decryption by the bot. They found Andbot to be stealthy, resilient and low cost.</p></li><li><p>In the same year, another PoC was presented that made use of a mechanism for proxying the application layer and modem on the phone [<span class="citation"><a href="#citation.6">6</a></span>]. The concept was based on previous work that used the same mechanism for SMS fuzzing [<span class="citation"><a href="#citation.7">7</a></span>]. The botnet architecture presented placed the bot functionality between the application layer and the modem, which would then listen for received SMS messages, decode them and check for a bot key. If the key was found, the payload functionality would be performed. Otherwise, the SMS message would be passed onto the application layer, as is done by default.</p></li><li><p>In 2012, the authors of [<span class="citation"><a href="#citation.8">8</a></span>] presented the detailed design of a mobile botnet PoC. They also included new attack vectors for spreading the bot code to smartphones. They used SMS messages as the C&amp;C channel. They compared structured and unstructured P2P architectures and concluded that the structured architecture (a modified Kademlia) was a better option.</p></li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4145197"></a>Inventory</h2></div></div></div><p><a href="#table.1">Table 1</a> lists known mobile bot variants in the wild. The table is ordered chronologically based on the variants&rsquo; date of discovery, and lists features such as the C&amp;C channel used, C&amp;C commands, the bots&rsquo; abilities, their main motivation(s), and the number of known samples of each.</p><div class="table"><a id="table.1"></a><table border="1" summary="Known mobile bot variants, in chronological order."><colgroup><col /><col /><col /><col /><col /><col /><col /><col /></colgroup><thead><tr><th align="center">Date of discovery of the first sample</th><th align="center">Name of variant</th><th align="center">C&amp;C type</th><th align="center">Info leaked by default</th><th align="center">Botnet commands</th><th align="center">Bot capabilities</th><th align="center">Main motivation</th><th align="center">Number of unique samples</th></tr></thead><tbody><tr><td>Sep 2010</td><td>Android/SmsHowU.A</td><td>SMS</td><td>None</td><td>&lsquo;How are you???&rsquo; or &lsquo;how are you?&rsquo;</td><td>Send location using GPS and Google Maps link to current geographic location via SMS</td><td>Grab location of victim</td><td>18</td></tr><tr><td>Sep 2010</td><td>SymbOS/Zitmo.A</td><td>SMS</td><td>None</td><td>ON; OFF; ADD SENDER; SET SENDER; REM SENDER; BLOCK ON; BLOCK OFF; SET ADMIN</td><td>SMS forwarding</td><td>SMS/mTAN stealing</td><td>2</td></tr><tr><td>Jan 2011</td><td>Android/Geinimi.A</td><td>HTTP port 8080</td><td>Phone number; IMEI; network operator details; IMSI; voice mail number; SIM operator details; SIM serial number; SIM state; build info</td><td>PostUrl; call://; email://; map://; sms://; search://; install://; shortcut://; contact://; wallpaper://; bookmark://; http://; toast://; startapp://; suggestsms://; silentsms://; text://; contactlist; smsrecord; deviceinfo; location; sms; register; call; suggestsms; skiptime; changefrequency; applist; updatehost; install; uninstall; showurl; shell; kill; start; smskiller; dsms</td><td>Send email and SMS; make phone calls; update C&amp;C address; selective deletion of SMS messages; add new application shortcut icons; create a bookmark; display notifications; list running processes; perform web search; display Google Map of current location, etc.</td><td>Propagation of possible malware</td><td>632</td></tr><tr><td>Feb 2011</td><td>BlackBerry/Zitmo.A</td><td>SMS</td><td>None</td><td>ON; OFF; ADD SENDER; SET SENDER; REM SENDER; BLOCK ON; BLOCK OFF; SET ADMIN</td><td>SMS forwarding</td><td>SMS/mTAN stealing</td><td>1</td></tr><tr><td>Feb 2011</td><td>SymbOS/Zitmo.B</td><td>SMS</td><td>None</td><td>UNINSTALL 45930; SET ADMIN</td><td>SMS forwarding; install new packages; send an SMS with text &lsquo;app installed ok&rsquo;</td><td>SMS/mTAN stealing; propagation of possible malware</td><td>2</td></tr><tr><td>Feb 2011</td><td>WinCE/Zitmo.B</td><td>SMS</td><td>None</td><td>UNINSTALL 45930; SET ADMIN</td><td>Install new packages; forward SMS; send an SMS with text &lsquo;app installed ok&rsquo;</td><td>SMS/mTAN stealing; propagation of possible malware</td><td>2</td></tr><tr><td>Mar 2011</td><td>Android/PjApps.A</td><td>HTTP port 8118</td><td>IMEI; IMSI; phone number; SMS service centre; ICCID</td><td>execMark; execPush; execSoft; execTanc; execXbox</td><td>Insert bookmark; send SMS; install a new application; open URL in phone browser</td><td>Financial; propagation of possible malware</td><td>320</td></tr><tr><td>May 2011</td><td>Android/Smspacem.A</td><td>HTTP + SMS</td><td>Phone number; network operator name</td><td>HTTP: formula401; pacem SMS: health</td><td>Send SMS to all contacts on phone containing an HTTP link; send victim&rsquo;s email address via HTTP; SMS command sends an SMS back to the sender saying &lsquo;I am infected and alive ver 1.00&rsquo;</td><td>Propagation of possible malware; spam</td><td>27</td></tr><tr><td>Jun 2011</td><td>Android/CruseWin.A</td><td>HTTP</td><td>IMEI</td><td>sms; insms; url; clean; listapp; update</td><td>Send SMS; relay SMS; update C&amp;C address; list installed applications on phone; delete specific application from phone; visit specified URL if bot&rsquo;s version is different from version number received from C&amp;C</td><td>Spying or financial (by sending SMS to premium numbers)</td><td>26</td></tr><tr><td>Jun 2011</td><td>Android/DroidKungFu.A</td><td>HTTP</td><td>IMEI</td><td>execDelete; execInstall; execOpenUrl; execStartApp</td><td>Download, install and execute other packages; uninstall a package; open URL in phone browser</td><td>Propagation of possible malware</td><td>1000+</td></tr><tr><td>Jun 2011</td><td>Android/JSmsHider.A</td><td>HTTP</td><td>IMEI; IMSI; User-Agent string; cell location; SDK version; bot version number</td><td>001; 002; 003; 004; 005; 006; 007; 008</td><td>Hide and delete SMS from numbers starting with &lsquo;106&rsquo;; set bot&rsquo;s update rate; download and install package; update a package; send SMS; add APN of a Chinese operator; update C&amp;C address</td><td>Financial; propagation of possible malware</td><td>47</td></tr><tr><td>Jun 2011</td><td>Android/Plankton.A</td><td>HTTP</td><td>IMEI; build info</td><td>commandstatus; commands; activate; bookmarks; history; installation; shortcuts; status; homepage; terminate; unexpectedexception</td><td>Set browser homepage; get/set bookmarks; get/set list of shortcuts on the phone&rsquo;s main application page; send debugging info</td><td>Propagation of possible malware</td><td>2000+</td></tr><tr><td>Jun 2011</td><td>Android/YzhcSms.A</td><td>HTTP port 8080</td><td>IMEI; IMSI; phone number; build info</td><td>XML response containing tags domreg; upgrade; address; time; widget</td><td>Send SMS; upgrade self; widget element of C&amp;C&rsquo;s XML response contains a URL to contact, phone numbers to send SMS to, and con-tent of SMS to send</td><td>Financial</td><td>1</td></tr><tr><td>Jul 2011</td><td>Android/GoldDream.A</td><td>HTTP</td><td>IMEI; IMSI</td><td>1-8</td><td>Send SMS; make a phone call; download and install new packages; delete packages; upload files to a URL</td><td>Financial; propagation of possible malware</td><td>405</td></tr><tr><td>Jul 2011</td><td>Android/PjApps.B</td><td>HTTP port 8018</td><td>IMEI; IMSI; phone number; location info</td><td>execTask; execXBox</td><td>Send SMS; visit a URL</td><td>Financial</td><td>15</td></tr><tr><td>Aug 2011</td><td>Android/NickiSpy.B</td><td>SMS</td><td>IMEI</td><td>Password# + record; contact; 0boot; 1boot; 0log; 1log; sendlog; 0sms; 1sms; sendsms; 0gps; 1gps; state; newnum; 0all; 1all</td><td>Send SMS history, phone contacts, call logs, status of phone; enable/disable booting notifications; phone call monitoring; SMS monitoring; GPS monitoring; update C&amp;C number</td><td>Spying/data stealing</td><td>20</td></tr><tr><td>Aug 2011</td><td>Android/Pirates.A</td><td>HTTP</td><td>IMEI; IMSI; Android SDK version</td><td>sendsms; blog down; free down; fav down; open wap</td><td>Send SMS; add bookmark; open URL in phone browser; set APN</td><td>Financial</td><td>107</td></tr><tr><td>Aug 2011</td><td>SymbOS/Spinilog.A</td><td>HTTP</td><td>None</td><td>###CellInfo:,,,;, ###SMSInfo:,,,;, ###SMSSend:[Param],,,;, ###EMailSend:[Param],,,;, ###Send-File:[Param],,,;, ###MakeACall:[Param],,,;, ###BtSendMy- File:[Param],,,;, ###LogInfo:,,,;, ###CalendarInfo:,,,;, ###Systemlist:,,,;</td><td>Send SMS; send email; make a phone call; send a file via Bluetooth; send phone information to an email address</td><td>SMS/data stealing; propagation of possible malware</td><td>1</td></tr><tr><td>Sep 2011</td><td>Android/DroidKungFu.D</td><td>HTTP</td><td>IMEI</td><td>execDelete; execInstall; execHomepage; execOpenUrl; execStartApp; execUpBin; execSysInstall</td><td>Download, install and execute other packages; download and install a package in the &lsquo;system/app&rsquo; folder; set browser homepage; open URL in phone browser; download and edit DHCPCD and other files</td><td>Propagation of possible malware</td><td>1000+</td></tr><tr><td>Oct 2011</td><td>Android/FakeInst.B</td><td>HTTP</td><td>IMEI; IMSI</td><td>delete list; catch list; catch number=[NUM]; delete number=[NUM]; command name= removeAllSmsFilter; command name= sendContactList; command name= removeCurrent-CatchFilter; wait seconds; http url=[URL] method=GET or POST; param name=[NAME]; update; screen</td><td>Selective SMS deletion; selective SMS forwarding; send contact list; contact URL; update self</td><td>SMS/mTANstealing; propagation of possible malware</td><td>177</td></tr><tr><td>Nov 2011</td><td>Android/Geinimi.B</td><td>HTTP</td><td>Same as Android/Geinimi.A</td><td>Same as Android/Geinimi.A</td><td>Send email and SMS; make phone calls; add new application shortcut icons; create a bookmark; display notifications; list running processes; perform web search; display Google Map of current location</td><td>Propagation of possible malware; displaying ads</td><td>105</td></tr><tr><td>Nov 2011</td><td>Android/GoldenEagle.A</td><td>SMS</td><td>None</td><td>..&gt;*&lt;&gt;&gt;.a, ..&gt;..*5r&gt;, ..&gt;&lt;&lt;*b.*, ..&gt;***h&lt;, ..&gt;&lt;&lt;*&gt;y, ..&gt;...**j&lt;, ..&gt;&gt;&gt;*..w, ...*&lt;.&gt;, ..&gt;****&gt;.&lt;, ..&gt;.&lt;.&gt;*8&lt;, ..&gt;.*&lt;.&gt;*, ..&gt;**&gt;..8</td><td>Forward SMS history, call logs, contact list, audio recordings from phone to hard-coded email addresses; update email destination</td><td>Spying/data stealing</td><td>1</td></tr><tr><td>Jan 2012</td><td>Android/DroidKungFu.F</td><td>HTTP port 9000</td><td>IMEI</td><td>GETID; GETTASK; URLREPORT</td><td>Download, install and execute other packages; uninstall a package</td><td>Propagation of possible malware</td><td>61</td></tr><tr><td>Feb 2012</td><td>Android/Fjcon.A</td><td>HTTP phone</td><td>ICCID</td><td>XML message containing name and download URL for an application to install</td><td>Selective SMS hiding; SMS sending; download and install other packages</td><td>Financial; propagation of possible malware</td><td>80</td></tr><tr><td>Feb 2012</td><td>Android/Rootsmart.A</td><td>HTTP</td><td>IMEI; IMSI; cell ID; location area code; mobile network code</td><td>action.host start; action.boot; action.shutdown; action.screen off; action.install; action.installed; action.check live; action.download shells; action.exploid; action.first commit localinfo; action.load taskinfo; action.download apk</td><td>Send SMS; download and install applications</td><td>Financial; propagation of possible malware</td><td>15</td></tr><tr><td>Feb 2012</td><td>Android/Zitmo.A</td><td>SMS</td><td>None</td><td>on; off; set admin</td><td>SMS forwarding; start/stop SMS forwarding; update C&amp;C phone number</td><td>SMS and mTAN stealing</td><td>108</td></tr><tr><td>Apr 2012</td><td>Android/DroidKungFu.G</td><td>HTTP</td><td>IMEI</td><td>&nbsp;</td><td>Download, install and execute other packages</td><td>Propagation of possible malware</td><td>204</td></tr><tr><td>May 2012</td><td>Android/TigerBot.A</td><td>SMS</td><td>IMEI</td><td>**; *0000*11*; *[dddd]*15*[proc]; *[dddd]*16*[proc]; *[key]*21*; *[key]*13; *[key]*17*a*b; *[key]*19; *[key]*18; *[key]*22</td><td>Send SMS to a given phone number; send network info; capture image; change APN; notify of SIM change; kill specific running applications; restart the device; report current location; send debug info</td><td>Financial; spying/data stealing</td><td>40</td></tr><tr><td>Jun 2012</td><td>Android/NotCompatible.A</td><td>HTTP port 8014</td><td>None</td><td>connectProxy; newServer; sendError; sendPong; shutdownChanal</td><td>Use of the infected device as a proxy server (probably to gain access to private networks)</td><td>Proxy</td><td>25</td></tr><tr><td>Jun 2012</td><td>Android/Zitmo.E</td><td>SMS</td><td>IMEI; IMSI</td><td>#; /; !; comma + [NUMBER]</td><td>SMS forwarding; change the C&amp;C phone number; mark software for uninstall; clean settings</td><td>SMS/mTAN stealing</td><td>28</td></tr><tr><td>Jul 2012</td><td>Android/FkToken.A</td><td>HTTP</td><td>IMEI; IMSI; phone number</td><td>sms; catch; delete; httpRequest; param; update; screen; command; wait; server</td><td>Selective SMS forwarding; selective SMS deletion; forward phone contact list; configuration update</td><td>SMS/mTAN stealing</td><td>688</td></tr><tr><td>Jul 2012</td><td>Android/Spitmo.D</td><td>SMS</td><td>IMEI; IMSI; phone number</td><td>#; /; !; comma + [NUMBER]</td><td>SMS forwarding; update C&amp;C phone number; toggle SMS control and forwarding</td><td>SMS/mTAN stealing</td><td>1</td></tr><tr><td>Jul 2012</td><td>Android/Twikabot.A</td><td>HTTP</td><td>IMEI; phone number</td><td>sms</td><td>SMS sending</td><td>Financial</td><td>5</td></tr><tr><td>Aug 2012</td><td>Android/Fakemart.A</td><td>HTTP</td><td>None</td><td>sms</td><td>Configuration update; SMS sending; SMS hiding</td><td>Financial</td><td>3</td></tr><tr><td>Aug 2012</td><td>Android/Fakemart.B</td><td>HTTP</td><td>None</td><td>sms</td><td>Configuration update; SMS sending; SMS hiding</td><td>Financial</td><td>16</td></tr><tr><td>Aug 2012</td><td>Android/LuckyCat.A</td><td>HTTP port 54321</td><td>Phone number</td><td>mSendReport; GetDirList; mReadFileDataFun; mWriteFileDataFun</td><td>Browse directory info; download and upload files; send information such as phone number and IP address of victim&rsquo;s phone</td><td>Spying/data stealing</td><td>18</td></tr><tr><td>Aug 2012</td><td>Android/Vdloader.A</td><td>HTTP port 8080</td><td>IMEI; IMSI; phone number; Android SDK version; network type; phone type; phone model; network operator</td><td>Flag= + 0,1,2</td><td>Display notifications; SMS sending; download and install packages</td><td>Financial; propagation of possible malware</td><td>151</td></tr><tr><td>Sep 2012</td><td>Android/FakeLash.A</td><td>HTTP</td><td>IMEI; phone number; SIM serial number; Android ID</td><td>MSG:; PPI:; NUM:; SMS:</td><td>nd forwarding; send SMS; update list of numbers to hide SMS from</td><td>Financial</td><td>2</td></tr><tr><td>Sep 2012</td><td>Android/Vidro.A</td><td>HTTPS</td><td>IMEI; build info; country code; phone language; SIM card country ISO; SIM card operator</td><td>service code; service text; service interval; apk source</td><td>Selective SMS hiding; SMS sending; configuration update</td><td>Financial</td><td>159</td></tr><tr><td>Nov 2012</td><td>Android/FkLookt.A</td><td>HTTP</td><td>None</td><td>clearFileList; clear-Alarm; getTexts; get-Dir; getFile; getSize</td><td>Delete files on the victim&rsquo;s phone; upload the phone&rsquo;s file listing to an FTP server; save SMS or MMS history from the phone to a particular location</td><td>Spying/data stealing</td><td>8</td></tr><tr><td>Jan 2013</td><td>Android/Stealer.B</td><td>HTTP and SMS</td><td>IMEI; IMSI; phone contacts</td><td>HTTP: time; sms; send; delete; smscf <p>SMS: ServerKey + 001; 002; anything </p></td><td>Specify time when trojan should next contact C&amp;C; send SMS; delete SMS from phone; selective SMS hiding; start application; forward received SMS; update ServerKey value</td><td>Financial; spying/data stealing</td><td>7</td></tr><tr><td>Jan 2013</td><td>Android/Tascudap.A</td><td>HTTP at 2700&ndash;2799</td><td>None</td><td>#m; #u; #t</td><td>Send SMS; send large number of UDP packets containing randomly chosen bytes to specified URL</td><td>Financial; DDoS</td><td>40</td></tr><tr><td>Feb 2013</td><td>Android/Claco.A</td><td>HTTP at port 9999</td><td>Email address registered on phone</td><td>info; sms; call; exec; device reboot; get packages; open; get sd map; get file; get dir; get sms; del sms; ringer; get network info; creds attack; creds dropbox; get pics; get contacts; forward; forward unset; usb autorun attack; start track; commands</td><td>Send SMS messages; make phone calls; toggle the Wi-Fi state; reboot the device; start other activities on the device; delete SMS messages; change ringer state; upload network information, file and directory listing, SMS records, contact information, Android and Dropbox user credentials, build information</td><td>Financial; spying/data stealing (particularly account credentials); propagation of malware to PC when phone is connected to it in USB mode</td><td>4</td></tr><tr><td>Mar 2013</td><td>Android/Chuli.A</td><td>HTTP</td><td>Phone number</td><td>contact; location; sms; other</td><td>Send list of phone contacts; send location info; SMS forwarding; send info regarding received calls</td><td>Spying/data stealing</td><td>2</td></tr><tr><td>Apr 2013</td><td>Android/BadNews.A</td><td>HTTP</td><td>IMEI; phone number; 64-bit Android ID; build info; phone language</td><td>news; showpage; install; showinstall; iconpage; iconinstall; newdomen; seconddomen; stop; testpost</td><td>Display of notifications that could lead to the further download and installation of packages; update address of the C&amp;C server; install shortcuts on the infected phone</td><td>Propagation of possible malware</td><td>50</td></tr><tr><td>Apr 2013</td><td>Android/Perkel.A</td><td>SMS</td><td>None</td><td>&amp;&amp;; @DELETE</td><td>Activate SMS listener for a specific period of time; forward SMS to a hard-coded phone number; deactivate bot</td><td>SMS/mTAN stealing</td><td>9</td></tr><tr><td>Apr 2013</td><td>Android/SmsMngr.A</td><td>HTTP</td><td>IMSI; phone number</td><td>GET RECEIVE MESSAGE; GET SEND MESSAGE; MODIFY MESSAGE; DELETE MESSAGE; SHOW MESSAGE</td><td>Delete, modify, forward SMS messages present in the inbox</td><td>SMS/mTAN stealing</td><td>1</td></tr><tr><td>Apr 2013</td><td>Android/Smsilence.A</td><td>SMS</td><td>Phone number</td><td>112; 113</td><td>Uninstall self; download and install payload from hard-coded location; SMS from hard-coded number results in deletion of a specific application</td><td>Propagation of possible malware</td><td>18</td></tr><tr><td>Apr 2013</td><td>Android/SMSSpy.F</td><td>HTTP</td><td>Phone number</td><td>219083</td><td>SMS forwarding; if C&amp;C responds with the command (219083), the received SMS message is hidden from the user</td><td>SMS/mTAN stealing</td><td>105</td></tr><tr><td>May 2013</td><td>Android/Pincer.A</td><td>SMS</td><td>IMEI; phone number; build info; network operator name; Android ID; phone language; rooting state of phone</td><td>command: start sms forwarding; start call blocking; stop sms forwarding; stop call blocking; send sms; execute ussd; simple execute ussd; stop program; show message; delay change; ping</td><td>Selective SMS forwarding; selective call blocking; SMS sending; update command fetching interval; stop bot</td><td>Spying/data stealing</td><td>10</td></tr><tr><td>May 2013</td><td>Android/Stels.A</td><td>HTTP</td><td>IMEI; IMSI</td><td>wait; server; subPref; botId; remoteAllSmsFilters; remoteAllCatch-Filters; deleteSms; catchSms; sendSms; httpRequest; update; uninstall; notifications; openUrl; sendContactList; sendPackageList; makeCall</td><td>Call a given phone number; send an attacker-defined SMS; open given URL in phone browser; toast a specific message</td><td>Financial</td><td>3</td></tr><tr><td>Jun 2013</td><td>Android/Tetus.A</td><td>HTTP</td><td>IMEI; network carrier; network operator name; build info; firmware version</td><td>csc; keyword; ucsa</td><td>SMS forwarding; SMS sending; update SMS destination and content; send updates when a partner application is installed</td><td>Spying/data stealing</td><td>181</td></tr><tr><td>Jul 2013</td><td>Android/IknoSpy.A</td><td>HTTP</td><td>IMEI; incoming and outgoing call logs and SMS messages</td><td>REQ TYPE = LOC; REQ TYPE = CAM</td><td>Toggle GPS status; send location information; capture pictures from phone camera</td><td>Spying/data stealing</td><td>1</td></tr><tr><td>Jul 2013</td><td>Android/MSNewsSpy.A</td><td>SMS</td><td>IMEI; IMSI</td><td>!#10:; !#16:; !#20:; !#30:</td><td>Delete all SMS messages; send SMS to a hard-coded phone number; hide incoming SMS</td><td>Financial</td><td>4</td></tr><tr><td>Jul 2013</td><td>Android/Rmspy.A</td><td>SMS</td><td>IMEI; network operator name</td><td>*#OLD PIN#INT#NEW PIN*</td><td>Update PIN value used to identify SMS containing bot commands; SMS sending when calls received; hide incoming calls; detect SIM change; detect battery change</td><td>Spying/data stealing</td><td>3</td></tr><tr><td>Jul 2013</td><td>Android/SaurFtp.A</td><td>HTTP and SMS</td><td>IMEI; IMSI; SIM serial number; phone number; location; call logs; SMS history; contact information</td><td>HTTP: no commands<p>SMS: 5&amp; </p></td><td>HTTP C&amp;C returns address of FTP server where collected data is uploaded; SMS command hides received SMS and replies with cellular network details</td><td>Spying/data stealing</td><td>2</td></tr><tr><td>Aug 2013</td><td>Android/AndroRat.A</td><td>HTTP</td><td>IMEI; phone number; country code; operator name; SIM country code; SIM serial number</td><td>5; 101-123</td><td>Forward GPS information, contacts, directory listings and contents, saved files, call logs and SMS history; record audio; take a picture; display a pop-up on the user&rsquo;s phone; open a URL in the phone&rsquo;s browser; cause the phone to vibrate; make a phone call, send SMS</td><td>Spying/data stealing</td><td>1000+</td></tr><tr><td>Sep 2013</td><td>Android/Crosate.A</td><td>HTTP</td><td>IMEI; phone number; SIM country ISO; network operator name</td><td>setFilter start; setFilter stop; macros; forceZ On; forceZ Off; callBlock start; callBlock stop; getMessages in; getMes-sages out; keyHttpGate; keySmsGate; sendSms</td><td>Steal SMS, call logs, contact information; send SMS; record a call; makes a phone call</td><td>&nbsp;</td><td>30</td></tr><tr><td>Sep 2013</td><td>Android/Hesperbot.A</td><td>SMS</td><td>None</td><td>+[NUM]; on; off; uninstall</td><td>Set C&amp;C phone number; switch on/off SMS forwarding; uninstall application</td><td>SMS &amp; mTAN stealing</td><td>1</td></tr><tr><td>Jan 2014</td><td>Android/FakePlay.C</td><td>HTTP</td><td>IMEI; IMSI; phone number; build info</td><td>sms start; sms stop; call start; call stop; sms list; call list; start record; stop record; sendSMS; contact list; wipe data</td><td>Download and install fake banking applications; SMS forwarding; prevention of received call notifications and hiding from call logs; send contact list; send list of installed applications; SMS sending</td><td>Propagation of malware; spying/data stealing</td><td>3</td></tr><tr><td>Jan 2014</td><td>Android/Nitmo.A</td><td>SMS</td><td>IMEI; IMSI; phone number; build info</td><td>sms start; sms stop; call start; call stop; sms list; call list; start record; stop record; sendSMS; contact list; wipe data</td><td>Start/stop SMS forwarding, call forwarding, audio recording; forward SMS history, call logs, contact list; SMS sending; reboot device and erase all user data</td><td>Spying/data stealing</td><td>1</td></tr><tr><td>Jun 2014</td><td>Android/Pletor.A</td><td>HTTP using TOR</td><td>IMEI</td><td>&lsquo;command&rsquo;: &lsquo;stop&rsquo;</td><td>Deactivate ransomware</td><td>Financial (extortion of money)</td><td>54</td></tr><tr><td>Jun 2014</td><td>Android/Pletor.B</td><td>SMS</td><td>IMEI</td><td>stopec</td><td>Deactivate ransomware</td><td>Financial (extortion of money)</td><td>4</td></tr><tr><td>Jul 2014</td><td>Android/Wroba.I</td><td>SMS</td><td>Phone number</td><td>ak49-[URL]; ak40-[MSG]; wokm-[MSG]; ak60-[EMAIL]; ak61-[PWD]</td><td>Update value of URL or EMAIL &amp; PWD where stolen info is sent; send SMS containing MSG to all phone contacts; leak banking and credit card details; download and install fake banking application updates</td><td>Propagation of possible malware; financial; installation of banking malware</td><td>77</td></tr><tr><td>Jul 2014</td><td>Android/Wroba.M</td><td>HTTP</td><td>IMEI; build info; network operator name; list of Korean banking applications installed; phone contacts list; IMSI; network info; SIM operator info; phone number; voice mail number</td><td>padding; right; left; top; margin</td><td>Send SMS to phone contacts; download and install fake updates for existing banking applications; upgrade self</td><td>Propagation of possible malware; installation of banking malware</td><td>156</td></tr><tr><td>Oct 2014</td><td>Android/Xsser.A</td><td>HTTP</td><td>IMEI; IMSI; SIM serial number; SIM state</td><td>2-24; 40-46; 100; 101</td><td>Grab SMS history, call logs, GPS/location info, phone browser and email history, phone&rsquo;s file listing; send incoming &amp; outgoing phone call recordings and audio recordings; run shell commands received on phone; download, upload or delete files; display a notification</td><td>Spying/data stealing</td><td>1</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Known mobile bot variants, in chronological order.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3001339"></a>Some particularly interesting variants</h2></div></div></div><p>Variants with particularly unusual and/or interesting functionalities are detailed in this section, which is followed by subsections on anti-debugging tricks, code obfuscation and traffic encryption, and unusual attack vectors seen in the wild.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4581861"></a>Android/SmsHowU</h3></div></div></div><p><span class="emphasis"><em>sha256sum: a3444b5c12334b24a587c083eb6c73d3a982397abd0a5eff3d1718bc1c392896</em></span></p><p>This variant responds with the user&rsquo;s GPS location along with a <span class="emphasis"><em>Google Maps</em></span> link on receipt of the innocent-looking SMS command &lsquo;how are you?&rsquo;. The location-grabbing functionality is implemented by the code shown in <a href="#figure.1">Figure 1</a>.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Location-grabbing functionality in Android/SmsHowU." src="/uploads/images/figures/2015/03/Nigam-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Location-grabbing functionality in Android/SmsHowU.</b></p></div><p>The requestLocationUpdates() function registers the current activity to be updated periodically with location updates by a provider that matches the requirements specified by localCriteria [<span class="citation"><a href="#citation.9">9</a></span>]. There are no constraints on the time interval between updates, but the distance between location updates is constrained to 10 metres.</p><p>The <span class="emphasis"><em>Google Maps</em></span> link creation is implemented by the code below, which is based on snippets from the original malware code:</p><pre class="programlisting">Geocoder localGeocoder;
localGeocoder = new Geocoder(this.context, Locale
  .getDefault());
localList = localGeocoder.getFromLocation(paramLocation
  .getLatitude(), paramLocation.getLongitude(), 1);
Address localAddress = (Address)localList.get(0);
if (localList != null)
{
  localStringBuffer2 = new StringBuffer();
  localStringBuffer2.append
    (&ldquo;Android device map link: \n&rdquo;);
  localStringBuffer2.append
    (&ldquo;http://maps.google.de/maps?q=&rdquo;);
  localStringBuffer2.append(URLEncoder
    .encode(localAddress.getAddressLine(i) + &ldquo;,&rdquo;));
}
Object localObject = localStringBuffer2;
</pre><p>The collected information is then sent via SMS, as implemented in the code below, where &lsquo;_to&rsquo; is the sender of the SMS command, i.e. the botmaster:</p><pre class="programlisting">if (localObject != null)
{
  String str4 = localObject.toString();
  SmsManager sms;
  his.sms.sendTextMessage(this._to, null, str4,
    this.sentIntent, null);
}
</pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4944386"></a>Android/NotCompatible</h3></div></div></div><p><span class="emphasis"><em>sha256sum: 1a18e48fbd79ce84d946b4d065a7e30c5f10a4762437a6c8d888348afbab685f</em></span></p><p>What makes this malware family interesting is that it supports a command called &lsquo;connectProxy&rsquo;. When this command is received, the bot opens a connection to an IP address and port specified by the package&rsquo;s configuration file, and redirects traffic to this location, thus allowing a remote attacker to use the infected device as a proxy server.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3273821"></a>Android/Twikabot</h3></div></div></div><p><span class="emphasis"><em>sha256sum: b63c33cc71eda01b79572e1f8b82b703f9c088fde6966c7cf855f00f8c77775d</em></span></p><p>This bot variant contacts <span class="emphasis"><em>Twitter</em></span> accounts to acquire the names of C&amp;C servers to contact. This functionality is implemented in the following steps:</p><div class="orderedlist"><ol type="1"><li><p>Once launched, the StatisticsUploader class generates a random string using an algorithm that uses predefined strings present in the package.</p></li><li><p>This generated string serves as a nickname for a <span class="emphasis"><em>Twitter</em></span> account. The malware then sends an HTTP request to http://mobile.twitter.com/[Generated Username].</p></li><li><p>From the response to the HTTP request, it extracts the string present between a randomly chosen tag from arrayOfString3 and a randomly chosen domain name from arrayOfString1, whose values are shown in <a href="#figure.2">Figure 2</a>.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Strings used for C&amp;C address generation." src="/uploads/images/figures/2015/03/Nigam-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Strings used for C&amp;C address generation.</b></p></div></li><li><p>Next, it sends a POST request to the URL &lsquo;http://&rsquo;+[Extracted String]+&lsquo;/carbontetraiodide&rsquo; with a randomly generated user agent. The infected phone&rsquo;s IMEI, <span class="emphasis"><em>Android</em></span> ID and phone number are included as POST parameters.</p></li><li><p>It then checks the response to the POST request to see if it contains the command &lsquo;sms&rsquo;. If it does, it sends out an SMS message using information in the POST response such as &lsquo;phone&rsquo; (SMS destination), &lsquo;data&rsquo; (SMS body) and &lsquo;interval&rsquo; (number of times to send the SMS).</p></li></ol></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4113108"></a>Android/Tascudap</h3></div></div></div><p><span class="emphasis"><em>sha256sum: c88a6e66e300268bcb6bd8f725565c24a04bc70bbba8c522235bfb505623ed2d</em></span></p><p>This bot variant shows no explicit signs of its presence once it is installed. However, it is launched every time the official <span class="emphasis"><em>Google Play</em></span> application is launched. It implements this functionality by adding the application&rsquo;s main intent to the category android.intent.category.APP MARKET, which is sent out when the <span class="emphasis"><em>Google Play </em></span>application is launched. The implementation is shown in <a href="#figure.3">Figure 3</a>.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Android/Tascudap&rsquo;s functionality to ensure it is launched with Google Play." src="/uploads/images/figures/2015/03/Nigam-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Android/Tascudap&rsquo;s functionality to ensure it is launched with Google Play.</b></p></div><p>More interestingly, apart from being able to process commands for sending SMS messages and sending heartbeat messages back to the attacker, it can also be made to send numerous UDP packets to a specific destination. This is implemented in the code shown in <a href="#figure.4">Figure 4</a> and can only be explained as an attempt at a denial of service (DoS) attack on a destination specified by the attacker.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Android/Tascudap&rsquo;s denial of service feature." src="/uploads/images/figures/2015/03/Nigam-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Android/Tascudap&rsquo;s denial of service feature.</b></p></div><p>(Click <a href="/uploads/images/figures/2015/03/Nigam-4-large.jpg" target="_top">here</a> to view a larger version of Figure 4.)</p><p>The exact implementation of this command is as follows:</p><pre class="programlisting">if
 User receives SMS containing
    &ldquo;\#u[Dst]:[Port]:[c]:[d]&rdquo; or
    &ldquo;\#u[Dst]:[Port]:[d]&rdquo;
then
  Send large number of UDP packets containing randomly generated byte array of random length to the address Dst at port Port, d number of times. 
  The value c, whose default value is 500, is used for the generation of the byte array.
</pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3534001"></a>Android/Claco</h3></div></div></div><p><span class="emphasis"><em>sha256sum: 7b1746778d0196bf01251fd1cf5110a2ef41d707dc7c67734550dbdf3e577bb9</em></span></p><p>This bot variant is interesting for its ability to process a command called &lsquo;usb autorun attack&rsquo; which leads to the download of certain files from the C&amp;C that could be used to infect a PC when the phone is connected to it in USB mode. The implementation of this functionality is shown in <a href="#figure.5">Figure 5</a>.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Android/Claco&rsquo;s &lsquo;usb autorun attack&rsquo; command." src="/uploads/images/figures/2015/03/Nigam-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Android/Claco&rsquo;s &lsquo;usb autorun attack&rsquo; command.</b></p></div><p>It also implements another interesting command called &lsquo;ringer&rsquo; that is followed by a parameter. Depending upon the value of this parameter, the phone&rsquo;s ringer state is set to &lsquo;silent&rsquo; or &lsquo;normal&rsquo;. The corresponding code is shown in <a href="#figure.6">Figure 6</a>.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Android/Claco&rsquo;s &lsquo;ringer&rsquo; command." src="/uploads/images/figures/2015/03/Nigam-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Android/Claco&rsquo;s &lsquo;ringer&rsquo; command.</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3603533"></a>Anti-debugging tricks</h2></div></div></div><p>Anti-debugging tricks are widely employed by authors of PC malware, however these techniques aren&rsquo;t as commonly observed in mobile malware. This section will focus on the few mobile bot samples that do employ them, that were analysed as part of this study.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4346022"></a>Android/NickiSpy.B</h3></div></div></div><p><span class="emphasis"><em>sha256sum: 498b425a8536ce03b5738e1ba3339f70ec2680bc437e1650084d8b908a343405</em></span></p><p>This bot variant checks the IMEI value of the device it is being run on and forwards it to a URL that is specified in the package. The application continues to run only if the response &lsquo;y&rsquo; is received, otherwise it exits. The code implementing this anti-debugging trick, which allows the selective, IMEI-based, attacker-determined execution of this bot, is shown in <a href="#figure.7">Figure 7</a>.</p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Anti-debugging trick in Android/NickiSpy.B." src="/uploads/images/figures/2015/03/Nigam-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Anti-debugging trick in Android/NickiSpy.B.</b></p></div><p>The check() function implements the HTTP request made and returns &lsquo;true&rsquo; if the response &lsquo;y&rsquo; is received.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3488445"></a>Android/Crosate.A</h3></div></div></div><p><span class="emphasis"><em>sha256sum: 15281dbe2603f5973d 53c5fddabbcc3de6ad3ec65146aa2ffb34a779ea604f82</em></span></p><p>This variant checks the IMEI value of the device it runs on, and if it contains the string &lsquo;000000000000000&rsquo;, the application exits. This is a useful emulator detection mechanism since the string corresponds to the IMEI value on the widely used emulators that come with the <span class="emphasis"><em>Android</em></span> SDK [<span class="citation"><a href="#citation.10">10</a></span>]. The implementation can be seen in <a href="#figure.8">Figure 8</a>.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="Emulator detection in Android/Crosate.A." src="/uploads/images/figures/2015/03/Nigam-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;Emulator detection in Android/Crosate.A.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2903862"></a>Android/Pincer.A</h3></div></div></div><p><span class="emphasis"><em>sha256sum: 032a095067442d60d0df9fadab07553152e5500a67fc95084441752eafd43f70</em></span></p><p>This variant checks whether it is being run on an emulator by checking certain parameters such as the IMEI, model name, phone number, etc. for default values found on an emulator. We can only assume that this is done with the intention of hindering dynamic analysis of the malware on an emulator. The values are listed below:</p><pre class="programlisting">Build.PRODUCT = &ldquo;sdk&rdquo; or &ldquo;generic&rdquo;
Build.MODEL = &ldquo;sdk&rdquo; or &ldquo;generic&rdquo;
IMEI = &ldquo;351565050260436&rdquo; or &ldquo;000000000000000&rdquo;
  or &ldquo;357242043237517&rdquo; or &ldquo;012345678912345&rdquo;
Phone Number = &ldquo;15555215554&rdquo;
Build.HARDWARE = &ldquo;goldfish&rdquo;
Nw = &ldquo;Android
</pre><p>If any of the above values are true, the malware doesn&rsquo;t launch the function implementing its botnet capabilities, thereby effectively hiding its malicious behaviour.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2618872"></a>Android/Wroba.I</h3></div></div></div><p><span class="emphasis"><em>sha256sum: b103f3897b1619dee157e62a1737e864452a85bab613ad971ac6193b3f6a4834</em></span></p><p>This variant checks for the value of the device&rsquo;s IMEI and phone number to detect an emulator. This is implemented using a code snippet similar to that shown below:</p><pre class="programlisting">this.telephonyManager = ((TelephonyManager)
  getSystemService(&ldquo;phone&rdquo;));
String deviceId = &ldquo;deviceid:&rdquo; + this.
  telephonyManager.getDeviceId();
String phoneIdentity = this.
  telephonyManager.getLine1Number();
if ((phoneIdentity.startsWith(&ldquo;15555&rdquo;)) ||
  (deviceId.startsWith(&ldquo;00000000&rdquo;)))
System.exit(0);
</pre><p>The IMEI value used for emulator detection is &lsquo;00000000&rsquo;. However, this check doesn&rsquo;t function due to a coding flaw. If the phone number on the device begins with &lsquo;15555&rsquo;, the application exits. This helps with emulator detection since the default phone number on a standard emulator is &lsquo;15555215554&rsquo;.</p><p>For multiple emulator instances running in parallel, the last four digits of the phone number are incremented to the next even number within the range 5554 to 5584 [<span class="citation"><a href="#citation.11">11</a></span>].</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2681481"></a>Code obfuscation and traffic encryption</h2></div></div></div><p>This section details bot variants that employ techniques to hide code by means of obfuscation or encryption, and those that make use of traffic encryption to prevent detection by analysis of network traffic. Each example also shows the implementation of the obfuscation, decryption or encryption schemes in the bot&rsquo;s code.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2497891"></a>Android/PjApps.A</h3></div></div></div><p><span class="emphasis"><em>sha256sum: b84ebe48e60d74984e7 e9f5d8c12c2c578ea3554b73df4af8209bbdb7276c839</em></span></p><p>The C&amp;C URL is &lsquo;encrypted&rsquo; with a simple algorithm that uses only alternate characters of a given string. The decryption routine is implemented in the function com.android.main.a.a() of the package that takes the encrypted string and an integer as arguments. This class is defined as follows:</p><pre class="programlisting">public static String a(String paramString, int paramInt)
{
  StringBuffer localStringBuffer = new StringBuffer();
  String str1, str2;
  int i = paramString.length();
  for (int j = 0; ; j++)
  {
    if (j &gt;= i / 2)
    {
      str2 = localStringBuffer.toString();
      String str3 = str2.substring(0, paramInt);
      if (paramInt &lt;= 0)
      {
        str1 = str2.substring(paramInt, str2.
          length() - 3) + &ldquo;.&rdquo; + str2.
          substring(str2.length() - 3);
      }
     str1 = str3 + &ldquo;.&rdquo; + str2.substring(paramInt,
       str2.length() - 3) + &ldquo;.&rdquo; +
        str2.substring(str2.length() - 3);
      break;
    }
    localStringBuffer.append(paramString.substring
      (1 + j * 2, 2 + j * 2));
    }
    return str1;
}
</pre><p>An example of its use in a bot sample is as follows:</p><pre class="programlisting">a(&ldquo;3lgoagdmfejekgfos9t15chojm&rdquo;, 3) = &ldquo;log.meego91.com&rdquo;</pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2223017"></a>Android/Vdloader.A</h3></div></div></div><p><span class="emphasis"><em>sha256sum: 7a771f17e3315c9a93 b6ccb1cd5e5e03ca8feeb2d02369d13e5dcdb0b95aaca8</em></span></p><p>This sample uses a custom string encryption method. The decrypted string is calculated as [char -position]. The decryption code can be found at [<span class="citation"><a href="#citation.12">12</a></span>]. To give an example, decryption of the string below results in a configuration string used by the bot:</p><pre class="programlisting">decrypt d = new decrypt();
String str=d.a(&ldquo;7B237868263F283F36392C372E7B7183324
B3443364138807B8D3C553E4D404B42849796465F8149909D
9E9B665C5D909193949697999A9C9D679DAAA977766F78717
1B372AFB9B76AA6766DBFB6708972838284768178BAC17B94
7D8D7FDB&rdquo;);
System.out.println (&ldquo;Decryption result: &ldquo;+str);
</pre><p>gives the output:</p><pre class="programlisting">Decryption result: {&ldquo;ve&rdquo;:&rdquo;8.0&rdquo;,&rdquo;nct&rdquo;:&rdquo;0&rdquo;,&rdquo;ict&rdquo;:&rdquo;0&rdquo;,
&ldquo;cus&rdquo;:[&ldquo;http://aabbccddee.com:8080/p.jsp&rdquo;],
&ldquo;si&rdquo;:&rdquo;201&rdquo;,&rdquo;ci&rdquo;:&rdquo;1&rdquo;}
</pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4852378"></a>Android/Tascudap.A</h3></div></div></div><p><span class="emphasis"><em>sha256sum: c88a6e66e300268bcb6bd8f725565c24a04bc70bbba8c522235bfb505623ed2d</em></span></p><p>This variant also makes use of a custom encryption method based on arithmetic and logical operations, for hiding the C&amp;C address. The decryption can be found at [<span class="citation"><a href="#citation.13">13</a></span>]. The decrypted output looks like this:</p><pre class="programlisting">Output = gzqtmtsnidcdwxoborizslk.com</pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3652675"></a>Android/NotCompatible</h3></div></div></div><p><span class="emphasis"><em>sha256sum: 1a18e48fbd79ce84d946b4d065a7e30c5f10a4762437a6c8d888348afbab685f</em></span></p><p>In this case, the configuration file is encrypted using AES. The bot decrypts a file in the package assets using AES with a key that is the SHA-256 hash of a hard-coded string. This implementation can be seen in the bot&rsquo;s code in <a href="#figure.9">Figure 9</a>.</p><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="AES decryption using a key obtained from the SHA256 hash of a hard-coded string in Android/NotCompatible." src="/uploads/images/figures/2015/03/Nigam-9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;AES decryption using a key obtained from the SHA256 hash of a hard-coded string in Android/NotCompatible.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4758031"></a>Android/LuckyCat</h3></div></div></div><p><span class="emphasis"><em>sha256sum: 5d2b0d143f09f31bf52f0ffa0810c66f94660490945a4ee679ea80f709aae3bd</em></span></p><p>This variant XOR &lsquo;encrypts&rsquo; the traffic sent to the C&amp;C. The encryption can be seen in <a href="#figure.10">Figure 10</a>, where paramArrayOfByte contains the information to be sent to the C&amp;C.</p><div class="figure"><a id="figure.10"></a><div class="mediaobject"><img alt="Traffic encryption by Android/LuckyCat." src="/uploads/images/figures/2015/03/Nigam-10.jpg" /></div><p class="title"><b>Figure&nbsp;10.&nbsp;Traffic encryption by Android/LuckyCat.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2309936"></a>Android/SaurFtp.A</h3></div></div></div><p><span class="emphasis"><em>sha256sum: 9390a145806157cadc54ecd69d4ededc31534a19a1cebbb1824a9eb4febdc56d</em></span></p><p>This bot variant gets its C&amp;C address from a file in the package assets called proper.ini. The contents of the file between the characters &lsquo;&lt;####&rsquo; and &lsquo;####&gt;&rsquo; are read and then XOR decrypted, as shown in <a href="#figure.11">Figure 11</a>.</p><div class="figure"><a id="figure.11"></a><div class="mediaobject"><img alt="XOR decryption in Android/SaurFtp with a key providing life advice." src="/uploads/images/figures/2015/03/Nigam-11.jpg" /></div><p class="title"><b>Figure&nbsp;11.&nbsp;XOR decryption in Android/SaurFtp with a key providing life advice.</b></p></div><p>(Click <a href="/uploads/images/figures/2015/03/Nigam-11-large.jpg" target="_top">here</a> to view a larger version of Figure 11.)</p><p>The result of the decryption is shown below:</p><pre class="programlisting">#### http://android.uyghur.dnsd.me/default.htm ####
android.uyghu?O????I?E[\U?SBQE???1?S??F?PFR???,U???
?JWNFNEJ?GLMT?RF?JM?P?XVQQZMPGG\TUT?T[P?ARBRWMP[Q?X&circ;T?A\K&circ;[GJ?SLNNJT
</pre><p>This result is split at &lsquo;####&rsquo;, with the first half of the split serving as the C&amp;C server address from where the bot acquires the address of an FTP server to which all the collected information is finally uploaded.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2617007"></a>Android/JSmsHider.A</h3></div></div></div><p><span class="emphasis"><em>sha256sum: 522e7ded785cfedb 5e5200bcf29be072d4e16ba5868b83dcf729d769231303fb</em></span></p><p>This variant DES encrypts values of the POST parameters, i.e. the collected data, in traffic sent to the C&amp;C, as can be seen from the code shown in <a href="#figure.12">Figure 12</a>.</p><div class="figure"><a id="figure.12"></a><div class="mediaobject"><img alt="Android/JSmsHider.A DES encrypts traffic to C&amp;C." src="/uploads/images/figures/2015/03/Nigam-12.jpg" /></div><p class="title"><b>Figure&nbsp;12.&nbsp;Android/JSmsHider.A DES encrypts traffic to C&amp;C.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4019571"></a>Android/DroidKungFu.E</h3></div></div></div><p><span class="emphasis"><em>sha256sum: 66d90617f49aa2449e338455d3b9ce852c2ca45d5460c1e9e40bb050333b7dfb</em></span></p><p>This bot variant contains an encrypted binary in the package assets under the name WebView.db.init. The file is decrypted using AES with a hard-coded key, as shown in <a href="#figure.13">Figure 13</a>. The resulting decrypted file is an ELF binary which is then executed and communicates with the C&amp;C, downloading other packages and installing them.</p><div class="figure"><a id="figure.13"></a><div class="mediaobject"><img alt="AES decryption routine in Android/KungFu.E. The byte array WP contains the hard-coded key." src="/uploads/images/figures/2015/03/Nigam-13.jpg" /></div><p class="title"><b>Figure&nbsp;13.&nbsp;AES decryption routine in Android/KungFu.E. The byte array WP contains the hard-coded key.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3700647"></a>Android/DroidKungFu.F, .G</h3></div></div></div><p><span class="emphasis"><em>sha256sum: 6c4aebf5043ea6129122ebf482366c9f7cb5fbe02e2bb776345d32d89b77a2e0</em></span></p><p>These variants make use of Java code from a native library in order to drop an executable onto a rooted <span class="emphasis"><em>Android</em></span> device. The native library contains encrypted strings that are first decrypted before the library can drop the malicious executable. The decryption scheme used is a bitwise NOT operation on each byte of the encrypted string. This can be seen in the native library&rsquo;s <span class="emphasis"><em>IDA</em></span> disassembly shown in <a href="#figure.14">Figure 14</a>.</p><div class="figure"><a id="figure.14"></a><div class="mediaobject"><img alt="Bitwise NOT decryption of strings in native libraries used by Android/DroidKungfu.F, G." src="/uploads/images/figures/2015/03/Nigam-14.jpg" /></div><p class="title"><b>Figure&nbsp;14.&nbsp;Bitwise NOT decryption of strings in native libraries used by Android/DroidKungfu.F, G.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3752054"></a>Android/Wroba.I</h3></div></div></div><p><span class="emphasis"><em>sha256sum: b103f3897b1619dee157e62a1737e864452a85bab613ad971ac6193b3f6a4834</em></span></p><p>This variant hides its main malicious activity within a package that is encrypted and hidden within itself. The inner malicious package is present in the original package as an asset file and is decrypted using DES before it can be loaded and the malicious functions called. The implementation of this decryption and class loading can be seen in the code in <a href="#figure.15">Figure 15</a>. The code in the figure shows the DES decryption of an asset file &lsquo;ds&rsquo; using the key &lsquo;gjaoun&rsquo;. The decryption results in an <span class="emphasis"><em>Android</em></span> package that is saved in the package directory as &lsquo;x.zip&rsquo; and loaded using the following command:</p><pre class="programlisting">localDexFile = (DexFile)Class.forName(&ldquo;dalvik.system
.DexFile&rdquo;).getMethod(&ldquo;loadDex&rdquo;, arrayOfClass)
.invoke(null, arrayOfObject);
</pre><p>This invokes the &lsquo;dalvik.system.DexFile.loadDex()&rsquo; function using reflection, a technique that is commonly used to hide function calls.</p><div class="figure"><a id="figure.15"></a><div class="mediaobject"><img alt="Decryption and loading of an inner malicious package by Android/Wroba.I." src="/uploads/images/figures/2015/03/Nigam-15.jpg" /></div><p class="title"><b>Figure&nbsp;15.&nbsp;Decryption and loading of an inner malicious package by Android/Wroba.I.</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4000978"></a>Unusual attack vectors</h2></div></div></div><p>Most mobile malware follows the classic method of uploading trojanized versions of legitimate applications to <span class="emphasis"><em>Android</em></span> markets (official or third-party/non-market) in order to propagate in the wild.</p><p>It must be mentioned that installation of any application that doesn&rsquo;t originate from the official <span class="emphasis"><em>Google Play Store</em></span> requires users to have the &lsquo;Allow Installation of non-Market Applications&rsquo; option checked in the phone&rsquo;s application settings. If this is not already the case, the user has to go through the extra step of checking this option before a &lsquo;non-market&rsquo; application can be installed.</p><p>Some examples detailed below deviate from the &lsquo;norm&rsquo; of passing through an <span class="emphasis"><em>Android</em></span> market and instead use unusual attack vectors for distribution.</p><div class="itemizedlist"><ul type="disc"><li><p>Android/NotCompatible.A: These variants are mostly served by means of malicious iframes on compromised websites. An unsuspecting user visiting such a compromised website would automatically have the malware downloaded to his/her phone. However, installation of the malware would still require user intervention.</p></li><li><p>Android/Chuli.A: This variant was touted as the first <span class="emphasis"><em>Android</em></span> malware to be delivered using a targeted attack [<span class="citation"><a href="#citation.14">14</a></span>]. It was sent as an email attachment to the accounts of Tibetan human rights advocates and activists in an email regarding the World Uyghur Congress (WUC) that took place in Geneva from 11&ndash;13 March 2013. The malware collected contact, location and received SMS information, as well as call records from the infected phones. This spyware functionality combined with its targeted nature, led to suspicions of political motives behind the malware.</p></li><li><p>Android/FakePlay.C: This variant was interesting for its ability to propagate from an infected PC to a mobile phone connected to it in USB mode. The attack vector was thus from PC to mobile &ndash; the inverse of that employed by Android/Claco.A. The PC malware propagating this mobile bot variant has been detected as W32/BackDoor.VX!tr by <span class="emphasis"><em>Fortinet</em></span>. This <span class="emphasis"><em>Windows</em></span> malware made use of <span class="emphasis"><em>Android</em></span>&rsquo;s Debug Bridge [<span class="citation"><a href="#citation.15">15</a></span>] for communication between the PC and the connected mobile device and for installation of the mobile malware.</p></li><li><p>Android/Xsser.A: This variant, discovered in 2014, was uniquely served via links in messages on the mobile messaging service <span class="emphasis"><em>WhatsApp</em></span>. In particular, it was sent to several participants of the 2014 Hong Kong protests in September 2014 as part of the &lsquo;Occupy Central&rsquo; pro-democracy civil disobedience campaign. The <span class="emphasis"><em>WhatsApp</em></span> message provided a link that claimed to be &lsquo;designed by CODE4HK for the coordination of OCCUPYCENTRAL&rsquo; [<span class="citation"><a href="#citation.16">16</a></span>], however the shortened link led to a site with a Chinese TLD, with the URL deliberately made to look like a legitimate Code4HK link. This case, once again, led to suspicions of political motives behind the malware. An <span class="emphasis"><em>iOS</em></span> variant of the same malware was found on the C&amp;C with which the <span class="emphasis"><em>Android</em></span> trojan communicates, but no reports were received of the <span class="emphasis"><em>iOS</em></span> variant being distributed in the wild.</p></li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2676424"></a>Statistics</h2></div></div></div><p>This section focuses on statistics based on the different properties of the bot variants detailed in the inventory.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3608933"></a>C&amp;C channel used</h3></div></div></div><p><a href="#figure.16">Figure 16</a> shows the kind of channel used for communication with the C&amp;C by different bot variants. Of the 43 variants that make use of HTTP, <a href="#figure.17">Figure 17</a> shows a plot of the number of variants that make use of HTTP communication to the standard port, i.e. 80, vs. those that use a non-standard port.</p><div class="figure"><a id="figure.16"></a><div class="mediaobject"><img alt="C&amp;C channels used by different bot variants. (1Variants using HTTP or HTTPS; 2Variants using both HTTP and SMS as C&amp;C channels.)" src="/uploads/images/figures/2015/03/Nigam-16.jpg" /></div><p class="title"><b>Figure&nbsp;16.&nbsp;C&amp;C channels used by different bot variants. (<sup>1</sup>Variants using HTTP or HTTPS; <sup>2</sup>Variants using both HTTP and SMS as C&amp;C channels.)</b></p></div><div class="figure"><a id="figure.17"></a><div class="mediaobject"><img alt="Ports used by variants using an HTTP C&amp;C channel. (1These two variants used HTTPS and HTTP with TOR respectively.)" src="/uploads/images/figures/2015/03/Nigam-17.jpg" /></div><p class="title"><b>Figure&nbsp;17.&nbsp;Ports used by variants using an HTTP C&amp;C channel. (<sup>1</sup>These two variants used HTTPS and HTTP with TOR respectively.)</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4598843"></a>Information leaked by default</h3></div></div></div><p><a href="#figure.18">Figure 18</a> plots what information is leaked by default against the number of variants. Information leaked by default refers to data that is sent simply upon launching the malware, without the receipt of any command from the botmaster.</p><div class="figure"><a id="figure.18"></a><div class="mediaobject"><img alt="Information leaked by default by different variants. (1This information covers everything accessible through the &lsquo;android.os.Build&rsquo; class.)" src="/uploads/images/figures/2015/03/Nigam-18.jpg" /></div><p class="title"><b>Figure&nbsp;18.&nbsp;Information leaked by default by different variants. (<sup>1</sup>This information covers everything accessible through the &lsquo;android.os.Build&rsquo; class.)</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2305903"></a>Device administrator privileges</h3></div></div></div><p>Device administration is a feature available on devices that run an <span class="emphasis"><em>Android</em></span> version &gt;= 2.2. This feature is available by means of an API [<span class="citation"><a href="#citation.17">17</a></span>] that mainly provides device administration features at the system level. It was introduced mainly to facilitate the development of security-aware applications. However, it is also interesting to attackers for the escalated rights it confers on an application.</p><p>The most common motivation seen for its use in malware is to make uninstallation of the malware tricky. If the user grants device administrator privileges to an application after installation, it can only be uninstalled if its corresponding device administrator is deactivated from the phone&rsquo;s &lsquo;Location &amp; security&rsquo; settings menu. Without knowledge of this information, a user could assume the application in question is uninstallable.</p><p><a href="#figure.19">Figure 19</a> shows the percentage of bot variants studied that request these privileges from the user after installation.</p><div class="figure"><a id="figure.19"></a><div class="mediaobject"><img alt="Percentage of variants requesting device administrator privileges." src="/uploads/images/figures/2015/03/Nigam-19.jpg" /></div><p class="title"><b>Figure&nbsp;19.&nbsp;Percentage of variants requesting device administrator privileges.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2305906"></a>Main motivation</h3></div></div></div><p>During classification of variants based upon their motives, the lines between different categories can become blurred and it can generally be assumed that they all finally merge towards monetary gain. For the purposes of this paper, the most evident motive was given preference.</p><p><a href="#figure.20">Figure 20</a> shows a plot based on the main motives for the creation of the different bot variants, surmised based upon the bots&rsquo; functionalities.</p><div class="itemizedlist"><ul type="disc"><li><p>Spying/data stealing: This category includes all bot variants that also had &lsquo;SMS/mTAN stealing&rsquo; as their main motivation.</p></li><li><p>Financial: This category includes bot variants that rely on sending SMS to premium phone numbers in order to make money, as well as ransomware.</p></li><li><p>Propagation of possible malware: All variants classified in this category either have the ability to download and install new packages onto an infected phone or they send SMS messages containing links pointing to possible malware to the contacts saved on the infected phone. The malware Android/Claco, which can infect a PC via USB, also falls under this category.</p></li></ul></div><div class="figure"><a id="figure.20"></a><div class="mediaobject"><img alt="Main motives behind creation of bot variants." src="/uploads/images/figures/2015/03/Nigam-20.jpg" /></div><p class="title"><b>Figure&nbsp;20.&nbsp;Main motives behind creation of bot variants.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4318839"></a>Signing certificates</h3></div></div></div><p><a href="#figure.21">Figure 21</a> plots the number of variants against the certificates used to sign one sample of each. The certificates have been classified under three categories.</p><div class="itemizedlist"><ul type="disc"><li><p>The Android Developer Certificate corresponds to the certificate that comes with the Android SDK. It can be identified by the following values:</p><pre class="programlisting">Owner: CN=Android Debug, O=Android, C=US
Issuer: CN=Android Debug, O=Android, C=US
</pre></li><li><p>A custom certificate describes a developer-specific certificate. An example is given below:</p><pre class="programlisting">Owner: CN=Yaba
Issuer: CN=Yaba
Serial number: 4fc1f17d
Valid from: Sun May 27 11:18:53 CEST 2012
until: Sat May 19 11:18:53 CEST 2046
</pre></li><li><p>Several variants were found to be signed using a certificate like the one seen below and have hence been grouped under a category of their own.</p><pre class="programlisting">Owner: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ce8b838f87828f8a8a9c8b9d9df3afa0aabca1a7aa8eafa0aabca1a7aae0ada1a3">[email&#160;protected]</a>,
CN=Android, OU=Android, O=Android,
L=Mountain View, ST=California, C=US
Issuer: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1b5e565a52575a5f5f495e4848267a757f6974727f5b7a757f6974727f35787476">[email&#160;protected]</a>,
CN=Android, OU=Android, O=Android,
L=Mountain View, ST=California, C=US
</pre></li></ul></div><div class="figure"><a id="figure.21"></a><div class="mediaobject"><img alt="Certificates used for signing different bot variants." src="/uploads/images/figures/2015/03/Nigam-21.jpg" /></div><p class="title"><b>Figure&nbsp;21.&nbsp;Certificates used for signing different bot variants.</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2676427"></a>Conclusion</h2></div></div></div><p>In this paper, I have shown that malware authors continue to be driven mainly by motives relating to spying, financial gain and further propagation of malware. The precedence of financial motives over spying in the statistics could be explained by the fact that the statistics don&rsquo;t take into account how many successful infections of each variant exist in the wild.</p><p>Based on the statistics collected and the variants described, it can be concluded that although attackers&rsquo; motives haven&rsquo;t changed much, the strategies used in writing malware continue to evolve, be it the employment of anti-debugging tricks or the increasing use of encryption and obfuscation in new malware. It has also been shown through examples that mobile bot variants are still relatively easy to take apart, and have yet to achieve the level of complexity of their PC counterparts.</p><p>More importantly, the emergence of new and innovative attack vectors &ndash; including attacks that can move from one attack surface to another (Android/Claco.A, Android/FakePlay.C) &ndash; provides a multi-level threat. Combining that with the fact that mobile phones are increasingly being used for diverse purposes, e.g. to control smart TVs, interfacing with fitness trackers, or interfacing with any other Internet-connected device, we can expect to see more attacks spanning different attack surfaces.</p><p>Finally, with the use of multiple C&amp;C channels by a single bot variant and remotely configurable C&amp;C addresses, mobile botnets are becoming more resilient to takedown. All these factors hint at the need for systems/applications designed specifically for the detection and takedown of mobile botnets to be put in place &ndash; which is where this paper aims to help.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4388443"></a>Acknowledgements</h2></div></div></div><p>I would like to thank Axelle Apvrille and Guillaume Lovet for their help with writing this paper. Many thanks also to all authors whose work was referenced in the paper.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3281629"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Fortinet, 2014. <span class="bibliosource"><a href="http://www.fortinet.com/sites/default/files/whitepapers/10-Years-of-Mobile-Malware-Whitepaper.pdf" target="_blank">http://www.fortinet.com/sites/default/files/whitepapers/10-Years-of-Mobile-Malware-Whitepaper.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Apvrille, A. Symbian worm Yxes: Towards mobile botnets? <span class="bibliosource"><a href="http://www.fortiguard.com/files/EICAR2010 Symbian-Yxes Towards-Mobile-Botnets.pdf" target="_blank">http://www.fortiguard.com/files/EICAR2010 Symbian-Yxes Towards-Mobile-Botnets.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Porras, P.; Saidi, H.; Yegneswaran, V. An analysis of the ikee.b (duh) iphone botnet. <span class="bibliosource"><a href="http://mtc.sri.com/iPhone/" target="_blank">http://mtc.sri.com/iPhone/</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Mulliner, C.; Seifert, J.-P. Rise of the iBots: 0wning a Telco Network. In Proceedings of the 5th IEEE International Conference on Malicious and Unwanted Software (Malware). <span class="bibliosource"><a href="https://mulliner.org/collin/academic/publications/ibots_MALWARE2010.pdf" target="_blank">http://mulliner.org/collin/academic/publications/ibots_MALWARE2010.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] Xiang, C.; Binxing, F.; Lihua, Y.; Xiaoyi, L.; Tianning, Z. Andbot: Towards Advanced Mobile Botnets. <span class="bibliosource"><a href="https://www.usenix.org/legacy/events/leet11/tech/slides/xiang.pdf" target="_blank">https://www.usenix.org/legacy/events/leet11/tech/slides/xiang.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] Weidman, G. Transparent Botnet Control for Smartphones Over SMS. <span class="bibliosource"><a href="http://issa-dc.org/presentations/04192011_weidman_smartphone_botnets.pdf" target="_blank">http://issa-dc.org/presentations/04192011_weidman_smartphone_botnets.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] Mulliner, C. Fuzzing the Phone in Your Phone. <span class="bibliosource"><a href="https://www.blackhat.com/presentations/bh-usa-09/MILLER/BHUSA09-Miller-FuzzingPhone-SLIDES.pdf" target="_blank">http://www.blackhat.com/presentations/bh-usa-09/MILLER/BHUSA09-Miller-FuzzingPhone-SLIDES.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] Zeng, Y.; Shin, K. G.; Hu, X. Design of SMS commanded-and-controlled and p2p-structured mobile bot-nets. <span class="bibliosource"><a href="http://www-personal.umich.edu/~gracez/mobilebotnet.pdf" target="_blank">http://www-personal.umich.edu/~gracez/mobilebotnet.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] Android. LocationManager. <span class="bibliosource"><a href="https://developer.android.com/reference/android/location/LocationManager.html#requestLocationUpdates%28java.lang.String,%20long,%20float,%20android.location.LocationListener%29" target="_blank">https://developer.android.com/reference/android/location/LocationManager.html#requestLocationUpdates%28java.lang.String,%20long,%20float,%20android.location.LocationListener%29</a></span>.</p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] Android SDK download. <span class="bibliosource"><a href="https://developer.android.com/sdk/index.html" target="_blank">https://developer.android.com/sdk/index.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.11"></a><p class="bibliomixed">[11] DGODDARD. Changing the IMEI, Provider, Model, and Phone Number in the Android Emulator. <span class="bibliosource"><a href="http://vrt-blog.snort.org/2013/04/changing-imei-provider-model-and-phone.html" target="_blank">http://vrt-blog.snort.org/2013/04/changing-imei-provider-model-and-phone.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.12"></a><p class="bibliomixed">[12] Tascudap string decryption. <span class="bibliosource"><a href="https://github.com/slojo/Decryptors/blob/master/Tascudap decrypt.java" target="_blank">https://github.com/slojo/Decryptors/blob/master/Tascudap decrypt.java</a></span>.</p></div><div class="bibliomixed"><a id="citation.13"></a><p class="bibliomixed">[13] Vdloader string decryption. <span class="bibliosource"><a href="https://github.com/slojo/Decryptors/blob/master/Vdloader decrypt.java" target="_blank">https://github.com/slojo/Decryptors/blob/master/Vdloader decrypt.java</a></span>.</p></div><div class="bibliomixed"><a id="citation.14"></a><p class="bibliomixed">[14] Gallagher, S. First targeted attack to use Android malware discovered. <span class="bibliosource"><a href="https://arstechnica.com/security/2013/03/first-targeted-attackto-use-android-malware-discovered/" target="_blank">http://arstechnica.com/security/2013/03/first-targeted-attackto-use-android-malware-discovered/</a></span>.</p></div><div class="bibliomixed"><a id="citation.15"></a><p class="bibliomixed">[15] Android. Android debug bridge. <span class="bibliosource"><a href="https://developer.android.com/tools/help/adb.html" target="_blank">https://developer.android.com/tools/help/adb.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.16"></a><p class="bibliomixed">[16] Code4HK. Fake code4hk mobile app. <span class="bibliosource"><a href="https://code4hk.hackpad.com/Fake-Code4HK-Mobile-App-HQXXrylI6Wi" target="_blank">https://code4hk.hackpad.com/Fake-Code4HK-Mobile-App-HQXXrylI6Wi</a></span>.</p></div><div class="bibliomixed"><a id="citation.17"></a><p class="bibliomixed">[17] Android. Device administration. <span class="bibliosource"><a href="https://developer.android.com/guide/topics/admin/device-admin.html" target="_blank">http://developer.android.com/guide/topics/admin/device-admin.html</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2015/vb201503-mobile-botnets.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=A timeline of mobile botnets&url=https://www.virusbulletin.com/virusbulletin/2015/03/timeline-mobile-botnets"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2015/03/timeline-mobile-botnets'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2015/03/timeline-mobile-botnets&title=A timeline of mobile botnets"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2015/03/timeline-mobile-botnets&t=A timeline of mobile botnets"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2015/03/timeline-mobile-botnets"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>