<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2017 paper: Android reverse engineering tools: not the usual suspects</title>
<meta name="description" content="In the Android security field, all reverse engineers will probably have used some of the most well-known analysis tools such as apktool, smali, baksmali, dex2jar, etc. These tools are indeed must‑haves for Android application analysis. However, there are other interesting tools and issues, which are seldom covered in conferences, and these are what this paper is about." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 5647;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-vb2017-paper-android-reverse-engineering-tools-not-usual-suspects"></a>VB2017 paper: Android reverse engineering tools: not the usual suspects</h1>
<h3><a class="chapter" name="h3-axelle-apvrille"></a>Axelle Apvrille</h3>
<p>Fortinet, France</p>
<p><em>Copyright © 2017 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-11295" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-11295" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-1-introduction">1. Introduction</a><br /> <a class="toc-level2" href="#h2-2-docker-image-android-reverse-engineering">2. A Docker image for Android reverse engineering</a><br /> <a class="toc-level3" href="#h3-21-why-docker-image">2.1 Why a Docker image?</a><br /> <a class="toc-level3" href="#h3-22-tricks-image-creation">2.2 Tricks for image creation</a><br /> <a class="toc-level4" href="#h4-221-docker-and-gui">2.2.1 Docker and GUI</a><br /> <a class="toc-level4" href="#h4-222-two-commands">2.2.2 Two commands</a><br /> <a class="toc-level4" href="#h4-223-passwords">2.2.3 Passwords</a><br /> <a class="toc-level4" href="#h4-224-android-emulator">2.2.4 Android emulator</a><br /> <a class="toc-level4" href="#h4-225-disk-space">2.2.5 Disk space</a><br /> <a class="toc-level2" href="#h2-3-jeb2-script">3. JEB2 script</a><br /> <a class="toc-level3" href="#h3-31-setting-jeb2-scripts">3.1 Setting up JEB2 for scripts</a><br /> <a class="toc-level3" href="#h3-32-de-obfuscator-script-goals">3.2 De-obfuscator script goals</a><br /> <a class="toc-level3" href="#h3-33-script-development">3.3 Script development</a><br /> <a class="toc-level2" href="#h2-4-debugging">4. Debugging</a><br /> <a class="toc-level3" href="#h3-41-codeinspect">4.1 CodeInspect</a><br /> <a class="toc-level3" href="#h3-42-jeb2">4.2 JEB2</a><br /> <a class="toc-level3" href="#h3-43-conclusion">4.3 Conclusion</a><br /> <a class="toc-level2" href="#h2-5-https-flow-inspection">5. HTTPS flow inspection</a><br /> <a class="toc-level2" href="#h2-6-radare2">6. Radare2</a><br /> <a class="toc-level3" href="#h3-61-dalvik-support">6.1 Dalvik support</a><br /> <a class="toc-level3" href="#h3-62-commands-reverse-dex">6.2 Commands to reverse a DEX</a><br /> <a class="toc-level3" href="#h3-63-scripting">6.3 Scripting</a><br /> <a class="toc-level3" href="#h3-64-discussion">6.4 Discussion</a><br /> <a class="toc-level2" href="#h2-7-conclusiontake-aways">7. Conclusion/take-aways</a><br /> <a class="toc-level2" href="#h2-references">References</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>In the <em>Android</em> security field, all reverse engineers will probably have used some of the most well-known analysis tools such as <em>apktool</em>, <em>smali</em>, <em>baksmali</em>, <em>dex2jar</em>, etc. These tools are indeed must‑haves for <em>Android</em> application analysis. However, there are other interesting tools and issues, which are seldom covered in conferences, and these are what this paper is about.</p>
<p>The paper discusses five independent points: (1) how to share a reverse engineering environment for <em>Android</em> application analysis, (2) how to write <em>JEB2</em> scripts, (3) the status of <em>Android</em> debuggers, (4) how to read TLS encrypted communications, and (5) how to use <em>Radare2</em> on Dalvik.</p>
<p> </p>
<h2><a class="chapter" name="h2-1-introduction"></a>1. Introduction</h2>
<p>The reverse engineering of <em>Android</em> applications is a topic that is now widely covered on the Internet. There are several tutorials, videos and articles explaining how to do it [<a href="#ref1">1</a>, <a href="#ref2">2</a>, <a href="#ref3">3</a>, <a href="#ref4">4</a>]. All of these present approximately the same steps (what is an APK, what is an <em>Android</em> manifest, how to unpack, reading <em>smali</em>, decompiling, re-assembling APKs) and use the same tools (<em>apktool</em>, <em>smali</em>/<em>baksmali</em>, <em>AXMLPrinter</em>, <em>Java</em> <em>Decompiler</em>, <em>Androguard</em>). As a matter of fact, this approach is perfect, the tools are very handy, and I do encourage reading those links.</p>
<p>Those working in the field (e.g. anti-virus analysts) also face many other advanced issues, one of which is the need to unpack or de-obfuscate advanced samples. This, too, has been covered several times by researchers [<a href="#ref5">5</a>, <a href="#ref6">6</a>, <a href="#ref7">7</a>, <a href="#ref8">8</a>]. However, several other questions remain unanswered. In this paper, we tackle the following:</p>
<ul>
<li>How to share a reverse engineering environment for <em>Android</em> applications with co-workers.</li>
<li>How to script <em>Android</em> reverse engineering tools to ease sample analysis.</li>
<li>Whether it is possible to debug a suspicious application, set breakpoints and run it step by step to understand what is happening.</li>
<li>With <em>Android</em> application developers now becoming more and more au fait with the use of HTTPS, we consider how we can inspect the SSL/TLS encrypted flows of applications.</li>
<li>Whether we can go beyond the beaten track and use disassemblers other than the usual <em>apktool</em>, <em>baksmali</em>.</li>
</ul>
<p>This paper tackles these independent issues from the angle of a mobile anti-virus analyst. However, the techniques apply to the reversing of any <em>Android</em> application. Each issue is discussed in its own section.</p>
<p> </p>
<h2><a class="chapter" name="h2-2-docker-image-android-reverse-engineering"></a>2. A Docker image for Android reverse engineering</h2>
<h3><a class="chapter" name="h3-21-why-docker-image"></a>2.1 Why a Docker image?</h3>
<p>An anti-virus analyst must inspect each suspicious sample in a clean and fresh environment. Occasionally, you also need to share a sample with a co-worker to get his/her advice on a specific point. Alas, setting up a reverse engineering environment is time consuming. It is not, strictly speaking, difficult to do, but there are many different tools to install (<em>apktool</em>, <em>baksmali</em>, <em>Java Decompiler</em>, <em>AXMLPrinter</em>, <em>Android</em> <em>emulator</em>...), each with different set-up steps, and no automated procedures.</p>
<p>Consequently, a portable reverse engineering environment for <em>Android</em> applications would be most helpful. To create such an environment, some initiatives have proposed virtual machines with all the necessary tools. For example, there is the <em>Android Reverse Engineering</em> (<em>ARE</em>) VM [<a href="#ref9">9</a>] or the <em>Androl4b</em> VM [<a href="#ref10">10</a>]. The downside of VMs is that you must download gigabytes of information (an entire <em>Linux</em> host as well as <em>Android</em> tools), and often the environment you get is obsolete because the VM hasn't been maintained.</p>
<p>To deal with these issues, I propose an <em>Android</em> reverse engineering <em>Docker</em> image. <em>Docker</em> [<a href="#ref11">11</a>] is 'an open-source project that automates the deployment of applications inside software containers' [<a href="#ref12">12</a>]. Compared to a full VM, the download size is reduced because:</p>
<ol>
<li><em>Docker</em> containers rely on the underlying OS of the host and need not contain a full OS [<a href="#ref13">13</a>].</li>
<li><em>Docker</em> images are made of several layers, which are like download chunks. Those layers can be re-used across images, so that if a given image uses layers A and B, and another image uses B and C, then B does not need to be re-downloaded.</li>
</ol>
<p>My <em>Docker</em> image is uploaded to the <em>Docker Hub</em> and can be downloaded directly using the <em>Docker</em> command <span class="monospace">docker pull</span>. Precisely, the steps to use my environment are:</p>
<ol>
<li>Install <em>Docker</em> (if you haven't done so already).</li>
<li>Retrieve the <em>Android</em> RE <em>Docker</em> image:
<pre>docker pull cryptax/android-re</pre>
</li>
<li>Launch one (or multiple) container(s):
<pre>docker run -d options cryptax/android-re</pre>
</li>
</ol>
<p>You immediately get an apparently separate <em>Linux</em> host which you can SSH into or use VNC (desktop sharing) and get access to <em>Android</em> reversing tools and emulators.</p>
<p>The use of a <em>Docker</em> image also improves the maintenance issue. Indeed, a <em>Docker</em> image is built from a Dockerfile, which is like a 'source script' to create the image. For instance, the Dockerfile specifies each package to install and the commands necessary for the set-up of the container. This Dockerfile is shared at [<a href="#ref14">14</a>] and you can freely customize it to your own needs, or update it to this or that newer version.</p>
<h3><a class="chapter" name="h3-"></a> </h3>
<h3><a class="chapter" name="h3-22-tricks-image-creation"></a>2.2 Tricks for image creation</h3>
<p>In this subsection, I share a few tricks I used to set up the Dockerfile for my <em>Docker</em> image.</p>
<h4><a class="chapter" name="h4-"></a> </h4>
<h4><a class="chapter" name="h4-221-docker-and-gui"></a>2.2.1 Docker and GUI</h4>
<p><em>Docker</em> is particularly well suited to creating compartments containing daemons, services, web servers, etc. Surprisingly, support for graphical applications isn't straightforward, and there are many questions and blog posts on that [<a href="#ref15">15</a>]. Basically, the <em>Docker</em> container is seen as a remote Unix host, and there are three alternatives (see <a href="#table1">Table 1</a>):</p>
<ol>
<li><strong>Share your display with the container</strong>. Run <span class="monospace">xhost +</span>. Then launch the container, and in the options be sure to share the DISPLAY environment variable and X11 sockets:
<pre class="prettyprint">docker run -d -e DISPLAY=$DISPLAY -v</pre>
<img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow.jpg" width="30" height="15" />
<pre class="prettyprint">/tmp/.X11-unix:/tmp/.X11-unix</pre>
<img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow.jpg" width="30" height="15" />
<pre class="prettyprint">OTHER-OPTIONS --name mycontainer</pre>
<img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow.jpg" width="30" height="15" />
<pre class="prettyprint">cryptax/android-re</pre>
</li>
<li><strong>Use X forwarding in SSH</strong>. This relies on X11 once again. When you connect to the container via SSH, specify option -X to enable X11 forwarding.</li>
<li><strong>Use VNC</strong>. In this case, the display of graphical applications is handled by the container. The container contains a VNC server (which is a graphical desktop sharing system). When you use the container, you connect a VNC client to the container's VNC server and share its desktop.<br />The <em>Android</em> emulator requires GLX support. Consequently, the container must be configured with an X11 display server supporting GLX. For example:
<pre class="prettyprint">Xvfb :1 +extension GLX +render -noreset</pre>
<img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow.jpg" width="30" height="15" />
<pre class="prettyprint">-screen 0 1280x1024x24&amp;</pre>
<img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" />
<pre class="prettyprint">DISPLAY=:1 /usr/bin/xfce4-session</pre>
<img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" />
<pre class="prettyprint">&gt;&gt; /root/xsession.log 2&gt;&amp;1 &amp;</pre>
</li>
</ol>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Solution</strong></td>
<td><strong>Pros</strong></td>
<td><strong>cons</strong></td>
</tr>
<tr>
<td>Share display</td>
<td>Lightweight</td>
<td>Only works with hosts that support X11 (and sometimes bugs)</td>
</tr>
<tr>
<td>SSH X forwarding</td>
<td>Lightweight</td>
<td>Won't work on <em>Windows</em>, bug on <em>Mac</em></td>
</tr>
<tr>
<td>VNC viewer</td>
<td>Need to install vncviewer</td>
<td>Screen resolution set by the container. Container windows appear inside the VNC viewer window. Container needs to contain a window manager and X11 server.</td>
</tr>
</tbody>
</table>
<p class="centered-caption"><a class=" anchor" name="table1"></a>Table 1: Pros and cons of solutions for running GUI apps in Docker.</p>
<h4><a class="chapter" name="h4-"></a> </h4>
<h4><a class="chapter" name="h4-222-two-commands"></a>2.2.2 Two commands</h4>
<p>So, if we want to be flexible, our <em>Docker</em> image is going to need (1) an SSH server and (2) a VNC server in the container. Normally, a server is started in the Dockerfile via a CMD. For example:</p>
<p class="prettyprint">CMD ["/usr/sbin/sshd", "-D"]</p>
<p>If we specify another CMD for VNC, we are in for a surprise: Dockerfiles do not support multiple CMDs. The last CMD supersedes all previous ones. The recommended solution is to use supervisor [<a href="#ref16">16</a>], a process control system.</p>
<p>In our case, we configure supervisor to start both SSH and VNC, and run supervisord. In <a href="#listing1">Listing 1</a>, lines 4 and 5 configure the SSH server. Lines 6 and 7 launch a personal script, <span class="monospace">startXvfb.sh</span>, which starts both Xvfb and the VNC server.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/7215/0876/5998/Apvrille-vb2017-listing1.jpg" alt="Apvrille-vb2017-listing1.jpg" width="600" height="421" /><span class="centered-caption"><a class=" anchor" name="listing1"></a>Listing 1: Configuration of supervisor in a Dockerfile.</span></p>
<h4><a class="chapter" name="h4-"></a> </h4>
<h4><a class="chapter" name="h4-223-passwords"></a>2.2.3 Passwords</h4>
<p>The password for logging into the VNC server is hard coded in the Dockerfile (see <a href="#listing2">Listing 2</a>).</p>
<pre class="prettyprint">ENV VNC_PASSWORD "rootpass"<br />RUN x11vnc -storepasswd $VNC_PASSWORD</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow.jpg" width="30" height="15" /></p>
<pre class="prettyprint">˜/.vnc/passwd</pre>
<p class="centered-caption"><a class=" anchor" name="listing2"></a>Listing 2: Specifying a hard-coded password to VNC in the Dockerfile (use with care).</p>
<p>The SSH password is hard coded, too. As we wanted a simple environment, there is only one user, root. So root needs to be able to SSH. This is not possible by default; the SSH server configuration needs to be modified to authorize root login (see <a href="#listing3">Listing 3</a>).</p>
<pre class="prettyprint">RUN echo "root:$SSH_PASSWORD" | chpasswd<br />RUN sed -i 's/PermitRootLogin</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow.jpg" width="30" height="15" /></p>
<pre class="prettyprint">prohibit-password/PermitRootLogin</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow.jpg" width="30" height="15" /></p>
<pre class="prettyprint">yes/' /etc/ssh/sshd_config<br />RUN sed '<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="255665564056564c4a4b">[email&#160;protected]</a>\s*required\s*pam_loginui ┘</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow.jpg" width="30" height="15" /></p>
<pre class="prettyprint"><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="35511b465a75465046465c5a5b">[email&#160;protected]</a> optional</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" /></p>
<pre class="prettyprint"><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="0676676b596a69616f68736f622875694661">[email&#160;protected]</a>' -i /etc/pam.d/sshd</pre>
<p class="centered-caption"><a class=" anchor" name="listing3"></a>Listing 3: Allowing root login in the Dockerfile (use with care).</p>
<p>Note that this is something you might want to change for your own environment. The use of hard-coded passwords also means that the <em>Docker</em> container should <em>not</em> be made available publicly on the web.</p>
<h4><a class="chapter" name="h4-"></a> </h4>
<h4><a class="chapter" name="h4-224-android-emulator"></a>2.2.4 Android emulator</h4>
<p>An important step in the Dockerfile is the installation of an <em>Android</em> emulator. Normally, <em>Android</em> emulators are installed using a graphical tool, named <span class="monospace">android</span>. Actually, <span class="monospace">android</span> also works in the command line and can therefore be used in a Dockerfile. The steps are:</p>
<ol>
<li>Download the <em>Android</em> SDK, unzip it, and set up the path.
<pre class="prettyprint">RUN wget -q -O "/opt/tools-linux.zip"<br />
</pre>
<img style="float: left;" src="/files/cache/9c7fa3f90c2c536d9608f374c0b2e02c_f1996.jpg" alt="arrow" width="030" height="15" />
<pre class="prettyprint">https://dl.google.com/android/rep ┘<br />
</pre>
<img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" />
<pre class="prettyprint">ository/...<br />RUN unzip /opt/tools-linux.zip ...<br />...<br />ENV PATH $PATH:/opt:...</pre>
</li>
<li>Then, you can use <span class="monospace">android</span> to update the SDK tools, platform tools and build tools, get a version of <em>Android</em> and get a system image for a given architecture (e.g. ARM):
<pre class="prettyprint">RUN echo y | android update sdk</pre>
<img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" />
<pre class="prettyprint">--filter tools --no-ui --force -a</pre>
<pre class="prettyprint">RUN echo y | android update sdk</pre>
<img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" />
<pre class="prettyprint">--filter platform-tools --no-ui<br />--force -a</pre>
As the command line <span class="monospace">android</span> asks for user confirmation, <span class="monospace">echo y</span> is needed to run the command in the background with user input.</li>
<li>Create the Android Virtual Device (AVD)
<pre class="prettyprint">RUN echo n | android create avd</pre>
<img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" />
<pre class="prettyprint">--force --name AVDNAME --target</pre>
<img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" />
<pre class="prettyprint">ANDROID-VERSION --abi</pre>
<img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" />
<pre class="prettyprint">"default/armeabi-v7a"</pre>
</li>
<li>The last step is to export ports used by <em>Android</em> emulators. The first console port to be used by default is 5554. The <em>Docker</em> container must open that port so that you can telnet into the <em>Android</em> emulator console.</li>
</ol>
<h4><a class="chapter" name="h4-"></a> </h4>
<h4><a class="chapter" name="h4-225-disk-space"></a>2.2.5 Disk space</h4>
<p>Finally, disk space should be taken into account. If we configure numerous packages in the Dockerfile, the container will be huge, and we will gain little compared to using a VM. The Dockerfile needs to be set up only with what is used (you can customize mine to remove what you don't need). Additionally, it is good to clean up package caches. There are several best practices on the web explaining how to optimize one's Dockerfile [<a href="#ref17">17</a>].</p>
<p> </p>
<h2><a class="chapter" name="h2-3-jeb2-script"></a>3. JEB2 script</h2>
<p><em>JEB</em> is a graphical <em>Android</em> application decompiler, commercialized by <em>PNF Software</em>, and quite often used by people in the field. Similarly to <em>IDA Pro</em>, reverse engineering tasks can be scripted, since version 2.0.14 (<em>JEB2</em>), by Python code. It is particularly interesting to automate repeatable tedious tasks that must be performed for a given analysis. <em>PNF Software</em> provides documentation [<a href="#ref18">18</a>] and blog posts [<a href="#ref19">19</a>] to help write your first scripts, but the examples are too simple (print hello world) to assist the reverse engineer in real tasks.</p>
<p>This section explains how to implement a string de-obfuscator – a common requirement when reversing malicious samples – as a <em>JEB2</em> script, taking as example a sample of Android/Ztorg (sha256: 2c546ad7f102f2f345f30f556b8d8162bd365a7f1a52967fce906d46a2b0dac4).</p>
<p> </p>
<h3><a class="chapter" name="h3-31-setting-jeb2-scripts"></a>3.1 Setting up JEB2 for scripts</h3>
<p>The first preliminary step is installation. Not always so clear in the documentation, this is fortunately easy: first install Jython (Python for Java platforms), then put your script in the <span class="monospace">./JEB-HOME/scripts</span> directory. Also, make sure to bookmark the API reference [<a href="#ref20">20</a>], as this is a must-have for script development.</p>
<p> </p>
<h3><a class="chapter" name="h3-32-de-obfuscator-script-goals"></a>3.2 De-obfuscator script goals</h3>
<p>We notice that the Ztorg sample uses string obfuscation. The obfuscated strings are loaded as a byte array (with no apparent meaning) and decoded by a routine – specifically in this case by method <span class="monospace">a()</span> of class <span class="monospace">c</span> in package <span class="monospace">a.b</span> (the sample also obfuscates names, as you can see) – see <a href="#figure1">Figure 1</a>. The decoding routine has been reversed at [<a href="#ref21">21</a>].</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/1815/0901/3807/Apvrille-vb2017-Figure1.jpg" alt="Apvrille-vb2017-Figure1.jpg" width="840" height="108" /><span class="centered-caption"><a class=" anchor" name="figure1"></a>Figure 1: Android/Ztorg sample with the original obfuscated strings.</span></p>
<p>We want to find all classes that initialize such obfuscated strings and automatically de-obfuscate them. The result is displayed in <a href="#figure2">Figure 2</a>.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/7815/0901/3893/Apvrille-vb2017-Figure2.jpg" alt="Apvrille-vb2017-Figure2.jpg" width="435" height="119" /><span class="centered-caption"><a class=" anchor" name="figure2"></a>Figure 2: JEB2 script has de-obfuscated the strings.</span></p>
<p> </p>
<h3><a class="chapter" name="h3-33-script-development"></a>3.3 Script development</h3>
<p>We mentioned that the official documentation is too basic, nevertheless <em>PNF Software</em> provides several sample scripts on <em>GitHub</em> [<a href="#ref22">22</a>]. The closest to our needs is named <span class="monospace">JEB2JavaASTDecryptStrings.py</span> and serves as a base for our script.</p>
<p>My script is available at [<a href="#ref23">23</a>].</p>
<p>Basically, we keep the beginning of the example: imports, initialization of back-end engine, open first project and enumerate decompiled classes (see <a href="#listing4">Listing 4</a>). There are very few variations from the original script (class renaming, a few unnecessary lines removed) until that point (line 45 of <span class="monospace">JEB2JavaASTDecryptStrings.py</span> – which corresponds to line 35 of my own script).</p>
<pre class="prettyprint">self.units = RuntimeProjectUtil.findUnitsBy ┘</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" /></p>
<pre class="prettyprint">Type(prj, IJavaSourceUnit,</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" /></p>
<pre class="prettyprint">False)</pre>
<p class="centered-caption"><a class=" anchor" name="listing4"></a>Listing 4: Enumerating decompiled classes of a given project.</p>
<p>In the Ztorg sample, we notice that the strings to decompile are always located in static class constructors (see Listing 5).</p>
<p class="prettyprint">static {<br />b.a = c.a(new byte[]{15, 116, 8});<br />b.b = c.a(new byte[]{110, 114, 105, 111});<br />b.c = c.a(new byte[]{105, 4, 25, 8, 21,<br />,! 107, 8});<br />b.d = c.a(new byte[]{85, 29, 66});<br />}</p>
<p class="centered-caption"><a class=" anchor" name="listing5"></a>Listing 5: In Android/Ztorg, string de-obfuscation occurs in static constructors.</p>
<p>So, the first step is to locate the static constructor:</p>
<ol>
<li>1. Get the JEB2 object which represents the class:
<pre>javaClass = unit.getClassElement()</pre>
In the API, this returns an object of type <span class="monospace">IJavaClass</span> (see getClassElement in IJavaSourceUnit in the API).</li>
<li>Parse all methods of the class <span class="monospace">(getMethods())</span>.</li>
<li>Check that the name of the class corresponds to a static constructor. We can break afterwards.
<pre class="prettyprint">if m.getName() == '&lt;clinit&gt;'</pre>
</li>
</ol>
<p>Then, we need to find all lines in the static constructor which involve a call to the de-obfuscation routine. In <em>JEB2</em>, lines are more precisely statements. We parse the method's statements:</p>
<pre class="prettyprint">for statement in m.getBody():</pre>
<p>There are several types of statements: function calls, assignments, conditions, returns etc. In our sample, obfuscated strings appear in assignments. So, we filter assignment statements:</p>
<pre class="prettyprint">if statement.getElementType() ==</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" /></p>
<pre class="prettyprint">JavaElementType.Assignment:</pre>
<p>This is where it gets a bit tricky. The obfuscated strings appear in:</p>
<ol>
<li>Simple assignments.
<pre class="prettyprint">v = c.a(....)</pre>
The right side of the assignment, which we retrieve with a call such as<span class="monospace"> statement.getRight()</span>, is the call to the de-obfuscation routine. That's what we need to modify to
<pre class="monospace prettyprint">v = ''de-obfuscated''</pre>
</li>
<li>More complex assignments:
<pre class="prettyprint">v = new String(c.a(....))</pre>
<br />The right side of the assignment is not a call but a new, which contains a call to the de-obfuscation routine. We wish to transform this to something like:
<pre class="prettyprint">v = new String(''de-obfuscated'')</pre>
</li>
</ol>
<p>So, to check if a statement calls the de-obfuscation routine, we must:</p>
<ul>
<li>Check if the statement's getRight() is a call to our routine (case 1). We match the routine by checking its signature <span class="monospace">La/b/c;-&gt;a([B)Ljava/lang/String;</span> (remember, the decoding routine is <span class="monospace">a.b.c.a()</span>):
<pre>getMethod().getSignature()</pre>
</li>
<li>Otherwise, check the right part has sub elements that contain a call to our routine (case 2). We parse elements with
<pre class="prettyprint">for rightsub in statement.getRight().ge ┘</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" /></p>
<pre class="prettyprint">tSubElements():</pre>
</li>
</ul>
<p>When we have found such a statement, we need to de‑obfuscate. This is the point at which we call our de‑obfuscation method.</p>
<p>Finally, we could just print the result in the console, but even nicer, we want the de-obfuscated string to replace the part with <span class="monospace">c.a(...)</span>. This is done by a call to <span class="monospace">replaceSubElement()</span> at line 90 of <a href="#listing6">Listing 6</a>, where:</p>
<ul>
<li>elem is the right-hand part which contains the c.a(...), e.g. <span class="monospace">statement.getRight()</span>.</li>
<li>father is the element which contains that element. Either the right-hand side part of an upper level, or the statement, for example.</li>
</ul>
<p>The new de-obfuscated string is created with <span class="monospace">self.cstbuilder.createString()</span> (line 90) and the <em>JEB2</em> window is updated by notifying it (<span class="monospace">unit.notifyListeners()</span> - line 91).</p>
<pre class="prettyprint">90   father.replaceSubElement(elem,</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" /></p>
<pre class="prettyprint">  self.cstbuilder.createString(''.join(m ┘</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" /></p>
<pre class="prettyprint">  ap(chr,decbytes))))</pre>
<pre class="prettyprint">91   unit.notifyListeners(JebEvent(J.UnitChange))</pre>
<p class="centered-caption"><a class=" anchor" name="listing6"></a>Listing 6: Replacing the obfuscated string with the decoded one.</p>
<p> </p>
<h2><a class="chapter" name="h2-4-debugging"></a>4. Debugging</h2>
<p><em>Android</em> sample debugging is a dream for many reverse engineers. Especially on complicated samples, it is very handy to put a breakpoint on a critical line, run the code step by step, inspect (or even modify) variables and stack. As far as I know, there are two tools that allow this to be done at Dalvik level: <em>JEB2</em> (that we mentioned in Section 3) and <em>CodeInspect</em> [<a href="#ref24">24</a>].</p>
<p>I tried both <em>JEB2</em> version 2.2.11 (the latest version at the time of writing this paper) and <em>CodeInspect</em> (licensed demo of Oct 2016). The results are promising for the future, but not yet mature.</p>
<p> </p>
<h3><a class="chapter" name="h3-41-codeinspect"></a>4.1 CodeInspect</h3>
<p>The main issue I faced with <em>CodeInspect</em> was its weight. It took me close to three minutes to open a debugger session. Nevertheless, if you are patient enough, it works well, and I successfully debugged an instance of Riskware/InnerSnail!Android (sha256: c5c11408483eb87781af30280b2878890f5741fe63d569ae9<br />e3689c1e550eaa4 - see <a href="#figure3">Figure 3</a>).</p>
<p><a class="zoom-img" title="Figure 3: A debug session with CodeInspect, where we inspect the content of a variable." href="/files/7015/0901/8534/Apvrille-vb2017-Figure3.jpg"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/5a6532ab528d1b965e7aeddd85c792fc_f2007.jpg" alt="Apvrille-vb2017-Figure3.jpg" width="840" height="471" /></a><span class="centered-caption"><a class=" anchor" name="figure3"></a>Figure 3: A debug session with CodeInspect, where we inspect the content of a variable.</span></p>
<p>That sample uses the <span class="monospace">DexClassLoader</span> class to load a Dalvik executable file. The file is passed as an argument in the class constructor, but with static analysis I couldn't find out its value. So I opened the project in <em>CodeInspect</em>. The Dalvik bytecode is converted to <em>Jimple</em>, which is an intermediate representation of Java. It is different from <em>smali</em>, but easy to follow. I set a breakpoint on the corresponding line, opened a debugger session and attached it to an existing emulator (alternatively, <em>CodeInspect</em> can launch another one). It installed the sample on the emulator, ran to the breakpoint and read the value of the variable (a hidden zip filename).</p>
<p> </p>
<h3><a class="chapter" name="h3-42-jeb2"></a>4.2 JEB2</h3>
<p>With <em>JEB2</em>, the steps are essentially the same, except the <em>JEB2</em> GUI does not install and run the application – you need to do it. To start the application:</p>
<pre>am start -D -S -n PACKAGENAME/ACTIVITYNAME</pre>
<p>where package name is something like <span class="monospace">com.mx.cool.videoplayer</span>, and activity name is a relative path to the package name, e.g.<span class="monospace"> .activity.MainActivity</span> (don't forget the initial dot).</p>
<p>I tried it over two different samples: Android/Crosate.A!tr (sha256: 15281dbe2603f5973d53c5fddabbcc3de6ad3ec65146aa2ffb34a779ea604f82) and the Ztorg of Section 3. Unfortunately, I encountered numerous bugs and crashes (which I reported to the developers) with the current version of <em>JEB2</em> and had difficulties completing the work.</p>
<p> </p>
<h3><a class="chapter" name="h3-43-conclusion"></a>4.3 Conclusion</h3>
<p>Hopefully, the situation will improve both for <em>CodeInspect</em> and <em>JEB2</em> in the next few months. Note that running a debugger session obviously runs the sample, so beware not to set the breakpoint too far, after critical malicious activities. Also, if you modify the code, it recompiles a new application, which might raise ethical issues in the case of malware analysis because it then virtually creates a new malicious sample.</p>
<p> </p>
<h2><a class="chapter" name="h2-5-https-flow-inspection"></a>5. HTTPS flow inspection</h2>
<p>Good news: more and more <em>Android</em> applications use TLS to communicate with a remote server. However, for the reverse engineer, especially the anti-virus analyst, this presents another problem, because the communication flow is now encrypted and thus not understandable. How can we decrypt the flow?</p>
<p>The solution is Man-in-the-Middle (MitM), where a host we own is configured to impersonate the server for the client and, reciprocally, the client for the server. When the client communicates with the server, the idea is that the MitM host intercepts the request and provides a certificate of its own instead, claiming it is the server. The client is fooled and consequently encrypts messages for the MitM host, not for the server. Server responses to the client are handled in the same way, with the MitM host claiming it is the client this time.</p>
<p><em>Mitmproxy</em> is able to do this automatically. This tool runs on the MitM host. It generates certificates automatically on the fly for each communication to a TLS server, and decrypts and displays packets that flow through it (packet modification is even possible).</p>
<p><a href="#figure4">Figure 4</a> explains the architecture of our reverse engineering lab. The Android smartphone and the MitM host are on the same (Wi-Fi) network.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/4015/0901/8716/Apvrille-vb2017-Figure4.jpg" alt="Apvrille-vb2017-Figure4.jpg" width="700" height="324" /><span class="centered-caption"><a class=" anchor" name="figure4"></a>Figure 4: Set-up to perform MitM of Android application communications.</span></p>
<p>To intercept network packets, we modify the configuration of the smartphone's Wi-Fi connection to use a proxy: specify the IP address of the MitM host, and default port 8080 (there are other possibilities, but this is the easiest - see [<a href="#ref25">25</a>]). Thus, all packets of the smartphone go to the MitM host.</p>
<p>To impersonate the real server, the MitM host generates a (fake) server certificate, signed by its own CA. As this CA is not known by the smartphone, it must be added to the smartphone's SD card:</p>
<pre>push /.mitmproxy/mitmproxy-ca-cert.cer</pre>
<p>Then, on the smartphone, install the certificate: Settings -&gt; Security -&gt; Install from SD Card, and select the certificate.</p>
<p>The set-up is complete. Launch <span class="monospace">mitmproxy</span> to start eavesdropping on communications between the smartphone and remote TLS servers.</p>
<p>For example, I performed such a MitM on a genuine <em>Android</em> application to control a smart toothbrush (<a href="#figure5">Figure 5</a>). The communication with the remote server, https://app.beam.dental, is over HTTPS and would appear encrypted in a standard network capture. With <em>mitmproxy</em>, we are able to decrypt any packet and inspect its content.</p>
<p><a class="zoom-img" title="Figure 5: Mitmproxy in action, showing clear text content for an HTTPS conversation." href="/files/2315/0901/8940/Apvrille-vb2017-Figure5.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/63954f119b6c45c7c52f6c833c4f8398_f2009.png" alt="Apvrille-vb2017-Figure5.png" width="840" height="407" /></a><span class="centered-caption"><a class=" anchor" name="figure5"></a>Figure 5: Mitmproxy in action, showing clear text content for an HTTPS conversation.</span></p>
<p>Note that there is a limitation: MitM won't work for <em>Android</em> applications that use certificate pinning. However, so far, such applications are quite rare.</p>
<p> </p>
<h2><a class="chapter" name="h2-6-radare2"></a>6. Radare2</h2>
<p><em>Radare2</em> is a 'framework for reverse engineering and analysing binaries' [<a href="#ref26">26</a>]. It is open source and well known in the geek community for its command-line interactive shell and for its wide support of many architectures including lesser used ones.</p>
<p>This section provides tips and tricks, but also feedback, on using <em>Radare2</em> to analyse <em>Android</em> malware.</p>
<p> </p>
<h3><a class="chapter" name="h3-61-dalvik-support"></a>6.1 Dalvik support</h3>
<p>Although <em>Radare2</em> is not the obvious immediate choice for reverse engineering <em>Android</em> applications (people in the field usually prefer combinations of apktool, baksmali, JD, JEB etc.), it has recently added support for Dalvik executables (<em>actually, support for Dalvik dates back at least to 2015, but in my humble opinion, it has only been usable since the end of 2016</em>) and may be an interesting choice for occasional reverse engineers or <em>Radare2</em> fans.</p>
<p><em>Radare2</em> does not have any particular knowledge of what APKs, <em>Android</em> manifests or resources are. It is really only meant to be run on Dalvik executables (<span class="monospace">.dex</span>). It produces Dalvik bytecode (see <a href="#figure6">Figure 6</a>). There is no decompiler.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/4315/0902/6721/Apvrille-vb2017-Figure6.jpg" alt="Apvrille-vb2017-Figure6.jpg" width="830" height="400" /><span class="centered-caption"><a class=" anchor" name="figure6"></a>Figure 6: Android/Crosate disassembled by Radare2.</span></p>
<p>The disassembler is reasonably good, with occasional bugs. For instance, in April, I reported a bug in the disassembly of array-data payloads [<a href="#ref27">27</a>]. This was solved a few days later.</p>
<p> </p>
<h3><a class="chapter" name="h3-62-commands-reverse-dex"></a>6.2 Commands to reverse a DEX</h3>
<p>There are several tutorials on how to use <em>Radare2</em> (see [<a href="#ref28">28</a>, <a href="#ref29">29</a>, <a href="#ref30">30</a>, <a href="#ref31">31</a>], for instance). In this subsection, we focus only on the specificities with dealing with Dalvik executables.</p>
<p>First, we start by launching <em>Radare2</em> on a DEX:</p>
<pre>r2 -e asm.payloads=true classes.dex</pre>
<p>Then, we need to analyse all flags with command aa. Unfortunately, this step is currently very long on some samples (up to 10 minutes in some cases!).</p>
<p>The following commands are the most useful for DEX:</p>
<ul>
<ul>
<li><strong>Searching</strong> is particularly useful over DEX because the executable file format contains the pool of strings, but also the textual names of classes and methods. Consequently, it is useful to grep for a given constant (<span class="monospace">iz˜string</span>), imports (<span class="monospace">ii˜string</span>), class names (<span class="monospace">ic˜string</span>), function names (<span class="monospace">afl˜string</span>) and bytecode (<span class="monospace">pd LINES @FUNC˜string</span>). Note there is no space between ˜ and the string to search for. The search is case sensitive. Some characters don't show well, e.g. slashes show as underlines.
<pre class="prettyprint">0x00064fef 49 str.http:__verisign_contr ┘</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" /></p>
<pre class="prettyprint">olcenter.com_teapot_gate.php</pre>
</li>
<li><strong>Method analysis</strong>. You can jump to a given method with the seek command <span class="monospace">s ADDR</span> or <span class="monospace">sf FUNC-SYMBOL-NAME</span>, or directly disassemble a few lines at a given address: <span class="monospace">pd LINES @ ADDR</span>. Finding cross references is also a must: <span class="monospace">axt NAME</span> for cross references to a given name, and <span class="monospace">axf NAME</span> for cross references from a given name. See <a href="#listing7">Listing 7</a>.</li>
</ul>
</ul>
<pre class="prettyprint">[0x0001f424]&gt; s 0x00036b30</pre>
<pre class="prettyprint">or</pre>
<pre class="prettyprint">[0x0001f424]&gt; sf sym.Lcom_adobe_flashplayer ┘</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" /></p>
<pre class="prettyprint">__UC.method._init___V</pre>
<pre class="prettyprint">[0x00036b30]&gt; pd 10</pre>
<pre class="prettyprint">...</pre>
<pre class="prettyprint">[0x00036b30]&gt; axf sym.Lcom_adobe_flashplaye ┘</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" /></p>
<pre class="prettyprint">r__UC.method._init___V</pre>
<pre class="prettyprint">C 0x36b30 invoke-direct {v0},</pre>
<p><img style="float: left;" src="/files/cache/c9719921ed7a5947dce20c98880bf861_f1996.jpg" alt="arrow" width="30" height="15" /></p>
<pre class="prettyprint">Ljava/lang/Object.&lt;init&gt;()V ; 0xede</pre>
<p class="centered-caption"><a class=" anchor" name="listing7"></a>Listing 7: Seeking, disassembling and finding cross references in DEX with Radare2.</p>
<ul>
<li>Commenting/editing. To add a comment, the command is <span class="monospace">CC this is my comment @ ADDR</span>. To remove it, <span class="monospace">CC-</span>. To rename a function: <span class="monospace">afn new-name</span>. Renaming local variables is not yet possible. <span class="monospace">afvn v20 new-name</span> will eventually be available, one day.</li>
</ul>
<p> </p>
<h3><a class="chapter" name="h3-63-scripting"></a>6.3 Scripting</h3>
<p>Because of its command-line nature, <em>Radare2</em> is particularly well suited to scripting. For instance, from the <em>Radare2</em> prompt, it is possible to invoke a Python r2 script using the following special construction:</p>
<pre>#!pipe python ...</pre>
<p>The script itself must import r2pipe bindings [<a href="#ref32">32</a>]:</p>
<pre class="prettyprint">import r2pipe</pre>
<p>and you can automate two commands:</p>
<pre>r2p=r2pipe.open()<br />r2p.cmd(your r2 command)</pre>
<p>I have written a <em>Radare2</em> script to de-obfuscate strings of an Android/Ztorg sample. The script is available at [<a href="#ref33">33</a>]. It has two arguments: the address of the obfuscated string and its length. It:</p>
<ul>
<li>Reads the address of the obfuscated string (provided as first argument)</li>
<li>Jumps to that address (command <span class="monospace">s ADDR</span>)</li>
<li>Reads the x following bytes (second argument) as a unicode string (command <span class="monospace">p8 BYTES</span>)</li>
<li>Calls the de-obfuscation routine on those bytes and displays the result.</li>
</ul>
<p>As far as I know, this is the most advanced usage of <em>Radare2</em> on <em>Android</em> malware.</p>
<p> </p>
<h3><a class="chapter" name="h3-64-discussion"></a>6.4 Discussion</h3>
<p>This subsection presents my own personal impressions of <em>Radare2</em>.</p>
<p>I have used <em>Radare2</em> on both simple and complex samples: it works.</p>
<p>Nevertheless, there are a few limitations, in my opinion. I have already mentioned the time taken to run aa and renaming local variables, but in addition:</p>
<ul>
<li><em>Radare2</em> does not deal with object-oriented structures. This means that it does not have any knowledge of what classes are implemented in a DEX, or which methods. This makes it difficult to parse the sample. That's why strategies where you read disassembled code until you spot something interesting do not work well with r2. Rather, you'll be searching for something specific (a URL, a password, a call to a given function) and digging into that.</li>
<li>Entry point detection (command <span class="monospace">ie</span>) does not really work for Dalvik. The problem is that <em>Radare2</em> does not have knowledge of the manifest, so how could it really find the main activity? It does spot entry points, but only low‑level ones like calls on onCreate() of android.support.v4.app.Fragment.</li>
</ul>
<p>Also, when working with <em>Radare2</em>, I would recommend using a large screen: lines are often quite long. A visual mode exists where each text blog is organized graphically, but I am not enthusiastic. (<em>I fail to understand why one would use Radare2 for GUI when JD, JEB2 and IDA Pro are available for those who like a GUI – but this is a personal view.</em>)</p>
<p>To summarize, I would say that I like <em>Radare2</em> because it is command-line based, close to code, and scriptable. But I find it difficult to get an overview of a sample and parse it. I would definitely recommend the use of <em>Radare2</em> for <em>Android</em> samples for any <em>Radare2</em> fan. It works well. However, if you are a newbie, the entry ticket might be too high. If you are looking for a reverse engineering shell for <em>Android</em>, I'd rather recommend <em>Androguard</em>. And if you like GUIs, <em>Radare2</em> is certainly not the option, you should stick to <em>JD</em> or <em>JEB</em>.</p>
<p> </p>
<h2><a class="chapter" name="h2-7-conclusiontake-aways"></a>7. Conclusion/take-aways</h2>
<p>The following are the take-aways for this paper:</p>
<ol>
<li>To share your <em>Android</em> reverse engineering framework, consider using a <em>Docker</em> image. Mine is available via <span class="monospace">docker pull cryptax/android-re</span> and the source to adapt it can be downloaded from [<a href="#ref14">14</a>].</li>
<li>To write string de-obfuscators for your <em>Android</em> samples, you can start off your own code from my Ztorg de-obfuscator, available at [<a href="#ref23">23</a>].</li>
<li><em>Android</em> application debugging is not yet operational. Both <em>CodeInspect</em> and <em>JEB2</em> are promising, and will hopefully make it in the next few months, but they did not work well enough at the time of writing this paper.</li>
<li><em>Mitmproxy</em> can be used to eavesdrop on encrypted communications of <em>Android</em> applications. The set-up requires a new CA certificate to be added on the mobile phone and a proxy to be specified.</li>
<li><em>Radare2</em> is operational for the reversing of Dalvik executables. It can also be used for advanced analysis such as string obfuscation (code available at [<a href="#ref33">33</a>]). However, learning how to use <em>Radare2</em> is a little tough at the beginning, so unless there is a very specific reason to use <em>Radare2</em>, newcomers will probably be better off sticking to the usual <em>apktool</em>/<em>baksmali</em>/<em>Java Decompiler</em> (<em>JD</em>).</li>
</ol>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] Oliva Fora, P. Beginners Guide to Reverse Engineering Android Apps. In RSA Conference, February 2014. <a href="https://www.rsaconference.com/writable/presentations/file_upload/stu-w02b-beginners-guide-to-reverseengineering-android-apps.pdf" target="_blank">https://www.rsaconference.com/writable/presentations/file_upload/stu-w02b-beginners-guide-to-reverseengineering-android-apps.pdf</a>.</p>
<p><a class=" anchor" name="ref2"></a>[2] Altomare, D. Android Reverse Engineering 101. Parts 1 to 5. November 2015. <a href="http://www.fasteque.com/androidreverse-engineering-101-part-1/" target="_blank">http://www.fasteque.com/androidreverse-engineering-101-part-1/</a>.</p>
<p><a class=" anchor" name="ref3"></a>[3] Desnos, A.; Gueguen, G. Android: From Reversing to Decompilation. In BlackHat Abu Dhabi, 2011. <a href="https://media.blackhat.com/bh-ad-11/Desnos/bh-ad-11-DesnosGueguen-Andriod-Reversing_to_Decompilation_WP.pdf" target="_blank">https://media.blackhat.com/bh-ad-11/Desnos/bh-ad-11-DesnosGueguen-Andriod-Reversing_to_Decompilation_WP.pdf</a>.</p>
<p><a class=" anchor" name="ref4"></a>[4] Margaritelli, S. Android Applications Reversing 101. April 2017. <a href="https://www.evilsocket.net/2017/04/27/Android-Applications-Reversing-101/" target="_blank">https://www.evilsocket.net/2017/04/27/Android-Applications-Reversing-101/</a>.</p>
<p><a class=" anchor" name="ref5"></a>[5] Strazzere, T.; Sawyer, J. Android hacker protection level 0. In DEFCON 22, August 2014.</p>
<p><a class=" anchor" name="ref6"></a>[6] Apvrille, A.; Nigam, R. Obfuscation in Android malware and how to fight back. In 8th International CARO Workshop, May 2014.</p>
<p><a class=" anchor" name="ref7"></a>[7] Lipovsky, R. Obfuzzcation issues. In 8th International CARO Workshop, May 2014.</p>
<p><a class=" anchor" name="ref8"></a>[8] Yu, R. Android packers: facing the challenges, building solutions. In Virus Bulletin International Conference, 2014. <a href="https://www.virusbulletin.com/virusbulletin/2016/01/paper-android-packers-facing-challenges-building-solutions/" target="_blank">https://www.virusbulletin.com/virusbulletin/2016/01/paper-android-packers-facing-challenges-building-solutions/</a>.</p>
<p><a class=" anchor" name="ref9"></a>[9] <a href="http://redmine.honeynet.org/projects/are/wiki" target="_blank">http://redmine.honeynet.org/projects/are/wiki</a>.</p>
<p><a class=" anchor" name="ref10"></a>[10] <a href="https://github.com/sh4hin/Androl4b" target="_blank">https://github.com/sh4hin/Androl4b</a>.</p>
<p><a class=" anchor" name="ref11"></a>[11] <a href="https://www.docker.com/" target="_blank">https://www.docker.com/</a>.</p>
<p><a class=" anchor" name="ref12"></a>[12] Wikipedia. <a href="https://en.wikipedia.org/wiki/Docker_(software)" target="_blank">https://en.wikipedia.org/wiki/Docker_(software)</a>.</p>
<p><a class=" anchor" name="ref13"></a>[13] Coleman, M. Containers are not VMs. March 2016. <a href="https://blog.docker.com/2016/03/containers-are-not-vms/" target="_blank">https://blog.docker.com/2016/03/containers-are-not-vms/</a>.</p>
<p><a class=" anchor" name="ref14"></a>[14] Dockerfile. <a href="https://github.com/cryptax/androidre" target="_blank">https://github.com/cryptax/androidre</a>.</p>
<p><a class=" anchor" name="ref15"></a>[15] Rehm, F. Running GUI apps with Docker. September 2014. <a href="http://fabiorehm.com/blog/2014/09/11/running-gui-apps-withdocker/" target="_blank">http://fabiorehm.com/blog/2014/09/11/running-gui-apps-withdocker/</a>.</p>
<p><a class=" anchor" name="ref16"></a>[16] Krijger, Q. Using supervisor with Docker to manage processes (supporting image inheritance). March 2014. <a href="http://blog.trifork.com/2014/03/11/using-supervisor-with-docker-tomanage-processes-supporting-imageinheritance/" target="_blank">http://blog.trifork.com/2014/03/11/using-supervisor-with-docker-tomanage-processes-supporting-imageinheritance/</a>.</p>
<p><a class=" anchor" name="ref17"></a>[17] Best practices for writing Dockerfiles. <a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_bestpractices/" target="_blank">https://docs.docker.com/engine/userguide/eng-image/dockerfile_bestpractices/</a>.</p>
<p><a class=" anchor" name="ref18"></a>[18] PNF Software. Writing client scripts. <a href="https://www.pnfsoftware.com/jeb2/manual/dev/writing-client-scripts/" target="_blank">https://www.pnfsoftware.com/jeb2/manual/dev/writing-client-scripts/</a>.</p>
<p><a class=" anchor" name="ref19"></a>[19] Falliere, N. Writing JEB2 scripts in Python. November 2015. <a href="https://www.pnfsoftware.com/blog/writingjeb2-scripts-in-python/" target="_blank">https://www.pnfsoftware.com/blog/writingjeb2-scripts-in-python/</a>.</p>
<p><a class=" anchor" name="ref20"></a>[20] PNF Software. JEB API documentation. <a href="https://www.pnfsoftware.com/jeb2/apidoc/reference/packages.html" target="_blank">https://www.pnfsoftware.com/jeb2/apidoc/reference/packages.html</a>.</p>
<p><a class=" anchor" name="ref21"></a>[21] Apvrille, A. Teardown of a recent variant of Android/Ztorg – Part 1 and 2. March 2017. <a href="http://blog.fortinet.com/2017/03/15/teardown-of-a-recentvariant-of-android-ztorg-part-1" target="_blank">http://blog.fortinet.com/2017/03/15/teardown-of-a-recentvariant-of-android-ztorg-part-1</a> and <a href="http://blog.fortinet.com/2017/03/15/teardown-of-android-ztorg-part-2" target="_blank">http://blog.fortinet.com/2017/03/15/teardown-of-android-ztorg-part-2</a>.</p>
<p><a class=" anchor" name="ref22"></a>[22] <a href="https://github.com/pnfsoftware/jeb2-samplecode/tree/master/scripts" target="_blank">https://github.com/pnfsoftware/jeb2-samplecode/tree/master/scripts</a>.</p>
<p><a class=" anchor" name="ref23"></a>[23] <a href="https://github.com/cryptax/misccode/blob/master/DeobfuscateZtorg.py" target="_blank">https://github.com/cryptax/misccode/blob/master/DeobfuscateZtorg.py</a>.</p>
<p><a class=" anchor" name="ref24"></a>[24] <a href="https://codeinspect.sit.fraunhofer.de/" target="_blank">https://codeinspect.sit.fraunhofer.de/</a>.</p>
<p><a class=" anchor" name="ref25"></a>[25] <a href="http://docs.mitmproxy.org/en/stable/howmitmproxy.html" target="_blank">http://docs.mitmproxy.org/en/stable/howmitmproxy.html</a>.</p>
<p><a class=" anchor" name="ref26"></a>[26] Wikipedia. <a href="https://en.wikipedia.org/wiki/Radare2" target="_blank">https://en.wikipedia.org/wiki/Radare2</a>.</p>
<p><a class=" anchor" name="ref27"></a>[27] <a href="https://github.com/radare/radare2/issues/7376" target="_blank">https://github.com/radare/radare2/issues/7376</a>.</p>
<p><a class=" anchor" name="ref28"></a>[28] Techorganic. Radare2 in 0x1e minutes. March 2016. <a href="https://blog.techorganic.com/2016/03/08/radare-2-in-0x1e-minutes" target="_blank">https://blog.techorganic.com/2016/03/08/radare-2-in-0x1e-minutes</a>/.</p>
<p><a class=" anchor" name="ref29"></a>[29] A journey into Radare2 part 1. March 2017<a href="%20https://www.megabeets.net/a-journeyinto-radare-2-part-1/" target="_blank"> https://www.megabeets.net/a-journeyinto-radare-2-part-1/</a>.</p>
<p><a class=" anchor" name="ref30"></a>[30] <a href="http://radare.tv" target="_blank">http://radare.tv</a>.</p>
<p><a class=" anchor" name="ref31"></a>[31] <a href="https://www.radare.org/r/talks.html" target="_blank">http://www.radare.org/r/talks.html</a>.</p>
<p><a class=" anchor" name="ref32"></a>[32] Pancake. Scripting r2 with pipes, May 2015. <a href="https://medium.com/@trufae/scripting-r2-with-pipes-47a7e14c50aa" target="_blank">https://medium.com/@trufae/scripting-r2-with-pipes-47a7e14c50aa</a>.</p>
<p><a class=" anchor" name="ref33"></a>[33] <a href="https://github.com/cryptax/misccode/blob/master/r2ztorg.py" target="_blank">https://github.com/cryptax/misccode/blob/master/r2ztorg.py</a>.</p>
<p> </p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2017/VB2017-Apvrille.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2017 paper: Android reverse engineering tools: not the usual suspects&url=https://www.virusbulletin.com/virusbulletin/2018/04/vb2017-paper-android-reverse-engineering-tools-not-usual-suspects"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2018/04/vb2017-paper-android-reverse-engineering-tools-not-usual-suspects'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2018/04/vb2017-paper-android-reverse-engineering-tools-not-usual-suspects&title=VB2017 paper: Android reverse engineering tools: not the usual suspects"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2018/04/vb2017-paper-android-reverse-engineering-tools-not-usual-suspects&t=VB2017 paper: Android reverse engineering tools: not the usual suspects"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2018/04/vb2017-paper-android-reverse-engineering-tools-not-usual-suspects"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>