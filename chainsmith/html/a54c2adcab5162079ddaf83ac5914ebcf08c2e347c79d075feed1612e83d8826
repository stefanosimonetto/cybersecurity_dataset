<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Fuzzing everything in 2014 for 0-day vulnerability disclosure</title>
<meta name="description" content="As indicated by the considerable payouts we see being made for valid security vulnerabilities, finding valuable 0-days is not an easy task. Fuzzing – the most common approach to bug hunting – is technologically and scientifically well developed and well documented, yet simply running some fuzzers isn't enough to achieve the desired outcome. Alisa Esage attempts to pin down the secret ingredient for successful bug hunting." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1714;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
 <input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201406-fuzzing-everything"></a>Fuzzing everything in 2014 for 0-day vulnerability disclosure</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2014-06-02</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Alisa</span> <span class="surname">Esage</span></h3><span class="orgname">Esage Lab</span>, <span class="orgdiv">Russia</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>As indicated by the considerable payouts we see being made for valid security vulnerabilities, finding valuable 0-days is not an easy task. Fuzzing &ndash; the most common approach to bug hunting &ndash; is technologically and scientifically well developed and well documented, yet simply running some fuzzers isn&#39;t enough to achieve the desired outcome. Alisa Esage attempts to pin down the secret ingredient for successful bug hunting.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2592" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2592" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3533681"></a></span></dt><dt><span class="sect1"><a href="#id3762250">The ideal fuzzer</a></span></dt><dt><span class="sect1"><a href="#id3700686">The magic</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id2302590">The &#39;Elusive Joes&#39;</a></span></dt><dt><span class="sect2"><a href="#id3012237">Non-obvious</a></span></dt><dt><span class="sect2"><a href="#id3717902">Effortful</a></span></dt><dt><span class="sect2"><a href="#id4342624">Constrained</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4439416">Summary</a></span></dt><dt><span class="bibliography"><a href="#id4313392">Bibliography</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3533681"></a></h2></div></div></div><p>While the focus of fashionable security research is constantly shifting towards new targets, such as hardware and cloud security, 0-day vulnerability research has never lost its value. In fact, its value has continually risen, as demonstrated by the increase in the number of bug bounty and exploitation contest programs in existence, and their ever-increasing payouts. This year, a total of $850,000 was awarded to Pwn2Own contestants for successful exploitation of 0-day vulnerabilities in popular software [<span class="citation"><a href="#citation.1">1</a></span>]. Another bug monetization entity, the Zero Day Initiative, has for many years paid researchers for the responsible disclosure of valid security vulnerabilities (no exploit required), paying around a few thousand USD each time (this has been confirmed by the author).</p><p>As these considerable payouts suggest, finding valuable 0-days (that is, exploitable security vulnerabilities in popular software) is not an easy task. Even though fuzzing &ndash; which is the most common approach to bug hunting &ndash; is technologically and scientifically well developed and well documented, simply running some fuzzers (which is indeed easy to do) is not going to achieve the desired outcome. There seems to be a secret ingredient to finding valuable bugs &ndash; one that is missing from the books and publications on the subject. The main objective of the research behind this article was to find that secret ingredient, and to generalize it so that it could be applied to completely arbitrary targets (i.e. everything).</p><p>The main measure of research success was assumed to be the ratio of exploitable (as reported by automated tools) vulnerabilities to total number of bugs found in popular software. The secondary measure of success was the total number of bugs found with limited resources, as an indication of a potent fuzzing vector with popular software. By means of these two criteria and some of my own research, I have drawn some conclusions as to what makes a good fuzzing technique.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3762250"></a>The ideal fuzzer</h2></div></div></div><p>Regardless of the secret ingredient for fuzzing success, the first thing one needs is a good fuzzing framework.</p><p>There are a considerable number of fuzzing tools readily available on the Internet, both free and commercial. However, none of them satisfied the objectives of this research due to the following limitations:</p><div class="orderedlist"><ol type="1"><li><p>They were too specialized. For example, they would only fuzz browsers, or only files. They were not suitable for fuzzing everything by design.</p></li><li><p>They enforced unnecessary constraints. For example, glue mutation with data feeding and automation with crash analysis. This kills flexibility and scalability, and thus, is not suitable for fuzzing everything.</p></li><li><p>There was a steep learning curve. All fuzzing frameworks had their own template format and specific configuration. We have to ask whether it is worth the investment of learning a system that is largely constrained anyway.</p></li></ol></div><p>An ideal fuzzer &ndash; one that is suitable for finding security vulnerabilities in arbitrary software &ndash; should possess the following properties:</p><div class="orderedlist"><ol type="1"><li><p>Omnivorous: It should be target invariant &ndash; i.e. independent of software type, data type, platform and architecture.</p></li><li><p>Omnipresent: It should be hosting-platform invariant &ndash; i.e. it should be equally capable of working on VM/hardware/localnet/clouds.</p></li><li><p>Autonomous: It should be able to be left to run on its own. It should rotate mutations/seeds automatically.</p></li><li><p>&lsquo;LEGO&rsquo;-style modular architecture: One should be able to mix and match components, enabling rapid support for new targets and hot patching for tweaking.</p></li><li><p>Unlimited, native scaling: It should be possible to have any number of fuzzers running at the same time. It should take very little time to set up new targets.</p></li><li><p>Immediately actionable output: It should perform auto-analysis of crashes, sort unique cases and send an email with the stats.</p></li><li><p>Available now: It should be available right now &ndash; we don&rsquo;t have the time for development, and the system must be usable from day one.</p></li></ol></div><p>To satisfy these requirements, the system&rsquo;s specific functions must be well segregated and ultimately generalized (abstract). We assume the following system design decisions:</p><div class="itemizedlist"><ul type="disc"><li><p>A network client-server architecture</p></li><li><p>Built upon isolated, generic tools</p></li><li><p>Native automation (bash, cmd/PowerShell, cscript/wscript, AppleScript etc.)</p></li><li><p>Native instrumentation (DebugAPI, CrashWrangler, cdb postmortem scripts etc.)</p></li><li><p>Generic mutators (home-made bit-flipping tools, grep/sed/urandom, Radamsa).</p></li></ul></div><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="An ideal fuzzing framework architecture." src="/uploads/images/figures/2014/06/Fuzzing-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;An ideal fuzzing framework architecture.</b></p></div><p>As shown in <a href="#figure.1">Figure 1</a>, the system&rsquo;s functions are segregated as follows:</p><div class="orderedlist"><ol type="1"><li><p>Server</p><div class="itemizedlist"><ul type="disc"><li><p>Generates and serves test cases</p></li><li><p>Accepts and sorts crash analysis logs</p></li><li><p>Provides scripts for additional pre-analysis, sorting, particular trigger location</p></li></ul></div></li><li><p>Client:</p><div class="itemizedlist"><ul type="disc"><li><p>Executes the target software in a loop</p></li><li><p>Monitors exceptions</p></li><li><p>Analyses crash dumps</p></li></ul></div></li><li><p>Whole system:</p><div class="itemizedlist"><ul type="disc"><li><p>Runs in a loop</p></li><li><p>Scales natively by addition of new clients</p></li><li><p>Runs on any platform thanks to native automation tools.</p></li></ul></div></li></ol></div><p>As was noted in the introduction to this article, a decent fuzzing framework is necessary in order to start producing crashes, but it is not enough to find those elusive exploitable security vulnerabilities. So, where&rsquo;s the magic?</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3700686"></a>The magic</h2></div></div></div><p>It has been seven years since the publication of the canonical book <span class="emphasis"><em>Fuzzing: Brute Force Vulnerability Discovery</em></span> [<span class="citation"><a href="#citation.2">2</a></span>], and 10 years since the publication of the first edition of <span class="emphasis"><em>The Shellcoder&rsquo;s Handbook </em></span>[<span class="citation"><a href="#citation.3">3</a></span>]. Since then, dozens of research papers have been published, hundreds of fuzzing tools have been developed and shared with the community, and thousands of vulnerabilities have been discovered. In 2014, fuzzing is a mature industry, driven not by art or technology, but by the market and competition.</p><p>A common mistake made by beginners in this industry is to assume that success in fuzzing is defined by the fuzzer&rsquo;s speed and size. This is not exactly true, as proven by the success of a few independent researchers against <span class="emphasis"><em>Google</em></span>&rsquo;s own <span class="emphasis"><em>ClusterFuzz</em></span> [<span class="citation"><a href="#citation.4">4</a></span>]. To put it simply, one needs millions of test cases if the majority of those test cases are bad (i.e. rejected by the target&rsquo;s data validation routines, or unable to reach or trigger any vulnerable code). Thinking along this logic, one might conclude that the main thing that matters in fuzzing is to target bug-rich branches of code.</p><p>The problem here is that there is no simple algorithmic solution for discovering such bug-rich branches of code on a major scale or for complex data formats. Code coverage allows for the measuring of the volume of code paths that have already been reached, but it doesn&rsquo;t help in discovering new code segments. Evolutionary input generation only allows new code paths to be discovered on a tiny assembly-level scale, not on the scale of a complex data format. Think of an RTF document with an embedded <span class="emphasis"><em>Word</em></span> document with embedded ActiveX &ndash; how long would it take to evolve such a complex sample from a generic seed? Probably forever. However, my experience shows that it&rsquo;s exactly this kind of complex sample that targets the most &lsquo;fresh&rsquo; code in applications.</p><p>Thus, discovering potent fuzzing vectors remains largely the responsibility of human intelligence.</p><p>Let&rsquo;s think: where can it possibly be, this bug-rich code base?</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2302590"></a>The &#39;Elusive Joes&#39;</h3></div></div></div><p>Clearly, unknown or unpopular software is rich with an unaudited code base, because no one cares about it. And nor do we. As per popular software which everyone cares about, the density of &lsquo;previously unknown&rsquo; bugs in various segments of code is primarily defined by the competition&rsquo;s assumptions and research patterns.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3012237"></a>Non-obvious</h3></div></div></div><p>Part of the code base in a known, popular piece of software may still be bug-rich &ndash; for example, the code may not be obvious to reach or easy to trigger.</p><p>One example is the TIFF 0-day discovered in the wild in 2013 (CVE-2013-3906). The vulnerability lies within the <span class="emphasis"><em>Microsoft Office</em></span> ogl.dll graphics processing module, which is specific to<span class="emphasis"><em> Office 2007</em></span>. In every other <span class="emphasis"><em>Office</em></span> version, embedded images are processed by the <span class="emphasis"><em>Windows</em></span> native module gdiplus.dll. This means that this vulnerability could only be found by fuzzing<span class="emphasis"><em> Office 2007</em></span> specifically with documents containing embedded malformed images &ndash; not a common vector with fuzzing graphics or documents.</p><p>Another example is CVE-2014-0315, the Insecure Library Loading vulnerability in <span class="emphasis"><em>Windows</em></span>&rsquo; handling of .cmd and .bat files. Vulnerabilities of this type are quite easy to find and are generally considered all to have been fixed long ago, but they are still being found in 2014.</p><p>The third example is CVE-2013-1324, the <span class="emphasis"><em>M</em></span><span class="emphasis"><em>icrosoft Office</em></span> .wpd file vulnerability. This is a stack-based buffer overflow &ndash; the trivial type of bug which was considered to have been eliminated long ago, but has still been found in the latest versions of <span class="emphasis"><em>Microsoft Office</em></span>.</p><p>To summarize, some places to look for non-obvious code bases are:</p><div class="itemizedlist"><ul type="disc"><li><p>Ancient, rarely used code bases</p></li><li><p>Hidden functionalities</p></li><li><p>Software-specific source code for a system&rsquo;s native functionality.</p></li></ul></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3717902"></a>Effortful</h3></div></div></div><p>A code base may long remain bug-rich if reaching it requires considerable effort.</p><p>One example is the use-after-free vulnerability in <span class="emphasis"><em>Microsoft</em></span>&rsquo;s RDP ActiveX (CVE-2013-1296). ActiveX modules are an easy target and <span class="emphasis"><em>should</em></span>, in theory, be well audited already. The possible reason why this ActiveX remained vulnerable in 2013 is that public tools for fuzzing ActiveX don&rsquo;t support vulnerabilities of the use-after-free type.</p><p>Another example is the <span class="emphasis"><em>Microsoft</em></span> DKOM/RPC service, which exposes ports 135 and 445 on a typical <span class="emphasis"><em>Windows</em></span> system. This is a huge, complex and completely undocumented code base that has yet to be targeted by researchers.</p><p>So, some more signs of under-audited code bases worthy of our attention are:</p><div class="itemizedlist"><ul type="disc"><li><p>Those for which public fuzzing tools have limitations (easily augmented)</p></li><li><p>Those with undocumented data formats (easily addressed by generic tools).</p></li></ul></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4342624"></a>Constrained</h3></div></div></div><p>A code base may be under-audited because it was previously assumed to be too constrained to be valuable for exploitation, e.g. due to extra security controls or user interaction.</p><p>One example is, again, the system-standard ActiveX in <span class="emphasis"><em>Windows</em></span>. Modern versions of<span class="emphasis"><em> Internet Explorer</em></span> require user interaction to enable an ActiveX, so this is not considered to be an interesting vector for research. The misconception here is that <span class="emphasis"><em>IE</em></span> is not the only software capable of loading and controlling an ActiveX (think <span class="emphasis"><em>Microsoft Word</em></span>).</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4439416"></a>Summary</h2></div></div></div><p>In summary, what I have concluded to be the minimum requirements for successful fuzzing are the following:</p><div class="orderedlist"><ol type="1"><li><p>Research! The primary target should be code bases, not data formats or data input interfaces or fuzzing automation technology. Look for ancient code, hidden/non-obvious functionality, etc.</p></li><li><p>Bet on complex data formats. For complex data, code paths exist which are not reachable automatically &ndash; which means their code bases have probably never been audited and there will be no competition.</p></li><li><p>Craft complex fuzzing seeds manually. The rule of &lsquo;minimal size sample&rsquo;, as stated in [<span class="citation"><a href="#citation.2">2</a></span>], is obsolete in 2014.</p></li><li><p>Remove one to two data format layers before injecting malformed data. Deep parsers are less well audited (because researchers are lazy?) and they tend to contain more bugs (because programmers are lazy?).</p></li><li><p>Estimate the potency of a new vector by dumb fuzzing prior to investing in smart fuzzing. Use the assumption that bugs tend to crowd in the direction of a &lsquo;less well audited&rsquo; code base.</p></li><li><p>Tweak a lot to get a &lsquo;feeling&rsquo; for the particular target.</p></li><li><p>Keep the fuzzing setting dirty. Fuzzing is dirty by design. Incorporating it nicely into a well-designed system kills the flexibility that is necessary for tweaking and rapid prototyping.</p></li><li><p>Do more research.</p></li></ol></div></div><div class="bibliography"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4313392"></a>Bibliography</h2></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Pwn2Own 2014: A Recap. <span class="bibliosource"><a href="http://www.pwn2own.com/2014/03/pwn2own-2014-recap/" target="_blank">http://www.pwn2own.com/2014/03/pwn2own-2014-recap/</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Sutton, M.; Greene, A.; Amini, P. Fuzzing: Brute Force Vulnerability Discovery. <span class="bibliosource"><a href="http://www.fuzzing.org/" target="_blank">http://www.fuzzing.org/</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Koziol, J.; Litchfield, D.; Aitel, D.; Anley, C.; Eren, S.; Mehta, N.; Hassell, R. The Shellcoder&rsquo;s Handbook: Discovering and Exploiting Security Holes. First Edition. 2004.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Google Chromium Security Hall of Fame. <span class="bibliosource"><a href="https://www.chromium.org/Home/chromium-security/hall-of-fame/" target="_blank">http://www.chromium.org/Home/chromium-security/hall-of-fame/</a></span>.</p></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Fuzzing everything in 2014 for 0-day vulnerability disclosure&url=https://www.virusbulletin.com/virusbulletin/2014/06/fuzzing-everything-2014-0-day-vulnerability-disclosure"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/06/fuzzing-everything-2014-0-day-vulnerability-disclosure'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/06/fuzzing-everything-2014-0-day-vulnerability-disclosure&title=Fuzzing everything in 2014 for 0-day vulnerability disclosure"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/06/fuzzing-everything-2014-0-day-vulnerability-disclosure&t=Fuzzing everything in 2014 for 0-day vulnerability disclosure"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/06/fuzzing-everything-2014-0-day-vulnerability-disclosure"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>