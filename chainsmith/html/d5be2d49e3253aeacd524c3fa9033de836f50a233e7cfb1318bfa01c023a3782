<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Shifu â€“ the rise of a self-destructive banking trojan</title>
<meta name="description" content="The banking trojan Shifu appears to inherit some of its features from several other well-known banking trojans. Floser Bacurio and Wayne Low decided to take a close look at one of its droppers." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1636;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201511-Shifu"></a>Shifu &ndash; the rise of a self-destructive banking trojan</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2015-11-02</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Floser</span> <span class="surname">Bacurio Jr </span></h3><span class="orgname">Fortinet</span>, <span class="orgdiv">Singapore</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Wayne</span> <span class="surname">Low</span></h3><span class="orgname">Fortinet</span>, <span class="orgdiv">Singapore</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>The banking trojan Shifu appears to inherit some of its features from several other well-known banking trojans. Floser Bacurio and Wayne Low decided to take a close look at one of its droppers.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2015 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2397" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2397" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3617896"></a></span></dt><dt><span class="sect1"><a href="#id2947448">Dropper</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3995868">Exploiting CVE-2015-0003</a></span></dt><dt><span class="sect2"><a href="#id3624632">Malware don&rsquo;t like HIPS</a></span></dt><dt><span class="sect2"><a href="#id4372963">Code obscuring</a></span></dt><dt><span class="sect2"><a href="#id3618331">Anti-sandbox and anti-VM</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4525901">Payload</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4135250">Multiple process code injection</a></span></dt><dt><span class="sect2"><a href="#id3644729">Comprehensive data theft features</a></span></dt><dt><span class="sect2"><a href="#id3516100">Stealthy banking trojan stays under the radar?</a></span></dt><dt><span class="sect2"><a href="#id3634582">Home sweet home</a></span></dt><dt><span class="sect2"><a href="#id4667221">One browser plug-in kills them all</a></span></dt><dt><span class="sect2"><a href="#id2129108">Botnet-like banking trojan</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4319465">Conclusion</a></span></dt><dt><span class="sect1"><a href="#id4828290">Appendix</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3617896"></a></h2></div></div></div><p>Following takedown operations against various notorious banking trojans, including Zeus, Dridex and Gozi, a freshly brewed banking trojan, Shifu, has recently made the news; we believe it inherits some features from the earlier well-known banking trojans. We decided to dive deeper into one of its droppers (MD5: E60F72FFA76386079F2645BE2ED84E53; SHA1: 963BFC778F94FE190FDD1DD66284E9BC9DD2BED6). A number of features caught our eye when looking at its underlying code.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2947448"></a>Dropper</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3995868"></a>Exploiting CVE-2015-0003</h3></div></div></div><p>On our first look at the dropper, we observed that the dropper code is not heavily obfuscated, although most of the strings are encoded; it turns out that the strings can easily be decoded using a simple XOR operation. </p><p>At the entry point, we can immediately tell that Shifu attempts to exploit a local privilege escalation vulnerability. The vulnerability was assigned the CVE number CVE-2015-0003 in February 2015 and can be used to elevate the privilege of a process to system privilege on <span class="emphasis"><em>Windows 7</em></span> and above. The exploit code can easily be found on the Internet, so it is not surprising that the malware attempts to exploit this (patched) vulnerability. This means that the malware may not execute properly without sufficient privileges and also serves as a reminder that <span class="emphasis"><em>Windows</em></span> users should always install the latest <span class="emphasis"><em>Windows</em></span> updates. </p><p>After performing the local privilege escalation routine, we arrive at the code where the malware will extract the payloads embedded in its binary. The payloads consist of two aPLib compressed blobs for 32-bit and 64-bit platforms, which is a very common technique used by malware nowadays. The use of the aPLib compressor suggests that Shifu might have adopted some of the techniques used by malware like Zeus (aka Zbot) or Rovnix (and thus Carberp), for which the source code has been leaked. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3624632"></a>Malware don&rsquo;t like HIPS</h3></div></div></div><p>One of the most notable things observed in the code injection routine is an attempt to obfuscate the MZPE header by overwriting random bytes in it. This action does not affect the execution of the payload since the payload code will be injected into the memory of the remote process and will be executed directly in the context of the remote process via an asynchronous thread. The purpose of overwriting bytes in the MZPE header is to defeat behavioural analysis systems and HIPS technology &ndash; with a corrupted MZPE header, the sample does not look like a legitimate binary file and could thus bypass some trivial PE signature checks. </p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Corrupting the MZPE header." src="/uploads/images/figures/2015/11/Shifu-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Corrupting the MZPE header.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4372963"></a>Code obscuring</h3></div></div></div><p>Analysing the decompressed buffer directly might result in an incorrect AddressOfEntryPoint as Shifu&rsquo;s author has intentionally obfuscated the entry point address by XORing with a widely used XOR key, 0x31337, throughout the program regardless of the dropper or payload. Shifu will first try injecting the payload code into explorer.exe. When the code injection into explorer.exe fails, to play it safe, Shifu&rsquo;s author implements an additional routine which will create or spawn a random <span class="emphasis"><em>Windows</em></span> process found in C:\Windows\system32, or in C:\Windows\syswow64 if it is a 64-bit platform. Under normal circumstances, most <span class="emphasis"><em>Windows</em></span> executable files (for instance svchost.exe) can be executed, but will quit immediately when called by non-<span class="emphasis"><em>Windows</em></span> services. In order to circumvent this behaviour, Shifu first creates a suspended <span class="emphasis"><em>Windows</em></span> process and then injects an infinite sleep, Sleep(-1), routine and executes it in the memory of the suspended process. After that, the suspended process will be resumed and continue execution, but it will not quit immediately unless it is forced to exit explicitly. Once the targeted process has been determined, Shifu will carry out another code injection routine to execute the payload via CreateRemoteThread or RtlCreateUserThread (<a href="#figure.2">Figure 2</a>).</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Remote code execution using CreateRemoteThread/RtlCreateUserThread." src="/uploads/images/figures/2015/11/Shifu-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Remote code execution using CreateRemoteThread/RtlCreateUserThread.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3618331"></a>Anti-sandbox and anti-VM</h3></div></div></div><p>There are many anti-sandbox and anti-VM detection techniques in the dropper, as is common in mal-ware nowadays. Some of these checks have been documented in a <span class="emphasis"><em>McAfee</em></span> blog post [<span class="citation"><a href="#citation.1">1</a></span>], so <a href="#table.1">Table 1</a> lists some of the process names, as well as their hashes (computed by checking well-known process names using the <span class="emphasis"><em>Windows</em></span> API function RtlComputeCrc32) that are &lsquo;blacklisted&rsquo; by Shifu. Shifu checks a list of active processes running on the machine, as well as the sample&rsquo;s file name, against hard-coded CRC32 hashes in order to avoid the malware being analysed by a sandbox or by virtual machines that are built to perform dynamic analysis of malware samples.</p><div class="table"><a id="table.1"></a><table border="1" summary="Process names that are &lsquo;blacklisted&rsquo; by Shifu."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Process name</th><th align="center">CRC32 hash</th></tr></thead><tbody><tr><td>vmwareuser.exe</td><td>0x99DD4432</td></tr><tr><td>vmwaretray.exe</td><td>0x1F413C1F</td></tr><tr><td>vboxservice.exe</td><td>0x64340DCE</td></tr><tr><td>vboxtray.exe</td><td>0x63C54474</td></tr><tr><td>wireshark.exe</td><td>0x77AE10F7</td></tr><tr><td>procmon.exe</td><td>0x5BA9B1FE</td></tr><tr><td>procexp.exe</td><td>0x3CE2BEF3</td></tr><tr><td>fortitracer.exe</td><td>0x332FD095</td></tr><tr><td>ollydbg.exe</td><td>0xAF2015F2</td></tr><tr><td>python.exe</td><td>0xD2EFC6C4</td></tr><tr><td>sysanalyzer.exe</td><td>0x4231F0AD</td></tr><tr><td>sniff_hit.exe</td><td>0xD20981E0</td></tr><tr><td>joeboxserver.exe</td><td>0x2AAA273B</td></tr><tr><td>joeboxcontrol.exe</td><td>0x777BE06C</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Process names that are &lsquo;blacklisted&rsquo; by Shifu.</b></p></div><p>It also employs a check against the file names shown in Table 2.</p><div class="table"><a id="table.2"></a><table border="1" summary="File names that are checked."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Dropper&rsquo;s file name</th><th align="center">CRC32 hash</th></tr></thead><tbody><tr><td>sample.exe</td><td>0xE84126B8</td></tr><tr><td>malware.exe</td><td>0x3C164BED</td></tr><tr><td>test.exe</td><td>0xC19DADCE</td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;File names that are checked.</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4525901"></a>Payload</h2></div></div></div><p>On analysing the decompressed payload using a disassembler, it turns out that we have landed at an invalid code entry point, as mentioned in the previous section, and the disassembler will complain that the import address table is corrupted. The payload cannot be analysed in a disassembler directly without first &lsquo;fixing&rsquo; the file. We later realized that, besides the code entry point obfuscation, Shifu&rsquo;s author has also deployed some other trivial tricks to the payload to mislead analysts: </p><div class="itemizedlist"><ul type="disc"><li><p>Obfuscating the import table address &ndash; the original import table address can be restored by XORing with the key 0x31337.</p></li><li><p>Obfuscating import function names (<a href="#figure.3">Figure 3</a> and <a href="#figure.4">Figure 4</a>) &ndash; the function names are encoded using the static XOR key 0xFF. (In the Appendix, we provide a simple IDAPython script to fix the function names under <span class="emphasis"><em>IDA Pro</em></span>.)</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Obfuscated import function names." src="/uploads/images/figures/2015/11/Shifu-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Obfuscated import function names.</b></p></div><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Shifu deobfuscating the import table address before loading the DLL by name." src="/uploads/images/figures/2015/11/Shifu-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Shifu deobfuscating the import table address before loading the DLL by name.</b></p></div><p>(Click <a href="/uploads/images/figures/2015/11/Shifu-4-large.jpg" target="_top">here</a> to view a larger version of Figure 4.)</p></li></ul></div><p>Shifu&rsquo;s author also utilized multi-threading to add complexity to the malware and make dynamic analysis more challenging. On the other hand, from a static analysis perspective, the malware&rsquo;s encoding/encryption routine is insignificant and most of the strings in the binary can trivially be decoded and fixed within IDA Pro with a few lines of code (<a href="#figure.5">Figure 5</a>). However, some of the strings, such as the command-and-control server name, are encrypted using RC4.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="A simple script to decode the encoded string." src="/uploads/images/figures/2015/11/Shifu-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;A simple script to decode the encoded string.</b></p></div><p>(Click <a href="/uploads/images/figures/2015/11/Shifu-5-large.jpg" target="_top">here</a> to view a larger version of Figure 5.)</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4135250"></a>Multiple process code injection</h3></div></div></div><p>Before Shifu is able to carry out its wide range of information-stealing activities, it needs to make sure its payload code will be injected into the relevant processes. When the payload is injected by the dropper, the very first thing it will do is traverse the running processes and transfer its code into any process that does not already contain it. In other words, all the active processes apart from the system processes will contain a copy of the payload code whenever the machine is infected. </p><p>Afterwards, a named pipe will be created in order to allow communication between the payloads in different processes. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3644729"></a>Comprehensive data theft features</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id2767974"></a>Keylogger and screenshot capture</h4></div></div></div><p>Looking into Shifu&rsquo;s data theft features, we could see that the malware is equipped with some of the keylogging features found in traditional keyloggers, as well as having the ability to steal numerous banking credentials from the victim. Shifu also uses the <span class="emphasis"><em>Windows</em></span> API-hooking technique in order to steal other credentials. <a href="#table.3">Table 3</a> shows a short summary of the hooked <span class="emphasis"><em>Windows</em></span> APIs along with their respective purposes.</p><div class="table"><a id="table.3"></a><table border="1" summary="Hooked Windows APIs and their purposes."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Hooked Windows API</th><th align="center">Purpose</th></tr></thead><tbody><tr><td>User32!GetClipboardData</td><td>Captures the ASCII and UNICODE text currently saved in the clipboard window</td></tr><tr><td>User32!TranslateMessage</td><td>Captures the keyboard&rsquo;s keystrokes</td></tr><tr><td>User32!GetMessageA/User32!GetMessageW</td><td>The hook&rsquo;s handler performs the same thing as the user32!TranslateMessage hook&rsquo;s handler</td></tr></tbody></table><p class="title"><b>Table&nbsp;3.&nbsp;Hooked Windows APIs and their purposes.</b></p></div><p>Under normal circumstances, these <span class="emphasis"><em>Windows</em></span> API hooks should be able to capture the keystrokes on an infected machine. However, Shifu also tries to capture virtual keyboards, which are commonly used in Internet banking, by taking screenshots of the infected machine whenever the malware detects a mouse click. It is also noteworthy that the virtual keyboard screen will only be grabbed when the malware detects an opened screen with one of the following titles, all of which are used by Italian Internet banking websites:</p><div class="itemizedlist"><ul type="disc"><li><p>Password</p></li><li><p>Telemaco</p></li><li><p>Scelta e Login dispositivo</p></li><li><p>TLQ Web</p></li><li><p>db Corporate Banking Web</p></li><li><p>SecureStoreCSP - enter PIN</p></li></ul></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id3743383"></a>Certificate capture</h4></div></div></div><p>Shifu manipulates <span class="emphasis"><em>Windows</em></span> API hooks in order to intercept the certificate password when a certificate is being imported to the certificate store. All the certificate blob data and passwords found in the Crypt32!PFXImportCertStore API will be intercepted, unless the process contains the string &lsquo;torrent&rsquo;. </p><p>The imported public keys on the infected machine will also be captured. This is possible, using the <span class="emphasis"><em>Windows</em></span> Crypt32!CertEnumSystemStore API, without having access to the private key. </p><p>These hooks may be useful to the attackers when the victim imports certificates using a <span class="emphasis"><em>Windows</em></span> PGP client like <span class="emphasis"><em>Gpg4win</em></span>; the hook handlers could intercept the private key and certificate and save it to Shifu&rsquo;s specified log directory as &lsquo;randomhexavalue_cert.pfx&rsquo;. Furthermore, it could be useful if the attackers want to access the cryptocurrency wallet downloaded from the victim machine, which is encrypted using an RSA key pair. </p><p>Shifu&rsquo;s author and its operators will be able to abuse the stolen certificates for nefarious purposes. </p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id4798259"></a>Other data thefts</h4></div></div></div><p>In line with the current cryptocurrency hype, Shifu also targets Bitcoin and Litecoin wallet files found on the victim&rsquo;s machine. Shifu tries to steal VPN and VNC login credentials by checking the command line of running executables. If a remote desktop protocol (RDP or VNC) or VPN process is found with the configuration file name specified in the command line, Shifu attempts to save a copy of the configuration file. </p><p>It appears that this trojan steals far more information than a typical banking trojan would: from keylogging, screenshot capture, certificate capture and cryptocurrency wallet grabbing, to FTP and POP3 credentials grabbing. The malware also appears to target point-of-sale terminals for payment card data as well as some financial institutions themselves. It scans the machines if one of the following strings is found in the path of the executable file of the current process: </p><div class="itemizedlist"><ul type="disc"><li><p>tellerplus</p></li><li><p>bancline</p></li><li><p>fidelity</p></li><li><p>micrsolv</p></li><li><p>bankman</p></li><li><p>vanity</p></li><li><p>episys</p></li><li><p>jack henry</p></li><li><p>cruisenet</p></li><li><p>gplusmain</p></li><li><p>silverlake</p></li><li><p>v48d0250s1</p></li></ul></div><p>When a potential POS machine is found, the malware will send a flag, &lsquo;ETC&rsquo;, back to its C&amp;C server. Based on the malware code, there is no immediate action after the machine has been recognized as a POS system; perhaps a memory-scrapping module will be deployed by the botnet operators to this machine at a later time.</p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3516100"></a>Stealthy banking trojan stays under the radar?</h3></div></div></div><p>When analysing Shifu&rsquo;s <span class="emphasis"><em>Windows</em></span> API-hooking mechanisms, we also discovered that the malware tries to remain hidden from the victim. The malware conceals its presence from the running processes by hijacking the <span class="emphasis"><em>Windows</em></span> ntdll!ZwQuerySystemInformation API, which is called whenever a user-mode program attempts to enumerate a list of active processes using one of various process enumeration APIs. However, this is a well-known technique and is defeated by all modern security tools. Apparently, the purpose of this trick is to remain concealed from non-tech-savvy users, however what confused us is that the malware also hijacks <span class="emphasis"><em>Windows</em></span> API calls used for DNS resolution, such as ws2_32!gethostbyname, ws2_32!getaddrinfo and ws2_32!GetAddrInfoExW, to redirect URLs that contain the pattern &lsquo;secure\..*\.moz\..*&rsquo; to &lsquo;google.com&rsquo;. Essentially, this seems to dismiss the idea of the malware being stealthy, as hijacking a website is often a clear sign of infection.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3634582"></a>Home sweet home</h3></div></div></div><p>When a new machine is infected, the malware will report the new victim to the command-and-control (C&amp;C) server by connecting to a domain that is hard-coded in the code, using the path &lsquo;/news/userlogin.php&rsquo;. The following is the information on the machine that will be stored in the botnet&rsquo;s control panel (also see <a href="#figure.6">Figure 6</a>):</p><div class="itemizedlist"><ul type="disc"><li><p>botid &ndash; username and computer name</p></li><li><p>ver &ndash; botnet version</p></li><li><p>up &ndash; uptime of the infected machine</p></li><li><p>os &ndash; operating system identifier of the infected machine</p></li><li><p>ltime &ndash; local timestamp of the infected machine</p></li><li><p>token &ndash; existence of smart card information</p></li><li><p>cn &ndash; unknown</p></li><li><p>av &ndash; name of the security solution installed</p></li><li><p>dmn &ndash; domain name of the workstation</p></li></ul></div><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Machine information sent back to the C&amp;C control panel." src="/uploads/images/figures/2015/11/Shifu-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Machine information sent back to the C&amp;C control panel.</b></p></div><p>All the data sent and received is obfuscated to prevent direct exposure by a packet sniffer program. The data is encoded and decoded using the RC4 algorithm with the key &lsquo;a7zoSTHljZylEx4o3mJ2eqIdsEguKC15KnyQdfx4RTc5sjH&rsquo;. </p><p>When information is collected on the machine, it is immediately sent back to the C&amp;C server via the path &lsquo;/news/userpanel.php&rsquo;. A fake HTTP referrer, &lsquo;www1.google.com&rsquo;, is used throughout the C&amp;C communications. </p><p>When there is a need to generate a random domain name via a domain generation algorithm (DGA), the malware contacts the master C&amp;C server first to retrieve some configuration data via the path &lsquo;/news/users.php&rsquo;. </p><p>In the payload of the most recently distributed Shifu, with a compilation date of 06 Oct 2015, we have noticed a subtle update: it no longer connects to the C&amp;C server on machines that are found to have Man-in-the-Middle (MitM) interception for HTTPS connections. It makes this check by comparing the certificate&rsquo;s MD5 fingerprint with those of some well-known websites (see <a href="#figure.7">Figure 7</a>):</p><div class="itemizedlist"><ul type="disc"><li><p>microsoft.com</p></li><li><p>dropbox.com</p></li><li><p>twitter.com</p></li><li><p>sendspace.com</p></li><li><p>etrade.com</p></li><li><p>facebook.com</p></li><li><p>instagram.com</p></li><li><p>github.com</p></li><li><p>icloud.com</p></li><li><p>python.org</p></li></ul></div><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Checking the existence of MitM interception on HTTPS." src="/uploads/images/figures/2015/11/Shifu-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Checking the existence of MitM interception on HTTPS.</b></p></div><p>The purpose for this update is believed to be to avoid the malware&rsquo;s SSL traffic being intercepted and analysed by researchers and by intrusion detection systems that typically have SSL traffic inspection capabilities.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4667221"></a>One browser plug-in kills them all</h3></div></div></div><p>It seems that Shifu&rsquo;s author feels nostalgic about the <span class="emphasis"><em>PhishWall</em></span> anti-phishing solution from <span class="emphasis"><em>SecureBrain</em></span>. All third-party browser plug-ins will be disabled immediately via a single registry value, &lsquo;Enable Browser Extensions&rsquo;, located in HKCU\Software\Microsoft\Internet Explorer\Main, if <span class="emphasis"><em>PhishWall</em></span> is found to be installed as an <span class="emphasis"><em>Internet Explorer</em></span> plug-in. This makes sense, given that Shifu was first found to be actively spread in Japan, as <span class="emphasis"><em>SecureBrain</em></span> is a Japanese security provider. Moreover, it appears that Shifu&rsquo;s author is cautious with the <span class="emphasis"><em>SecureBrain</em></span> solution and does not want to create obvious noise &ndash; for example by disabling all browser plug-ins &ndash; that could easily alert non-tech-savvy victims. </p><p>In addition to disabling third-party <span class="emphasis"><em>IE</em></span> plug-ins, it also disables the pop-up blocker in <span class="emphasis"><em>IE</em></span> through a registry key: </p><pre class="programlisting">HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\Zones\3
&quot;1406&quot; = 0
</pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2129108"></a>Botnet-like banking trojan</h3></div></div></div><p>Last but not least, Shifu also allows the botnet operator to download and execute additional modules, hence it supports a limited set of commands. The following is a list of commands currently supported by the malware:</p><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id4145840"></a>webinject </h4></div></div></div><p>Webinjection to the targeted Internet banking sites is carried out through a local <span class="emphasis"><em>Apache</em></span> server installed silently by Shifu. In the underlying code, we realized that the botnet operators issue mitm_mod and mitm_script commands to download a copy of the <span class="emphasis"><em>Apache</em></span> web server software as well as the webinjection script and its associated configuration file, config.xml. When these files are in place on the infected machine, the malware will first modify and make sure the <span class="emphasis"><em>Apache</em></span> server is properly configured by setting the server&rsquo;s address to localhost (127.0.0.1) using a random port for both HTTP and HTTPS. After the server&rsquo;s configuration file is set, the server&rsquo;s process will be started and its status will be monitored periodically through an asynchronous thread every second to make sure it keeps running. </p><p>Webinjection through the local HTTP server won&rsquo;t work without setting up a hook on the browser process. However, the hook implementation is simpler than that of traditional banking trojans. <a href="#table.4">Table 4</a> shows a summary of the hooks on the Winsock API. Besides hooking the Winsock API, it also hijacks the SSL verification API used by the browser process so that the verification is always successful regardless of whether the presented SSL certificates are valid. </p><div class="table"><a id="table.4"></a><table border="1" summary="Hooks on the Winsock API."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Hook Windows API</th><th align="center">Purpose</th></tr></thead><tbody><tr><td>ws2_32!connect ws2_32!connectEx </td><td>Redirect all the HTTP/HTTPS traffic to a local HTTP server to carry out man-in-the-middle operation</td></tr><tr><td>crypt32!CertVerifyCertificateChainPolicy nss3.dll!SSL_AuthCertificateHook nspr4.dll!SSL_AuthCertificateHook</td><td>Always return success when the browser&rsquo;s SSL verification process takes place</td></tr></tbody></table><p class="title"><b>Table&nbsp;4.&nbsp;Hooks on the Winsock API.</b></p></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id2602414"></a>wipe_cookies </h4></div></div></div><p>It is assumed that Shifu is mainly distributed via Flash-based exploit kits. This module allows the botherder to make the botnet clean up Flash cookies found in the %APPDATA%\Macromedia folder to cover the presence of the exploited Flash files.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id3726976"></a>update</h4></div></div></div><p>Like most software, the botnet also supports automatic updates. As the malware uses a trivial protection method to prevent the removal of the malware file &ndash; through an opened file handle &ndash; it must first close the file handle before being able to replace the new binary file.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id2779031"></a>load</h4></div></div></div><p>This allows for the execution of arbitrary executables downloaded from the C&amp;C server.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id2982139"></a>kill_os</h4></div></div></div><p>The real reason why the botnet supports the self-destruction feature (which destroys both the malware and the operating system) is still a mystery to us. But based on the nature of the botnet &ndash; it copies lots of ideas and codes from different notorious malware &ndash; and the fact that it tries to evade analysis by both auto-analysis systems and manual analysis, we can safely assume that the self-destruction routine will be executed when it is found to be executing on an unwilling platform. </p><p>The self-destruction routine (see <a href="#figure.8">Figure 8</a>) is pretty straightforward: </p><div class="itemizedlist"><ul type="disc"><li><p>Remove all the files attached to removable drives, for instance thumb drives. </p></li><li><p>Corrupt the filesystem (e.g. NTFS/FAT) by overwriting its boot sector.</p></li><li><p>Shut down the machine.</p></li><li><p>In case the shutdown operation is not successful, it terminates itself.</p></li></ul></div><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="Shifu&rsquo;s self-destruction routine." src="/uploads/images/figures/2015/11/Shifu-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;Shifu&rsquo;s self-destruction routine.</b></p></div></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4319465"></a>Conclusion</h2></div></div></div><p>In conclusion, Shifu is an enhanced or improved piece of banking malware that has borrowed a lot of techniques from its predecessors; it rectified and refined the weaknesses possibly found in other renowned competitors. The author clearly has a good understanding of how to deal with thread synchronization in multi-threaded applications &ndash; which could indicate that he/she is an experienced programmer. However, the use of some old-school techniques in Shifu can be easily spotted and blocked by many security products.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4114388"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Japanese Banking Trojan Shifu Combines Malware Tools. <span class="bibliosource"><a href="https://blogs.mcafee.com/mcafee-labs/japanese-banking-trojan-shifu-combines-malware-tools/" target="_blank">https://blogs.mcafee.com/mcafee-labs/japanese-banking-trojan-shifu-combines-malware-tools/</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Shifu: &lsquo;Masterful&rsquo; New Banking Trojan Is Attacking 14 Japanese Banks. <span class="bibliosource"><a href="https://securityintelligence.com/shifu-masterful-new-banking-trojan-is-attacking-14-japanese-banks/" target="_blank">https://securityintelligence.com/shifu-masterful-new-banking-trojan-is-attacking-14-japanese-banks/</a></span>. </p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4828290"></a>Appendix</h2></div></div></div><p><a href="#table.a1">Table A1</a> shows the sample SHA1 used in the analysis.</p><div class="table"><a id="table.a1"></a><table border="1" summary="Sample SHA1 used in the analysis."><colgroup><col /><col /><col /></colgroup><thead><tr><th align="center">Compilation timestamp </th><th align="center">Dropper&rsquo;s SHA1</th><th align="center">X86 Payload&rsquo;s SHA1</th></tr></thead><tbody><tr><td>18 August 2015</td><td>963BFC778F94FE190FDD1DD66284E9BC9DD2BED6</td><td>16E4476146511F6B9D8DDF4B232D896D7EC91F50</td></tr><tr><td>06 October 2015</td><td>B4ED692D6E8C35F3C611084E6785972CCAE8DCDC</td><td>8FC58220FD84F3A59F20D52F4A07F07657474467</td></tr></tbody></table><p class="title"><b>Table&nbsp;5.&nbsp;Sample SHA1 used in the analysis.</b></p></div><pre class="programlisting">shifu_fix_iat.py

import idaapi
import idautils

# Global variables
IMG_BASE = idaapi.get_imagebase()
list_seg = []
for seg in idautils.Segments():
 list_seg.append(seg)
IMG_END = idc.SegEnd(list_seg[len(list_seg)-1])

def decrypt(ea, key):
 
 # Virtual address to IMAGE_IMPORT_DESCRIPTOR-&gt;FirstThunk
 va_iat = 0
 # Virtual address to IMAGE_IMPORT_DESCRIPTOR-&gt;OriginalFirstThunk
 va_int = 0
 tmp_ea = ea

 # Back-tracing to locate the IMAGE_IMPORT_DESCRIPTOR from import address table passed from the callback
 for xref in idautils.XrefsTo(ea, 0):
  if XrefTypeName(xref.type) == &lsquo;Data_Offset&rsquo;:
   va_iat = xref.frm - 0x10

 if va_iat != 0:
  print &ldquo;Import Name Table-&gt;%08x&rdquo; % (idaapi.get_long(va_iat) + IMG_BASE)
  va_int = idaapi.get_long(va_iat) + IMG_BASE
 else:
  return

 if va_int != 0:
  va_itd = idaapi.get_long(va_int)
  # Enumerate array of IMAGE_THUNK_DATA
  while va_itd != 0:
   va_itd = va_itd + IMG_BASE
   if va_itd &gt; IMG_BASE and va_itd &lt;= IMG_END:
    print &laquo;Image thunk data-&gt;%08x&raquo; % va_itd
    va_ibn = va_itd + 2
    ch = idaapi.get_byte(va_ibn)
    str = &lsquo;&rsquo;
    while ch != 0 and ch != 255:
   str += chr(ch ^ key)
   va_ibn += 1
   ch = idaapi.get_byte(va_ibn)

   # Save the decoded import name
   print &laquo;IMAGE_IMPORT_BY_NAME-&gt;Name (%08x): %s&raquo; % (va_itd+2, str)
   idc.MakeName(tmp_ea, str)
   tmp_ea += 4

  # Next IMAGE_THUNK_DATA
  va_int += 4
  va_itd = idaapi.get_long(va_int)
 else:
  return

def imp_cb(ea, name, ord):
 if not name:
  print &laquo;%08x: ord#%d&raquo; % (ea, ord)
 else:
  print &laquo;%08x: %s (ord#%d)&raquo; % (ea, name, ord)

 # The decrypt function will be responsible to enumerate IMPORT_DESCRIPTOR_TABLE to decode all the function name
 decrypt(ea, 0xFF)
 # We only want to callback once for every imported DLL
 return False

# Main
nimps = idaapi.get_import_module_qty()

for i in xrange(0, nimps):
 name = idaapi.get_import_module_name(i)
 if not name:
  print &laquo;Failed to get import module name for #%d&raquo; % i
  continue

 print &laquo;Walking-&gt; %s&raquo; % name
 idaapi.enum_import_names(i, imp_cb)

print &laquo;All done...&raquo;
</pre></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2015/vb201511-Shifu.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Shifu â€“ the rise of a self-destructive banking trojan&url=https://www.virusbulletin.com/virusbulletin/2015/11/shifu-rise-self-destructive-banking-trojan"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2015/11/shifu-rise-self-destructive-banking-trojan'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2015/11/shifu-rise-self-destructive-banking-trojan&title=Shifu â€“ the rise of a self-destructive banking trojan"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2015/11/shifu-rise-self-destructive-banking-trojan&t=Shifu â€“ the rise of a self-destructive banking trojan"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2015/11/shifu-rise-self-destructive-banking-trojan"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p>Â </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">Â©1989-2022 Virus Bulletin.Â Â Â Â Â Â Â Â <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>Â Â Â Â Â Â Â Â <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>Â Â Â Â Â Â Â Â <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>