<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2015 paper: Dare ‘DEVIL’: beyond your senses with Dex Visualizer</title>
<meta name="description" content="Given the rapid growth of Android applications and malware, the use of behaviour-based methods is one of the most promising approaches for malware detection. Many security researchers are struggling with how to determine malicious behaviours and identify malware. The visualization of executables is one of the most effective ways to identify malware. However, there is no well-known or generic way for security researchers to visualize the behaviours of Android applications and malware. This paper will explain how the behaviours of Dalvik executables can be visualized effectively by DEVIL (also known as Dex Visualizer), a graph-based approach for visualizing the flow of various Dalvik objects, typically classes. " />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 4983;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1>Dare 'DEVIL': beyond your senses with Dex Visualizer</h1>
<h3>Jun Yong Park</h3>
<p>AhnLab, South Korea</p>
<p><em>Copyright © 2016 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-8413" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="500">Table of contents</div><div id="ccm-remo-expand-content-8413" class="ccm-remo-expand-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /><a class="toc-level2" href="#h2-introduction">Introduction</a><br /><a class="toc-level3" href="#h3-dare-devil">Dare 'DEVIL'</a><br /><a class="toc-level2" href="#h2-app-lifecycle-graph">App lifecycle graph</a><br /><a class="toc-level3" href="#h3-entry-point">Entry point</a><br /><a class="toc-level3" href="#h3-intent">Intent</a><br /><a class="toc-level3" href="#h3-permission">Permission</a><br /><a class="toc-level3" href="#h3-app-component">App component</a><br /><a class="toc-level3" href="#h3-runnable-component">Runnable component</a><br /><a class="toc-level3" href="#h3-import">Import</a><br /><a class="toc-level3" href="#h3-string">String</a><br /><a class="toc-level2" href="#h2-app-lifecycling">App lifecycling</a><br /><a class="toc-level2" href="#h2-case-studies">Case studies</a><br /><a class="toc-level3" href="#h3-android-trojannarut-a">Android-Trojan/Narut (A)</a><br /><a class="toc-level3" href="#h3-android-trojankortalk">Android-Trojan/KorTalk</a><br /><a class="toc-level3" href="#h3-android-trojannarut-b">Android-Trojan/Narut (B)</a><br /><a class="toc-level3" href="#h3-android-trojanbankun">Android-Trojan/Bankun</a><br /><a class="toc-level3" href="#h3-android-trojandendroid">Android-Trojan/Dendroid</a><br /><a class="toc-level3" href="#h3-android-backdoorsmsmonitor">Android-Backdoor/SMSMonitor</a><br /><a class="toc-level2" href="#h2-conclusions">Conclusions</a><br /><a class="toc-level2" href="#h2-references">References</a></p>
<p> </p></div></div><h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>Given the rapid growth of <em>Android</em> applications and malware, the use of behaviour-based methods is one of the most promising approaches for malware detection. Many security researchers are struggling with how to determine malicious behaviours and identify malware. The visualization of executables is one of the most effective ways to identify malware. However, there is no well-known or generic way for security researchers to visualize the behaviours of Android applications and malware.</p>
<p>In this paper, I will explain how the behaviours of Dalvik executables can be visualized effectively by DEVIL (also known as Dex Visualizer), a graph-based approach for visualizing the flow of various Dalvik objects, typically classes. Currently, DEVIL uses only information from static analysis but it can easily be adapted to integrate information from dynamic analysis. The paper will focus on how to generate inter-object relationships and visualize a graph of those relationships. For example, inter-object relationships can be generated by tracing so-called <em>Android</em> Application Lifecycle triggers, which could be <em>Android</em> APIs, permissions, intents and so on. A graph of the inter-object relationships is visualized using a force-directed layout algorithm of the d3.js framework.</p>
<p>Finally, I will demonstrate some results of force-directed graph visualization of <em>Android</em> malware and will finish with some examples of how DEVIL could be applied in detecting <em>Android</em> malware.</p>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>The use of behaviour-based methods is one of the most promising approaches for the detection of <em>Android</em> malware. Many security researchers are struggling with how to determine malicious behaviours and identify <em>Android</em> malware.</p>
<p>Over the past few years, <em>Android</em> security researchers have been investing quite a lot of time and effort into the creation of <em>Android</em> sandboxes. Most of them are based on dynamic analysis, and output many logs about file and network operations. We have taken it for granted that the behaviours of an <em>Android</em> app can be identified easily by investigating file and network operations. This leads to frequent misunderstandings about behaviour-based detection. Ideally, the behaviours of an executable could be identified effectively by tracking down the flows of code. However, it is not an easy task to monitor and log all kinds of code operations.</p>
<p>In this paper, I attempt to show how the behaviours of an <em>Android</em> app can be shown as inter-object relationships via static code analysis, instead of monitoring file and network operations. I will discuss how to visualize the graph of inter-object relationships, and I will finish up with some examples that show how effectively a well-drawn behavioural graph can be applied in detecting <em>Android</em> malware.</p>
<h2><a class="chapter" name="h2-br-see-the-wood-for-the-trees"></a>See the wood for the trees</h2>
<p>Every <em>Android</em> app has essential building blocks known as app components. Each component serves a distinct purpose and has a distinct lifecycle that defines how that component is created and destroyed. Some interact each other, some depend on each other. These relationships between the app components construct the lifecycle of an <em>Android</em> app. Figuring out the app lifecycle of an <em>Android</em> app is much more important than investigating a few interesting code blocks of app components.</p>
<p>However, with a rapidly increasing volume of <em>Android</em> malware, daily <em>Android</em> malware responses are apt to be the repetitive and tedious hunting for suspicious code. As the saying goes, we can't see the wood for the trees. In order to see the wood, we need to build an automated analysis system that can assist our intelligence. In addition, visualization in the age of automated malware analysis can heighten the senses of our intelligence researchers who may be blinded by a deluge of malware.</p>
<h3><a class="chapter" name="h3-dare-devil"></a>Dare 'DEVIL'</h3>
<p>With the motivations described above, in March 2014 I began to write small scripts in Python and JavaScript for personal use. I used various open-source libraries in my personal pilot, including Flask, jquery, androguard, d3.js and more. As my pilot matured, I named it 'DEVIL', also known as 'Dex Visualizer'. It was made available to my co-workers later the same year, and by early 2015, we were using a beta version of DEVIL heavily at work on a daily basis while researching <em>Android</em> malware samples.<a href="#figure1"> Figure 1</a> shows a simple representation of the construction of DEVIL. <a class=" anchor" name="figure1"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/8314/6348/7055/Park-VB2015-01.jpg" alt="Park-VB2015-01.jpg" width="845" height="545" /></p>
<p class="centered-caption">Figure 1: The construction of DEVIL (Dex Visualizer).</p>
<p>As can be seen in <a href="#figure1">Figure 1</a>, DEVIL has a simple client-server architecture. DEVIL.py is running on the WSGI HTTP server configured with both Flask and gunicorn. A user can submit an <em>Android</em> application package (APK) file to the server, and the server sends a JSON response that contains the inter-object relationships generated from the Dex file. On the client side, DEVIL.js renders the app lifecycle graph using the force-directed layout algorithm of d3.js. Before rendering the app lifecycle graph, the relational data sent from the server is transformed into the nodes and link data structures that are mandatory in a force-directed layout. In fact, DEVIL has a variety of features other than the graph visualization, but we only deal with the features related to the graph visualization, because most of the other features are implemented to help us analyse <em>Android</em> apps in efficient ways and eventually implement the visualization engine.</p>
<h2><a class="chapter" name="h2-app-lifecycle-graph"></a>App lifecycle graph</h2>
<p>As mentioned, the relationships between app components – of which there are four different types –are the basis of the app lifecycle. The four components alone, however, are not enough to reveal the behaviours of an <em>Android</em> app. They can only show a high-level view in the best case. DEVIL uses the app components only as the seed nodes of the app lifecycle graph. It then generates the relationships between the app components and other meaningful objects such as intents, permissions, threads and more, using static code analysis. However, it is not an easy job to discuss the low-level technical details all at once. To make our life simpler, we will take a simple, fictitious malware sample, and walk through the realization of its app lifecycle graph, step by step. The fictitious malware, Android-Test/PNStealer, steals IMEI and phone numbers and sends stolen data to a specific email address. <a href="#figure2">Figure 2 </a>shows the app lifecycle graph of Android-Test/PNStealer. <a class=" anchor" name="figure2"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/5014/6348/7182/Park-VB2015-02.jpg" alt="Park-VB2015-02.jpg" width="845" height="557" /><span class="centered-caption">Figure 2: App lifecycle graph of the fictitious Android-Test/PNStealer.</span></p>
<h3><a class="chapter" name="h3-entry-point"></a>Entry point</h3>
<p>Initially, the app lifecycle graph has only one abstract node, the EP (entry point) node (see <a href="#figure3">Figure 3</a>). As will be seen later, the EP node plays a more important role than any others, so it has quite a large radius and is depicted in gold. <a class=" anchor" name="figure3"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/5014/6348/7257/Park-VB2015-03.jpg" alt="Park-VB2015-03.jpg" width="845" height="552" /><span class="centered-caption">Figure 3: The initial state of the app lifecycle graph.</span></p>
<h3><a class="chapter" name="h3-intent"></a>Intent</h3>
<p>Next, the intent nodes are added to the graph (see <a href="#figure4">Figure 4</a>). The intent-related information can be acquired via two techniques. One is reading from the AndroidManifest.xml file, and the other is analysing the Dalvik bytecodes of the Dex file. The former is just a straightforward read operation, while the latter needs to be dealt with differently. DEVIL emulates Dalvik bytecodes, with the goal being to trace the life of objects we are interested in. For example, the intent object is the most important, because its main role is as the trigger for activating the app component. <a class=" anchor" name="figure4"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/7914/6348/7354/Park-VB2015-04.jpg" alt="Park-VB2015-04.jpg" width="845" height="554" /><span class="centered-caption">Figure 4: Intent nodes added to app lifecycle graph.</span></p>
<p>Back to the graph, the MAIN intent node refers to the ACTION_MAIN action which indicates that this is the main entry point and it does not expect any intent data. The LAUNCHER intent node refers to the CATEGORY_LAUNCHER category, which indicates that this activity's icon should be placed in the system's app launcher. Accordingly, the MAIN and LAUNCHER intent nodes have the same colour as the EP node to which the MAIN node is connected.</p>
<p>Note that, universally on the app lifecycle graph, the larger the radius of a node, the more noteworthy behaviours it has. Similarly, the more edges a node has, the larger radius it has. So, in <a href="#figure4">Figure 4</a>, the EP node is larger than the MAIN node, and the MAIN node is larger than the LAUNCHER node.</p>
<h3><a class="chapter" name="h3-permission"></a>Permission</h3>
<p>Next, the permission nodes are added to the graph (see <a href="#figure5">Figure 5</a>). All the permissions an <em>Android</em> app requires must be declared in the AndroidManifest.xml file. But as the manifest file could declare literally just a list of required permissions, DEVIL tracks down all the details of those permission usages via static code analysis and a type of propagation algorithm. On the app lifecycle graph, the permission node is depicted in red. <a class=" anchor" name="figure5"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/4514/6348/7467/Park-VB2015-05.jpg" alt="Park-VB2015-05.jpg" width="845" height="555" /><span class="centered-caption">Figure 5: Permission nodes added to app lifecycle graph.</span></p>
<p>In <a href="#figure5">Figure 5</a>, the INTERNET node is larger than the READ_PHONE_STATE node. In other words, DEVIL considers the INTERNET permission more important than the READ_PHONE_STATE permission.</p>
<h3><a class="chapter" name="h3-app-component"></a>App component</h3>
<p>Next, the app component nodes are added to the graph (see <a href="#figure6">Figure 6</a>). Every <em>Android</em> app has app components. There are four different types: activities, services, content providers and broadcast receivers. Before the <em>Android</em> system can start an app component, the system must know that the component exists by reading the app's AndroidManifest.xml file. However, it is not enough to depend on the manifest file, because single Dex files are submitted as malware samples every day. DEVIL extracts the app component classes by parsing the Dex header. This is done simply by inspecting whether a class extends or implements the android.app.Activity class, android.app.Service class, android.content.ContentProvider class, android.content.BroadcastReceiver class and the like. This technique is a better method than using the manifest file, due to the fact that the app components of some well-crafted pieces of malware are not declared in the manifest file but registered dynamically at runtime. <a class=" anchor" name="figure6"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/6314/6348/7591/Park-VB2015-06.jpg" alt="Park-VB2015-06.jpg" width="845" height="551" /><span class="centered-caption">Figure 6: App component node added to app lifecycle graph.</span></p>
<p>Note that, in <a href="#figure6">Figure 6</a>, the MainActivity class node is depicted in hot pink as it is the main entry point.</p>
<h3><a class="chapter" name="h3-runnable-component"></a>Runnable component</h3>
<p>In <em>Android</em> you should not block the UI thread. If you have operations to perform that are not instantaneous, you should make sure they are done in separate threads. This applies to <em>Android</em> malware as well. The design patterns are so vital that the long-running behaviours of <em>Android</em> malware must be implemented in separate threads.</p>
<p>Hence, we add the runnable component nodes to the graph (see <a href="#figure7">Figure 7</a>). DEVIL defines the runnable component class as a class extending or implementing java.lang.Thread class, java.lang.Runnable class and android.os.AsycTask class and the like. However, there are more. Only the named runnable components are added to the app lifecycle graph. <a class=" anchor" name="figure7"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/9314/6348/7752/Park-VB2015-07.jpg" alt="Park-VB2015-07.jpg" width="845" height="553" /><span class="centered-caption">Figure 7: Runnable component node added to app lifecycle graph.</span></p>
<p>Note that, universally on the app lifecycle graph, the class nodes are depicted in grey.</p>
<h3><a class="chapter" name="h3-import"></a>Import</h3>
<p>Next, the import nodes are added to the graph (see <a href="#figure8">Figure 8</a>). While analysing any binary codes, cross-reference information is more useful than one could imagine, to outline the functionalities of the executable. For instance, if we are to reverse engineer a Portable Executable (PE) file, it is crucial to understand the import sections of it. Unfortunately, the import-section-like information is not located in any specific sections of the Dex file header. We must discover the import classes of Dex for ourselves. As mentioned, the app components play a significant role for the seed nodes of an app lifecycle graph. Accordingly, DEVIL defines the import class as a class referenced by the app components. An import class could also have its own imports recursively. <a class=" anchor" name="figure8"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/4114/6348/7844/Park-VB2015-08.jpg" alt="Park-VB2015-08.jpg" width="845" height="554" /><span class="centered-caption">Figure 8: Import nodes added to app lifecycle graph.</span></p>
<p>In <a href="#figure8">Figure 8</a>, the GMailSender class is imported from both the MainActivity class and the SendMainThread class.</p>
<h3><a class="chapter" name="h3-string"></a>String</h3>
<p>Next, the string nodes are added to the graph (see <a href="#figure9">Figure 9</a>). While DEVIL emulates Dalvik bytecode, the virtual Java string objects mimicking the java.lang.String, java.lang.StringBuilder, java.lang.StringBuffer classes and more, are maintained. Then, should the virtual Java string object be referenced as a parameter in the invoke commands related to either the app components or the imports, DEVIL will generate the relationship between the text of the object and the class in which the invoke commands are issued. However, the string node has one more restriction in that the text of the object is meaningful, containing, for example, a URL, email or text that specifies important keywords and so on. <a class=" anchor" name="figure9"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/3414/6348/7904/Park-VB2015-09.jpg" alt="Park-VB2015-09.jpg" width="845" height="552" /><span class="centered-caption">Figure 9: String nodes added to app lifecycle graph.</span></p>
<p>In <a href="#figure9">Figure 9</a>, from the top, one URL, one email and one keyword node are added.</p>
<h2><a class="chapter" name="h2-app-lifecycling"></a>App lifecycling</h2>
<p>So far we have focused on how to build the app lifecycle graph. From now on we will discuss how effectively the app lifecycle graph can be applied in detecting <em>Android</em> malware. Prior to seeing the real-world malware samples in a case study, we should have a general idea of the app lifecycling. The app lifecycling could simply be put as: traversing all outgoing nodes from one node on the app lifecycle graph recursively, typically from entry points, until there are no more nodes to visit. Yes, it is all about traversing a graph. However, as we will see in the next section, app lifecycling is very useful for investigating the behaviours of an <em>Android</em> app. It is also very effective for identifying a distinct behaviour of an <em>Android</em> app. Therefore it is well suited to detecting the suspicious behaviours of <em>Android</em> malware. In <a href="#figure10">Figure 10</a>, the bold red lines with arrow heads show our first app lifecycling. <a class=" anchor" name="figure10"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/1014/6348/8044/Park-VB2015-10.jpg" alt="Park-VB2015-10.jpg" width="845" height="553" /><span class="centered-caption">Figure 10: App lifecycling of Android-Test/PNStealer.</span></p>
<h2><a class="chapter" name="h2-case-studies"></a>Case studies</h2>
<p>The increasing number of <em>Android</em> malware samples seen every day has overwhelmed the manpower available to analyse and classify them. The most challenging task is to pick out small, unusual patterns from giant piles of binary code. It is like finding a needle in a haystack. In the following case studies, we will address at length these kind of problems. A few walk-throughs of real-world malware samples will show some new perspectives, and eventually tell a story of how effectively a well-drawn graph could be used in finding unusual patterns and making a reasoned assumption about malicious behaviours.</p>
<h3><a class="chapter" name="h3-android-trojannarut-a"></a>Android-Trojan/Narut (A)</h3>
<p><a href="#figure11">Figure 11</a> shows the app lifecycle graph of Android-Trojan/Narut (A). It is clear that the MainActivity class is the main entry point of this malware sample, as it is connected to the MAIN and the LAUNCHER intent nodes. The one outgoing edge from the MainActivity class node points to the InstallService class node, which means that the MainActivity class starts the InstallService class. The InstallService class node is connected to the READ_LOGS permission node. <span>This means that the InstallService class requires the </span><span>android.permission.READ_LOGS permission, which allows an application to read the low-level system log files. Also, the InstallService class node has an outgoing edge to the application/vnd.android.package-archive MIME type node, which means that the InstallService class has the functionality of downloading an APK file. Finally, the InstallService class node has three more outgoing edges to the string nodes labelled 'exec', 'chmod 777' and 'pm install -r getPath()', which means that the InstallService class executes those commands.</span> <a class=" anchor" name="figure11"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/9914/6348/8136/Park-VB2015-11.jpg" alt="Park-VB2015-11.jpg" width="845" height="551" /><span class="centered-caption">Figure 11: App lifecycle graph of Android-Trojan/Narut (A).</span></p>
<p>In a nutshell, Android-Trojan/Narut (A) requires one unusual permission, and if it starts, it downloads and installs one APK file. Above everything else, the app lifecycling of Android-Trojan/Narut (A) has the complete coverage of the app lifecycle graph. Putting together all of behaviours we have seen, we can say that Android-Trojan/Narut (A) is certainly malicious.</p>
<p>Note that all the work has been done without investigating any binary code but simply by reading the app lifecycle graph of the malware.</p>
<h3><a class="chapter" name="h3-android-trojankortalk"></a>Android-Trojan/KorTalk</h3>
<p><a href="#figure12">Figure 12</a> shows the app lifecycle graph of Android-Trojan/KorTalk. This malware sample has some distinct characteristics, such as accessing the SMS inbox, hiding the app icon in the Launcher, and registering a DeviceAdminReceiver, all at the beginning. The MainActivity class node has two outgoing edges to the string nodes labelled as the address beginning with content://sms/, which explains the behaviour of accessing the SMS inbox. The CHANGE_COMPONENT_ENABLED_STATE permission is required by the MainActivity class, which explains the hiding of the app icon in the Launcher. Finally, the DEVICE_ADMIN_ENABLE intent node has an incoming edge from the MainActivity class node and has an outgoing edge to the LSecScreen class node, which requires the BIND_DEVICE_ADMIN permission. This tells us that the MainActivity class registers the LSecScreen class as a DeviceAdminReceiver. As seen, even just a simple picture with nine nodes and eight edges, or internally a list of eight inter-object relations, can represent over three malicious behaviours very well. <a class=" anchor" name="figure12"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/3714/6348/8253/Park-VB2015-12.jpg" alt="Park-VB2015-12.jpg" width="845" height="557" /><span class="centered-caption">Figure 12: App lifecycle graph of Android-Trojan/KorTalk.</span></p>
<p>Next, the Android-Trojan/KorTalk malware sample has the MainApp class extending the Application class. On the app lifecycle graph, the inheritance of class is represented by the node in a yellow-green colour. The <em>Android</em> reference describes the Application class as the 'Base class for those who need to maintain global application state. You can provide your own implementation by specifying its name in your AndroidManifest.xml's &lt;application&gt; tag, which will cause that class to be instantiated for you when the process for your application/package is created.' As the context of the entire application, the Application class will be the starting point when executing the program.</p>
<p>In <a href="#figure13">Figure 13</a>, therefore, the EP node and the Application class node are connected to each other. The MainApp class references five receivers in total: SentgReceiver, SingReceiver, DeliveryReceiver, TingReceiver and TickReceiver class. At the very beginning of the app, even before the main activity is created and UIs are seen by the user, Android-Trojan/KorTalk calls the five receivers in a stealthy way. The five receivers also have both an outgoing edge to and an incoming edge from their own intent action nodes, which means that all five receivers register themselves as the broadcast receiver. The behaviours of the MainApp class are clearly malicious, and the app lifecycle graph makes an intricate story quite simple in a manner never seen before. <a class=" anchor" name="figure13"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/9514/6348/8341/Park-VB2015-13.jpg" alt="Park-VB2015-13.jpg" width="845" height="571" /><span class="centered-caption">Figure 13: App lifecycle graph of Android-Trojan/KorTalk.</span></p>
<h3><a class="chapter" name="h3-android-trojannarut-b"></a>Android-Trojan/Narut (B)</h3>
<p><a href="#figure14">Figure 14</a> shows the app lifecycle graph of Android-Trojan/Narut (B). This malware sample has no main activity, generally declared as MAIN in AndroidManifest.xml. Instead, it has an unusual entry point: the App class extending the Application class. We have already seen this characteristic in the case of Android-Trojan/KorTalk. In this case, the App class references the DexClassLoader class directly or by importing the Util class to realize the dynamic class loading. The App class also references the ACall class for loading the native library named 'secexe'. Finally, the Util class imported by both the App class and the ACall class requires the READ_LOGS permission and executes chmod and kill commands. <a class=" anchor" name="figure14"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/3014/6348/8419/Park-VB2015-14.jpg" alt="Park-VB2015-14.jpg" width="845" height="551" /><span class="centered-caption">Figure 14: App lifecycle graph of Android-Trojan/Narut (B).</span></p>
<p>These behaviours, on the whole, are the distinct features of notorious packers in <em>Android</em>, and the app lifecycle graph does represent their behaviours very well. Of course, we cannot use visualization to unpack the malicious apps being packed, but we can use visualization to readily identify and classify both known and unknown packed malware.</p>
<h3><a class="chapter" name="h3-android-trojanbankun"></a>Android-Trojan/Bankun</h3>
<p><a href="#figure15">Figure 15</a> shows the app lifecycle graph of Android-Trojan/Bankun. This malware sample has interesting characteristics in that one broadcast receiver, the 'a' class in <a href="#figure15">Figure 15</a>, has too many intent actions. We can find this unusual feature by reading the AndroidManifest.xml file, and of course by viewing the app lifecycle graph. The latter can tell the same story in less boring and more representative ways. <a class=" anchor" name="figure15"></a></p>
<p><img style="border: 0.5px solid black;" src="/files/5214/6348/8496/Park-VB2015-15.jpg" alt="Park-VB2015-15.jpg" width="845" height="554" /><span class="centered-caption">Figure 15: App lifecycle graph of Android-Trojan/Bankun.</span></p>
<p>On the app lifecycle graph, the sky-blue-coloured nodes represent the intent actions as mentioned. In this case, most of the intent actions are connected to the 'a' class. Accordingly, the radius of the 'a' class node has grown to the largest of all. Furthermore, force layout algorithms naturally expand the range of the 'a' class node and its intent action nodes to the largest of all, too.</p>
<h3><a class="chapter" name="h3-android-trojandendroid"></a>Android-Trojan/Dendroid</h3>
<p>When there are many prevalent variants of one piece of malware, we should dig out the common characteristics of the family and then contain the whole malware family as efficiently as possible. In this case, an app lifecycle graph could make our lives easier and more productive.</p>
<p><a href="#figure16">Figure 16</a> represents the infamous Android-Trojan/Dendroid malware family. Dendroid is a custom Remote Access Toolkit (RAT) for <em>Android</em>. A RAT is a type of malware that is used to remotely control the devices on which it is installed. The toolkit is being sold for $300 to anyone who wants to automate the malware distribution process. The creator promises that the malware can take pictures using the phone's camera, record audio and video, download existing pictures, record calls, send texts, and more. The Dendroid malware family has so many functions that it leads to a heavy workload for security researchers. <a class=" anchor" name="figure16"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/1914/6348/8724/Park-VB2015-16.jpg" alt="Park-VB2015-16.jpg" width="845" height="555" /><span class="centered-caption">Figure 16: App lifecycle graph of Android-Trojan/Dendroid.</span></p>
<p>With the app lifecycle graph, however, it would take much less time and effort to determine a sample as being an Android-Trojan/Dendroid variant. Every Android-Trojan/Dendroid variant has a large, sunflower-shaped subgraph in the centre of its app lifecycle graph. So to speak, all Android-Trojan/Dendroid variants have many cross-references to their inner classes, which implement the majority of its malicious behaviours. This characteristic gives the sunflower-like shape to the app lifecycle graphs, even if they have been heavily obfuscated.</p>
<p>Humans tend to perceive and remember the world in images, and malware researchers are no exception. They can perceive and remember malware samples in images. Moreover, if you have a well-made visualization engine like DEVIL in your arsenal, it would become much easier to identify new malware with your own senses. For example, if you encounter new samples which have a subgraph that is very similar to that of Android-Trojan/Dendroid, you can assume it is malicious and predict the malware family it might belong to.</p>
<h3><a class="chapter" name="h3-android-backdoorsmsmonitor"></a>Android-Backdoor/SMSMonitor</h3>
<p>Of all types of <em>Android</em> malware, identifying a piece of repackaging malware is more challenging than any others. But in this case if we could make the best of the app lifecycle graph, we would make the detection as simple as it gets. To cut a long story short, by comparing the graph of a legitimate app with that of suspicious ones, their maliciousness could easily be revealed.</p>
<p>In <a href="#figure17">Figure 17</a>, the graph on the left-hand side is that of a legitimate app, BounceBall, while the graph on the right-hand side is that of a repackaged one, Android-Backdoor/SMSMonitor. Take a closer look at the two graphs. They have the main entry point, BounceBallActivity class, in common, which is highlighted in the green box. In addition, Android-Backdoor/SMSMonitor has one more graph independent of the main entry point, which is highlighted in the red box. On the additional graph, which is unseen in a legitimate app, the broadcast receiver, SMSMonitor class, plays a role as another entry point that receives the SMS_RECEIVED intent, requires the INTERNET, READ_LOGS, READ_PHONE_STATE and ACCESS_FINE_LOCATION permissions, and performs an abortBroadcast(). The user will never see the SMS, which will not appear on his mobile phone. The SMSMonitor class also accesses phone numbers and pictures, and references the Recording class, which requires the RECORD_AUDIO permission. Finally, the SMSMonitor class visits two suspicious URLs ending with saveinfo.php and getinfo. <a class=" anchor" name="figure17"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/9914/6348/8821/Park-VB2015-17.jpg" alt="Park-VB2015-17.jpg" width="845" height="550" /><span class="centered-caption">Figure 17: App lifecycle graphs of BounceBall and Android-Backdoor/SmsMonitor.</span></p>
<p>The comparison of the two app lifecycle graphs easily reveals both the common functionalities and the additional ones.</p>
<h2><a class="chapter" name="h2-conclusions"></a>Conclusions</h2>
<p>Every <em>Android</em> app has essential building blocks known as app components. The relationships between app components construct the app lifecycle, which can effectively be visualized in a graph using force-directed layout algorithms. The app lifecycle graph is well suited to analysing how an <em>Android</em> app operates. The app lifecycling traverses all outgoing nodes from one node on the app lifecycle graph recursively, typically from entry points, until there are no more nodes to visit. App lifecycling is useful for analysing the behaviours of an <em>Android</em> app. App lifecycling is so effective in identifying the distinct behaviours of an <em>Android</em> app that it can be used to detect the malicious behaviour of <em>Android</em> malware. By comparing the graph of a legitimate app with that of suspicious ones, we can also identify repackaging malware.</p>
<p>To sum up, the proper visualization of malware as performed by DEVIL (Dex Visualizer) could be a wonderful tool to provide insight into the behaviours of Android malware and can even heighten the senses of security researchers who are drowning in a deluge of rapidly increasing malware. As the saying goes, a picture is worth a thousand words.</p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] <a href="https://developer.android.com/reference/packages.html" target="_blank">http://developer.android.com/reference/packages.html</a>.<br /><a class=" anchor" name="ref2"></a>[2] <a href="https://github.com/androguard/androguard" target="_blank">https://github.com/androguard/androguard</a>.<br /><a class=" anchor" name="ref3"></a>[3] <a href="https://d3js.org/" target="_blank">http://d3js.org/</a>.<br /><a class=" anchor" name="ref4"></a>[4] <a href="https://en.wikipedia.org/wiki/Force-directed_graph_drawing" target="_blank">http://en.wikipedia.org/wiki/Force-directed_graph_drawing</a>.<br /><a class=" anchor" name="ref5"></a>[5] <a href="http://cs.brown.edu/~rt/gdhandbook/chapters/force-directed.pdf" target="_blank">http://cs.brown.edu/~rt/gdhandbook/chapters/force-directed.pdf</a>.</p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2015/Park-VB2015.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2015 paper: Dare ‘DEVIL’: beyond your senses with Dex Visualizer&url=https://www.virusbulletin.com/virusbulletin/2016/12/vb2015-paper-dare-devil-beyond-your-senses-dex-visualizer"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2016/12/vb2015-paper-dare-devil-beyond-your-senses-dex-visualizer'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2016/12/vb2015-paper-dare-devil-beyond-your-senses-dex-visualizer&title=VB2015 paper: Dare ‘DEVIL’: beyond your senses with Dex Visualizer"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2016/12/vb2015-paper-dare-devil-beyond-your-senses-dex-visualizer&t=VB2015 paper: Dare ‘DEVIL’: beyond your senses with Dex Visualizer"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2016/12/vb2015-paper-dare-devil-beyond-your-senses-dex-visualizer"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
 <div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>