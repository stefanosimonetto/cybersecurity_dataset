<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: DLL hijacking</title>
<meta name="description" content="There are a few good reasons for taking another look at DLL hijacking - including the fact that we don't learn from our mistakes. Aleksander Czarnowski takes an in-depth look at the DLL hijacking story." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 2023;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201102-DLL-hijacking"></a>DLL hijacking</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2011-02-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Aleksander P.</span> <span class="surname">Czarnowski</span></h3><span class="orgname">AVET INS</span>, <span class="orgdiv">Poland</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>There are a few good reasons for taking another look at DLL hijacking - including the fact that we don&#39;t learn from our mistakes. Aleksander Czarnowski takes an in-depth look at the DLL hijacking story.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2011 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-3392" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-3392" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3810411"></a></span></dt><dt><span class="sect1"><a href="#id3161286">CreateProcess( ) vulnerabilities</a></span></dt><dt><span class="sect1"><a href="#id3035876">Importing functions</a></span></dt><dt><span class="sect1"><a href="#id4349853">DLL hijacking vulnerability</a></span></dt><dt><span class="sect1"><a href="#id4313395">DLL hijacking detection</a></span></dt><dt><span class="sect1"><a href="#id2305439">Exploitation process</a></span></dt><dt><span class="sect1"><a href="#id4222562">Defence strategies</a></span></dt><dt><span class="sect1"><a href="#id2628669">Summary</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3810411"></a></h2></div></div></div><p>Is there any good reason to write any more about DLL hijacking? After all, by the time you read this all the hype about those vulnerabilities will (probably) be over&hellip; Who needs to read another article about a popular class of vulnerability?</p><p>Well, there are a few good reasons &ndash; the best one I can think of is that we don&rsquo;t learn from our mistakes. The first mistake is that, for a lot of people, security is not risk-driven but hype-driven. Of course it is important to remediate every vulnerability as quickly as possible, and a vulnerability in <em class="productname">iTunes</em> will receive more attention than a similar one in an <em class="productname">SVN</em> client.</p><p>The second mistake is that clearly documented and well described functionality can, after more than 10 years, suddenly become a vulnerability. Not only that, but it will also trigger a lot of research all around the world. The third mistake is that, while for the last couple of years there have been a few different attempts to build strong vulnerability taxonomies and dictionaries supporting them, we still have not learned how to fully exploit this knowledge.</p><p>Looking at the good old CreateProcess() problems one can easily imagine the DLL hijacking issue. So why did nobody see the danger earlier? In fact, the problem goes back as far as 1999/2000. In 1999, <span class="emphasis"><em>Microsoft</em></span> published its MS99-006 advisory, and on 18 September 2000 Georgi Guninski posted the &lsquo;Microsoft Windows DLL search path weakness&rsquo; advisory to the bugtraq mailing list.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3161286"></a>CreateProcess( ) vulnerabilities</h2></div></div></div><p>When discussing the DLL hijacking issue one cannot forget about similar problems with CreateProcess(). As the name implies, the aim of this function is to create (and run) a new process. The definition of CreateProcess is as follows:</p><pre class="programlisting">BOOL CreateProcess(
  LPCTSTR lpApplicationName,
  LPTSTR lpCommandLine,
  LPSECURITY_ATTRIBUTES lpProcessAttributes,
  LPSECURITY_ATTRIBUTES lpThreadAttributes,
  BOOL bInheritHandles,
  DWORD dwCreationFlags,
  LPVOID lpEnvironment,
  LPCTSTR lpCurrentDirectory,
  LPSTARTUPINFO lpStartupInfo,
  LPPROCESS_INFORMATION lpProcessInformation
);</pre><p>The problem is that lpApplicationName should contain the name of the program (module) to be created by the system loader. Unfortunately, this parameter can also be set to NULL, which causes the system to interpret the first space delimited token from lpCommandLine as the module name. Imagine a call like this:</p><pre class="programlisting">BOOL bOk = CreateProcess(NULL, &ldquo;C:\\Program files\\some_dir\\module.exe&rdquo;, [&hellip;]);</pre><p>In such a case the system loader will try to expand tokens from lpCommandLine in order to find the first match of executable module location. Therefore dangerous combinations will be checked, such as c:\Program.exe files\some_dir\module.exe</p><p>If Program.exe exists in the c:\ directory it will be executed even though the author of the code wanted to execute module.exe from c:\Program files\some_dir\. This behaviour is clearly described in [<span class="citation"><a href="#citation.1">1</a></span>].</p><p>It turns out that such insecure coding practices can lead to serious vulnerabilities, and we&rsquo;ve seen a stream of exploits for this type of problem.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3035876"></a>Importing functions</h2></div></div></div><p>On the <span class="emphasis"><em>Windows</em></span> platform there are two legal ways of importing functions exported by dynamic link libraries:</p><div class="itemizedlist"><ul type="disc"><li><p>By PE file Import Address Table (IAT) &ndash; for the sake of this discussion we will omit delay load import tables and late binding.</p></li><li><p>By LoadLibrary()/GetProcAddress() calls.</p></li></ul></div><p>The Import function does not exist in the caller module but can be loaded into the caller address space. Thus it is the job of the operating system image loader to parse the import table and load dynamic link libraries accordingly before passing execution to the main thread of the newly created process. This process can be observed with help from the <span class="emphasis"><em>Windows</em></span> Debugging API (more on this later). The system loader finds the IAT by using the OptionalHeader member of the IMAGE_NT_HEADERS structure. The IMAGE_OPTIONAL_HEADER structure contains arrays of the IMAGE_DATA_DIRECTORY structure (there are 16 members). Member 12 contains the Import Address Table. It is worth remembering that some functions are not exported by name, but by ordinal numbers only.</p><p>The second option is based on LoadLibrary/LoadLibraryEx. These <span class="emphasis"><em>Windows</em></span> API functions enable the loading of dynamic link libraries during runtime regardless of the content of the Import Address Table. GetProcAddress allows the address of the function within the loaded DLL to be acquired.</p><p>Several DLLs of the same name can exist within the filesystem as long as they are located in different folders. Furthermore, <em class="productname">Windows</em> even supports such a situation by providing a Dynamic Link Library Redirection mechanism. To enable it the user must create a redirection file which must follow the naming scheme: app_name.local.</p><p>If the application just calls LoadLibrary, passing only the DLL filename without the fully qualified path, then it leads to the DLL hijacking problem.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4349853"></a>DLL hijacking vulnerability</h2></div></div></div><p><span class="emphasis"><em>Microsoft</em></span> provides several aids in loading dynamic link libraries. The most important libraries are specified in the KnownDLLs registry key: HKLM/System/CurrentControlSet/Control/Session Manager/KnownDLLs. In case of legacy 16-bit DLLs the correct key on <span class="emphasis"><em>Windows XP</em></span>/<span class="emphasis"><em>2000</em></span> is: HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\WOW. If an executable module wants to load a library from this list then the system image loader will know where to look for it and load the correct file. Inside KnownDLLs there is a DllDirectory key which specifies where the system should look for known DLLs (%SystemRoot%\system32 by default for 32-bit systems). In fact, this simple mechanism used to be vulnerable on the <span class="emphasis"><em>Windows NT</em></span> platform (consult <span class="emphasis"><em>Microsoft Security Bulletin</em></span> MS99-006 [<span class="citation"><a href="#citation.2">2</a></span>] for details). The MS99-066 bulletin can be considered one of the grandfathers of the DLL hijacking attack vector.</p><p>DLL hijacking was possible due to the loading algorithm used by <span class="emphasis"><em>Windows</em></span> in the case of an insecure LoadLibrary() call. <span class="emphasis"><em>Microsoft</em></span> made the mistake of making the current directory first on the list of places to look for DLLs. This was fixed by the introduction of the SafeDllSearchMode registry value (HKLM\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode), which allows the DLL search process to be controlled in case the full path is missing. Quoting from <span class="emphasis"><em>MSDN</em></span>: if SafeDllSearchMode is enabled, the search order is as follows:</p><div class="orderedlist"><ol type="1"><li><p>The directory from which the application loaded.</p></li><li><p>The system directory. Use the GetSystemDirectory function to get the path of this directory.</p></li><li><p>The 16-bit system directory. There is no function that obtains the path of this directory, but it is searched.</p></li><li><p>The Windows directory. Use the GetWindowsDirectory function to get the path of this directory.</p></li><li><p>The current directory.</p></li><li><p>The directories that are listed in the PATH environment variable. Note that this does not include the per-application path specified by the App Paths registry key. The App Paths key is not used when computing the DLL search path.</p></li></ol></div><p>If SafeDllSearchMode is disabled, the search order is as follows:</p><div class="orderedlist"><ol type="1"><li><p>The directory from which the application loaded.</p></li><li><p>The current directory.</p></li><li><p>The system directory. Use the GetSystemDirectory function to get the path of this directory.</p></li><li><p>The 16-bit system directory. There is no function that obtains the path of this directory, but it is searched.</p></li><li><p>The Windows directory. Use the GetWindowsDirectory function to get the path of this directory.</p></li><li><p>The directories that are listed in the PATH environment variable. Note that this does not include the per-application path specified by the App Paths registry key. The App Paths key is not used when computing the DLL search path.</p></li></ol></div><p>Furthermore, the application can have some additional control on DLL loading either by calling LoadLibraryEX with the LOAD_WITH_ALTERED_SEARCH_PATH flag, or by calling SetDllDirectory. Unfortunately, many applications don&rsquo;t use either method and lazy programmers issue LoadLibrary with just a DLL name.</p><p>When the first matching DLL filename has been found by the system image loader, <span class="emphasis"><em>Windows</em></span> abandons any further search. This &lsquo;first find wins&rsquo; strategy allows an attacker to plant a DLL in the directory that is searched before the one containing the legal library if the application is loading a DLL only using the filename. What is even more important is that network shares can also be searched for DLLs.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4313395"></a>DLL hijacking detection</h2></div></div></div><p>In [<span class="citation"><a href="#citation.3">3</a></span>] the authors describe detection methods not only for the <span class="emphasis"><em>Windows</em></span> platform but also for other operating systems. On <span class="emphasis"><em>Windows</em></span>, detection using dynamic analysis is a simple process thanks to the availability of the Debugging API and a great set of debuggers like <span class="emphasis"><em>OllyDBG</em></span> and <span class="emphasis"><em>IDA Pro</em></span>. We just need to hook the LoadLibrary call and inspect the first argument passed to it. The definition of the LoadLibary function is as follows:</p><pre class="programlisting">HMODULE WINAPI LoadLibrary(
__in LPCTSTR lpFileName
);</pre><p>The above definition comes from the <span class="emphasis"><em>Windows</em></span> platform SDK. However, Kernel32.dll exports two versions of this function:</p><div class="orderedlist"><ol type="1"><li><p>LoadLibraryA (ANSI)</p></li><li><p>LoadLibraryW (Unicode)</p></li></ol></div><p>Therefore we need to hook these function calls (don&rsquo;t forget about LoadLibraryExW and LoadLibraryExA) in order to catch all possible DLLs loading during runtime. Next we run our module, catch all LoadLibrary* calls and inspect the lpFileName argument for the full, proper path definition. If the path location is invalid or missing we have found a vulnerability. Theoretically, this makes the detection process trivial, allowing almost anyone to find such a vulnerability (which posts to the bugtraq mailing list seem to confirm).</p><p>Unfortunately, finding a vulnerability and proving that there is no such vulnerability in a module are two completely different things. The problem lies in the code coverage and execution flow. Until we can prove that all execution paths that call LoadLibrary* functions have been covered by our analysis, we cannot claim that a module is not vulnerable. This problem can partially be solved with the help of static analysis as we can enumerate all LoadLibrary* calls within the module and then enumerate all cross references to those functions or methods. Most LoadLibrary() calls are made with a static value of lpFileName. If all calls are made with static names (as in <a href="#figure.1">Figure 1</a>) than we can perform all checks using only static methods.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Example of passing a static string as lpFileName to the LoadLibraryA function." src="/uploads/images/figures/2011/02/fig1.PNG" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Example of passing a static string as lpFileName to the LoadLibraryA function.</b></p></div><p>Returning to a dynamic analysis approach, hooking LoadLibraryA and LoadLibraryW calls is only one possible method. Hooking can be done with <span class="emphasis"><em>Microsoft Detours</em></span> library, int 3 breakpoints or hardware breakpoints. However, a much better approach is to use the <span class="emphasis"><em>Windows</em></span> Debugging API:</p><div class="orderedlist"><ol type="1"><li><p>Start the debugging process with CreateProcess() with the DEBUG_PROCESS flag.</p></li><li><p>Start module execution.</p></li><li><p>Process the debug event with WaitForDebugEvent().</p></li><li><p>Check for LOAD_DLL_DEBUG_EVENT and process it.</p></li><li><p>ContinueDebugEvent() in order to resume process execution.</p></li><li><p>When EXIT_PROCESS_DEBUG_EVENT has been caught, quit the debugging loop.</p></li></ol></div><p>Another option is proposed in [3], based on the LdrLoadDll function from ntdll.dll. To equip the binary in order to trace system image loader activity we don&rsquo;t need any special tools besides <span class="emphasis"><em>WinDbg</em></span> [<span class="citation"><a href="#citation.4">4</a></span>]:</p><div class="orderedlist"><ol type="1"><li><p>Run gflags.exe from the WinDbg main directory.</p></li><li><p>Click on the Image File tab and enter the image filename.</p></li><li><p>Press the tab key to enable the checkbox options and select &lsquo;Show loader snaps&rsquo;, as in <a href="#figure.2">Figure 2</a>.</p></li><li><p>Click OK to dismiss the dialog box.</p></li><li><p>Run WinDbg and select Open Executable (Ctrl+E). In the file dialog box choose notepad.exe and load it.</p></li><li><p>You will see the list of loaded modules and then debug information from the system image loader, as shown in <a href="#figure.3">Figure 3</a>.</p></li></ol></div><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Select the &lsquo;Show loader snaps&rsquo; option." src="/uploads/images/figures/2011/02/fig2.PNG" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Select the &lsquo;Show loader snaps&rsquo; option.</b></p></div><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Using WinDbg to catch system image loader activity." src="/uploads/images/figures/2011/02/fig3.PNG" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Using WinDbg to catch system image loader activity.</b></p></div><p>There is one interesting call: LdrLoadDll. Inspection of this function reveals that it calls another function call, LdrpLoadDll. This is the work horse that does most of the work during the loading of the DLL and mapping it into the process address space. The complete list of calls by the LdrLoadDll function is presented in <a href="#figure.4">Figure 4</a>.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="LdrLoadDll (Windows XP SP3) call list generated by IDA Pro." src="/uploads/images/figures/2011/02/fig4.PNG" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;LdrLoadDll (Windows XP SP3) call list generated by IDA Pro.</b></p></div><p>Another detection option is to use Process Monitor and catch all CreateFile and LoadImage operations with paths containing .dll, .DLL, .sys and .SYS. Exclude events with SUCCESS results and paths that end with pagefile.sys. Now run Process Monitor and look for failed DLL load attempts.</p><p>When considering detection approaches keep in mind that there is a set of applications that &lsquo;dislike&rsquo; being debugged. Several copy protection schemes are good examples. The most simple check is to invoke IsDebuggerPresent(), which can easily be bypassed either by patching this function, changing the return value or changing the IsDebuggerPresent flag in the process PEB. Of course there are many other anti-debugging tricks around [<span class="citation"><a href="#citation.5">5</a></span>], [<span class="citation"><a href="#citation.6">6</a></span>], [<span class="citation"><a href="#citation.7">7</a></span>], [<span class="citation"><a href="#citation.8">8</a></span>], [<span class="citation"><a href="#citation.9">9</a></span>], [<span class="citation"><a href="#citation.10">10</a></span>], [<span class="citation"><a href="#citation.11">11</a></span>], [<span class="citation"><a href="#citation.12">12</a></span>], [<span class="citation"><a href="#citation.13">13</a></span>], [<span class="citation"><a href="#citation.14">14</a></span>], [<span class="citation"><a href="#citation.15">15</a></span>], [<span class="citation"><a href="#citation.16">16</a></span>], [<span class="citation"><a href="#citation.17">17</a></span>], [<span class="citation"><a href="#citation.18">18</a></span>], [<span class="citation"><a href="#citation.19">19</a></span>]. The point here is that some applications cannot be instrumented easily with the Debugging API and other approaches like Process Monitor must be used. However, the best detection option is to search the source code for LoadLibrary* calls.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2305439"></a>Exploitation process</h2></div></div></div><p>Another thing which makes DLL hijacking or binary planting (as it&rsquo;s called in the original ACROS advisory) so similar to the CreateProcess() vulnerability is the ease with which it can be exploited. An attacker just needs to &lsquo;plant&rsquo; his own DLL in the proper folder so that his library is loaded first (the second &ndash; real &ndash; one never gets its chance to load). Wouldn&rsquo;t it be easier simply to overwrite the original DLL file? The answer is yes, and no. An attacker might not have write privilege, or else <span class="emphasis"><em>Windows Resource Protection</em></span> (the newer version of <span class="emphasis"><em>Windows File Protection</em></span> on <span class="emphasis"><em>Vista</em></span>/<span class="emphasis"><em>Windows 2008 Server</em></span> systems) might protect files from being overwritten. However, the attacker might have write access to a directory which will be searched for DLLs before inspecting those protected by the <span class="emphasis"><em>Windows</em></span> security model. So, in the end, DLL hijacking can provide some value to the attacker, both for local and remote attacks.</p><p>In order to conduct the attack an attacker needs his own DLL. This can be written in any language supporting DLL files. A simple DLL template written in assembly language is presented below:</p><pre class="programlisting">format PE DLL
entry DllEntryPoint
include &lsquo;win32ax.inc&rsquo;
section &lsquo;.text&rsquo; code readable executable
proc DllEntryPoint hinstDLL,fdwReason,lpvReserved
     cmp [fdwReason], DLL_PROCESS_ATTACH
     je pattach
     cmp [fdwReason], DLL_PROCESS_DETACH
     je pdetach
     cmp [fdwReason], DLL_THREAD_ATTACH
     je tattach
     cmp [fdwReason], DLL_THREAD_DETACH
     je tdetach
exit:
     mov   eax,TRUE
     ret
pattach:
     call exploit
pdetach:
tattach:
tdetach:
     jmp exit
endp
proc exploit
     mov edi, edi      ;simulate hotpatching entry
     nop   ;make space/call for the debugger or
     int 3 ;detour if not using mov edi, edi for           ;it
     nop
     invoke MessageBox,NULL,&rsquo;DLL Hijacker: exploit&rsquo;, &lsquo;Exploited&rsquo;,MB_ICONERROR+MB_OK
     ret
endp
section &lsquo;.idata&rsquo; import data readable writeable
     library kernel,&rsquo;KERNEL32.DLL&rsquo;,\
           user,&rsquo;USER32.DLL&rsquo;
     import user,\
           MessageBox,&rsquo;MessageBoxA&rsquo;</pre><p>This can be compiled using FASM [<span class="citation"><a href="#citation.20">20</a></span>]. Of course, for more complicated DLLs, C/C++ might be a better option. The reason for choosing assembly language in the first place was its small output size and ability to insert shellcode in place of the MessageBox call. However, for testing or demonstrating vulnerabilities, the MessageBox call will do its job perfectly. Now you just need to plant the DLL and find a vulnerable application. The approaches discussed so far should be enough to get started. There are already tools that automate the whole process. A good example is DLLHijackAuditKit v2 from the MetaSploit project [<span class="citation"><a href="#citation.21">21</a></span>]. This kit will build test cases for DLLs in your system (01_StartAudit.bat) and generate proof-of-concept &lsquo;exploits&rsquo; executing calc.exe for vulnerable cases (02_Analyze.bat).</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4222562"></a>Defence strategies</h2></div></div></div><p>All of the attack vectors mentioned have resulted in the addition of new features to the <span class="emphasis"><em>Windows</em></span> operating system over time:</p><div class="itemizedlist"><ul type="disc"><li><p>Windows Resource Protection</p></li><li><p>The SafeDLLSearchMode registry key</p></li><li><p>The SetDllDirectory function</p></li><li><p>The SetSearchPath function</p></li><li><p>The SetSearchPathMode function</p></li><li><p>The CWDIllegalInDllSearch registry key</p></li></ul></div><p>SafeDLLSearchMode is enabled by default on recent <span class="emphasis"><em>Windows</em></span> systems. This key controls the DLL search order. The key HKLM\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode should be set to 1 to enable this feature. How this setting affects the search order has already been described in the &lsquo;Dll hijacking vulnerability&rsquo; section.</p><p>The SetSearchPathMode function is a newly created API to allow <span class="emphasis"><em>IE</em></span> to force the current directory to be searched after the system location has been checked. Of course, nothing stops programmers from using it in their own applications. Similar to SetSearchPath, SetSearchPathMode affects only the current process and has no impact on other running processes.</p><p>The CWDIllegalInDllSearch registry key enables a system administrator to:</p><div class="itemizedlist"><ul type="disc"><li><p>Remove the current directory from the search path when loading DLLs</p></li><li><p>Disable DLL loading from the WebDAV location</p></li><li><p>Disable DLL loading from WebDAV and remote UNC address locations.</p></li></ul></div><p>The settings above can be applied system-wide or on a per-application basis. To use the CWDIllegalDllSearch key it must be added to:</p><div class="itemizedlist"><ul type="disc"><li><p>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager in order to enable it for the whole system</p></li><li><p>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\&lt;application binary name&gt; to enable it for a specified application only.</p></li></ul></div><p>Values for this key are described in [<span class="citation"><a href="#citation.22">22</a></span>].</p><p>Obviously, the best defence is the secure calling of the LoadLibrary() and LoadLibraryEx() functions. The safeguards mentioned previously will not address all possible vulnerabilities and some options cannot be deployed in certain configurations, for example. This brings us to the point where patching vulnerable applications is the best safeguard possible. In order to fix this type of vulnerability efficiently it must be addressed on a source code level. The following are some tips for developers on using LoadLibrary* API:</p><div class="itemizedlist"><ul type="disc"><li><p>Always specify the fully qualified path.</p></li><li><p>Remove the current directory from the DLL search path by using SetDllDirectory with an empty string during application initialization.</p></li><li><p>If possible, use DLL redirection or a manifest to ensure the proper DLL will be loaded.</p></li><li><p>SearchPath should not be used to locate a DLL unless safe process search mode is enabled. Avoid using SearchPath if possible.</p></li><li><p>Never base your assumption about system version/service pack level on successful DLL loading. Use the GetVersionEx() function and base your assumption on its results.</p></li><li><p>Enable safe DLL search mode.</p></li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2628669"></a>Summary</h2></div></div></div><p>In the end, the whole DLL hijacking story wasn&rsquo;t so dull after all. It made me look inside LdrLoadDll and browse through ntdll.dll, which is always fun and you can always learn something new. It also demonstrated a few strong points about security. The most import one &ndash; from both a customer&rsquo;s and a developer&rsquo;s perspective &ndash; is that, while easy to detect, vulnerabilities might not be easy to fix at the operating system level. Secondly, it is possible for automatic or manual detection of simple vulnerabilities to fail and provide false results.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3462439"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] CreateProcess function. <span class="bibliosource"><a href="https://msdn.microsoft.com/en-us/library/ms682425" target="_blank">http://msdn.microsoft.com/en-us/library/ms682425</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Microsoft Security Advisor Program: Microsoft Security Bulletin (MS99-006). <span class="bibliosource"><a href="https://www.microsoft.com/technet/security/bulletin/ms99-006.mspx" target="_blank">http://www.microsoft.com/technet/security/bulletin/ms99-006.mspx</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Kwon, T.; Su, Z. Automatic Detection of Vulnerable Dynamic Component Loadings, University of California.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Debugging Tools for Windows. <span class="bibliosource"><a href="https://www.microsoft.com/whdc/devtools/debugging/default.mspx" target="_blank">http://www.microsoft.com/whdc/devtools/debugging/default.mspx</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] Ferrie, P. Anti-unpacker tricks. <span class="bibliosource"><a href="http://pferrie.tripod.com/papers/unpackers.pdf" target="_blank">http://pferrie.tripod.com/papers/unpackers.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] Ferrie, P. Virus Bulletin December 2008. Anti-unpacker tricks &ndash; part one. <span class="bibliosource"><a href="/uploads/pdf/magazine/2008/200812.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2008/200812.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] Ferrie, P. Virus Bulletin January 2009. Anti-unpacker tricks &ndash; part two. <span class="bibliosource"><a href="/uploads/pdf/magazine/2009/200901.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2009/200901.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] Ferrie, P. Virus Bulletin February 2009. Anti-unpacker tricks &ndash; part three. <span class="bibliosource"><a href="/uploads/pdf/magazine/2009/200902.pdf." target="_blank">http://www.virusbtn.com/pdf/magazine/2009/200902.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] Ferrie, P. Virus Bulletin March 2009. Anti-unpacker tricks &ndash; part four. <span class="bibliosource"><a href="/uploads/pdf/magazine/2009/200903.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2009/200903.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] Ferrie, P. Virus Bulletin April 2009. Anti-unpacker tricks &ndash; part five. <span class="bibliosource"><a href="/uploads/pdf/magazine/2009/200904.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2009/200904.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.11"></a><p class="bibliomixed">[11] Ferrie, P. Virus Bulletin May 2009. Anti-unpacker tricks &ndash; part six. <span class="bibliosource"><a href="/uploads/pdf/magazine/2009/200905.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2009/200905.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.12"></a><p class="bibliomixed">[12] Ferrie, P. Virus Bulletin June 2009. Anti-unpacker tricks &ndash; part seven. <span class="bibliosource"><a href="/uploads/pdf/magazine/2009/200906.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2009/200906.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.13"></a><p class="bibliomixed">[13] Ferrie, P. Virus Bulletin May 2010. Anti-unpacker tricks &ndash; part eight. <span class="bibliosource"><a href="/uploads/pdf/magazine/2010/201005.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2010/201005.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.14"></a><p class="bibliomixed">[14] Ferrie, P. Virus Bulletin June 2010. Anti-unpacker tricks &ndash; part nine. <span class="bibliosource"><a href="/uploads/pdf/magazine/2010/201006.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2010/201006.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.15"></a><p class="bibliomixed">[15] Ferrie, P. Virus Bulletin July 2010. Anti-unpacker tricks &ndash; part ten. <span class="bibliosource"><a href="/uploads/pdf/magazine/2010/201007.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2010/201007.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.16"></a><p class="bibliomixed">[16] Ferrie, P. Virus Bulletin August 2010. Anti-unpacker tricks &ndash; part eleven. <span class="bibliosource"><a href="/uploads/pdf/magazine/2010/201008.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2010/201008.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.17"></a><p class="bibliomixed">[17] Ferrie, P. Virus Bulletin September 2010. Anti-unpacker tricks &ndash; part twelve. <span class="bibliosource"><a href="/uploads/pdf/magazine/2010/201009.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2010/201009.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.18"></a><p class="bibliomixed">[18] Ferrie, P. Virus Bulletin October 2010. Anti-unpacker tricks &ndash; part thirteen. <span class="bibliosource"><a href="/uploads/pdf/magazine/2010/201010.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2010/201010.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.19"></a><p class="bibliomixed">[19] Ferrie, P. Virus Bulletin November 2010. Anti-unpacker tricks &ndash; part fourteen. <span class="bibliosource"><a href="/uploads/pdf/magazine/2010/201011.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2010/201011.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.20"></a><p class="bibliomixed">[20] Flat Assembler. <span class="bibliosource"><a href="http://flatassembler.net/" target="_blank">http://flatassembler.net/</a></span>.</p></div><div class="bibliomixed"><a id="citation.21"></a><p class="bibliomixed">[21] DLLHijackAuditKit. v2 <span class="bibliosource"><a href="http://blog.metasploit.com/2010/08/better-faster-stronger.html" target="_blank">http://blog.metasploit.com/2010/08/better-faster-stronger.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.22"></a><p class="bibliomixed">[22] A new CWDIllegalInDllSearch registry entry is available to control the DLL search path algorithm. <span class="bibliosource"><a href="https://support.microsoft.com/kb/2264107/en-us" target="_blank">http://support.microsoft.com/kb/2264107/en-us</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=DLL hijacking&url=https://www.virusbulletin.com/virusbulletin/2011/02/dll-hijacking"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2011/02/dll-hijacking'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2011/02/dll-hijacking&title=DLL hijacking"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2011/02/dll-hijacking&t=DLL hijacking"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2011/02/dll-hijacking"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>