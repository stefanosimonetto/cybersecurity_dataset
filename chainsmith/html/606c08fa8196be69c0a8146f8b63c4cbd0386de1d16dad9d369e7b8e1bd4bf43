<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Distinguishing between malicious app collusion and benign app collaboration: a machine-learning approach</title>
<meta name="description" content="Two or more mobile apps, viewed independently, may not appear to be malicious - but in combination, they could become harmful by exchanging information with one another and by performing malicious activities together. In this paper we look at how machine-learning methods can be used to detect app collusions." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 5879;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-distinguishing-between-malicious-app-collusion-and-benign-app-collaboration-machine-learning-approach"></a>Distinguishing between malicious app collusion and benign app collaboration: a machine-learning approach</h1>
<h3><a class="chapter" name="h3-irina-mariuca-asavoae"></a>Irina Mariuca Asavoae</h3>
<p>Swansea University, UK</p>
<h3><a class="chapter" name="h3-jorge-blasco"></a>Jorge Blasco</h3>
<p>Royal Holloway, University of London, UK</p>
<h3><a class="chapter" name="h3-thomas-m-chen"></a>Thomas M. Chen</h3>
<p>City University London, UK</p>
<h3><a class="chapter" name="h3-harsha-kumara-kalutarage"></a>Harsha Kumara Kalutarage</h3>
<p>Queen's University Belfast, UK</p>
<h3><a class="chapter" name="h3-igor-muttik"></a>Igor Muttik</h3>
<p>Cyber Curio, UK</p>
<h3><a class="chapter" name="h3-hoang-nga-nguyen"></a>Hoang Nga Nguyen</h3>
<p>Coventry University, UK</p>
<h3><a class="chapter" name="h3-liam-oreilly"></a>Liam O'Reilly</h3>
<p>Swansea University, UK</p>
<h3><a class="chapter" name="h3-markus-roggenbach"></a>Markus Roggenbach</h3>
<p>Swansea University, UK</p>
<h3><a class="chapter" name="h3-siraj-ahmed-shaikh"></a>Siraj Ahmed Shaikh</h3>
<p>Coventry University, UK</p>
<p><em>Copyright © 2018 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-12320" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-12320" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-1-introduction">1. Introduction</a><br /> <a class="toc-level3" href="#h3-definitions">Definitions</a><br /> <a class="toc-level2" href="#h2-2-examples">2. Examples</a><br /> <a class="toc-level3" href="#h3-21-collaborating-app-set">2.1. A collaborating app set</a><br /> <a class="toc-level3" href="#h3-22-colluding-app-set">2.2. A colluding app set</a><br /> <a class="toc-level2" href="#h2-3-speculative-approach-distinguish-between-collusion-and-collaboration">3. A speculative approach to distinguish between collusion and collaboration</a><br /> <a class="toc-level3" href="#h3-31-code-obfuscation">3.1. Code obfuscation</a><br /> <a class="toc-level3" href="#h3-32-properties-extracted-app-documentation">3.2. Properties extracted from app documentation</a><br /> <a class="toc-level3" href="#h3-33-ability-app-detect-if-other-apps-are-installed">3.3. Ability of an app to detect if other apps are installed</a><br /> <a class="toc-level3" href="#h3-34-permissions-used-vs-permissions-requested">3.4. Permissions used vs permissions requested</a><br /> <a class="toc-level3" href="#h3-35-code-similarity">3.5. Code similarity</a><br /> <a class="toc-level3" href="#h3-36-user-interaction">3.6. User interaction</a><br /> <a class="toc-level3" href="#h3-37-dynamic-features">3.7. Dynamic features</a><br /> <a class="toc-level2" href="#h2-4-machine-learning">4. Machine learning</a><br /> <a class="toc-level2" href="#h2-5-future-android">5. Future of Android</a><br /> <a class="toc-level2" href="#h2-6-conclusion">6. Conclusion</a><br /> <a class="toc-level2" href="#h2-footnotes">Footnotes</a><br /> <a class="toc-level2" href="#h2-references">References</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-1-introduction"></a>1. Introduction</h2>
<p>Mobile operating systems support multiple communication methods between apps running on mobile devices. Unfortunately, these convenient inter-app communication mechanisms also make it possible to carry out harmful actions in a collaborative fashion. Two or more mobile apps, viewed independently, may not appear to be malicious. However, in combination they could become harmful by exchanging information with one another and by performing malicious activities together. In 2014, a collaborative project known as ACiD was set up (<a href="http://acidproject.org.uk" target="_blank">http://acidproject.org.uk</a>), one of the aims of which was to investigate this potential threat. ACiD stands for 'Application Collusion Detection'. Our main focus was <em>Android</em> OS, which we expected to be the primary target for attacks based on app collusion.</p>
<p>Multi-app threats have been considered theoretically for some years, but with the help of tools developed as part of the ACiD project, we were able to discover multiple colluding apps in the wild [<a href="#ref1">1</a>, <a href="#ref2">2</a>].</p>
<p>In an attempt to evade detection both by mobile security tools and by malware and privacy filters employed by app markets, attackers may try to leverage multiple apps with different capabilities and permissions to achieve their goals – for example, using an app with access to sensitive data to communicate with another app that has Internet access. This technique of app collusion is difficult to detect, as each app will appear benign to most tools, enabling attackers to penetrate a large number of devices for a long period of time before they are caught.</p>
<p>This paper aims to:</p>
<ul>
<li>Provide a concise definition of mobile app collusion</li>
<li>Summarize the state of the art</li>
<li>Dive into how mobile app collusion attacks are manifested</li>
<li>Describe what tools and methods (both automated and manual) malware researchers can employ in order to discover and prove the existence of such attacks on <em>Android</em> devices.</li>
</ul>
<p> </p>
<h3><a class="chapter" name="h3-definitions"></a>Definitions</h3>
<p>During our initial analysis it became apparent that it is important to start with a set of good definitions. The reason is that inter-app communications are pretty common and take many forms – from benign to malicious. In most cases, communications are implemented by design and are documented and/or expected by the user. Occasionally, however, one app may use a vulnerability (a bug or a design flaw) in another app to perform actions other than those that are declared via its permissions. Meanwhile, the darkest end of the 'app spectrum' may be populated with app pairs (or triplets, etc.) which are deliberately designed to communicate with each other in order to violate security and privacy.</p>
<p>Identifying the properties associated with such bad behaviours would allow tools to be targeted to discover these malevolent forms of inter-app communication. Of course, the aim would be to exclude, as much as possible, benign apps where communications are implemented deliberately for the benefit of the user.</p>
<p>For a given a set of <em>Android</em> applications which are known to communicate with each other, we have defined the following three app categories:</p>
<ul>
<li><strong>Collaborating apps</strong>: these apps are benign, their communications are implemented by design, they are useful, documented, and/or visible to the user.</li>
<li><strong>Confused deputies</strong>: in these cases one app is exploiting a vulnerability or a design flaw in another app in order to perform actions beyond its own declared capabilities.</li>
<li><strong>Colluding apps</strong>: these are sets of apps where inter-app communications are deliberately used for malicious purposes.</li>
</ul>
<p>A scalable method for discovering and distinguishing these three app categories could be based on extracting features related to inter-app communications and employing machine-learning methods. To this end, we discuss features that may help solve this classification problem; we also investigate the nature and type of features that can be extracted automatically and discuss tools that can be used for feature extraction. For a number of apps we provide example values of the features.</p>
<p>For practical reasons, and because features separating malicious collusions and confused deputy scenarios are rather limited, we focus on distinguishing collaborating apps from the two malicious categories.</p>
<p>The rest of the paper is organized as follows: in <a href="#h2-2-examples">Section 2</a>, we discuss two typical example sets of collaborating apps and colluding apps. In <a href="#h2-3-speculative-approach-distinguish-between-collusion-and-collaboration">Section 3</a>, we discuss a number of potential features that could help to distinguish between collaboration and collusion. For each of these features we discuss what it is, why it might be useful, how it can automatically be extracted, what values the feature yields for the example sets from Section 2, and finally, we give a brief evaluation of the feature (which, given the small size of the data set, can only be speculative). In <a href="#h2-4-machine-learning">Section 4</a>, we describe various machine-learning approaches that could be applied. We conclude the paper with some remarks on the future of <em>Android</em>.</p>
<p> </p>
<h2><a class="chapter" name="h2-2-examples"></a>2. Examples</h2>
<h3><a class="chapter" name="h3-21-collaborating-app-set"></a>2.1. A collaborating app set</h3>
<p>The<em> Amazon Shopping</em> app (com.amazon.mShop.android.shopping, version 14.2.0.100) collaborates with the <em>Facebook</em> app (com.facebook.katana, version 149.0.0.40.71) to allow users to share interesting items with others via <em>Facebook</em>. When a user finds an item that they wish to share with others, they can use the built-in <em>Android</em> share function. When activating this <em>Android</em> share facility, the menu that is presented changes depending on what apps are installed (see <a href="#figure1">Figure 1</a>). For instance, if the <em>Facebook</em> app is installed then one would be able to share the content with <em>Facebook</em> and create a new post. This is an example of collaboration that supports a user's workflow. <a class=" anchor" name="figure1"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/542d45582363292850a7b5d4c4dc35b0_f2694.jpg" alt="collaborating-colluding-1.jpg" width="580" height="242" /> <span class="centered-caption">Figure 1: Left: Sharing an item from the Amazon Shopping app without the Facebook app installed. Right: Sharing an item from the Amazon Shopping app with the Facebook app installed yields a new menu entry, allowing the user to post the item to their Facebook account.</span></p>
<p>Note that the <em>Amazon Shopping</em> app documents this behaviour on <em>Google Play</em> and lists the following product feature: 'Send and share links to products via email, SMS, Facebook, Twitter, and more.' Note further that in this example we report on the existence of a collaboration but refrain from making any claim concerning the absence of a collusion between these two apps.</p>
<p> </p>
<h3><a class="chapter" name="h3-22-colluding-app-set"></a>2.2. A colluding app set</h3>
<p>When working on the ACiD project, we discovered a group of apps that used collusion to synchronize the execution of a potentially harmful payload. This payload was embedded into all the apps through a library called MoPlus SDK. MoPlus is included in more than 5,000 <em>Android</em> installation packages (APKs). This library has been known to be malicious since November 2015 [<a href="#ref3">3</a>]. However, the collusion behaviour of the SDK was previously unknown.</p>
<p>We found that apps that included the malicious version of the MoPlus SDK would talk to each other (when running on the same device) to check which of them had the highest privileges. The app with the highest privileges would then be chosen to execute a local HTTP client to receive commands from an external C&amp;C server, maximizing the effects of the malicious payload. MoPlus was using SharedPreferences and Intents for inter-app communication. (For a more detailed description of the colluding behaviour of these apps, please see [<a href="#ref4">4</a>].)</p>
<p>For this paper we performed experiments on colluding app sets which carried the MoPlus SDK. <a href="#table1">Table 1</a> provides a summary of those apps, along with their package names and MD5 hashes for ease of identification by other researchers.<a class=" anchor" name="table1"></a></p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>ID</strong></td>
<td><strong>Package</strong></td>
<td><strong>Version</strong></td>
<td><strong>MD5</strong></td>
</tr>
<tr>
<td>C1</td>
<td>com.baidu.searchbox</td>
<td>6.0</td>
<td>062f91b3b1c900e2bc710166e6510654</td>
</tr>
<tr>
<td>C2</td>
<td>com.game.jewelsstar</td>
<td>1.6</td>
<td>00c7a61c7dababe41954879a8ec883dc</td>
</tr>
<tr>
<td>C3</td>
<td>com.baidu.browser.apps</td>
<td>5.6.4.0</td>
<td>0230e68490a88d2d4fc0184428ba2c07</td>
</tr>
<tr>
<td>C4</td>
<td>com.baidu.browser.apps</td>
<td>5.6.4.0</td>
<td>0658c01e2f28dff29bc40d57df6a0336</td>
</tr>
<tr>
<td>C5</td>
<td>com.appandetc.sexypuzzle</td>
<td>1.9.9.1</td>
<td>01a05de59d875077866dc3d81e889d9c</td>
</tr>
<tr>
<td>C6</td>
<td>com.baidu.appsearch</td>
<td>6.1.0</td>
<td>05260d6cc0a4d43e0346b368ddce8029</td>
</tr>
<tr>
<td>C7</td>
<td>com.baidu.appsearch</td>
<td>6.3.1</td>
<td>03f39e7de7ed90789b349d2a7a097d0b</td>
</tr>
<tr>
<td>C8</td>
<td>com.baidu.appsearch</td>
<td>6.4.0</td>
<td>0742c85c39c67c21c0b2fc9f33ab1232</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 1: Set of colluding apps used for the experiments in this paper. C3 and C4 have the same package and version number, but differ in some of their content.</p>
<p> </p>
<h2><a class="chapter" name="h2-3-speculative-approach-distinguish-between-collusion-and-collaboration"></a>3. A speculative approach to distinguish between collusion and collaboration</h2>
<p>We investigate the hypothesis that a number of features related to inter-app communications can automatically be extracted from APKs and that, with the help of machine learning, they can be used to distinguish between collaboration and collusion.</p>
<p>It should be noted that our approach is necessarily a speculative one due to a lack of labelled data (in other words, app sets classified as either benign or colluding maliciously) – there has been only one set of colluding apps identified in the field, and it is a challenge to provide many app sets exhibiting beneficial collaboration (where ideally one would also know that these collaborating apps don't collude).</p>
<p>To this end, we have identified a number of potential static features for which we will examine:</p>
<ul>
<li>Why they might be useful in order to distinguish between collusion and collaboration</li>
<li>Whether they can be extracted automatically using current tools</li>
<li>Their nature.</li>
</ul>
<p>Apart from simple features related to communications (e.g. sending and receiving intents) there are several less obvious features to consider:</p>
<ol>
<li>Code obfuscation</li>
<li>Properties extracted from app documentation</li>
<li>Ability of an app to detect if other apps are installed</li>
<li>Permissions used vs permissions requested</li>
<li>Code similarity.</li>
</ol>
<p>For each of these features we will extract sample data from the collaborating and colluding app sets described in <a href="#h2-2-examples">Section 2</a>. Having examined the feature, we will discuss how suitable it appears for our purpose. Criteria include the possibility of automatic extraction and first indications based on our examples.</p>
<p>Additionally, we have considered the feature:</p>
<p style="padding-left: 30px;">6. User interaction.</p>
<p>Though this might be quite a useful feature, due to a lack of corresponding tools, it is not possible to extract it automatically. We shall discuss in detail why this feature (currently) is not applicable.</p>
<p>Finally, we explore dynamic features.</p>
<p> </p>
<h3><a class="chapter" name="h3-31-code-obfuscation"></a>3.1. Code obfuscation</h3>
<p><em><strong>What it is:</strong></em> Code obfuscation refers to code transformations that hide code functionality (fully) from human readers, e.g. for the purpose of intellectual property protection, or for disabling automatic functionality detectors, e.g. code analysers. A survey of code obfuscation techniques and obfuscation tools is presented in [<a href="#ref5">5</a>].</p>
<p><em><strong>Why it might be a useful feature:</strong></em> [<a href="#ref6">6</a>] reports on methods to identify the presence of obfuscations via various obfuscators, such as <em>Bangcle</em> and <em>ProGuard</em>, while evaluating the likelihood of the presence of malware when these tools have been used. According to [<a href="#ref6">6</a>], <em>Bangcle</em> indicates an elevated risk of malware presence while <em>ProGuard</em> appears to be used in a more legitimate fashion, for protecting intellectual property.</p>
<p>We propose to use <em>automatic obfuscation evaluation</em> (AOE) to determine: (1) whether an app has been obfuscated, (2) which obfuscator(s) were used, and (3) which obfuscation techniques were applied. Further, to provide 'obfuscation collusion risk for a set of apps', denoted as OCR(S), we aggregate all the individual AOEs of the apps in the set S. Then we use OCR(S) to discriminate between collusion and collaboration, where sets below a certain threshold of OCR(S) would be considered 'low risk'. Next, we explain how AOE works at each step (1-3):</p>
<ol>
<li>If an app is obfuscated, a dedicated tool can provide the degree of obfuscation, OD, which effectively obstructs malware analysis tools.</li>
<li>According to [<a href="#ref6">6</a>], identifying the obfuscator(s) used to hide the app code helps discriminate collusion from collaboration based on a credibility factor associated with an obfuscator. Consequently, we assume that the <em>malware production risk</em> (MPR) associated with an obfuscator is proportional to AOE.</li>
<li>Some obfuscation techniques are known to hide the code completely, e.g. (partial) server-side execution may load code from a remote resource. We use the code-hiding degree, HD, combined with OD to define an app's obfuscation risk evaluation (Oth-RE) as proportional to HD and OD.</li>
</ol>
<p>Finally, the value AOE for an app is defined as the product of MPR and Oth-RE.</p>
<p><em><strong>Automated extraction of this feature:</strong></em> A recent tool, which we refer to here as TOD, described in [<a href="#ref7">7</a>], uses machine learning to identify the obfuscator of an <em>Android</em> app for a given set of obfuscation tools and for a number of their configuration options. This appears to be the first and only work to automatize the obfuscation identification problem. Technically, the authors of [<a href="#ref7">7</a>] identify a feature vector that represents a characteristic of the obfuscated code. TOD extracts this feature vector from the Dalvik bytecode and uses it to identify the obfuscator provenance information.</p>
<p>TOD focuses on obfuscations at the level of class, field and method names, as well as evaluating the package structure after removing unused code. Based on these parameters, the tool learns the different patterns of obfuscations available for obfuscators from a given training set. Currently, the training set focuses on learning obfuscation patterns for five obfuscators: <em>ProGuard</em> [<a href="#ref8">8</a>], <em>Allatori</em> [<a href="#ref9">9</a>], <em>DashO</em> [<a href="#ref10">10</a>], <em>Legu</em> [<a href="#ref11">11</a>] and <em>Bangcle</em> [<a href="#ref12">12</a>]. Experiments indicate that TOD identifies the obfuscator with 97% accuracy and recognizes the obfuscator's configuration with more than 90% accuracy. Based on [<a href="#ref6">6</a>], we associate <em>ProGuard</em> with low MPR while <em>Bangcle</em> gets a high MPR value.</p>
<p><em><strong>Feature extraction from the running examples:</strong></em> <a href="#table2">Table 2</a> presents the evaluation results produced by TOD for the apps described in <a href="#h2-2-examples">Section 2</a>. We would like to thank the authors of [<a href="#ref7">7</a>] for providing us with these results. TOD produces a safe result in that, when a known obfuscator is detected as having been applied to an app, that obfuscator is reported as the result; in other cases, the reported result is 'Not known', which means that either an unknown obfuscator was used or no obfuscation was detected. Admittedly, the results in <a href="#table2">Table 2</a> do not help in distinguishing between collusion and collaboration solely via MPR for this example set. Note also that, for the moment, we do not provide an AOE aggregation formula for OCR(S). <a class=" anchor" name="table2"></a></p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td> </td>
<td><strong>Application</strong></td>
<td><strong>Obfuscator : AOE</strong></td>
</tr>
<tr>
<td>C1</td>
<td>com.baidu.searchbox</td>
<td>ProGuard : LOW x Oth-RE</td>
</tr>
<tr>
<td>C2</td>
<td>com.game.jewelsstar</td>
<td>Not known : Oth-RE</td>
</tr>
<tr>
<td>C3</td>
<td>com.baidu.browser.apps</td>
<td>Not known : Oth-RE</td>
</tr>
<tr>
<td>C4</td>
<td>com.baidu.browser.apps</td>
<td>Not known : Oth-RE</td>
</tr>
<tr>
<td>C5</td>
<td>com.appandetc.sexypuzzle</td>
<td>ProGuard : Low x Oth-RE</td>
</tr>
<tr>
<td>C6</td>
<td>com.baidu.appsearch</td>
<td>ProGuard : Low x Oth-RE</td>
</tr>
<tr>
<td>C7</td>
<td>com.baidu.appsearch</td>
<td>Not known : Oth-RE</td>
</tr>
<tr>
<td>C8</td>
<td>com.baidu.appsearch</td>
<td>Not known : Oth-RE</td>
</tr>
<tr>
<td>A1,2,3</td>
<td>Amazon XYZ.apk</td>
<td>Not known : Oth-RE</td>
</tr>
<tr>
<td>F</td>
<td>Facebook_v149.0.0.40.7…om.apk</td>
<td>ProGuard : Low x Oth-RE</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 2: Detection of obfuscation tool using TOD</p>
<p><em><strong>Evaluation of the feature:</strong> </em>Using a similar approach to the one employed in [<a href="#ref6">6</a>] for obfuscation tools and including risk evaluation for obfuscation techniques (e.g. techniques that make static analysis impractical) should assist in collusion/collaboration differentiation, via Oth-RE. However, currently, the TOD tool does not include detection of obfuscation techniques and the results for our example set do not show obvious differentiations.</p>
<p> </p>
<h3><a class="chapter" name="h3-32-properties-extracted-app-documentation"></a>3.2. Properties extracted from app documentation</h3>
<p><em><strong>What it is:</strong> </em>It is clear that it should be possible to inspect app documentation and classify/cluster apps according to their described behaviour (e.g. game apps, weather apps, etc.). The<em> Google Play</em> app ranking algorithm is a good example of this approach. It utilizes app metadata such as title, description and reviews in order to rank user search results based on their relevance to user queries.</p>
<p><strong><em>Why it might be a useful feature:</em> </strong>We speculate that app descriptions can be utilized to distinguish between colluding and collaborating apps, subject to the assumption that benign collaborative behaviours (if any) will be documented in the app description and that behaviours that are invisible to the user are 'suspicious'. For example, for an app/app pair belonging to a certain class of apps, say gaming apps, there might be a certain expectation as to which resources (i.e. permissions) it might need. In other words, the described behaviour (as found in the app descriptions on, e.g. <em>Google Play</em>) should comply with the resources requested by an app/app pair, and any discrepancy between the described behaviour and requested resources warrants further investigation either in the context of collusion or as an individual malicious app. So, we need to analyse the app descriptions automatically to extract three features: (a) the category of the app, (b) resources that it wants to use, and (c) collaboration with other apps, as in the example shown in <a href="#table3">Table 3</a>. <a class=" anchor" name="table3"></a></p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>App name</strong></td>
<td><strong>Category</strong></td>
<td><strong>Requested resources</strong></td>
<td><strong>Documented collaboration</strong></td>
</tr>
<tr>
<td>A1</td>
<td>Shopping</td>
<td>Find accounts on the device, add or remove accounts, read your contacts, approximate location, ...</td>
<td>Facebook, Twitter</td>
</tr>
<tr>
<td>F</td>
<td>Social</td>
<td>Retrieve running apps, find accounts on the device, add or remove accounts, read your own contact card, ...</td>
<td>None</td>
</tr>
<tr>
<td>C3</td>
<td>Communication</td>
<td>Approximate location, precise location, ...</td>
<td>None</td>
</tr>
<tr>
<td>C6</td>
<td>Tools</td>
<td>Find accounts on the device, read the contents of your USB storage, ...</td>
<td>None</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 3: Feature extraction (due to space constraints only part of the table is presented).</p>
<p><strong><em>Automated extraction of this feature:</em></strong> Using the app description, features (a), (b) and (c) can be extracted as follows: we create a sample corpus of app descriptions for each app category in the <em>Google Play</em> app store (see <a href="#table4">Table 4</a>). A corpus is a structure for storing text documents of app descriptions with their metadata. After that we do some basic text preprocessing on our corpus – for example, removing extra white spaces and document words, ignoring extremely rare words and very common words, etc. Then we create the fundamental object for our text analysis called the Document Term Matrix (DTM). DTM is a matrix that describes the frequency of each term in each document in our corpus arranged in rows (app names) and columns (terms in the descriptions). If a term occurs in a particular app description <em>n</em> times, then the matrix entry corresponding to that row and column is <em>n</em>, otherwise 0. Finally, based on DTM, we can build our classifier to classify a given new app description in a known category, as DTM serves as a feature vector for this purpose. In order to extract (b) and (c) above, it's possible to employ a simple regular expression search on the app description text. <a class=" anchor" name="table4"></a></p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Category</strong></td>
<td><strong>Examples</strong></td>
</tr>
<tr>
<td>Art &amp; design</td>
<td>Sketchbooks, painter tools, art &amp; design tools, colouring books</td>
</tr>
<tr>
<td>Books &amp; reference</td>
<td>Book readers, reference books, textbooks, dictionaries, thesaurus, wikis</td>
</tr>
<tr>
<td>Shopping</td>
<td>Online shopping, auctions, coupons, price comparison, shopping lists, product reviews</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 4: Possible app categories in the Google Play app store [<a href="#ref13">13</a>] (due to space constraints only part of the table is presented).</p>
<p><em><strong>Feature extraction of the running examples:</strong> </em>In order to compute discrepancies between described behaviour (i.e. app category) and requested resources shown in <a href="#table3">Table 3</a>, we need a list of all permissions that are typically associated with each app category type in <a href="#table4">Table 4</a>. For example, weather applications generally request the following resources (permissions): approximate location, precise location, view Wi-Fi connections, view network connections, full network access, control Near Field Communication, etc. Likewise, we can compute a 'norm' resources set for each category using a statistically significant sized sample set. Finally, for any given pair of apps, we can compute the distance between requested resources (<a href="#table3">Table 3</a>) and the 'norm' resources set for that app category using a DTM. If this distance exceeds a certain threshold then the target app/app pair is suspicious and warrants further investigation.</p>
<p>We implemented the above analysis using R – a language designed for statistical computing. It is possible to automate the entire analysis with the help of web-crawling tools (e.g. <em>SEO Spider</em>, <em>Selenium</em>) and machine-learning tools (e.g. R, Python).</p>
<p><strong><em>Evaluation of the feature:</em> </strong>As shown in <a href="#table3">Table 3</a>, MoPlus apps have not documented their association with other apps in their app descriptions. However, <em>Amazon</em> has documented its cooperation with the <em>Facebook</em> and <em>Twitter</em> apps. From the machine-learning perspective, it's true that a few counter examples are insufficient to draw a generalized conclusion, but this observation provides us with reasonable grounds to speculate that this kind of analysis could become a useful feature and that it would be worthwhile investigating further.</p>
<p> </p>
<h3><a class="chapter" name="h3-33-ability-app-detect-if-other-apps-are-installed"></a>3.3. Ability of an app to detect if other apps are installed</h3>
<p><strong><em>What it is:</em> </strong>The <em>Android</em> operating system offers a wide range of communication options that enable apps to cooperate and share information. Additionally, <em>Android</em> allows apps, when the necessary permissions are requested, to check if other apps are installed. This feature could be used by collaborating apps to adapt their interface and functionality to the apps available on the execution device, but it could also be used to coordinate a collusion attack.</p>
<p><strong><em>Why it might be a useful feature:</em> </strong>Colluding apps can execute their actions without checking if their collusion counterparts are installed and currently running. However, for attackers this approach has several drawbacks. Firstly, the attack may not be successful if the second app is required but is inactive. Secondly, the malicious payload may create visible indicators (system calls, logs, files, etc.), which would simplify discovery of the collusion even when a single app is analysed. So we expect most colluding apps to include a step to detect if their colluding 'buddies' are installed and active on the victim's device.</p>
<p><strong><em>Automated extraction of this feature:</em> </strong>App developers have access to several API calls and commands to detect the presence of other apps in the system. These can be detected by static analysis tools such as <em>Androguard</em> [<a href="#ref14">14</a>].The following list summarizes the indicators which could be used:</p>
<ul>
<li><strong>M1:</strong> The <em>Android</em> ActivityManager and PackageManager classes offer information about opened and installed apps. Apps using these classes to get information about the running processes on the system must request the GET_TASKS permission.</li>
<li><strong>M2:</strong> The list of running processes can be accessed through a shell command. <em>Android</em> allows apps to execute shell commands through the Runtime class. For instance, the list of running processes could be obtained by executing the <em>Linux</em> 'ps' command via Runtime.getRuntime().exec('ps aux'), which returns a Process object.</li>
<li><strong>M3:</strong> A colluding app could create a lock file or variable inside any of the <em>Android</em> shared resources such as Shared Preferences, the external storage or the Internet. Access to the external storage requires the READ_EXTERNAL_STORAGE and WRITE_ EXTERNAL_STORAGE permissions. Access to the Internet requires the INTERNET permission.</li>
<li><strong>M4:</strong> Colluding apps can register an IntentFilter to answer specific broadcast intents from other colluding apps. Other apps can check if an IntentFilter is registered by other Broadcast receivers through the PackageManager API. The queryBroadcastReceivers method returns those BroadcastReceiver objects that have registered to answer a specific Intent. In a similar way, this class also offers the queryIntentActivities method, which returns the Activity objects that would answer a specific Intent.</li>
</ul>
<p>These APIs allow apps to verify if another app is installed but do not necessarily indicate the existence of colluding apps. However, since we expect colluding apps to check if their 'buddies' are installed on the same device, we consider this feature to be indicative of collusion.</p>
<p><strong><em>Feature extraction of the running examples:</em></strong> In fact, one of these indicators was present in a documented field collusion case [<a href="#ref4">4</a>]. In this case, colluding apps checked if a specific BroadcastReceiver was installed to see if the other colluding apps were installed and running on the victim's device (M4). <a href="#table5">Table 5</a> compares the MoPlus SDK (all apps which include malicious versions of this SDK are known to collude [<a href="#ref3">3</a>]) with the <em>Amazon</em> and <em>Facebook</em> apps. For each detection possibility, we show (with a check mark, '√') which sets of apps have the indicators in at least one of the apps. In the case of MoPlus apps, we have analysed classes belonging to the MoPlus SDK, not the whole binary file. <a class=" anchor" name="table5"></a></p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td> </td>
<td><strong>M1</strong></td>
<td><strong>M2</strong></td>
<td><strong>M3</strong></td>
<td><strong>M4</strong></td>
</tr>
<tr>
<td>MoPlus (colluding)</td>
<td>√</td>
<td> </td>
<td> </td>
<td>√</td>
</tr>
<tr>
<td>Amazon/Facebook (collaborating)</td>
<td>√</td>
<td> </td>
<td>√</td>
<td>√</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 5: Comparison of the MoPlus SDK with Amazon and Facebook apps.</p>
<p><em><strong>Evaluation of the feature:</strong></em> While extraction of this feature is not very hard, the results show no significant difference between benign and malicious app sets. Collaborating apps may also check if other apps are present in order to improve user experience.</p>
<p> </p>
<h3><a class="chapter" name="h3-34-permissions-used-vs-permissions-requested"></a>3.4. Permissions used vs permissions requested</h3>
<p><em><strong>What it is:</strong></em> In this section, we show that permissions analysis based on manifest files can provide a useful insight when differentiating between collusion and collaboration.</p>
<p><em><strong>Why it might be a useful feature:</strong> </em>Intuitively, honest programmers will always be transparent about the permissions that are used in their applications. Conversely, malicious programmers are likely to request many permissions in order to obtain more privileges, or to hide the use of critical permissions in the manifest files of their applications. In this section, we will examine whether analysing permissions is useful to differentiate between the two. In particular, we will look at ratios between used and declared permissions and at the number of permissions used without being declared.</p>
<p><em><strong>Automated extraction of this feature:</strong></em> We used Permission Checker<a href="#footnote1"><sup>1</sup></a> [<a href="#ref15">15</a>], a permissions analysis tool for APK files, to extract the requested permissions from the manifest file within an APK and the permissions used by method invocations in the APK's bytecode.To this end, <em>Android</em> permissions (AP) are categorized into four different groups:</p>
<ul>
<li>Declared permissions (DAP): APs declared in the <em>Android</em> manifest file.</li>
<li>Used permissions (EAP): APs declared and used in the bytecode.</li>
<li>Ghost permissions (GAP): APs used but not declared.</li>
<li>Useless permissions (UAP): APs declared but not used.</li>
</ul>
<p>Given an application, A, <em>DAP<sub>A</sub></em> denotes the set of declared permissions for A, and <em>EAP<sub>A</sub></em> the set of used permissions. For each pair of applications (<em>A</em>,<em>B</em>), we are interested in the ratio of used vs declared APs, defined as:</p>
<p><em>R<sub>A,B</sub></em> = | <em>EAP<sub>A</sub></em> ∪ <em>EAP<sub>B</sub></em> | / | <em>DAP<sub>A</sub></em> ∪ <em>DAP<sub>B</sub></em> | ∈ [0,1]</p>
<p>and the number of undeclared permissions:</p>
<p><em>U<sub>A,B</sub></em> = | <em>GAP<sub>A</sub></em> ∪ <em>GAP<sub>B</sub></em> | ∈ N</p>
<p><em><strong>Feature extraction of the running examples:</strong></em> We apply Permission Checker and compute <em>R</em> and <em>U</em> first for the collaboration set containing <em>Facebook</em> and <em>Amazon</em> applications. They are: (A1)<em> Amazon Shopping</em> (version 14.2.0.100), (A2) <em>Amazon Prime Video</em> (version 3.0.213.147041), (A3) <em>Amazon Underground</em> (version 8.0.0.200), and (F) <em>Facebook</em> (version 149.0.0.40.71). The results are shown in <a href="#table6">Table 6</a>. <a class=" anchor" name="table6"></a></p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><em>R<sub>A,B</sub></em></td>
<td>A1</td>
<td>A2</td>
<td>A3</td>
<td> </td>
<td><em>U<sub>A,B</sub></em></td>
<td>A1</td>
<td>A2</td>
<td>A3</td>
</tr>
<tr>
<td>F</td>
<td>0.10</td>
<td>0.18</td>
<td>0.14</td>
<td> </td>
<td>F</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 6: Pair analysis of Amazon and Facebook applications.</p>
<p>The same analysis is applied to the colluding set of MoPlus applications. The results are shown in <a href="#table7">Table 7</a>. <a class=" anchor" name="table7"></a></p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><em>R<sub>A,B</sub></em>/<em>U<sub>A,B</sub></em></td>
<td style="text-align: center;">C1</td>
<td style="text-align: center;">C2</td>
<td style="text-align: center;">C3</td>
<td style="text-align: center;">C4</td>
<td style="text-align: center;">C5</td>
<td style="text-align: center;">C6</td>
<td style="text-align: center;">C7</td>
<td style="text-align: center;">C8</td>
</tr>
<tr>
<td>C1</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">0.28/1</td>
<td style="text-align: center;">0.19/1</td>
<td style="text-align: center;">0.19/1</td>
<td style="text-align: center;">0.21/1</td>
<td style="text-align: center;">0.27/0</td>
<td style="text-align: center;">0.19/0</td>
<td style="text-align: center;">0.19/0</td>
</tr>
<tr>
<td>C2</td>
<td style="text-align: center;">0.28/1</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">0.20/0</td>
<td style="text-align: center;">0.20/0</td>
<td style="text-align: center;">0.28/2</td>
<td style="text-align: center;">0.29/0</td>
<td style="text-align: center;">0.20/0</td>
<td style="text-align: center;">0.19/0</td>
</tr>
<tr>
<td>C3</td>
<td style="text-align: center;">0.19/1</td>
<td style="text-align: center;">0.20/0</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">0.19/0</td>
<td style="text-align: center;">0.18/1</td>
<td style="text-align: center;">0.23/0</td>
<td style="text-align: center;">0.17/0</td>
<td style="text-align: center;">0.17/0</td>
</tr>
<tr>
<td>C4</td>
<td style="text-align: center;">0.19/1</td>
<td style="text-align: center;">0.20/0</td>
<td style="text-align: center;">0.19/0</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">0.18/1</td>
<td style="text-align: center;">0.23/0</td>
<td style="text-align: center;">0.17/0</td>
<td style="text-align: center;">0.17/0</td>
</tr>
<tr>
<td>C5</td>
<td style="text-align: center;">0.21/1</td>
<td style="text-align: center;">0.28/2</td>
<td style="text-align: center;">0.18/1</td>
<td style="text-align: center;">0.18/1</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">0.24/0</td>
<td style="text-align: center;">0.18/0</td>
<td style="text-align: center;">0.17/0</td>
</tr>
<tr>
<td>C6</td>
<td style="text-align: center;">0.27/0</td>
<td style="text-align: center;">0.29/0</td>
<td style="text-align: center;">0.23/0</td>
<td style="text-align: center;">0.23/0</td>
<td style="text-align: center;">0.24/0</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">0.19/0</td>
<td style="text-align: center;">0.18/0</td>
</tr>
<tr>
<td>C7</td>
<td style="text-align: center;">0.19/0</td>
<td style="text-align: center;">0.20/0</td>
<td style="text-align: center;">0.17/0</td>
<td style="text-align: center;">0.17/0</td>
<td style="text-align: center;">0.18/0</td>
<td style="text-align: center;">0.19/0</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">0.18/0</td>
</tr>
<tr>
<td>C8</td>
<td style="text-align: center;">0.19/0</td>
<td style="text-align: center;">0.19/0</td>
<td style="text-align: center;">0.17/0</td>
<td style="text-align: center;">0.17/0</td>
<td style="text-align: center;">0.17/0</td>
<td style="text-align: center;">0.18/0</td>
<td style="text-align: center;">0.18/0</td>
<td style="text-align: center;">N/A</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 7: Pair analysis of MoPlus applications on RA,B and UA,B.</p>
<p>For benign apps,<a href="#table6"> Table 6</a> shows that the <em>R<sub>A,B</sub></em> ratio varies from 0.14 to 0.18, while the number of undeclared permissions, <em>U<sub>A,B</sub></em>, is 0. <a href="#table7">Table 7</a> shows that, for colluding pairs of MoPlus applications, the <em>R<sub>A,B</sub></em> ratio ranges between 0.17 and 0.29, while undeclared <em>U<sub>A,B</sub></em> can go up to 2.</p>
<p><strong><em>Evaluation of the feature:</em></strong> We demonstrated that this feature can be extracted automatically. Overall, our evaluation supports the conjecture that <em>R<sub>A,B</sub></em> values are smaller for collaboration than for collusion. Therefore, they can be useful features to differentiate between collaboration and collusion.</p>
<p> </p>
<h3><a class="chapter" name="h3-35-code-similarity"></a>3.5. Code similarity</h3>
<p><strong><em>What it is:</em></strong> Identifying code similarities serves many purposes which include studying code evolution, detecting source code plagiarism, enabling refactoring, and performing defect tracking and repair.</p>
<p><strong><em>Why it might be a useful feature:</em> </strong>All maliciously colluding apps ought to operate together, so they are likely to be coded by the same person (or team) and during the same time frame. This makes it more than likely that they would have identical development environments, share significant portions of source code, use the same libraries, and perhaps even share a coding style and include the same programmer's errors. Therefore code similarity metrics should be strong and useful features.</p>
<p><strong><em>Automated extraction of this feature:</em></strong> Many tools are freely available to detect and measure code similarity. They are based on different techniques, ranging from lightweight line- and token-based syntactic approaches to heavyweight semantics-based approaches. For example, a lightweight tool like <em>Simian</em> (<em>Similarity Analyser</em>) identifies code similarities based on syntactic techniques, but does not quantify the degree of similarity that exists between potential clones – but a user can define a similarity score based on its output, as shown later in this section. Moreover, a tool like <em>Moss</em> emphasizes the semantic similarities of programs using the 'winnowing algorithm' [<a href="#ref16">16</a>] to selected fragments of source code to be fingerprinted, and then calculates a similarity percentage based on the set of common fingerprints.</p>
<p><strong><em>Feature extraction of the running examples:</em> </strong>In order to demonstrate the feasibility of proposed feature extraction, we downloaded an APK from the <em>Google Play Store</em> along with its source code [<a href="#ref17">17</a>]. Using <em>JADX</em> [<a href="#ref18">18</a>] – a tool for creating Java source code from <em>Android</em> DEX and APK files – Java source code was produced for the APK. Then <em>Simian</em> [<a href="#ref19">19</a>] was employed to calculate similarities between the original source code and the re-engineered source code. <em>Simian</em> reported 12 similar lines out of 176 line comparisons in this analysis, which resulted in a 12/176 = 0.07 similarity score. Though we compared the original source code of the app against its re‑engineered code, the similarity score obtained here was very low. This is probably due to the fact that <em>Simian</em> performs only syntactic pattern matching rather than functional/semantic matchings. One can never get back to the exact same source since there is no metadata with the compiled code. Therefore, re-engineered code may be syntactically different from its original source code and a low similarity score via syntactic pattern matching should be expected.</p>
<p><strong><em>Evaluation of the feature:</em> </strong><a href="#table8">Table 8 </a>presents the code similarity scores automatically computed for the set of MoPlus apps. The score for the <em>Facebook</em>-<em>Amazon</em> app pair is 0.26 and there is no clear distinction from the MoPlus app values. However, the sample size is not statistically significant so we cannot draw any conclusion here. As mentioned above, getting back to the exact same source code is difficult, and re-engineered code is syntactically different from its original source code. This might have a negative effect on the usefulness of this feature in practice. <a class=" anchor" name="table8"></a></p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td> </td>
<td style="text-align: center;">C1</td>
<td style="text-align: center;">C2</td>
<td style="text-align: center;">C3</td>
<td style="text-align: center;">C4</td>
<td style="text-align: center;">C5</td>
<td style="text-align: center;">C6</td>
<td style="text-align: center;">C7</td>
<td style="text-align: center;">C8</td>
</tr>
<tr>
<td>C1</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">0.081</td>
<td style="text-align: center;">0.081</td>
<td style="text-align: center;">0.174</td>
<td style="text-align: center;">0.088</td>
<td style="text-align: center;">0.118</td>
<td style="text-align: center;">0.109</td>
<td style="text-align: center;">0.131</td>
</tr>
<tr>
<td>C2</td>
<td style="text-align: center;">0.081</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">0.01</td>
<td style="text-align: center;">0.01</td>
<td style="text-align: center;">0.028</td>
<td style="text-align: center;">0.012</td>
<td style="text-align: center;">0.016</td>
<td style="text-align: center;">0.013</td>
</tr>
<tr>
<td>C3</td>
<td style="text-align: center;">0.081</td>
<td style="text-align: center;">0.01</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0.008</td>
<td style="text-align: center;">0.062</td>
<td style="text-align: center;">0.061</td>
<td style="text-align: center;">0.073</td>
</tr>
<tr>
<td>C4</td>
<td style="text-align: center;">0.174</td>
<td style="text-align: center;">0.01</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">0.008</td>
<td style="text-align: center;">0.062</td>
<td style="text-align: center;">0.061</td>
<td style="text-align: center;">0.073</td>
</tr>
<tr>
<td>C5</td>
<td style="text-align: center;">0.088</td>
<td style="text-align: center;">0.028</td>
<td style="text-align: center;">0.008</td>
<td style="text-align: center;">0.008</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">0.009</td>
<td style="text-align: center;">0.014</td>
<td style="text-align: center;">0.01</td>
</tr>
<tr>
<td>C6</td>
<td style="text-align: center;">0.118</td>
<td style="text-align: center;">0.012</td>
<td style="text-align: center;">0.062</td>
<td style="text-align: center;">0.062</td>
<td style="text-align: center;">0.009</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">0.883</td>
<td style="text-align: center;">0.764</td>
</tr>
<tr>
<td>C7</td>
<td style="text-align: center;">0.109</td>
<td style="text-align: center;">0.016</td>
<td style="text-align: center;">0.061</td>
<td style="text-align: center;">0.061</td>
<td style="text-align: center;">0.014</td>
<td style="text-align: center;">0.883</td>
<td style="text-align: center;">N/A</td>
<td style="text-align: center;">0.647</td>
</tr>
<tr>
<td>C8</td>
<td style="text-align: center;">0.131</td>
<td style="text-align: center;">0.013</td>
<td style="text-align: center;">0.073</td>
<td style="text-align: center;">0.073</td>
<td style="text-align: center;">0.01</td>
<td style="text-align: center;">0.764</td>
<td style="text-align: center;">0.647</td>
<td style="text-align: center;">N/A</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 8: Similarity scores (pairwise) for MoPlus applications.</p>
<p> </p>
<h3><a class="chapter" name="h3-36-user-interaction"></a>3.6. User interaction</h3>
<p><strong><em>What it is:</em></strong> This feature is defined based on the apps' interaction with the user and it aims to predict malicious behaviour based on measuring the honesty of an app's communication with the user. We propose to evaluate the quality and quantity of the messages/images used by an app for user interaction.</p>
<p><strong><em>Why it might be a useful feature:</em> </strong>If an app shows a standard <em>Android</em> 'Share' icon, then it is likely that corresponding communications with other apps would be benign. Even better would be if there was a message that explained what is shared and why. However, producing good user interaction (UI) evaluators is a challenging task. In our view, the evaluation of the interaction needs to focus on the content of the UI. For example, a long, detailed message (which is easier to evaluate) explaining a button requesting access to a particular resource would work well for more mature users. If, however, the same long text is presented to a child, then it might not be quite as effective: due to different perception capabilities, there are different classes of users. Optimally, we would want to use a UI analysis tool capable of combining analysis of the text and the complexity of the UI elements to produce a collusion risk evaluation. Moreover, a combination of such UI analysis with API mapping could be used to decide whether a certain UI element, such as a button, should allow a specific API call. We foresee this analysis as being rather useful when looking for collusion, but there is a challenge in finding suitable tools.</p>
<p><strong><em>Automated extraction of this feature:</em></strong> At the moment, there are several tools capable of testing user interaction in <em>Android</em> apps, for example <em>Monkey Runner</em> [<a href="#ref20">20</a>] and <em>Espresso Testing Framework</em> [<a href="#ref21">21</a>]. <em>Monkey Runner</em> allows apps to be installed and tested by generating stimuli so that an app does things as if a user were interacting with it. The tool basically acts as a software robot, which produces a sequence of touch events that, when sent to an emulator or device, interacts as a human would. Coupling this with a dynamic analysis tool would allow us to inspect which UI elements trigger communication APIs.</p>
<p>The <em>Espresso Testing Framework</em> is included within <em>Android</em> and allows the execution of UI tests. Instead of generating touch events, this framework accesses the interface elements of the screen directly. This approach would prove useful for extracting the interface elements of apps for evaluating their quality, eventually by means of a wrapper.</p>
<p><strong><em>Feature extraction of the running examples:</em> </strong>We were not able to find a tool that suits our aims for UI collusion risk evaluation. As mentioned, the available UI tools target slightly different usage scenarios. This makes automated feature extraction cumbersome.</p>
<p><strong><em>Evaluation of the feature:</em> </strong>The UI collusion risk evaluation could be executed via a combination of techniques involving data mining, text evaluation and image processing. We still believe that UI interaction has potential in distinguishing malicious behaviour.</p>
<p> </p>
<h3><a class="chapter" name="h3-37-dynamic-features"></a>3.7. Dynamic features</h3>
<p>In the previous sections, we discussed many features which would assist in discovering colluding apps and which can be extracted statically. The feature set may be improved further by adding dynamic features, extracted at runtime. In many cases dynamic tools would also be helpful to improve extraction of static features – for example when static analysis tools fail to detect and extract the features due to code obfuscation or due to the code using reflection.</p>
<p>One approach to facilitate dynamic analysis is to put wrappers around apps in order to log their actions – for example, a wrapper might log accesses to restricted resources and external communications. One such tool is <em>APIMonitor</em> from the team that developed <em>Droidbox</em> [<a href="#ref22">22</a>]. To extract the runtime features of an app one would need to apply the wrapper to that app, execute it, and then analyse the logs generated by <em>APIMonitor</em>.</p>
<p>Another approach is to create a special instrumented version of <em>Android</em>, populate it with multiple apps, and record the actions. There are existing research tools based on this approach, for example <em>CopperDroid</em> [<a href="#ref23">23</a>], which is focused on dynamic analysis of apps. <em>CopperDroid</em>, however, is currently only capable of monitoring a single app, although it may be extended to execute multiple apps and extract features related to access to sensitive resources and inter‑app communications. Unfortunately, using dynamic feature extractors was well beyond the scope of our project.</p>
<p> </p>
<h2><a class="chapter" name="h2-4-machine-learning"></a>4. Machine learning</h2>
<p>Having explored a number of features, we will now discuss how one could potentially use them to train a model with a machine-learning approach in order to distinguish automatically between app collaboration and collusion.</p>
<p>In general, it is the quality of the input data that determines the output quality of machine-learning algorithms. Hence, after exploring a potential feature set, it is necessary to perform data exploration (including feature engineering), cleaning and preparation before initiating modelling and evaluation. This will help us to systematically identify important features among the feature set that actually inform our modelling. Unfortunately, the sizes of the app sample sets (both colluding and collaborative) employed in this paper were not sufficient for this purpose.</p>
<p>Learning algorithms are chosen based on the given input data and the learning task at hand. For example, if labelled data is provided and the learning task is 'classification', then we can apply a <strong>supervised learning</strong> algorithm, e.g. support vector machine (SVM) [<a href="#ref24">24</a>], to the problem. In the collusion context, classification refers, for example, to automatically labelling a previously unseen app pair as either colluding or collaborating. However, applying a supervised algorithm to our problem would be difficult due to the lack of known collaborating and known colluding app samples that are available in the wild. As in many other security problems, this represents a major constraint in applying supervised learning techniques. However, it is still possible to apply unsupervised, semi-supervised or novelty (anomaly) detection techniques [<a href="#ref25">25</a>, <a href="#ref26">26</a>] to this problem.</p>
<p>In <strong>unsupervised learning</strong>, we only need the input data of the features, no corresponding output labels are required. The goal here is to model the underlying structure or distribution of the data in order to learn more about the dataset. Algorithms are left on their own to discover and present interesting structures rather than training them using labelled data. Our problem can be modelled as a clustering (e.g. k-means) or association (e.g. AprioriDP) rule problem [<a href="#ref25">25</a>]. Clustering discovers the inherent groupings in our dataset while association discovers interesting relationships between elements of the input data. The underlying assumption here would be that colluding and collaborating apps have different distributions in terms of the above features and therefore should form disjoint groups that correspond to colluding and collaborating app sets.</p>
<p>As shown in the literature [<a href="#ref27">27</a>], app collusion is a real threat. But as far as anyone knows, the base rate of colluding apps in the wild is close to zero. In this situation, approaching the issue as a <strong>semi-supervised learning</strong> problem would be sensible. Many real-world security problems (e.g. credit card/toll fraud detection) fall into this category, in which only some events are labelled as benign/malicious and the majority are unlabelled [<a href="#ref28">28</a>]. This is because it can be expensive to label data, as domain experts are required. Unlabelled data is typically cheap and easy to collect and store. In this case unsupervised learning algorithms can be employed to discover and learn structures within the input variables, and then supervised learning (e.g. SVM, KNN) [25] can be applied to make best-guess predictions for the unlabelled data. After that, the data can feed into a supervised learning algorithm for training purposes and the model can be used to make predictions on new, unseen app pairs as they are colluding and collaborating.</p>
<p>Alternatively, it might be possible to obtain a considerable amount of data representing the benign class (i.e. non-colluding), whilst not having sufficient and reliable data representing the malicious class (i.e. colluding). This would hinder training and, in particular, the testing procedures of whatever algorithms are chosen to solve this problem. In order to minimize this difficulty, we propose a <strong>one-class modelling approach</strong> (including novelty/anomaly detection) [<a href="#ref29">29</a>] to move forward in such a context. The idea here would be first to train a model using only benign samples. This trained model could then be used for the identification of new/unknown data (that the model had not been trained with) with the help of either statistical or machine-learning based approaches. To achieve this, spot-checking the one-class support vector machine would be the first step.</p>
<p>Note that none of the above learning algorithms needs to be built from scratch. Many useful libraries of extensible algorithms are freely available in R, Python, and also ML libraries in other programming languages. These can be extended and adapted for this purpose.</p>
<p> </p>
<h2><a class="chapter" name="h2-5-future-android"></a>5. Future of Android</h2>
<p>Malicious collusion became possible in <em>Android</em> due to a series of unfortunate design decisions. Future versions of <em>Android</em> (or any OS that succeeds it) must have a better defined and more regulated communication framework in general. We strongly advocate the following changes:</p>
<p>Firstly, we believe that the OS should require an explicit declaration of all app communication methods in the app manifest. At the moment this is done with the exported property for Services and BroadcastReceivers, but the operating system does not even make them visible to the user. If app developers were required to make explicit declarations then all inter-app communications would be visible to users and analysis tools would be able to inspect them. This approach would also underpin more granular policies (in <em>Google Play</em> as well as in the OS at runtime) around communications. Similarly, it would be very desirable to have a declaration in the manifest of all the Internet domains and URLs that an app is allowed to contact. That would provide a much better and more granular control than the very broad INTERNET permission. It would also allow analysis of communications which occur outside of the device, where an external website is operating as an intermediary between two apps on the same device. This step would significantly reduce the risk of privacy intrusions from advertisement libraries embedded in apps and would allow better methods for checking the privacy status of apps.</p>
<p>Secondly, we propose allowing apps to interact while enabling them also to evaluate the interaction with other apps. The evaluation protocol would be pre-set and intended to give each app a certain authority level in evaluating the quality of the interaction with its peers. The protocol could be provided via a wrapper that each application is either allowed or required to use in certain <em>Android</em> environments. This approach would enable post-mortem analysis methods for evaluating apps based on their behaviour in interaction with their peers. The main question that our future research would, in this case, need to answer is: which basic set of rules should the peer evaluation system provide? This basic set of rules would be crucial for allowing discrimination between collusion and collaboration. An approach that implements this to some extent is Android Work [<a href="#ref30">30</a>], which introduces a further sandboxing that separates personal apps from professional ones: the mobile device management administrator decides which apps go into the professional sandbox, and the user is able to install apps on the personal sandbox. Apps from the two different sandboxes are not allowed to interact and they can be switched on and off by category. This would mean implementing OS support for app group isolation – similar, for example, to <em>Samsung Knox</em>.</p>
<p>Both of our proposals would have to include a regulatory phase and an evaluatory/analysis mechanism. In the regulatory phase a set of rules should be provided either by <em>Android</em> OS, e.g. the finer-grained communication intents declaration suggested in the first proposal, or by <em>Android</em> wrappers, e.g. the set of standards in app evaluation of peer communication. The evaluatory phase uses the set of rules introduced in the regulatory phase to analyse apps and discover properties like collusion. For example, the first proposal aims for traditional analysers to benefit from additional information in order to produce more accurate results. Meanwhile, the second proposal relies on the post‑mortem evaluatory phase that focuses on apps' feedback based on communications to evaluate collusion risk.</p>
<p>Coupling of the regulatory and evaluatory phases aligns the research desideratum of our current work with today's trend of regulating and verifying AI. Namely, with recent AI developments, it has become obvious that technology may go out of control and may produce unexpected problems. Take, for example, the case of the <em>Facebook</em> AI business agent-to-agent negotiation project [<a href="#ref31">31</a>] that used natural language and produced unexpectedly efficient results. The conclusion of the project was that AI may be able to surpass intuitive strategies when trained well enough. Consequently, the scientific community is currently organizing itself to evaluate the status and progress of AI, and to propose an (initial) set of measures for controlling the direction of its development [<a href="#ref32">32</a>].</p>
<p>Moreover, we envisage seeing the usage of AI/machine-learning methods in app code. Hence, early security measures must be provided in the form of more (self) regulation and safer activity of apps in <em>Android</em> and other mobile/IoT operating systems.</p>
<p> </p>
<h2><a class="chapter" name="h2-6-conclusion"></a>6. Conclusion</h2>
<p>There cannot be collusion in a single app, there has to be a set (a pair/triplet/quadruplet, etc.). Having in mind a high number of <em>Android</em> apps and an almost infinite number of app sets, it soon becomes clear that only only automated methods are appropriate for discovering collusions and for distinguishing between benign cooperation and malicious activities.</p>
<p>We have described and evaluated a set of carefully selected features (based on common sense as well as on expert opinions). We have shown that machine learning is a promising approach to distinguish between colluding and collaborating apps. Many of the proposed features could form a solid basis for detecting malicious app sets in the <em>Android</em> universe. In some cases we have identified technological gaps where tools are missing or require more work before they can be applied to the problem at hand.</p>
<p>The ultimate solution, however, is to implement changes in the OS – that would discourage abuse and allow much easier, automated discovery when it happens.</p>
<p> </p>
<h2><a class="chapter" name="h2-footnotes"></a>Footnotes</h2>
<p><sup><a class=" anchor" name="footnote1"></a>1</sup>The results of this tool should be interpreted with a little caution: on applying it to apps we had written ourselves, the results were not completely accurate.</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] Asavoae, I.M.; Blasco, J.; Chen, T.M.; Kalutarage, H.K.; Muttik, I; Nguyen, H.N.; Roggenbach, M.; Shaikh, S.A. Detecting Malicious Collusion Between Mobile Software Applications: The Android TM Case. In Palomares Carrascosa, I.; Kalutarage, H.K.; Huang, Y. (Eds.): Data Analytics and Decision Support for Cybersecurity – Trends, Methodologies and Applications, Springer 2017.</p>
<p><a class=" anchor" name="ref2"></a>[2] Blasco, J.; Chen, T.M.; Muttik, I.; Roggenbach, M. Detection of App Collusion Potential Using Logic Programming. Journal of Network and Computer Applications, Volume 105, 1 March 2018, pp.88-104.</p>
<p><a class=" anchor" name="ref3"></a>[3] Shen, S. Setting the Record Straight on Moplus SDK and the Wormhole Vulnerability. <a href="http://blog.trendmicro.com/trendlabs-security-intelligence/setting-the-record-straight-on-moplus-sdk-and-the-wormhole-vulnerability/" target="_blank">http://blog.trendmicro.com/trendlabs-security-intelligence/setting-the-record-straight-on-moplus-sdk-and-the-wormhole-vulnerability/</a>.</p>
<p><a class=" anchor" name="ref4"></a>[4] Blasco, J.; Muttik, I.; Roggenbach, M.; Chen, T.M. Wild Android Collusions. In Proceedings of the 26th Virus Bulletin International Conference, 2016. <a title="VB2016 paper: Wild Android collusions" href="/virusbulletin/2018/03/vb2016-paper-wild-android-collusions/">https://www.virusbulletin.com/virusbulletin/2018/03/vb2016-paper-wild-android-collusions/</a>.</p>
<p><a class=" anchor" name="ref5"></a>[5] Collberg, C.; Thomborson, C.; Low, D. A taxonomy of Obfuscating Transformations. Technical Report 148, The University of Auckland.</p>
<p><a class=" anchor" name="ref6"></a>[6] Apvrille, A.; Nigam, R. Obfuscation in Android Malware and how to Fight Back. <a href="https://www.virusbulletin.com/virusbulletin/2014/07/obfuscation-android-malware-and-how-fight-back" target="_blank">https://www.virusbulletin.com/virusbulletin/2014/07/obfuscation-android-malware-and-how-fight-back</a>.</p>
<p><a class=" anchor" name="ref7"></a>[7] Wang, Y.; Rountev, A. Who Changed You? Obfuscator Identification for Android. In <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2a67656863666f79454c5e6a6369796f">[email&#160;protected]</a> 2017: 154-164.</p>
<p><a class=" anchor" name="ref8"></a>[8] ProGuard. <a href="https://www.guardsquare.com/en/proguard" target="_blank">https://www.guardsquare.com/en/proguard</a>; <a href="https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html" target="_blank">https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html</a>.</p>
<p><a class=" anchor" name="ref9"></a>[9] Allatori. <a href="http://www.allatori.com/" target="_blank">http://www.allatori.com/</a>.</p>
<p><a class=" anchor" name="ref10"></a>[10] DashO. <a href="https://www.preemptive.com/products/dasho/overview" target="_blank">https://www.preemptive.com/products/dasho/overview</a>.</p>
<p><a class=" anchor" name="ref11"></a>[11] Legu. <a href="http://wiki.open.qq.com/wiki/%E5%BA%94%E7%94%A8%E5%8A%A0%E5%9B%BA" target="_blank">http://wiki.open.qq.com/wiki/%E5%BA%94%E7%94%A8%E5%8A%A0%E5%9B%BA</a>.</p>
<p><a class=" anchor" name="ref12"></a>[12] Bangcle. <a href="https://www.bangcle.com/" target="_blank">https://www.bangcle.com/</a>.</p>
<p><a class=" anchor" name="ref13"></a>[13] <a href="https://support.google.com/googleplay/android-developer/answer/113475?hl=en-GB" target="_blank">https://support.google.com/googleplay/android-developer/answer/113475?hl=en-GB</a>.</p>
<p><a class=" anchor" name="ref14"></a>[14] Androguard. <a href="https://github.com/androguard/androguard" target="_blank">https://github.com/androguard/androguard</a>.</p>
<p><a class=" anchor" name="ref15"></a>[15] Merlo, A.; Georgiu, G.C. RiskInDroid: Machine Learning-Based Risk Analysis on Android. SEC 2017: 538-552. <a href="https://link.springer.com/chapter/10.1007%2F978-3-319-58469-0_36" target="_blank">https://link.springer.com/chapter/10.1007%2F978-3-319-58469-0_36</a>.</p>
<p><a class=" anchor" name="ref16"></a>[16] Schleimer, S.; Wilkerson, D.; Aiken, A. Local algorithms for document fingerprinting. In Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data 2003 June 9 (pp.76-85). ACM.</p>
<p><a class=" anchor" name="ref17"></a>[17] <a href="https://github.com/gabrielecirulli/2048" target="_blank">https://github.com/gabrielecirulli/2048</a>.</p>
<p><a class=" anchor" name="ref18"></a>[18] JADX. <a href="https://github.com/skylot/jadx" target="_blank">https://github.com/skylot/jadx</a>.</p>
<p><a class=" anchor" name="ref19"></a>[19] Simian. <a href="http://www.harukizaemon.com/simian/index.html" target="_blank">http://www.harukizaemon.com/simian/index.html</a>.</p>
<p><a class=" anchor" name="ref20"></a>[20] Monkey Runner. <a href="https://developer.android.com/studio/test/monkeyrunner/index.html" target="_blank">https://developer.android.com/studio/test/monkeyrunner/index.html</a>.</p>
<p><a class=" anchor" name="ref21"></a>[21] Espresso Testing Framework. <a href="https://developer.android.com/training/testing/ui-testing/espresso-testing.html" target="_blank">https://developer.android.com/training/testing/ui-testing/espresso-testing.html</a>.</p>
<p><a class=" anchor" name="ref22"></a>[22] Droidbox. <a href="https://github.com/pjlantz/droidbox" target="_blank">https://github.com/pjlantz/droidbox</a>.</p>
<p><a class=" anchor" name="ref23"></a>[23] Tam, K.; Salahuddin, J.K.; Aristide, F.; Cavallaro, L. CopperDroid: Automatic Reconstruction of Android Malware Behaviors. In NDSS. 2015.</p>
<p><a class=" anchor" name="ref24"></a>[24] Corinna Cortes, C.; Vapnik, V. Support-vector networks. Machine learning 20, no. 3 (1995): 273‑297.</p>
<p><a class=" anchor" name="ref25"></a>[25] Roiger, R.J. Data mining: a tutorial-based primer. CRC Press, 2017.</p>
<p><a class=" anchor" name="ref26"></a>[26] Buczak, A.; Guven, E. A survey of data mining and machine learning methods for cyber security intrusion detection. IEEE Communications Surveys &amp; Tutorials 18, no. 2 (2016): 1153-1176.</p>
<p><a class=" anchor" name="ref27"></a>[27] Marforio, C.; Ritzdorf, H.; Francillon, A.; Capkun, S. Analysis of the communication between colluding applications on modern smartphones. In Proceedings of the 28th Annual Computer Security Applications Conference 2012 Dec 3 (pp. 51-60). ACM.</p>
<p><a class=" anchor" name="ref28"></a>[28] Jaiswal, A.; Manjunatha, A.S.; Madhu, B.R.; Chidananda Murthy, P. Predicting unlabeled traffic for intrusion detection using semi-supervised machine learning. In Electrical, Electronics, Communication, Computer and Optimization Techniques (ICEECCOT), 016 International Conference on 2016 Dec 9 (pp.218-222). IEEE.</p>
<p><a class=" anchor" name="ref29"></a>[29] Pimentel, M.; Clifton, D.A.; Clifton, L.; Tarassenko, L. A review of novelty detection. Signal Processing 99 (2014): 215-249.</p>
<p><a class=" anchor" name="ref30"></a>[30] Android Work. <a href="https://www.android.com/enterprise/employees/" target="_blank">https://www.android.com/enterprise/employees/</a>.</p>
<p><a class=" anchor" name="ref31"></a>[31] Lewis, M.; Yarats, D.; Dauphin, Y.; Parikh, D.; Batra, D. Deal or No Deal? End-to-End Learning of Negotiation Dialogues. In EMNLP 2017: 2443-2453.</p>
<p><a class=" anchor" name="ref32"></a>[32] Boddington, P.; Millican, P.; Wooldridge, M. Minds and Machines Special Issue: Ethics and Artificial Intelligence. Minds and Machines 27(4): 569-574 (2017).</p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2018/201803-distinguishing-malicious-app-collusion-benign-app-collaboration.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Distinguishing between malicious app collusion and benign app collaboration: a machine-learning approach&url=https://www.virusbulletin.com/virusbulletin/2018/03/distinguishing-between-malicious-app-collusion-and-benign-app-collaboration-machine-learning-approach"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2018/03/distinguishing-between-malicious-app-collusion-and-benign-app-collaboration-machine-learning-approach'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2018/03/distinguishing-between-malicious-app-collusion-and-benign-app-collaboration-machine-learning-approach&title=Distinguishing between malicious app collusion and benign app collaboration: a machine-learning approach"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2018/03/distinguishing-between-malicious-app-collusion-and-benign-app-collaboration-machine-learning-approach&t=Distinguishing between malicious app collusion and benign app collaboration: a machine-learning approach"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2018/03/distinguishing-between-malicious-app-collusion-and-benign-app-collaboration-machine-learning-approach"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>