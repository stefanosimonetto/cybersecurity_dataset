<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Digging through the problem of IPv6 and email</title>
<meta name="description" content="'Under IPv6, spammers could send out one piece of spam per IPv6 address, discard it and then move on to the next address for the next 10,000 years and never need to re-use a previous address.' Terry Zink explains why mail providers are not thrilled about using IPv6 to handle email." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 2057;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201106-IPv6"></a>Digging through the problem of IPv6 and email</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2011-06-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Terry</span> <span class="surname">Zink</span></h3><span class="orgname">Microsoft</span>, <span class="orgdiv">USA</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>&#39;Under IPv6, spammers could send out one piece of spam per IPv6 address, discard it and then move on to the next address for the next 10,000 years and never need to re-use a previous address.&#39; Terry Zink explains why mail providers are not thrilled about using IPv6 to handle email.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2011 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-3482" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-3482" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3604157"></a></span></dt><dt><span class="sect1"><a href="#id4223223">How do we deal with it?</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3604157"></a></h2></div></div></div><p>Over recent months, anti-spam bloggers have written about IPv6 and the challenges it poses for the email industry. John Levine, an author of numerous RFCs and a couple of books about spam fighting, wrote the following [<span class="citation"><a href="#citation.1">1</a></span>]:</p><p>&lsquo;We will eventually figure out both how people use IPv6 addresses for mail, and how to manage and publish v6 reputation data, but until then, running a mail server on v6 will be a lot harder than running one on v4. And since you&rsquo;ll be able to handle all the real mail on v4, why bother [running a mail server to handle IPv6]?&rsquo;</p><p>Barry Leiba, another email security writer, writes the following on<span class="emphasis"><em> Circle ID</em></span> [<span class="citation"><a href="#citation.2">2</a></span>]:</p><p>&lsquo;John Levine has one approach: leave the email system on IPv4 for the foreseeable future. Even, John points out, when many other services, customer endpoints, mobile and household devices, and the like have been &ndash; have to have been &ndash; switched to IPv6, we can still run the Internet email infrastructure on IPv4 for a long time, leaving the IP blocklists with v4 addresses, and a system that we&rsquo;re already managing fine with.</p><p>&lsquo;Of course, some day, we&rsquo;ll want to completely get rid of IPv4 on the Internet, and by then we&rsquo;ll need to have figured out a replacement for the IP blocklist mechanism. But John&rsquo;s right that that won&rsquo;t be happening for many years yet, and he makes a good case for saying that we don&rsquo;t have to worry about it.&rsquo;</p><p>Both writers are saying the same thing, and I have been on discussion threads where the consensus was similar: there is no agreement on how to handle IPv6 over email in the short term, but eventually it will have to be figured out. There are some who believe that mail will never move to IPv6 and some who think that it will go there one of these days. In the meantime, we just use IPv4 to send mail.</p><p>To expand a bit on what both writers are saying, the biggest reason why mail providers are not thrilled about using IPv6 to handle email is because there is currently no way to deal with the problem of abuse. Today, spammers make extensive use of botnets. Each day, they compromise new machines and start using them to spew out spam. Each of these bots uses a different IP address, and the IP addresses change all of the time. If you had 10,000 IP addresses that were sending out spam today, then tomorrow there would also be 10,000, but at least 9,700 of them would be different IP addresses from those used today.</p><p>The reason there is so much rotation in IP addresses is because modern spam filters make use of IP blocklists. When a blocklist service detects that an IP is sending spam, it adds it to the blocklist and rejects all mail from it. There are exceptions to this listing process such as a legitimate IP that sends a majority of good mail (such as a <span class="emphasis"><em>Hotmail</em></span> or <span class="emphasis"><em>Gmail</em></span> IP address), but in general, mail servers reject all mail from blocklisted IPs. The reasons they do this are:</p><div class="orderedlist"><ol type="1"><li><p>90% of all email flowing across the Internet (not including internal mail within an organization) is spam. If a sending IP is on a blocklist, a mail server can reject it in the SMTP transaction and save on all of the processing costs associated with accepting the message and filtering it in the content filter. Most mail servers today would topple over and crash if they had to handle all of the mail coming from blocklisted IPs because it would increase the number of total messages by a factor of 10.</p></li><li><p>Spam filters get slightly better anti-spam metrics by using IP blocklists. Content filters are good, but rejecting 100% of mail from a spamming IP address means that there is no possibility of a false negative from that IP address. By contrast, if a spam filter does not use an IP blocklist, the content filter has to learn to recognize the spam coming from that IP address, update the filter and then replicate out the changes. This is slower than pulling down a blocklist and then using it as the first line of defence. Without an IP blocklist, a spam filter will filter between 80% and 99% of the mail coming from a blocklisted IP. While many spam filters get close to that 99% range, it&rsquo;s still not 100%.</p></li></ol></div><p>Blocklists are populated in a number of different ways. Some use spam traps to capture mail sent to email addresses that have never been used publicly, while others use statistical algorithms to judge that a sender is malicious (or compromised). Once the data is acquired, blocklist operators publish their lists in two ways:</p><div class="orderedlist"><ol type="1"><li><p>They list individual IP addresses of all the servers that are sending mail.</p></li><li><p>They make use of CIDR (Classless Internet Domain Routing) notation. CIDR is a way to group large blocks of IP addresses. A provider would list a larger group of IP addresses in CIDR notation in order to save on space in the file so they don&rsquo;t have to list them one by one. For example, the <span class="emphasis"><em>Spamhaus</em></span> Exploits Block List (XBL) is about 7 million entries (lines of text) and around 100MB in size. By contrast, the <span class="emphasis"><em>Spamhaus</em></span> PBL (which lists IP ranges which should not be delivering unauthenticated SMTP mail to any Internet server) contains 200,000 lines of text (without exceptions in ! notation) and is 6MB. However, the PBL is represented mostly in CIDR notation. If all of these ranges were expanded, it would be over 650 million individual IP addresses. That&rsquo;s a whole heck of a lot more IPs in the PBL for a whole lot less file size.</p></li></ol></div><p>Today in <span class="emphasis"><em>Forefront Online</em></span>, we run the XBL in front of the PBL and it blocks about four times as much mail as PBL (I don&rsquo;t know how much would be blocked if we ran them in reverse). The XBL is better at catching individual bots that are sending out spam but are not listed anywhere (they are new IPs), whereas the PBL is better at pre-emptively catching mail servers that should never send out spam (probable bots but it doesn&rsquo;t matter because they shouldn&rsquo;t be sending mail anyhow). However, if we had to list every single PBL IP singly instead of compressing it into CIDR ranges, and using the same ratio of 7 million IPs to ~100MB, then the PBL would be 9.4GB in total size. 9.4GB is a large file. It isn&rsquo;t completely unmanageable but it changes from being a minor inconvenience to being a major one. It takes a long time to download, upload and process a 9.4GB file. It&rsquo;s also easier to store the file entries in a database if there are only 500,000 entries (or even 7 million) vs 650 million of them. Databases that are as large as that run into the problem of scale.</p><p>The PBL and XBL are examples of why different styles of IP blocklists are required. The PBL lists 650 million IPs and we <span class="emphasis"><em>still</em></span> have over 7 million IPs on the XBL that <span class="emphasis"><em>aren&rsquo;t </em></span>on the PBL. Clearly, spamming bots can move around such that they are not published on the lists that have large address spaces listed. Bots are very good at hiding in places that are not blocked yet. Given enough space, spammers will hide because if they didn&rsquo;t they would not be able to stay in business. The problem that the industry faces is that as soon as we find a spammer&rsquo;s hiding space, we can block it for a while but the spammer will vacate it, relocate elsewhere and continue to spam. (<span class="emphasis"><em>This is the origin of the term &lsquo;whack-a-mole&rsquo;, a term the anti-spam industry borrowed from the carnival game. As soon as you whack one mole (or spamming bot), it hides and another pops up.</em></span>)</p><p>And therein is the problem of IPv6. An IPv4 IP address consists of four octets and each octet is a number running from 0&ndash;255. This means that there are 256 x 256 x 256 x 256 possible IP addresses, which is 4.2 billion possible IP addresses (in reality, there are fewer than this because there are many ranges of IPs that are reserved and not for public consumption). Using our formula above, if you <span class="emphasis"><em>had</em></span> to list every single IP address singly in a file, then the size of the file would be 61GB. There are few pieces of hardware that can handle that size of file in memory (whether you are doing IP blocklist look ups in rbldnsd or some other in-memory solution on-the-box). Processing the file and cleaning it up would take a very long time; you simply couldn&rsquo;t do it in real time where IP blocklists need to be updated frequently (once per hour at a bare minimum).</p><p>IPv6 multiplies this problem. We have seen that spammers already possess the ability to hop around IP addresses quickly. They do this because once an IP gets blocked, it is no longer useful to them. However, in IPv4 there are only so many places they can hide &ndash; 4.2 billion. In IPv6, though, there is virtually unlimited space in which to hide. To put it one way, there are 250 billion spam messages sent per day. Under IPv6, spammers could send out one piece of spam per IPv6 address, discard it and then move on to the next address for the next 10,000 years and never need to re-use a previous address. A mail server could never load a file big enough even for one day&rsquo;s IPv6 blocklist if spammers sent every single spam from a unique IPv6 address. Because spammers could hop around so much, IP blocklists would encounter the following problems:</p><div class="orderedlist"><ol type="1"><li><p>They would get to be too large for anyone to download, process and upload.</p></li><li><p>They would be latent since by the time an IP was listed, spammers would have discarded it and moved onto the next IP address.</p></li></ol></div><p>This is why no mail receivers are thrilled about the idea of using IPv6 to send mail. (<span class="emphasis"><em>Other readers will point out that the major reason it won&rsquo;t work is because a server could never cache that many IP addresses. While true, not every mail server looks up IPs on a blocklist via a DNS query.</em></span>) They have to allow for the worst case scenario, which is that spammers will overwhelm their mail servers and drain processing power by having to deal with a tenfold increase in traffic.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4223223"></a>How do we deal with it?</h2></div></div></div><p>One idea is to use whitelists instead of blocklists &ndash; block all mail from everyone and then maintain a central whitelist of good mail servers that send legitimate mail. The weakness here is that it defeats the whole purpose of email &ndash; that you can receive messages from people you haven&rsquo;t heard from before. This is known as the introduction problem. New mail servers are brought up all of the time. There&rsquo;s no way for you to know about it and the process of having to opt people in is a pain. This idea could be centralized, but what are considered legitimate mail servers for some people will not be legitimate for others.</p><p>Another idea is to take an unmanageable problem and break it down into a manageable one. Let&rsquo;s go back and take a look at how CIDR notation works and how blocklists take advantage of them. Consider the IP 216.32.180.16. This can be broken down into four eight-bit octets, and then combined to make one 32-bit number:</p><div class="mediaobject"><img src="/uploads/images/figures/2011/06/img1.jpg" /></div><p>A CIDR range operates on the bits of an IP address. An IP address is said to fall within a CIDR range if the first n-bits of an IP address are the same as the first n-bits of the range (where n is a number between 0 and 32). For example, let&rsquo;s take the range 216.32.180.0/24. If we convert this down to the bits that it represents, then this says include the range of IPs of any IP address that contains the first 24 bits; the &lsquo;/24&rsquo; says to take the first 24 bits:</p><div class="mediaobject"><img src="/uploads/images/figures/2011/06/img2.jpg" /></div><p>216.32.180.16 is said to fall within the range 216.32.180.0/24 because the first 24 bits of the 32-bit representation of 216.32.180.16 is the same as the first 24 bits of 216.32.180.0/24:</p><div class="mediaobject"><img src="/uploads/images/figures/2011/06/img3.jpg" /></div><p>The first 24 bits match, but the last eight do not (illustrated by the &lsquo;1&rsquo; in green). However, this doesn&rsquo;t matter because we only need to match the first 24 bits. The red and blue parts match up and therefore 216.32.180.16 falls within the range of 216.32.180.0/24. If we take a slightly different IP address, 216.32.181.16, that will have a different 32-bit representation. It will not fall into the /24 range because the last bit does not match:</p><div class="mediaobject"><img src="/uploads/images/figures/2011/06/img4.jpg" /></div><p>You can see that specifying things in CIDR notation is a very quick and easy way to list IPs on a blocklist. It makes sense to us humans reading it because we can interpret the numbers &lsquo;naturally&rsquo;, and it works from a technical perspective because it translates into bit-mapping. This is how PBL and other lists are able to manage so many IPs. The IP range 65.55.0.0/16 lists any IP that matches 65.55.xx.xx (65,536 IP addresses). They all fall into a logical range.</p><p>The number of IPs that fall within a CIDR range is evaluated as 2^(32-n) where n is the CIDR range (the number after the slash). A /24 (pronounced slash 24) is 2^(32-24) = 2^8 = 256 IPs, a /12 is 4,096 IPs, and so forth. The larger the CIDR range number n, the smaller the range of IPs it covers. To newbies, this is counterintuitive and takes a bit of time to get used to, but after a while you pick up the lingo. The smallest IP range is a /32 (one IP) whereas the largest is a /0 (every single IP).</p><p>IPv6 changes things because there are 128 bits in an IP address. Here&rsquo;s an example from <span class="emphasis"><em>Wikipedia</em></span> (Image taken from http://upload.wikimedia.org/wikipedia/commons/7/70/Ipv6_address_leading_zeros.svg):</p><div class="mediaobject"><img src="/uploads/images/figures/2011/06/img5.jpg" /></div><p>A /32 is no longer the smallest IP range, it is now /128. The size of a standard subnet is 2^64 IP addresses, the square of the size of the number of IPs in IPv4. While the planners of IPv6 don&rsquo;t think that the entire address space will be used, it will make network routing and management much more efficient.</p><p>One idea to make the problem of mail more manageable is to restrict the address space that is allowed to send mail. Ideally, we&rsquo;d restrict where mail servers could send mail from. If we say that the number of individual mail servers in the world will never exceed 32 million (not unreasonable), or 2^25, then what if the 25 least significant bits were reserved for mail servers?</p><p>Right off the hop, any IP address that tried to connect to a mail server to send email that was outside the range (in hexadecimal) of 0:0:0:0:0:0:0:0 to 0:0:0:0:0:0:0200:0000 (or, :: to ::0200:0000) could automatically be rejected. This would be a PBL in reverse. Whereas PBL lists IPs that should never send mail, this algorithm would state that mail should only be accepted from IPs that are allowed to send it, and everything else should be rejected.</p><p>This is similar to the idea of moving to a whitelist solution &ndash; in which mail is only accepted from the servers from which you want to receive mail. It solves the introduction problem because new people who you might want to hear from will be sending mail from a permitted set of IP addresses. All of the standard reputation tracking applies and the amount of space that spammers can hide in is restricted. If they want to send spam from servers that traditionally never send mail, they won&rsquo;t be able to do it because all of the good guys have already set up an agreement that says &lsquo;If you want to send mail to us, you must do it from this set of IP addresses.&rsquo;</p><p>Randomizing the IP to send from a mail server that is outside the pre-agreed range will not make it easier for a spammer to hide because they wouldn&rsquo;t have been able to send mail from it anyhow. To make an analogy, if you send mail from an IP on the PBL and then switch to another IP on the PBL, it doesn&rsquo;t matter because in either case, your email would still be rejected.</p><p>As it turns out, the least significant 64 bits are reserved in IPv6. The first 64 bits of the IPv6 address are the network address (48 bits routing prefix and 16 bit subnet id), and the last 64 bits are the interface identifier. The 64-bit interface identifier may be generated automatically from the interface&rsquo;s MAC address using the modified EUI-64 format, obtained from a DHCPv6 server, automatically established randomly, or assigned manually (<span class="emphasis"><em>because the MAC address of the machine is used to generate the interface identifier in some cases, this makes it easier to reject mail from these servers</em></span>). You are no longer blocking an IP address that is subject to change in the case of DHCP, but instead blocking the actual piece of hardware which cannot change its MAC address. It&rsquo;s a more granular level of block that is more reliable&hellip; if we can determine that the IP was generated using the MAC address). Using the least significant 64 bits will be problematic because an IP address is what we use to identify a device attached to the Internet and if they are already predefined by some algorithm, then we can&rsquo;t use them. The least 25 bits in an IPv6 address are already spoken for. But, we <span class="emphasis"><em>could</em></span> allocate some other 32 million or so IP addresses (a /103) <span class="emphasis"><em>somewhere</em></span> to be used for sending mail.</p><p>This would have to be managed to avoid it spiralling out of control &ndash; we need to know which block of IP addresses are reserved for sending mail and then how to share that range across millions of customers. For example, suppose we had 1,024 IP addresses to allocate and we decided to reserve 500&ndash;564 (1/16 of the Internet) for sending mail. How do we share it? Let&rsquo;s suppose that there are 10 major regional Internet registries (RIRs) who hand out the IPs to their customers (ISPs, people with their own home Internet permanent connections, businesses, etc.). Let&rsquo;s further suppose they decide to divide it up manually. RIR 1 gets addresses 0&ndash;99, RIR 2 gets 100&ndash;199, and so forth up to RIR 10 who gets 900&ndash;999 with the final 24 IPs being reserved for special functions. However, RIR 6 has all of the IPs that are permitted to send mail. That&rsquo;s not fair and nobody would agree to that.</p><div class="mediaobject"><img src="/uploads/images/figures/2011/06/img6.jpg" /></div><p>Instead, we decide to divide things up more equitably. RIR 1 gets addresses 0&ndash;99 plus 500&ndash;504 (five IP addresses used to send mail). RIR 2 gets 100&ndash;199 plus 505&ndash;509 (also five IP addresses). Thus, each of the registrars has to &lsquo;logically&rsquo; manage both its allocated range and its special email range. Instead of using CIDR ranges to allocate everything sequentially, there has to be a big table of who owns what. This gets very messy when you have to manage a lot of different IP ranges, particularly when the universe is as vast as IPv6. On the other hand, we&rsquo;re going to have to manage lots of IP addresses anyhow and this is just one more set of IPs that must be managed.</p><p>If IANA were to publish the rules and say that these are the designated IP ranges that are to be used to send mail, then everyone would be playing by the same set of rules right from the beginning. Not only that, but it&rsquo;s really not all that different from today. Regional Internet registries already allocate space to local Internet registries (LIRs), who then distribute the blocks down to their customers. When IANA provisions space, it would have to ensure that it provisions it such that it takes the special reserved range for mail into account. This is something that it already does today when it provisions IP space as well as geo-allocates it. Smarter people than me will need to figure out the necessary algorithms.</p><div class="mediaobject"><img src="/uploads/images/figures/2011/06/img7.jpg" /></div><p>From these examples, it&rsquo;s clear that using an even distribution based upon numerical order is not going to work but reserving IP ranges and then mapping them out would. Even today, we have reserved IP address space that nobody is supposed to use (224.0.0.0 upwards is reserved for multicast, 10.0.0.0/8 is part of RFC 1918&rsquo;s internal address space, and so forth). The work that needs to be done is the following:</p><div class="itemizedlist"><ul type="disc"><li><p>A committee of people must figure out how many IP addresses should be reserved for sending mail &ndash; such that we are not likely to run out of space in a couple of decades &ndash; and then reserve an appropriate range for it.</p></li><li><p>IANA must then reserve that space and come up with rules for how to hand that out to the RIRs. The RIRs must then come up with rules for how to allocate it to the LIRs, who then have to figure out how to allocate it to their customers. They then have to manage the infrastructure necessary to maintain the mappings of who owns what.</p></li><li><p>Next, RFCs need to be written on how to send and receive mail over IPv6.</p></li><li><p>Then, software vendors need to write code to perform IPv6 email transactions that are able to implement these rules.</p></li><li><p>Finally, IP blocklist maintainers need to start populating their lists in IPv6 notation pursuant to the restrictions that are built into the RFCs.</p></li></ul></div><p>It&rsquo;s a ton of work &ndash; years of it &ndash; but if we want to start receiving mail over IPv6 then that&rsquo;s what needs to be done.</p><p>This restriction of IP space for mail solves one problem but it doesn&rsquo;t solve others. On the one hand, it makes management of IPs scalable for machines that are bots. Today, most spam is sent from botnets. However, botnets do not always send out all of their spam directly &ndash; many bots compromise legitimate mail hosts or email accounts and send out spam that way, or create a throwaway account at a free email service and send out small amounts of spam from it before discarding it. This technique is used today but on a smaller scale than spamming directly. If we successfully solve the problem of direct-to-spam botnets, spammers will simply shift the bulk of their spamming to compromised or throwaway accounts.</p><p>I guess that means those of us in the e-security industry will always have a job. There&rsquo;s a silver lining to everything!</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4031334"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Levine, J. A Politically Incorrect Guide to IPv6, part III. <span class="bibliosource"><a href="http://jl.ly/Internet/v6incor3.html?seemore=y" target="_blank">http://jl.ly/Internet/v6incor3.html?seemore=y</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Leiba, B. IP Blocklists, Email, and IPv6. <span class="bibliosource"><a href="http://www.circleid.com/posts/ip_blocklists_email_and_ipv6/" target="_blank">http://www.circleid.com/posts/ip_blocklists_email_and_ipv6/</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Digging through the problem of IPv6 and email&url=https://www.virusbulletin.com/virusbulletin/2011/06/digging-through-problem-ipv6-and-email"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2011/06/digging-through-problem-ipv6-and-email'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2011/06/digging-through-problem-ipv6-and-email&title=Digging through the problem of IPv6 and email"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2011/06/digging-through-problem-ipv6-and-email&t=Digging through the problem of IPv6 and email"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2011/06/digging-through-problem-ipv6-and-email"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>