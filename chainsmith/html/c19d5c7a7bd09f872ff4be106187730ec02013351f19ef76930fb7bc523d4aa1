<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: Bootkits: past, present &amp; future</title>
<meta name="description" content="Bootkit threats have always been a powerful weapon in the hands of cybercriminals, allowing them to establish persistent and stealthy presence in their victims' systems. The most recent notable spike in bootkit infections was associated with attacks on 64-bit versions of the Microsoft Windows platform, which restrict the loading of unsigned kernel-mode drivers. However, these bootkits aren't effective against UEFI-based platforms. So, are UEFI-based machines immune against bootkit threats (or would they be)? In their VB2014 paper, Eugene Rodionov, Alexander Matrosov and David Harley look at how bootkit threats have evolved over time and what we should expect in the near future." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1743;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201411-Bootkits"></a>VB2014 paper: Bootkits: past, present &amp; future</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2014-11-12</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Eugene</span> <span class="surname">Rodionov</span></h3><span class="orgname">ESET</span>, <span class="orgdiv">Canada</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Alexander</span> <span class="surname">Matrosov</span></h3><span class="orgname">Intel</span>, <span class="orgdiv">USA</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">David</span> <span class="surname">Harley</span></h3><span class="orgname">ESET North America</span>, <span class="orgdiv">UK</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Bootkit threats have always been a powerful weapon in the hands of cybercriminals, allowing them to establish persistent and stealthy presence in their victims&#39; systems. The most recent notable spike in bootkit infections was associated with attacks on 64-bit versions of the Microsoft Windows platform, which restrict the loading of unsigned kernel-mode drivers. However, these bootkits aren&#39;t effective against UEFI-based platforms. So, are UEFI-based machines immune against bootkit threats (or would they be)? In their VB2014 paper, Eugene Rodionov, Alexander Matrosov and David Harley look at how bootkit threats have evolved over time and what we should expect in the near future. </p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2705" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2705" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id4342865">Abstract</a></span></dt><dt><span class="sect1"><a href="#id4136791">Introduction</a></span></dt><dt><span class="sect1"><a href="#id4743390">Bootkit evolution</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id2352926">&copy; Brain damage</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4638791">Boot infection rebooted</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id2675365">Bootkit classification</a></span></dt><dt><span class="sect2"><a href="#id2778524">TDL4 and Olmasco</a></span></dt><dt><span class="sect2"><a href="#id3645553">Rovnix</a></span></dt><dt><span class="sect2"><a href="#id4604285">Gapz</a></span></dt><dt><span class="sect2"><a href="#id3625676">Win32/Gapz: hidden storage implementation</a></span></dt><dt><span class="sect2"><a href="#id3845436">Win32/Gapz: network communication</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3845440">UEFI security</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4059077">UEFI bootkit: Dreamboot</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4035323">Future threats and future tools</a></span></dt><dt><span class="sect1"><a href="#id4769963">CHIPSEC</a></span></dt><dt><span class="sect1"><a href="#id3625361">Hidden file system reader tool</a></span></dt><dt><span class="sect1"><a href="#id2672693">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4342865"></a>Abstract</h2></div></div></div><p>Bootkit threats have always been a powerful weapon in the hands of cybercriminals, allowing them to establish a persistent and stealthy presence in their victims&rsquo; systems. The most recent notable spike in bootkit infections was associated with attacks on 64-bit versions of the <span class="emphasis"><em>Microsoft Windows</em></span> platform, which restrict the loading of unsigned kernel-mode drivers. However, these bootkits are not effective against UEFI-based platforms. So, are UEFI-based machines immune against bootkit threats (or would they be)?</p><p>The aim of this presentation is to show how bootkit threats have evolved over time and what we should expect in the near future. First, we will summarize what we have learned about the bootkits seen in the wild targeting the <span class="emphasis"><em>Microsoft Windows</em></span> platform: from TDL4 and Rovnix (the one used by the Carberp banking trojan) up to Gapz (which employs one of the stealthiest bootkit infection techniques seen so far). We will review their infection approaches and the methods they have employed to evade detection and removal from the system.</p><p>Secondly, we will look at the security of the increasingly popular UEFI platform from the point of view of the bootkit author as UEFI becomes a target of choice for researchers in offensive security. Proof-of-concept bootkits targeting <span class="emphasis"><em>Windows 8</em></span> using UEFI have already been released. We will focus on various attack vectors against UEFI and discuss available tools and what measures should be taken to mitigate against them.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4136791"></a>Introduction</h2></div></div></div><p>The first bootkits started to emerge on the malware scene as cybercriminals realized that bootkit development was a way in which they could increase the profitability of a kernel-mode rootkit by widening the range of its targets to include users of 64-bit machines. This resulted in a trend whereby rootkit developers began to focus on bootkits.</p><p>The main obstacle to 64-bit development was the need to bypass the <span class="emphasis"><em>Microsoft</em></span> kernel-mode code signing policy for system drivers, and this is the rationale behind modern bootkit development. However, the history of the bootkit begins much earlier than that.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4743390"></a>Bootkit evolution</h2></div></div></div><p>The first IBM-PC-compatible boot sector viruses from 1987 used the same concepts and approaches as modern threats, infecting boot loaders so that the malicious code was launched even before the operating system was booted.</p><p>In fact, attacks on the PC boot sector were already known from (and even before) the days of MS-DOS, and these have a part to play in our understanding of the development of approaches to taking over a system by compromising and hijacking the boot process.</p><p>The first microcomputer to have been affected by viral software seems to have been the <span class="emphasis"><em>Apple II</em></span>. At that time, <span class="emphasis"><em>Apple II</em></span> diskettes usually contained the disk operating system. Around 1981 [<span class="citation"><a href="#citation.1">1</a></span>], there were already versions of a &lsquo;viral&rsquo; DOS reported at <span class="emphasis"><em>Texas A&amp;M</em></span>. In general, though, the &lsquo;credit&rsquo; for the &lsquo;first&rsquo; <span class="emphasis"><em>Apple II</em></span> virus is given to Rich Skrenta&rsquo;s Elk Cloner (1982&ndash;3) [<span class="citation"><a href="#citation.2">2</a></span>], [<span class="citation"><a href="#citation.3">3</a></span>].</p><p>Although Elk Cloner preceded PC boot sector viruses by several years, its method of boot sector infection was very similar. It modified the loaded OS by hooking itself, and stayed resident in RAM in order to infect other floppies, intercepting disk accesses and overwriting their system boot sectors with its own code. The later Load Runner (1989), affecting <span class="emphasis"><em>Apple IIGS </em></span>and <span class="emphasis"><em>ProDOS</em></span> [<span class="citation"><a href="#citation.2">2</a></span>], rarely gets a mention nowadays, but its speciality was to trap the reset command triggered by the key combination CONTROL+COMMAND+RESET and take it as a cue to write itself to the current diskette, so that it would survive a reset. This may not be the earliest example of &lsquo;persistence&rsquo; as a characteristic of malware that refused to go away after a reboot, but it&rsquo;s certainly a precursor to more sophisticated attempts to maintain a malicious program&rsquo;s presence.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2352926"></a>&copy; Brain damage</h3></div></div></div><p>The first PC virus is usually considered to be Brain, a fairly bulky Boot Sector Infector (BSI), which misappropriated the first two sectors for its own code and moved the original boot code up to the third sector, marking the sectors it used as &lsquo;bad&rsquo; so that they wouldn&rsquo;t be overwritten.</p><p>Brain had some features that significantly prefigured some of the characterizing features of modern bootkits. First, the use of a hidden storage area in which to keep its own code (though in a much more basic form than TDSS and its successors). Secondly, the use of &lsquo;bad&rsquo; sectors to protect that code from legitimate housekeeping by the operating system. Thirdly, the stealthy hooking of the disk interrupt handler to ensure that the original, legitimate boot sector stored in sector three was displayed when the virus was active [<span class="citation"><a href="#citation.2">2</a></span>].</p><p>The volume of boot sector infectors and infection first began to decline when it became possible to change the boot order in setup so that the system would boot from the hard disk and ignore any left-over floppy. However, it was the increasing take up of modern <span class="emphasis"><em>Windows</em></span> versions and the virtual disappearance of the floppy drive that finally killed off the old-school BSI.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4638791"></a>Boot infection rebooted</h2></div></div></div><p><span class="emphasis"><em>Windows</em></span> &ndash; and hardware and firmware technology &ndash; has moved on since Brain and its immediate successors, and boot infection has evolved into new types of attack on operating system boot loaders, especially since <span class="emphasis"><em>Microsoft</em></span> started to use a kernel-mode code signing policy in its 64-bit operating systems.</p><p>All bootkits aim to modify and subvert operating system components before the OS can be loaded. The most interesting target components (<a href="#figure.1">Figure 1</a>) are as follows: BIOS/UEFI, MBR (Master Boot Record) and the operating system boot loader.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="The system booting flow." src="/uploads/images/figures/2014/11/Bootkits-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;The system booting flow.</b></p></div><p>The harbinger of modern bootkits is generally considered to be <span class="emphasis"><em>eEye</em></span>&rsquo;s proof of concept (PoC) BootRoot [<span class="citation"><a href="#citation.4">4</a></span>], which was presented at BlackHat 2005. BootRoot was an NDIS (Network Driver Interface) backdoor demonstrating the use of an old vector as a model for modern OS attacks.</p><p>At BlackHat 2007, Vbootkit [<span class="citation"><a href="#citation.5">5</a></span>] was released. This PoC code demonstrated possible attacks on the <span class="emphasis"><em>Windows Vista </em></span>kernel by modifying the boot sector. The authors of Vbootkit released its code as an open-source project, and that release coincided with the initial detection of the first malicious bootkit, Mebroot.</p><p>This unusually sophisticated malware offered a real challenge for anti-virus companies because it used new stealth techniques for surviving after a reboot. The Stoned bootkit [<span class="citation"><a href="#citation.6">6</a></span>] was also released at BlackHat, apparently so named in homage to the much earlier, but very successful Stoned BSI.</p><p>These proof-of-concept bootkits are not the direct cause for the coinciding release of unequivocally malicious bootkits such as Mebroot [<span class="citation"><a href="#citation.7">7</a></span>]. Malware developers were already searching for new and stealthy ways to extend the window of active infection before security software detected an infection. In addition, in 2007 <span class="emphasis"><em>Microsoft Windows Vista</em></span> enforced a kernel-mode code signing policy on 64-bit operating systems, regulating the distribution of system drivers. This triggered the resurrection of stealth implementation by subversion of the boot process, in the form of modern bootkits.</p><p>All known bootkits conform to one of two categories. The first group consists of proof-of-concept demonstrations developed by security researchers, and the second consists of the real and unequivocally malicious threats developed by cybercriminals (see <a href="#table.1">Table 1</a>).</p><div class="table"><a id="table.1"></a><table border="1" summary="The chronological evolution of PoC bootkits versus real world
      bootkit threats."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Evolution of proof-of-concept bootkits</th><th align="center">Evolution of bootkit threats</th></tr></thead><tbody><tr><td>eEye BootRoot &ndash; 2005 The first MBR-based bootkit for <span class="emphasis"><em>MS Windows</em></span> operating systems.</td><td>Mebroot &ndash; 2007 The first MBR-based bootkit in the wild.</td></tr><tr><td>Vbootkit &ndash; 2007 The first bootkit to target <span class="emphasis"><em>Microsoft Windows Vista</em></span>.</td><td>Mebratix &ndash; 2008 The other malware family based on MBR infection.</td></tr><tr><td>Vbootkit x64 &ndash; 2009 [<span class="citation"><a href="#citation.8">8</a></span>] The first bootkit to bypass the digital signature checks on <span class="emphasis"><em>MS Windows 7</em></span>.</td><td>Mebroot v2 &ndash; 2009 The evolved version of the Mebroot malware.</td></tr><tr><td>Stoned Bootkit &ndash; 2009 Another example of MBR-based bootkit infection.</td><td>Olmarik (TDL4) &ndash; 2010/11 The first 64-bit bootkit in the wild.</td></tr><tr><td>Stoned Bootkit x64 &ndash; 2011 MBR-based bootkit supporting the infection of 64-bit operating systems.</td><td>Olmasco (TDL4 modification) &ndash; 2011 The first VBR-based bootkit infection.</td></tr><tr><td>DeepBoot &ndash; 2011 [<span class="citation"><a href="#citation.9">9</a></span>] Used interesting tricks to switch from real-mode to protected mode.</td><td>Rovnix &ndash; 2011 The evolution of VBR-based infection with polymorphic code.</td></tr><tr><td>Evil Core &ndash; 2011 [<span class="citation"><a href="#citation.10">10</a></span>] This concept bootkit used SMP (symmetric multiprocessing) for booting into protected-mode</td><td>Mebromi &ndash; 2011 The first exploration of the concept of BIOSkits seen in the wild.</td></tr><tr><td>VGA Bootkit &ndash; 2012 [<span class="citation"><a href="#citation.11">11</a></span>] VGA-based bootkit concept.</td><td>Gapz &ndash; 2012 [<span class="citation"><a href="#citation.12">12</a></span>] The next evolution of VBR infection</td></tr><tr><td>DreamBoot &ndash; 2013 [<span class="citation"><a href="#citation.13">13</a></span>] The first public concept of UEFI bootkit.</td><td>OldBoot - 2014 [<span class="citation"><a href="#citation.14">14</a></span>] The first bootkit for the <span class="emphasis"><em>Android</em></span> operating system in the wild.</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;The chronological evolution of PoC bootkits versus real world bootkit threats.</b></p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2675365"></a>Bootkit classification</h3></div></div></div><p>The main idea behind bootkits is to abuse and subvert the operating system in the course of the initial boot process. At the very beginning of the bootup process, the BIOS code reads the Master Boot Record at the first sector of the bootable hard drive, to which it transfers control. The MBR consists of the boot code and a partition table that describes the hard drive&rsquo;s partitioning scheme. Modern bootkits can be classified into two groups, according to the type of boot sector infection employed: MBR and VBR (Volume Boot Record) bootkits (see <a href="#figure.2">Figure 2</a>). The more sophisticated and stealthier bootkits we see are based on VBR infection techniques.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Bootkit classification by type of boot sector infection." src="/uploads/images/figures/2014/11/Bootkits-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Bootkit classification by type of boot sector infection.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2778524"></a>TDL4 and Olmasco</h3></div></div></div><p>TDL4 [<span class="citation"><a href="#citation.15">15</a></span>] and Olmasco [<span class="citation"><a href="#citation.16">16</a></span>] bootkits both target the MBR of the bootable hard drive &ndash; however, they differ in that TDL4 overwrites MBR code, whereas Olmasco modifies the MBR&rsquo;s partition table. Both infection approaches have the same result. Malicious components are initialized at boot time in order to load the malicious kernel-mode driver from the hidden storage area, and thus bypass the <span class="emphasis"><em>Microsoft</em></span> kernel-mode code signing policy enforced on x64 platforms. In <a href="#table.2">Table 2</a>, we show the modules stored in the hidden file system of the TDL4 and used in the boot chain.</p><div class="table"><a id="table.2"></a><table border="1" summary="TDL4 boot components."><colgroup><col /><col /></colgroup><thead><tr><th align="center">File name</th><th align="center">Description</th></tr></thead><tbody><tr><td>mbr</td><td>Original contents of the infected hard drive boot sector</td></tr><tr><td>ldr16</td><td>16-bit real-mode loader code</td></tr><tr><td>ldr32</td><td>Fake kdcom.dll for x86 systems</td></tr><tr><td>ldr64</td><td>Fake kdcom.dll for x64 systems</td></tr><tr><td>drv32</td><td>The main bootkit driver for x86 systems</td></tr><tr><td>drv64</td><td>The main bootkit driver for x64 systems</td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;TDL4 boot components.</b></p></div><p><a href="#figure.3">Figure 3</a> summarizes the boot process followed by the TDL4 bootkit on <span class="emphasis"><em>Windows Vista</em></span> and<span class="emphasis"><em> Windows 7</em></span> operating systems.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="TDL4 bootkit workflow." src="/uploads/images/figures/2014/11/Bootkits-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;TDL4 bootkit workflow.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3645553"></a>Rovnix</h3></div></div></div><p>Win32/Rovnix is the first known bootkit to target the VBR. Its infection routine reads the 15 sectors following the VBR, which contain the Initial Program Loader (IPL) code. These sectors are compressed and appended to the malicious bootstrap code. The resulting code is then written to the 15 sectors that follow the VBR, as shown in <a href="#figure.4">Figure 4</a>. Consequently, on the next system start-up, the malicious bootstrap code receives control.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Win32/Rovnix approach to infection." src="/uploads/images/figures/2014/11/Bootkits-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Win32/Rovnix approach to infection.</b></p></div><p>When the malicious bootstrap code is executed it hooks the Int 13h handler in order to patch ntldr/bootmgr system components so as to gain control after the boot loader components are loaded. After that it decompresses and returns control to the original bootstrap code.</p><p>In order to load its malicious unsigned driver into kernel-mode address space and bypass the kernel-mode code signing policy, Win32/Rovnix employs the following technique. First, in order to propagate itself through processor execution mode switching (from real mode into protected mode), it uses the IDT (Interrupt Descriptor Table). This is a special system structure which is used in protected mode and consists of interrupt handler descriptors. The malware copies itself over the second half of the IDT, which is not used by the system. Secondly, it hooks the int 1h protected mode handler and sets hardware breakpoints so as to be able to receive control at specific points of the OS kernel loading process. By using debugging registers dr0&ndash;dr7, which are an essential part of the x86 and x64 architectures, the malware gets control at some point during the kernel initialization and loads its own malicious driver manually, thus bypassing the kernel-mode code integrity check.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4604285"></a>Gapz</h3></div></div></div><p>Historically, there are two modifications of the bootkit Win32/Gapz implementing different infection methods. The first version of the malware acted like a traditional MBR infector, while the other version employed a rather sophisticated stealth approach to infecting the VBR. For this reason, in this section we will focus on the latter, more interesting approach. What is remarkable about this technique is that only a few bytes of the original VBR are affected. The essence of this approach is that Win32/Gapz modifies the &lsquo;Hidden Sectors&rsquo; field of the VBR, while all the other data and code of the VBR and IPL remain untouched.</p><p>The field that is targeted by the malware is located in the Volume Parameter Block (VPB), which is a special data structure located in the VBR and describing the attributes of the NTFS volume. The purpose of the &lsquo;Hidden Sectors&rsquo; fields is to provide an offset in sectors to the Initial Program Loader (IPL) from the beginning of the volume, as illustrated in <a href="#figure.5">Figure 5</a>.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="&lsquo;Hidden Sectors&rsquo; field of BPB." src="/uploads/images/figures/2014/11/Bootkits-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;&lsquo;Hidden Sectors&rsquo; field of BPB.</b></p></div><p>The IPL code is loaded and executed by the VBR: thus, by modifying value of the &lsquo;Hidden Sectors&rsquo; field, the malware is able to intercept execution flow at boot time, as shown in <a href="#figure.6">Figure 6</a>. The next time the VBR code is executed, it loads and executes the bootkit code instead of the legitimate IPL. The bootkit image is written either before the very first partition or after the last partition of the hard drive.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Layout of a hard drive infected by Win32/Gapz." src="/uploads/images/figures/2014/11/Bootkits-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Layout of a hard drive infected by Win32/Gapz.</b></p></div><p>The main purpose of the bootkits considered above is to load and pass control to the malware&rsquo;s kernel-mode module without being noticed by security software. The kernel-mode module of Win32/Gapz isn&rsquo;t a conventional PE image, but is composed of a set of blocks with position-independent code, each block serving a specific purpose as described in <a href="#table.3">Table 3</a>.</p><div class="table"><a id="table.3"></a><table border="1" summary="Win32/Gapz blocks description."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Block #</th><th align="center">Implemented functionality</th></tr></thead><tbody><tr><td>1</td><td>General API, gathering information on the hard drives, CRT string routines, etc.</td></tr><tr><td>2</td><td>Cryptographic library: RC4, MD5, SHA1, AES, BASE64, etc.</td></tr><tr><td>3</td><td>Hooking engine, disassembler engine.</td></tr><tr><td>4</td><td>Hidden storage implementation.</td></tr><tr><td>5</td><td>Hard disk driver hooks, self-defence.</td></tr><tr><td>6</td><td>Payload manager.</td></tr><tr><td>7</td><td>Payload injector into processes&rsquo; user-mode address space.</td></tr><tr><td>8</td><td>Network communication: data link layer.</td></tr><tr><td>9</td><td>Network communication: transport layer.</td></tr><tr><td>10</td><td>Network communication: protocol layer.</td></tr><tr><td>11</td><td>Payload communication interface.</td></tr><tr><td>12</td><td>Main routine.</td></tr></tbody></table><p class="title"><b>Table&nbsp;3.&nbsp;Win32/Gapz blocks description.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3625676"></a>Win32/Gapz: hidden storage implementation</h3></div></div></div><p>So as to store payload and configuration information secretly Win32/Gapz implements hidden storage. The image is located in a file named &lsquo;\??\C:\System Volume Information\{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}&rsquo;, where X signifies hexadecimal numbers generated based on configuration information. The file is formatted as a FAT32 volume.</p><p>To keep the information stored within the hidden storage secret, its content is encrypted. The malware utilizes AES with key length 256 bits in CBC (Cipher Block Chaining) mode to encrypt/decrypt each sector of the hidden storage. As IV (Initialization Value) for CBC mode, Win32/Gapz utilizes the number of the first sector being encrypted/decrypted. Thus, even though the same key is used to encrypt every sector of the hard drive, using different IVs for different sectors results in different ciphertexts each time.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3845436"></a>Win32/Gapz: network communication</h3></div></div></div><p>In order to communicate with C&amp;C servers, Win32/Gapz employs a rather sophisticated network implementation. The network subsystem is designed in such a way as to bypass personal firewalls and network-traffic-monitoring software running on the infected machine. These features are achieved due to customized implementation of TCP/IP stack protocols in kernel mode, the implementation being based on the miniport adapter driver. According to the NDIS specification, the miniport driver is the lowest driver in the network driver stack &ndash; thus, using its interface makes it possible to bypass network traffic-monitoring software, as shown in <a href="#figure.7">Figure 7</a>.</p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Win32/Gapz custom network implementation." src="/uploads/images/figures/2014/11/Bootkits-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Win32/Gapz custom network implementation.</b></p></div><p>The malware obtains a pointer to the structure describing the miniport adapter by inspecting the NDIS library (ndis.sys) code manually. The routine responsible for handling NDIS miniport adapters is implemented in block #8 of the kernel-mode module. The architecture of the Win32/Gapz network subsystem is presented in <a href="#figure.8">Figure 8</a>.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="Win32/Gapz network architecture." src="/uploads/images/figures/2014/11/Bootkits-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;Win32/Gapz network architecture.</b></p></div><p>This approach allows the malware to use the socket interface to communicate with the C&amp;C server without being noticed.</p><p>Communication with C&amp;C servers is performed over HTTP. The malware enforces encryption to protect the confidentiality of the messages being exchanged between the bot and C&amp;C server and to check the authenticity of the message source (to prevent subversion by commands from C&amp;C servers that are not &lsquo;authentic&rsquo; &ndash; a technique often used by security researchers to disrupt a malicious botnet). The main purpose of the protocol is to request and download the payload and report the bot status to the C&amp;C server.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3845440"></a>UEFI security</h2></div></div></div><p>UEFI stands for Unified Extensible Firmware Interface: the specification was originally developed to replace legacy BIOS boot software. The boot process in UEFI is substantially different from that in the legacy BIOS environment: there is no longer any MBR and VBR code, which on older systems eventually load bootmgr and winload; these components are replaced with the UEFI boot code. Instead of an MBR-based partitioning scheme, the GPT (GUID Partition Table) partitioning scheme is used as the layout of the hard drive. The UEFI bootloader is loaded from the special partition, referred to as the EFI System Partition, formatted using the FAT32 file system (FAT12 and FAT16 are also possible). The path to the bootloader is specified in a dedicated NVRAM variable. For instance, for <span class="emphasis"><em>Microsoft Windows 8</em></span>, the path to the bootloader looks like this: &lsquo;\EFI\Microsoft\Boot\bootmgfw.efi&rsquo;. The purpose of this module is to locate the OS&rsquo;s kernel loader (winload.efi for <span class="emphasis"><em>Microsoft Windows 8</em></span>) and transfer control to it. The functionality of winload.efi is essentially the same as that of winload.exe &ndash; that is, to load the OS kernel image.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4059077"></a>UEFI bootkit: Dreamboot</h3></div></div></div><p>As noted in <a href="#table.1">Table 1</a>, Dreamboot is the first public proof of-concept bootkit targeting UEFI and <span class="emphasis"><em>Windows 8</em></span>. The bootkit infection results in the replacement of the original UEFI bootloader with a malicious substitute. When this is executed by UEFI boot code, it looks for the original bootloader (bootmgfw.efi), loads it and hooks the Archpx64TransferTo64BitApplicationAsm routine. The hook allows it to receive control at the time when the OS kernel loader &ndash; winload.efi &ndash; is in memory, but before the loader is executed. At this point the malware sets up another hook in winload.efi on the OslArchTransferToKernel routine: the name is self-explanatory. The latter hook is triggered when the OS kernel image has been mapped into system address space and Dreamboot patches it in order to disable kernel-mode security checks (PatchGuard and so on). <a href="#figure.9">Figure 9</a> summarizes the Dreamboot boot process.</p><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="Dreamboot boot process." src="/uploads/images/figures/2014/11/Bootkits-9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;Dreamboot boot process.</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4035323"></a>Future threats and future tools</h2></div></div></div><p>Implementing forensics procedures for the UEFI platform is a problem because popular forensic software is not covered. However, proof-of-concept UEFI bootkits have already been presented at many security conferences in the last few years, some of them with source code. In the previous case of bootkits targeting legacy bootstrap code in the MBR, it was two years from the release of the first publicly known PoC code to malware samples being seen in the wild. The motivation for attacks on UEFI is growing every year because the number of PCs and laptops with a legacy BIOS is decreasing year on year. The number of people using <span class="emphasis"><em>Microsoft Windows 8</em></span> is also growing, which means that the number of users with active Secure Boot is increasing.</p><p>UEFI malware infection can attack by way of a number of different vectors:</p><div class="itemizedlist"><ul type="disc"><li><p>The first type uses the same approach as the Dreamboot bootkit, based on replacing the original <span class="emphasis"><em>Windows</em></span> Boot Manager and adding a new boot loader (<a href="#figure.10">Figure 10</a>).</p><div class="figure"><a id="figure.10"></a><div class="mediaobject"><img alt="UEFI infection by replaced boot loader." src="/uploads/images/figures/2014/11/Bootkits-10.jpg" /></div><p class="title"><b>Figure&nbsp;10.&nbsp;UEFI infection by replaced boot loader.</b></p></div></li><li><p>The second approach is by directly abusing the UEFI DXE (Driver execution Environment) driver [<span class="citation"><a href="#citation.17">17</a></span>] (<a href="#figure.11">Figure 11</a>).</p><div class="figure"><a id="figure.11"></a><div class="mediaobject"><img alt="UEFI infection by abusing DXE driver." src="/uploads/images/figures/2014/11/Bootkits-11.jpg" /></div><p class="title"><b>Figure&nbsp;11.&nbsp;UEFI infection by abusing DXE driver.</b></p></div></li><li><p>The third method is to patch the UEFI &lsquo;Option ROM&rsquo;: for example, the DXE Driver in Add-On Card (Network, Storage &hellip;), which isn&rsquo;t embedded in the firmware volume in ROM [<span class="citation"><a href="#citation.18">18</a></span>], [<span class="citation"><a href="#citation.19">19</a></span>] (<a href="#figure.12">Figure 12</a>).</p><div class="figure"><a id="figure.12"></a><div class="mediaobject"><img alt="Types of UEFI bootkit infection." src="/uploads/images/figures/2014/11/Bootkits-12.jpg" /></div><p class="title"><b>Figure&nbsp;12.&nbsp;Types of UEFI bootkit infection.</b></p></div></li></ul></div><p>The Secure Boot implementation in the latest version of <span class="emphasis"><em>Microsoft Windows</em></span> protects the booting process from malware modifications. However, researchers are trying to understand the methods attackers could use to bypass Secure Boot exploiting vulnerabilities in BIOS/UEFI implementations in order to infect the machine, and to mitigate against them [<span class="citation"><a href="#citation.20">20</a></span>], [<span class="citation"><a href="#citation.21">21</a></span>].</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4769963"></a>CHIPSEC</h2></div></div></div><p><span class="emphasis"><em>Intel</em></span> has developed a CHIPSEC framework especially for BIOS/UEFI security assessment. This is an open-source framework for analysing the security of PC platforms covering hardware, system firmware including BIOS/UEFI, and the configuration of platform components. It allows the creation of a security test suite, security assessment tools for various low-level components and interfaces, as well as forensic capabilities for firmware. CHIPSEC is a framework developed in Python but with some parts coded in C++ for deeper integration with the hardware at operating system level. Besides <span class="emphasis"><em>Microsoft Windows</em></span> and <span class="emphasis"><em>Linux</em></span> operating systems, CHIPSEC can also run from a UEFI shell. The framework architecture is presented in <a href="#figure.13">Figure 13</a>.</p><div class="figure"><a id="figure.13"></a><div class="mediaobject"><img alt="CHIPSEC framework architecture." src="/uploads/images/figures/2014/11/Bootkits-13.jpg" /></div><p class="title"><b>Figure&nbsp;13.&nbsp;CHIPSEC framework architecture.</b></p></div><p>The CHIPSEC framework can be used as a security testing tool for searching for BIOS and UEFI firmware vulnerabilities. Also, the functionality of this tool covers forensic approaches for live/offline firmware analysis from CHIPSEC modules [<span class="citation"><a href="#citation.22">22</a></span>]. This tool includes modules for hidden file system forensics directly from the UEFI shell without the need to boot the operating system. In addition, CHIPSEC has basic heuristics for detecting BIOS/UEFI bootkit infection.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3625361"></a>Hidden file system reader tool</h2></div></div></div><p>Implementing hidden storage makes forensic analysis more difficult because:</p><div class="itemizedlist"><ul type="disc"><li><p>Malicious files are not stored in the file system (difficult to extract)</p></li><li><p>Hidden storage cannot be decrypted without malware analysis</p></li><li><p>Typical forensic tools do not work out of the box.</p></li></ul></div><p>To tackle the problem of retrieving the contents of the hidden storage areas, one needs to perform malware analysis and reconstruct the algorithms used to handle the stored data. In the course of our research into complex threats, we developed a tool some time ago [<span class="citation"><a href="#citation.23">23</a></span>] which is intended to recover the contents of hidden storage used by such complex threats as:</p><div class="itemizedlist"><ul type="disc"><li><p>TDL3 and its modifications</p></li><li><p>TDL4 and its modifications</p></li><li><p>Olmasco</p></li><li><p>Rovnix.A</p></li><li><p>Rovnix.B</p></li><li><p>Sirefef (ZeroAccess)</p></li><li><p>Goblin (XPAJ)</p></li><li><p>Flame (dump decrypted resource section)</p></li></ul></div><p>The tool is very useful in incident response, threat analysis and monitoring. It is able to dump the malware&rsquo;s hidden storage, as well as to dump any desired range of sectors of the hard drive. A screenshot of the tool&rsquo;s output is shown in <a href="#figure.14">Figure 14</a>.</p><div class="figure"><a id="figure.14"></a><div class="mediaobject"><img alt="Hidden file system reader." src="/uploads/images/figures/2014/11/Bootkits-14.jpg" /></div><p class="title"><b>Figure&nbsp;14.&nbsp;Hidden file system reader.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2672693"></a>Conclusion</h2></div></div></div><p><span class="emphasis"><em>Microsoft</em></span> claimed that the release of the Secure Boot technology heralded the end of the bootkit era. In practice, Secure Boot just switched the focus of the attackers towards a change in infection strategy. There are still many active machines in the world with old operating systems where Secure Boot is not supported. For non-targeted attacks, just intended to build botnets, cybercriminals will continue to use old bootkits and bootkit techniques for MBR/VBR infection until a critical mass of users have switched to modern hardware and operating systems.</p><p>In targeted attacks on <span class="emphasis"><em>Microsoft Windows 8</em></span>, however, attackers will use vulnerabilities in the most common BIOS/UEFI firmware. The security life cycle for BIOS/UEFI is totally different from that in operating systems or popular software. This presents a problem because the BIOS/UEFI firmware on end users&rsquo; machines has sometimes never been updated since the first day they were used. We do not see a unified updating process embedded in the operating system because different firmware vendors use different schemes for the delivery of updates. Modern security software does not yet operate at the level of BIOS/UEFI firmware protection. In the opinion of the authors of this paper [<span class="citation"><a href="#citation.24">24</a></span>], an interesting future lies ahead, possibly starting with targeted attacks: who&rsquo;s to say that they haven&rsquo;t already started?</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3393218"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Slade, R. Robert Slade&rsquo;s Guide to Computer Viruses. 2nd Edition, Springer, 1996. <span class="bibliosource"><a href="https://www.amazon.com/Robert-Slades-Guide-Computer-Viruses/dp/0387946632" target="_blank">http://www.amazon.com/Robert-Slades-Guide-Computer-Viruses/dp/0387946632</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Harley, D.; Slade, R.; Gattiker, U. Viruses Revealed. Osborne, 2007. <span class="bibliosource"><a href="https://www.amazon.com/Viruses-Revealed-David-Harley/dp/B007PMOWTQ" target="_blank">http://www.amazon.com/Viruses-Revealed-David-Harley/dp/B007PMOWTQ</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Sz&ouml;r, P. The Art of Computer Virus Research and Defense. Addison Wesley, 2005. <span class="bibliosource"><a href="http://books.google.co.uk/books/about/The_Art_of_Computer_Virus_Research_and_D.html?id=XE-ddYF6uhYC&amp;redir_esc=y" target="_blank">http://books.google.co.uk/books/about/The_Art_of_Computer_Virus_Research_and_D.html?id=XE-ddYF6uhYC&amp;redir_esc=y</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Soeder, D.; Permeh, R. eEye BootRoot. BlackHat, 2005. <span class="bibliosource"><a href="https://www.blackhat.com/presentations/bh-usa-05/bh-us-05-soeder.pdf" target="_blank">http://www.blackhat.com/presentations/bh-usa-05/bh-us-05-soeder.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] Kumar, N.; Kumar V. Vbootkit. BlackHat 2007. <span class="bibliosource"><a href="https://www.blackhat.com/presentations/bh-europe-07/Kumar/Whitepaper/bh-eu-07-Kumar-WP-apr19.pdf" target="_blank">https://www.blackhat.com/presentations/bh-europe-07/Kumar/Whitepaper/bh-eu-07-Kumar-WP-apr19.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] Kleissner, P. Stoned Bootkit. BlackHat 2009. <span class="bibliosource"><a href="https://www.blackhat.com/presentations/bh-usa-09/KLEISSNER/BHUSA09-Kleissner-StonedBootkit-PAPER.pdf" target="_blank">http://www.blackhat.com/presentations/bh-usa-09/KLEISSNER/BHUSA09-Kleissner-StonedBootkit-PAPER.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] Florio, E.; Kasslin, K. Your Computer is Now Stoned (...Again!): The Rise of MBR Rootkits. Symantec, 2013. <span class="bibliosource"><a href="https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/your_computer_is_now_stoned.pdf" target="_blank">http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/your_computer_is_now_stoned.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] Kumar, N.; Kumar V. VBootkit 2.0: Attacking Windows 7 via Boot Sectors. HiTB 2009. <span class="bibliosource"><a href="https://conference.hitb.org/hitbsecconf2009dubai/materials/D2T2 - Vipin and Nitin Kumar - vbootkit 2.0.pdf" target="_blank">http://conference.hitb.org/hitbsecconf2009dubai/materials/D2T2%20-%20Vipin%20and%20Nitin%20Kumar%20-%20vbootkit%202.0.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] Economou, N.; Luksenberg A. Deep Boot. Ekoparty 2011. <span class="bibliosource"><a href="http://www.ekoparty.org//archive/2011/ekoparty2011_Economou-Luksenberg_Deep_Boot.pdf" target="_blank">http://www.ekoparty.org//archive/2011/ekoparty2011_Economou-Luksenberg_Deep_Boot.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] Ettlinger, W.; Vieb&ouml;ck, S. Evil Core Bootkit: Pwning Multiprocessor Systems. NinjaCon, 2011. <span class="bibliosource"><a href="http://downloads.ninjacon.net/downloads/proceedings/2011/Ettlinger_Viehboeck-Evil_Core_Bootkit.pdf" target="_blank">http://downloads.ninjacon.net/downloads/proceedings/2011/Ettlinger_Viehboeck-Evil_Core_Bootkit.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.11"></a><p class="bibliomixed">[11] Diego, J.; Economou, N.A. VGA Persistent Rootkit. Ekoparty 2012. <span class="bibliosource"><a href="http://corelabs.coresecurity.com/index.php?module=Wiki&amp;action=view&amp;type=publication&amp;name=vga_persistent_rootkit" target="_blank">http://corelabs.coresecurity.com/index.php?module=Wiki&amp;action=view&amp;type=publication&amp;name=vga_persistent_rootkit</a></span>.</p></div><div class="bibliomixed"><a id="citation.12"></a><p class="bibliomixed">[12] Rodionov, E.; Matrosov, A. Mind the Gapz: The most complex bootkit ever analyzed? ESET, 2013. <span class="bibliosource"><a href="http://www.welivesecurity.com/wp-content/uploads/2013/05/gapz-bootkit-whitepaper.pdf" target="_blank">http://www.welivesecurity.com/wp-content/uploads/2013/05/gapz-bootkit-whitepaper.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.13"></a><p class="bibliomixed">[13] Kaczmarek, S. UEFI and Dreamboot. HiTB 2013. <span class="bibliosource"><a href="http://www.quarkslab.com/dl/13-04-hitb-uefi-dreamboot.pdf" target="_blank">http://www.quarkslab.com/dl/13-04-hitb-uefi-dreamboot.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.14"></a><p class="bibliomixed">[14] Zihang, X. Oldboot: the first bootkit on Android. 360, 2014. <span class="bibliosource"><a href="http://blogs.360.cn/360mobile/2014/01/17/oldboot-the-first-bootkit-on-android/" target="_blank">http://blogs.360.cn/360mobile/2014/01/17/oldboot-the-first-bootkit-on-android/</a></span>.</p></div><div class="bibliomixed"><a id="citation.15"></a><p class="bibliomixed">[15] Rodionov, E.; Matrosov, A. The Evolution of TDL: Conquering x64. ESET, 2011. <span class="bibliosource"><a href="https://www.eset.com/us/resources/white-papers/The_Evolution_of_TDL.pdf" target="_blank">http://www.eset.com/us/resources/white-papers/The_Evolution_of_TDL.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.16"></a><p class="bibliomixed">[16] Matrosov, A. Olmasco bootkit: next circle of TDL4 evolution (or not?). ESET, 2012. <span class="bibliosource"><a href="http://www.welivesecurity.com/2012/10/18/olmasco-bootkit-next-circle-of-tdl4-evolution-or-not-2/" target="_blank">http://www.welivesecurity.com/2012/10/18/olmasco-bootkit-next-circle-of-tdl4-evolution-or-not-2/</a></span>.</p></div><div class="bibliomixed"><a id="citation.17"></a><p class="bibliomixed">[17] Intel&reg; Platform Innovation Framework for UEFI Specification. <span class="bibliosource"><a href="https://www.intel.com/content/www/us/en/architecture-and-technology/unified-extensible-firmware-interface/efi-specifications-general-technology.html" target="_blank">http://www.intel.com/content/www/us/en/architecture-and-technology/unified-extensible-firmware-interface/efi-specifications-general-technology.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.18"></a><p class="bibliomixed">[18] UEFI Validation Option ROM Validation Guidance.Microsoft, 2014. <span class="bibliosource"><a href="https://technet.microsoft.com/en-us/library/dn747882.aspx" target="_blank">http://technet.microsoft.com/en-us/library/dn747882.aspx</a></span>.</p></div><div class="bibliomixed"><a id="citation.19"></a><p class="bibliomixed">[19] Loukas, K. Mac EFI Rootkits. Black Hat 2012. <span class="bibliosource"><a href="http://ho.ax/De_Mysteriis_Dom_Jobsivs_Black_Hat_Paper.pdf" target="_blank">http://ho.ax/De_Mysteriis_Dom_Jobsivs_Black_Hat_Paper.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.20"></a><p class="bibliomixed">[20] Bulygin, Y.; Furtak, A.; Bazhaniuk, O. A tale of one software bypass of Windows 8 Secure Boot. Black Hat 2013. <span class="bibliosource"><a href="https://media.blackhat.com/us-13/us-13-Bulygin-A-Tale-of-One-Software-Bypass-of-Windows-8-Secure-Boot-Slides.pdf" target="_blank">https://media.blackhat.com/us-13/us-13-Bulygin-A-Tale-of-One-Software-Bypass-of-Windows-8-Secure-Boot-Slides.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.21"></a><p class="bibliomixed">[21] Kallenberg, C.; Bulygin, Y. All Your Boot Are Belong To Us Intel, MITRE. CanSecWest 2014. <span class="bibliosource"><a href="/virusbulletin/2014/11/paper-bootkits-past-present-amp-future
" target="_top">https://cansecwest.com/slides/2014/AllYourBoot_csw14-intel-final.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.22"></a><p class="bibliomixed">[22] Intel CHIPSEC. <span class="bibliosource"><a href="https://github.com/chipsec/chipsec" target="_blank">https://github.com/chipsec/chipsec</a></span>.</p></div><div class="bibliomixed"><a id="citation.23"></a><p class="bibliomixed">[23] ESET Hidden File System Reader. <span class="bibliosource"><a href="https://www.eset.com/int/download//utilities/detail/family/173/" target="_blank">http://www.eset.com/int/download//utilities/detail/family/173/</a></span>.</p></div><div class="bibliomixed"><a id="citation.24"></a><p class="bibliomixed">[24] Matrosov, A.; Rodionov, E.; Harley, D. Rootkits and Bootkits: Advanced Malware Analysis. No Starch, 2015 (in preparation).</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-RodionovMatrosov.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: Bootkits: past, present &amp; future&url=https://www.virusbulletin.com/virusbulletin/2014/11/paper-bootkits-past-present-amp-future"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/11/paper-bootkits-past-present-amp-future'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/11/paper-bootkits-past-present-amp-future&title=VB2014 paper: Bootkits: past, present &amp; future"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/11/paper-bootkits-past-present-amp-future&t=VB2014 paper: Bootkits: past, present &amp; future"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/11/paper-bootkits-past-present-amp-future"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>