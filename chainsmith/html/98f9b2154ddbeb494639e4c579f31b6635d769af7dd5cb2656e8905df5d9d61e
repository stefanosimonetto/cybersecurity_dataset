<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Solarbot botnet</title>
<meta name="description" content="Solarbot, a.k.a. Dapato or Napolar, is a traditional botnet that has been around for a while. It is used for spreading other malware and often comes with built-in DDoS and proxy modules. He Xu takes a closer look." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1682;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201403-Solarbot"></a>Solarbot botnet</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2014-03-04</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">He</span> <span class="surname">Xu</span></h3><span class="orgname">Fortinet</span>, <span class="orgdiv">Canada</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Solarbot, a.k.a. Dapato or Napolar, is a traditional botnet that has been around for a while. It is used for spreading other malware and often comes with built-in DDoS and proxy modules. He Xu takes a closer look.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2507" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2507" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3714862"></a></span></dt><dt><span class="sect1"><a href="#id4477265">TLS callback procedure</a></span></dt><dt><span class="sect1"><a href="#id3161288">Fake export directory</a></span></dt><dt><span class="sect1"><a href="#id3957867">Debugger &amp; debuggee mechanism</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3811063">Debugger</a></span></dt><dt><span class="sect2"><a href="#id2759125">Debuggee</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2309892">VEH exception</a></span></dt><dt><span class="sect1"><a href="#id3428943">C&amp;C communication</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4926392">Traffic for downloading other malware</a></span></dt><dt><span class="sect2"><a href="#id2801479">Traffic idle</a></span></dt><dt><span class="sect2"><a href="#id2802457">Traffic for DDoS</a></span></dt><dt><span class="sect2"><a href="#id3730497">Traffic for dialler</a></span></dt><dt><span class="sect2"><a href="#id3281781">Full description for all commands</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2616897">Joining the Tor network</a></span></dt><dt><span class="sect1"><a href="#id2698612">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3714862"></a></h2></div></div></div><p>Solarbot, a.k.a. Dapato or Napolar, is a classical botnet that has been around for a long time. It is usually used for spreading other malware. Like its competitors, this malware often comes with built-in DDoS and proxy modules. The most recent version of Solarbot attempts to add <span class="emphasis"><em>Tor</em></span> network support to conceal its C&amp;C server. However, it seems that this feature is either still undergoing development or has been disabled. The toolkit sells for around $200 and the source code is available for 100 bitcoins (approx. US$15,000) from the website hxxp://solarbot.net. Let&rsquo;s take a closer look.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4477265"></a>TLS callback procedure</h2></div></div></div><p>The bot carries an abnormal loader with a special PE header which has no entry point, and the ImageBase is not the usual default 0040000 or 01000000 (see <a href="#figure.1">Figure 1</a>).</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="EntryPoint and ImageBase details." src="/uploads/images/figures/2014/03/Solar-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;EntryPoint and ImageBase details.</b></p></div><p>The virus entry point is located in the TLS (Thread Local Storage) table, which is usually empty in the Data Directory list.</p><p>The structure of the IMAGE_TLS_DIRECTORY is as follows:</p><pre class="programlisting">typedef struct _IMAGE_TLS_DIRECTORY32 {
  ULONG StartAddressOfRawData;
  ULONG EndAddressOfRawData;
  ULONG AddressOfIndex;
  ULONG AddressOfCallBacks;
  ULONG SizeOfZeroFill;
  ULONG Characteristics;
} IMAGE_TLS_DIRECTORY32, *PIMAGE_TLS_DIRECTORY32;
</pre><p>Let&rsquo;s look at the real data in the bot. There are two TlsCallback functions in the PE file (see <a href="#figure.2">Figure 2</a>).</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Two TlsCallback functions." src="/uploads/images/figures/2014/03/Solar-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Two TlsCallback functions.</b></p></div><p>When the bot is loaded by the system (PE loader), the TlsCallback function will be invoked ahead of the EPO.</p><p>The first TlsCallback, TlsCallback_0, is an empty function (see <a href="#figure.3">Figure 3</a>). This might be used to trick anti-virus engines.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="The first TlsCallback is an empty function." src="/uploads/images/figures/2014/03/Solar-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;The first TlsCallback is an empty function.</b></p></div><p>The second TlsCallback function uses the dynamic TLS approach to insert a new callback procedure in memory. So when TlsCallback_1 returns, the TlsDirectory changes, as shown in <a href="#figure.4">Figure 4</a>.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="The TlsDirectory changes." src="/uploads/images/figures/2014/03/Solar-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;The TlsDirectory changes.</b></p></div><p>The TlsCallback_2 function decrypts all code using the RC4 algorithm and the fixed double-word key 0x0F5BC5C9.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3161288"></a>Fake export directory</h2></div></div></div><p>The bot loader does not have real export functions, but it has an abnormal export directory that redirects to the ImageBase (MZ header), as shown in <a href="#figure.5">Figure 5</a>.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Export directory redirects to the ImageBase." src="/uploads/images/figures/2014/03/Solar-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Export directory redirects to the ImageBase.</b></p></div><p>We can see that the functions count declared in the structure is too large, and the Base is 0. This special structure will cause several debugger applications to enter an exception and thus be unable to analyse the bot.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3957867"></a>Debugger &amp; debuggee mechanism</h2></div></div></div><p>More and more bots are integrating debugger engines, and Solarbot is no exception. The bot uses this feature for anti debugging purposes, and executes different code. The bot&rsquo;s internal debugger engine is much simpler than that of ZAccess, for example, but it is still effective.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3811063"></a>Debugger</h3></div></div></div><p>The bot will restart itself as a debuggee by calling the CreateProcessW API with the parameter CreateFlags DEBUG_ONLY_THIS_PROCESS, then it will enter the main loop to handle debuggee events such as CREATE_PROCESS_DEBUG_EVENT, EXCEPTION_DEBUG_EVENT and EXIT_PROCESS_DEBUG_EVENT. For other events, the bot&rsquo;s debugger just calls the ContinueDebugEvent API with the parameter dwContinueStatus DBG_CONTINUE.</p><p>The debugger will inject all code into the newly allocated memory of the debuggee while handling the debug event CREATE_PROCESS_DEBUG_EVENT.</p><p>After that, it will modify the debuggee&rsquo;s entry point code with the PUSH_RET instruction when it handles EXCEPTION_DEBUG_EVENT and the corresponding EXCEPTION_DEBUG_INFO structure with ExceptionCode EXCEPTION_BREAKPOINT. This modified code will be triggered when the debuggee runs before its entry point. This means that all executable code in the debuggee will be overwritten by the debugger.</p><p>The debugger also modifies another remote function, which we will discuss in the next section.</p><p>The debugger handles the INT3 breakpoint, but only sets a stack flag and calls the ContinueDebugEvent API with dwContinueStatus DBG_CONTINUE as the parameter.</p><p>The debugger will terminate itself if the stack flag marker is found.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2759125"></a>Debuggee</h3></div></div></div><p>As we know, the entry point of the debuggee has been replaced by the debugger. It will run the code shown in <a href="#figure.6">Figure 6</a>, <a href="#figure.7">Figure 7</a> and <a href="#figure.8">Figure 8</a>.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Run as debuggee." src="/uploads/images/figures/2014/03/Solar-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Run as debuggee.</b></p></div><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="The bot appears to terminate itself." src="/uploads/images/figures/2014/03/Solar-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;The bot appears to terminate itself.</b></p></div><p>It appears as if the bot will terminate itself permanently (see <a href="#figure.7">Figure 7</a>). However, this does not happen, since the bot&#39;s debugger modifies the code, as shown in <a href="#figure.8">Figure 8</a>.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="The debugger modifies the code." src="/uploads/images/figures/2014/03/Solar-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;The debugger modifies the code.</b></p></div><p>The redirected code will check the current process. If the path is %startup%\lsass.exe, the bot will return to the parent function. Otherwise, it will install itself.</p><p>The installed bot triggers the EXCEPTION_BREAKPOINT (INT3) debug event at address 00FE92DE. The bot&rsquo;s debugger will ignore the INT3 event and make sure the EIP points to the next instruction correctly.</p><p>Finally, the debuggee will try to inject malicious code into explore.exe, and quit.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2309892"></a>VEH exception</h2></div></div></div><p>The malicious code injected into explore.exe uses a special trick to pick up and decrypt C&amp;C information from the internal lists.</p><p>It installs a VectoredExceptionHandler callback function into the current VEH chain using RtlAddVectoredExceptionHandler (see <a href="#figure.9">Figure 9</a>).</p><p>Then it executes the HLT instruction and causes the EXCEPTION_PRIV_INSTRUCTION exception, which will be processed by the KiUserExceptionDispatcher API. This API will call all callback functions in the VEH chain to solve the exception &ndash; so the newly added VEH callback function will be called to handle the exception.</p><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="A VectoredExceptionHandler callback function is installed." src="/uploads/images/figures/2014/03/Solar-9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;A VectoredExceptionHandler callback function is installed.</b></p></div><p>The VEH callback function saves the Context structure and then hooks the KiUserExceptionDispatcher API. Finally, it returns the EXCEPTION_CONTINUE_EXECUTION status, which means &lsquo;exception is dismissed, continue execution at the point at which the exception occurred&rsquo;. As a result, the same exception will occur again.</p><p>As the KiUserExceptionDispatcher API has been hooked, the hook function will increase the EIP pointing exception address of HLT by 0x2E, then call the ZwContinue API with the parameter Context including the updated EIP (see <a href="#figure.10">Figure 10</a>).</p><div class="figure"><a id="figure.10"></a><div class="mediaobject"><img alt="The ZWcontinue API is called with the parameter Context." src="/uploads/images/figures/2014/03/Solar-10.jpg" /></div><p class="title"><b>Figure&nbsp;10.&nbsp;The ZWcontinue API is called with the parameter Context.</b></p></div><p>Finally, the EIP will point to address 0xFE7EE8 (see <a href="#figure.11">Figure 11</a>), and the newly added VEH callback function will be removed.</p><div class="figure"><a id="figure.11"></a><div class="mediaobject"><img alt="VEH callback function is removed." src="/uploads/images/figures/2014/03/Solar-11.jpg" /></div><p class="title"><b>Figure&nbsp;11.&nbsp;VEH callback function is removed.</b></p></div><p>Why does the bot use this trick? First, KiUserExceptionDispatcher is the most important API that is always called by debuggers, and it&rsquo;s impossible to set a breakpoint in it as it will cause the system to become unstable. Second, the bot will fetch and decrypt the next C&amp;C information in the hook function just before updating the EIP.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3428943"></a>C&amp;C communication</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4926392"></a>Traffic for downloading other malware</h3></div></div></div><p><a href="#figure.12">Figure 12</a> shows an example of the traffic the bot receives when it gets a command from the C&amp;C server.</p><div class="figure"><a id="figure.12"></a><div class="mediaobject"><img alt="Command from the C&amp;C server." src="/uploads/images/figures/2014/03/Solar-12.jpg" /></div><p class="title"><b>Figure&nbsp;12.&nbsp;Command from the C&amp;C server.</b></p></div><p>The send package is a clear string that is generated with following pattern:</p><pre class="programlisting">v=%d.%d&amp;u=%s&amp;c=%s&amp;s=%s&amp;w=%d.%d.%d&amp;b=%d</pre><p>A real example is as follows:</p><pre class="programlisting">v=1.0&amp;u=QA&amp;c=JASON-82539F471&amp;s={74B1FCB1-0FEC-E3A2-23D4-B4FA74B1FCB1}&amp;w=2.5.1&amp;b=32</pre><p>As we can see, &lsquo;v&rsquo; is the bot version, which is hard coded; &lsquo;u&rsquo; is the username, which is grabbed from a call to the GetUserNameA API; &lsquo;c&rsquo; is the current computer name, which is generated from a call to the GetComputerNameA API; &lsquo;s&rsquo; is the ClsID, which is generated using various pieces of system information such as the Drive C Serial Number; &lsquo;w&rsquo; is the Windows version from a call to the GetVersionEx API; finally, &lsquo;b&rsquo; indicates whether the system is running as 32 or 64 bits.</p><p>The received package is encrypted, as shown in <a href="#figure.13">Figure 13</a>.</p><div class="figure"><a id="figure.13"></a><div class="mediaobject"><img alt="The received package is encrypted." src="/uploads/images/figures/2014/03/Solar-13.jpg" /></div><p class="title"><b>Figure&nbsp;13.&nbsp;The received package is encrypted.</b></p></div><p>The encryption algorithm is RC4, and the key is the ClsID included in the sending package parameter as &lsquo;s&rsquo;.</p><p><a href="#figure.14">Figure 14</a> shows the received data after decryption.</p><div class="figure"><a id="figure.14"></a><div class="mediaobject"><img alt="Received package after decryption." src="/uploads/images/figures/2014/03/Solar-14.jpg" /></div><p class="title"><b>Figure&nbsp;14.&nbsp;Received package after decryption.</b></p></div><p>Just like Andromeda, Solarbot uses different command IDs to identify different jobs. The current variant supports 14 commands, which range from 01 to 0x0E. The example above shows command 0D, which instructs the bot to download another piece of malware from a specified link and includes an MD5 tail for verification. The package also includes command 0C, which updates the default sleep time period.</p><p>The bot uses the GET method to download the additional malware, as shown in <a href="#figure.15">Figure 15</a>.</p><div class="figure"><a id="figure.15"></a><div class="mediaobject"><img alt="The bot uses GET to download malware." src="/uploads/images/figures/2014/03/Solar-15.jpg" /></div><p class="title"><b>Figure&nbsp;15.&nbsp;The bot uses GET to download malware.</b></p></div><p>Following the command 0D routine, the bot will check the downloaded file&rsquo;s MZ and PE signatures, then calculate the whole file&rsquo;s MD5 and compare it with the MD5 tail included in the received package. If everything matches, the bot will drop the malware into the %AppData% folder, using a random filename that follows the pattern &lsquo;%08lX.exe&rsquo;.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2801479"></a>Traffic idle</h3></div></div></div><p>If there are no more commands, there will be much less traffic than in the previous example (see <a href="#figure.16">Figure 16</a>):</p><div class="figure"><a id="figure.16"></a><div class="mediaobject"><img alt="No more commands." src="/uploads/images/figures/2014/03/Solar-16.jpg" /></div><p class="title"><b>Figure&nbsp;16.&nbsp;No more commands.</b></p></div><p>The received package is shown in <a href="#figure.17">Figure 17</a> and <a href="#figure.18">Figure 18</a>.</p><div class="figure"><a id="figure.17"></a><div class="mediaobject"><img alt="Received package binary data." src="/uploads/images/figures/2014/03/Solar-17.jpg" /></div><p class="title"><b>Figure&nbsp;17.&nbsp;Received package binary data.</b></p></div><div class="figure"><a id="figure.18"></a><div class="mediaobject"><img alt="Received package after decryption." src="/uploads/images/figures/2014/03/Solar-18.jpg" /></div><p class="title"><b>Figure&nbsp;18.&nbsp;Received package after decryption.</b></p></div><p>Command 06 instructs the bot to set the tag to &lsquo;1&rsquo; (from the default 0) to indicate the end of the previous DDoS attack job, if one existed. The following command, 0C, instructs the bot to update the default sleep time to 3,600ms.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2802457"></a>Traffic for DDoS</h3></div></div></div><p>We know the bot has a DDoS attack feature, so let&rsquo;s look at some real attack traffic (<a href="#figure.19">Figure 19</a>):</p><div class="figure"><a id="figure.19"></a><div class="mediaobject"><img alt="Attack traffic." src="/uploads/images/figures/2014/03/Solar-19.jpg" /></div><p class="title"><b>Figure&nbsp;19.&nbsp;Attack traffic.</b></p></div><p>The command 04 signifies the start of a UDP DDoS attack. <a href="#figure.20">Figure 20</a> shows what the victim&rsquo;s traffic will look like.</p><div class="figure"><a id="figure.20"></a><div class="mediaobject"><img alt="Victim&rsquo;s traffic" src="/uploads/images/figures/2014/03/Solar-20.jpg" /></div><p class="title"><b>Figure&nbsp;20.&nbsp;Victim&rsquo;s traffic</b></p></div><p>According to the code, the bot opens 10,000 connections with the victim IP at the same time. The DDoS will not stop unless the bot receives a further command with ID 06. In this case, command 06 was just behind the second command 04 (see <a href="#figure.19">Figure 19</a>) and was included in the same package, so the attack time was not very long.</p><p>As far as we can tell, the victim IP does not belong to any organization or business website, so this example may be a test, and may not cause too much damage.</p><p>Command 02 instructs the bot to download malware without MD5 verification (see <a href="#figure.19">Figure 19</a>). In this case, the bot just downloads the binary from the specified link then drops it into the %AppData% folder and runs it.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3730497"></a>Traffic for dialler</h3></div></div></div><p>Command ID 0A instructs the bot to open iexplore.exe or another default Internet browser to open the URL. This may currently just be for testing purposes.</p><div class="figure"><a id="figure.21"></a><div class="mediaobject"><img alt="Command 0A." src="/uploads/images/figures/2014/03/Solar-21.jpg" /></div><p class="title"><b>Figure&nbsp;21.&nbsp;Command 0A.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3281781"></a>Full description for all commands</h3></div></div></div><p>The following is a detailed description of all commands as seen in our analysis:</p><p>01: SetEvent to activate the next C&amp;C communication</p><p>02: Download malware without MD5 verification, and run it in the %AppData% folder</p><p>03: Create thread for DDoS attack under TCP protocol</p><p>04: Create thread for DDoS attack under UDP protocol</p><p>05: Create thread for DDoS attack under TCP protocol</p><p>06: Set tag to indicate that the current DDoS attack has finished</p><p>07: Download malware without MD5 verification, and drop it in the %AppData% folder (without running it)</p><p>08: Create thread for DDoS attack under TCP protocol 09: Create thread as Proxy server</p><p>0A: Run iexplore.exe to open URL with flag NORMAL_PRIORITY_CLASS</p><p>0B: Run iexplore.exe to open URL with flags NORMAL_PRIORITY_CLASS and CREATE_NO_WINDOW</p><p>0C: Update the default sleep time</p><p>0D: Download malware with MD5 verification, and run it in the %AppData% folder</p><p>0E: Download malware with MD5 verification, and drop it in the %AppData% folder (without running it)</p><p>0F: Update HTTP request header host string.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2616897"></a>Joining the Tor network</h2></div></div></div><p><span class="emphasis"><em>Tor</em></span> is a service for enabling anonymity and making Internet activity very difficult to track. Solarbot generates files such as %AppData%\tor.bin and %AppData%\torrc and stores them, but it does not appear to use them. We did not locate any <span class="emphasis"><em>Tor</em></span> traffic in Solarbot sample replication, either. Our best guess is that this feature is still under development.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2698612"></a>Conclusion</h2></div></div></div><p>This botnet is very powerful and may become more aggressive in the future, with lots of evidence in the code to suggest that it is still undergoing development. We will continue to monitor its evolution.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4511448"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] <span class="bibliosource"><a href="https://blog.avast.com/2013/09/25/win3264napolar-new-trojan-shines-on-the-cyber-crime-scene/" target="_blank">http://blog.avast.com/2013/09/25/win3264napolar-new-trojan-shines-on-the-cyber-crime-scene/</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] <span class="bibliosource"><a href="http://www.infosecurity-magazine.com/view/34788/napolar-solarbot-trojans-share-dna/" target="_blank">http://www.infosecurity-magazine.com/view/34788/napolar-solarbot-trojans-share-dna/</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] <span class="bibliosource"><a href="http://www.malwaretech.com/2013/10/end-of-line-for-solar-bot-win32napolar.html" target="_blank">http://www.malwaretech.com/2013/10/end-of-line-for-solar-bot-win32napolar.html</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Solarbot botnet&url=https://www.virusbulletin.com/virusbulletin/2014/03/solarbot-botnet"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/03/solarbot-botnet'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/03/solarbot-botnet&title=Solarbot botnet"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/03/solarbot-botnet&t=Solarbot botnet"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/03/solarbot-botnet"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>