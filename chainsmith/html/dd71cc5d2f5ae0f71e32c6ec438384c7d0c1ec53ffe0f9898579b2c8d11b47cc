<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: Smart home appliance security and malware</title>
<meta name="description" content="The current upward trend in smart appliance adoption might resemble similar historic trends seen with PCs and smartphones. At this early stage of the adoption process, we might think that the smart devices in our home are safe, but what do we really know about them? In his VB2014 paper, Jeong Wook Oh discusses the current security status of popular smart home appliances (TVs, thermostats and surveillance cameras), shares his findings from reverse engineering those devices and analysing their defences, and elaborates on possible ways to mitigate future threats on these increasingly popular platforms." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1751;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201411-smart-home-appliance"></a>VB2014 paper: Smart home appliance security and malware</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2014-12-15</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Jeong Wook</span> <span class="surname">Oh</span></h3><span class="orgname">HP</span>, <span class="orgdiv">USA</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>The current upward trend in smart appliance adoption might resemble similar historic trends seen with PCs and smartphones. At this early stage of the adoption process, we might think that the smart devices in our home are safe, but what do we really know about them? In his VB2014 paper, Jeong Wook Oh discusses the current security status of popular smart home appliances (TVs, thermostats and surveillance cameras), shares his findings from reverse engineering those devices and analysing their defences, and elaborates on possible ways to mitigate future threats on these increasingly popular platforms.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2737" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2737" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3549523">Abstract</a></span></dt><dt><span class="sect1"><a href="#id3564693">Introduction</a></span></dt><dt><span class="sect1"><a href="#id3218664">Analysis target</a></span></dt><dt><span class="sect1"><a href="#id4471361">Internals</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id2851865">Information source</a></span></dt><dt><span class="sect2"><a href="#id3467356">Debug port access</a></span></dt><dt><span class="sect2"><a href="#id3649034">Rooting</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4951995">SmartView flaw</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4341728">SSDP</a></span></dt><dt><span class="sect2"><a href="#id3467583">Basic information request</a></span></dt><dt><span class="sect2"><a href="#id2767967">Advanced operations</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2767970">Remote control protocol</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4662796">Design weakness</a></span></dt><dt><span class="sect2"><a href="#id4263320">Vulnerability in implementation</a></span></dt><dt><span class="sect2"><a href="#id4263324">Sending keys</a></span></dt><dt><span class="sect2"><a href="#id2851458">Exploiting</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4944391">Installing a backdoor</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id2209058">Clone view</a></span></dt><dt><span class="sect2"><a href="#id2582424">Developer account</a></span></dt><dt><span class="sect2"><a href="#id3106898">App sync &amp; application security issues</a></span></dt><dt><span class="sect2"><a href="#id3431952">Dropper hack</a></span></dt><dt><span class="sect2"><a href="#id4321980">Installer</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2437788">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3549523"></a>Abstract</h2></div></div></div><p>Smart home devices are becoming increasingly popular. Sales of smart TVs alone are expected to increase to 141 million units in 2015. This number may be small when compared with sales of PCs and mobile devices, but it is an impressive indication of what&rsquo;s to come. And it&rsquo;s not only our TVs that are getting smarter; our refrigerators, surveillance systems and thermostats are becoming &lsquo;smart&rsquo; too. They are connected to the Internet. They are in the cloud. They have more functionality than ever before, and they&rsquo;re making our lives easier. Conversely, they may also be providing new opportunities for crime.</p><p>The current upward trend in smart appliance adoption might resemble similar historic trends seen with PCs and smartphones. At this early stage of the adoption process, we might think that the smart devices in our home are safe, but what do we really know about them? They are like black boxes and there is very little information available about their internals. Worryingly, what little published research exists in this area suggests our confidence may be misplaced.</p><p>Maybe we won&rsquo;t see prevalent malware on these platforms in the near future, but this is not because smart appliances aren&rsquo;t prone to attack. It is more about the current expected ROI for malware writers. The market for smart appliances isn&rsquo;t even remotely close to saturation at this point, so the potential number of targets, and therefore incentive to compromise, remains relatively low. However, this gives us a good opportunity to think about the security of these smart devices and get ahead of the game. We can learn important lessons from the history of PCs, smartphones and malware.</p><p>In this paper, we discuss the current security status of popular smart home appliances (TVs, thermostats and surveillance cameras). We share our findings from reverse engineering those devices and analysing their defences, including noting possible attacks or vulnerabilities (such as memory corruptions, MITM issues, etc.). We also elaborate on possible ways to mitigate future threats on these increasingly popular platforms.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3564693"></a>Introduction</h2></div></div></div><p>Smart home appliances are becoming increasingly popular as the trend of everything being connected continues apace. These interconnections, moderated by our mobile devices or networked PCs, make our lives more convenient and productive &ndash; and this is just the start. Imagine the possibilities if you could control and monitor all your intelligent appliances and home equipment remotely.</p><p>But we might be missing something here. We have put a strong emphasis on PC and mobile phone security, and many measures, including anti-malware, have been developed to defeat malicious software and exploits. Vendors like <span class="emphasis"><em>Microsoft</em></span>, <span class="emphasis"><em>Apple</em></span> and <span class="emphasis"><em>Google</em></span> have put significant effort and resources into making their products and the ecosystem more secure. The positive cycle of bug reporting, fixing and crediting is mostly stable in this space. But smart home appliances, such as smart TVs and smart refrigerators, are manufactured by large vendors who are not familiar with the software industry and its established security best practices. Then there are other, smaller vendors who have great ideas as to how to make life easier with many different Internet-enabled devices, but security may not be at the forefront of their minds. Neither of these groups has the experience in security that forged the current policies for addressing vulnerabilities and malware in the more conventional IT space.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3218664"></a>Analysis target</h2></div></div></div><p>Among the growing number of smart appliances, smart TVs have shown very impressive sales recently and are projected to increase to 141 million units worldwide in 2015 [<span class="citation"><a href="#citation.1">1</a></span>]. This number is still small compared to the number of PCs and mobile devices being sold, but it is a number we can&rsquo;t ignore. For this paper, I picked one smart TV model (<span class="emphasis"><em>Samsung F-series</em></span>) as a case study and performed a detailed security assessment. In this paper I discuss the attack vectors from the point of view of the attackers and malware creators. Hopefully this will give you a glimpse into the state of security in this space.</p><p>The target device I chose was a <span class="emphasis"><em>55UF6350</em></span> model purchased from a US retail store in 2013. In other words, very typical of the sort of TV you might purchase nowadays. This model is usually called an <span class="emphasis"><em>F-series</em></span> (most of the <span class="emphasis"><em>Samsung</em></span> TV models sold in 2013 fall into this category). <a href="#table.1">Table 1</a> shows the basic features of this TV. From the specification alone, it almost sounds like it is a small computer with huge screen.</p><div class="table"><a id="table.1"></a><table border="1" summary="Features of Samsung TV model 55UF6350."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Features</th><td class="auto-generated">&nbsp;</td></tr></thead><tbody><tr><td><span class="bold"><strong>Processor</strong></span></td><td>Dual core (ARMv7)</td></tr><tr><td><span class="bold"><strong>Screen size</strong></span></td><td>55&rsquo;&rsquo;</td></tr><tr><td><span class="bold"><strong>AllShare&trade;</strong></span></td><td>Content sharing and screen mirroring</td></tr><tr><td><span class="bold"><strong>SmartView</strong></span></td><td>Clone view</td></tr><tr><td><span class="bold"><strong>Smart phone remote support</strong></span></td><td>Yes (requires SmartView app)</td></tr><tr><td><span class="bold"><strong>USB HID support</strong></span></td><td>Yes</td></tr><tr><td><span class="bold"><strong>Motion rate</strong></span></td><td>240</td></tr><tr><td><span class="bold"><strong>Network</strong></span></td><td>One built-in wireless adapter</td></tr><tr><td><span class="bold"><strong>Browser</strong></span></td><td>WebKit-based with Flash 11.1 support (ActionScript 3.0)</td></tr><tr><td><span class="bold"><strong>Installed apps</strong></span></td><td><span class="emphasis"><em>Netflix</em></span>, <span class="emphasis"><em>Picasa</em></span>, <span class="emphasis"><em>Skype</em></span>, <span class="emphasis"><em>YouTube</em></span>, <span class="emphasis"><em>Facebook</em></span></td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Features of Samsung TV model 55UF6350.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4471361"></a>Internals</h2></div></div></div><p>The TV runs a <span class="emphasis"><em>Linux</em></span> operating system, as illustrated in <a href="#figure.1">Figure 1</a>, which shows the dmesg command result from the TV. There&rsquo;s some interesting information here, like the memory size of 616MB total and an ARMv7 model CPU. The machine doesn&rsquo;t look as powerful as a PC, but it feels more like an embedded <span class="emphasis"><em>Linux</em></span> system.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="The dmesg command result from the TV." src="/uploads/images/figures/2014/12/Oh-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;The dmesg command result from the TV.</b></p></div><p><a href="#figure.2">Figure 2</a> shows the mount command result with a number of partitions mounted on the system. Of the multiple partitions mounted, some are mounted as read-only and some are mounted as read-write.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="The mount command result from the TV." src="/uploads/images/figures/2014/12/Oh-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;The mount command result from the TV.</b></p></div><p><a href="#figure.3">Figure 3</a> shows the ps command result. An interesting process like X, which is used for X-Windows, is shown. There are other interesting processes too, like udhcpc (a dhcp client) and WebkitWebProcess (a Webkit process). The process name exeAPP (also figured) is responsible for the related operations of apps overall, and the process name exeTV is responsible for showing television programs.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="The ps -eaf command result from the TV." src="/uploads/images/figures/2014/12/Oh-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;The ps -eaf command result from the TV.</b></p></div><p>Table 2 shows some of the TCP ports on the system, related processes and their usage. The exAPP process listens on many ports including 55000 and 55001. These ports are used for the <span class="emphasis"><em>SmartView</em></span> application. Other SOAP-related ports from lighttpd are mostly for Universal Plug and Play (UPNP) related operations. UPNP is a set of network protocols that enables network devices to discover each other and perform additional operations with each other seamlessly.</p><div class="table"><a id="table.2"></a><table border="1" summary="Ports of interest on the TV."><colgroup><col /><col /><col /><col /></colgroup><thead><tr><th align="center">Protocol</th><th align="center">Port</th><th align="center">Process</th><th align="center">Usage</th></tr></thead><tbody><tr><td>TCP</td><td>6000</td><td>X</td><td>X Windows</td></tr><tr><td>TCP</td><td>55000</td><td>exeAPP</td><td>SmartView</td></tr><tr><td>TCP</td><td>55001</td><td>exeAPP</td><td>SmartView</td></tr><tr><td>TCP</td><td>9090</td><td>exeAPP</td><td>SmartView</td></tr><tr><td>TCP</td><td>7676</td><td>exeAPP</td><td>SOAP</td></tr><tr><td>TCP</td><td>80</td><td>lighttpd</td><td>SOAP</td></tr><tr><td>TCP</td><td>4443</td><td>lighttpd</td><td>SOAP</td></tr><tr><td>TCP</td><td>443</td><td>lighttpd</td><td>SOAP</td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;Ports of interest on the TV.</b></p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2851865"></a>Information source</h3></div></div></div><p>For <span class="emphasis"><em>Samsung</em></span> TV rooting resources and other general information, the <span class="emphasis"><em>Samygo</em></span> forum (<a href="http://www.samygo.tv/" target="_blank">http://www.samygo.tv/</a>) is very useful. A lot of information from independent hobbyists is accumulated here.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Samygo forum." src="/uploads/images/figures/2014/12/Oh-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Samygo forum.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3467356"></a>Debug port access</h3></div></div></div><p>Most embedded devices allow technicians to access firmware through hardware interfaces like JTAG or UART ports. In most cases, they don&rsquo;t want end-users to abuse the feature, so it is common for the interfaces to be obfuscated. The <span class="emphasis"><em>Samsung</em></span> TV is known to use a modified version of a serial port called EX LINK (<a href="#figure.5">Figure 5</a>).</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="EX-LINK port on the back of the TV." src="/uploads/images/figures/2014/12/Oh-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;EX-LINK port on the back of the TV.</b></p></div><p>The schematics for the EX-LINK cable are shown in <a href="#figure.6">Figure 6</a>. At one end of the cable is a DB9 female connector, and the other end uses a stereo audio plug interface. You can easily make a cable by combining a DB9 cable and a stereo audio jack cable.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="EX-LINK cable schematics (source: )." src="/uploads/images/figures/2014/12/Oh-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;EX-LINK cable schematics (source: [<span class="citation"><a href="#citation.2">2</a></span>]).</b></p></div><p>After building an EX-LINK cable, you need to enable debug mode from the TV. As shown in <a href="#figure.7">Figure 7</a>, EX-LINK is configured in UART mode by default. This needs to be changed to debug mode, as shown in <a href="#figure.8">Figure 8</a>.</p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="RS-232 jack is UART mode by default." src="/uploads/images/figures/2014/12/Oh-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;RS-232 jack is UART mode by default.</b></p></div><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="Debug mode enabled." src="/uploads/images/figures/2014/12/Oh-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;Debug mode enabled.</b></p></div><p>If everything is working well, you will see a screen similar to that shown in <a href="#figure.9">Figure 9</a>. More detailed log messages are shown in <a href="#figure.10">Figure 10</a>. A lot of debug messages from the system processes are displayed, which is very helpful when reverse engineering system features. Also, with special key sequences, you can gain access to the Top-Debug-Menu (TDM). Through the TDM, you can control sensitive features of the TV at a very low level. Most of this information is available from the Samygo forum.</p><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="Connecting to the TV through the EX-LINK cable." src="/uploads/images/figures/2014/12/Oh-9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;Connecting to the TV through the EX-LINK cable.</b></p></div><div class="figure"><a id="figure.10"></a><div class="mediaobject"><img alt="Detailed debug messages from the TV." src="/uploads/images/figures/2014/12/Oh-10.jpg" /></div><p class="title"><b>Figure&nbsp;10.&nbsp;Detailed debug messages from the TV.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3649034"></a>Rooting</h3></div></div></div><p>To research smart TV internals, gaining access to the system shell is essential. To achieve that, I used the <span class="emphasis"><em>SamyGO</em></span> rooting app. Interestingly, the way this app works implies a weakness with a <span class="emphasis"><em>Samsung</em></span> TV security feature.</p><p>First, you download the <span class="emphasis"><em>SamyGO</em></span> rooting package from the <span class="emphasis"><em>Samygo</em></span> forum site and put the package on a USB thumb stick. From the TV, go into the &lsquo;More Apps&rsquo; menu. When you plug in your USB stick, it shows the <span class="emphasis"><em>SamyGO</em></span> application on the application list. <a href="#figure.11">Figure 11</a> shows the application icon with the name &lsquo;SamyGO-F&rsquo; on the screen.</p><div class="figure"><a id="figure.11"></a><div class="mediaobject"><img alt="SamyGO rooting app." src="/uploads/images/figures/2014/12/Oh-11.jpg" /></div><p class="title"><b>Figure&nbsp;11.&nbsp;SamyGO rooting app.</b></p></div><p><a href="#table.3">Table 3</a> shows the files inside the <span class="emphasis"><em>SamyGO</em></span> app. Essentially, a TV app is just a ZIP archive file with HTML, Ja-vaScript and additional files inside. <span class="emphasis"><em>Samsung</em></span> TV apps are written in HTML and JavaScript. The main code that does the rooting is inside index.html and JavaScript\Main.js.</p><div class="table"><a id="table.3"></a><table border="1" summary="Main program structure."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Name</th><th align="center">Description</th></tr></thead><tbody><tr><td>widget</td><td>Basic widget information (resolution, alpha blending usage)</td></tr><tr><td>config.xml</td><td>Program configuration (widget id, name, description, etc.)</td></tr><tr><td>index.html</td><td>Main HTML file loaded</td></tr><tr><td>JavaScript\Main.js</td><td>Main exploit file in JavaScript code</td></tr><tr><td>data\patch</td><td>Main patch file (zip format)</td></tr><tr><td>icon\samygo.jpg</td><td>Program icon</td></tr><tr><td>icon\samygo_106.png</td><td>Program icon</td></tr><tr><td>icon\samygo_115.png</td><td>Program icon</td></tr><tr><td>icon\samygo_85.png</td><td>Program icon</td></tr><tr><td>icon\samygo_95.png</td><td>Program icon</td></tr><tr><td>CSS\Main.css</td><td>CSS file</td></tr></tbody></table><p class="title"><b>Table&nbsp;3.&nbsp;Main program structure.</b></p></div><p>The data\patch file is actually a ZIP archive that contains the files shown in <a href="#table.4">Table 4</a>. The remoteSamyGO.zip file inside this file is another ZIP archive that contains ELF binary files and a shell script that is installed on the target machine (<a href="#table.5">Table 5</a>). LibSkype.so is a file that replaces the original <span class="emphasis"><em>Skype</em></span> shared library file with a file of the same name.</p><div class="table"><a id="table.4"></a><table border="1" summary="Patch file structure."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Name</th><th align="center">Description</th></tr></thead><tbody><tr><td>AutoStart</td><td>Dummy AutoStart file</td></tr><tr><td>libSkype.so</td><td><span class="emphasis"><em>Skype</em></span> hooking library file</td></tr><tr><td>remoteSamyGO.zip</td><td>Main <span class="emphasis"><em>SamyGO</em></span> package file</td></tr><tr><td>runSamyGO.sh</td><td><span class="emphasis"><em>SamyGO</em></span> package run script</td></tr></tbody></table><p class="title"><b>Table&nbsp;4.&nbsp;Patch file structure.</b></p></div><div class="table"><a id="table.5"></a><table border="1" summary="remoteSamyGO.zip file structure."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Name</th><th align="center">Description</th></tr></thead><tbody><tr><td>busybox</td><td>Busybox package (including various utilities, etc.)</td></tr><tr><td>remshd</td><td>Remote shell</td></tr><tr><td>UEP_killer.sh</td><td>UEP killer</td></tr></tbody></table><p class="title"><b>Table&nbsp;5.&nbsp;remoteSamyGO.zip file structure.</b></p></div><p>The busybox file is a small binary containing many different functions including shell and FTP. The remshd file is an ELF binary that listens on port 23 and gives out a shell when anyone connects to the port. The UEP_killer.sh file is a shell script that kills a watchdog process on the system that blocks unauthorized processes (killing the watchdog process disables this security feature).</p><p>When the program is run, it displays a screen similar to that shown in <a href="#figure.12">Figure 12</a>. It overwrites <span class="emphasis"><em>Skype</em></span>&rsquo;s shared library file (libSkype.so) with its own version. Whenever <span class="emphasis"><em>Skype</em></span> runs on the TV, the main <span class="emphasis"><em>Skype</em></span> binary loads this replaced shared library and runs the <span class="emphasis"><em>SamyGO</em></span> app&rsquo;s code inside it. The shared library runs its own code for installing a remote shell and providing other features.</p><div class="figure"><a id="figure.12"></a><div class="mediaobject"><img alt="Rooting process from the rooting program." src="/uploads/images/figures/2014/12/Oh-12.jpg" /></div><p class="title"><b>Figure&nbsp;12.&nbsp;Rooting process from the rooting program.</b></p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id4851226"></a>How rooting works and its security implications</h4></div></div></div><p>You might be wondering how this rooting process is possible. The cause of the problem is that when a USB stick is inserted, the More Apps feature does not verify the applications on the USB drive &ndash; it skips the application verification process and lets the user run the program(s). Moreover, the process has root privileges. The TV apps are written in HTML and JavaScript, and the underlying system exposes JavaScript objects that support network, display and file system access, etc.</p><p>The <span class="emphasis"><em>SamyGO</em></span> app first loads the SAMSUNG-INFOLINK-FILESYSTEM object, as shown at line 11 in <a href="#figure.13">Figure 13</a>. Through this object, the JavaScript code can perform file-system-related operations. After that, as shown at line 15 in <a href="#figure.13">Figure 13</a>, the HTML page calls the Main.onLoad JavaScript.</p><div class="figure"><a id="figure.13"></a><div class="mediaobject"><img alt="Special clsids and Main.onLoad() calling." src="/uploads/images/figures/2014/12/Oh-13.jpg" /></div><p class="title"><b>Figure&nbsp;13.&nbsp;Special clsids and Main.onLoad() calling.</b></p></div><p><a href="#figure.14">Figure 14</a> shows that the filePlugin variable is resolved from the previous SAMSUNG-INFOLINK-FILESYSTEM object.</p><div class="figure"><a id="figure.14"></a><div class="mediaobject"><img alt="Main.onLoad resolves the file system plugin object." src="/uploads/images/figures/2014/12/Oh-14.jpg" /></div><p class="title"><b>Figure&nbsp;14.&nbsp;Main.onLoad resolves the file system plugin object.</b></p></div><p>Line 156 in <a href="#figure.15">Figure 15</a> shows how the Unzip method from this object can be used. Basically, you can extract an arbitrary ZIP file to an arbitrary folder.</p><div class="figure"><a id="figure.15"></a><div class="mediaobject"><img alt="Unzip function using filesystem plug-in." src="/uploads/images/figures/2014/12/Oh-15.jpg" /></div><p class="title"><b>Figure&nbsp;15.&nbsp;Unzip function using filesystem plug-in.</b></p></div><p>The target location for the ZIP operation is shown in <a href="#figure.16">Figure 16</a>. This path is where the Skype engine&rsquo;s files, including the shared library, are stored.</p><div class="figure"><a id="figure.16"></a><div class="mediaobject"><img alt="Skype engine path definition." src="/uploads/images/figures/2014/12/Oh-16.jpg" /></div><p class="title"><b>Figure&nbsp;16.&nbsp;Skype engine path definition.</b></p></div><p>The rootSamyGO function from the script extracts a &lsquo;data/patch&rsquo; file to the <span class="emphasis"><em>Skype</em></span> engine&rsquo;s location, overwriting the libSkype.so file. Now, when the <span class="emphasis"><em>Skype</em></span> program runs on the system, it loads the <span class="emphasis"><em>SamyGO</em></span> version of the libSkype.so shared library.</p><div class="figure"><a id="figure.17"></a><div class="mediaobject"><img alt="Extracting exploit packages to the Skype engine folder." src="/uploads/images/figures/2014/12/Oh-17.jpg" /></div><p class="title"><b>Figure&nbsp;17.&nbsp;Extracting exploit packages to the Skype engine folder.</b></p></div></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4951995"></a>SmartView flaw</h2></div></div></div><p>SmartView is a feature of <span class="emphasis"><em>Samsung</em></span> TVs that lets you enjoy TV content from your PC or smart phone. An <span class="emphasis"><em>iPhone</em></span> app (<a href="#figure.18">Figure 18</a>) and a PC application (<a href="#figure.19">Figure 19</a>) are available. The SmartView feature is related to other features like AllShare, etc. The SmartView feature is representative of smart TVs with network capability. Looking into how this feature works is interesting, as well as a beneficial exercise in order to gain a better understanding of the security implications of some features of smart TVs.</p><div class="figure"><a id="figure.18"></a><div class="mediaobject"><img alt="SmartView iPhone App." src="/uploads/images/figures/2014/12/Oh-18.jpg" /></div><p class="title"><b>Figure&nbsp;18.&nbsp;SmartView iPhone App.</b></p></div><div class="figure"><a id="figure.19"></a><div class="mediaobject"><img alt="SmartView PC application." src="/uploads/images/figures/2014/12/Oh-19.jpg" /></div><p class="title"><b>Figure&nbsp;19.&nbsp;SmartView PC application.</b></p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4341728"></a>SSDP</h3></div></div></div><p>Simple Service Discovery Protocol (SSDP [<span class="citation"><a href="#citation.3">3</a></span>]) is used for discovering and propagating device information on the local network. The <span class="emphasis"><em>SmartViewApp</em></span> application sends M-SEARCH requests over the multicast network (<a href="#figure.20">Figure 20</a>).</p><div class="figure"><a id="figure.20"></a><div class="mediaobject"><img alt="M-SEARCH packets." src="/uploads/images/figures/2014/12/Oh-20.jpg" /></div><p class="title"><b>Figure&nbsp;20.&nbsp;M-SEARCH packets.</b></p></div><p>The payload of the M-SEARCH packets is shown in <a href="#figure.21">Figure 21</a>. It tries to find <span class="emphasis"><em>Samsung</em></span> remote control receiver devices.</p><div class="figure"><a id="figure.21"></a><div class="mediaobject"><img alt="M-SEARCH packet payload." src="/uploads/images/figures/2014/12/Oh-21.jpg" /></div><p class="title"><b>Figure&nbsp;21.&nbsp;M-SEARCH packet payload.</b></p></div><p>The TV replies with additional information about itself using the SSDP protocol (<a href="#figure.22">Figure 22</a>).</p><div class="figure"><a id="figure.22"></a><div class="mediaobject"><img alt="M-SEARCH response." src="/uploads/images/figures/2014/12/Oh-22.jpg" /></div><p class="title"><b>Figure&nbsp;22.&nbsp;M-SEARCH response.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/11/Oh-22-large.jpg" target="_top">here</a> to view a larger version of Figure 22.)</p><p><a href="#figure.23">Figure 23</a> shows the contents of this reply packet. It has a &lsquo;LOCATION&rsquo; header that can be used for further operations. The URL is &lsquo;http://192.168.1.9:7676/smp_2_&rsquo; and the IP address of the TV is 192.168.1.9.</p><div class="figure"><a id="figure.23"></a><div class="mediaobject"><img alt="M-SEARCH response payload." src="/uploads/images/figures/2014/12/Oh-23.jpg" /></div><p class="title"><b>Figure&nbsp;23.&nbsp;M-SEARCH response payload.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3467583"></a>Basic information request</h3></div></div></div><p>From the response of the M-SEARCH request, the client can determine the URL for more operations. It tries to connect to and request information from the TV by sending a simple GET request to this URL (<a href="#figure.24">Figure 24</a>).</p><div class="figure"><a id="figure.24"></a><div class="mediaobject"><img alt="Smp_2_ application request." src="/uploads/images/figures/2014/12/Oh-24.jpg" /></div><p class="title"><b>Figure&nbsp;24.&nbsp;Smp_2_ application request.</b></p></div><p>The result of this GET request is shown in <a href="#figure.25">Figure 25</a>. The message contains basic device information including model number and a detailed description of the device. Also note that there is a service entry named urn:samsung.com:serviceId:MainTVAgent2. The entry has a controlURL of /smp_4_. This URL is where the client can perform additional SOAP operations.</p><div class="figure"><a id="figure.25"></a><div class="mediaobject"><img alt="Smp_2_ application response." src="/uploads/images/figures/2014/12/Oh-25.jpg" /></div><p class="title"><b>Figure&nbsp;25.&nbsp;Smp_2_ application response.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2767967"></a>Advanced operations</h3></div></div></div><p>So smp_4_ is a SOAP application that provides additional operations. <a href="#figure.26">Figure 26</a> shows one of the requests: it is sending a GetDTVInformation request to the TV using a SOAP message.</p><div class="figure"><a id="figure.26"></a><div class="mediaobject"><img alt="Smp_4_ application request." src="/uploads/images/figures/2014/12/Oh-26.jpg" /></div><p class="title"><b>Figure&nbsp;26.&nbsp;Smp_4_ application request.</b></p></div><p>The response to the GetDTVInformation request is shown in <a href="#figure.27">Figure 27</a>. The response contains basic information about the features the TV supports. It includes the video format it supports, TV version, and the presence of additional networking ports like Bluetooth.</p><div class="figure"><a id="figure.27"></a><div class="mediaobject"><img alt="Smp_4_ application response." src="/uploads/images/figures/2014/12/Oh-27.jpg" /></div><p class="title"><b>Figure&nbsp;27.&nbsp;Smp_4_ application response.</b></p></div><p>There are many different services available through this application, including the following functions:</p><div class="itemizedlist"><ul type="disc"><li><p>AddSchedule</p></li><li><p>ChangeSchedule</p></li><li><p>DeleteRecordedItem</p></li><li><p>DeleteSchedule</p></li><li><p>DestroyGroupOwner</p></li><li><p>EnforceAKE</p></li><li><p>GetACRCurrentChannelName</p></li><li><p>GetACRCurrentProgramName</p></li><li><p>GetACRMessage</p></li><li><p>GetAPInformation</p></li><li><p>GetAllProgramInformationURL</p></li><li><p>GetAvailableActions</p></li><li><p>GetBannerInformation</p></li><li><p>GetChannelListURL</p></li><li><p>GetCurrentBrowserMode</p></li><li><p>GetCurrentBrowserURL</p></li><li><p>GetCurrentExternalSource</p></li><li><p>GetCurrentMainTVChannel</p></li><li><p>GetCurrentProgramInformationURL</p></li><li><p>GetDTVInformation</p></li><li><p>GetDetailProgramInformation</p></li><li><p>GetFilteredProgramURL</p></li><li><p>GetMBRDeviceList</p></li><li><p>GetMBRDongleStatus</p></li><li><p>GetRecordChannel</p></li><li><p>GetScheduleListURL</p></li><li><p>GetSourceList</p></li><li><p>PlayRecordedItem</p></li><li><p>RunBrowser</p></li><li><p>SendBrowserCommand</p></li><li><p>SendMBRIRKey</p></li><li><p>SetAntennaMode</p></li><li><p>SetMainTVChannel</p></li><li><p>SetMainTVSource</p></li><li><p>SetRecordDuration</p></li><li><p>StartCloneView</p></li><li><p>StartInstantRecording</p></li><li><p>StopBrowser</p></li><li><p>StopRecord</p></li><li><p>StopView</p></li></ul></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2767970"></a>Remote control protocol</h2></div></div></div><p>In addition to SOAP services, the TV provides a remote control service on port 55000. The details of the protocol are undocumented. <a href="#figure.28">Figure 28</a> shows some of the packets using this protocol. The protocol enables the client to send remote controller keys over the network, which means that you can emulate remote controller key presses from your application on a PC or smart phone.</p><div class="figure"><a id="figure.28"></a><div class="mediaobject"><img alt="Remote controller packets." src="/uploads/images/figures/2014/12/Oh-28.jpg" /></div><p class="title"><b>Figure&nbsp;28.&nbsp;Remote controller packets.</b></p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4662796"></a>Design weakness</h3></div></div></div><p>There is a design weakness in the authentication process. <a href="#figure.29">Figure 29</a> shows an authentication packet from the client. The client is sending a message with a proprietary packet format. <a href="#figure.30">Figure 30</a> shows the hex representation of the payload bytes for authentication. Even though the format is not documented, it is fairly simple to reverse engineer.</p><div class="figure"><a id="figure.29"></a><div class="mediaobject"><img alt="Remote controller authentication packet." src="/uploads/images/figures/2014/12/Oh-29.jpg" /></div><p class="title"><b>Figure&nbsp;29.&nbsp;Remote controller authentication packet.</b></p></div><div class="figure"><a id="figure.30"></a><div class="mediaobject"><img alt="Remote controller authentication packet bytes." src="/uploads/images/figures/2014/12/Oh-30.jpg" /></div><p class="title"><b>Figure&nbsp;30.&nbsp;Remote controller authentication packet bytes.</b></p></div><p><a href="#table.6">Table 6</a> shows the parsed hex bytes from the original packet &ndash; basically, the client sends the IP address, MAC address and hostname to the server.</p><div class="table"><a id="table.6"></a><table border="1" summary="Remote controller authentication packet bytes."><colgroup><col /><col /><col /><col /></colgroup><thead><tr><th align="center">Field</th><th align="center">Data</th><th align="center">Format</th><th align="center">Description</th></tr></thead><tbody><tr><td>Unknown</td><td>00</td><td>Unknown</td><td>Unknown</td></tr><tr><td>Length</td><td>14 00</td><td>Short</td><td>Length of the following string</td></tr><tr><td>String</td><td>69 70 68 6F 6E 65 2E 2E 69 61 70 70 2E 73 61 6D 73 75 6E 67</td><td>String</td><td>iphone..iapp.samsung</td></tr><tr><td>Payload length</td><td>40 00</td><td>Short</td><td>0x40 bytes of payload</td></tr><tr><td>Unknown</td><td>64 00</td><td>Unknown</td><td>Unknown</td></tr><tr><td>Length</td><td>10 00</td><td>Short</td><td>Length of the following string</td></tr><tr><td>String</td><td>4D 54 6B 79 4C 6A 45 32 4F 43 34 78 4C 6A 45 35</td><td>Base64 string</td><td>Encoded: MTkyLjE2OC4xLjE5 Decoded: 192.168.1.19</td></tr><tr><td>Length</td><td>18 00</td><td>Short</td><td>Length of the following string</td></tr><tr><td>String</td><td>4D 54 41 74 4D 45 49 74 51 54 6B 74 4E 54 63 74 4D 54 49 74 4E 44 67 3D</td><td>Base4 string</td><td>Encoded: MTAtMEItQTktNTctMTItNDg= Decoded: 10-0B-A9-57-12-48</td></tr><tr><td>Length</td><td>10 00</td><td>Short</td><td>Length of the following string</td></tr><tr><td>String</td><td>51 31 4A 42 57 6C 6C 44 54 30 39 4C 53 55 55 3D</td><td>Base64 string</td><td>Encoded: Q1JBWllDT09LSUU= Decoded: CRAZYCOOKIE</td></tr></tbody></table><p class="title"><b>Table&nbsp;6.&nbsp;Remote controller authentication packet bytes.</b></p></div><p>When the TV receives this packet, it displays a dialog box similar to the one shown in <a href="#figure.31">Figure 31</a>. If the user allows the connection, then the client is able to send remote controller keys over the network.</p><div class="figure"><a id="figure.31"></a><div class="mediaobject"><img alt="Dialog on the TV." src="/uploads/images/figures/2014/12/Oh-31.jpg" /></div><p class="title"><b>Figure&nbsp;31.&nbsp;Dialog on the TV.</b></p></div><p>The design issue is very obvious here. The information that the client uses for authentication is the client&rsquo;s IP address, MAC address and hostname. All of this information can easily be retrieved on the local network. The IP address and MAC address are constantly being broadcasted through ARP packets, and hostnames are sent out through Windows name service packets. You do need to figure out which machine is allowed access to the TV remote controller service first, or you can try all the machines on the network to brute-force authentication. At best, this authentication design is pretty weak.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4263320"></a>Vulnerability in implementation</h3></div></div></div><p>In addition to a fundamental design flaw for remote controller authentication, there is also an implementation flaw. According to my tests, the hostname and IP address are not even used for authentication. The attacker only needs to guess the MAC address, which is constantly broadcast over the local network. But there is one more issue: if you send an empty string as a MAC address, the server always allows the connection if any client was previously allowed for the service.</p><p><a href="#figure.32">FIgure 32</a> shows the hex bytes of the payload that was used for authentication bypass. <a href="#table.7">Table 7</a> shows the parsed hex bytes, and you can see that the length fields for IP address, MAC address and hostname are all 0 and the strings are empty.</p><div class="figure"><a id="figure.32"></a><div class="mediaobject"><img alt="Remote controller &ndash; all authentication packet bytes." src="/uploads/images/figures/2014/12/Oh-32.jpg" /></div><p class="title"><b>Figure&nbsp;32.&nbsp;Remote controller &ndash; all authentication packet bytes.</b></p></div><div class="table"><a id="table.7"></a><table border="1" summary="Remote controller &ndash; all authentication packet bytes."><colgroup><col /><col /><col /><col /></colgroup><thead><tr><th align="center">Field</th><th align="center">Data</th><th align="center">Format</th><th align="center">Description</th></tr></thead><tbody><tr><td>Unknown</td><td>00</td><td>Unknown</td><td>Unknown</td></tr><tr><td>Length</td><td>14 00</td><td>Short</td><td>Length of the following string</td></tr><tr><td>String</td><td>69 70 68 6F 6E 65 2E 2E 69 61 70 70 2E 73 61 6D 73 75 6E 67</td><td>String</td><td>Ascii: iphone..iapp.samsung</td></tr><tr><td>Payload length</td><td>08 00</td><td>String</td><td>0x08 bytes of payload</td></tr><tr><td>Unknown</td><td>64 00</td><td>Unknown</td><td>Unknown</td></tr><tr><td>Length</td><td>00 00</td><td>Short</td><td>Length of the following string</td></tr><tr><td>String</td><td>&nbsp;</td><td>Base64 string</td><td>Empty</td></tr><tr><td>Length</td><td>00 00</td><td>Short</td><td>Length of the following string</td></tr><tr><td>String</td><td>&nbsp;</td><td>Base64 string</td><td>Empty</td></tr><tr><td>Length</td><td>00 00</td><td>Short</td><td>Length of the following string</td></tr><tr><td>String</td><td>&nbsp;</td><td>Base64 string</td><td>Empty</td></tr></tbody></table><p class="title"><b>Table&nbsp;7.&nbsp;Remote controller &ndash; all authentication packet bytes.</b></p></div><p><a href="#figure.33">Figure 33</a> shows the code that sends this authentication packet. From line 18, if you pass an empty string for IP, hostname and MAC address, the authentication is bypassed.</p><div class="figure"><a id="figure.33"></a><div class="mediaobject"><img alt="Authentication packet sending routine (hijack_remote.py)." src="/uploads/images/figures/2014/12/Oh-33.jpg" /></div><p class="title"><b>Figure&nbsp;33.&nbsp;Authentication packet sending routine (hijack_remote.py).</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4263324"></a>Sending keys</h3></div></div></div><p>Now that you can authenticate as a valid SmartView client, you need to figure out how to send remote controller keys. For example, <a href="#figure.34">Figure 34</a>shows a packet that is sending a key. The payload is &lsquo;S0VZX1ZPTFVQ&rsquo;, which is a base64-encoded string of &lsquo;KEY_VOLUP&rsquo;. This key is used for the volume up function.</p><div class="figure"><a id="figure.34"></a><div class="mediaobject"><img alt="Remote controller packets." src="/uploads/images/figures/2014/12/Oh-34.jpg" /></div><p class="title"><b>Figure&nbsp;34.&nbsp;Remote controller packets.</b></p></div><p><a href="#figure.35">Figure 35</a> shows the main code that sends remote controller keys. The keys are in the form of strings, and various keys can be retrieved from a packet dump of the SmartView sessions.</p><div class="figure"><a id="figure.35"></a><div class="mediaobject"><img alt="Key sending routine (hijack_remote.py)." src="/uploads/images/figures/2014/12/Oh-35.jpg" /></div><p class="title"><b>Figure&nbsp;35.&nbsp;Key sending routine (hijack_remote.py).</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2851458"></a>Exploiting</h3></div></div></div><p>Now that we can send any remote controller keys, we want to find out if anyone has previously used the SmartView feature and allowed at least one client.</p><p>For example, &lsquo;HOME-PC&rsquo; is a legitimate user PC. If a user wants to use the SmartView feature, they authenticate the PC from the TV screen by allowing the device named &lsquo;HOME-PC&rsquo; (see <a href="#figure.36">Figure 36</a>).</p><div class="figure"><a id="figure.36"></a><div class="mediaobject"><img alt="Legitimate user authentication." src="/uploads/images/figures/2014/12/Oh-36.jpg" /></div><p class="title"><b>Figure&nbsp;36.&nbsp;Legitimate user authentication.</b></p></div><p>When a SmartView client is allowed, an access control list is added to the &lsquo;Content Sharing&rsquo; menu (see <a href="#figure.37">Figure 37</a>).</p><div class="figure"><a id="figure.37"></a><div class="mediaobject"><img alt="Content sharing access control list." src="/uploads/images/figures/2014/12/Oh-37.jpg" /></div><p class="title"><b>Figure&nbsp;37.&nbsp;Content sharing access control list.</b></p></div><p>Now the attacker wants to take control and uses the SmartView client from a machine that is connected to the local network. Let&rsquo;s assume that they have already gained control of one of the machines on the local network and are trying to get into the TV to perform additional attacks. When they try to authenticate the machine under their control, a pop-up dialog appears (<a href="#figure.38">Figure 38</a>).</p><div class="figure"><a id="figure.38"></a><div class="mediaobject"><img alt="Attacker tries to authenticate." src="/uploads/images/figures/2014/12/Oh-38.jpg" /></div><p class="title"><b>Figure&nbsp;38.&nbsp;Attacker tries to authenticate.</b></p></div><p>One click of the enter key is needed for this connection to be allowed. The attacker can use the remote controller exploit here. <a href="#figure.39">Figure 39</a> shows the code from the hijack_remote.py script that bypasses authentication and sends KEY_ENTER to the TV.</p><div class="figure"><a id="figure.39"></a><div class="mediaobject"><img alt="Enter key sending code (hijack_remote.py)." src="/uploads/images/figures/2014/12/Oh-39.jpg" /></div><p class="title"><b>Figure&nbsp;39.&nbsp;Enter key sending code (hijack_remote.py).</b></p></div><p>The hijack_remote.py script is run as shown in <a href="#figure.40">Figure 40</a>. The first argument is the TV&rsquo;s IP address and the second is the MAC address. If you know the MAC address of any device that has already been authenticated, you can put that here. However, if you put an empty string here, it tries to exploit the empty MAC bypass issue.</p><div class="figure"><a id="figure.40"></a><div class="mediaobject"><img alt="Running hijack_remote.py." src="/uploads/images/figures/2014/12/Oh-40.jpg" /></div><p class="title"><b>Figure&nbsp;40.&nbsp;Running hijack_remote.py.</b></p></div><p>When the exploit is successful, the attacker is registered as an allowed &lsquo;Content Sharing&rsquo; client (see <a href="#figure.41">Figure 41</a>).</p><div class="figure"><a id="figure.41"></a><div class="mediaobject"><img alt="Content sharing access control list." src="/uploads/images/figures/2014/12/Oh-41.jpg" /></div><p class="title"><b>Figure&nbsp;41.&nbsp;Content sharing access control list.</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4944391"></a>Installing a backdoor</h2></div></div></div><p>Now we have a way to send any remote controller key to the TV. You might think that this glitch isn&rsquo;t all that useful for attackers &ndash; but imagination is the only limit here. One attack scenario we can think of is to change DNS settings in the network settings, or possibly to reroute all traffic to the attacker&rsquo;s server. Another possibility might be to install malware on the TV. From here, we will demonstrate a way in which malware can be installed on the TV remotely using a remote controller flaw.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2209058"></a>Clone view</h3></div></div></div><p>The PC version of the SmartView application supports a remote view function in addition to the remote controller function (<a href="#figure.42">Figure 42</a>). This feature is really useful when attacking because the attacker can see the TV screen remotely. This could reveal the contents of any app being used, such as social apps, or browser and messenger tools like <span class="emphasis"><em>Skype</em></span>. This means that the user&rsquo;s privacy, while using the TV, will be compromised.</p><div class="figure"><a id="figure.42"></a><div class="mediaobject"><img alt="SmartView PC application with View." src="/uploads/images/figures/2014/12/Oh-42.jpg" /></div><p class="title"><b>Figure&nbsp;42.&nbsp;SmartView PC application with View.</b></p></div><p>This clone view feature is actually implemented through a SOAP message and livestream application. The SmartView client sends a SOAP message to the smp_4_ application using the StartCloneView method (<a href="#figure.43">Figure 43</a>). If the client has already been authenticated through the remote controller service, the server starts view cloning and replies with a message that contains a URL for streaming (see <a href="#figure.44">Figure 44</a>).</p><div class="figure"><a id="figure.43"></a><div class="mediaobject"><img alt="Screen cloning request." src="/uploads/images/figures/2014/12/Oh-43.jpg" /></div><p class="title"><b>Figure&nbsp;43.&nbsp;Screen cloning request.</b></p></div><div class="figure"><a id="figure.44"></a><div class="mediaobject"><img alt="Screen cloning response." src="/uploads/images/figures/2014/12/Oh-44.jpg" /></div><p class="title"><b>Figure&nbsp;44.&nbsp;Screen cloning response.</b></p></div><p>The client sends a request to the livestream server to retrieve livestream data (see <a href="#figure.45">Figure 45</a>).</p><div class="figure"><a id="figure.45"></a><div class="mediaobject"><img alt="Livestream request." src="/uploads/images/figures/2014/12/Oh-45.jpg" /></div><p class="title"><b>Figure&nbsp;45.&nbsp;Livestream request.</b></p></div><p>And the server sends out a constant stream of livestream data in HDCP format (see<a href="#figure.46">Figure 46</a> ).</p><div class="figure"><a id="figure.46"></a><div class="mediaobject"><img alt="Livestream response." src="/uploads/images/figures/2014/12/Oh-46.jpg" /></div><p class="title"><b>Figure&nbsp;46.&nbsp;Livestream response.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2582424"></a>Developer account</h3></div></div></div><p>There are apps for a <span class="emphasis"><em>Samsung</em></span> TV that can be downloaded from the <span class="emphasis"><em>Samsung</em></span> app store. To get into the app store you need to log in using a <span class="emphasis"><em>Samsung</em></span> account (see <a href="#figure.47">Figure 47</a>). There is a feature called a developer account, which is a reserved login name called &lsquo;develop&rsquo;, and if you login with that name, the TV is automatically switched to a developer mode (<a href="#figure.48">Figure 48</a>). Creation of the developer account differs for each model, but for this<span class="emphasis"><em> F-series</em></span> TV, the account is already created and there is no password associated with it.</p><div class="figure"><a id="figure.47"></a><div class="mediaobject"><img alt="Log into Samsung account." src="/uploads/images/figures/2014/12/Oh-47.jpg" /></div><p class="title"><b>Figure&nbsp;47.&nbsp;Log into Samsung account.</b></p></div><div class="figure"><a id="figure.48"></a><div class="mediaobject"><img alt="Input &lsquo;develop&rsquo; account in email field." src="/uploads/images/figures/2014/12/Oh-48.jpg" /></div><p class="title"><b>Figure&nbsp;48.&nbsp;Input &lsquo;develop&rsquo; account in email field.</b></p></div><p>When you successfully switch the machine to developer mode, you get special access to a hidden menu. From <span class="emphasis"><em>More Apps</em></span>, if you check options, it shows the &lsquo;IP Setting&rsquo; and &lsquo;Start App Sync&rsquo; menu items which were not shown before (see <a href="#figure.49">Figure 49</a>).</p><div class="figure"><a id="figure.49"></a><div class="mediaobject"><img alt="From More Apps menu, select IP Setting." src="/uploads/images/figures/2014/12/Oh-49.jpg" /></div><p class="title"><b>Figure&nbsp;49.&nbsp;From More Apps menu, select IP Setting.</b></p></div><p>By selecting &lsquo;IP Setting&rsquo; here, an attacker can input the address of a web server that they control (see <a href="#figure.50">Figure 50</a>).</p><div class="figure"><a id="figure.50"></a><div class="mediaobject"><img alt="Input attackers web server" src="/uploads/images/figures/2014/12/Oh-50.jpg" /></div><p class="title"><b>Figure&nbsp;50.&nbsp;Input attackers web server</b></p></div><p>After that, the attacker can use the &lsquo;Start App Sync&rsquo; feature to install their malicious app on the machine (see <a href="#figure.51">Figure 51</a>).</p><div class="figure"><a id="figure.51"></a><div class="mediaobject"><img alt="Start application sync." src="/uploads/images/figures/2014/12/Oh-51.jpg" /></div><p class="title"><b>Figure&nbsp;51.&nbsp;Start application sync.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3106898"></a>App sync &amp; application security issues</h3></div></div></div><p>When you choose to start App Sync, the <span class="emphasis"><em>More Apps</em></span> program tries to connect to the web server on port 80 running on the machine specified by the IP settings. When it finds a web server on that address, it retrieves a /widgetlist.xml file and parses it. A sample widgetlist.xml is shown in <a href="#figure.52">Figure 52</a>. The download tag specifies the ZIP file that contains the TV app.</p><div class="figure"><a id="figure.52"></a><div class="mediaobject"><img alt="Sample widgetlist.xml." src="/uploads/images/figures/2014/12/Oh-52.jpg" /></div><p class="title"><b>Figure&nbsp;52.&nbsp;Sample widgetlist.xml.</b></p></div><p>Simply reusing the <span class="emphasis"><em>Samygo F-series</em></span> rooting app and installing it over App Sync might install a remote shell and FTP server, which is enough to demonstrate remote compromise through SmartView. But, if you try to install the rooting app through the developer account, the app will not be installed, and a security warning will be displayed (see <a href="#figure.53">Figure 53</a>).</p><div class="figure"><a id="figure.53"></a><div class="mediaobject"><img alt="Application security issue." src="/uploads/images/figures/2014/12/Oh-53.jpg" /></div><p class="title"><b>Figure&nbsp;53.&nbsp;Application security issue.</b></p></div><p>To investigate more, if you follow the URL given in the error message, it describes many different reasons for the security warning occurring. One notable fact is that if you embed a binary file (ELF in this case), the app is not allowed to install. This is a countermeasure to prevent the installation of any unwanted ELF binaries on the system. The <span class="emphasis"><em>Samygo</em></span> rooting app relies on replacing a <span class="emphasis"><em>Skype</em></span> shared library. Even when it is archived in a ZIP file, it is still detected by the app installer and rejected. You might think of encoding the file, but there is no easy way to decode them on the fly from the TV app. The <span class="emphasis"><em>Samygo</em></span> rooting app relies on an <span class="emphasis"><em>Unzip</em></span> function from the file system plug-in object, so there is no room for decoding the contents during the process.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3431952"></a>Dropper hack</h3></div></div></div><p>In order to copy an ELF binary you want to install on the system, you need to find a glitch in the app installer&rsquo;s security. As it happens, I found one. Even when the app is rejected, the whole contents are left in an easily guessable location under /mtd_rwcommon/common/TempDownLoad. For example, if you installed an app called <span class="emphasis"><em>Test</em></span>, the following folder on the TV system would contain the entire contents:</p><pre class="programlisting">/mtd_rwcommon/common/TempDownLoad/Test</pre><p>Using this fact, we can drop an ELF binary on the system and use it later from another app. Even though it triggers a security violation error, we can still drop a file we want and use it from an app we launch later.</p><p>For example, I packaged the &lsquo;patch&rsquo; file inside a dropper app (<a href="#figure.54">Figure 54</a>). This file is from the Samygo rooting app and it contains multiple ELF binaries.</p><div class="figure"><a id="figure.54"></a><div class="mediaobject"><img alt="Dropper contents." src="/uploads/images/figures/2014/12/Oh-54.jpg" /></div><p class="title"><b>Figure&nbsp;54.&nbsp;Dropper contents.</b></p></div><p>The widgetlist.xml file is shown in <a href="#figure.55">Figure 55</a>.</p><div class="figure"><a id="figure.55"></a><div class="mediaobject"><img alt="Dropper widgetlist.xml." src="/uploads/images/figures/2014/12/Oh-55.jpg" /></div><p class="title"><b>Figure&nbsp;55.&nbsp;Dropper widgetlist.xml.</b></p></div><p>The <span class="emphasis"><em>More Apps</em></span> installer triggers a security warning but you can just dismiss the message. The file we want is now dropped on the system.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4321980"></a>Installer</h3></div></div></div><p>Now we need to make a new package without any ELF binaries (<a href="#figure.56">Figure 56</a>).</p><div class="figure"><a id="figure.56"></a><div class="mediaobject"><img alt="RemoteRooting package contents." src="/uploads/images/figures/2014/12/Oh-56.jpg" /></div><p class="title"><b>Figure&nbsp;56.&nbsp;RemoteRooting package contents.</b></p></div><p>One thing we need to do is to change packagePath in Main.js to the location where our dropper package is dropped (<a href="#figure.57">Figure 57</a>).</p><div class="figure"><a id="figure.57"></a><div class="mediaobject"><img alt="Package path with installer." src="/uploads/images/figures/2014/12/Oh-57.jpg" /></div><p class="title"><b>Figure&nbsp;57.&nbsp;Package path with installer.</b></p></div><p>The widgetlist.xml file is shown in <a href="#figure.58">Figure 58</a>.</p><div class="figure"><a id="figure.58"></a><div class="mediaobject"><img alt="RemoteRooting widgetlist.xml." src="/uploads/images/figures/2014/12/Oh-58.jpg" /></div><p class="title"><b>Figure&nbsp;58.&nbsp;RemoteRooting widgetlist.xml.</b></p></div><p>When you perform app sync, it succeeds without any warning (<a href="#figure.59">Figure 59</a>).</p><div class="figure"><a id="figure.59"></a><div class="mediaobject"><img alt="No security issues." src="/uploads/images/figures/2014/12/Oh-59.jpg" /></div><p class="title"><b>Figure&nbsp;59.&nbsp;No security issues.</b></p></div><p>You can confirm that the <span class="emphasis"><em>RemoteRooting</em></span> app just installed on the TV system (<a href="#figure.60">Figure 60</a>).</p><div class="figure"><a id="figure.60"></a><div class="mediaobject"><img alt="Run RemoteRooting app." src="/uploads/images/figures/2014/12/Oh-60.jpg" /></div><p class="title"><b>Figure&nbsp;60.&nbsp;Run RemoteRooting app.</b></p></div><p>When you launch the app, you see a screen similar to <a href="#figure.61">Figure 61</a>. Now the <span class="emphasis"><em>Samygo</em></span> package, including a remote shell and FTP, is installed. You can confirm this by connecting to the TV via port 23. You will have root privilege on the system. (<a href="#figure.62">Figure 62</a>) From here, further attacks can be launched.</p><div class="figure"><a id="figure.61"></a><div class="mediaobject"><img alt="RemoteRooting result." src="/uploads/images/figures/2014/12/Oh-61.jpg" /></div><p class="title"><b>Figure&nbsp;61.&nbsp;RemoteRooting result.</b></p></div><div class="figure"><a id="figure.62"></a><div class="mediaobject"><img alt="Access to the TV with root privilege." src="/uploads/images/figures/2014/12/Oh-62.jpg" /></div><p class="title"><b>Figure&nbsp;62.&nbsp;Access to the TV with root privilege.</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2437788"></a>Conclusion</h2></div></div></div><p>Smart devices are a new trend in the appliance industry, and smart TVs provide a good example of what to expect from them. The fact that they can be connected with other devices at home, like PCs or smart phones, initially seems very convenient. However, the way the overall architecture is designed is a little questionable. I used the SmartView feature of a <span class="emphasis"><em>Samsung</em></span> Smart TV to showcase how weak the design of a proprietary protocol can be. Also, the actual implementation is so delicate that the whole authentication scheme fails when the client supplies unexpected input. I also used a weakness in the app installer to bypass a security error related to an embedded ELF binary. As you have seen, it is possible to install malware on the TV using the method I presented here.</p><p>It&rsquo;s been a while now since the home appliance industry started pushing these smart appliances. When these vendors are creating new features and developing new technology to support them, they might learn some valuable lessons from the past few decades of the PC industry. Even when it doesn&rsquo;t seem likely that malware or actual attacks will happen for these smart appliances in the foreseeable future, you never know. Better to prepare early rather than late. If the new smart appliances don&rsquo;t gain the trust of their users, they won&rsquo;t ever be used for any critical purposes like confidential <span class="emphasis"><em>Skype</em></span> calls or private social networking. The TV already comes with Skype, browser and social apps: If the TV can&rsquo;t give users assurance of its secure operation, users will be too &lsquo;smart&rsquo; to use it.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4776391"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Epstein, Z. Smart TV sales soared in 2012, set to dominate TV market by 2015. BGR. Feb 22, 2013. <span class="bibliosource"><a href="https://bgr.com/2013/02/22/smart-tv-sales-2012-340405/" target="_blank">http://bgr.com/2013/02/22/smart-tv-sales-2012-340405/</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] <span class="bibliosource"><a href="http://wiki.samygo.tv/index.php5/Enable_Serial_Console_on_non_CI+_Devices#The_Ex-Link_.28serial.29_cable_for_A_and_B_series_only" target="_blank">http://wiki.samygo.tv/index.php5/Enable_Serial_Console_on_non_CI%2B_Devices#The_Ex-Link_.28serial.29_cable_for_A_and_B_series_only</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] SSDP. <span class="bibliosource"><a href="https://tools.ietf.org/html/draft-cai-ssdp-v1-03" target="_blank">http://tools.ietf.org/html/draft-cai-ssdp-v1-03</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-Oh.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: Smart home appliance security and malware&url=https://www.virusbulletin.com/virusbulletin/2014/12/paper-smart-home-appliance-security-and-malware"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/12/paper-smart-home-appliance-security-and-malware'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/12/paper-smart-home-appliance-security-and-malware&title=VB2014 paper: Smart home appliance security and malware"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/12/paper-smart-home-appliance-security-and-malware&t=VB2014 paper: Smart home appliance security and malware"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/12/paper-smart-home-appliance-security-and-malware"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>