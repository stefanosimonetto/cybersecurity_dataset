<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Needle in a haystack</title>
<meta name="description" content="Sometimes what looks like a genuine MP3 encoder library, and even works as a functional encoder, actually hides malicious code deep amongst a pile of clean code. Gabor Szappanos reveals the lengths to which one piece of malware goes to hide its tracks." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1669;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201402-Lame"></a>Needle in a haystack</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2014-02-03</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Gabor</span> <span class="surname">Szappanos</span></h3><span class="orgname">Sophos</span>, <span class="orgdiv">Hungary</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Sometimes what looks like a genuine MP3 encoder library, and even works as a functional encoder, actually hides malicious code deep amongst a pile of clean code. Gabor Szappanos reveals the lengths to which one piece of malware goes to hide its tracks.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2472" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2472" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id2329305"></a></span></dt><dt><span class="sect1"><a href="#id3755276">Exploited carrier workbook</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3714712">Workbook 1</a></span></dt><dt><span class="sect2"><a href="#id3894693">Workbook 2</a></span></dt><dt><span class="sect2"><a href="#id4828376">Workbook 3</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4014711">Shellcode</a></span></dt><dt><span class="sect1"><a href="#id4371680">Temporary dropper</a></span></dt><dt><span class="sect1"><a href="#id4023062">Payload</a></span></dt><dt><span class="sect1"><a href="#id4540156">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2329305"></a></h2></div></div></div><p>Malware authors engaged in Advanced Persistent Threat (APT) operations put great effort into making sure their creations live up to their name and achieve persistence over the course of months or years; in order to do so, the threats must remain undetected by security products.</p><p>The authors try both to conceal the presence of the threats on infected systems and to hide their code from analysis and detection. Most crimeware authors achieve the latter by applying sophisticated execryptors and protectors to their code.</p><p>Over the past year, however, we have spotted a different approach: malicious code is compiled into an open source library, hidden among a large pile of clean library code, with only a single export pointing to the trojan functionality. The deployment and progression of this malware spans about two years now &ndash; however its versioning suggests that its development started longer ago than that.</p><p>This malware doesn&rsquo;t take anything for granted: even common system tools like rundll32.exe and wscript.exe, which are present on all <span class="emphasis"><em>Windows</em></span> systems, are carried with the installer and dropped when needed.</p><p>The malware goes to great lengths to cover its tracks. All of the string constants that could reveal the nature of the backdoor are protected with strong encryption. Additionally, the backdoor itself is disguised as a legitimate MP3 encoder library. In fact, it <span class="emphasis"><em>is</em></span> a legitimate and functional MP3 library &ndash; and a bit more besides.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3755276"></a>Exploited carrier workbook</h2></div></div></div><p>In a handful of cases we have been able to identify the original exploited document that leads to the system infection. At the time of finalizing this paper, three exploited workbooks have been found that install this threat.</p><p>All of them are protected <span class="emphasis"><em>Excel</em></span> workbooks with the default password (for more details see [<span class="citation"><a href="#citation.1">1</a></span>]). In short: the workbooks are password protected (that is, checked before opening). It is possible to leave the password field blank &ndash; in which case <span class="emphasis"><em>Excel</em></span> encrypts the content using the default password: &lsquo;VelvetSweatshop&rsquo;. On the other hand, if a workbook is protected with exactly this password, <span class="emphasis"><em>Excel</em></span> assumes that there is no password, and opens the document transparently. As a result, the document content is encrypted and hidden from normal analysis, but opening it will execute the shellcode without further prompting.</p><p>The workbooks exploit the CVE-2012-0158 vulnerability, which triggers the execution of shellcode within the document.</p><p>After the workbooks are opened, the intended operation is to open a decoy workbook &ndash; a clean file that grabs the attention of the user while malicious activities proceed in the background. The themes of the decoys give us some idea as to the areas of interest of the target audience of this malware distribution.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3714712"></a>Workbook 1</h3></div></div></div><p><span class="bold"><strong>Filename: </strong></span>300<span class="inlinemediaobject"><img src="/uploads/images/figures/2014/02/chinese.jpg" /></span>.xls (rough translation: &lsquo;300 petitioners cosigned.xls&rsquo;)</p><p><span class="bold"><strong>File size: </strong></span>839756 bytes</p><p><span class="bold"><strong>SHA1: </strong></span>066998e20ad44bc5f1ca075a3fb33f1619dd6313</p><p><span class="bold"><strong>MD5: </strong></span>5c370923119f66e64a5f9accdd3d5fb</p><p>This does not display any decoy document, just closes the <span class="emphasis"><em>Excel</em></span> window. Nevertheless, the shellcode execution proceeds.</p><p>If the file was opened, it would display a workbook with a list of names, gender, region and phone numbers of Chinese individuals.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Decoy content for 066998e20ad44bc5f1ca075a3fb33f1619dd6313." src="/uploads/images/figures/2014/02/Lame-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Decoy content for 066998e20ad44bc5f1ca075a3fb33f1619dd6313.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3894693"></a>Workbook 2</h3></div></div></div><p><span class="bold"><strong>Filename:</strong></span> sample.xls</p><p><span class="bold"><strong>File size: </strong></span>638912 bytes</p><p><span class="bold"><strong>SHA1: </strong></span>e5e183e074d26416d7e6adfb14a80fce6d9b15c2</p><p><span class="bold"><strong>MD5:</strong></span> 2066462274ed6f6a22d8275bd5b1da2b</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Decoy content for e5e183e074d26416d7e6adfb14a80fce6d9b15c2." src="/uploads/images/figures/2014/02/Lame-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Decoy content for e5e183e074d26416d7e6adfb14a80fce6d9b15c2.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4828376"></a>Workbook 3</h3></div></div></div><p><span class="bold"><strong>Filename:</strong></span> LIST OF KEY OFFICIALS IN THE DND PROPER.xls</p><p><span class="bold"><strong>File size: </strong></span>638912 bytes</p><p><span class="bold"><strong>SHA1: </strong></span>d80b527df018ff46d5d93c44a2a276c03cd43928</p><p><span class="bold"><strong>MD5: </strong></span>80857a5541b5804895724c5d42abd48f</p><p>This decoy workbook contains information about key officials in the Philippines Department of National Defense (DND).</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Decoy content for d80b527df018ff46d5d93c44a2a276c03cd43928." src="/uploads/images/figures/2014/02/Lame-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Decoy content for d80b527df018ff46d5d93c44a2a276c03cd43928.</b></p></div><p>In the rest of this article, unless specified otherwise, we refer to the operation resulting from infection via Workbook 1 &ndash; but the overall operations (dropped filenames, registry keys, backdoor functions) are the same in each case.</p><p>When mining our sample collection for related samples we were able to spot other examples &ndash; however, in these instances the initial dropper was not available for our analysis, only the temporary dropper executables or the final payloads could be located. In these cases we don&rsquo;t have complete information about the system infection, but it is safe to assume that similar exploitation schemes were utilized.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4014711"></a>Shellcode</h2></div></div></div><p>The shellcode features an interesting anti-debugging trick that I have come across quite regularly in APT samples lately. Most of the <span class="emphasis"><em>Windows</em></span> API functions are resolved and called normally, but some of the critical ones (such as WinExec and CreateFile) are not entered at the entry address (as stored in the kernel32.dll export table), but five bytes after it instead. These functions are responsible for the most critical operations of the code (dropping the payload executable and executing it), which would reveal unusual activity in the scope of an ordinary <span class="emphasis"><em>Excel</em></span> process.</p><p>As most tracers and debuggers would place the breakpoint or hijack function right at the entry of the API function, skipping the first few bytes is a good way to avoid API tracing and debugging.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Anti-tracing trick." src="/uploads/images/figures/2014/02/Lame-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Anti-tracing trick.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/02/Lame-4-large.jpg" target="_top">here</a> to view a larger version of Figure 4.)</p><p>The same happens with WriteFile and GlobalAlloc, but this time, depending on whether or not there is a call right at the entry of the function, the displacement will be either five or seven bytes.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Anti-tracing hook initialization." src="/uploads/images/figures/2014/02/Lame-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Anti-tracing hook initialization.</b></p></div><p>As a result of the functions not being entered at their usual entry points, the first few instructions are missed. As these are still essential for the stack management, the code is compensated within the shellcode, where a standard function prologue (stack frame creation push ebp, move ebp,esp) is executed.</p><p>For system functions compiled with standard compilers, the first few instructions are fixed on the entry point, but anything after that can&rsquo;t be taken for granted. The shellcode can&rsquo;t enter further than five or seven bytes into the API function, otherwise it could end up in the middle of a multi byte instruction, easily crashing the application.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Anti-tracing used in practice." src="/uploads/images/figures/2014/02/Lame-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Anti-tracing used in practice.</b></p></div><p>In order to extract the embedded executable, the shellcode needs to find the carrier workbook. It does this using the fact that, at the time of the exploitation, the workbook must remain open in <span class="emphasis"><em>Excel</em></span>. The code enumerates all possible handles and tries to call GetFileSize on each of them. If the function fails, because the handle does not belong to an open file (it could belong to many other objects such as directory, thread, event or registry key), or the file size is smaller than the expected size of the workbook (minus the appended encrypted EXE), 1de10h bytes, it skips to the next handle value.</p><p>Next, it reads four bytes from offset 0x1de00; the value found there should be equal to the size of the carrier workbook (this time including the appended EXE).</p><p>At this position, in the appended content following the OLE2 document structure, a short header is stored that contains the full carrier workbook size, the embedded EXE size and the embedded decoy workbook size. These values are used by the shellcode. The encrypted EXE content follows.</p><p>Organizing the code and structure in this manner makes the carrier/dropper workbook component and the dropped payload executable completely independent &ndash; it is possible to replace the payload with a new variant without changing a bit in the carrier encrypted workbook.</p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Appended header and payload." src="/uploads/images/figures/2014/02/Lame-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Appended header and payload.</b></p></div><p>Once the hosting workbook is found, the code proceeds with decoding the embedded executable (using a one byte XOR algorithm with running key plus an additional one byte XOR with a fixed key), saving it to a file named &lsquo;Winword.exe&rsquo; in the %TEMP% directory, then executing it. At this point, the decoy workbook content is dropped (using the same algorithm: one byte XOR with running key plus one byte XOR with fixed key, only this key differs from the one used in decoding the EXE).</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4371680"></a>Temporary dropper</h2></div></div></div><p>This file is the dropper and installer for the final payload. It has an initial anti-debug layer.</p><p>The address of the GetVersion function is patched in the import table, to contain an internal function virtual address instead of an imported function address, which is normally expected at that position. The code around the entry point uses the stored value to redirect execution:</p><pre class="programlisting">mov  large fs:0, esp
sub  esp, 58h
push ebx
push esi
push edi
mov  [ebp-18h], esp
call ds:dword_41A188
</pre><p>The execution actually goes to the address stored at dword_41A188, which is the memory location 00402440.</p><p>The program has only one export, LoadLibrary, thus when the operating system loads the program and resolves the external dependencies, this value, stored within the import table region, remains intact. The trick completely fools <span class="emphasis"><em>IDA Pro</em></span>, which can&rsquo;t be convinced that the location is an internal position and not an external import. This makes static analysis a bit more complicated. The necessary imported function addresses are later resolved dynamically by the initialization code of the dropper.</p><p>The major procedures of the dropper program are not called directly; instead, the trojan builds a function pointer table, and calls to procedures are performed via indexing into this table, as shown in <a href="#figure.8">Figure 8</a>.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="Building the function pointer table." src="/uploads/images/figures/2014/02/Lame-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;Building the function pointer table.</b></p></div><p>The key procedures are identified by having the following instruction sequence near the prologue:</p><pre class="programlisting">push ebp
mov  ebp, esp
push eax
mov  eax, 12547908h
pop  eax
</pre><p>The value stored in the EAX register is a combination of two elements: 1254 is the marker; 7908 is the numeric ID for the function.</p><p>The entry is located by searching backwards for the standard prologue:</p><pre class="programlisting">push ebp
mov  ebp, esp
</pre><p>The procedures are later invoked by calling indexes from the function pointer table (see <a href="#figure.9">Figure 9</a>).</p><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="Using the function pointer table." src="/uploads/images/figures/2014/02/Lame-9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;Using the function pointer table.</b></p></div><p>Winword.exe normally drops three major components into the system:</p><div class="itemizedlist"><ul type="disc"><li><p>%PROGRAM FILES%\Common Files\ODBC\AppMgmt.dll &ndash; the final payload (<span class="emphasis"><em>Windows</em></span> DLL file)</p></li><li><p>%PROGRAM FILES%\Common Files\DBEngin.EXE &ndash; a copy of rundll32.exe (a clean <span class="emphasis"><em>Windows</em></span> system file, used for executing the payload)</p></li><li><p>%PROGRAM FILES%\Common Files\WUAUCTL.EXE &ndash; another rundll32.exe (a clean <span class="emphasis"><em>Windows</em></span> system file, used for executing the payload).</p></li></ul></div><p>Additionally, two registry export files named jus*.tmp (with a random number added after jus) are dropped into %TEMP%. These are the old and new hives of the HKLM\SYSTEM\CurrentControlSet\Services\AppMgmt registry location &ndash; a location at which the trojan registers itself in order to execute automatically upon each system boot. Saving the hives to a file makes it possible to modify the registry in one shot using RegRestoreKey.</p><p>Also dropped is a 301,445 byte long jus*.tmp file, which is a CAB archive containing the payload DLL.</p><p>The execution flow takes a different route if the presence of running security products is detected. The following process names are checked: KVMonXP.exe, RavMonD.exe, RsTray.exe, ccsvchst.exe, QQPCTray.exe, zhudongfangyu.exe, 360sd.exe, 360Tray.exe, zatray.exe, bdagent.exe, ksafetray.exe, kxetray.exe and avp.exe. However, not all of the security processes are checked at the same time &ndash; only a couple of selected ones are checked before each major operation.</p><p>As an example, if zatray.exe, RsTray.exe or RavMonD.exe is running, then AppMgmt.dll is not dropped and instead, the 400MB vbstdcomm.nls is created (the large size is due to an enormous amount of junk appended at the end of the file). Finally, a VBScript file is created and executed with the help of a dropped copy of wscript.exe (both files are saved to the %TEMP% folder, as lgt*.tmp.vbs and lgt*.tmp.exe, respectively). An encrypted copy of Winword.exe is created in %CommonProgramFiles%\ODBC\odbc.txt, using a one byte XOR algorithm with key 0xCC. Vbstdcomm.nls, which serves as a backup installer, takes the encrypted copy of Winword.exe, decodes it and simply executes.</p><p>The dropper registers AppMgmt.dll as a service. This is not achieved by creating a new service entry, rather by taking over the role of an already installed service, AppMgmt, redirecting the service DLL from the clean library to the dropped malware payload:</p><p>HKLM\SYSTEM\CurrentControlSet\Services\AppMgmt\Parameters: ServiceDll</p><p>%SystemRoot%\System32\appmgmts.dll -&gt; C:\Program Files\Common Files\ODBC\AppMgmt.dll</p><p>In addition, the start up mode is changed from auto to demand in the location:</p><p>HKLM\SYSTEM\CurrentControlSet\Services\AppMgmt: Start</p><p>Then it changes the error control settings in the registry key HKLM\SYSTEM\CurrentControlSet\Services\AppMgmt:ErrorControl from <span class="emphasis"><em>normal</em></span> (this would mean that if the driver fails to load, the start up process proceeds, but a warning is displayed) to <span class="emphasis"><em>ignore</em></span> (in this case if the driver fails to load, start up proceeds, and no warning is displayed). The change is designed to avoid raising suspicion, should start up fail for any reason.</p><p>Finally, it executes the dropped DLL by executing net start AppMgmt.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4023062"></a>Payload</h2></div></div></div><p>We have identified five different versions of the final payload. Two of them were replicated from the exploited workbooks detailed earlier; the other three were found when we were digging through our sample collection searching for samples with similar characteristics.</p><p>The main characteristics of the five variants are summarized in Table 1 shown below (detailed descriptions of the columns are provided later in this section).</p><div class="mediaobject"><img src="/uploads/images/figures/2014/02/Lame-Table1.jpg" /></div><p>(Click <a href="/uploads/images/figures/2014/02/Lame-Table1-large.jpg" target="_top">here</a> to view a larger version of Table 1.)</p><p>This DLL is built from the LAME MP3 encoder source [<span class="citation"><a href="#citation.2">2</a></span>]. The full library has been compiled, and in addition, a couple of malicious exports have been added to the code: lame_set_out_sample and lame_get_out_sample.</p><div class="figure"><a id="figure.10"></a><div class="mediaobject"><img alt="Additional malicious imports." src="/uploads/images/figures/2014/02/Lame-10.jpg" /></div><p class="title"><b>Figure&nbsp;10.&nbsp;Additional malicious imports.</b></p></div><p>Note that the names of the additional exports are strikingly similar to the legitimate exports, lame_set_out_samplerate and lame_get_out_samplerate, which are present in the LAME source &ndash; thus it is not very obvious that the additional exports belong to something completely different.</p><p>One of the extra exports, lame_get_out_sample, is missing from newer versions of the malware. However, the function that would invoke this export is still present in the code. Clearly, the code was not cleaned up properly when the export was removed.</p><p>The backdoor contains many encrypted strings, one of which serves as an internal version number. In Table 1 we list the version numbers as they appear in the code. Collected information suggests that the most widely distributed was version 2.3(UDP), making its rounds in the wild in early December 2012.</p><p>Table 1 also lists the date when we first saw each particular backdoor variant &ndash; either arriving in our collection, reported in cloud look ups or seen elsewhere on the Internet. Additionally, the compilation date is listed, as taken from the PE header.</p><p>An interesting quirk comes from the usage of the LAME source: one of the original source functions, beVersion(), inserts the compilation date into the data section of the executable.</p><div class="figure"><a id="figure.11"></a><div class="mediaobject"><img alt="Compilation date in code." src="/uploads/images/figures/2014/02/Lame-11.jpg" /></div><p class="title"><b>Figure&nbsp;11.&nbsp;Compilation date in code.</b></p></div><p>This provides an independent method of determining the creation date of the variant aside from the PE time stamp. There was no trick, however &ndash; the two dates matched in all cases.</p><p>It is notable that there is always a large gap between the compilation date and the date of the first observation of each variant. There are several possible reasons for this:</p><div class="itemizedlist"><ul type="disc"><li><p>Small-scale targeted attacks don&rsquo;t provide much telemetry information; the smaller the number of targets, the slimmer our chances of finding out about their infection.</p></li><li><p>The trojan looks very similar to a real LAME encoder library; infected victims are reluctant to submit it for analysis.</p></li><li><p>There may be an intentional delay (some sort of testing period) in the release process of the malware.</p></li></ul></div><p>The backdoor uses different approaches for handling C&amp;C communication. Earlier versions used the standard Windows socket communication functions (send, recv) to exchange data with the C&amp;C server. The newer versions linked the UDT data transfer library (available from udt.sourceforge.net) for communication. The versioning of the variants suggests that some time around March 2012, the code forked into a socket communication branch (TCP) and a UDT powered communication branch (UDP).</p><p>The backdoor features all the basic functionality that is expected from a piece of malware of its class. It is able to:</p><div class="itemizedlist"><ul type="disc"><li><p>Create screenshots</p></li><li><p>Get drive type (FAT, FAT32, NTFS, CDFS) and free space</p></li><li><p>Enumerate files and directories and send the list to the server</p></li><li><p>Rename files</p></li><li><p>Create directories</p></li><li><p>Delete files.</p></li></ul></div><p>The last character of the ModuleFileName (without extension) is checked on execution: if it is not of one of the expected values &ndash; &lsquo;T&rsquo;, &lsquo;t&rsquo; (executed via net.exe), &lsquo;R&rsquo;, &lsquo;r&rsquo;, &lsquo;N&rsquo;, &lsquo;n&rsquo; (executed via DBEngin.EXE), &lsquo;2&rsquo; (rundll32.exe), &lsquo;L&rsquo; or &lsquo;l&rsquo; &ndash; it builds and injects a simple piece of code to load AppMgmt.dll properly.</p><p>For this purpose, it creates a new suspended process (with command line: c:\windows\system32\svchost.exe), calls GetThreadContext on it, and gets EAX from the CONTEXT structure, using the fact that in the case of a suspended process the EAX register always points to the entry point of the process. Then it writes the starter code to this entry point and resumes the thread. The suspended thread is not visible in the process list at that point. This way, the trojan can escape analysis, if not executed in a natural form, and still execute.</p><p>Configuration data is stored in a file named DbTrans.db, XOR encrypted with key 0x58.</p><p>The string constants (API names, DLL names, process names) are all stored in encrypted form using a strong encryption algorithm. The strings are stored aligned (Unicode strings to 0x90 bytes, ASCII strings to 0x38 bytes boundary), decrypted in eight byte chunks using the DES ECB algorithm, and referenced by IDs that index into this name pool. The encrypted strings contain padding bytes at the end, where zeros are encoded.</p><p>The strings are decrypted on the fly before being used and filled with zeros after use. This way there are no visible strings in the memory that would give away more information about the internals of the backdoor.</p><p>There are three nearly identical encryption functions (and accompanying encrypted string tables and encryption keys) in all variants: one is for the Unicode strings, one for the ordinary ASCII constants, and a third one for the <span class="emphasis"><em>Windows</em></span> API function names (also stored as ASCII strings) that are used in the code. We found that only the encryption keys were different for the three cases. The following key seeds remain the same throughout the variants:</p><p>For ASCII strings: 82 C5 D3 59 2B 38 00 00</p><p>For Unicode strings: 5E 97 CC 42 8E CD 00 00</p><p>For API function names: 5B 5F CB 8D E5 F5 00 00</p><p>In the last version, the two ASCII functions are merged into a single function.</p><p>The C&amp;C addresses are hard coded into the backdoor, and protected with a simple byte wise XOR (key:0x58) encryption. This is an interesting choice, given that all other string constants are protected with a string DES algorithm &ndash; perhaps the server addresses are changed more frequently (indeed, there is a minimal overlap between the different versions&rsquo; C&amp;C addresses) than the authors are comfortable with re-encrypting the strings &ndash; but no evidence was found for it in the few samples we have found.</p><p>The string constants of the code are referenced by IDs and decrypted on the fly. However, there are strings that are never used in the code. These could belong to an earlier or internal version, and simply have not been cleaned up from the string pool, as illustrated in this example:</p><pre class="programlisting">push 9   ; ,lame_set_out_sample
call Get_String_A
push 0Ah ; ,
call Get_String_A
push 1Eh ; DBEngin.exe
call Get_String_A
push 8   ; EXPL.EXE
pop  eax
call Get_String_W
push offset s_expl_exe
push [ebp+var_254]
call StrCpyW
push 8
pop  eax
xor  ecx, ecx
call set_mem
push ebx
push 2
call CreateToolhelp32Snapshot
</pre><p>Some of these strings could be internal configuration options for the development environment (I suspect these are access details to an internal server):</p><pre class="programlisting">kazafei
192.168.1.98
80
</pre><p>Other strings provide status information about the current operation of the backdoor:</p><pre class="programlisting">Client RecvData Complete
A File Search Task has start already !!!
File Search Task Success
File Search Task Failed, Please Check
Upload Client Failed
Upload Client Success
Delete File Success
Delete File Failed 
Rename File Success
Rename File Failed
Create Folder Success
Create Folder Failed
</pre><p>A few constants indicate undocumented or debug functionality:</p><pre class="programlisting">X:\Windows\System32\rundll32.exe
X:\Windows\msacm32.drv
MagicMutex
D:\Resume.dll
D:\delete.dll
D:\delete2.dll
</pre></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4540156"></a>Conclusion</h2></div></div></div><p>When looking into APT attack scenarios, one has to be extra careful. Often we see that clean programs and libraries are dropped onto systems to hide the operation of malicious applications [<span class="citation"><a href="#citation.3">3</a></span>]. But sometimes, what looks to be a genuine MP3 encoder library, and even works as a functional encoder, actually hides malicious additions buried deep in a large pile of clean code. One has to be very thorough when it comes to targeted attacks, and one cannot afford to make any assumptions.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4007774"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Baccas, P. When is a password not a password? When Excel sees &ldquo;VelvetSweatshop&rdquo;. <span class="bibliosource"><a href="https://nakedsecurity.sophos.com/2013/04/11/password-excel-velvet-sweatshop/" target="_blank">http://nakedsecurity.sophos.com/2013/04/11/password-excel-velvet-sweatshop/</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] LAME (Lame Aint an MP3 Encoder). <span class="bibliosource"><a href="https://sourceforge.net/projects/lame/." target="_blank">http://sourceforge.net/projects/lame/</a>.</span></p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Szappanos, G. Targeted malware attack piggybacks on Nvidia digital signature. <span class="bibliosource"><a href="https://nakedsecurity.sophos.com/2013/02/27/targeted-attack-nvidia-digital-signature/" target="_blank">http://nakedsecurity.sophos.com/2013/02/27/targeted-attack-nvidia-digital-signature/</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Needle in a haystack&url=https://www.virusbulletin.com/virusbulletin/2014/02/needle-haystack"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/02/needle-haystack'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/02/needle-haystack&title=Needle in a haystack"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/02/needle-haystack&t=Needle in a haystack"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/02/needle-haystack"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>