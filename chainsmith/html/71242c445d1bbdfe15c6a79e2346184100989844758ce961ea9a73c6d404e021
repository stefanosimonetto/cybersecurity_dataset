<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: A review of the evolution of Andromeda over the years before we say goodbye</title>
<meta name="description" content="Andromeda, also known as Gamaru and Wauchos, is a modular and HTTP-based botnet that was discovered in late 2011. From that point on, it managed to survive and continue hardening by evolving in different ways. This paper describes the evolution of Andromeda from version 2.06 to 2.10 and demonstrates both how it has improved its loader to evade automatic analysis/detection and how the payload varies among the different versions." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 5809;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-review-evolution-andromeda-over-years-we-say-goodbye"></a>A review of the evolution of Andromeda over the years before we say goodbye</h1>
<h3><a class="chapter" name="h3-bahare-sabouri-amp-he-xu"></a>Bahare Sabouri &amp; He Xu</h3>
<p>Fortinet, Canada</p>
<p><em>Copyright © 2018 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-12006" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-12006" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-introduction">Introduction</a><br /> <a class="toc-level2" href="#h2-overview-andromeda">Overview of Andromeda</a><br /> <a class="toc-level2" href="#h2-loader">Loader</a><br /> <a class="toc-level2" href="#h2-main-structure">Main structure</a><br /> <a class="toc-level2" href="#h2-payload">Payload</a><br /> <a class="toc-level2" href="#h2-evolution-campc">Evolution of C&amp;C</a><br /> <a class="toc-level2" href="#h2-side-note">Side note</a><br /> <a class="toc-level2" href="#h2-conclusion">Conclusion</a><br /> <a class="toc-level2" href="#h2-references">References</a><br /> <a class="toc-level2" href="#h2-sample-information">Sample information</a><br /> <a class="toc-level3" href="#h3-version-206">Version 2.06</a><br /> <a class="toc-level3" href="#h3-version-207">Version 2.07</a><br /> <a class="toc-level3" href="#h3-version-208">Version 2.08</a><br /> <a class="toc-level3" href="#h3-version-209">Version 2.09</a><br /> <a class="toc-level3" href="#h3-version-210">Version 2.10</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>Andromeda, also known as Gamaru and Wauchos, is a modular and HTTP-based botnet that was discovered in late 2011. From that point on, it managed to survive and continue hardening by evolving in different ways. In particular, the complexity of its loader and AV evasion methods increased repeatedly, and C&amp;C communication changed between the different versions as well.</p>
<p>We deal with versions of this threat on a daily basis and we have collected a number of different variants. The botnet first came onto our tracking radar at version 2.06, and we have tracked the versions since then. In this paper we will describe the evolution of Andromeda from version 2.06 to 2.10 and demonstrate both how it has improved its loader to evade automatic analysis/detection and how the payload varies among the different versions.</p>
<p>This article could also be seen as a way to say 'goodbye' to the botnet: a takedown effort, followed by the arrest of the suspected botnet owner in December 2017, may mean we have seen the last of the botnet that has plagued Internet users for more than half a decade.</p>
<p> </p>
<h2><a class="chapter" name="h2-overview-andromeda"></a>Overview of Andromeda</h2>
<p>The first Andromeda to be discovered was spotted in the wild in 2011, and the new 2.06 version followed quickly afterwards in early 2012. Not much is known about any earlier versions and it is possible they were never released into the wild.</p>
<p>The campaign continued to develop with versions 2.07, 2.08, 2.09 and 2.10. The latest known version, 2.10, was first seen in 2015 and may be the final version released: according to posts on underground forums, the development of the threat stopped around a year ago. <a href="#figure1">Figure 1</a> shows a brief history of Andromeda.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/e7c61be016b136ba9aa8ad7267a8f38d_f2539.jpg" alt="Andromeda-timeline-fig1.jpg" width="300" height="673" /></p>
<p><span class="centered-caption"><a class=" anchor" name="figure1"></a>Figure 1: A brief history of Andromeda.</span></p>
<p>Regardless of the version, Andromeda arrives on the target machine as a packed sample. Various packers have been used, from very famous packers such as UPX and SFX RAR to lesser known and even customized ones which are compiled in various languages such as Autoit, .Net and C++.</p>
<p>Unpacking the first layer of the sample reveals the loader, which is small both in terms of size (13KB to 20KB) and in the number of function calls it contains.</p>
<p> </p>
<h2><a class="chapter" name="h2-loader"></a>Loader</h2>
<p>In all versions of Andromeda the loader avoids making direct calls to APIs. Instead, it incorporates hashes to find and call the APIs via general purpose registers. Versions 2.06, 2.07 and 2.08 pass hash values as immediate values to a function and thus find the matching API name. Version 2.06 uses a custom hash function, while versions 2.07 and 2.08 use CRC32. Versions 2.09 and 2.10 have the same trivial custom hash function. <a href="#figure3">Figure 3</a> shows the loader in version 2.09 handling an array of hash values.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/1815/1784/1638/Fig1.png" alt="Fig1.png" width="545" height="394" /><span class="centered-caption">Figure 2: Version 2.08 passes the hash as an immediate value to 'resolveAddress_byHash'.</span></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/5515/1784/1670/Fig2.png" alt="Fig2.png" width="485" height="210" /><span class="centered-caption"><a class=" anchor" name="figure3"></a>Figure 3: In version 2.09, the loader handles an array of hash values.</span></p>
<p>Version 2.10 also keeps an array of API hash values. The hash algorithm is a custom function and, in order to complicate static analysis further, the author incorporates opaque predicates, as shown in <a href="#figure4">Figure 4</a>.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/8515/1784/1866/Fig3.png" alt="Fig3.png" width="760" height="337" /><span class="centered-caption"><a class=" anchor" name="figure4"></a>Figure 4: Opaque predicates in the version 2.10 loader make static anaylsis more difficult.</span></p>
<p> </p>
<h2><a class="chapter" name="h2-main-structure"></a>Main structure</h2>
<p>The section in the loader that is used to evade virtual machines and, more generally, analysis, is similar in versions 2.06, 2.07 and 2.08. In these variants, the loader enumerates the processes running on the machine and compares them against a list of unwanted processes. In order to do this, the loader converts the name of each process to lowercase and then calculates its hash value. The hash values are then compared against a hard-coded list of values. The same algorithm as is used to hash API names is used here. The hash algorithm in version 2.08 has an extra xor instruction (xor eax, 0E17176Fh). As shown in <a href="#figure5">Figure 5</a>, the newer versions have longer lists of unwanted processes.</p>
<p> </p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/6415/1784/2228/figure5-andromeda.jpg" alt="figure5-andromeda.jpg" width="759" height="644" /><span class="centered-caption"><a class=" anchor" name="figure5"></a>Figure 5: From left to right: version 2.06, 2.07 and 2.08 hard-coded hash values correspond to the list of unwanted processes.</span></p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>2.06</strong></td>
<td><strong>2.07</strong></td>
<td><strong>2.08</strong></td>
</tr>
<tr>
<td>0x4CE5FD07: vmwareuser.exe<br />0x8181326C: vmwareservice.exe<br />0x31E233AF: vboxservice.exe<br />0x91D47DF6: vboxtray.exe<br />0xE8CDDC54: sandboxiedcomlaunch.exe<br />0x8C6D6C: sandboxierpcss.exe<br />0x0A8D0BA0E: procmon.exe<br />0x0A4EF3C0E: wireshark.exe<br />0x5CD7BA5E: netmon.exe</td>
<td>0x99DD4432: vmwareuser.exe<br />0x2D859DB4: vmwareservice.exe<br />0x64340DCE: vboxservice.exe<br />0x63C54474: vboxtray.exe<br />0x349C9C8B: sandboxiedcomlaunch.exe<br />0x3446EBCE: sandboxierpcss.exe<br />0x5BA9B1FE: procmon.exe<br />0x3CE2BEF3: regmon.exe<br />0x3D46F02B: filemon.exe<br />0x77AE10F7: wireshark.exe<br />0x0F344E95D: netmon.exe<br /><br /><br /></td>
<td>0x97CA535D: vmwareuser.exe<br />0x23928ADB: vmwareservice.exe<br />0x6A231AA1: vboxservice.exe<br />0x6DD2531B: vboxtray.exe<br />0x3A8B8BE4: sandboxiedcomlaunch.exe<br />0x3A51FCA1: sandoxierpcss.exe<br />0x55BEA691: procmon.exe<br />0x32F5A99C: regmon.exe<br />0x3351E744: filemon.exe<br />0x79B90798: wireshark.exe<br />0x0FD53FE32: netmon.exe<br />0x23A97A00: prl_tools_service.exe<br />0x0ADC6152B: prl_tools.exe<br />0x1365FAFE: prl_cc.exe<br />0x98847CD1: sharedintapp.exe<br />0x299BC837: vmtoolsd.exe<br />0x35E8EFEA: vmsrvc.exe<br />0x632434B6: vmusrvc.exe</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 1: Corresponding process to each hash.</p>
<p>Next, the bot takes advantage of registry artifacts and checks the registry value in the following key:</p>
<p>Key: HKLM\system\currentcontrolset\services\disk\enum<br />ValueName: 0</p>
<p>Version 2.06 parses the value of the subkey for the presence of the substrings 'qemu', 'vbox' and 'wmwa'. Similarly, versions 2.07 and 2.08 check for 'qemu', 'vbox' and 'vmwa'. (It is likely that 'wmwa' was a bug in version 2.06 that was patched later.) Upon finding any of these strings, each version takes a different approach to redirect the flow of the code.</p>
<p>Before redirecting the code in versions 2.06 and 2.07, the sample designates another snippet of code that uses a technique known as 'time attack' in order to prevent further analysis. The malware acquires the timestamp counter (by calling rdtsc) twice and calculates the difference between the two. If the difference is less than 512ms, it proceeds to resolve imports and decrypt the payload. Otherwise, it leads to a dummy code, where the loader drops a copy of itself in %ALLUSERSPROFILE% and renames it to svchost.exe.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/3815/1784/2389/Fig5.png" alt="Fig5.png" width="621" height="173" /><span class="centered-caption">Figure 6: Timestamp analysis to detect the debugger.</span></p>
<p>Following that, it creates an autorun registry for the dropped file as follows:</p>
<p>Key: HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run<br />ValueName: SunJavaUpdateSched</p>
<p>Eventually, waiting for a command in an infinite loop, it sniffs port 8000. A received command will then be run in the command window.</p>
<p>As part of its evolution, version 2.07 implements a custom exception handler using a call to SetUnhandledExceptionFilter. Similarly, version 2.08 calls RtlAddVectoredExceptionHandler and adds the custom handler as the first handler into the vectored exception handler chain (VEH), as shown in Figures <a href="#figure7">7</a> and <a href="#figure8">8</a>.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/2215/1784/2468/Fig6.png" alt="Fig6.png" width="714" height="576" /><span class="centered-caption"><a class=" anchor" name="figure7"></a>Figure 7: Bot creates a custom exception handler in version 2.07.</span></p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/4615/1784/2504/Fig7.png" alt="Fig7.png" width="686" height="146" /><span class="centered-caption"><a class=" anchor" name="figure8"></a>Figure 8: Bot adds a custom exception handler into VEH in version 2.08.</span></p>
<p>If the malware finds any of the substrings in the retrieved registry, it runs a function that causes an access violation. The access violation is created intentionally when the sample tries to overwrite the DLL characteristics in the PE header which only has read rights, as shown in Figures <a href="#figure9">9</a> and <a href="#figure10">10</a>.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/8415/1784/2581/Fig8.png" alt="Fig8.png" width="712" height="99" /><span class="centered-caption"><a class=" anchor" name="figure9"></a>Figure 9: Overwriting the PE header raises an exception.</span></p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/7415/1784/2611/Fig9.png" alt="Fig9.png" width="571" height="134" /><span class="centered-caption"><a class=" anchor" name="figure10"></a>Figure 10: The PE header only has read rights.</span></p>
<p>In this case, if the sample is not being debugged, control is passed immediately to the custom handler. The custom exception handler decrypts a piece of code that will be injected into another process later (<a href="#figure11">Figure 11</a>).</p>
<p><a class="zoom-img" title="Figure 11: Custom exception handler." href="/files/5015/1784/2695/Fig10.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/94525bb48209e8a11c5c3b75fe49588a_f2530.png" alt="Fig10.png" width="840" height="474" /></a><span class="centered-caption"><a class=" anchor" name="figure11"></a>Figure 11: Custom exception handler.</span></p>
<p>Versions 2.07 and 2.08 share another feature that controls whether the loader bypasses anti-VM and anti-debugging procedures. The loader calls GetVolumeInformationA on the 'C:\' drive and acquires the drive name. Next, it calculates the CRC32 of the drive name and compares it against a hard-coded value, 0x20C7DD84 (<a href="#figure12">Figure 12</a>). If they match, it bypasses the anti-forensics checks and proceeds directly to invoke the exception. The author probably used this technique to test the bot in his/her virtual machine without the need to go through the anti-VM/anti-analysis features.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/1315/1784/2750/Fig11.png" alt="Fig11.png" width="611" height="227" /><span class="centered-caption"><a class=" anchor" name="figure12"></a>Figure 12: Drive C checksum is calculated and compared to 0x20C7DD84.</span></p>
<p>Versions 2.09 and 2.10 evade debugging and analysis by implementing the same idea as previous versions, but this time in the payload. Eventually, in all versions, the loader injects the payload into a remote process using a process hollowing technique and runs it in memory.</p>
<p> </p>
<h2><a class="chapter" name="h2-payload"></a>Payload</h2>
<p>As mentioned, the payloads of versions 2.09 and 2.10 start with some anti-VM tricks, despite the earlier versions having taken care of this in the loader. Like the older versions, they check for a list of blacklisted processes in case the machine is compromised. The number of blacklisted processes in version 2.09 is exactly the same as in 2.08, whereas it increases to 21 processes in version 2.10 (see <a href="#figure13">Figure 13</a>). Like versions 2.07 and 2.08, versions 2.09 and 2.10 calculate the CRC32 of the process name. However, instead of implementing the algorithm, they call RtlComputeCrc32 directly. If the bot finds any of the target processes, it runs a snippet of code to sleep for one minute in an infinite loop in order to evade detection.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/2815/1784/3135/Fig12.png" alt="Fig12.png" width="593" height="338" /><span class="centered-caption"><a class=" anchor" name="figure13"></a>Figure 13: The number of blacklisted processes increases in version 2.10.</span></p>
<p>If 'HKLM\software\policies' contains the registry key 'is_not_vm' and the key is VolumeSerialNumber, version 2.10 bypasses these checks. This behaviour is comparable to that in versions 2.07 and 2.08 where the bot checked the checksum of the root drive.</p>
<p> </p>
<h2><a class="chapter" name="h2-evolution-campc"></a>Evolution of C&amp;C</h2>
<p>The main aim of Andromeda's payload is to steal the infected system's information, talk to the command-and-control (C&amp;C) server, and download and install additional malware onto the system. In order to do this, it initiates a sophisticated command-and-control channel with the server. Each version of Andromeda uses a different format for the message and the report that it sends to the server.</p>
<p>As shown in <a href="#table2">Table 2</a>, each version has two message formats, both sent as HTTP POST requests: Action Request and Task Report. Action Request contains the information exfiltrated from the compromised system; the bot sends it to the server after encryption. Task Report, as the name implies, provides a report about the accomplished task.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Version</strong></td>
<td><strong>Action Request</strong></td>
<td><strong>Task Report</strong></td>
</tr>
<tr>
<td><strong>2.06</strong></td>
<td>id:%lu|bid:%lu|bv:%lu|sv:%lu|pa:%lu|la:%lu|ar:%lu</td>
<td>id:%lu|tid:%lu|result:%lu</td>
</tr>
<tr>
<td><strong>2.07</strong></td>
<td>id:%lu|bid:%lu|bv:%lu|os:%lu|la:%lu|rg:%lu</td>
<td>id:%lu|tid:%lu|res:%lu</td>
</tr>
<tr>
<td><strong>2.08</strong></td>
<td>id:%lu|bid:%lu|bv:%lu|os:%lu|la:%lu|rg:%lu</td>
<td>id:%lu|tid:%lu|res:%lu</td>
</tr>
<tr>
<td><strong>2.09</strong></td>
<td>id:%lu|bid:%lu|os:%lu|la:%lu|rg:%lu</td>
<td>id:%lu|tid:%lu|err:%lu|w32:%lu</td>
</tr>
<tr>
<td><strong>2.10</strong></td>
<td>{“id”:%lu,“bid”:%lu,“os”:%lu,“la”:%lu,“rg”:%lu}<br />{“id”:%lu,“bid”:%lu,“os”:%lu,“la”:%lu,“rg”:%lu,“bb”:%lu}</td>
<td>{“id”:%lu,“tid”:%lu,“err”:%lu,“w32”:%lu}</td>
</tr>
</tbody>
</table>
<p class="centered-caption"><a class=" anchor" name="table2"></a>Table 2: Evolution of the message formats.</p>
<p>The Action Request format shares some essential tags among all versions, such as 'id' and 'bid', while some other tags are version‑specific, such as 'ar' in version 2.06 and 'bb' in version 2.10. It is only the last version of the bot that uses JSON format to communicate with the C&amp;C server.</p>
<p><a href="#table3">Table 3</a> describes the role of each tag in the format.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td style="text-align: center;" colspan="2"><strong>Action Request</strong></td>
<td style="text-align: center;" colspan="2"><strong>Task Report</strong></td>
</tr>
<tr>
<td><strong>Tag</strong></td>
<td><strong>Information</strong></td>
<td><strong>Tag</strong></td>
<td><strong>Information</strong></td>
</tr>
<tr>
<td>id</td>
<td>Volume serial number of victim machine</td>
<td>id</td>
<td>Volume serial number of victim machine</td>
</tr>
<tr>
<td>bid</td>
<td>Bot ID, a hard-coded DWORD in payload</td>
<td>tid</td>
<td>Task ID provided by server</td>
</tr>
<tr>
<td>bv</td>
<td>Bot version</td>
<td>res/result/err</td>
<td>Flag indicating if task is successful</td>
</tr>
<tr>
<td>pa</td>
<td>Flag indicating whether OS is 32-bit or 64-bit</td>
<td>w32</td>
<td>System error code, returned by RtlGetLastWin32Error</td>
</tr>
<tr>
<td>la</td>
<td>Local IP address acquired from sockaddr structure</td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>ar/rg</td>
<td>Flag indicating if the process runs in the administrator group</td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>sv/os</td>
<td>Version of the victim operating system   </td>
<td> </td>
<td> </td>
</tr>
<tr>
<td>bb</td>
<td>Flag indicating if victim system uses a Russian, Ukrainian, Belarusian or Kazakh keyboard</td>
<td> </td>
<td> </td>
</tr>
</tbody>
</table>
<p class="centered-caption"><a class=" anchor" name="table3"></a>Table 3: Definition of tags.</p>
<p>We believe that 'bid' is used to represent build ID and, interestingly, in some versions, like 2.06 and 2.10, it indicates a date in the format YYYYMMDD, as can be seen in <a href="#figure14">Figure 14</a>. In other instances, this tag represents a hard-coded random number. The latest observed 'bid' in version 2.10 is 22 May 2017, which suggests that development stopped then.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/6315/1784/3218/figure13.png" alt="figure13.png" width="670" height="126" /><span class="centered-caption"><a class=" anchor" name="figure14"></a>Figure 14: 'bid' value in version 2.10.</span></p>
<p>After version 2.08, 'bv', which indicates the bot version, is removed from the request message. However, in the two latest versions, there remains a clue as to the bot version, which is a hard-coded xor key. This xor key is used in five different places in version 2.09 and twice in version 2.10. In all cases, it xors the 'id' and will be further manipulated to be used as the file name or registry value (see Figures <a href="#figure15">15</a> and <a href="#figure16">16</a>).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/9515/1784/3292/Fig14.png" alt="Fig14.png" width="742" height="233" /><span class="centered-caption"><a class=" anchor" name="figure15"></a>Figure 15: The bot version is represented as a hard-coded xor key and used as a file name.</span></p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/6515/1784/3330/Fig15.png" alt="Fig15.png" width="605" height="569" /><span class="centered-caption"><a class=" anchor" name="figure16"></a>Figure 16: The bot version is represented as a hard-coded xor key and used in registries.</span></p>
<p>When the message is prepared for the required information, in all versions except the most recent one, the string is encrypted in two steps. The first step uses a 20-byte hard‑coded RC4 key and the second step uses base64 encoding. Version 2.10 encrypts the message only using the RC4 algorithm. After posting the message to the server, the bot receives a message from the server. The bot validates the message by calculating its CRC32 hash excluding the first DWORD, which serves as a checksum. If the hash equals this excluded DWORD, it proceeds to decrypt the message using the 'id' value as the RC4 key.</p>
<p>Next, it decodes the base64 string and obtains a plain text message. Received messages have the following structure:</p>
<pre>struct RecvBlock {<br />     uint8_t cmd_id;<br />     uint32_t tid;<br />     char cmd_param[];<br />};</pre>
<p>According to the communicated cmd_id, the bot carries out a designated command which could be any number from the following: 1, 2, 3, 4, 5, 6, 9. In versions prior to 2.09, the bot is capable of performing all seven tasks. But in versions 2.09 and 2.10, it discards commands 4 and 5.</p>
<p>In <a href="#table4">Table 4</a> we take a look at each task and describe it further using static analysis of the code.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>cmd_id</strong></td>
<td><strong>Task type</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>1</td>
<td>Download EXE</td>
<td>Using the domain provided in the command_parameter, the bot downloads an exe, saves it in the temp folder with a random name, and executes it.</td>
</tr>
<tr>
<td>2</td>
<td>Install plug-in</td>
<td>Using the domain provided in the command_parameter, the bot installs and loads plug-ins.</td>
</tr>
<tr>
<td>3</td>
<td>Update bot</td>
<td>Using the domain provided in the command_parameter, the bot gets the exe file to update itself. If a file named ‘Volume Serial Number’ exists in the registry, the bot drops the update in the temp folder and gives it a random name. Otherwise, the file is dropped in the current directory. <br />This task is followed by cmd_id=9, which kills the older bot.</td>
</tr>
<tr>
<td>4</td>
<td>Install DLL</td>
<td>Using the domain provided in the command_parameter, the bot downloads a DLL into the %alluserprofile% folder with a random name and .dat extension.</td>
</tr>
<tr>
<td>5</td>
<td>Delete DLLs</td>
<td>The DLL loaded in cmd_id=4 is uninstalled.</td>
</tr>
<tr>
<td>6</td>
<td>Delete plug-ins</td>
<td>The plug-ins loaded in cmd_id=3 are uninstalled.</td>
</tr>
<tr>
<td>9</td>
<td>Kill bot</td>
<td>All threads are suspended and the bot is uninstalled.</td>
</tr>
</tbody>
</table>
<p class="centered-caption"><a class=" anchor" name="table4"></a>Table 4: The seven command IDs and their tasks.</p>
<p>It is interesting to note that the cmd_id value changes a little in versions 2.09 and 2.10. As a result, the bot first downloads the plug-in and later finds three plug-in exports, aStart, aUpdate and aReport, using a call to the GetProcAddress API (<a href="#figure17">Figure 17</a>).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/3115/1784/3445/Fig16.png" alt="Fig16.png" width="617" height="140" /><span class="centered-caption"><a class=" anchor" name="figure17"></a>Figure 17: The payload also searches for plug-in exports aStart and aUpdate.</span></p>
<p>To summarize, Andromeda normally spreads via exploit kits located on compromised websites. The primary sample is packed and drops the loader after the unpacking stage. In the earlier versions of the bot the loader contains anti-VM and anti-analysis tricks. In all versions, the loader decrypts the payload and resolves APIs for indirect calls in the payload. As a result, using an anti-API hooking trick, the loader saves the first instruction of the API call into memory and jumps to the second instruction.</p>
<p>In the last two versions of the bot (2.09 and 2.10) the payload contains anti-VM and anti-analysis features. In version 2.07 and later versions, the payload leverages an inline hooking technique and hooks selected APIs. For example, in versions 2.07 and 2.08 the bot hooks GetAddrInfoW, ZwMapViewOfSection and ZwUnmapViewOfSection; in version 2.09 it hooks GetAddrInfoW and NtOpenSection; and in version 2.10 it hooks GetAddrInfoW and NtMapViewOfSection. In all versions, the bot steals information from the compromised system, sends the information to the server (after encryption), and waits for a command from the server.</p>
<p>Upon receiving a command from the server, the bot acts accordingly, installing plug-ins and downloading other malware. Finally, the bot sends a report about its mission to the server.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/3615/1784/3564/Fig17.png" alt="Fig17.png" width="720" height="378" /><span class="centered-caption">Figure 18: Andromeda at a glance.</span></p>
<p> </p>
<h2><a class="chapter" name="h2-side-note"></a>Side note</h2>
<p>It has been a while since the last version of Andromeda was released. We have been waiting a long time for a new variant to emerge, but Reuters reported recently:</p>
<p>'National police in Belarus, working with the U.S. Federal Bureau of Investigation, said they had arrested a citizen of Belarus on suspicion of selling malicious software who they described as administrator of the Andromeda network.' [<a href="#ref3">3</a>]</p>
<p>Based on that, we can tentatively call this the end of the Andromeda era, and conclude that there won't be any further releases.</p>
<p> </p>
<h2><a class="chapter" name="h2-conclusion"></a>Conclusion</h2>
<p>From 2011 to 2015, Andromeda kept analysts busy with its compelling features and functionality, and it remains among the most prevalent malware families today. Over the course of four years, five major versions were released, each new version being more complex than its predecessor. This guaranteed that Andromeda remained a sophisticated threat. A flexible C&amp;C provided a wide range of functionality and efficiency, increasing the power of the threat by installing various modules. Meanwhile, it integrated several RC4 keys to encrypt data for C&amp;C communications, thus making detection a significantly more complex challenge. Fortunately, however, analysts have become sufficiently familiar with Andromeda's ecosystem over the years to learn how to navigate all of its challenges.</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] Tan, N. Andromeda 2.7 features. Fortinet blog. 23 April 2014. <a href="https://blog.fortinet.com/2014/04/23/andromeda-2-7-features" target="_blank">https://blog.fortinet.com/2014/04/23/andromeda-2-7-features</a>.</p>
<p><a class=" anchor" name="ref2"></a>[2] Xu, H. A good look at the Andromeda botnet. Virus Bulletin. May 2013. <a href="https://www.virusbulletin.com/virusbulletin/2013/05/good-look-andromeda-botne" target="_blank">https://www.virusbulletin.com/virusbulletin/2013/05/good-look-andromeda-botne</a>t.</p>
<p><a class=" anchor" name="ref3"></a>[3] Sterling, T.; Auchard, E. Belarus arrests suspected ringleader of global cyber crime network. Reuters. 5 December 2017. <a href="https://ca.reuters.com/article/technologyNews/idCAKBN1DZ1VY-OCATC" target="_blank">https://ca.reuters.com/article/technologyNews/idCAKBN1DZ1VY-OCATC</a>.</p>
<p><a class=" anchor" name="ref4"></a>[4] Xu, H. Cracked Andromeda 2.06 spreads bitcoinn miner. Fortinet blog. 7 January 2015. <a href="https://blog.fortinet.com/2015/01/07/cracked-andromeda-2-06-spreads-bitcoin-miner" target="_blank">https://blog.fortinet.com/2015/01/07/cracked-andromeda-2-06-spreads-bitcoin-miner</a>.</p>
<p> </p>
<h2><a class="chapter" name="h2-sample-information"></a>Sample information</h2>
<h3><a class="chapter" name="h3-version-206"></a>Version 2.06</h3>
<p><strong>MD5:</strong> 73564f834fd0f61c8b5d67b1dae19209</p>
<p><strong>SHA256:</strong> 4ad4752a0dcaf3bb7dd3d03778a149ef1cf6a8237b21abcb525b9176c003ac3a</p>
<p><strong>Fortinet detection name:</strong> W32/Kryptik.AFJS!tr</p>
<p> </p>
<h3><a class="chapter" name="h3-version-207"></a>Version 2.07</h3>
<p><strong>MD5:</strong> d7c00d17e7a36987a359d77db4568df0</p>
<p><strong>SHA256:</strong> 44950952892d394e5cbe9dcc7a0db0135a21027a0bf937ed371bb6b8565ff678</p>
<p><strong>Fortinet detection name:</strong> W32/Injector.ZVR!tr</p>
<p> </p>
<h3><a class="chapter" name="h3-version-208"></a>Version 2.08</h3>
<p><strong>MD5:</strong> b4d37eff59a820d9be2db1ac23fe056e</p>
<p><strong>SHA256:</strong> 92d25f2feb6ca7b3e0d921ace8560160e1bfccb0beeb6b27f914a5930a33e316</p>
<p><strong>Fortinet detection name:</strong> W32/Tepfer.ASYP!tr.pws</p>
<p> </p>
<h3><a class="chapter" name="h3-version-209"></a>Version 2.09</h3>
<p><strong>MD5:</strong> 3f2762d18c1abc67e21a7f9ad4fa67fd</p>
<p><strong>SHA256:</strong> 2f44d884c9d358130050a6d4f89248a314b6c02d40b5c3206e86ddb834e928f6</p>
<p><strong>Fortinet detection name:</strong> W32/BLDZ!tr</p>
<p> </p>
<h3><a class="chapter" name="h3-version-210"></a>Version 2.10</h3>
<p><strong>MD5:</strong> fb0a6857c15a1f596494a28c3cf7379d</p>
<p><strong>SHA256:</strong> 73802eaa46b603575216fb212bcc18c895f4c03b47c9706cde85368c0334e0cd</p>
<p><strong>Fortinet detection name:</strong> W32/Malicious_Behavior.VEX</p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2018/201802-review-evolution-andromeda.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=A review of the evolution of Andromeda over the years before we say goodbye&url=https://www.virusbulletin.com/virusbulletin/2018/02/review-evolution-andromeda-over-years-we-say-goodbye"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2018/02/review-evolution-andromeda-over-years-we-say-goodbye'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2018/02/review-evolution-andromeda-over-years-we-say-goodbye&title=A review of the evolution of Andromeda over the years before we say goodbye"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2018/02/review-evolution-andromeda-over-years-we-say-goodbye&t=A review of the evolution of Andromeda over the years before we say goodbye"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2018/02/review-evolution-andromeda-over-years-we-say-goodbye"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>