<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Metafile art class</title>
<meta name="description" content="Like its predecessor the Windows Metafile Format, the Enhanced Metafile Format has proven to be susceptible to misappropriation. Dennis Elser provides an in-depth description of a recent remotely exploitable file format vulnerability within the Windows graphics device interface (GDI)." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 2418;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb200806-metafile-art"></a>Metafile art class</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2008-06-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Dennis</span> <span class="surname">Elser</span></h3><span class="orgname">Secure Computing Corporation</span>, <span class="orgdiv">Germany</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Like its predecessor the Windows Metafile Format, the Enhanced Metafile Format has proven to be susceptible to misappropriation. Dennis Elser provides an in-depth description of a recent remotely exploitable file format vulnerability within the Windows graphics device interface (GDI).</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2008 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-4348" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-4348" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3476462"></a></span></dt><dt><span class="sect1"><a href="#id4910152">Paint by numbers</a></span></dt><dt><span class="sect1"><a href="#id4614819">Image interpretation</a></span></dt><dt><span class="sect1"><a href="#id2966817">Art forgery detection</a></span></dt><dt><span class="sect1"><a href="#id2605139">Soft-focus effect</a></span></dt><dt><span class="sect1"><a href="#id3996175">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3476462"></a></h2></div></div></div><p>Just like its predecessor the Windows Metafile Format (WMF), the Enhanced Metafile Format (EMF) consists of descriptive commands for drawing an image rather than bitplanes of the rendered image itself. And just like malformed WMF files [<span class="citation"><a href="#citation.1">1</a></span>], Enhanced Metafiles have also proved to be susceptible to misappropriation.</p><p>This article provides a technical analysis of a recent remotely exploitable file format vulnerability within <em class="productname">Windows</em>&rsquo; graphics device interface (GDI) [<span class="citation"><a href="#citation.2">2</a></span>].</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4910152"></a>Paint by numbers</h2></div></div></div><p>The idea behind WMF and EMF files is application and device independence, respectively: metafiles contain a sequence of records that guide a drawing device in how to render an image.</p><p>There is no serious difference in functionality between the two file formats other than EMF being truly device independent by maintaining its dimensions, shape and proportions [<span class="citation"><a href="#citation.3">3</a></span>].</p><p>All EMF records begin with a 32-bit field which is used to identify the record type and another 32-bit field for the size of the record; both fields are in Little-Endian byte order. Next, there is record-specific data of variable length. An EMF image always starts with a header record (type = 0x1), followed by a sequence of EMF data records and an end-of-file record (type = 0xE).</p><p>A record&rsquo;s &lsquo;Size&rsquo; field, as shown in <a href="#figure.1">Figure 1</a>, is used by the parser as an offset to find the beginning of the next record (current record&rsquo;s file offset + &lsquo;Size&rsquo;). However, there have also been EMF records with &lsquo;overlapping&rsquo; data, as was the case with the first EMF exploit (MD5: 7DB16FD50CF76CEF3d29DE47239C1F9A), which was found in the wild only two days after <em class="phrase">Microsoft</em> published security bulletin MS08-021. Overlapping data wasn&rsquo;t relevant for the exploit&rsquo;s success, but was probably carelessness on the part of the exploit&rsquo;s author and a sign of intentionally corrupted data &ndash; easy to spot.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="General structure of EMF records and the EMR_COLORMATCHTOTARGETW record." src="/uploads/images/figures/2008/06/Elser1.gif" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;General structure of EMF records and the EMR_COLORMATCHTOTARGETW record.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4614819"></a>Image interpretation</h2></div></div></div><p>We can see three records in the exploit&rsquo;s hex-dump shown in <a href="#figure.2">Figure 2</a> below. Its green markers show the record&rsquo;s type; blue ones show the record&rsquo;s length. The exploit&rsquo;s first record type is EMR_HEADER (0x1), one of approximately 122 different record types. Its second is EMR_COLORMATCHTOTARGETW (0x79). </p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Hex-dump of an EMF exploit." src="/uploads/images/figures/2008/06/Elser2.gif" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Hex-dump of an EMF exploit.</b></p></div><p>The exploit&rsquo;s third record (0xF1CF7512) is invalid, since the highest record-type number defined on current <em class="productname">NT</em>-based machines is 0x7A (wingdi.h). As we will see later, the reason for this is the second record&rsquo;s data exceeding its stated &lsquo;Size&rsquo;.</p><p>By interpreting the structure of record type EMR_COLORMATCHTOTARGETW, which begins at file offset 0x9C in the exploit&rsquo;s hex-dump above, we can find out what causes the overflow. Each of the structure&rsquo;s fields has a size of 32 bits, with the &lsquo;Data&rsquo; field being the only exception: it is an array of bytes that holds a Unicode name of a colour profile with additional raw colour profile data appended. A colour profile is a file that contains information about the conversion of colours in the context of a specific device [<span class="citation"><a href="#citation.3">3</a></span>].</p><p>In <em class="phrase">Microsoft</em>&rsquo;s specification, the size of a &lsquo;Data&rsquo; field in bytes is appointed by the sum of the &lsquo;cbName&rsquo; (0x0) and &lsquo;cbData&rsquo; (0x38) fields, which in the exploit&rsquo;s case results in 0x38. So apparently, the exploit&rsquo;s &lsquo;Data&rsquo; array at file offset 0xB4 is reserved; 0 bytes for a colour profile name but 0x38 bytes for raw colour profile data. However, internal handling of this array of bytes looks a little different, as we will see below.</p><p>As soon as the <em class="productname">Windows</em> GDI parses an EMF file, its size fields are sanity checked (the sum of &lsquo;cbName&rsquo; and &lsquo;cbData&rsquo; must not int-overflow). Depending on the result of these checks, the particular record is flagged as either good or bad internally and only good ones are allowed further processing.</p><p>Once an EMR_COLORMATCHTOTARGETW record has passed this test, its &lsquo;Data&rsquo; buffer is processed by &lsquo;BuildIcmProfilePath()&rsquo;, which is the function responsible for building a temporary colour profile&rsquo;s path on stack. However, the whole &lsquo;Data&rsquo; buffer is interpreted as a Unicode string by the function without considering the size limitations provided by the &lsquo;Size&rsquo; and &lsquo;cbName&rsquo; fields. So even given a record length of 0x50, the GDI&rsquo;s EMF parser keeps reading beyond the EMR_COLORMATCHTOTARGETW record&rsquo;s limits until a null-termination character is found within the &lsquo;Data&rsquo; Unicode string.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2966817"></a>Art forgery detection</h2></div></div></div><p>As both its partial disassembly (<a href="#figure.3">Figure 3</a>) and stackframe (<a href="#figure.4">Figure 4</a>) show, the maximum length of a path constructed by &lsquo;BuildIcmProfilePath()&rsquo; was supposed to be restricted to 0x104 wide characters (520 bytes). However, due to inappropriate use of wcsncat(), the actual maximum restriction is 3 * 0x104 wide characters in theory (1560 bytes), which is far more than can be stuffed into &lsquo;tempbuf&rsquo;. &lsquo;tempbuf&rsquo; can hold a maximum of 262 wide characters including the null-terminating character.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Broken implementation of &lsquo;BuildIcmProfilePath&rsquo;." src="/uploads/images/figures/2008/06/Elser3.gif" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Broken implementation of &lsquo;BuildIcmProfilePath&rsquo;.</b></p></div><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Stackframe of &lsquo;BuildIcmProfilePath&rsquo;." src="/uploads/images/figures/2008/06/Elser4.gif" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Stackframe of &lsquo;BuildIcmProfilePath&rsquo;.</b></p></div><p>This particular bug is found in early versions of gdi32.dll (i.e. <em class="productname">XP SP0</em>). Later versions of gdi32.dll (pre-MS08-021) succeed in calculating the remaining space of &lsquo;tempbuf&rsquo; using wcslen(), but still fail to prevent the stack from being overwritten with &lsquo;Data&rsquo; in a subsequent lstrcpyW() call found in &lsquo;IcmCreateColorSpaceByName()&rsquo; &ndash; which reflects the vulnerability that has been fixed with MS08-021. Starting with that latest patch, the maximum number of wide characters copied to the stack is limited to 0x104.</p><p>In the end, with this limitation in effect, <em class="phrase">Microsoft</em> deprecated its own EMF specification, since &lsquo;cbName&rsquo; and &lsquo;cbData&rsquo; are both 32-bit integers that allow far more bytes to be reserved for a colour profile.</p><p>It&rsquo;s not clear why a stack buffer of fixed size has been used instead of a heap buffer allowing for dynamic size, but the insights gained from the process of parsing the EMF structure can now be used for defensive purposes. They allow us to build a generic detection mechanism for MS08-021-specific exploits by checking for EMR_COLORMATCHTOTARGETW records (and probably related ones) having a &lsquo;Data&rsquo; field in relation to a filename with more than 0x104 wide characters.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Unpatched EMF vulnerability." src="/uploads/images/figures/2008/06/Elser5.gif" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Unpatched EMF vulnerability.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2605139"></a>Soft-focus effect</h2></div></div></div><p>With the record&rsquo;s structure in mind and looking at the exploit&rsquo;s hex-dump again (<a href="#figure.2">Figure 2</a>), it is evident that &lsquo;Data&rsquo; doesn&rsquo;t contain a valid colour profile name and the number of wide characters in total exceeds 0x104 (the latter not being visible in the screenshot). Instead, the question of where exactly the exploit&rsquo;s shellcode has been placed is answered by disassembling the record&rsquo;s suspicious-looking &lsquo;Data&rsquo; field at file offset 0xB4.</p><p>The shellcode (<a href="#figure.6">Figure 6</a>) is XOR-encoded by an eight-bit key in order to avoid null-words, which could render the exploit ineffective when interpreted as zero-termination of Unicode strings. Once the shellcode has decoded itself on the stack, it uses the Process Environment Block (PEB) to find the base address of kernel32.dll in order to import several API functions by conducting a hashed string comparison of the APIs. These are used to download and install a backdoor, with a file name as &lsquo;unambiguous&rsquo; as it can get &ndash; &lsquo;word.gif&rsquo;, from igloofamily.com (a domain hosted in Korea).</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Shellcode found within an exploit&rsquo;s EMR_COLORMATCHTOTARGETW record." src="/uploads/images/figures/2008/06/Elser6.gif" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Shellcode found within an exploit&rsquo;s EMR_COLORMATCHTOTARGETW record.</b></p></div><p>The shellcode possesses the ability to bypass modern behaviour blockers that detect API functions being called from unusual places like the stack. This circumvention works by inserting a faked return address into the stack before calling an API function. The detoured return address points into a &lsquo;ret&rsquo; assembler instruction within kernel32.dll, which in turn pops the real return address off the stack to be able to return control to the real caller. By doing so, a behaviour blocker is tricked into believing the actual caller is within the <em class="productname">Windows</em> kernel32 library area instead of shellcode on stack, thus being legitimate (<a href="#figure.7">Figure 7</a>). The &lsquo;ret&rsquo; instruction that is used as a detour is searched for manually within the kernel32.dll module near the address of WinExec().</p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Behaviour blocker evasion mechanism." src="/uploads/images/figures/2008/06/Elser7.gif" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Behaviour blocker evasion mechanism.</b></p></div><p>In large part, this downloaded variant of the &lsquo;Poisonivy&rsquo; backdoor consists of multi-layered, encrypted and position-independent code. Position-independent code not only makes it harder to read the disassembly, in this context it is necessary since the code is injected into the memory space of running processes such as &lsquo;explorer.exe&rsquo; or &lsquo;msnmsgr.exe&rsquo; (via WriteProcessMemory and CreateRemoteThread APIs).</p><p>As soon as the injected thread is executed, it creates a &lsquo;hidden&rsquo; copy of the trojan as an NTFS alternate data stream (ADS) named &lsquo;win_socks.exe&rsquo;, attached to the &lsquo;system32&rsquo; folder in the <em class="productname">Windows</em> directory. Its launch upon system reboot is ensured by the creation of an &lsquo;Active Setup&rsquo; registry key in &lsquo;HKCU\Software\Microsoft\Active Setup\Installed Components\{E5C1F9EA-A8FE-FCBC-9F3D-C2791859730F}&rsquo;, named &lsquo;StubPath&rsquo;.</p><p>Afterwards the code stays in a loop waiting for <em class="productname">MSN Messenger</em> (msnmsgr.exe) to be run in order to inject another piece of self-decrypting code into it. This remote thread will initiate a connection with &lsquo;word.4pu.com&rsquo;, &lsquo;word1.4pu.com&rsquo; and &lsquo;word2.4pu.com&rsquo;, giving the attacker total control over the compromised system. Since it is a program that is usually allowed to pass the firewall on most systems, <em class="productname">MSN Messenger</em> makes an ideal target for a backdoor like this variant of &lsquo;Poisonivy&rsquo;.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3996175"></a>Conclusion</h2></div></div></div><p>Looking back at its history, the GDI has been a popular target among attackers. Besides the relatively recent EMF holes, GDI has also been vulnerable to remote attacks in the past, like the two ANImated cursor vulnerabilities (MS05-002 and MS07-017), a JPEG vulnerability in GDI+ (MS04-028) and WMF vulnerabilities (MS06-001). But thankfully there has been evolution: it&rsquo;s good to see the quality of the code going through different security stages, from using unsafe functions to using safer functions up to using proprietary safe functions in combination with the /GS compiler option.</p><p>As demonstrated by this article, it&rsquo;s not just lucrative business for the bad guys to perform binary code auditing and have a thorough look at the facts, but also for the good guys who need to defend these attacks. Vulnerabilities, like February&rsquo;s <em class="productname">Adobe Reader</em> vulnerability (CVE-2008-0655) and April&rsquo;s MS08-021 GDI vulnerability, begin to be exploited just a few days after the vendor&rsquo;s patch release &ndash; much faster than corporations may need to verify and deploy the patches. If we know the exact causes of vulnerabilities, we do not need to wait for the first exploits to fall into our hands in order to protect and defend ourselves effectively. Instead, we are able to tell apart benign structures from abnormal ones and thus can defend proactively against upcoming attacks.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3522692"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Ferrie, P. Inside the Windows Meta File format. Virus Bulletin, February 2006, pp.5-8. <span class="bibliosource"><a href="/virusbulletin/2006/02/inside-windows-meta-file-format
" target="_top">http://www.virusbtn.com/vba/2006/02/vb200602-wmf</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Microsoft Security Bulletin MS08-021. <span class="bibliosource"><a href="https://www.microsoft.com/technet/security/bulletin/ms08-021.mspx" target="_blank">http://www.microsoft.com/technet/security/bulletin/ms08-021.mspx</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Enhanced Metafile Format Specification Revision 2.0. <span class="bibliosource"><a href="http://msdn2.microsoft.com/en-us/library/cc204166.aspx" target="_blank">http://msdn2.microsoft.com/en-us/library/cc204166.aspx</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Metafile art class&url=https://www.virusbulletin.com/virusbulletin/2008/06/metafile-art-class"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2008/06/metafile-art-class'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2008/06/metafile-art-class&title=Metafile art class"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2008/06/metafile-art-class&t=Metafile art class"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2008/06/metafile-art-class"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>