<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2019 paper: Absolutely routed!! Why routers are the new bullseye in cyber attacks</title>
<meta name="description" content="Routers are ubiquitous and highly vulnerable to attack. Despite being the central nervous system of any network, routers are disregarded when it comes to security, as can be proven by the fact that, although vulnerabilities in routers are identified and reported, most devices remain unpatched, making easy targets for cybercriminals. In recent years we have seen threat actors shift their focus from complex operating system- and network-based attacks to comparatively simple router-based ones. This paper will provide detailed analyses of the exploit mechanics of the CVE-2018-14847, CVE‑2018-10561 and CVE-2019-1652 vulnerabilities. " />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 6666;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-vb2019-paper-absolutely-routed-why-routers-are-new-bullseye-cyber-attacks"></a>VB2019 paper: Absolutely routed!! Why routers are the new bullseye in cyber attacks</h1>
<h3><a class="chapter" name="h3-anurag-shandilya"></a>Anurag Shandilya</h3>
<p><em>K7 Computing, India</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-15053" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-15053" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-1-introduction">1. Introduction</a><br /> <a class="toc-level2" href="#h2-2-infection-vectors">2. Infection vectors</a><br /> <a class="toc-level3" href="#h3-21-system-misconfiguration">2.1 System misconfiguration</a><br /> <a class="toc-level4" href="#h4-case-study-default-credentials">Case study: Default credentials</a><br /> <a class="toc-level3" href="#h3-22-known-unpatched-vulnerabilities">2.2 Known unpatched vulnerabilities</a><br /> <a class="toc-level4" href="#h4-case-study-upnp">Case study: UPnP</a><br /> <a class="toc-level3" href="#h3-23-zero-day-vulnerabilities">2.3 Zero-day vulnerabilities</a><br /> <a class="toc-level2" href="#h2-3-vulnerabilities">3. Vulnerabilities</a><br /> <a class="toc-level3" href="#h3-31-cve-2018-14847">3.1 CVE-2018-14847</a><br /> <a class="toc-level4" href="#h4-test-environment-details">Test environment details</a><br /> <a class="toc-level4" href="#h4-analysis">Analysis</a><br /> <a class="toc-level4" href="#h4-case-study">Case study</a><br /> <a class="toc-level3" href="#h3-32-cve-2019-1652">3.2 CVE-2019-1652</a><br /> <a class="toc-level4" href="#h4-test-environment-details">Test environment details</a><br /> <a class="toc-level4" href="#h4-analysis">Analysis</a><br /> <a class="toc-level4" href="#h4-case-study">Case study</a><br /> <a class="toc-level3" href="#h3-33-cve-2018-10561">3.3 CVE-2018-10561</a><br /> <a class="toc-level2" href="#h2-4-common-malicious-operations-compromised-routers">4. Common malicious operations on compromised routers</a><br /> <a class="toc-level2" href="#h2-5-iocs-and-behavioural-changes">5. IoCs and behavioural changes</a><br /> <a class="toc-level3" href="#h3-51-expected-behaviour-router">5.1 Expected behaviour of a router</a><br /> <a class="toc-level3" href="#h3-52-behavioural-and-structural-changes">5.2 Behavioural and structural changes</a><br /> <a class="toc-level4" href="#h4-521-cve-2018-14847">5.2.1 CVE-2018-14847</a><br /> <a class="toc-level4" href="#h4-522-cve-2019-1652">5.2.2 CVE-2019-1652</a><br /> <a class="toc-level4" href="#h4-523-cve-2018-10561">5.2.3 CVE-2018-10561</a><br /> <a class="toc-level3" href="#h3-53-indicators-compromise">5.3 Indicators of compromise</a><br /> <a class="toc-level4" href="#h4-531-indicators-can-be-identified-non-intrusive-security-product">5.3.1 Indicators that can be identified by a non-intrusive security product</a><br /> <a class="toc-level4" href="#h4-532-indicators-can-be-identified-intrusive-security-product">5.3.2 Indicators that can be identified by an intrusive security product</a><br /> <a class="toc-level2" href="#h2-6-detection-methods">6. Detection methods</a><br /> <a class="toc-level3" href="#h3-61-existing-solutions">6.1 Existing solutions</a><br /> <a class="toc-level3" href="#h3-62-proposed-solution">6.2 Proposed solution</a><br /> <a class="toc-level2" href="#h2-conclusion">Conclusion</a><br /> <a class="toc-level2" href="#h2-references">References</a><br /> <a class="toc-level2" href="#h2-appendix-sample-hashes">Appendix: Sample hashes</a><br /> <a class="toc-level2" href="#h2-footnotes">Footnotes</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>Routers are ubiquitous and highly vulnerable to attack. Despite being the central nervous system of any network, routers are disregarded when it comes to security, as can be proven by the fact that, although vulnerabilities in routers are identified and reported, most devices remain unpatched, making easy targets for cybercriminals. In recent years we have seen threat actors shift their focus from complex operating system- and network-based attacks to comparatively simple router-based ones.</p>
<p>Other than merely brute-forcing credentials, cyber gangs have been exploiting known and zero-day router vulnerabilities to host malicious code. CVE-2018-14847 is a vulnerability affecting <em>MikroTik</em> <em>RouterOS</em> from v6.29 to v6.42, which allowed arbitrary file read and write over WinBox port 8291, reported in April 2018. Although a patch was available almost immediately, Coinhive, a cryptominer, exploited this vulnerability from July 2018 onwards to inject Monero mining code into the error page served up by the device when a user accessed any HTTP page. CVE-2018-10561 was reported in <em>DZS</em>’ <em>GPON</em> routers, which was then exploited by multiple pieces of router malware including Satori and Hajime to carry out their botnet operations. The Satori malware family exploited this vulnerability to download and execute shell script on the device from the /tmp directory. More recently, CVE-2019-1652 has been reported, affecting <em>Cisco</em> routers and allowing command injection in the router’s certificate generation module. This vulnerability, in combination with credential brute-forcing, could hand over complete control of a router to an adversary. (There is no known malware exploiting this vulnerability at the time of writing this paper.)</p>
<p>Detailed analyses of these vulnerabilities have demonstrated the startling ease with which routers are being maliciously exploited from both internal networks as well as the Internet. Compromised devices are being used as passive web proxies to snoop traffic, as active web proxies to serve cryptominers (as in the case of Coinhive), or as part of a botnet to inflict distributed denial of service (DDoS) attacks. Since specialized security hardware and software like Network Intrusion Detection and Prevention Systems (NIDS/NIPS) are typically needed to detect router infections, most small and medium-sized businesses and home-users are still vulnerable to such malware attacks.</p>
<p>This paper will provide detailed analyses of the exploit mechanics of the CVE-2018-14847, CVE‑2018-10561 and CVE-2019-1652 vulnerabilities. We will also discuss the indicators of compromise (IoCs) and behavioural changes on compromised devices which would assist in detection of malware on routers without recourse to NIDS/NIPS. We will also provide solutions for generic detection of attempts to exploit the mentioned vulnerabilities.</p>
<p> </p>
<h2><a class="chapter" name="h2-1-introduction"></a>1. Introduction</h2>
<p>Since the release of Mirai source code on <em>Hack Forums</em> in September 2016 [<a href="#ref1">1</a>], the threat landscape has spawned a major route-change. Threat actors customized Mirai code, adding device-specific exploits and releasing variants of the malware in the wild. Other malware families, such as TheMoon, which were already active at the time, upped their game to compete in the wild and generate profit. Some malware families were also observed to disinfect a device, only to re-infect it with their own code.</p>
<p>The Mirai botnet had a very basic element of success: a common and easily exploitable vulnerability, i.e. default credential-guessing, which worked successfully across various devices. The author releasing his source code to the public added to its success and paved a path for more router-targeting malware.</p>
<p>Router malware has evolved from standalone independent entities, adopting a modular approach, flexible enough to expand their functionalities on-the-fly. But what makes router malware profitable is that a single piece of malware can contain exploits for multiple devices, hence drastically increasing the attack surface.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Malware name</strong></td>
<td><strong>Year of first appearance</strong></td>
</tr>
<tr>
<td>Linux/Hydra</td>
<td>2008</td>
</tr>
<tr>
<td>Psybot</td>
<td>2009</td>
</tr>
<tr>
<td>ChuckNorris</td>
<td>2010</td>
</tr>
<tr>
<td>Carna Botnet</td>
<td>2012</td>
</tr>
<tr>
<td>lightAidra</td>
<td>2013</td>
</tr>
<tr>
<td>Linux.Darlloz</td>
<td>2013</td>
</tr>
<tr>
<td>Bashlite</td>
<td>2014</td>
</tr>
<tr>
<td>TheMoon</td>
<td>2014</td>
</tr>
<tr>
<td>Gafgyt</td>
<td>2015</td>
</tr>
<tr>
<td>Moose</td>
<td>2016</td>
</tr>
<tr>
<td>Remaiten</td>
<td>2016</td>
</tr>
<tr>
<td>Nyadrop</td>
<td>2016</td>
</tr>
<tr>
<td>LuaBot</td>
<td>2016</td>
</tr>
<tr>
<td>VPNFilter</td>
<td>2016</td>
</tr>
<tr>
<td>Linux/IRCTelnet (new Aidra)</td>
<td>2016</td>
</tr>
<tr>
<td>Mirai</td>
<td>2016</td>
</tr>
<tr>
<td>Qbot</td>
<td>2017</td>
</tr>
<tr>
<td>Persirai</td>
<td>2017</td>
</tr>
<tr>
<td>Tsunami - Amnesia</td>
<td>2017</td>
</tr>
<tr>
<td>Satori</td>
<td>2017</td>
</tr>
<tr>
<td>IOTroops</td>
<td>2017</td>
</tr>
<tr>
<td>Hajime</td>
<td>2018</td>
</tr>
<tr>
<td>Hide&amp;Seek</td>
<td>2018</td>
</tr>
<tr>
<td>Okiru</td>
<td>2018</td>
</tr>
<tr>
<td>Linux.Wifatch</td>
<td>2018</td>
</tr>
<tr>
<td>Prowli</td>
<td>2018</td>
</tr>
<tr>
<td>SlingShot</td>
<td>2018</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 1: Year of first appearance of major router malware as per VirusTotal.</p>
<p>Table 1 shows the first occurrences of well-known router malware over the past decade.</p>
<p>Linux/Hydra, the first-known router malware, used credential brute-forcing to compromise devices as part of a botnet. A rise can be observed in the number of router malware families since 2016, i.e. after Mirai had demonstrated its power and efficacy to the world by launching the biggest DDoS attacks that cyberspace had ever seen.</p>
<p>Malware like TheMoon, which first manifested in 2014, have evolved over time and made a re-entry onto the scene in 2018 with exploits targeting heterogeneous devices across platforms and architectures. Modularized malware like VPNFilter, reported since 2016, are already compiled with exploits targeting heterogeneous devices, and updated variants with newer exploits are frequently observed.</p>
<p>Exploits have traditionally been the spark-plug of malware, and this statement holds true for router malware as well. An important factor that comes into play here is that routers are highly vulnerable and easily exploitable as a result of less-focused security research in the early days of design and development.</p>
<p>This scenario is, of course, changing. With the gain in popularity of router-based malware, more vulnerabilities are being reported in routing devices, router vendors are rushing to release patches to fix them, and threat actors are rushing to compromise more and more unpatched devices.</p>
<p>In section 2 we shall discuss various infection vectors being utilized by threat actors to gain access to devices, with case studies to showcase their success in compromising devices. In section 3, we will focus on three vulnerabilities CVE-2018-14847, CVE-2018-10561 and CVE-2019-1652 on different devices, two of which are actively being exploited in the wild by malware. Section 4 emphasizes malicious operations that these compromised devices perform, with case studies based on recent malware. In section 5 we pin down the IoCs and behavioural changes on compromised devices. And finally, section 6 provides a commentary on existing detection approaches implemented by various security vendors and proposes a more generic approach which may prove helpful in detecting and mitigating router malware.</p>
<p> </p>
<h2><a class="chapter" name="h2-2-infection-vectors"></a>2. Infection vectors</h2>
<p>Any weakness in a system which may compromise confidentiality, integrity or availability of information without the user’s knowledge may be termed a vulnerability. A vulnerability can be termed an infection vector if it is exploited by threat actors to compromise devices and spread infections.</p>
<p>As with other heterogeneous devices, non-socially-engineered infection vectors in routers can be divided into three broad categories:</p>
<ul>
<li>System misconfiguration</li>
<li>Known unpatched vulnerabilities</li>
<li>Zero-day vulnerabilities</li>
</ul>
<p>Exploitable vulnerabilities on a router can be present in different layers:</p>
<ul>
<li>Web interface: there are vulnerabilities present in the default web interface of the device which may lead to information leakage or allow adversaries to execute arbitrary code remotely.</li>
<li>Services accessible over a network: there are vulnerabilities present in network services executing on the device which may be identified/exploited as a result of allowing direct communication with the service without proper validation and access control.</li>
<li>Services accessible locally on the device: there are vulnerabilities present in services executing on the device, accessible locally only through the web interface or network-exposed service.</li>
</ul>
<p>In this section we will focus on different categories of infection vectors with a discussion of how these vulnerabilities have been exploited in the past.</p>
<p> </p>
<h3><a class="chapter" name="h3-21-system-misconfiguration"></a>2.1 System misconfiguration</h3>
<p>System misconfiguration is one of the most easily exploitable vulnerabilities that threat actors target. This includes issues such as the use of default and easily guessable passwords, and exposed services and ports. Despite all the awareness being created around this issue, it is still common to identify and attribute attacks to system misconfiguration.</p>
<p> </p>
<h4><a class="chapter" name="h4-case-study-default-credentials"></a>Case study: Default credentials</h4>
<p>The Mirai botnet can serve as an excellent case study for system misconfiguration. It targets devices that use default access credentials for common and well-known services exposed to the Internet. The Mirai source code originally included 61 hard-coded username and password pairs in clear text (Figure 1).</p>
<p> <img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/110dc6b930a2ca86c20b7c2f03f6fba0_f4105.jpg" alt="Figure-1-resize.jpg" width="843" height="391" /></p>
<p class="centered-caption">Figure 1: Hard-coded passwords in Mirai source code (Scanner.c) [<a href="#A1">A1</a>]<a href="#footnote1"><sup>1</sup></a>.</p>
<p>But this was back in 2016. With time, threat actors have evolved their strategies. Nowadays, Mirai variants have extended the credential list to be able to target more devices, and have encoded the list to prevent easy analysis. These variants also include code to exploit vulnerabilities in heterogeneous devices across architectures to spread the infection more aggressively.</p>
<p> </p>
<h3><a class="chapter" name="h3-22-known-unpatched-vulnerabilities"></a>2.2 Known unpatched vulnerabilities</h3>
<p>Malware authors are targeting known unpatched vulnerabilities to get a hold of the device. There are two main reasons why this works: vendors have ignored patching the vulnerabilities for various business reasons, and the majority of users have traditionally never cared enough to install updates/patches on the device. There have also been cases wherein the patch provided by the vendor was insufficient to fix the underlying issue.</p>
<p> </p>
<h4><a class="chapter" name="h4-case-study-upnp"></a>Case study: UPnP</h4>
<p>Universal Plug and Play (UPnP) is a protocol that allows devices connected to a network to discover and communicate with each other. UPnP-enabled devices, once connected to any network, broadcast a UPnP service discovery request to 239.255.255.250:1900 (Figure 2).</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/7a12fe687913b6b0e6fb38ad416325ea_f4106.png" alt="Figure-2.png" width="700" height="217" /></p>
<p class="centered-caption">Figure 2: UPnP discovery message over port 1900.</p>
<p>In 2006, Armijn Hemel identified and reported issues with the implementation of the UPnP protocol allowing internal and external forwarding/port mapping and command execution on the router [<a href="#ref2">2</a>]. In 2013, a security advisory was released reporting a vulnerability in <em>Broadcom</em> UPnP software’s SetConnectionType module [<a href="#ref3">3</a>]. At the time of writing this paper, there are still 281,518 vulnerable devices present over the Internet (Figure 3).</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/398efd4bf7e5494ee8e35a2ead49e1bc_f4107.png" alt="Figure-3.png" width="800" height="742" /> <span class="centered-caption">Figure 3: UPnP vulnerable devices (source: Shodan).</span></p>
<p>In 2018, two different pieces of malware, BCMUPnP_Hunter and UPnProxy, were reported to be exploiting this vulnerability to compromise devices.</p>
<p>Using a single exploit, BCMUPnP_Hunter was able to compromise 116 devices from multiple vendors [<a href="#ref4">4</a>]. Figure 4 shows strings in BCMUPnP_Hunter malware used to exploit the UPnP vulnerability. The initial request is sent to the target over port 5341, and if the router accepts the connection, port 1900 is checked and, if enabled, the vulnerability in the SetConnectionType module is exploited to gain access to the device.</p>
<p><a class="zoom-img" title="Figure 4: Snippet of strings present in BCMUPnP_Hunter sample [A2]." href="/files/5915/7365/1138/Figure-4.png"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/6b79d541e457617ca05054c09057ce57_f4108.png" alt="Figure-4.png" width="840" height="227" /></a></p>
<p class="centered-caption">Figure 4: Snippet of strings present in BCMUPnP_Hunter sample [<a href="#A2">A2</a>].</p>
<p>Different variants of the UPnProxy malware were observed in the wild. Initial variants configured the proxy using the UPnP vulnerability for Network Address Translation (NAT) injection. A more recent version had the ability to expose Server Message Block (SMB) ports (139 &amp; 445) from the device in order to compromise them with the Eternal Blue SMB exploit. This showcases how malware on heterogeneous devices across platforms has the potential to wreak havoc.</p>
<p> </p>
<h3><a class="chapter" name="h3-23-zero-day-vulnerabilities"></a>2.3 Zero-day vulnerabilities</h3>
<p>With the presence of routers in every home and corporate environment, finding a zero-day which will compromise thousands of devices would be hitting the jackpot for cybercriminals. N-day vulnerabilities are those that are identified by analysing the security patch released by vendors to fix them. The observed trend suggests that threat actors are investing time and effort in identifying and exploiting zero-day and new n-day vulnerabilities. The time delay between the release of a patch and it actually being applied by the user provides a threat actor with a lot of opportunities.</p>
<p> </p>
<h2><a class="chapter" name="h2-3-vulnerabilities"></a>3. Vulnerabilities</h2>
<p>In this section we will discuss three reported router vulnerabilities, two of which are being exploited by malware to compromise devices.</p>
<p> </p>
<h3><a class="chapter" name="h3-31-cve-2018-14847"></a>3.1 CVE-2018-14847</h3>
<p>CVE-2018-14874 in <em>MikroTik</em> routers was one of the most exploited vulnerabilities in 2018. <em>MikroTik</em> is a networking device vendor based in Latvia, and the developer of the <em>RouterOS</em> software and <em>RouterBOARD</em> hardware. In April 2018, <em>MikroTik</em> patched an arbitrary file read/write vulnerability present in <em>MikroTik</em> <em>RouterOS</em> versions 6.29 through to 6.42. Throughout 2018 and up to the time of writing this paper, malware has been reported to be exploiting this vulnerability to compromise devices and distribute Coinhive cryptominers. There are still 40,000+ vulnerable devices around the world (Figure 5).</p>
<p> <img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/fb28ec9a679c5897e2484d8c5a38f749_f4109.png" alt="Figure-5.png" width="800" height="630" /><span class="centered-caption">Figure 5: Vulnerable MikroTik devices (source: Shodan).</span></p>
<p><em>MikroTik</em> ships ‘WinBox’, a <em>Windows</em> client for management of <em>MikroTik</em> devices, which connects to <em>RouterOS</em> over TCP port 8291 (Figure 6). WinBox provides a GUI and command line interface for remote configuration and management of devices.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/f6e8c4f31730eea01f00f17d783d6613_f4110.png" alt="Figure-6.png" width="800" height="687" /></p>
<p class="centered-caption">Figure 6: MikroTik WinBox interface.</p>
<p>In <em>RouterOS</em>, ‘mproxy’ is the service responsible for handling requests over the WinBox port. ‘mproxy’ is a <em>Linux</em> executable which executes with support from various shared object files, most importantly libumsg.so and libubox.so. Figure 7 shows the output of a netstat command, showing the ‘mproxy’ service attached to port 8291.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/7ad61a28287270f4030038f0ff87b9fc_f4111.png" alt="Figure-7.png" width="800" height="49" /> <span class="centered-caption">Figure 7: ‘mproxy’ service listening on port 8291.</span></p>
<p> </p>
<h4><a class="chapter" name="h4-test-environment-details"></a>Test environment details</h4>
<p>For analysis, we used <em>RouterOS 6.39.3</em> (bugfix) to set up a router on a <em>VirtualBox</em> VM. A VM hosting <em>Ubuntu 16.04</em> with Python 2.7.12 was used to interact with the device. We used Mikrotik_tools [<a href="#ref5">5</a>] to jailbreak and get telnet access to the device in order to set up a remote debugging server. <em>GDBServer</em> for i686 [<a href="#ref6">6</a>] was attached to the ‘mproxy’ service and executed. GDB 7.11.1 with Python Exploit Development Assistance (PEDA) [<a href="#ref7">7</a>] was used to connect to <em>GDBServer</em> remotely.</p>
<p> </p>
<h4><a class="chapter" name="h4-analysis"></a>Analysis</h4>
<p><em>RouterOS</em> uses its unique message format to interact with WinBox. A detailed analysis of the WinBox message format along with communication over the WinBox port to exploit the CVE-2018-14847 vulnerability was presented at DerbyCon 2018 [<a href="#ref8">8</a>]. In this paper, however, we shall focus on how the input is passed and processed at runtime by executing a part of the script extracted from the malware that exploits CVE-2018-14847 to read user data from the device. We shall continue our detailed discussion on the workings of the malware later in this section. Multiple proof of concepts (PoCs) have been published since the release of the patch from <em>MikroTik</em> [<a href="#ref9">9</a>, <a href="#ref10">10</a>].</p>
<p>During static analysis of the ‘mproxy’ service, interesting strings were observed, which were accessed during execution of file open system calls used to access files for reading and writing, as we will discuss later in this section (Figure 8).</p>
<p><a class="zoom-img" title="Figure 8: Snippet of strings from ‘mproxy’ service." href="/files/5615/7365/1515/Figure-8.png"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/bf454f25a8f46b98d0db8d528a7bf211_f4112.png" alt="Figure-8.png" width="840" height="233" /></a></p>
<p class="centered-caption">Figure 8: Snippet of strings from ‘mproxy’ service.</p>
<p> <img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/9908dbe24b544efd5b44199443d6abe6_f4113.png" alt="Figure-9.png" width="840" height="52" /></p>
<p class="centered-caption">Figure 9: Function call in malware.</p>
<p>Figure 9 shows the function call in the script which is trying to read <em>/flash/rw/store/user.dat</em>. User.dat contains encoded user credentials for device access.</p>
<p>Executing this script with a debugger attached to the mproxy service, we were able to identify the string passed as input. As can be seen in Figure 10, no filtering or validation has been performed on the device during the input operation, resulting in special characters being passed as input.</p>
<p class="centered-caption"> <a class="zoom-img" title="Figure 10: Input string as seen during remote debugging." href="/files/3315/7365/1607/Figure-10.png"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/7c703d19465ce07482cb0af5b647a5d8_f4114.png" alt="Figure-10.png" width="840" height="177" /></a>Figure 10: Input string as seen during remote debugging.</p>
<p>‘/home/web/webfig’ is the hard-coded directory value which will be read during the file read operation (as seen in Figure 8). The input received is processed, and this hard-coded value is prepended at the beginning of the string to complete the file path to be read (Figure 11).</p>
<p><a class="zoom-img" title="Figure 11: File path to be read as seen during remote debugging." href="/files/9615/7365/1658/Figure-11.png"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/3750c53407a177d08955e87b9446cecf_f4115.png" alt="Figure-11.png" width="840" height="152" /></a></p>
<p class="centered-caption">Figure 11: File path to be read as seen during remote debugging.</p>
<p>Once the string is updated, the ‘mproxy’ service checks if the file being accessed is a ‘.json’ or ‘.backup’ file by making a call to the isSensitiveFile() function. This function compares the extension of the file being accessed and allows or denies access. If the requested file is a sensitive file, access is denied, and the executed script fails.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/4fbf75eb00c4d8c6c1415003515b2578_f4116.png" alt="Figure-12.png" width="700" height="207" /></p>
<p class="centered-caption">Figure 12: File extension is compared to .json and .backup.</p>
<p>If the accessed file is not sensitive, the file path is passed to the open system call (Figure 13) and the file read is successful. No check is performed to validate access to the file path that is requested for access.</p>
<p>The open system call argument is as follows:</p>
<pre>‘/home/web/webfig//////./..//////./..//////./../flash/rw/store/user.dat’</pre>
<p> <img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/441430dac549ae98ff17c528aacce8f1_f4117.png" alt="Figure-13.png" width="840" height="207" /></p>
<p class="centered-caption">Figure 13: Arguments passed to open system call.</p>
<p>To summarize CVE-2018-14847, since insufficient validation is performed on the device during reading and processing input, the file name string passed as an argument with special characters to an open system call will lead to directory traversal, hence allowing arbitrary file read on the device, and thus information disclosure.</p>
<p>Another issue which allowed the abuse of <em>MikroTik</em> devices is the use of weak password encoding using the hash of username and the known salt ‘283i4jfkai3389’ while storing user credentials [<a href="#ref11">11</a>]. Details accessed from the user.dat file can easily be decoded using the logic shown in Figure 14.</p>
<p class="monospace" style="text-align: center;">key = md5(&lt;username&gt; + 283i4jfkai3389)<br />clear_text_password ^ key = encrypted_password</p>
<p class="centered-caption"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/7846c1365b4c78505e9b349f4a42e0bf_f4118.png" alt="Figure-14.png" width="460" height="167" />Figure 14: Function to decode user password present in analysed sample.</p>
<p> </p>
<h4><a class="chapter" name="h4-case-study"></a>Case study</h4>
<p>A piece of malware [<a href="#A3">A3</a>] (a <em>Windows</em> PE binary) was reported in the wild exploiting the discussed vulnerability by disguising itself as a browser update for <em>Windows</em> [<a href="#ref12">12</a>]. Upon successful execution, this malware would connect to a <em>MikroTik</em> router over TCP port 8291 to compromise the device and inject the Coinhive cryptominer link when any HTTP request is made.</p>
<p>Coinhive has discontinued its operations as of 8 March 2019 (Figure 15).</p>
<p><a class="zoom-img" title="Figure 15: Discontinuation of Coinhive." href="/files/4315/7365/1972/Figure-15.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/a649b13ddc9c95a3a83cae64fc8b03d5_f4119.png" alt="Figure-15.png" width="830" height="592" /></a><span class="centered-caption">Figure 15: Discontinuation of Coinhive.</span></p>
<p>During static analysis of the sample we observed strings suggesting that the file has been created using Python (Figure 16), and that the file is packed with UPX.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/480c244ab869651e19b569952e6fb641_f4120.png" alt="Figure-16.png" width="400" height="513" /><span class="centered-caption">Figure 16: Strings in malware binary showing use of Python.</span></p>
<p>The unpacked file seems to be an installer with an alert box hard coded to display a fake error message. We also observed random DNS requests for ‘hxxp://iplogger.co/xxxxxx’, which was not available at the time of writing. Extracting the Python SFX installer and decompiling the resulting Python compiled code (.pyc) file, we obtained two interesting files:</p>
<ul>
<li>upd_browser.py</li>
<li>ups.py (imported by upd_broswer.py)</li>
</ul>
<p>Analysis of these files provided us with the following information:</p>
<ul>
<li>There is a hard-coded IP in ups.py, which resolves to Russia (still alive as of 9 May 2019) (Figure 17).</li>
</ul>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/dbd8187890347d10c07e2ac6bf4cdf9f_f4121.png" alt="Figure-17.png" width="400" height="95" /> <span class="centered-caption">Figure 17: Hard-coded IP address.</span></p>
<p>The sample initiates a request to read ‘<span class="monospace">/////./..//////./..//////./../flash/rw/store/user.dat</span>’, which, as already discussed, stores user credentials.</p>
<p>The sample initiates a request to write to scheduler files. As you might expect, these files are responsible for scheduling the scripts to execute (Figure 18).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/91d6aeac07b348d83ca79c1d512fb25b_f4122.png" alt="Figure-18.png" width="500" height="54" /> <span class="centered-caption">Figure 18: Files write request.</span></p>
<p>The sample contains <em>RouterOS</em> terminal commands as part of the script ‘sh113’ which will be uploaded to the device using scheduler.dat, and scheduled to execute automatically eight minutes after device startup (Figures 19, 20).</p>
<p class="centered-caption"><a class="zoom-img" title="Figure 19: Snippet from sh113 script." href="/files/8415/7365/2279/Figure-19.png"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/20f45b615213129ba9f138102f95df2d_f4123.png" alt="Figure-19.png" width="800" height="114" /></a>Figure 19: Snippet from sh113 script.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/ef4982ff0985ac8148cc3072e8f49a5c_f4124.png" alt="Figure-20.png" width="830" height="581" /> <span class="centered-caption">Figure 20: Scheduled script.</span></p>
<p>Detailed analysis of behavioural and structural changes on the device will be discussed in <a href="#h4-521-cve-2018-14847">section 5.2.1</a>.</p>
<p>Following successful infection of the device, every time a user tries to access any web page (HTTP), the router would serve a page which contains the Coinhive miner. The requested page is loaded within a frame (Figure 21), and the Coinhive miner would start computation abusing the user’s system resources.</p>
<p><a class="zoom-img" title="Figure 21: Source code of HTML page served." href="/files/1715/7365/2399/Figure-21.png"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/704d2041e6d8cd2022d7e928e5400028_f4125.png" alt="Figure-21.png" width="830" height="128" /></a></p>
<p class="centered-caption">Figure 21: Source code of HTML page served.</p>
<p> </p>
<h3><a class="chapter" name="h3-32-cve-2019-1652"></a>3.2 CVE-2019-1652</h3>
<p><em>Cisco RV</em> series routers are relatively low-cost small business networking devices which provide reliable and secure connectivity out-of-the-box.</p>
<p>CVE-2019-1652 is a vulnerability present in firmware version 1.4.2.15 on the <em>Cisco RV 32*</em> series of business routers. It was identified and reported in January 2019 [<a href="#ref13">13</a>]. This vulnerability allows an authenticated adversary to execute commands remotely on the device. Another vulnerability in the same device, CVE‑2019-1653, allows an adversary to access configuration files without authentication. These two vulnerabilities, combined together, have been demonstrated to give control of a compromised device to an unauthenticated remote attacker. There is no known malware exploiting CVE-2019-1652 at the time of writing this paper. However, researchers have published a PoC [<a href="#ref14">14</a>] based on the vulnerability disclosure report [<a href="#ref13">13</a>] demonstrating its impact. <em>Cisco</em> patched the reported vulnerability in firmware version 1.4.2.20, but this patch was not the complete fix as we will discuss in the analysis below.</p>
<p>The <em>Cisco RV32*</em> series of routers allow users to generate self-signed certificates on the device by accessing the Certificate Management -&gt; Certificate Generator page (Figure 22).</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/ba41343957d712b57f8b1d1aef3cfb41_f4126.png" alt="Figure-22.png" width="830" height="580" /><span class="centered-caption">Figure 22: Cisco certificate generation page.</span></p>
<p> </p>
<h4><a class="chapter" name="h4-test-environment-details"></a>Test environment details</h4>
<p>We used patch diffing to analyse <em>Cisco RV 320</em> firmware version RV32X_v1.4.2.15 and RV32X_v1.4.2.20.</p>
<p> </p>
<h4><a class="chapter" name="h4-analysis"></a>Analysis</h4>
<p>Firmware was extracted using <em>Binwalk</em> [<a href="#ref15">15</a>]. The extracted firmware was observed to be using the <em>cramfs</em> [<a href="#ref16">16</a>] root file system and <em>nginx</em> [<a href="#ref17">17</a>] web server with CGI enabled. On further analysing HTML pages available in the web server root directory, we observed that these pages are using a custom Server Side Includes (SSI) command, nk_get, implemented with the help of ssi.cgi, a script located in the cgi-bin directory.</p>
<p>When the user accesses ‘Certificate Generator’ via the web interface, self_generator.htm is loaded in the browser. Client-side input validation has been implemented using JS on this page (Figure 23). When user clicks ‘Save’, the input is validated and submitted to certificate_handle2.htm.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/022267cdc60214208e38e0f38dc71677_f4127.png" alt="Figure-23.png" width="800" height="96" /><span class="centered-caption">Figure 23: Client-side input validation.</span></p>
<p>The ssi.cgi file contains a function of interest, NK_UiSelfGenCert(), which reads the data passed from self_generator.htm using NK_query_entry_get() into local variables and passes them on to an openssl command to be executed on the system. Figure 24 shows a string being constructed to use an openssl command along with arguments passed to it. This string is passed to a system() call to be executed as a terminal command.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/a672fce7447476ad03fc3f927258a433_f4128.png" alt="Figure-24.png" width="840" height="140" /></p>
<p class="centered-caption">Figure 24: Code snippet showing openssl command in ssi.cgi.</p>
<p>On analysing ssi.cgi, we did not find any evidence of server-side input validation. Absence of server-side validation allows an adversary to pass parameters with special characters by bypassing the browser.</p>
<p>When a <em>Linux</em> command is passed in the Common Name (CN) field, bypassing the input validation checks on the browser, the command is executed on the device terminal. Clearly, the ssi.cgi script present on the device is not validating input to the server properly, thus allowing command injection.</p>
<p>On comparing two interesting files, ssi.cgi and nginx.conf, in both versions of firmware, we observed the following differences implemented in order to prevent exploitation of this vulnerability:</p>
<p style="padding-left: 30px;">1. Check for <em>CN</em> value in ssi.cgi file: Figures 25 and 26 show snippets of decompiled code from NK_UiSelfGenCert() in the ssi.cgi file. As can be seen, the updated version has a check to validate for a <em>non-null</em> value of CN before proceeding with the openssl command execution. The same check has been implemented in the NK_GenCertForOPENVPN() function as well.</p>
<p> <img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/4115/7365/3595/Figure-25.png" alt="Figure-25.png" width="591" height="365" /></p>
<p class="centered-caption">Figure 25: Code snippet from ssi.cgi NK_UiSelfGenCert function call in firmware v1.4.2.15.</p>
<p> <img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/9515/7365/3622/Figure-26.png" alt="Figure-26.png" width="566" height="381" /></p>
<p class="centered-caption">Figure 26: Code snippet from ssi.cgi NK_UiSelfGenCert function call in firmware v1.4.2.20.</p>
<p style="padding-left: 30px;">2. In nginx.conf, the configuration was updated to block messages with HTTP agent ‘CURL’ (Figure 27). The short-term implemented fixes can easily be bypassed to exploit the vulnerability [<a href="#ref13">13</a>], which has been patched in later versions of the firmware.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/3415/7365/3651/Figure-27.png" alt="Figure-27.png" width="608" height="205" /></p>
<p class="centered-caption">Figure 27: Snippet from nginx.conf file showing check for CURL user agent.</p>
<p> </p>
<h4><a class="chapter" name="h4-case-study"></a>Case study</h4>
<p>At the time of writing this paper, no malware has yet been reported to exploit CVE-2019-1652. For the case study, we analysed the PoC available on <em>GitHub</em> [<a href="#ref14">14</a>] exploiting this vulnerability. Since this is an authenticated remote code execution vulnerability, the adversary initially needs to establish a session with the router. This can be achieved using credential brute-force, if easily guessable or default passwords are used, or by exploiting CVE-2019-1653, which allows unauthenticated access to the configuration files on the device, thus allowing an adversary to gain access to the device’s authentication details.</p>
<p>Once a session is established, an HTTP post request is sent to certificate_handle2.htm with data that will be passed as parameters to an openssl command. Figure 28 shows a POST request being sent to the router. The command to be executed on the device terminal is passed as a payload via the common_name parameter.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/9315/7365/3695/Figure-28.png" alt="Figure-28.png" width="535" height="399" /> <span class="centered-caption">Figure 28: Snippet from PoC showing vulnerability exploitation (source: [<a href="#ref14">14</a>]).</span></p>
<p>This command execution will be blind, i.e. no output will be received in response to the executed command. For vulnerability reporting, researchers executed the ping command on the device and observed network traffic to confirm the vulnerability.</p>
<p>Behavioural and structural changes on the device post exploitation will be discussed briefly in <a href="#h4-522-cve-2019-1652">section 5.2.2</a>.</p>
<p> </p>
<h3><a class="chapter" name="h3-33-cve-2018-10561"></a>3.3 CVE-2018-10561</h3>
<p><em>Dasan Zhone Solutions</em> (<em>DZS</em>) is a network access solution provider based in California.</p>
<p>CVE-2018-10561 is a web interface vulnerability reported in <em>DZS GPON ZNID-GPON-25XX</em> series routers in 2018, which allows adversaries to bypass authentication in the web interface of the router [<a href="#ref18">18</a>]. Another vulnerability, CVE-2018-10562, allows adversaries to inject and execute a terminal command on the device. These two vulnerabilities, when used together, may allow an unauthenticated adversary to control the device remotely. Well-known malware families such as Satori have been identified in the wild exploiting this vulnerability to compromise devices and spread infections.</p>
<p>CVE-2018-10561 allows adversaries to bypass authentication by appending a string ‘?images/’ at the end of the accessed URL in the POST request. Figure 29 shows a code snippet from a Satori sample [<a href="#A4">A4</a>] sending a POST request to ‘?GponForm/diag_Forms?images/’. This will allow an adversary to bypass authentication and access the diag_Forms page via the web interface. This vulnerability seems to be the result of inadequate handling of HTTP POST requests on the server when an improper Universal Resource Identifier (URI) is passed.</p>
<p>The data part of the POST request consists of a wget command to download a malicious script to the /tmp directory (Figure 29). These commands are concatenated to the dest_host parameter being passed to the ping command available as a feature for network diagnostics. This leads to a command injection vulnerability (CVE-2018-10562). Further requests will be used to execute the malicious script on the device.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/2615/7365/3756/Figure-29.png" alt="Figure-29.png" width="638" height="368" /> <span class="centered-caption">Figure 29: Snippet from Satori sample [<a href="#A4">A4</a>].</span></p>
<p>As a result of CVE-2018-10561, an unauthenticated remote adversary can access the management web interface of the device. Further, combining this with CVE-2018-10562, an unauthenticated remote adversary can download and execute malicious scripts compromising and taking control of the device.</p>
<p>Behavioural and structural changes on the device will be discussed briefly in <a href="#h4-523-cve-2018-10561">section 5.2.3</a>.</p>
<p> </p>
<h2><a class="chapter" name="h2-4-common-malicious-operations-compromised-routers"></a>4. Common malicious operations on compromised routers</h2>
<p>Once a device has been compromised, threat actors use the device for various malicious operations. In the case of routers, these operations result in a greater threat since a single router may be connected to and handle traffic from hundreds of users within an organization.</p>
<p>Shown below is a list of malicious operations that compromised devices typically perform, and their impact:</p>
<p style="padding-left: 30px;"><strong>a. Botnet<br /></strong>As discussed earlier in the paper, creating and maintaining a botnet of routers is easy due to the inherent ease with which vulnerabilities can be exploited and the lack of proper device management. Malware that compromises devices to make them part of a botnet usually has the capability to act based on the commands received. The modular development approach observed in recent malware samples allows threat actors to add and remove such functionality on the fly.<br /><br />These botnets can be used for multiple operations, ranging from DDoS attacks to establishing a proxy chain to route traffic and send spam mails. The Mirai botnet gained infamy for its ability to generate traffic in terabytes/seconds in order to carry out lethal DDoS attacks.<br /><br /><strong>b. Exfiltration of data<br /></strong>Data exfiltration is one of the most serious security issues. There have been instances of malware on <em>Windows</em> and <em>Linux</em> systems trying to collect and send sensitive data from within the network to command-and-control (C&amp;C) infrastructure.<br /><br />With router malware, this threat becomes more consequential since there is typically no security layer or device present between the router and the outside world which could identify occurrences of such leaks. Additionally, if the security of websites is not properly configured, browsers cannot identify if there is any Man-in-the-Router siphoning off of data.<br /><br /><strong>c. Distribution of malicious links<br /></strong>Since infected devices have access to all the traffic flowing in and out of the network, they can manipulate traffic to distribute or redirect users to malicious content.</p>
<ol style="list-style-type: lower-alpha;">
<ul>
<li>Modify DNS: Malware such as DNSChanger updates the DNS settings of the device it compromises to point to a malicious DNS. These are then used to serve up infected and phishing web pages.</li>
<li>Distribute Coin miner: One such case has already been discussed in section 2.3.1, where the router was compromised and coin miners were distributed to all users accessing web pages via HTTP.</li>
</ul>
</ol>
<p style="padding-left: 30px;"><strong>d. Proxy</strong><br />Having access to all the traffic allows compromised devices to also act as a proxy and to monitor data. To capture encrypted data, modules to strip SSL connections are used, allowing threat actors to access data in clear text. A properly configured website with HTTP Strict Transport Security (HSTS) enabled can prevent the leaking of data to such adversaries.</p>
<ol style="list-style-type: lower-alpha;">
<ul>
<li>Active proxy: As the name suggests, in an active proxy, a compromised device can modify data which is flowing through. This can be used to distribute malicious content and links or redirect users to malicious websites.</li>
<li>Passive proxy: In this case a compromised device may not modify data flowing through, but can monitor and siphon off sensitive data.</li>
</ul>
</ol>
<p> </p>
<h2><a class="chapter" name="h2-5-iocs-and-behavioural-changes"></a>5. IoCs and behavioural changes</h2>
<p>Now that we have seen different vulnerabilities and how these vulnerabilities allow threat actors to compromise devices to perform malicious operations, let’s discuss some common IoCs and behavioural changes observed on these compromised devices.</p>
<p> </p>
<h3><a class="chapter" name="h3-51-expected-behaviour-router"></a>5.1 Expected behaviour of a router</h3>
<p>Routers are devices working at the network layer to forward packets from different types of networks. Practically, over the years, several other functionalities have been added to the router device available on the market today, but its core functionalities have remained the same throughout its lifetime.</p>
<p>The following is a list of expected functionalities and behaviours of a router:</p>
<ul>
<li>Be able to inspect destination address in the packet IP header and forward the packet to the correct network.</li>
<li>Be secure against network attacks.</li>
<li>Maintain an availability of 99% and above, and avoid restarting without an explicit command issued by the administrator.</li>
<li>Avoid reading and modifying content of data field of packets passing through, which would affect the confidentiality and integrity of the communication channel.</li>
</ul>
<p>A compromised router tends to deviate from at least one of the above behaviours.</p>
<p> </p>
<h3><a class="chapter" name="h3-52-behavioural-and-structural-changes"></a>5.2 Behavioural and structural changes</h3>
<h4><a class="chapter" name="h4-521-cve-2018-14847"></a>5.2.1 CVE-2018-14847</h4>
<p>On successful exploitation, scripts uploaded to a compromised <em>MikroTik</em> router perform the following modifications to the device:</p>
<ul>
<li>Enable web proxy on port 8080 and configure the device firewall to forward incoming requests for port 80 to the web proxy.</li>
<li>Update DNS servers on the router.</li>
<ul style="list-style-type: circle;">
<li>94.247.X.X - resolving to Germany</li>
<li>107.172.X.X - resolving to USA</li>
<li>128.52.X.X - resolving to USA</li>
<li>163.53.X.X - resolving to Australia</li>
<li>185.208.X.X - resolving to Netherlands</li>
</ul>
<li>Update NTP servers on the router</li>
<ul style="list-style-type: circle;">
<li>88.147.X.X - resolving to Russia</li>
<li>88.147.X.X - resolving to Russia</li>
</ul>
<li>Add scheduler script Upd111, which will check for connections to the URL hxxp://iplogger.co/1xxxx6 on device startup.</li>
<li>Add scheduler script Upd112 to remove the original script ‘sh113’ on startup.</li>
<li>Add scheduler script Upd113 to create a file called u113.rcs with the data fetched from one of the following URLs:</li>
<ul style="list-style-type: circle;">
<li>hxxp://min01[.]com:31416/min01?key={keybase58}&amp;part={part}\\</li>
<li>hxxp://mikr0tik[.]com:31416/mikr0tik?key={keybase58}&amp;part={part}\\</li>
<li>hxxp://up0[.]bit:31416/up0?key={keybase58}&amp;part={part}\\</li>
</ul>
<li>Add scheduler script Upd114, which will check the connection to the URL</li>
<li>hxxp://iplogger.co/1xxxx6 every 12 hours.</li>
</ul>
<p>Figure 30 shows all scheduled scripts.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/45cbe7322bcdb00702642e8e9a7fac54_f4134.png" alt="Figure-30.png" width="840" height="175" /></p>
<p class="centered-caption">Figure 30: Scheduled scripts post device reboot.</p>
<ul>
<li>Create a web proxy error page which will serve the Coinhive miner every time a user requests a web page (Figure 31). Whenever a user tries to access an HTTP page this page is served up, which initializes the Coinhive miner operation on the accessing user’s device.</li>
</ul>
<p><a class="zoom-img" title="Figure 31: HTML page that will be served to the user." href="/files/3315/7365/5017/Figure-31.png"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/7f5ba9bcdbe780c15f17b724b2976071_f4135.png" alt="Figure-31.png" width="830" height="131" /></a> <span class="centered-caption">Figure 31: HTML page that will be served to the user.</span></p>
<p> </p>
<h4><a class="chapter" name="h4-522-cve-2019-1652"></a>5.2.2 CVE-2019-1652</h4>
<p>Researchers have demonstrated that, upon successful exploitation of CVE-2019-1652, terminal commands such as cat, ping and telnetd can be executed.</p>
<p>Successful execution of the telnetd command means an adversary can enable access to the telnet port, and upload and execute malicious scripts by connecting to it, resulting in remote control of the device. As we have already seen in the case of CVE-2018-14874, once an adversary has access to a device to upload and execute a script, it becomes effortless to carry out malicious operations. At the time of writing, we are not aware of the extent to which commands can be executed on the limited shell on <em>Cisco RV 32*</em> series routers.</p>
<p> </p>
<h4><a class="chapter" name="h4-523-cve-2018-10561"></a>5.2.3 CVE-2018-10561</h4>
<p>This vulnerability allows a remote attacker to bypass authentication to access the web management interface of a router device. It allows an attacker to control the device and its configuration, and to recruit it as a part of a botnet to spread infections and carry out other malicious operations discussed in the previous section.</p>
<p> </p>
<h3><a class="chapter" name="h3-53-indicators-compromise"></a>5.3 Indicators of compromise</h3>
<p>In case of routers and security products, we can classify IoCs into two categories.</p>
<p> </p>
<h4><a class="chapter" name="h4-531-indicators-can-be-identified-non-intrusive-security-product"></a>5.3.1 Indicators that can be identified by a non-intrusive security product</h4>
<p>These are indicators that can be identified by a security product without installing any agent on the device by correlating data from security products installed on heterogeneous devices on the network:</p>
<ul>
<li>Router restarting without command issued by administrator: when there is no connection established to the device from the administrator’s system over specific ports, and yet the device restarts.</li>
<li>Router distributing malicious code: this can be identified if there are multiple detections at the browser level for similar malicious activity/infections, across user devices and websites.</li>
<li>Traffic getting routed through malicious DNS servers: this can be identified if websites are continuously being redirected to malicious/phishing URLs.</li>
<li>Network traffic analysis: if there is a flow of traffic between the router and the endpoint device over non-standard ports.</li>
<li>Browser giving a warning about a MitM kind of attack: newer versions of browsers give a warning if the connection is not secure.</li>
</ul>
<p> </p>
<h4><a class="chapter" name="h4-532-indicators-can-be-identified-intrusive-security-product"></a>5.3.2 Indicators that can be identified by an intrusive security product</h4>
<p>These are indicators that can be identified by a security agent installed on the router:</p>
<ul>
<li>Access made to the router from an external IP address: when the device is accessed from an external IP address as a result of exposed ports/services.</li>
<li>Access to arbitrary file location: when file-access to any arbitrary location is made.</li>
<li>Enabling/disabling of services.</li>
<li>Presence of scheduled tasks.</li>
<li>Presence of scripts to check connectivity with external server.</li>
</ul>
<p> </p>
<h2><a class="chapter" name="h2-6-detection-methods"></a>6. Detection methods</h2>
<p>Before getting into the discussion of a generic detection approach, let’s discuss the internals of two existing solutions implemented by security vendors.</p>
<p> </p>
<h3><a class="chapter" name="h3-61-existing-solutions"></a>6.1 Existing solutions</h3>
<h4>VPNFilter Checker [<a href="#ref19">19</a>]</h4>
<p><em>VPNFilter Checker</em> is a security tool used to identify if a router has been infected by VPNFilter malware.</p>
<p>VPNFilter is a multi-stage and modular malware with versatile capabilities. It maintains persistence through the reboot by adding itself to crontab and job scheduler. It operates with a C&amp;C server via Tor or SSL connections. Most of the strings are encrypted to be decrypted at runtime with RC4. After initialization, it starts to download images from the fed URLs. It fetches the server’s IP address through the metadata of the first image in the album it’s referring to. The IP address is extracted from the geolocation coordinates (latitude, longitude fields) in the EXIF information.</p>
<p><a class="zoom-img" title="Figure 32: Strings in VPNFilter referring to Tor." href="/files/8915/7365/5216/Figure-32.png"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/6e386d5890f0ed6071d1cdbaa933c7ed_f4136.png" alt="Figure-32.png" width="840" height="593" /></a> <span class="centered-caption">Figure 32: Strings in VPNFilter referring to Tor.</span></p>
<p>It performs a second-stage download to set up its environment by creating a modules folder and a working directory. It reaches out to its C&amp;C server for the commands to execute on the compromised device. When the Tor module is installed, it connects to a hidden service (.onion domain) through a SOCKS5 proxy within the module (Figure 32).</p>
<p>In the third stage, the malware uses different plug-in modules for different architectures. One particular module, ‘ssler’, intercepts and redirects traffic destined for port 80 to listening port 8888. The ssler dumps all the interesting traffic sent by the client through ‘sslstripping’. When ssler makes a connection to a legitimate HTTP server, the response is also intercepted and altered, for example by changing the HTTPS instances in the location header to HTTP and removing headers like Vary, Content Security Policy (CSP), and Access-Control-Allow-Origin.</p>
<p>The vpnfilter check sends a request to a server and checks whether the response header ‘Vary’ has been tampered with by the ssler, since response headers like Vary and content-security-policy are stripped by ssler before forwarding the remaining headers to the client.</p>
<p>If the ‘Vary’ header is present then the device is not compromised (Figure 33).</p>
<p><a class="zoom-img" title="Figure 33: JS to check ‘Vary’ in HTTP header." href="/files/6615/7365/5417/Figure-33.png"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/c916983d88689f7a1149382773097ac3_f4137.png" alt="Figure-33.png" width="830" height="262" /></a></p>
<p class="centered-caption">Figure 33: JS to check ‘Vary’ in HTTP header.</p>
<p>Drawback: Obviously, since the script is only checking for the ‘Vary’ header field, if the malware is updated to modify other header values not affecting the Vary header, this solution would need to be updated to detect compromised devices.</p>
<p> </p>
<h4>Router DNS Checker [<a href="#ref20">20</a>]</h4>
<p>As already discussed, malware like DNSChanger compromises routers and updates their DNS entries to DNS servers controlled by threat actors, which redirect users to malicious and phishing domains.</p>
<p><em>DNS Checker</em> sends GET requests to the authoritative name server controlled by the creator of the security tool [<a href="#ref20">20</a>], which in response sends a URL with an API key to connect to. This URL consists of a randomly generated string concatenated with the server domain name (Figure 34).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/0e15af0d7fdc57f8038d9222a3c4d171_f4138.png" alt="Figure-34.png" width="840" height="69" /><span class="centered-caption"> Figure 34: DNSChecker URL to connect.</span></p>
<p>A DNS request is sent to the suggested URL (Figure 35). The name server captures the request and checks the DNS server which has requested the information. If the DNS server forwarding the request is blacklisted, the user will get a ‘compromised device’ alert.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/7755af5ac6a236fbf98d1e30d5b61018_f4139.png" alt="Figure-35.png" width="840" height="186" /></p>
<p class="centered-caption">Figure 35: DNS request for suggested URL.</p>
<p>Drawback: To identify if the router is compromised, the DNS server from which requests are being forwarded needs to be blacklisted. This solution would fail if the server is not already blacklisted. The response sent back contains a field, ‘verdict’, which will be set to ‘good’ if the router is not compromised. During our testing, we even got the response ‘uncertain’, which shows inefficiencies in the current implementation (Figure 36).</p>
<p><a class="zoom-img" title="Figure 36: ‘verdict: uncertain’ response." href="/files/5315/7365/5552/Figure-36.png"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/bccd621f9f8ad7c7c36ee104a955ef0c_f4140.png" alt="Figure-36.png" width="840" height="42" /></a></p>
<p class="centered-caption">Figure 36: ‘verdict: uncertain’ response.</p>
<p> </p>
<h3><a class="chapter" name="h3-62-proposed-solution"></a>6.2 Proposed solution</h3>
<p>We need a three-pronged attack to counter router malware: router vendors need to include security as a core part of design and development, users need to be alert and aware to install upgrades as and when available, and security products need to be developed with router security in mind.</p>
<p>Network device vendors need to include security as a part of their software development lifecycle. Vendors also need to follow the following policies:</p>
<ol>
<li>Force users to reset default passwords.</li>
<li>Follow strict password policies – special characters in passwords, regularly reset passwords.</li>
<li>Keep non-essential services disabled by default.</li>
</ol>
<p>For the proposed detection approach, we are making the following assumptions:</p>
<ol>
<li>Administrator’s IP is known and static.</li>
<li>Any communication addressed to the router on non-standard ports other than 80, 443 or router vendor-specific port like 8291, is considered suspicious.</li>
<li>Access to router’s management interface from an unknown IP is considered suspicious.</li>
<li>If the integrity of packets on standard ports with a predefined format is affected, this is considered suspicious.</li>
</ol>
<p>Security products need to be developed with the specific requirements of router security in mind.</p>
<p>A non-intrusive detection system needs to have the following components which will complement one another to detect and alert administrators (Figure 37):</p>
<ul>
<li>Module to continuously check for device availability: this module continuously polls the device at regular intervals and will alert the administrator of suspicious activity if the device is not available and no connection was made to the device from an administrator’s IP, i.e. in the process of rebooting.</li>
<li>Module to monitor traffic anomalies with regards to communication over non-standard ports: this module will alert on suspicious changes in traffic flow, for instance if there is traffic flow from and to the router on non-standard ports. For this to work, products need to have a list of standard ports on which communication takes place on the network.</li>
<li>Browser module to correlate alerts for:</li>
<ul style="list-style-type: circle;">
<li>Malicious websites alert on different machines and different websites: if the browser module on multiple machines is generating an alert for a malicious or phishing site, there is a high probability that traffic is being directed to a malicious DNS.</li>
<li>Browser alerts for MitM: modern browsers alert users if the connection between the client and the web server is not secure. A threshold can be set for such alerts, and if that threshold is exceeded, administrators can be alerted.</li>
<li>Malicious code and DNS detection on different machines and different websites: this module can request a web page from an AV-controlled server. Security products can perform integrity checks on various parts of the response to conclude if the response is being altered.</li>
</ul>
<li>Module to scan for default/weak passwords and vulnerability scan on the router to identify exposed services, when security product is first installed. This scan can be scheduled to execute regularly based on the organization’s security policy.</li>
</ul>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/3315/7365/5726/Figure-37.png" alt="Figure-37.png" width="625" height="411" /></p>
<p class="centered-caption">Figure 37: Proposed malware detection approach.</p>
<p>The proposed approach has certain obvious limitations and drawbacks. Security vendors would need to maintain a list of blacklisted websites and DNS servers. In addition, any such implemented system needs to be studied in depth for its performance impact and false positive risks, and fine-tuned to reduce both.</p>
<p> </p>
<h2><a class="chapter" name="h2-conclusion"></a>Conclusion</h2>
<p>This paper started with a discussion of infection vectors affecting routers. We then analysed three vulnerabilities in particular, and discussed how easily these can be exploited by threat actors. We also discussed the malicious operation of compromised devices, and IoCs and behavioural changes on the device. Finally, we discussed a proposed approach to alert administrators about a possible router infection.</p>
<p>Security is an ever-changing field, and with the identification of new techniques, the proposed approach will also need to evolve to protect end-users.</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] Krebs, B. Source Code for IoT Botnet ‘Mirai’ Released . <a href="https://krebsonsecurity.com/2016/10/source-code-for-iot-botnet-mirai-released/" target="_blank">https://krebsonsecurity.com/2016/10/source-code-for-iot-botnet-mirai-released/</a> (accessed: 25 April 2019).</p>
<p><a class=" anchor" name="ref2"></a>[2] UPnP. <a href="http://www.upnp-hacks.org/upnp.html" target="_blank">http://www.upnp-hacks.org/upnp.html</a> (accessed: 25 April 2019).</p>
<p><a class=" anchor" name="ref3"></a>[3] DefenseCode Security Advisory Broadcom UPnP Remote Preauth Code Execution Vulnerability. <a href="https://www.defensecode.com/public/DefenseCode_Broadcom_Security_Advisory.pdf" target="_blank">https://www.defensecode.com/public/DefenseCode_Broadcom_Security_Advisory.pdf</a> (accessed: 01 May 2019).</p>
<p><a class=" anchor" name="ref4"></a>[4] BCMPUPnP_Hunter: A 100k Botnet Turns Home Routers to Email Spammers. <a href="https://blog.netlab.360.com/bcmpupnp_hunter-a-100k-botnet-turns-home-routers-to-email-spammers-en/" target="_blank">https://blog.netlab.360.com/bcmpupnp_hunter-a-100k-botnet-turns-home-routers-to-email-spammers-en/</a> (accessed: 01 May 2019).</p>
<p><a class=" anchor" name="ref5"></a>[5] Mikrotik-tools. <a href="https://github.com/0ki/mikrotik-tools" target="_blank">https://github.com/0ki/mikrotik-tools</a> (accessed: 10 April 2019).</p>
<p><a class=" anchor" name="ref6"></a>[6] Embedded tools. <a href="https://github.com/rapid7/embedded-tools" target="_blank">https://github.com/rapid7/embedded-tools</a> (accessed: 10 April 2019).</p>
<p><a class=" anchor" name="ref7"></a>[7] PEDA. <a href="https://github.com/longld/peda" target="_blank">https://github.com/longld/peda</a> (accessed: 10 April 2019).</p>
<p><a class=" anchor" name="ref8"></a>[8] Bug hunting in RouterOS. <a href="https://github.com/tenable/routeros/blob/master/bug_hunting_in_routeros_derbycon_2018.pdf" target="_blank">https://github.com/tenable/routeros/blob/master/bug_hunting_in_routeros_derbycon_2018.pdf</a> (accessed: 20 April 2019).</p>
<p><a class=" anchor" name="ref9"></a>[9] Proof of Concept of Winbox Critical Vulnerability (CVE-2018-14847). <a href="https://github.com/BasuCert/WinboxPoC" target="_blank">https://github.com/BasuCert/WinboxPoC</a> (accessed: 05 June 2019).</p>
<p><a class=" anchor" name="ref10"></a>[10] By the Way. <a href="https://github.com/tenable/routeros/tree/master/poc/bytheway" target="_blank">https://github.com/tenable/routeros/tree/master/poc/bytheway</a> (accessed: 05 June 2019).</p>
<p><a class=" anchor" name="ref11"></a>[11] extract_user.py. <a href="https://github.com/BigNerd95/RouterOS-Backup-Tools/blob/master/extract_user.py" target="_blank">https://github.com/BigNerd95/RouterOS-Backup-Tools/blob/master/extract_user.py</a> (accessed: 09 May 2019).</p>
<p><a class=" anchor" name="ref12"></a>[12] @hasherezade; Segura, J. Fake browser update seeks to compromise more MikroTik routers. <a href="https://blog.malwarebytes.com/threat-analysis/2018/10/fake-browser-update-seeks-to-compromise-more-mikrotik-routers/" target="_blank">https://blog.malwarebytes.com/threat-analysis/2018/10/fake-browser-update-seeks-to-compromise-more-mikrotik-routers/</a> (accessed: 20 April 2019).</p>
<p><a class=" anchor" name="ref13"></a>[13] Cisco RV320 Command Injection. <a href="https://www.redteam-pentesting.de/en/advisories/rt-sa-2018-004/-cisco-rv320-command-injection" target="_blank">https://www.redteam-pentesting.de/en/advisories/rt-sa-2018-004/-cisco-rv320-command-injection</a> (accessed: 10 April 2019).</p>
<p><a class=" anchor" name="ref14"></a>[14] CVE-2019-1652 /CVE-2019-1653 Exploits For Dumping Cisco RV320 Configurations &amp; Debugging Data AND Remote Root Exploit! <a href="https://github.com/0x27/CiscoRV320Dum" target="_blank">https://github.com/0x27/CiscoRV320Dum</a>p (accessed: 30 April 2019).</p>
<p><a class=" anchor" name="ref15"></a>[15] Firmware Analysis Tool. <a href="https://github.com/ReFirmLabs/binwalk" target="_blank">https://github.com/ReFirmLabs/binwalk</a> (accessed: 15 April 2019).</p>
<p><a class=" anchor" name="ref16"></a>[16] cramfs.txt. <a href="https://github.com/torvalds/linux/blob/master/Documentation/filesystems/cramfs.txt" target="_blank">https://github.com/torvalds/linux/blob/master/Documentation/filesystems/cramfs.txt</a> (accessed: 15 April 2019).</p>
<p><a class=" anchor" name="ref17"></a>[17] NGINX. <a href="https://www.nginx.com/" target="_blank">https://www.nginx.com/</a> (accessed: 15 April 2019).</p>
<p><a class=" anchor" name="ref18"></a>[18] Critical RCE Vulnerability Found in Over a Million GPON Home Routers. <a href="https://www.vpnmentor.com/blog/critical-vulnerability-gpon-router/" target="_blank">https://www.vpnmentor.com/blog/critical-vulnerability-gpon-router/</a> (accessed: 20 May 2019).</p>
<p><a class=" anchor" name="ref19"></a>[19] Check Your Router for VPNFilter. <a href="http://securityresponse.symantec.com/filtercheck/" target="_blank">http://securityresponse.symantec.com/filtercheck/</a> (accessed: 10 April 2019).</p>
<p><a class=" anchor" name="ref20"></a>[20] F-Secure Router Checker. <a href="https://www.f-secure.com/en/web/home_global/router-checker" target="_blank">https://www.f-secure.com/en/web/home_global/router-checker</a> (accessed: 10 April 2019).</p>
<p> </p>
<h2><a class="chapter" name="h2-appendix-sample-hashes"></a>Appendix: Sample hashes</h2>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td> </td>
<td><strong>Threat name</strong></td>
<td><strong>Sample hash (SHA256)</strong></td>
</tr>
<tr>
<td><a class=" anchor" name="A1"></a>A1</td>
<td>Mirai</td>
<td class="monospace">15246e6dc4e95215bb57a75de06f6e4e7e399b17cf4e9d1ef7687db2214c1542</td>
</tr>
<tr>
<td><a class=" anchor" name="A2"></a>A2</td>
<td>BCMUPnP_Hunter</td>
<td class="monospace">0dc2ab1c36a74f3fa01001f7ee62d74bf8b6f2d97ea2e9c84103d14260f224fa</td>
</tr>
<tr>
<td><a class=" anchor" name="A3"></a>A3</td>
<td>MikroTik_sample</td>
<td class="monospace">57eb8c673fc6a351b8c15310e507233860876ba813ed6ac633e9af329a0bbaa0</td>
</tr>
<tr>
<td><a class=" anchor" name="A4"></a>A4</td>
<td>Satori_GPON</td>
<td class="monospace">efa4fe06e4949c0f7aedea61a79da92e379ea66b169cd1d99c47b9e93e814093</td>
</tr>
</tbody>
</table>
<p> </p>
<p> </p>
<h2><a class="chapter" name="h2-footnotes"></a>Footnotes</h2>
<p><sup><a class=" anchor" name="footnote1"></a>1 </sup>Hash can be found in reference table at the end.</p>
<p> </p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2019/VB2019-Shandilya.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2019 paper: Absolutely routed!! Why routers are the new bullseye in cyber attacks&url=https://www.virusbulletin.com/virusbulletin/2019/12/vb2019-paper-absolutely-routed-why-routers-are-new-bullseye-cyber-attacks"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2019/12/vb2019-paper-absolutely-routed-why-routers-are-new-bullseye-cyber-attacks'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2019/12/vb2019-paper-absolutely-routed-why-routers-are-new-bullseye-cyber-attacks&title=VB2019 paper: Absolutely routed!! Why routers are the new bullseye in cyber attacks"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2019/12/vb2019-paper-absolutely-routed-why-routers-are-new-bullseye-cyber-attacks&t=VB2019 paper: Absolutely routed!! Why routers are the new bullseye in cyber attacks"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2019/12/vb2019-paper-absolutely-routed-why-routers-are-new-bullseye-cyber-attacks"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>