<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2016 paper: Defeating sandbox evasion: how to increase the successful emulation rate in your virtual environment</title>
<meta name="description" content="This VB2016 paper focuses on the techniques used by malware to detect virtual environments, and provides detailed technical descriptions of what can be done to defeat them. " />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 5157;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1>VB2016 paper: Defeating sandbox evasion: how to increase the successful emulation rate in your virtual environment</h1>
<h3>Alexander Chailytko &amp; Stanislav Skuratovich</h3>
<p>Check Point Software Technologies, Belarus</p>
<p><em>Copyright © 2016 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-9479" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-9479" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-1-introduction">1. Introduction</a><br /> <a class="toc-level2" href="#h2-2-cuckoo-environment-detection-techniques">2. Cuckoo environment detection techniques</a><br /> <a class="toc-level3" href="#h3-21-unbalanced-stack">2.1 Unbalanced stack</a><br /> <a class="toc-level3" href="#h3-22-sleep-architecture">2.2 Sleep architecture</a><br /> <a class="toc-level4" href="#h4-221-infinite-sleep-skipping">2.2.1 Infinite sleep skipping</a><br /> <a class="toc-level4" href="#h4-222-sleep-skipping-within-specific-bound">2.2.2 Sleep skipping within a specific bound</a><br /> <a class="toc-level4" href="#h4-223-skipped-time-accumulation">2.2.3 Skipped time accumulation</a><br /> <a class="toc-level3" href="#h3-23-detection-agent">2.3 Detection by agent</a><br /> <a class="toc-level3" href="#h3-24-detection-function-hooks">2.4 Detection by function hooks</a><br /> <a class="toc-level3" href="#h3-25-monitor-artifacts">2.5 Monitor artifacts</a><br /> <a class="toc-level4" href="#h4-251-monitor-configuration-file">2.5.1 Monitor configuration file</a><br /> <a class="toc-level4" href="#h4-252-event-name">2.5.2 Event name</a><br /> <a class="toc-level4" href="#h4-253-communication-pipe-name">2.5.3 Communication pipe name</a><br /> <a class="toc-level3" href="#h3-26-agent-artifacts">2.6 Agent artifacts</a><br /> <a class="toc-level2" href="#h2-3-virtual-environment-detection-techniques">3. Virtual Environment Detection techniques</a><br /> <a class="toc-level3" href="#h3-31-detection-based-raw-firmware-table">3.1 Detection based on raw firmware table</a><br /> <a class="toc-level3" href="#h3-32-detection-based-raw-smbios-firmware-table">3.2 Detection based on raw SMBIOS firmware table</a><br /> <a class="toc-level3" href="#h3-33-detection-based-inaccessibility-global-web-services">3.3 Detection based on inaccessibility of global web services</a><br /> <a class="toc-level3" href="#h3-34-detection-based-dns-traffic">3.4 Detection based on DNS traffic</a><br /> <a class="toc-level3" href="#h3-35-detection-based-datetime-tampering">3.5 Detection based on date/time tampering</a><br /> <a class="toc-level2" href="#h2-4-summary">4. Summary</a><br /> <a class="toc-level2" href="#h2-future-works">Future works</a><br /> <a class="toc-level2" href="#h2-acknowledgement">Acknowledgement</a><br /> <a class="toc-level2" href="#h2-references">References</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>In the cyberworld, specialized virtual environments are used to automatically analyse malware behaviour and prevent it from spreading and damaging real users' personal data, important corporate assets, etc. These environments are called sandboxes. Most modern malware, even those that perpetrate relatively simple attacks, try to evade sandboxes by using different sandbox detection techniques. When a piece of malware detects a sandbox environment, it can adapt its behaviour and perform only non-malicious actions, thereby giving a false impression of its nature, and hiding what it actually does once it reaches a user's system. This can lead to significant security-related problems.</p>
<p>In this paper, we focus on the techniques used by malware to detect virtual environments, and provide detailed technical descriptions of what can be done to defeat them. To showcase our theory, we discuss <em>Cuckoo Sandbox</em>, the leading open‑source automatic malware analysis system that is widely used in the world of security. <em>Cuckoo Sandbox</em> is easy to deploy and uses a malware analysis system which connects many features, such as collecting behaviour information, capturing network traffic, processing reports and more. Nearly all the largest players in the market, such as <em>VirusTotal</em> and <em>Malwr</em>, as well as internal anti-malware-related projects, utilize the <em>Cuckoo Sandbox</em> product as a backend to perform automatic behavioural analysis.</p>
<p>Specific <em>Cuckoo Sandbox</em> bugs, which allow malware to detect sandboxed environments, are described in our paper, as well as possible solutions for these problems.</p>
<p>When a sandbox environment is detected, a piece of malware can easily hide its malicious intent by masquerading as a legitimate application, presenting false information to the analysis engine.</p>
<p>As many vendors and companies rely almost blindly on the results produced in virtual environments (especially ones that use<em> Cuckoo Sandbox</em>), the false information presented by the malware can be critical. While other research exists, our work covers many more different techniques used by malware to detect virtual environments, as well as ways to defeat them. This is especially important as the field is constantly evolving. We also pay special attention to the <em>Cuckoo Sandbox</em> bugs that can allow malware to detect the virtual environment. Knowing how to defeat these evasion techniques will help us to achieve a dramatically increased successful emulation rate in virtual environments and to deliver vital information to customers.</p>
<h2><a class="chapter" name="h2-1-introduction"></a>1. Introduction</h2>
<p>In this paper we present a number of evasion techniques that we have found during extensive analysis of recent malware. We also share a software utility that helps to assess virtual environments. Our solution provides clear detection technique names as well as proposed fixes for each one. The information and software will be made available as open source material on our <em>GitHub</em> repository [<a href="#ref1">1</a>].</p>
<h2><a class="chapter" name="h2-2-cuckoo-environment-detection-techniques"></a>2. Cuckoo environment detection techniques</h2>
<p>Let's describe implementation flaws in the<em> Cuckoo Sandbox</em> [<a href="#ref2">2</a>] product. Each evasion technique is discussed in the context of both the CuckooMon module [<a href="#ref3">3</a>] and the latest Cuckoo Monitor module [<a href="#ref4">4</a>].</p>
<h3><a class="chapter" name="h3-21-unbalanced-stack"></a>2.1 Unbalanced stack</h3>
<p>To track process behaviour, the CuckooMon/Cuckoo Monitor module hooks relevant functions. In this type of architecture, the hook is called before the original function. A hooked function may use some space on the stack in addition to that used by the original function. Therefore, the total space on the stack used by the hooked function may be larger than the space used only by the original function.</p>
<p><strong>Problem:</strong> The malware has information about how much space the called function uses on the stack. It can therefore move the stack pointer towards lower addresses at an offset that is sufficient to store the function arguments, local variables and return address to reserve space for them. The malware fills the space below the stack pointer with some relevant data. It then moves the stack pointer to the original location and calls the library function. If the function is not hooked, the malware fills in the reserved space before the relevant data (see <a href="#figure1">Figure 1</a>). If the function is hooked, the malware overlaps relevant data, because the space that was reserved for the original function's local variables is smaller than the space occupied by the hook and the original function's local variables combined. The relevant data is therefore corrupted (see <a href="#figure2">Figure 2</a>). If it stores pointers to some functions that are used later during the execution process, the malware jumps to arbitrary code, occasionally crashing the application. <a class=" anchor" name="figure1"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/e5675c4e01ab4432de43045af5a72767_f1105.jpg" alt="defeating-sandbox-evasion-fig1.jpg" width="560" height="500" /></p>
<p class="centered-caption">Figure 1: Stack on non-hooked function. <a class=" anchor" name="figure2"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/ab8675546819c8ec1f6d90d5ebd2fa63_f1106.jpg" alt="defeating-sandbox-evasion-fig2.jpg" width="560" height="484" /></p>
<p class="centered-caption">Figure 2: Stack on hooked function call.</p>
<p><strong>Solution:</strong> To avoid this behaviour, the Cuckoo Monitor/CuckooMon module can use a two-stage hooking process. In the first stage, instead of the hook's code execution, it can move the stack pointer towards lower addresses of a specific size that will be enough for the malware's relevant data. Then, the function's arguments are copied under the new stack pointer. Only after these preparatory operations have been completed is the second stage hook (which performs the real hooking) called. Relevant data filled in by the malware resides on upper stack addresses, thus it is not affected in any way by the called function.</p>
<h3><a class="chapter" name="h3-22-sleep-architecture"></a>2.2 Sleep architecture</h3>
<p>There are many problems with the sleep-skipping logic in the current implementation of <em>Cuckoo Sandbox</em>. It needs to retain sleeping logic in terms of queries for computer time, tick count, etc. At the same time it needs to skip non-relevant delays, as the emulation time is limited. The three main flaws that make it possible to evade the sandbox are described below.</p>
<h4><a class="chapter" name="h4-221-infinite-sleep-skipping"></a>2.2.1 Infinite sleep skipping</h4>
<p>Problem: According to the CuckooMon and Cuckoo Monitor architecture, all delays within the first <em>N</em> seconds are skipped completely. If the malware uses the sleep family function with an INFINITE parameter within the first <em>N</em> seconds, the program may crash. The source code is as follows:</p>
<pre class="prettyprint">push 0<br />push 0xFFFFFFFF<br />call Sleep<br />retn</pre>
<p><strong>Solution:</strong> At the beginning of the NtDelayExecution hook, check if the delay interval has an INFINITE value. If it is equal to INFINITE, call the original NtDelayExecution code.</p>
<h4><a class="chapter" name="h4-222-sleep-skipping-within-specific-bound"></a>2.2.2 Sleep skipping within a specific bound</h4>
<p><strong>Problem:</strong> According to the CuckooMon and Cuckoo Monitor architecture, all delays within the first <em>N</em> seconds are skipped completely. At the beginning of the execution process, the malware may perform time-consuming operations, after which the malware may sleep for a long period, causing long delays, and thus exceeding the limited emulation time of the sandbox.</p>
<p><strong>Solution:</strong> Skip delays that are greater than a specific limit. For smaller delays, use approximation and accumulate delayed values. If the number of accumulated values from the same range has exceeded a specific boundary, further delays from that range are skipped.</p>
<h4><a class="chapter" name="h4-223-skipped-time-accumulation"></a>2.2.3 Skipped time accumulation</h4>
<p><strong>Problem:</strong> According to the CuckooMon and Cuckoo Monitor architecture, all delays that are skipped are accumulated in a global variable. This variable is used while performing GetTickCount, GetSystemTime, etc. calls. The value of the variable is added to the real system time in order to avoid detection by skipped delays. This model is non-thread safe, and therefore the malware may spoof its output in the following way: it creates a thread that sleeps for a specific long period of time, so it will accumulate in the global variable. In another thread, the malware calls GetSystemTime, which is used, for example, in DGA [<a href="#ref5">5</a>]. As the current system time plus a long delay may exceed today's date, the generated domains will be non-relevant for today.</p>
<p><strong>Solution:</strong> To avoid this behaviour, delay accumulation should be implemented on a per-thread basis. Delays in different threads will not affect each other's time-dependent behaviour.</p>
<h3><a class="chapter" name="h3-23-detection-agent"></a>2.3 Detection by agent</h3>
<p>To communicate with the machine, <em>Cuckoo</em> uses an agent server on the sandbox side. As the communication protocol is well known, the malware may use it to evade the virtual environment.</p>
<p><strong>Problem:</strong> As an agent listens on some port (the default is 8000), the malware can enumerate all LISTENING ports. During enumeration, the malware may send specially crafted data and check the response. If the response matches a specific pattern, the malware can assume that the machine is running an agent.</p>
<p><strong>Solution:</strong> While accepting incoming connections, the agent can perform a check of whether the incoming IP address belongs to one of the local machine interface addresses. If it belongs, the agent simply closes the connection.</p>
<h3><a class="chapter" name="h3-24-detection-function-hooks"></a>2.4 Detection by function hooks</h3>
<p>To track process behaviour, CuckooMon and Cuckoo Monitor use function hooking. Both use trampolines [<a href="#ref6">6</a>] inside functions. Compared to CuckooMon, the new Cuckoo Monitor module has improved hooking, at least in terms of logic. The current version registers a notification function for the DLL first load by calling the LdrRegisterDllNotification function (in <em>Windows Vista</em> or later). Therefore, functions that should be traced and are not present in any modules at the Monitor startup are hooked after the first load of the module.</p>
<p><strong>Problem:</strong> As hooks are implemented as trampolines, the CuckooMon/Cuckoo Monitor adds jumps at the beginning of functions. The malware can easily check if the first byte is equal to 0xE9 for some ntdll functions such as ZwClose, ZwDelayExecution, ZwGetContextThread, etc. At the same time, a check of whether the first byte is equal to 0xE9 can easily be performed for some kernel32 functions, CreateThread, DeleteFileW, etc. If the value of the first byte matches, the malware can assume that functions are hooked and it is running inside a sandboxed environment.</p>
<p><strong>Solution:</strong> To avoid detection by hooks, a few possible solutions exist. One of these is to abandon user-mode hooks in the way in which they are currently implemented and to use a driver instead. A second solution is to use stack routing to implement function hooking.</p>
<h3><a class="chapter" name="h3-25-monitor-artifacts"></a>2.5 Monitor artifacts</h3>
<p>CuckooMon and Cuckoo Monitor use a configuration file to perform initialization steps, as well as some system objects to communicate with the master. Evasion techniques based on such behaviour are described below.</p>
<h4><a class="chapter" name="h4-251-monitor-configuration-file"></a>2.5.1 Monitor configuration file</h4>
<p><strong>Problem:</strong> Configuration files for the CuckooMon and Cuckoo Monitor are stored in the following paths (PID = GetCurrentProcessId):</p>
<ul>
<li>"%TEMP%\%d.ini" % PID</li>
<li>"C:\cuckoo_%lu.ini" % PID</li>
</ul>
<p>The malware may check for the presence of such files in the filesystem. If the file is present, the malware can assume that it is running inside <em>Cuckoo Sandbox</em>.</p>
<p><strong>Solution:</strong> If CuckooMon/Cuckoo Monitor is used in an internal project, the configuration file can be placed inside a shared object. The shared object name can be generated using the current date and process ID. Otherwise, the injector can use CreateRemoteThread/QueueUserAPC at the entry point of the manually mapped CuckooMon/Cuckoo Monitor module, previously writing configuration to allocated memory. The injector can pass the address of the written configuration as a parameter to this function.</p>
<h4><a class="chapter" name="h4-252-event-name"></a>2.5.2 Event name</h4>
<p><strong>Problem:</strong> The deprecated CuckooMon version uses the 'CuckooEvent%d' % PID event to notify the master that the module has successfully been injected into the tracking process. Malware can try to open the event by using the OpenEvent function with the specified event name. If the event is successfully opened, the malware can assume that it is running inside <em>Cuckoo Sandbox</em>.</p>
<p><strong>Solution:</strong> If CuckooMon is used in an internal project, then the event name generation algorithm can use, for example, the current date and injected process ID. On the other hand, the new Cuckoo Monitor implementation uses a specific command sent over the pipe, which seems to be a very good solution as well.</p>
<h4><a class="chapter" name="h4-253-communication-pipe-name"></a>2.5.3 Communication pipe name</h4>
<p>If detection by configuration filename is a deficiency, then the malware may parse its content and look for the communication pipe name.</p>
<p><strong>Problem:</strong> If the pipe name is known, the malware can send any commands to the pipe server as the protocol is well known. At the same time, the existence of such a pipe indicates that execution is taking place in a sandboxed environment.</p>
<p><strong>Solution:</strong> As the pipe name can be obtained from the analyser configuration file and the Cuckoo Monitor configuration file, refer to the proposed solutions for these problems.</p>
<h3><a class="chapter" name="h3-26-agent-artifacts"></a>2.6 Agent artifacts</h3>
<p>To start emulation of a specified file, the agent first copies all startup, fix and disguise scripts and DLL to a specific path in the system. The path contains SYSTEMDRIVE and a randomized folder whose name is between five and 10 characters in length.</p>
<p><strong>Problem:</strong> The malware can enumerate SYSTEMDRIVE and check if the folders contain the following files or folders:</p>
<ul>
<li>analyzer.py</li>
<li>analysis.conf</li>
<li>bin/</li>
<li>dll/</li>
<li>lib/</li>
<li>modules/</li>
</ul>
<p>If these are present, the malware can assume that it is running inside a sandboxed environment.</p>
<p><strong>Solution:</strong> To avoid detection by the presence of such files, the following solution can be implemented: use py2exe to compile all Python scripts with embedded CuckooMon/Cuckoo Monitor DLL content. That executable file is stored somewhere in the system under a random name.</p>
<h2><a class="chapter" name="h2-3-virtual-environment-detection-techniques"></a>3. Virtual Environment Detection techniques</h2>
<p>Let's discuss some specific virtual environment detection techniques.</p>
<h3><a class="chapter" name="h3-31-detection-based-raw-firmware-table"></a>3.1 Detection based on raw firmware table</h3>
<p><strong>Problem:</strong> The malware tries to dump a raw firmware table, using an undocumented structure, to get information about the present firmware [<a href="#ref7">7</a>].</p>
<p>The SYSTEM_FIRMWARE_TABLE_INFORMATION (SFTI)object is initialized as follows:</p>
<pre class="prettyprint">sfti-&gt;Action = SystemFirmwareTable_Get;<br />sfti-&gt;ProviderSignature = 'FIRM';<br />sfti-&gt;TableID = 0xC0000;<br />sfti-&gt;TableBufferLength = Length;</pre>
<p>The initialized SFTI object is used in the following way as an argument for the system information call to dump the raw firmware table:</p>
<pre class="prettyprint">NtQuerySystemInformation(<br />  SystemFirmwareTableInformation,<br />  sfti,<br />  Length,<br />  &amp;Length);</pre>
<p>If the operating system version is <em>Windows XP</em> or older, the malware uses CSRSS memory space to dump the raw firmware table:</p>
<pre class="prettyprint">NtReadVirtualMemory(<br />  hCSRSS,<br />  0xC0000,<br />  sfti,<br />  RegionSize,<br />  &amp;memIO);</pre>
<p>The malware scans the received firmware table for the presence of the following strings:</p>
<ul>
<li>VirtualBox</li>
<li>Oracle</li>
<li>innotek</li>
<li>VMware</li>
<li>VMware, Inc.</li>
<li>S3 Corp.</li>
<li>Parallels(R)</li>
</ul>
<p><strong>Solution:</strong> In the case of <em>Windows XP</em> we use splicing of the NtReadVirtualMemory service. First, we need to parse the arguments. If the address of the read memory is equal to 0xC0000, then we modify the returned buffer, simply removing the specified strings from it.</p>
<p>In the case of <em>Windows Vista</em> and later versions, we hook the kernel mode service NtQuerySystemInformation. If the SystemInformationClass is equal to SystemFirmwareTableInformation, we start to parse the passed SFTI structure. If the SFTI member values are the same as described above, then we execute the original service and modify the returned SFTI structure, simply removing the specified strings from it.</p>
<h3><a class="chapter" name="h3-32-detection-based-raw-smbios-firmware-table"></a>3.2 Detection based on raw SMBIOS firmware table</h3>
<p><strong>Problem:</strong> This technique is quite similar to the previous one, except the malware tries to read the SMBIOS firmware table [7], and passes a different structure to the function calls:</p>
<pre class="prettyprint">sfti-&gt;Action = SystemFirmwareTable_Get;<br />sfti-&gt;ProviderSignature = 'RSMB';<br />sfti-&gt;TableID = 0x0;<br />sfti-&gt;TableBufferLength = Length;</pre>
<p>If the operating system version is <em>Windows XP</em> or older, the malware uses CSRSS memory space to dump the raw SMBIOS firmware table:</p>
<pre class="prettyprint">NtReadVirtualMemory(<br />  hCSRSS,<br />  0xE0000,<br />  sfti,<br />  RegionSize,<br />  &amp;memIO);</pre>
<p><strong>Solution:</strong> The malware scans the received SMBIOS table for the presence of the same strings as described above. Possible solutions are also the same, except that the driver should check for a different address in the case of <em>Windows XP</em> (0xE0000), and a different ProviderSignature ('RSMB') as well as TableID (0x0) in the case of <em>Windows Vista</em> and later.</p>
<h3><a class="chapter" name="h3-33-detection-based-inaccessibility-global-web-services"></a>3.3 Detection based on inaccessibility of global web services</h3>
<p><strong>Problem:</strong> As almost all sandboxes disallow traffic outside the internal network, a problem may arise whereby the malware can access global web services in order to obtain some information that is hard to emulate in a virtual environment, for example:</p>
<ul>
<li>IP-resolving services like ip-addr.es, ip-address.ru, etc. to get the external IP.</li>
<li>The speedtest.net service to get the actual network bandwidth. If it's below or above a specified limit, the malware will stop the execution.</li>
</ul>
<p><strong>Solution:</strong> To bypass such checks we need to adjust the routing inside our network to route such requests to our 'fake' services that replicate the real ones.</p>
<h3><a class="chapter" name="h3-34-detection-based-dns-traffic"></a>3.4 Detection based on DNS traffic</h3>
<p><strong>Problem:</strong> Some advanced malware overrides the system's default DNS servers, using public ones such as 8.8.8.8 or 8.8.4.4. So, even if a fake DNS server is set up in the sandbox, but not all the traffic is routed to it, the malware will not get a response and will stop its execution. Another possible problem is that the malware checks the number of records returned by the DNS server for the most popular websites, such as<br />google.com, yahoo.com, microsoft.com, etc. If your fake DNS server returns only one instead of multiple records, the malware will also stop its execution.</p>
<p><strong>Solution:</strong> Fully emulate the real services and protocols. Return multiple DNS records if they should be present, as well as routing all DNS traffic to the server controlled by you.</p>
<h3><a class="chapter" name="h3-35-detection-based-datetime-tampering"></a>3.5 Detection based on date/time tampering</h3>
<p><strong>Problem:</strong> Malware can obtain a valid date/time from the HTTP headers during access to a legitimate website. For example, the following are the HTTP headers while accessing google.com:</p>
<pre>HTTP/1.1 302 Found<br />Cache-Control: private<br />Content-Type: text/html; charset=UTF-8<br />Location: http://www.google.by/?gfe_rd=cr&amp;ei=Zn09V4uIDemH8Qfv3ZP4Dw<br />Content-Length: 258<br />Date: <strong>Thu, 19 May 2016 08:46:30 GMT</strong></pre>
<p>The malware could utilize the valid date/time in order to detect tampering with the date/time values in a virtual environment.</p>
<p>For example, let's look at the detection of sleep-skipping methods. Malware checks if there is a discrepancy between the sleep time and the time that has really passed. In the case of using sleep-skipping techniques, this will result in detection. The following is a section of pseudocode:</p>
<pre class="prettyprint">bool isSandboxed()<br />{<br />  static const int kDelta = 5 * 1000;<br />  static const int64_t k100NstoMSecs=10000;<br />  bool sandboxDetected = false;<br /><br />  FILETIME ftLocalStart, ftLocalEnd;<br />  FILETIME ftLocalResult;<br />  FILETIME ftWebStart, ftWebEnd;<br /><br />  GetSystemTimeAsFileTime(&amp;ftLocalStart);<br />  getWebTime(ftWebStart);<br /><br />  const int64_t sleepMSec = 60 * 1000;<br />  SleepEx(sleepMSec, FALSE);<br /><br />  GetSystemTimeAsFileTime(&amp;ftLocalEnd);<br />  getWebTime(ftWebEnd);<br /><br />  // PC's clock validation<br />  ftLocalResult = ftLocalEnd – ftLocalStart;<br />  ftWebResult = ftWebEnd – ftWebStart;<br /><br />  const int64_t localDiff =<br />     abs(ftLocalResult) / k100NStoMSecs;<br />  const int64_t webDiff =<br />     abs(ftWebResult) / k100NStoMSecs;<br /><br />  if (abs(localDiff - webDiff) &gt; kDelta)<br />     sandboxDetected = true;<br /><br />  // second check for proper sleep delay<br />  if (!sandboxDetected)<br />  {<br />     if (localDiff &lt; sleepMSec)<br />        sandboxDetected = true;<br /><br />     if (webDiff &lt; sleepMSec)<br />        sandboxDetected = true;<br />  }<br />  return sandboxDetected;<br />}</pre>
<p><strong>Solution:</strong> Fully emulate the real services and protocols. In such a case you should return the same date/time in the HTTP headers from the fake HTTP server as on the local machine.</p>
<h2><a class="chapter" name="h2-4-summary"></a>4. Summary</h2>
<p>Many malware families use various techniques to detect virtual environments. Some of these are trivial and the specific 'loopholes' they exploit are easily fixed. However, other techniques are more advanced and require extra effort. Depending on the detection technique, the malware may behave completely differently in a virtual environment from how it would in a real system.</p>
<p>Some of the described techniques are well known, but not yet fixed in a large number of virtual environments. Some techniques may have been used recently by specific malware (e.g. Locky, Qbot, Ramdo, Cridex, Matsnu, etc.), especially against <em>Cuckoo Sandbox</em>.</p>
<p>The worst problem is that some malware families don't just evade the emulation process, but also generate fake information (as seen, for example, in Locky and Ramdo).</p>
<p>There is still a lot of room for improvement in sandboxes, even if the emulation rate is sufficient. We hope that our research will serve as impetus for improvement in the<em> Cuckoo Sandbox</em> product and other virtual environments. At the same time, we expect that it will lead to better internal malware-related projects.</p>
<h2><a class="chapter" name="h2-future-works"></a>Future works</h2>
<p>Evasion techniques and the detections they use represent an ever-evolving world. It's a classic cat-and-mouse game between malware developers and security researchers. Our future work will include tracking and fixing newly discovered evasion techniques to keep the emulation rate high enough for practical needs.</p>
<h2><a class="chapter" name="h2-acknowledgement"></a>Acknowledgement</h2>
<p>We would like to thank our colleague Aliaksandr Trafimchuk for helping us with our project.</p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a><span class="anchor">[1] <a href="https://github.com/MalwareResearch/VB2016" target="_blank">https://github.com/MalwareResearch/VB2016</a>.</span></p>
<p><a class=" anchor" name="ref2"></a><span class="anchor">[2] <a href="https://github.com/cuckoosandbox" target="_blank">https://github.com/cuckoosandbox</a>.</span></p>
<p><a class=" anchor" name="ref3"></a><span class="anchor">[3] <a href="https://github.com/cuckoosandbox/cuckoomon" target="_blank">https://github.com/cuckoosandbox/cuckoomon</a>.</span></p>
<p><a class=" anchor" name="ref4"></a><span class="anchor">[4] <a href="https://github.com/cuckoosandbox/monitor" target="_blank">https://github.com/cuckoosandbox/monitor</a>.</span></p>
<p><a class=" anchor" name="ref5"></a><span class="anchor">[5] <a href="https://en.wikipedia.org/wiki/Domain_generation_algorithm" target="_blank">https://en.wikipedia.org/wiki/Domain_generation_algorithm</a>.</span></p>
<p><a class=" anchor" name="ref6"></a><span class="anchor">[6] </span><a href="https://en.wikipedia.org/wiki/Trampoline_(computing)" target="_blank">https://en.wikipedia.org/wiki/Trampoline_(computing)</a>.</p>
<p><a class=" anchor" name="ref7"></a><span class="anchor">[7] <a href="https://github.com/hfiref0x/VMDE/blob/master/Output/vmde.pdf" target="_blank">https://github.com/hfiref0x/VMDE/blob/master/Output/vmde.pdf</a>.</span></p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2016/VB2016-Chailytko-Skuratovich.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2016 paper: Defeating sandbox evasion: how to increase the successful emulation rate in your virtual environment&url=https://www.virusbulletin.com/virusbulletin/2016/12/vb2016-paper-defeating-sandbox-evasion-how-increase-successful-emulation-rate-your-virtual-environment"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2016/12/vb2016-paper-defeating-sandbox-evasion-how-increase-successful-emulation-rate-your-virtual-environment'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2016/12/vb2016-paper-defeating-sandbox-evasion-how-increase-successful-emulation-rate-your-virtual-environment&title=VB2016 paper: Defeating sandbox evasion: how to increase the successful emulation rate in your virtual environment"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2016/12/vb2016-paper-defeating-sandbox-evasion-how-increase-successful-emulation-rate-your-virtual-environment&t=VB2016 paper: Defeating sandbox evasion: how to increase the successful emulation rate in your virtual environment"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2016/12/vb2016-paper-defeating-sandbox-evasion-how-increase-successful-emulation-rate-your-virtual-environment"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>