<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: Evolution of Android exploits from a static analysis tools perspective</title>
<meta name="description" content="With Android being the fastest-growing mobile OS, and with a rapidly increasing number of Android malware samples in existence, it is important to acknowledge the risk of exploitation of security vulnerabilities by malware. In their VB2014 paper, Anna Szalay and Jagadeesh Chandraiah investigate Android malware that has attempted to exploit vulnerabilities, and identify the most relevant threat families from the perspective of static analysis tools. They also provide an evaluation of the various analysis tools that are currently available, exploring their successes and failures, and identifying the best approach for future analysis." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1537;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201601-Android-exploits"></a>VB2014 paper: Evolution of Android exploits from a static analysis tools perspective</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2016-01-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Anna</span> <span class="surname">Szalay</span></h3><span class="orgname">Sophos</span>, <span class="orgdiv">UK</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Jagadeesh</span> <span class="surname">Chandraiah</span></h3><span class="orgname">Sophos</span>, <span class="orgdiv">UK</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>With Android being the fastest-growing mobile OS, and with a rapidly increasing number of Android malware samples in existence, it is important to acknowledge the risk of exploitation of security vulnerabilities by malware. In their VB2014 paper, Anna Szalay and Jagadeesh Chandraiah investigate Android malware that has attempted to exploit vulnerabilities, and identify the most relevant threat families from the perspective of static analysis tools. They also provide an evaluation of the various analysis tools that are currently available, exploring their successes and failures, and identifying the best approach for future analysis.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2047" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2047" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3540380">Abstract</a></span></dt><dt><span class="sect1"><a href="#id3146442">1. Introduction</a></span></dt><dt><span class="sect1"><a href="#id2616897">2. Exploits overview</a></span></dt><dt><span class="sect1"><a href="#id3908015">3. Exploits evolution</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4798258">3.1 Android WebKit browser exploit</a></span></dt><dt><span class="sect2"><a href="#id3319458">3.2 Android data-stealing vulnerability</a></span></dt><dt><span class="sect2"><a href="#id3546545">3.3 Android local root exploit, a.k.a. &lsquo;rage against the cage&rsquo; or &lsquo;Lotoor&rsquo; exploit</a></span></dt><dt><span class="sect2"><a href="#id2569696">3.4 Android ClientLogin protocol vulnerability </a></span></dt><dt><span class="sect2"><a href="#id4384652">3.5 Android Gingerbreak root exploit</a></span></dt><dt><span class="sect2"><a href="#id4336751">3.6 Dex2jar exploitation: Obad</a></span></dt><dt><span class="sect2"><a href="#id3299110">3.7 &lsquo;Master Key&rsquo; vulnerability</a></span></dt><dt><span class="sect2"><a href="#id3609380">3.8 &lsquo;Extra Field&rsquo; vulnerability</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3456811">4. Static analysis techniques and tools </a></span></dt><dt><span class="sect1"><a href="#id4879732">5. Evaluation of static analysis tools against exploit samples</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3321269">5.1 Andr/MstrKey-A &ndash; challenge of multiple entries of the same file</a></span></dt><dt><span class="sect2"><a href="#id4310737">5.2 Andr/DroidD &ndash; Dex header issue</a></span></dt><dt><span class="sect2"><a href="#id2551397">5.3 Android/DroidRt, Andr/Obad-A &ndash; use of unfamiliar opcodes and decompilation</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4627349">6. Best approach</a></span></dt><dt><span class="sect1"><a href="#id3290688">7. Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3540380"></a>Abstract</h2></div></div></div><p>With <span class="emphasis"><em>Android</em></span> being the fastest-growing mobile OS, and with a rapidly increasing number of <span class="emphasis"><em>Android</em></span> malware samples, it is important to acknowledge the risk of exploitation of security vulnerabilities by malware. </p><p>According to Common Vulnerabilities and Exposures (CVE) data, over the past few years the total number of documented <span class="emphasis"><em>Android</em></span> vulnerabilities has reached 36, with seven of them discovered in the last year. The most serious of the recent ones is the so-called &lsquo;Master Key&rsquo; vulnerability (CVE-2013-4787), which is reported to have affected 99% of devices, compromising the APK signature validation process. </p><p>With the total number of <span class="emphasis"><em>Android</em></span> samples in our database exceeding 900,000, and 2,000 new <span class="emphasis"><em>Android</em></span> malware samples appearing every day, we estimate that approximately 10% of the samples exploit some vulnerability, of which one tenth will be a &lsquo;Master Key&rsquo; exploit.</p><p>In this paper, we will investigate <span class="emphasis"><em>Android</em></span> malware that has attempted to exploit vulnerabilities, and identify the most relevant threat families from the perspective of static analysis tools. The research will reveal the evolution of the threat families. Additionally, we will provide an evaluation of the various analysis tools that are currently available, exploring their successes and failures, and highlighting the differences between them. These results will be used to identify the best approach for future analysis, to ensure it keeps up with the rapid development of <span class="emphasis"><em>Android</em></span> malware, and the increasing sophistication of device exploitation.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3146442"></a>1. Introduction</h2></div></div></div><p>According to <span class="emphasis"><em>Gartner</em></span> [<span class="citation"><a href="#citation.1">1</a></span>], collectively, 2.5 billion devices are expected to be shipped in 2014, with <span class="emphasis"><em>Android</em></span> expected to be loaded on more than one billion of them (see <a href="#figure.1">Figure 1</a>).</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Worldwide device shipment by operating system (thousands of units)." src="/uploads/images/figures/2016/01/Szalay-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Worldwide device shipment by operating system (thousands of units).</b></p></div><p>The continuously growing popularity of <span class="emphasis"><em>Android</em></span> devices, as well as the specifics of the <span class="emphasis"><em>Android</em></span> environment, its open source nature, the non-complicated process of adding applications to <span class="emphasis"><em>Google Play</em></span> and other <span class="emphasis"><em>Android</em></span> application markets, forums and file sharing sites, plus the possibility of redistribution in the form of &lsquo;cracked&rsquo; and repackaged apps, all make it the number one target for mobile malware writers, with the number of malware samples in our database reaching 900,000 this year (see <a href="#figure.2">Figure 2</a>).</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Android malware samples timeline." src="/uploads/images/figures/2016/01/Szalay-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Android malware samples timeline.</b></p></div><p>It also means that exploitation of security vulnerabilities is inevitable, and it is important to acknowledge the risk of exploitation of vulnerabilities by malware. </p><p>The cumulative share of malware samples exploiting different vulnerabilities has reached 10% (<a href="#figure.3">Figure 3</a>). </p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Share of malware exploit samples." src="/uploads/images/figures/2016/01/Szalay-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Share of malware exploit samples.</b></p></div><p>But when we consider the significance of the prevalent malware families that have surfaced over years, there are several well known families that have used an exploit(s). In this paper, we will aim to identify those families based on our collection of <span class="emphasis"><em>Android</em></span> malware samples.</p><p>We will concentrate on <span class="emphasis"><em>Android</em></span> exploits and their evolution by evaluating malware families using static analysis tools. We will look at the important families that have used exploits to obtain access to and gain control of infected devices, limiting our research to the families that could be considered as the most well known for exploiting one vulnerability or more.</p><p>We will evaluate popular analysis tools by running them against malware families containing the exploits and analysing the results. We will look at how successful they are, highlight their failures, and document our case studies in order to identify the best approach for similar cases in the future.</p><p>Our aim is to show how the development of <span class="emphasis"><em>Android</em></span> malware and the increasing sophistication of <span class="emphasis"><em>Android</em></span> exploits has made popular static analysis tools unreliable.</p><p>We will argue that the evolution of exploits needs to be matched by the development of analysis tools, and highlight the need to develop more robust static and dynamic tools in the future. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2616897"></a>2. Exploits overview</h2></div></div></div><p>Based on Common Vulnerabilities and Exposures (CVE) data [<span class="citation"><a href="#citation.2">2</a></span>], the total number of documented <span class="emphasis"><em>Android</em></span> vulnerabilities has reached 36, with seven of them discovered in the last year, and six in the first quarter of 2014.</p><p>Since it began in 2010, the evolution of <span class="emphasis"><em>Android</em></span> malware can be matched with the exploitation of <span class="emphasis"><em>Android</em></span> vulnerabilities. Based on our samples, we will take a closer look at those that we think are the most significant milestones.</p><p><span class="emphasis"><em>Android</em></span> vulnerabilities exploitation timeline: </p><div class="itemizedlist"><ul type="disc"><li><p>Q4 2010: <span class="emphasis"><em>Android WebKit </em></span>browser exploit </p></li><li><p>Q4 2010: <span class="emphasis"><em>Android</em></span> data-stealing vulnerability</p></li><li><p>Q1 2011: <span class="emphasis"><em>Android</em></span> local root exploit, a.k.a .&lsquo;Rage against the cage&rsquo; or &lsquo;Lotoor&rsquo; exploit</p></li><li><p>Q2 2011: <span class="emphasis"><em>Android</em></span> ClientLogin protocol vulnerability</p></li><li><p>Q3 2011: <span class="emphasis"><em>Android</em></span> Gingerbreak root exploit, a.k.a. CVE 2011-1823</p></li><li><p>2012 &hellip;</p></li><li><p>Q2 2013: <span class="emphasis"><em>Dex2jar</em></span> exploitation</p></li><li><p>Q2 2013: &lsquo;Master Key&rsquo; vulnerability </p></li><li><p>Q3 2013: &lsquo;Extra Field&rsquo; vulnerability </p></li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3908015"></a>3. Exploits evolution</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4798258"></a>3.1 Android WebKit browser exploit</h3></div></div></div><p>The first serious proof-of-concept exploit for the <span class="emphasis"><em>Android</em></span> platform was related to the <span class="emphasis"><em>Android WebKit </em></span>browser and, while it was not related <span class="emphasis"><em>only</em></span> to <span class="emphasis"><em>Android</em></span> OS (and thus was not a platform vulnerability), it allowed remote attackers to execute arbitrary code or cause a denial of service (application crash) via a crafted HTML document, related to non-standard NaN representation. In other words, it was making <span class="emphasis"><em>Android</em></span> devices vulnerable to drive-by exploits [<span class="citation"><a href="#citation.3">3</a></span>].</p><p>It has been reported that the targeted vulnerability was fixed by <span class="emphasis"><em>Google</em></span> in the following <span class="emphasis"><em>Android</em></span> release (<span class="emphasis"><em>2.2 Froyo</em></span>). According to <span class="emphasis"><em>Google</em></span>, <span class="emphasis"><em>Froyo</em></span> was used by 36% of all <span class="emphasis"><em>Android</em></span> devices at the time &ndash; which meant that the majority of devices could still successfully be attacked using the exploit [<span class="citation"><a href="#citation.4">4</a></span>].</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3319458"></a>3.2 Android data-stealing vulnerability</h3></div></div></div><p>Next on our list is an <span class="emphasis"><em>Android</em></span> data-stealing vulnerability [<span class="citation"><a href="#citation.5">5</a></span>], a general vulnerability in <span class="emphasis"><em>Android</em></span> which allowed a malicious website to obtain the contents of any file stored on the device&rsquo;s SD card. It would also be possible to retrieve a limited range of other data and files stored on the phone using this vulnerability. This is a simple exploit involving JavaScript and redirects, meaning it should also work on multiple handsets and multiple <span class="emphasis"><em>Android</em></span> versions without any effort. One limiting factor of this exploit is that you have to know the name and path of the file you want to steal. However, there are a number of applications that store data with consistent names on the SD card, and pictures taken on the camera are stored with a consistent naming convention too, so it is not hard to guess the correct names and paths. This is not a root exploit either, meaning it runs within the <span class="emphasis"><em>Android</em></span> sandbox and cannot reach all files on the system, only those on the SD card and a limited number of others.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3546545"></a>3.3 Android local root exploit, a.k.a. &lsquo;rage against the cage&rsquo; or &lsquo;Lotoor&rsquo; exploit</h3></div></div></div><p>At the beginning of 2011, the <span class="emphasis"><em>Android</em></span> root was attacked by exploiting privilege escalation. Both exploits for the <span class="emphasis"><em>Linux</em></span> kernel udev vulnerability and an adb privilege escalation attack are relatively old, but they worked with the versions of <span class="emphasis"><em>Android</em></span> used by the majority of <span class="emphasis"><em>Android</em></span> phones. </p><p>Note that we are still seeing samples with different variations of this exploit. The cumulative share of malware samples that use variations of this exploit has reached 2% of the total number of samples, as shown in <a href="#figure.4">Figure 4</a>.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Malware root exploit samples share." src="/uploads/images/figures/2016/01/Szalay-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Malware root exploit samples share.</b></p></div><p>When looking at the different pieces of malware that have taken advantage of this vulnerability, up to 14% is made up of variants of the so called &lsquo;classic&rsquo; Android local root exploit samples based on using an ELF executable that comprises exploit code (see <a href="#figure.5">Figure 5</a>).</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Share of root-exploit-based malware samples." src="/uploads/images/figures/2016/01/Szalay-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Share of root-exploit-based malware samples.</b></p></div><p>DroidKungFu is a well-known malware family that has taken root exploitation to a different level &ndash; it alone accounts for 15% of root-exploit-based malware samples. </p><p>DroidKungFu was included in repackaged apps that were made available through a number of alternative app markets and forums targeting Chinese-speaking users. This malware would add into the infected app a new service and a new receiver. The receiver would be notified when the system finished booting so that it could automatically launch the service without user interaction. DroidKungFu had encrypted udev and &lsquo;rage against the cage&rsquo; exploits, and decrypted them upon running, executing and launching the attack. </p><p>Reports suggest that <span class="emphasis"><em>Gingerbread</em></span> (<span class="emphasis"><em>Android 2.3</em></span>) was the only <span class="emphasis"><em>Android</em></span> version that was not vulnerable at the time, which would mean that 99% of <span class="emphasis"><em>Android</em></span> phones were potentially affected.</p><p>Another 2% of the root exploits pie was occupied by the so called BaseBridge family. This malware used a privilege escalation exploit to elevate its privileges and install additional malicious apps onto an <span class="emphasis"><em>Android</em></span> device. It used HTTP to communicate with a central server and leaked potentially identifiable information. These malicious apps could send and read SMS messages, potentially costing the user money. In fact, it could even scan incoming SMS messages and automatically remove warnings that alert the user to the fact that they are being charged a fee for using premium rate services.</p><p>Also, insignificant in share, but a piece of malware that attracted public attention at the time, is DroidDream. It surfaced in spring-summer 2011 and represents the first Android botnet to take advantage of a root exploit. DroidDream became an &lsquo;<span class="emphasis"><em>Android Market</em></span> nightmare&rsquo; when over 50 infected apps were identified and removed from the market [<span class="citation"><a href="#citation.6">6</a></span>].</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2569696"></a>3.4 Android ClientLogin protocol vulnerability </h3></div></div></div><p>The <span class="emphasis"><em>Android</em></span> ClientLogin protocol vulnerability has the highest score based on CVE details, and was discovered by German researchers in May 2011 [<span class="citation"><a href="#citation.7">7</a></span>]. It allowed remote attackers to gain privileges and access private data by interfering with the transmitting of an authentication token (authToken), meaning that it could potentially allow Wi-Fi traffic to be sniffed, and the authToken that had just been generated to be stolen. It has been reported that 99% of <span class="emphasis"><em>Android</em></span> devices were at risk from this vulnerability at the time [<span class="citation"><a href="#citation.8">8</a></span>].</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4384652"></a>3.5 Android Gingerbreak root exploit</h3></div></div></div><p>Another milestone in the evolution of exploiting vulnerabilities was claimed by GingerMaster, the first <span class="emphasis"><em>Android</em></span> malware to use a root exploit on <span class="emphasis"><em>Android 2.3</em></span> (<span class="emphasis"><em>Gingerbread</em></span>), CVE-2011-1823 [<span class="citation"><a href="#citation.7">7</a></span>]. It takes up 68% of the root exploits pie! </p><p>The GingerMaster malware was repackaged into popular legitimate apps in order to attract user downloads and installation. Within the repackaged apps, the malware registered a receiver so that it would be notified when the system finished booting. Inside the receiver, it would silently launch a service in the background. Accordingly, the background service would collect various pieces of information including the device ID, phone number and others (e.g. by reading /proc/cpuinfo) and then upload the information to a remote server. The actual exploit was packaged into the infected app in the form of a regular file named &lsquo;gbfm.png&rsquo;, which could be deciphered as &lsquo;Ginger Break for Me&rsquo; (see <a href="#figure.6">Figure 6</a> and <a href="#figure.7">Figure 7</a>).</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Inside GMaster APK, exploit code in a picture file." src="/uploads/images/figures/2016/01/Szalay-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Inside GMaster APK, exploit code in a picture file.</b></p></div><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Inside GMaster APK, exploit code in a picture file." src="/uploads/images/figures/2016/01/Szalay-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Inside GMaster APK, exploit code in a picture file.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/12/Szalay-7-large.jpg" target="_top">here</a> to view a larger version of Figure 7.)</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4336751"></a>3.6 Dex2jar exploitation: Obad</h3></div></div></div><p>Labelled as one of the worst trojans ever, Obad hit the headlines in June 2013. It combined a few unknown exploits and made analysis incredibly difficult. Obad exploited the way in which the OS was processing the AndroidManifest.xml file (which is generated during the build process, and contains information about the application structure, including how different components are related and launched, as well as what permissions an application requests). Obad&rsquo;s authors also found a way to silently extend Device Administrator privileges so that the malware would not appear on the list of the applications running with these privileges. In addition, the malware authors introduced complex code encryption, with all external methods called via reflection, and all strings encrypted, including the names of classes and methods. Each class would have a local descriptor method which would obtain the string required for encryption from the locally updated byte array. See <a href="#figure.8">Figure 8 </a> and <a href="#figure.9">Figure 9</a>.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="Obad obfuscation, example of decompiled by dex2jar dex code output." src="/uploads/images/figures/2016/01/Szalay-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;Obad obfuscation, example of decompiled by dex2jar dex code output.</b></p></div><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="Obad obfuscation, example of decompiled by dex2jar dex code output." src="/uploads/images/figures/2016/01/Szalay-9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;Obad obfuscation, example of decompiled by dex2jar dex code output.</b></p></div><p>From our point of view, however, Obad was most famous for finding an error in the <span class="emphasis"><em>dex2jar</em></span> software. <span class="emphasis"><em>Dex2jar</em></span> is one of the most popular and well-used static analysis tools. The disruption of the conversion of Davlik bytecode into Java bytecode by finding an error in the software was quite significant as it made static analysis extremely difficult.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3299110"></a>3.7 &lsquo;Master Key&rsquo; vulnerability</h3></div></div></div><p>In July 2013, it was reported that an <span class="emphasis"><em>Android</em></span> APK signing had been compromised. The error was found in the way cryptographic signatures for applications were handled &ndash; this allowed attackers to execute arbitrary code via an application package file (APK) that is modified in a way that does not violate the cryptographic signature: CVE -2013-4787, a.k.a. <span class="emphasis"><em>Android</em></span> security bug 8219321 and the &lsquo;Master Key&rsquo; vulnerability [<span class="citation"><a href="#citation.2">2</a></span>]. In short, the application update validation process was compromised: it was found possible to repackage a legitimate application while inserting malicious code in the form of duplicates of the original AndroidManifest and classes.dex files, thus providing a way for a legitimate app to be updated with a malicious version. </p><p>An interesting addition to this vulnerability is that the simple unpacking of an APK using any Zip-based unpacker will overwrite multiple files unless special settings are applied, thus complicating static analysis. See <a href="#figure.10">Figure 10</a>.</p><div class="figure"><a id="figure.10"></a><div class="mediaobject"><img alt="Inside &lsquo;Master Key&rsquo; malware, example of multiple files." src="/uploads/images/figures/2016/01/Szalay-10.jpg" /></div><p class="title"><b>Figure&nbsp;10.&nbsp;Inside &lsquo;Master Key&rsquo; malware, example of multiple files.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3609380"></a>3.8 &lsquo;Extra Field&rsquo; vulnerability</h3></div></div></div><p>Following in the steps of &lsquo;Master Key&rsquo;, just a couple of weeks later a similar vulnerability that would allow the bypassing of code verification was found by Chinese researchers [<span class="citation"><a href="#citation.9">9</a></span>]. It was based on the way in which an APK file is verified as an archive and used an object extra field, hence the name &lsquo;Extra Field&rsquo; vulnerability. It did not reach the same sample numbers as the &lsquo;Master Key&rsquo; vulnerability, but was reported to have comparable possible implications due to the fact that it exploited fundamentals of the Android APK, which is a ZIP archive with some special object fields. The flaw was based on a signed unsigned integer mismatch and, as some researchers have pointed out, relevant code testing could have prevented it [<span class="citation"><a href="#citation.10">10</a></span>]. Recognition of the exploited APK is based on identifying an object in a ZIP archive with the changed extra field length followed by the filename &lsquo;classes.dex&rsquo;, where the extra field length is FDFF, i.e. 65,533 (unsigned) or -3 (signed), as shown in <a href="#figure.11">Figure 11</a>.</p><div class="figure"><a id="figure.11"></a><div class="mediaobject"><img alt="Example of malware exploiting the &lsquo;Extra Field&rsquo; vulnerability, showing a changed field." src="/uploads/images/figures/2016/01/Szalay-11.jpg" /></div><p class="title"><b>Figure&nbsp;11.&nbsp;Example of malware exploiting the &lsquo;Extra Field&rsquo; vulnerability, showing a changed field.</b></p></div><p>The fact that it was treated as a signed integer during the classes.dex checksum verification forced a verifier to step back exactly three bytes and read bytes starting from the &lsquo;dex&rsquo; characters and following the contents of the extra field. However, on loading an APK, FDFF is treated as an unsigned integer, which causes the loader to go forward for the length of the extra field, i.e. 65,533 bytes. This could result in the loading of the malicious code that has been inserted into the hacked APK. </p><p><span class="emphasis"><em>Google</em></span> responded with a fix labelled &lsquo;Values in ZIP are unsigned&rsquo; [<span class="citation"><a href="#citation.11">11</a></span>]. Both the &lsquo;Master Key&rsquo; and &lsquo;Extra Field&rsquo; vulnerabilities were based on compromising an <span class="emphasis"><em>Android</em></span> app installer package (APK).</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3456811"></a>4. Static analysis techniques and tools </h2></div></div></div><p>In this section we will provide an overview of the static analysis techniques and tools used for analysing <span class="emphasis"><em>Android</em></span> malware. There are different approaches for static analysis according to one&rsquo;s knowledge and tools arsenal, but here we will discuss the most widely used and straightforward technique. We can broadly classify the static analysis steps as follows:</p><div class="itemizedlist"><ul type="disc"><li><p>Unarchiving &ndash; the APK file is in ZIP format, to verify its contents we need to extract them using tools like <span class="emphasis"><em>UnZip</em></span>.</p></li><li><p>Decoding &ndash; AndroidManifest.xml and Resources.arsc are decoded using tools like <span class="emphasis"><em>apktool</em></span> and <span class="emphasis"><em>Androguard</em></span>.</p></li><li><p>Decompiling .dex &ndash; <span class="emphasis"><em>dex2jar</em></span> and <span class="emphasis"><em>jd-gui </em></span>are used for converting .dex files to .jar format, and then decompiling to Java code respectively. </p></li><li><p>Disassembling .dex &ndash; <span class="emphasis"><em>smali</em></span>/<span class="emphasis"><em>baksmali</em></span> and <span class="emphasis"><em>IDA Pro</em></span> can be used to disassemble the .dex files.</p></li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4879732"></a>5. Evaluation of static analysis tools against exploit samples</h2></div></div></div><p>In this section, static analysis tools will be evaluated against popular exploit samples to highlight the challenges faced when analysing such samples. We won&rsquo;t explain the whole of each exploit, as we have already discussed the details earlier in the paper. Instead, we will discuss only the part that is relevant to the tools analysis. Although we have evaluated tools in the context of exploit samples, most of the evaluation will also be applicable to malware samples that don&rsquo;t use any exploits. The methodology used was to run the samples as an analyst would to verify for analysis, and all the samples that weren&rsquo;t successful in executing, or that posed a challenge for analysis, are discussed below. </p><p>The set of samples evaluated were: </p><div class="itemizedlist"><ul type="disc"><li><p>Andr/MstrKey </p></li><li><p>Andr/DroidD (DroidDream) </p></li><li><p>Andr/DroidRt</p></li><li><p>Andr/Obad</p></li><li><p>Andr/Kongfu (DroidKungFu)</p></li><li><p>Andr/Gmaster (GinMaster) </p></li></ul></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3321269"></a>5.1 Andr/MstrKey-A &ndash; challenge of multiple entries of the same file</h3></div></div></div><p><span class="emphasis"><em>Andr/MstrKey-A SHA1 &ndash; (APK) 78adcaa663d0f33ca014080870ff7a7e27461086</em></span></p><p>The Master Key vulnerability works by having multiple entries of the same filename [<span class="citation"><a href="#citation.12">12</a></span>]. As shown in <a href="#figure.12">Figure 12</a>, there are multiple classes.dex, AndroidManifest.xml and icon.png files.</p><div class="figure"><a id="figure.12"></a><div class="mediaobject"><img alt="Andr/MstrKey-A APK file showing multiple files with the same name." src="/uploads/images/figures/2016/01/Szalay-12.jpg" /></div><p class="title"><b>Figure&nbsp;12.&nbsp;Andr/MstrKey-A APK file showing multiple files with the same name.</b></p></div><p>Because of the duplicate entries with same name, we should pay extra attention when using analysis tools to achieve what we want. </p><p>As the APK file is in ZIP format, the first thing we should do is to extract the APK to verify the classes.dex and AndroidManifest.xml files. When you try to extract the archive contents, if you are not aware of the exploit, it is possible to unintentionally overwrite the files with similar names, as shown in <a href="#figure.13">Figure 13</a>. </p><div class="figure"><a id="figure.13"></a><div class="mediaobject"><img alt="UnZip prompting to replace the existing file." src="/uploads/images/figures/2016/01/Szalay-13.jpg" /></div><p class="title"><b>Figure&nbsp;13.&nbsp;UnZip prompting to replace the existing file.</b></p></div><p>The exploited APK file used for testing has two AndroidManifest files and two classes.dex files. <span class="emphasis"><em>Apktool</em></span> is the tool most commonly used to decode AndroidManifest.xml files and generate smali code from classes.dex. In this case, <span class="emphasis"><em>apktool</em></span> (v1. 5.2) decodes just one AndroidManifest file and one classes.dex file, but the dodgy permissions and code are in the other set of files. In order to decode these files, you have to fix the APK manually to decode the right files, or else decode them yourself manually. Even though this tool is designed to decode only one set of files, it would be useful for it to be able to decode more than one set in future. </p><div class="figure"><a id="figure.14"></a><div class="mediaobject"><img alt="Files after the &lsquo;apktool d&rsquo; command." src="/uploads/images/figures/2016/01/Szalay-14.jpg" /></div><p class="title"><b>Figure&nbsp;14.&nbsp;Files after the &lsquo;apktool d&rsquo; command.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4310737"></a>5.2 Andr/DroidD &ndash; Dex header issue</h3></div></div></div><p><span class="emphasis"><em>SHA (dex) &ndash; b5b41c7c75182ced4121d01a6328f626aaf5a997</em></span></p><p>We came across an Andr/DroidD-Gen sample which IDA Pro showed as corrupt (<a href="#figure.15">Figure 15</a>). When we investigated, we found that the classes.dex file in question had a dex036 header (<a href="#figure.16">Figure 16</a>).</p><div class="figure"><a id="figure.15"></a><div class="mediaobject"><img alt="IDA 6.4adv corrupt error message." src="/uploads/images/figures/2016/01/Szalay-15.jpg" /></div><p class="title"><b>Figure&nbsp;15.&nbsp;IDA 6.4adv corrupt error message.</b></p></div><div class="figure"><a id="figure.16"></a><div class="mediaobject"><img alt="Dex file with dex036 header." src="/uploads/images/figures/2016/01/Szalay-16.jpg" /></div><p class="title"><b>Figure&nbsp;16.&nbsp;Dex file with dex036 header.</b></p></div><p>According to the dex file format [<span class="citation"><a href="#citation.13">13</a></span>], the first eight bytes of the dex file are DEX_FILE_MAGIC (<a href="#figure.17">Figure 17</a>), with &lsquo;dex\n&lt;2 byte version number&gt;\0&rsquo;. In our database, we found that most of the malware had dex035 headers &ndash; which is an older, but still recognized version (API level 13 and earlier), and dex036 is used in the current version (4.x) of dex files [<span class="citation"><a href="#citation.14">14</a></span>]. This issue had already been noticed in IDA, and a fix has been made available [<span class="citation"><a href="#citation.15">15</a></span>], but at the time of writing this paper we still don&rsquo;t have a fix available for the default installation of IDA version 6.4adv. </p><div class="figure"><a id="figure.17"></a><div class="mediaobject"><img alt="Dex header format to offset 0x28." src="/uploads/images/figures/2016/01/Szalay-17.jpg" /></div><p class="title"><b>Figure&nbsp;17.&nbsp;Dex header format to offset 0x28.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2551397"></a>5.3 Android/DroidRt, Andr/Obad-A &ndash; use of unfamiliar opcodes and decompilation</h3></div></div></div><p><span class="emphasis"><em>SHA (dex) &ndash; 90462f3ada7f4d551fc8f7d1e2672c4eea9e8cc8 </em></span></p><p>In <span class="emphasis"><em>Windows</em></span> PE files it is common to see use of obfuscation and anti-analysis codes in order to hinder sample analysis. We have seen previous work where illegal and improper use of opcodes has been suggested to break analysis tools [<span class="citation"><a href="#citation.16">16</a></span>]. Malware authors and developers of commercial packers are aware of this, and use this technique extensively to make analysis of samples difficult. </p><p>We encountered an Andr/DroidRt sample which failed to decompile with <span class="emphasis"><em>dex2jar</em></span> (<a href="#figure.18">Figure 18</a>). </p><div class="figure"><a id="figure.18"></a><div class="mediaobject"><img alt="Error on dex2jar decompilation of file." src="/uploads/images/figures/2016/01/Szalay-18.jpg" /></div><p class="title"><b>Figure&nbsp;18.&nbsp;Error on dex2jar decompilation of file.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/12/Szalay-18-large.jpg" target="_top">here</a> to view a larger version of Figure 18.)</p><p><span class="emphasis"><em>Dex2jar</em></span> failed, saying that the format for opcode 64 could not be found. The opcode 64 documentation says &lsquo;Reads the byte static field identified by the field_id into vx&rsquo; [<span class="citation"><a href="#citation.16">16</a></span>] &ndash; unfamiliar opcodes are usually used to delay reversing. Inserting junk bytes and bad opcodes is a known technique for thwarting reverse engineering, and in the past researchers have shown how insertion of these opcodes has broken analysis tools [<span class="citation"><a href="#citation.16">16</a></span>], [<span class="citation"><a href="#citation.17">17</a></span>] (these techniques are still used effectively). As an added bonus, this sample also failed to work with <span class="emphasis"><em>baksmali 1.4.1</em></span> (<a href="#figure.19">Figure 19</a>), but managed to work with the 2.03 version.</p><div class="figure"><a id="figure.19"></a><div class="mediaobject"><img alt="Error on baksmali 1.4.1, but works with baksmali 2.03." src="/uploads/images/figures/2016/01/Szalay-19.jpg" /></div><p class="title"><b>Figure&nbsp;19.&nbsp;Error on baksmali 1.4.1, but works with baksmali 2.03.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/12/Szalay-19-large.jpg" target="_top">here</a> to view a larger version of Figure 19.)</p><p>Obad has been called one of the most advanced pieces of <span class="emphasis"><em>Android</em></span> malware. It has posed challenges in static analysis as it takes advantage of a vulnerability in the Davlik to Java conversion in <span class="emphasis"><em>dex2jar</em></span> [<span class="citation"><a href="#citation.18">18</a></span>] (<a href="#figure.20">Figure 20</a>).</p><div class="figure"><a id="figure.20"></a><div class="mediaobject"><img alt="Decompiled Obad file with error." src="/uploads/images/figures/2016/01/Szalay-20.jpg" /></div><p class="title"><b>Figure&nbsp;20.&nbsp;Decompiled Obad file with error.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/12/Szalay-20-large.jpg" target="_top">here</a> to view a larger version of Figure 20.)</p><p>Because of the error, the analyst would not be able to see a proper decompiled representation of the code and could come to the wrong conclusion if not analysed correctly. Obad is protected with the <span class="emphasis"><em>dexguard</em></span> commercial packer [<span class="citation"><a href="#citation.19">19</a></span>] &ndash; this means that any application protected with this packer will produce the same issue with <span class="emphasis"><em>dex2jar</em></span>.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4627349"></a>6. Best approach</h2></div></div></div><p>From our evaluation, we have found that several popular and commonly used tools are not suitable for effective static analysis of certain <span class="emphasis"><em>Android</em></span> malware samples. While <span class="emphasis"><em>Android</em></span> malware is growing both in complexity and volume at an exponential rate, the development of new tools and maintenance of existing ones are not matching that pace.</p><p>Even though most of the errors and tricks employed by malware authors to break analysis tools have been known to researchers for a while, the tools are not sufficiently well maintained to implement the necessary changes to overcome these issues. The <span class="emphasis"><em>Android</em></span> SDK tools <span class="emphasis"><em>baksmali</em></span>/<span class="emphasis"><em>smali</em></span> are updated frequently, but they alone are not sufficient to provide full in-depth analysis of malware. In order to be able to understand how complex sophisticated malware works, analysts have to combine static analysis with dynamic tools. The consequence of this is that it buys more time for malware authors to continue their work while analysts spend more time analysing the samples. As a result, the security of <span class="emphasis"><em>Android</em></span> applications and users is affected. To tackle this problem, <span class="emphasis"><em>Google</em></span> should provide resources and funding for widely used tools and maintain them with regular updates to keep in line with malware advancements. Static analysis should be combined with the dynamic and sandbox environment.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3290688"></a>7. Conclusion</h2></div></div></div><p><span class="emphasis"><em>Android</em></span> malware is growing at a steady rate to match its counterparts in the PC world &ndash; we already have several malware families using <span class="emphasis"><em>Android</em></span> exploits. From a web browser exploit to extensive root exploitation, cybercriminals have created complex pieces of malware that comprise multiple exploits and have a high level of obfuscation. Even an <span class="emphasis"><em>Android</em></span> application installer, an APK file validation, has been compromised. By comparing the evolution of <span class="emphasis"><em>Android</em></span> malware from an exploitation of vulnerabilities point of view with the evolution of tools used to analyse the exploit samples, we conclude that existing tools are not sufficiently well maintained to match advancements in malware. </p><p>We would like to add that, despite the fact that <span class="emphasis"><em>Google</em></span> constantly attempts to improve its app verification processes, it is obvious that it is just playing catch-up. We keep seeing cases that involve compromised applications, whether it is down to the process of signature verification or compromised signatures. We anticipate that <span class="emphasis"><em>Android</em></span> malware will grow and become more complex in the future. In order to combat it effectively, we need to find new ways of tackling it, keeping existing tools up to date and investing in new tools to make analysis easier. </p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2141764"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Gartner (March 2014). <span class="bibliosource"><a href="http://techcrunch.com/2014/03/ 27/gartner-devices-forecast-2014/" target="_blank">http://techcrunch.com/2014/03/ 27/gartner-devices-forecast-2014/</a></span>. </p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] <span class="bibliosource"><a href="https://www.cvedetails.com/vulnerability-list/vendor_id-1224/product_id-19997/Google-Android.html&amp;sa=X&amp;ei=rxZ6U4u2N6XN7AaNlYG4BA&amp;ved=0CCgQ7xYoAA&amp;biw=1920&amp;bih=846" target="_blank">http://www.cvedetails.com/vulnerability-list/vendor_id-1224/product_id-19997/Google-Android.html&amp;sa=X&amp;ei=rxZ6U4u2N6XN7AaNlYG4BA&amp;ved=0CCgQ7xYoAA&amp;biw=1920&amp;bih=846</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] <span class="bibliosource"><a href="https://www.cvedetails.com/vulnerability-list/vendor_id-1224/product_id-19997/Google-Android.html" target="_blank">http://www.cvedetails.com/vulnerability-list/vendor_id-1224/product_id-19997/Google-Android.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] <span class="bibliosource"><a href="https://nakedsecurity.sophos.com/2010/11/08/pressure-to-improve-android-security-is-building-up/" target="_blank">http://nakedsecurity.sophos.com/2010/11/08/pressure-to-improve-android-security-is-building-up/</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] <span class="bibliosource"><a href="http://thomascannon.net/blog/2010/11/android-data-stealing-vulnerability/" target="_blank">http://thomascannon.net/blog/2010/11/android-data-stealing-vulnerability/</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] <span class="bibliosource"><a href="https://www.pcworld.com/article/221247/droiddream_becomes_android_market_nightmare.html" target="_blank">http://www.pcworld.com/article/221247/droiddream_becomes_android_market_nightmare.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] CVE-2011-2344. <span class="bibliosource"><a href="https://www.cvedetails.com/vulnerability-list/vendor_id-1224/product_id-19997/Google-Android.html" target="_blank">http://www.cvedetails.com/vulnerability-list/vendor_id-1224/product_id-19997/Google-Android.html</a></span>. </p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] <span class="bibliosource"><a href="https://www.uni-ulm.de/en/in/mi/staff/koenings/catching-authtokens.html" target="_blank">http://www.uni-ulm.de/en/in/mi/staff/koenings/catching-authtokens.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] <span class="bibliosource"><a href="http://www.h-online.com/open/news/item/Second-Android-signature-attack-disclosed-1918061.html" target="_blank">http://www.h-online.com/open/news/item/Second-Android-signature-attack-disclosed-1918061.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] Ducklin, P. Anatomy of another Android hole &ndash; Chinese researchers claim new code verification bypass. <span class="bibliosource"><a href="https://nakedsecurity.sophos.com/2013/07/17/anatomy-of-another-android-hole-chinese-researchers-claim-new-code-verification-bypass/" target="_blank">http://nakedsecurity.sophos.com/2013/07/17/anatomy-of-another-android-hole-chinese-researchers-claim-new-code-verification-bypass/</a></span>. </p></div><div class="bibliomixed"><a id="citation.11"></a><p class="bibliomixed">[11] <span class="bibliosource"><a href="https://android.googlesource.com/platform/libcore/+/9edf43dfcc35c761d97eb9156ac4254152ddbc55" target="_blank">https://android.googlesource.com/platform/libcore/+/9edf43dfcc35c761d97eb9156ac4254152ddbc55</a></span>.</p></div><div class="bibliomixed"><a id="citation.12"></a><p class="bibliomixed">[12] Ducklin, P. Anatomy of a security hole &ndash; Google&rsquo;s &lsquo;Android Master Key&rsquo; debacle explained. <span class="bibliosource"><a href="https://nakedsecurity.sophos.com/2013/07/10/anatomy-of-a-security-hole-googles-android-master-key-debacle-explained/" target="_blank">http://nakedsecurity.sophos.com/2013/07/10/anatomy-of-a-security-hole-googles-android-master-key-debacle-explained/</a></span>. </p></div><div class="bibliomixed"><a id="citation.13"></a><p class="bibliomixed">[13] Dex File Format. <span class="bibliosource"><a href="https://source.android.com/devices/tech/dalvik/dex-format.html" target="_blank">http://source.android.com/devices/tech/dalvik/dex-format.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.14"></a><p class="bibliomixed">[14] Android 4.1.2 Dexfile.h source. <span class="bibliosource"><a href="http://osxr.org/android/source/dalvik/libdex/DexFile.h" target="_blank">http://osxr.org/android/source/dalvik/libdex/DexFile.h</a></span>.</p></div><div class="bibliomixed"><a id="citation.15"></a><p class="bibliomixed">[15] <span class="bibliosource"><a href="http://www.strazzere.com/blog/2013/02/loose-documentation-leads-to-easy-disassembler-breakages/" target="_blank">http://www.strazzere.com/blog/2013/02/loose-documentation-leads-to-easy-disassembler-breakages/</a></span>. </p></div><div class="bibliomixed"><a id="citation.16"></a><p class="bibliomixed">[16] <span class="bibliosource"><a href="http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html" target="_blank">http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.17"></a><p class="bibliomixed">[17] <span class="bibliosource"><a href="http://archive.hack.lu/2013/AbusingDalvikBeyondRecognition.pdf" target="_blank">http://archive.hack.lu/2013/AbusingDalvikBeyondRecognition.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.18"></a><p class="bibliomixed">[18] Dex2Jar. <span class="bibliosource"><a href="https://code.google.com/p/dex2jar/" target="_blank">http://code.google.com/p/dex2jar/</a></span>.</p></div><div class="bibliomixed"><a id="citation.19"></a><p class="bibliomixed">[19] Dexguard. <span class="bibliosource"><a href="http://www.saikoa.com/dexguard" target="_blank">http://www.saikoa.com/dexguard</a></span>.</p></div><div class="bibliomixed"><a id="citation.20"></a><p class="bibliomixed">[20] Unzip. <span class="bibliosource"><a href="http://linux.about.com/od/commands/l/blcmdl1_unzip.htm" target="_blank">http://linux.about.com/od/commands/l/blcmdl1_unzip.htm</a></span>. </p></div><div class="bibliomixed"><a id="citation.21"></a><p class="bibliomixed">[21] Unuchek, R. The most sophisticated Android Trojan. <span class="bibliosource"><a href="https://www.securelist.com/en/blog/8106/The_most_sophisticated_Android_Trojan" target="_blank">https://www.securelist.com/en/blog/8106/The_most_sophisticated_Android_Trojan</a></span>.</p></div><div class="bibliomixed"><a id="citation.22"></a><p class="bibliomixed">[22] <span class="bibliosource"><a href="http://www.strazzere.com/papers/DexEducation-PracticingSafeDex.pdf" target="_blank">http://www.strazzere.com/papers/DexEducation-PracticingSafeDex.pdf</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-SzalayChandraiah.pdf" target="_blank"><img class="ccm-image-block responsive" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" src="/uploads/images/buttons/pdf-download-button.jpg" alt="" width="262" height="45" border="0" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: Evolution of Android exploits from a static analysis tools perspective&url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-evolution-android-exploits-static-analysis-tools-perspective"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2016/01/paper-evolution-android-exploits-static-analysis-tools-perspective'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-evolution-android-exploits-static-analysis-tools-perspective&title=VB2014 paper: Evolution of Android exploits from a static analysis tools perspective"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2016/01/paper-evolution-android-exploits-static-analysis-tools-perspective&t=VB2014 paper: Evolution of Android exploits from a static analysis tools perspective"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-evolution-android-exploits-static-analysis-tools-perspective"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>