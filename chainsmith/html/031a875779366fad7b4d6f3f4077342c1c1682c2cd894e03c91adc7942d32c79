<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: Methods of malware persistence on Mac OS X</title>
<meta name="description" content="As Mac OS X continues to increase in popularity, OS X malware is becoming more common than ever. In his VB2014 paper, Patrick Wardle presents a detailed analysis of Appleâ€™s anti-malware mechanisms (revealing several significant weaknesses), before diving into the bowels of the Mac startup process and detailing points of persistence. He also examines examples of OS X malware to illustrate how code may abuse the OS in order to achieve reboot persistence. Finally, he discusses a novel open-source tool that can enumerate and display persistent OS X binaries that are set to execute automatically upon reboot." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1739;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201410-malware-persistence-MacOSX"></a>VB2014 paper: Methods of malware persistence on Mac OS X</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2014-10-26</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Patrick</span> <span class="surname">Wardle</span></h3><span class="orgname">Synack</span>, <span class="orgdiv">USA</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>As Mac OS X continues to increase in popularity, OS X malware is becoming more common than ever. In his VB2014 paper, Patrick Wardle presents a detailed analysis of Apple&rsquo;s anti-malware mechanisms (revealing several significant weaknesses), before diving into the bowels of the Mac startup process and detailing points of persistence. He also examines examples of OS X malware to illustrate how code may abuse the OS in order to achieve reboot persistence. Finally, he discusses a novel open-source tool that can enumerate and display persistent OS X binaries that are set to execute automatically upon reboot. </p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2689" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2689" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3299112">Abstract</a></span></dt><dt><span class="sect1"><a href="#id2546726">Background</a></span></dt><dt><span class="sect1"><a href="#id3684780">Apple&#39;s anti-malware enhancements and their flaws</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id2974730">XProtect</a></span></dt><dt><span class="sect2"><a href="#id3186597">Gatekeeper</a></span></dt><dt><span class="sect2"><a href="#id4136291">Signed applications</a></span></dt><dt><span class="sect2"><a href="#id3233172">Signed kernel extensions</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3635085">Mac system startup</a></span></dt><dt><span class="sect1"><a href="#id3540386">Methods of persistence</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id2525417">Low-level/pre-OS X</a></span></dt><dt><span class="sect2"><a href="#id2899294">Kernel extensions</a></span></dt><dt><span class="sect2"><a href="#id2958208">Launch daemons/agents</a></span></dt><dt><span class="sect2"><a href="#id2958212">Cron jobs</a></span></dt><dt><span class="sect2"><a href="#id2452527">Login/logout hooks</a></span></dt><dt><span class="sect2"><a href="#id4321902">Login items</a></span></dt><dt><span class="sect2"><a href="#id4509449">Sandboxed login items</a></span></dt><dt><span class="sect2"><a href="#id3319252">Re-opened applications</a></span></dt><dt><span class="sect2"><a href="#id3311167">Startup items</a></span></dt><dt><span class="sect2"><a href="#id4319420">Rc.common</a></span></dt><dt><span class="sect2"><a href="#id4346070">Launchd.conf</a></span></dt><dt><span class="sect2"><a href="#id4319524">DYLD_INSERT_LIBRARIES</a></span></dt><dt><span class="sect2"><a href="#id4114481">Mach-O binary infection</a></span></dt><dt><span class="sect2"><a href="#id3088087">Application-specific persistence</a></span></dt><dt><span class="sect2"><a href="#id3976920">Rest in peace</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3299430">Persistent OS X malware</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3854851">OSX/CallMe</a></span></dt><dt><span class="sect2"><a href="#id2339581">OSX/Flashback</a></span></dt><dt><span class="sect2"><a href="#id4393927">OSX/Crisis</a></span></dt><dt><span class="sect2"><a href="#id3623686">OSX/Janicab</a></span></dt><dt><span class="sect2"><a href="#id4524890">OSX/Kitmos</a></span></dt><dt><span class="sect2"><a href="#id3623463">OSX/Yontoo</a></span></dt><dt><span class="sect2"><a href="#id4654418">OSX/Renepo</a></span></dt><dt><span class="sect2"><a href="#id3001156">OSX/MacProtector</a></span></dt><dt><span class="sect2"><a href="#id2957826">OSX/Clapzok</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3540828">KnockKnock </a></span></dt><dt><span class="sect1"><a href="#id2851530">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3299112"></a>Abstract</h2></div></div></div><p>As <span class="emphasis"><em>Mac OS X </em></span>continues to increase in popularity, <span class="emphasis"><em>OS X </em></span>malware (once a rare phenomenon) is now more common than ever. Therefore, it is essential for cybersecurity and malware analysts to possess an in-depth understanding of <span class="emphasis"><em>OS X </em></span>and how it may be attacked by persistent, malicious code. </p><p>This paper presents a detailed analysis of <span class="emphasis"><em>Apple</em></span>&rsquo;s anti-malware mechanisms (revealing several significant weaknesses), before diving into the bowels of the Mac startup process. Here, points of persistence are detailed comprehensively. Following this, examples of <span class="emphasis"><em>OS X</em></span> malware are examined to illustrate how code may abuse the OS in order to achieve reboot persistence.</p><p>Finally, a novel open-&not;source tool is discussed that can enumerate and display persistent <span class="emphasis"><em>OS X </em></span>binaries that are set to execute automatically upon reboot. Armed with such a tool, users can ensure that they are protected against both current and future persistent <span class="emphasis"><em>OS X</em></span> threats.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2546726"></a>Background</h2></div></div></div><p>Before diving into methods of persistence abused by <span class="emphasis"><em>OS X </em></span>malware, it is important to understand why such a topic is truly relevant. </p><p>As is obvious to even the most na&iuml;ve amongst us, Macs have become more prevalent than ever. According to a recent study by the <span class="emphasis"><em>International Data Corporation</em></span> (<span class="emphasis"><em>IDC</em></span>), <span class="emphasis"><em>Apple</em></span> is now the number three US computer vendor, making up almost 15% of computer sales [<span class="citation"><a href="#citation.1">1</a></span>]. Moreover, if &lsquo;iDevices&rsquo; (<span class="emphasis"><em>iPhones</em></span>, <span class="emphasis"><em>iPads</em></span>, etc.) are added to the equation, <span class="emphasis"><em>Apple</em></span> devices outsold <span class="emphasis"><em>Windows</em></span> PCs globally in Q4 of 2013 [<span class="citation"><a href="#citation.2">2</a></span>]. </p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Mac&rsquo;s growth 2009&ndash;2013." src="/uploads/images/figures/2014/10/figure1-Wardle.png" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Mac&rsquo;s growth 2009&ndash;2013.</b></p></div><p>One of the driving forces behind the increased adoption of <span class="emphasis"><em>Apple</em></span> computers is the notion that <span class="emphasis"><em>OS X</em></span> is immune to malware. This claim was propagated by <span class="emphasis"><em>Apple</em></span>, who claimed &lsquo;[<span class="emphasis"><em>Mac OS X</em></span>] doesn&rsquo;t get PC viruses. A Mac isn&rsquo;t susceptible to the thousands of viruses plaguing <span class="emphasis"><em>Windows</em></span>-based computers&rsquo; [<span class="citation"><a href="#citation.3">3</a></span>].</p><p>Ironically, the first personal computer virus discovered in the wild (Elk Cloner), was a Mac virus that infected <span class="emphasis"><em>Apple II</em></span>s [<span class="citation"><a href="#citation.4">4</a></span>]. Since then, Mac malware has flourished. Just last year, over 30 new <span class="emphasis"><em>OS X</em></span> malware families were discovered, some infecting the corporate systems of companies such as <span class="emphasis"><em>Apple</em></span>, <span class="emphasis"><em>Facebook</em></span>, and <span class="emphasis"><em>Twitter</em></span> [<span class="citation"><a href="#citation.5">5</a></span>], [<span class="citation"><a href="#citation.6">6</a></span>].</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3684780"></a>Apple&#39;s anti-malware enhancements and their flaws</h2></div></div></div><p>In recent versions of <span class="emphasis"><em>OS X</em></span>, <span class="emphasis"><em>Apple</em></span> has introduced a myriad of security enhancements which aim to thwart malware. Examples of these enhancements include: <span class="emphasis"><em>XProtect</em></span> (<span class="emphasis"><em>Apple</em></span>&rsquo;s built-in anti virus solution), <span class="emphasis"><em>Gatekeeper</em></span> (which verifies downloaded software), sandboxing (which prevents <span class="emphasis"><em>Mac Store</em></span> applications from accessing OS-level components), and signed-code requirements (where signatures are verified and only signed kernel extensions can be loaded). While these are spun by <span class="emphasis"><em>Apple</em></span>&rsquo;s marketing team as proactive security measures, in reality they are more reactive and act as an acknowledgement of the <span class="emphasis"><em>OS X </em></span>malware problem. Moreover, while they are a step in the right direction, many of these security enhancements are trivial to bypass.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2974730"></a>XProtect</h3></div></div></div><p><span class="emphasis"><em>Apple</em></span>&rsquo;s attempt at an anti-virus product is internally referred to as <span class="emphasis"><em>XProtect</em></span>. Implemented within the CoreServicesUIAgent, it uses signatures from /System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/XProtect.plist to detect <span class="emphasis"><em>OS X</em></span> malware.</p><p><a href="#figure.2">Figure 2</a> shows an entry from the <span class="emphasis"><em>XProtect</em></span> signature file.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="XProtect&rsquo;s signature for LaoShu.A." src="/uploads/images/figures/2014/10/figure2-Wardle.png" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;XProtect&rsquo;s signature for LaoShu.A.</b></p></div><p>The highlighted entry in <a href="#figure.2">Figure 2</a> aims to detect the OSX/LaoShu.A malware by matching a SHA1 hash and a filename (&lsquo;worty&rsquo;). While the benefit of such an exact match/detection scheme is zero false positives, there are several major downsides. For one, a slight change in the malware (the renaming of a file, or a recompilation to change the hash), will prevent a match, and thus detection, from being made. The malware will remain undetected and will be able to execute. Another obvious downside to <span class="emphasis"><em>XProtect</em></span>&rsquo;s signature-based malware detection scheme is that new malware will never be detected. </p><p>Besides the weaknesses in the detection scheme used by <span class="emphasis"><em>XProtect</em></span>, it is plagued by other design issues. In its current implementation, <span class="emphasis"><em>XProtect</em></span> only scans binaries that contain a quarantine attribute. This attribute is set by the application that downloaded the binary (e.g. a browser), not the OS. This is problematic, as an exploit-based attack that manually downloads malware will, of course, do so without setting the quarantine attribute. As such, these binaries will not be scanned, allowing downloaded malware to execute without fear of detection.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3186597"></a>Gatekeeper</h3></div></div></div><p>According to <span class="emphasis"><em>Apple</em></span>, <span class="emphasis"><em>Gatekeeper</em></span> helps protect Macs from malicious apps that are downloaded and installed from the Internet [<span class="citation"><a href="#citation.6">6</a></span>].</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Gatekeeper in action." src="/uploads/images/figures/2014/10/figure3-Wardle.png" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Gatekeeper in action.</b></p></div><p>Contrary to popular belief, <span class="emphasis"><em>Gatekeeper</em></span> (like <span class="emphasis"><em>XProtect</em></span>), is fairly limited in the attacks it can prevent. Specifically, it is limited to only preventing attacks where users are coerced into downloading and installing malicious content (e.g. fake Flash installers or &lsquo;media plug-ins&rsquo;), from infected or rogue websites. This is due to the fact that <span class="emphasis"><em>Gatekeeper</em></span> will only examine binaries that contain a quarantine attribute. As previously mentioned, this attribute must be set by the downloading application. Thus binaries downloaded as the result of a &lsquo;drive by&rsquo; exploit-based attack will not be subjected to examination. Interestingly, this is precisely how employees of <span class="emphasis"><em>Apple</em></span>, <span class="emphasis"><em>Facebook</em></span> and <span class="emphasis"><em>Twitter</em></span> were recently infected by malware which &lsquo;bypassed <span class="emphasis"><em>OS X Gatekeeper </em></span>protection&rsquo; [<span class="citation"><a href="#citation.7">7</a></span>].</p><p>Another shortcoming is based on the fact that, in its default configuration, <span class="emphasis"><em>Gatekeeper</em></span> may allow any signed application to execute. Hence if a malware sample is signed with a valid <span class="emphasis"><em>Apple</em></span> Developer ID (code-signing certificate), it may be able to &lsquo;bypass the <span class="emphasis"><em>Gatekeeper</em></span> security feature&rsquo; [<span class="citation"><a href="#citation.8">8</a></span>].</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4136291"></a>Signed applications</h3></div></div></div><p>Borrowing from <span class="emphasis"><em>iOS</em></span>, <span class="emphasis"><em>OS X </em></span>now verifies all binary signatures. This is important as it allows the OS to verify that binaries have not been subverted (e.g. infected by a virus). Binary infection is a powerful technique as it affords an attacker a way to persist, hide, and inherit trust. For example, imagine a malicious piece of code that infects <span class="emphasis"><em>Safari</em></span>. Every time the user launches <span class="emphasis"><em>Safari</em></span>, the malicious code is also executed (persistence). Since the malicious code may exist solely within the infected binary, no external malicious files or processes are required (stealth). Finally, as the browser is expected to access network resources, malicious code hosted within its process space should also be able to access the network (inheriting trust), even if a personal firewall is installed.</p><p>So what happens if malware infects a signed application or binary? Well, when loading signed binaries (or applications), the OS loader will check the digital signature. Any modifications will invalidate this signature, easily allowing the loader to detect any subversions. By design, the OS loader will then immediately terminate (crash) the modified binary.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="OS X loader terminating a modified signed application." src="/uploads/images/figures/2014/10/figure4-Wardle.png" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;OS X loader terminating a modified signed application.</b></p></div><p>On <span class="emphasis"><em>OS X</em></span> (unlike <span class="emphasis"><em>iOS</em></span>), unsigned apps are allowed to execute freely. During the loading process, the OS loader checks whether the binary is signed by looking for an embedded LC_CODE_SIGNATURE block. If it finds one, it verifies the binary&rsquo;s signature. However, research has revealed that if the LC_CODE_SIGNATURE signature block is removed, the loader performs no verifications, allowing the binary to be modified with no consequences. This is a rather big security issue, as any signed application can be unsigned, then infected with viral code, and will still be allowed to execute. </p><p>To illustrate this security weakness, a python script (unsign.py) was created to &lsquo;unsign&rsquo; and infect <span class="emphasis"><em>Apple</em></span>&rsquo;s signed applications. The script is shown in <a href="#figure.5">Figure 5</a>.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Unsigning (and modifying) an Apple signed application." src="/uploads/images/figures/2014/10/figure5-Wardle.png" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Unsigning (and modifying) an Apple signed application.</b></p></div><p>As shown in <a href="#figure.4">Figure 4</a>, <span class="emphasis"><em>Safari</em></span> was previously terminated when the OS loader detected a modification. However, as <a href="#figure.5">Figure 5</a> illustrates, once unsigned, <span class="emphasis"><em>Safari</em></span>, can be modified, and still able to execute without interference or termination.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3233172"></a>Signed kernel extensions</h3></div></div></div><p>In order to protect the kernel from malicious code (i.e. rootkits), all kernel extensions (or &lsquo;kexts&rsquo;) are required to be signed on <span class="emphasis"><em>OS X Mavericks</em></span>. An unsigned or modified kext will fail to load. Unfortunately for <span class="emphasis"><em>Apple</em></span>, it turns out that this anti-malware mechanism is trivial to bypass. The first method of bypassing these code-signing requirements is described in [<span class="citation"><a href="#citation.9">9</a></span>]. In a nutshell, the user-mode daemon that loads kernel extensions (kextd) is responsible for verifying the signature. Yes, the signature is verified in user mode &ndash; fail! This is clearly a security issue, since it means that an attacker can easily subvert (turn off) the user-mode checks, then load any unsigned kext. As described in [<span class="citation"><a href="#citation.9">9</a></span>], this can be accomplished by injecting code into the kextd, then patching out the code-signing checks (in the checkKextSignature() function). For illustrative purposes, this can also be accomplished via a debugger, as shown in <a href="#figure.6">Figure 6</a>.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Patching out kext code-signing requirements." src="/uploads/images/figures/2014/10/figure6-Wardle.png" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Patching out kext code-signing requirements.</b></p></div><p>The publicly described technique requires some pretty low-level hacking (e.g. code injection and in-memory patching). Research performed at the start of the year revealed a non-public, 0-day technique that allowed any unsigned kext to be loaded. (<span class="emphasis"><em>This technique (or a slight variation) was later discussed independently at Black Hat Asia by Team T5 [<span class="citation"><a href="#citation.10">10</a></span>].</em></span>) By first stopping the daemon that is responsible for loading kernel extensions (kextd), then attempting to load the unsigned kext with the kextload command, an alternate code path is executed. This code path loads the kext directly into the kernel, bypassing the logic that enforces the kext code-signing requirements. </p><p>In the case of computer security, ignorance is not bliss. The various weaknesses in the <span class="emphasis"><em>OS X </em></span>anti-malware/security mechanisms presented above should be a cause for concern for the ever-growing Mac user base, especially as <span class="emphasis"><em>OS X </em></span>malware is an ever-growing threat. One way to combat such threats is to gain a thorough understanding of the Mac system startup process, identifying methods of persistence that are abused by <span class="emphasis"><em>OS X </em></span>malware. With this information, persistent malware may be detected generically or, ideally, even prevented. </p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3635085"></a>Mac system startup</h2></div></div></div><p>Before cataloguing methods of persistence abused by <span class="emphasis"><em>OS X </em></span>malware, it is important to understand what happens when a Mac is powered on.</p><p>The boot/startup process is somewhat complex, but can be broken down into easily understandable stages. These stages include power-on/boot, kernel initialization, the execution of launchd daemon, and the LoginWindow process. It should be noted that many of the low-level technical details of the startup process are beyond the scope of this paper. However, interested readers are encouraged to consult [<span class="citation"><a href="#citation.11">11</a></span>] for a very comprehensive and thorough discussion of the entire startup process. </p><p>Early startup covers everything from power-on, until the kernel (<span class="emphasis"><em>OS X</em></span>) begins execution. Once power is present, the bootROM takes over. The bootROM, or firmware, is the first code to execute. It verifies memory, begins hardware initialization and selects the OS partition. Once complete, the bootROM executes the boot.efi program. This performs a variety of actions such as initializing the device tree (IO registry), locating and loading the kernel into memory, loading any boot kernel extensions, and finally jumping to the kernel&rsquo;s entry point. </p><p>Once the early boot stage is complete, <span class="emphasis"><em>OS X </em></span>begins its initialization. This starts with the kernel, which is composed of various sub-systems (each of which must be initialized). First, the Mach subsystem is initialized, then IOKit loads all device specific kexts. Finally, the BSD subsystem initializes, which most notably includes executing launchd, the first user mode process. </p><p>Launchd, as its name suggests, launches all daemons and agents (both of which are somewhat conceptually similar to <span class="emphasis"><em>Windows</em></span> services). As the first process (pid of 0x1), it is an ancestor of all other processes. </p><p>The final step before reaching the desktop is authenticating the user. This is handled by the LoginWindow process, which authenticates the user, sets up their environment, and then hangs around to manage the user&rsquo;s session. Once the user is presented with their desktop, the Mac system startup process is complete. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3540386"></a>Methods of persistence</h2></div></div></div><p>A decent understanding of the Mac startup process provides the necessary background for examining the ways in which it may be abused to achieve persistence. Before diving in, recall that persistence is essential for malware, as it ensures that whenever a computer is restarted, the malicious code is automatically re executed by the OS.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2525417"></a>Low-level/pre-OS X</h3></div></div></div><p>Starting at the lowest level, there are several options for persistence. While these options are complex, and often hardware specific, they run &lsquo;below&rsquo; (before) the OS, and thus are very difficult to detect. Possible low-level options for persistence may include: re-flashing the firmware, installing a malicious EFI component, or even infecting boot.efi. It should be noted that, due to the complexities of these techniques, each could fill a paper unto themselves. For a more in-depth analysis of low-level methods of persistence, interested readers should consult [<span class="citation"><a href="#citation.12">12</a></span>], an intriguing paper on Mac EFI rootkits.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2899294"></a>Kernel extensions</h3></div></div></div><p>Since code in the kernel runs at the highest privilege level, it is a great place for advanced malware to live. Malware that executes here is often referred to as a rootkit. It is fairly trivial to create a persistent kernel extension that will automatically be executed by the OS whenever the computer is restarted. First, a kext can be created via the &lsquo;Generic Kernel Extension&rsquo; template in XCode, as described in <span class="emphasis"><em>Apple</em></span>&rsquo;s documentation [<span class="citation"><a href="#citation.13">13</a></span>]. It is important to set the kext&rsquo;s match category (in its Info.plist) to &lsquo;IOResources.&rsquo; As described in [<span class="citation"><a href="#citation.11">11</a></span>], this is &lsquo;a special provider class that provides system-wide resources&rsquo; and ensures that, once installed, the kext will automatically be started by <span class="emphasis"><em>OS X</em></span>.</p><p>To install a kext persistently, it should be copied into one of the <span class="emphasis"><em>OS X </em></span>kext directories: /System/Library/Extensions or /Library/Extensions. </p><p>Once copied to an install directory, the kext should be set to be owned by root and, optionally, the kernel cache rebuilt. If these steps are followed, the kext will automatically be loaded each time the OS is (re)loaded. </p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Installing a persistent kernel extension." src="/uploads/images/figures/2014/10/figure7-Wardle.png" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Installing a persistent kernel extension.</b></p></div><p>As mentioned previously, starting with <span class="emphasis"><em>OS X Mavericks</em></span>, kext extensions must be signed. However, malware may abuse several previously stated methods in order to bypass this requirement.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2958208"></a>Launch daemons/agents</h3></div></div></div><p>While code that runs in the kernel is very powerful, it is difficult to get right. Running in user mode is far simpler and thus often preferable. Launch daemons and agents are the &lsquo;<span class="emphasis"><em>Apple</em></span>-approved&rsquo; way to persist non-application binaries (e.g. software updaters, anti-virus products, etc.). Both launch daemons and launch agents are commonly abused by<span class="emphasis"><em> OS X </em></span>malware as a means to gain persistence. Launch daemons are non interactive, and run before user login. On the other hand, launch agents run once the user has logged in, and may be interactive. Creating a persistent launched daemon or agent is as simple as creating the binary, then placing a configuration property list in one of the launch daemon or agent directories, as shown in <a href="#table.1">Table 1</a>.</p><div class="table"><a id="table.1"></a><table border="1" summary="Launch daemon/agent plist directories."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Launch daemon (plist) directories</th><th align="center">Launch agent (plist) directories</th></tr></thead><tbody><tr><td>/System/Library/LaunchDaemons</td><td>/System/Library/LaunchAgents</td></tr><tr><td>/Library/LaunchDaemons</td><td>/Library/LaunchAgents and ~/Library/LaunchAgents</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Launch daemon/agent plist directories.</b></p></div><p>Property lists (or &lsquo;plists&rsquo; in <span class="emphasis"><em>Apple</em></span> parlance) are xml files that are used by<span class="emphasis"><em> OS X</em></span> to store serialized objects. In the case of the launch daemons and agents, there is a plist for each daemon or agent that contains required configuration information. These files are processed by the OS as part of its initialization process and can contain key value pairs that may instruct the OS to automatically start the daemon or agent. <a href="#figure.8">Figure 8</a> shows a snippet from an example launch daemon/agent configuration plist file. Besides containing the path to the binary image of the daemon or agent (and any program arguments), it also contains a key value pair (RunAtLoad: true), to indicate that it should be started automatically by the OS.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="A launch daemon/agent plist." src="/uploads/images/figures/2014/10/figure8-Wardle.png" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;A launch daemon/agent plist. </b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2958212"></a>Cron jobs</h3></div></div></div><p>Containing a large amount of BSD code and logic within its core, <span class="emphasis"><em>OS X</em></span> presents many &lsquo;Unix-y&rsquo; flavoured persistence mechanisms that may be abused by <span class="emphasis"><em>OS X </em></span>malware. Cron jobs are an example of exactly this.<span class="emphasis"><em> OS X</em></span> supports cron jobs, which can be used to execute a command or script at certain intervals. For example, <a href="#figure.9">Figure 9</a> illustrates how a cron job can be created to echo some text each minute. To register the cron job, the command to execute is saved to file, then registered via the crontab command. To confirm the registration of the command, the crontab command is re-executed with the &lsquo;-l&rsquo; parameter.</p><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="Cron job creation/enumeration." src="/uploads/images/figures/2014/10/figure9-Wardle.png" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;Cron job creation/enumeration.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2452527"></a>Login/logout hooks</h3></div></div></div><p>By creating a login or logout hook, a script or command can automatically be executed whenever a user logs in or out. <span class="emphasis"><em>Apple</em></span> states that these hooks are deprecated [<span class="citation"><a href="#citation.14">14</a></span>], but they still work on <span class="emphasis"><em>OS X Mavericks</em></span>. The &lsquo;defaults&rsquo; command can be used to create such a hook. Simply specify a write action, the com.apple.loginwindow.plist file, and then script or command to persist (see <a href="#figure.10">Figure 10</a>). </p><div class="figure"><a id="figure.10"></a><div class="mediaobject"><img alt="Creation of a login hook." src="/uploads/images/figures/2014/10/figure10-Wardle.png" /></div><p class="title"><b>Figure&nbsp;10.&nbsp;Creation of a login hook.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4321902"></a>Login items</h3></div></div></div><p>For applications, login items are the &lsquo;<span class="emphasis"><em>Apple</em></span>-approved&rsquo; way to persist. Anything that&rsquo;s registered as a login item is visible in a GUI, via the System Preferences app. Login items are stored in the user&rsquo;s Library/Preferences directory, in a plist file named com.apple.loginitems.plist. This file contains an entry for each login item, which contains the name of the item, whether it should be hidden, and base64-encoded data containing the path to the persistent application. Login items can be created via the GUI, programmatically by utilizing the &lsquo;launch services&rsquo; API, or by directly manipulating the login item&rsquo;s plist (com.apple.loginitems.plist).</p><div class="figure"><a id="figure.11"></a><div class="mediaobject"><img alt="Login item: in the GUI and plist." src="/uploads/images/figures/2014/10/figure11-Wardle.png" /></div><p class="title"><b>Figure&nbsp;11.&nbsp;Login item: in the GUI and plist.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4509449"></a>Sandboxed login items</h3></div></div></div><p>With the introduction of the application sandbox, applications downloaded from the Mac application store can no longer create or register themselves as traditional login items. To maintain compatibility, <span class="emphasis"><em>Apple</em></span> designed a new way in which sandboxed applications could create login items. In order to register an application persistently in this manner, two applications are required: a main application and a helper. The application to persist (the helper), should be placed into a LoginItems sub directory of the main application, as shown in <a href="#figure.12">Figure 12</a>.</p><div class="figure"><a id="figure.12"></a><div class="mediaobject"><img alt="Required layout for a sandboxed login item." src="/uploads/images/figures/2014/10/figure12-Wardle.png" /></div><p class="title"><b>Figure&nbsp;12.&nbsp;Required layout for a sandboxed login item.</b></p></div><p>Once executed, the main application should invoke the SMLoginItemSetEnabled() function. This function causes the helper application to persist, and ensures that it will automatically be executed whenever the user logs in. </p><div class="figure"><a id="figure.13"></a><div class="mediaobject"><img alt="Code to persist a sandboxed login item." src="/uploads/images/figures/2014/10/figure13-Wardle.png" /></div><p class="title"><b>Figure&nbsp;13.&nbsp;Code to persist a sandboxed login item.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3319252"></a>Re-opened applications</h3></div></div></div><p><span class="emphasis"><em>OS X</em></span> recently introduced a feature that automatically reopens applications whenever the user (re)logs in. The applications to reopen are stored in a plist within the user&rsquo;s Library/Preferences/ByHost directory. Viewing the contents of this plist reveals keys such as the ID of the application, whether to hide it, and of course the path to the application. While there is not a (documented) programmatic API to manipulate the re-opened application plist directly, it may be possible to modify it directly in order to gain persistence.</p><div class="figure"><a id="figure.14"></a><div class="mediaobject"><img alt="Plist entry of a re-launched application (terminal.app)." src="/uploads/images/figures/2014/10/figure14-Wardle.png" /></div><p class="title"><b>Figure&nbsp;14.&nbsp;Plist entry of a re-launched application (terminal.app). </b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3311167"></a>Startup items</h3></div></div></div><p>Another deprecated technique that still works on <span class="emphasis"><em>OS X Mavericks </em></span>is &lsquo;startup items&rsquo;. <span class="emphasis"><em>Apple</em></span> documentation explains that startup items allow a command or script to automatically be executed during OS X initialization. Creating a startup item involves placing two files into a startup item directory. The first file is a script that is to be executed automatically. The other file must be named &lsquo;StartupParameters.plist&rsquo; and must contain a &lsquo;Provides&rsquo; key that contains the name of the script file. Both of these files should be placed in a sub-directory in either the /System/Library/StartupItems or /Library/StartupItems directory. The name of the sub-directory must be the same as the name of the script file (and the value of the &lsquo;Provides&rsquo; key in the StartupParameters.plist). <a href="#figure.15">Figure 15</a> illustrates the required file-system layout of a startup item. </p><div class="figure"><a id="figure.15"></a><div class="mediaobject"><img alt="Directory structure of a startup item." src="/uploads/images/figures/2014/10/figure15-Wardle.png" /></div><p class="title"><b>Figure&nbsp;15.&nbsp;Directory structure of a startup item.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4319420"></a>Rc.common</h3></div></div></div><p>RC scripts are used in another BSD-flavoured persistence technique that works on <span class="emphasis"><em>OS X</em></span>, allowing scripts or commands to automatically be executed. For example, the rc.common file can be edited to insert arbitrary commands that will automatically execute when <span class="emphasis"><em>OS X </em></span>starts.</p><div class="figure"><a id="figure.16"></a><div class="mediaobject"><img alt="Injecting commands into rc.common." src="/uploads/images/figures/2014/10/figure16-Wardle.png" /></div><p class="title"><b>Figure&nbsp;16.&nbsp;Injecting commands into rc.common.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4346070"></a>Launchd.conf</h3></div></div></div><p>Recall that launchd is the first user-mode program to execute during <span class="emphasis"><em>OS X</em></span>&rsquo;s initialization. The launchd.conf file, as its name suggests, contains configuration parameters for launchd. As launchd.conf can contain arbitrary commands (via the bsexec command), malware can inject malicious instructions in order to achieve persistence.</p><div class="figure"><a id="figure.17"></a><div class="mediaobject"><img alt="Injecting commands into launched.conf." src="/uploads/images/figures/2014/10/figure17-Wardle.png" /></div><p class="title"><b>Figure&nbsp;17.&nbsp;Injecting commands into launched.conf.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4319524"></a>DYLD_INSERT_LIBRARIES</h3></div></div></div><p>Via the DYLD_INSERT_LIBRARIES environment variable, <span class="emphasis"><em>OS X</em></span>provides a way to load arbitrary dynamic libraries (&lsquo;dylibs&rsquo;) into a process. Specifically, when loading a process, the dynamic loader will examine the DYLD_INSERT_LIBRARIES variable and load any libraries it specifies. By abusing this technique, an attacker can ensure that a malicious library will persistently be loaded into a targeted process whenever that process is started. </p><p>There are two main ways to set the DYLD_INSERT_LIBRARIES environment variable so that arbitrary libraries will be loaded into a specific (targeted) process. When targeting a launch daemon or agent, an &lsquo;EnvironmentVariables&rsquo; dictionary may be added to launch item&rsquo;s plist. For targeting an application, the application&rsquo;s Info.plist can be altered to contain a &lsquo;LSEnvironment&rsquo; dictionary, see<a href="#figure.18">Figure 18</a>. </p><div class="figure"><a id="figure.18"></a><div class="mediaobject"><img alt="The application&rsquo;s Info.plist is altered to contain a &lsquo;LSEnvironment&rsquo; dictionary." src="/uploads/images/figures/2014/10/figure18-Wardle.png" /></div><p class="title"><b>Figure&nbsp;18.&nbsp;The application&rsquo;s Info.plist is altered to contain a &lsquo;LSEnvironment&rsquo; dictionary.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4114481"></a>Mach-O binary infection</h3></div></div></div><p>Computer viruses are one of the oldest forms of malware. Viruses infect files by injecting viral code in order to replicate. However, this viral code can also provide persistence: any time the infected binary is executed, the virus code will be executed as well. Since <span class="emphasis"><em>OS X </em></span>binaries (and applications) can be unsigned, viral infection may be back in fashion! There are many ways to infect an <span class="emphasis"><em>OS X</em></span> (mach-O) binary. The simplest method, described initially by the (in)famous VX&rsquo;er roy g biv, involves injecting some viral code into a target binary, then hijacking the entry point to point to the virus code. </p><p><a href="#figure.19">Figure 19</a> shows the LC_MAIN load command within an uninfected macho-O binary. This load command contains the &lsquo;Entry Offset,&rsquo; or entry point, which may be hijacked during infection (to point to the viral code). </p><div class="figure"><a id="figure.19"></a><div class="mediaobject"><img alt="Mach-O binary structure/entry offset." src="/uploads/images/figures/2014/10/figure19-Wardle.png" /></div><p class="title"><b>Figure&nbsp;19.&nbsp;Mach-O binary structure/entry offset.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3088087"></a>Application-specific persistence</h3></div></div></div><p>The final persistence mechanism covered in this paper is more of a generic class: application-specific persistence. Many applications (such as browsers) support plug-ins, which are generally dynamic libraries that are loaded automatically when the application is run. While plug-ins can legitimately extend the functionality of an application, malware can abuse this functionality to gain persistence. Applications that may be subverted include browsers such as <span class="emphasis"><em>Safari</em></span>, <span class="emphasis"><em>Firefox</em></span> and <span class="emphasis"><em>Chrome</em></span>, or others such as <span class="emphasis"><em>iTunes</em></span> [<span class="citation"><a href="#citation.15">15</a></span>].</p><p>It should be noted that sometimes it may be challenging to coerce an application to execute a malicious plug-in (it might load the plug-in, then decide it doesn&rsquo;t like it). However, if the persistent plug-in exports a constructor (see <a href="#figure.19">Figure 19</a>), it will automatically be executed (by the OS loader) as soon as it is loaded. Thus, even if the host application rejects the plug-in, it is too late as persistent code execution has already been achieved. </p><div class="figure"><a id="figure.20"></a><div class="mediaobject"><img alt="Dynamic library (plug-in) constructor." src="/uploads/images/figures/2014/10/figure20-Wardle.png" /></div><p class="title"><b>Figure&nbsp;20.&nbsp;Dynamic library (plug-in) constructor.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3976920"></a>Rest in peace</h3></div></div></div><p>While researching methods of malware persistence, several previously functional persistence techniques were found to have either been fully deprecated or removed in <span class="emphasis"><em>OS X Mavericks</em></span>. These include modifying environment.plist, modifying com.apple.SystemLoginItems.plist and setting an &lsquo;AutoLaunchedApplicationDictionary&rsquo; within the /Library/Preferences/loginwindow file. </p><p>While these methods of persistence are (or were?) common in older <span class="emphasis"><em>OS X</em></span> malware samples, they are likely to fade into oblivion as they no longer work on the latest version of <span class="emphasis"><em>OS X</em></span>. </p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3299430"></a>Persistent OS X malware</h2></div></div></div><p>While not all of the methods of persistence presented are (yet) abused by <span class="emphasis"><em>OS X </em></span>malware, many are. The following section examines several <span class="emphasis"><em>OS X </em></span>malware samples and reveals their persistence mechanisms.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3854851"></a>OSX/CallMe</h3></div></div></div><p>A few years ago, somebody (likely the Chinese government), started targeting Tibetan activists with malicious <span class="emphasis"><em>Word</em></span> documents that attempted to exploit CVE-2009-0563. The payload of these attacks was named OSX/CallMe [<span class="citation"><a href="#citation.16">16</a></span>]. This malware was fairly basic, providing the attackers with the ability to execute arbitrary commands on an infected host, as well as exfiltrating the victim&rsquo;s contacts (address book) [<span class="citation"><a href="#citation.17">17</a></span>]. In order to persist, CallMe installs itself as an auto launched launch daemon. Specifically, it creates a launch daemon plist, realPlayerUpdate.plist, within the /Library/LaunchDaemons directory that references the malware&rsquo;s binary, .realPlayerUpdate (see <a href="#figure.21">Figure 21</a>). </p><div class="figure"><a id="figure.21"></a><div class="mediaobject"><img alt="CallMe&rsquo;s launch daemon persistence." src="/uploads/images/figures/2014/10/figure21-Wardle.png" /></div><p class="title"><b>Figure&nbsp;21.&nbsp;CallMe&rsquo;s launch daemon persistence.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2339581"></a>OSX/Flashback</h3></div></div></div><p>Flashback shattered the notion that <span class="emphasis"><em>OS X</em></span> was immune to malware. By exploiting a known, but unpatched Java vulnerability, Flashback was able to automatically infect users as they visited a compromised or malicious website. At its height, it amassed over 600,000 infected hosts, making it the most &lsquo;successful&rsquo; <span class="emphasis"><em>OS X </em></span>malware to date [<span class="citation"><a href="#citation.18">18</a></span>]. Flashback&rsquo;s goal was simply financial gain &ndash; by injecting ads into users&rsquo; web sessions. To ensure it was (re)executed each time an infected computer was rebooted, it installed itself as a user launch agent (com.java.update.plist, .jupdate). (See <a href="#figure.22">Figure 22</a>.)</p><div class="figure"><a id="figure.22"></a><div class="mediaobject"><img alt="Flashback&rsquo;s launch agent persistence." src="/uploads/images/figures/2014/10/figure22-Wardle.png" /></div><p class="title"><b>Figure&nbsp;22.&nbsp;Flashback&rsquo;s launch agent persistence.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4393927"></a>OSX/Crisis</h3></div></div></div><p>According to online sources, OSX/Crisis is &lsquo;an expensive rootkit used by governments&rsquo; [<span class="citation"><a href="#citation.19">19</a></span>]. Delivered via targeted exploits, it provides extensive surveillance capabilities by collecting audio, images, screenshots and keystrokes. Crisis also employs some fairly sophisticated stealth capabilities via a rootkit (kernel) component that can hide processes and files. <a href="#figure.23">Figure 23</a> illustrates some pseudo-disassembly, revealing the malware building a path to a file within the user&rsquo;s launch agent directory. In other words, the disassembly shows the malware preparing to persist as a launch agent.</p><div class="figure"><a id="figure.23"></a><div class="mediaobject"><img alt="Crisis&rsquo; launch agent persistence." src="/uploads/images/figures/2014/10/figure23-Wardle.png" /></div><p class="title"><b>Figure&nbsp;23.&nbsp;Crisis&rsquo; launch agent persistence.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3623686"></a>OSX/Janicab</h3></div></div></div><p>Janicab is a somewhat unique <span class="emphasis"><em>OS X</em></span> malware sample, as it is written in Python (though compiled for distribution). The malware is also signed with an <span class="emphasis"><em>Apple</em></span> Developer ID, probably in an attempt hide its maliciousness and thwart <span class="emphasis"><em>Gatekeeper</em></span>. Since it is written in Python, the malware is easy to analyse and uncovering its persistence mechanism is trivial. As may be seen in the malware installer&rsquo;s code, a cron job (set to execute every minute) is created to ensure that the malware is persisted (see <a href="#figure.24">Figure 24</a>). It should be noted that once the malware is installed, the crontab -l command easily reveals the malicious cron job.</p><div class="figure"><a id="figure.24"></a><div class="mediaobject"><img alt="Janicab&rsquo;s cron job persistence." src="/uploads/images/figures/2014/10/figure24-Wardle.png" /></div><p class="title"><b>Figure&nbsp;24.&nbsp;Janicab&rsquo;s cron job persistence.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4524890"></a>OSX/Kitmos</h3></div></div></div><p>Kitmos is another<span class="emphasis"><em> OS X </em></span>malware sample that targets activists. Discovered on an activist&rsquo;s computer during the Oslo Freedom Forum Workshop, Kitmos takes screenshots and uploads them to a remote command and control server [<span class="citation"><a href="#citation.20">20</a></span>]. As the disassembly in <a href="#figure.25">Figure 25</a> shows, the malware invokes the LSSharedFileListInsertItemURL() function to add itself as a login item for the current user. Once registered as a login item, the malware will automatically be (re)executed by the OS whenever the user logs in.</p><div class="figure"><a id="figure.25"></a><div class="mediaobject"><img alt="Kitmos&rsquo; login item persistence." src="/uploads/images/figures/2014/10/figure25-Wardle.png" /></div><p class="title"><b>Figure&nbsp;25.&nbsp;Kitmos&rsquo; login item persistence.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3623463"></a>OSX/Yontoo</h3></div></div></div><p>It is fairly common for malware to use social engineering tricks to coerce the user into infecting themselves. Yontoo masquerades as an &lsquo;HD video codec&rsquo; to trick users who visit compromised or malicious websites into installing the malware. The malware creates malicious plug-ins for <span class="emphasis"><em>Safari</em></span>, <span class="emphasis"><em>Firefox</em></span> and <span class="emphasis"><em>Chrome</em></span>. This allows the malware to automatically be executed whenever the user launches their browser. Once loaded into the context of the browser&rsquo;s process content, the plug-ins transmit information about the loaded pages to a remote server as well as injecting ads into the user&rsquo;s browsing session (see <a href="#figure.26">Figure 26</a>). </p><div class="figure"><a id="figure.26"></a><div class="mediaobject"><img alt="Yontoo&rsquo;s browser extension(s) persistence." src="/uploads/images/figures/2014/10/figure26-Wardle.png" /></div><p class="title"><b>Figure&nbsp;26.&nbsp;Yontoo&rsquo;s browser extension(s) persistence.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4654418"></a>OSX/Renepo</h3></div></div></div><p>Renepo is an older <span class="emphasis"><em>OS X</em></span> malware sample that disables security mechanisms before downloading and executing other &lsquo;hacker tools&rsquo; such as password crackers [<span class="citation"><a href="#citation.21">21</a></span>]. Since this malware is a script (which helpfully includes comments), it is easy to understand its installation and persistence logic. As shown in <a href="#figure.27">Figure 27</a>, it persists as a startup item.</p><div class="figure"><a id="figure.27"></a><div class="mediaobject"><img alt="Renepo&rsquo;s startup item persistence." src="/uploads/images/figures/2014/10/figure27-Wardle.png" /></div><p class="title"><b>Figure&nbsp;27.&nbsp;Renepo&rsquo;s startup item persistence.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3001156"></a>OSX/MacProtector</h3></div></div></div><p>MacProtector is a fake (or &lsquo;rogue&rsquo;) anti-virus product. When a user visits a compromised or malicious website, MacProtector tries to convince the user that their computer is infected and that they should download an application to &lsquo;fix&rsquo; it [<span class="citation"><a href="#citation.22">22</a></span>]. Unfortunately, if the user allows the downloaded installer to complete, they become infected with MacProtector. Reverse engineering this malware reveals that it installs itself as a login item. Though this will cause the malware to persist, it will also make it appear in the GUI (as well as in the login item&rsquo;s plist). (See <a href="#figure.28">Figure 28</a>.)</p><div class="figure"><a id="figure.28"></a><div class="mediaobject"><img alt="MacProtector&rsquo;s login item persistence." src="/uploads/images/figures/2014/10/figure28-Wardle.png" /></div><p class="title"><b>Figure&nbsp;28.&nbsp;MacProtector&rsquo;s login item persistence.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2957826"></a>OSX/Clapzok</h3></div></div></div><p>The previously discussed <span class="emphasis"><em>OS X </em></span>malware samples are generally all stand-&not;alone binaries or applications. OSX/Clapzok bucks this trend: it is a classic virus that infects binaries both to spread and to gain persistence [<span class="citation"><a href="#citation.23">23</a></span>]. It works by injecting viral code into a binary, then hijacking the entry point. However, since Clapzok infects signed apps (without un-signing them), it will likely cause major annoyances and, as a result, will be easily discovered (see <a href="#figure.29">Figure 29</a>).</p><div class="figure"><a id="figure.29"></a><div class="mediaobject"><img alt="Clapzok&rsquo;s mach-O infection persistence ." src="/uploads/images/figures/2014/10/figure29-Wardle.png" /></div><p class="title"><b>Figure&nbsp;29.&nbsp;Clapzok&rsquo;s mach-O infection persistence [<span class="citation"><a href="#citation.23">23</a></span>].</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3540828"></a>KnockKnock </h2></div></div></div><p>Research into persistence mechanisms on <span class="emphasis"><em>OS X</em></span> has revealed many locations within the boot process and OS startup sequence that can be abused by malicious code. As we have shown in this paper, many <span class="emphasis"><em>OS X</em></span> malware variants exist in the wild that are abusing several of these persistence mechanisms. Although <span class="emphasis"><em>Apple</em></span> has introduced several anti-malware mitigations, these clearly fall short, as <span class="emphasis"><em>OS X</em></span> users worldwide continue to be infected.</p><p>In order to generically detect persistent <span class="emphasis"><em>OS X </em></span>malware, a new tool has been created that can enumerate and display persistent <span class="emphasis"><em>OS X</em></span> binaries. Named <span class="emphasis"><em>KnockKnock</em></span>, its goal is simple: to tell you who&rsquo;s there! Armed with this tool, users can ensure that they are protected against both current and future <span class="emphasis"><em>OS X</em></span> threats.</p><p>There are many methods of persistence on <span class="emphasis"><em>OS X</em></span> &ndash; and new ones are sure to be found. As such, the open-source, Python-based <span class="emphasis"><em>KnockKnock</em></span> [<span class="citation"><a href="#citation.24">24</a></span>] was designed to use a plug-in-based architecture, where each plug-in can scan for a particular persistence technique. When new persistence techniques are discovered, <span class="emphasis"><em>KnockKnock</em></span> can easily be extended with new plug-ins. Luckily, as its core performs most of the work, writing a plug-in is incredibly simple. This is illustrated in the example in <a href="#figure.30">Figure 30</a>, which shows the main logic for a plug-in that enumerates all launch daemons that are set to execute automatically as a Mac computer boots up.</p><div class="figure"><a id="figure.30"></a><div class="mediaobject"><img alt="KnockKnock launch daemon plug-in." src="/uploads/images/figures/2014/10/figure30-Wardle.png" /></div><p class="title"><b>Figure&nbsp;30.&nbsp;KnockKnock launch daemon plug-in.</b></p></div><p>As the code snippet in <a href="#figure.30">Figure 30</a> illustrates, it only takes about 10 lines of Python code for this plug-in to enumerate a specific persistence class. (For more details, including a comprehensive plug-in-writing guide, see [<span class="citation"><a href="#citation.24">24</a></span>].)</p><p><span class="emphasis"><em>KnockKnock</em></span> has the ability to display persistent <span class="emphasis"><em>OS X </em></span>binaries that are set to execute automatically at each boot. Since <span class="emphasis"><em>KnockKnock</em></span> takes such an unbiased approach, it can generically detect persistent <span class="emphasis"><em>OS X</em></span> malware today, as well as in the future. It should be noted though, that this approach will also list legitimate binaries. However, as <span class="emphasis"><em>KnockKnock</em></span> can filter out unmodified <span class="emphasis"><em>Apple</em></span>-signed binaries, the output is reduced by a factor of roughly 90%, generally leaving a handful of binaries that can quickly be examined and verified manually.</p><p>The screenshots in <a href="#figure.31">Figure 31</a> and <a href="#figure.32">Figure 32</a> show <span class="emphasis"><em>KnockKnock</em></span> revealing various <span class="emphasis"><em>OS X</em></span> malware infections, including OSX/Janicab (cron job) and OSX/CallMe (launch daemon). </p><div class="figure"><a id="figure.31"></a><div class="mediaobject"><img alt="KnockKnock Janicab (runner.pyc) detection." src="/uploads/images/figures/2014/10/figure31-Wardle.png" /></div><p class="title"><b>Figure&nbsp;31.&nbsp;KnockKnock Janicab (runner.pyc) detection.</b></p></div><div class="figure"><a id="figure.32"></a><div class="mediaobject"><img alt="KnockKnock CallMe (.realPlayerUpdate) detection." src="/uploads/images/figures/2014/10/figure32-Wardle.png" /></div><p class="title"><b>Figure&nbsp;32.&nbsp;KnockKnock CallMe (.realPlayerUpdate) detection.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2851530"></a>Conclusion</h2></div></div></div><p>Even in the latest version of <span class="emphasis"><em>Mac OS X</em></span>, <span class="emphasis"><em>Apple</em></span>&rsquo;s anti-malware mitigations fall far short, allowing <span class="emphasis"><em>OS X</em></span> malware to become an ever more pervasive reality. However, by thoroughly understanding the Mac&rsquo;s startup process, points of persistence can be identified, which allow for the generic detection of malware. <span class="emphasis"><em>KnockKnock</em></span>, an open-source tool, aims to aid in this detection and to ensure that everyday users are protected against both current and future <span class="emphasis"><em>OS X</em></span> threats. </p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4577869"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] IDC Worldwide Quarterly PC Tracker, 9 January 2014. <span class="bibliosource"><a href="https://www.idc.com/getdoc.jsp?containerId=prUS24595914" target="_blank">http://www.idc.com/getdoc.jsp?containerId=prUS24595914</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Apple passing Microsoft. <span class="bibliosource"><a href="http://ben-evans.com/benedictevans/2014/2/12/apple-passes-microsoft" target="_blank">http://ben-evans.com/benedictevans/2014/2/12/apple-passes-microsoft</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Apple homepage. 2012. <span class="bibliosource"><a href="https://www.apple.com/" target="_blank">http://www.apple.com/</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Sz&ouml;r, P. The Art of Computer Virus Research and Defense. Symantec Press. 2005.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] F-Secure Threat Report, H1 2013. <span class="bibliosource"><a href="http://www.f-secure.com/static/doc/labs_global/Research/Threat_Report_H1_2013.pdf" target="_blank">http://www.f-secure.com/static/doc/labs_global/Research/Threat_Report_H1_2013.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] OS X: About Gatekeeper. <span class="bibliosource"><a href="https://support.apple.com/kb/ht5290" target="_blank">http://support.apple.com/kb/ht5290</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] Mac malware that infected Facebook bypassed OS X Gatekeeper protection. <span class="bibliosource"><a href="https://arstechnica.com/security/2013/03/mac-malware-that-infected-facebook-bypassed-os-x-gatekeeper-protection/" target="_blank">http://arstechnica.com/security/2013/03/mac-malware-that-infected-facebook-bypassed-os-x-gatekeeper-protection/</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] Researchers find more versions of digitally signed Mac OS X spyware. <span class="bibliosource"><a href="https://www.macworld.com/article/2039640/researchers-find-more-versions-of-digitally-signed-mac-os-x-spyware.html" target="_blank">http://www.macworld.com/article/2039640/researchers-find-more-versions-of-digitally-signed-mac-os-x-spyware.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] Breaking OS X signed kernel extensions with a NOP. <span class="bibliosource"><a href="https://reverse.put.as/2013/11/23/breaking-os-x-signed-kernel-extensions-with-a-nop" target="_blank">http://reverse.put.as/2013/11/23/breaking-os-x-signed-kernel-extensions-with-a-nop</a></span>.</p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] You can&rsquo;t see me. <span class="bibliosource"><a href="https://www.blackhat.com/docs/asia-14/materials/Tsai/Asia-14-Tsai-You-Cant-See-Me-A-Mac-OS-X-Rootkit-Uses-The-Tricks-You-Havent-Known-Yet.pdf" target="_blank">http://www.blackhat.com/docs/asia-14/materials/Tsai/Asia-14-Tsai-You-Cant-See-Me-A-Mac-OS-X-Rootkit-Uses-The-Tricks-You-Havent-Known-Yet.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.11"></a><p class="bibliomixed">[11] Levin, J. Mac OS X and iOS Internals: To the Apple&rsquo;s Core. Wrox. 2012.</p></div><div class="bibliomixed"><a id="citation.12"></a><p class="bibliomixed">[12] DE MYSTERIIS DOM JOBSIVS Mac EFI Rootkits.<span class="bibliosource"><a href="http://ho.ax/De_Mysteriis_Dom_Jobsivs_Black_Hat_Paper.pdf" target="_blank">http://ho.ax/De_Mysteriis_Dom_Jobsivs_Black_Hat_Paper.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.13"></a><p class="bibliomixed">[13] Creating a Device Driver with Xcode. <span class="bibliosource"><a href="https://developer.apple.com/library/mac/documentation/Darwin/Conceptual/KEXTConcept/KEXTConceptIOKit/iokit_tutorial.html#//apple_ref/doc/uid/20002366" target="_blank">https://developer.apple.com/library/mac/documentation/Darwin/Conceptual/KEXTConcept/KEXTConceptIOKit/iokit_tutorial.html#//apple_ref/doc/uid/20002366</a></span>.</p></div><div class="bibliomixed"><a id="citation.14"></a><p class="bibliomixed">[14] Customizing Login and Logout. <span class="bibliosource"><a href="https://developer.apple.com/library/mac/documentation/macosx/conceptual/bpsystemstartup/chapters/CustomLogin.html" target="_blank">https://developer.apple.com/library/mac/documentation/macosx/conceptual/bpsystemstartup/chapters/CustomLogin.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.15"></a><p class="bibliomixed">[15] iTunes Evil Plugin Proof of Concept. <span class="bibliosource"><a href="https://reverse.put.as/2014/02/15/appledoesntgiveafuckaboutsecurity-itunes-evil-plugin-proof-of-concept/" target="_blank">http://reverse.put.as/2014/02/15/appledoesntgiveafuckaboutsecurity-itunes-evil-plugin-proof-of-concept/</a></span>.</p></div><div class="bibliomixed"><a id="citation.16"></a><p class="bibliomixed">[16] New Targeted Attack on Tibetan Activists Using OS X Discovered. <span class="bibliosource"><a href="https://www.intego.com/mac-security-blog/new-targeted-attack-on-tibetan-activists-using-os-x-discovered/" target="_blank">http://www.intego.com/mac-security-blog/new-targeted-attack-on-tibetan-activists-using-os-x-discovered/</a></span>.</p></div><div class="bibliomixed"><a id="citation.17"></a><p class="bibliomixed">[17] New CallMe malware discovered. <span class="bibliosource"><a href="http://www.thesafemac.com/new-callme-malware-discovered/" target="_blank">http://www.thesafemac.com/new-callme-malware-discovered/</a></span>.</p></div><div class="bibliomixed"><a id="citation.18"></a><p class="bibliomixed">[18] Kaspersky Lab confirms Flashfake/Flashback botnet infected more than 600,000 Mac OS X Computers. <span class="bibliosource"><a href="http://www.kaspersky.com/about/news/virus/2012/Kaspersky_Lab_Confirms_Flashfake_Flashback_Botnet_Infected_more_than_600_000_Mac_OS_X_Computers_Describes_Ramifications_and_Remedies" target="_blank">http://www.kaspersky.com/about/news/virus/2012/Kaspersky_Lab_Confirms_Flashfake_Flashback_Botnet_Infected_more_than_600_000_Mac_OS_X_Computers_Describes_Ramifications_and_Remedies</a></span>.</p></div><div class="bibliomixed"><a id="citation.19"></a><p class="bibliomixed">[19] New OSX/Crisis or Business Cards Gone Wild. <span class="bibliosource"><a href="https://www.intego.com/mac-security-blog/new-osx-crisis-business-cards-gone-wild/" target="_blank">http://www.intego.com/mac-security-blog/new-osx-crisis-business-cards-gone-wild/</a></span>. </p></div><div class="bibliomixed"><a id="citation.20"></a><p class="bibliomixed">[20] OSX Kitmos analysis. <span class="bibliosource"><a href="http://blog.sbarbeau.fr/2013/05/osx-kitmos-analysis.html" target="_blank">http://blog.sbarbeau.fr/2013/05/osx-kitmos-analysis.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.21"></a><p class="bibliomixed">[21] Renepo worm targets Mac OS X users, Sophos reports. <span class="bibliosource"><a href="https://www.sophos.com/en-us/press-office/press-releases/2004/10/va_renepo.aspx" target="_blank">http://www.sophos.com/en-us/press-office/press-releases/2004/10/va_renepo.aspx</a></span>.</p></div><div class="bibliomixed"><a id="citation.22"></a><p class="bibliomixed">[22] Mac Security Threats: How Vulnerable Is Apple? <span class="bibliosource"><a href="http://content.time.com/time/business/article/0,8599,2075218,00.html" target="_blank">http://content.time.com/time/business/article/0,8599,2075218,00.html</a></span>. </p></div><div class="bibliomixed"><a id="citation.23"></a><p class="bibliomixed">[23] Clapzok.A: reversing the OS X part of a multiplatform PoC infector. <span class="bibliosource"><a href="https://reverse.put.as/2013/05/31/clapzok-a-reversing-the-os-x-part-of-a-multiplatform-poc-infector/" target="_blank">http://reverse.put.as/2013/05/31/clapzok-a-reversing-the-os-x-part-of-a-multiplatform-poc-infector/</a></span>.</p></div><div class="bibliomixed"><a id="citation.24"></a><p class="bibliomixed">[24] KnockKnock. <span class="bibliosource"><a href="https://github.com/synack/knockknock" target="_blank">https://github.com/synack/knockknock</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: Methods of malware persistence on Mac OS X&url=https://www.virusbulletin.com/virusbulletin/2014/10/paper-methods-malware-persistence-mac-os-x"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/10/paper-methods-malware-persistence-mac-os-x'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/10/paper-methods-malware-persistence-mac-os-x&title=VB2014 paper: Methods of malware persistence on Mac OS X"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/10/paper-methods-malware-persistence-mac-os-x&t=VB2014 paper: Methods of malware persistence on Mac OS X"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/10/paper-methods-malware-persistence-mac-os-x"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p>Â </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">Â©1989-2022 Virus Bulletin.Â Â Â Â Â Â Â Â <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>Â Â Â Â Â Â Â Â <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>Â Â Â Â Â Â Â Â <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>