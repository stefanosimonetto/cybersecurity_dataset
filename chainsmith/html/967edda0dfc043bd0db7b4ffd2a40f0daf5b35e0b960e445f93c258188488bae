<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2016 paper: One-click fileless infection</title>
<meta name="description" content="There has recently been growing interest in a technique known as fileless infection, where malware authors compromise computers without writing any files to disk. This technique allows the threat to evade detection by file-scanning software while still remaining persistent. This VB2016 paper explains the different fileless infection methods, as well as a new tactic that could allow attackers to perform fileless infection through a classic one-click fraud attack using non-PE files." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 5268;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h2>VB2016 paper: One-click fileless infection</h2>
<h3>Himanshu Anand &amp; Chastine Menrige</h3>
<p>Symantec, India</p>
<p><em>Copyright © 2016 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-9736" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-9736" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-introduction">Introduction</a><br /> <a class="toc-level3" href="#h3-early-examples">Early examples</a><br /> <a class="toc-level3" href="#h3-how-it-works">How it works</a><br /> <a class="toc-level3" href="#h3-notable-malware-use-technique">Notable malware that use this technique</a><br /> <a class="toc-level4" href="#h4-poweliks">Poweliks</a><br /> <a class="toc-level4" href="#h4-bedep">Bedep</a><br /> <a class="toc-level4" href="#h4-kotver">Kotver</a><br /> <a class="toc-level2" href="#h2-fileless-forecast">Fileless forecast</a><br /> <a class="toc-level3" href="#h3-mshtaexe">MSHTA.EXE</a><br /> <a class="toc-level3" href="#h3-hta">HTA</a><br /> <a class="toc-level3" href="#h3-so-why-dont-users-just-use-html-file">So why don't users just use an HTML file?</a><br /> <a class="toc-level3" href="#h3-security-considerations">Security considerations</a><br /> <a class="toc-level3" href="#h3-one-click-fileless-infection">One-click fileless infection</a><br /> <a class="toc-level3" href="#h3-memory-infection">In-memory infection</a><br /> <a class="toc-level3" href="#h3-proof-concept">Proof of concept</a><br /> <a class="toc-level3" href="#h3-variants">Variants</a><br /> <a class="toc-level3" href="#h3-prevention-and-mitigation">Prevention and mitigation</a><br /> <a class="toc-level3" href="#h3-manual-removal">Manual removal</a><br /> <a class="toc-level3" href="#h3-av-solutions">AV solutions</a><br /> <a class="toc-level2" href="#h2-references">References</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>Since last year, there has been growing interest in a technique known as fileless infection, where malware authors compromise computers without writing any files to disk. This technique allows the threat to evade detection by file-scanning software while still remaining persistent.</p>
<p>This paper will explain the different fileless infection methods, as well as a new tactic that could allow attackers to perform fileless infection through a classic one-click fraud attack using non-PE files.</p>
<p>Traditional malware is contained in a file on disk. A registry run key links to this file in order to make the threat persistent. With fileless infection, the malware does not exist on the compromised computer as a normal file. Instead, it is located in a subkey within the computer's registry as a script, such as <em>Windows</em> PowerShell, VBScript, or JavaScript. The payload in the registry is called every time <em>Windows</em> starts.</p>
<p>The one-click fileless infection technique we've seen uses JavaScript, though different scripts could also work. The infection arrives on the computer through an .hta file, which places the JavaScript payload into a registry subkey. The JavaScript code can be triggered every time <em>Windows</em> starts by calling the following:</p>
<pre>rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";alert('payload');</pre>
<p>The JavaScript code can read and decode encoded data from another subkey. This data injects the payload into memory. Every few minutes, the payload checks for its registry entry. If the entry has been deleted, the payload recreates it so that the infection remains persistent.</p>
<p>The first widespread threat we saw using the fileless infection technique was Trojan.Poweliks [<a href="#ref1">1</a>] in 2014. Many other trojans followed suit as they evolved, just two of which are Trojan.Bedep [<a href="#ref2">2</a>] and Trojan.Kotver [<a href="#ref3">3</a>].</p>
<p>Our paper will explain and compare the most common ways in which malware authors use fileless infections today. We will discuss areas where we expect these methods to be used in the near future.</p>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>Traditionally, AV products detect malicious files using strings or code signatures found in the file. Malware has several ways to avoid being detected, one of which is to put only the malicious code in memory. One example is Korplug, where the infection chain includes the decryption of an encrypted file, which is an executable file loaded in memory [<a href="#ref4">4</a>]. It does this so that the code is protected when an AV product scans the file. A fileless type of infection does this on a different level – there is no longer a file written to disk for the AV product to scan. Even if the file is not on the disk, the malware must still have a persistence mechanism.</p>
<h3><a class="chapter" name="h3-early-examples"></a>Early examples</h3>
<p>The first fileless malware that caught the attention of researchers is Trojan.Poweliks, discovered in 2014. Poweliks does not exist as a file on a disk, but instead resides in the registry, which it only uses as a persistence mechanism [<a href="#ref5">5</a>]. Poweliks uses a special naming scheme to hide in the registry and has consistently used CLSID hijacking as runtime load point in the registry. Later on, Poweliks was also observed exploiting the <em>Microsoft Windows</em> Remote Privilege Escalation Vulnerability (CVE-2015-0016) [<a href="#ref6">6</a>] in order to take control of compromised sites. At the same time, another fileless malware, Trojan.Bedep, was also using the same zero-day exploit. Bedep is an in-memory-only downloader and perceived to have a similar coding style to Poweliks. Trojans like Trojan.Bedep and Trojan.Kotver have learned from Poweliks and adopted the same technique.</p>
<h3><a class="chapter" name="h3-how-it-works"></a>How it works</h3>
<p>Typically, fileless malware arrives through exploit kits (EK) when a user visits a compromised site. The Angler exploit kit was the very first EK observed to infect a host without writing the malware on the drive [<a href="#ref7">7</a>]. The shellcode delivered by Angler is responsible for injecting the fileless malware into the process running the exploited plug-in, such as iexplore.exe. Fileless malware may also arrive through malicious file attachments or malicious URL links found in spammed emails. These are usually downloader malware, which are first written over the disk but eventually delete themselves after injecting the fileless malware into memory.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/2314/8396/7748/fileless-fig1.jpg" alt="fileless-fig1.jpg" width="740" height="252" /><span class="centered-caption">Figure 1: Infection chain of fileless threat.</span></p>
<p>Once injected into the memory, the malware loads and encrypts a binary component. This obfuscated copy is saved in the registry and then another entry is created. This contains the script as part of its autostart mechanism. This script can be either VBScript, JavaScript or PowerShell script, and is responsible for decrypting the binary component and loading it into the memory.</p>
<p>The binary component is then launched and serves as a watchdog – it monitors the relevant registry entries it created and is also responsible for contacting the malicious command and control (C&amp;C) server. Back door capabilities of this malware may include reinstalling registry entries, downloading and executing files, and calling other commands. One of the files it downloads and executes can install an ad-click module into memory.</p>
<h3><a class="chapter" name="h3-notable-malware-use-technique"></a>Notable malware that use this technique</h3>
<h4><a class="chapter" name="h4-poweliks"></a>Poweliks</h4>
<p>From the file-based malware known as Wowliks, Trojan.Poweliks evolved into a registry-based malware. One of its notable behaviours is downloading a PowerShell application, hence the name Poweliks. This malware uses PowerShell scripts to launch and inject its DLL watchdog from the registry entry into the DLLHost.exe process to retain its persistence mechanism. The main payload of Poweliks is to deliver ad-fraud trojans and ransomware to the infected user.</p>
<h4><a class="chapter" name="h4-bedep"></a>Bedep</h4>
<p>Trojan.Bedep is believed to have a connection to Poweliks due to similarities in coding style and the use of the same CVE-2015-0016 exploit, but there is no conclusive evidence linking the authors of the two pieces of malware. Bedep has been observed to download and install Poweliks along with other ad-fraud malware. Bedep comes in 32-bit and 64-bit variants and uses <em>Microsoft</em> properties for its own file properties as part of its disguise. The main purpose of this malware is to turn the compromised computers into botnets.</p>
<h4><a class="chapter" name="h4-kotver"></a>Kotver</h4>
<p>Prior to adopting Poweliks's fileless infection technique, variants of the Kotver malware were residing only in the registry to evade detection. However, it does not fully embrace the fileless infection technique. Like Poweliks, it downloads a PowerShell application, but if no Internet connection is available, it reverts to file-based infection and creates a copy of itself on the disk. Kotver has been observed to deliver ransomware and banking trojans.</p>
<h2><a class="chapter" name="h2-fileless-forecast"></a>Fileless forecast</h2>
<p>There has been growing interest in fileless infections over the last couple of years. Earlier, we explained the different infection vectors used by different actors. Now, we will discuss a new infection vector, which can potentially be used for performing fileless infections with non-PE files, using a classic one-click fraud attack method [<a href="#ref8">8</a>].</p>
<p>First, we will discuss all the individual components one by one, making it easy to understand one-click fileless infection.</p>
<h3><a class="chapter" name="h3-mshtaexe"></a>MSHTA.EXE</h3>
<p>This program is an implementation of the WebBrowser control that runs trusted HTML and scripts with a minimal user interface (UI).</p>
<h3><a class="chapter" name="h3-hta"></a>HTA</h3>
<p>As technology improves and grows with time, some of it does deprecate. In <em>Windows</em> OS, one such powerful technology has existed since <em>Windows NT</em> (released in July 1993) and is still present in <em>Windows 10</em> (released in July 2015): HTML Application (HTA).</p>
<p>HTA [<a href="#ref9">9</a>] is a<em> Microsoft Windows</em> program whose source code consists of HTML, Dynamic HTML, and one or more scripting languages supported by <em>Internet Explorer</em> (<em>IE</em>), such as VBScript or JScript. The HTML is used to generate the user interface, and the scripting language is used for the program logic. An HTA executes without the constraints of the Internet browser security model; in fact, it executes as a 'fully trusted' application. The usual file extension of an HTA is .hta.</p>
<p>All the current <em>Windows</em> OSes support HTA file execution. HTA looks and behaves like an HTML file, but it has much higher privileges than an HTML file. An HTA file requires mshta.exe, which comes along with<em> Internet Explorer</em>. Mshta.exe executes the HTA by instantiating the<em> Internet Explorer</em> rendering engine (mshtml) as well as any required language engines (such as vbscript.dll).</p>
<p>HTAs provide a way for users to wrap scripts up in a graphical user interface (GUI), an interface replete with check boxes, radio buttons, drop-down lists, and other <em>Windows</em> elements.</p>
<p>For our purposes, an HTA is nothing more than a way to provide a GUI for scripts. As we have already noted, neither WSH nor VBScript provides much in the way of GUI elements: no check boxes, no list boxes, nothing. <em>Internet Explorer</em>, however, makes use of all of these elements and more. Because an HTA leverages <em>IE</em>, a user can take advantage of all these GUI elements when writing system administration scripts.</p>
<p>How closely related are HTML files and HTAs? All a user has to do is take any HTML file and change the file extension from .htm (or .html) to .hta, and just like that, the file is now an HTA.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/7214/8396/8073/fileless-fig2.jpg" alt="fileless-fig2.jpg" width="543" height="648" /></p>
<p class="centered-caption">Figure 2: General IE architecture and applications [<a href="#ref10">10</a>].</p>
<h3><a class="chapter" name="h3-so-why-dont-users-just-use-html-file"></a>So why don't users just use an HTML file?</h3>
<p>The very simple answer is: security. There are a lot of security restrictions implemented on <em>IE</em>, and for good reason: if users visit a website they would probably prefer that the site does not use a client-side script that starts reconfiguring their settings or rooting around in their file system. Consequently, many system administration scripts – including those that use WMI or ADSI – either will fail when run from <em>IE</em> or, at best, will display a dialog box similar to the following:</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/3714/8396/8146/fileless-fig3.jpg" alt="fileless-fig3.jpg" width="360" height="151" /></p>
<p class="centered-caption">Figure 3: A dialog box is displayed whenever users run scripts from an HTML file.</p>
<p>Whenever users run scripts from an HTML file they are presented with a dialog box like this. That might be okay, but it is definitely not the best possible user experience.</p>
<p>HTAs, by contrast, are not bound by the same security restrictions as <em>IE</em>, because HTAs run in a different process from <em>IE</em>. HTAs run in the mshta.exe process rather than the iexplore.exe process. Unlike HTML pages, HTAs can run client‑side scripts and they have access to the file system. Among other things, this means that HTAs can run users' system administration scripts, including those that use WMI and ADSI. The users' scripts will run just fine, and they will not receive any warnings about items that might be unsafe.</p>
<p>Of course, this does not mean that HTAs somehow bypass <em>Windows</em> security. For example, if one user does not have the right to change another user's password, then the former cannot use a script to change the latter's password. Placing that script in an HTA will not make a difference – the user still will not be able to change the other user's password. HTAs also have some security restrictions of their own.</p>
<p>The long and the short of it is that, although HTAs use <em>Internet Explorer</em> and the <em>IE</em> object model, they run in a different process from <em>IE</em>. Consequently, users can run scripts and perform other tasks that are not allowed in <em>IE</em>.</p>
<p>More information about HTAs and security can be found on the HTML Applications SDK page [<a href="#ref11">11</a>] on the <em>Microsoft Developer Network</em> (<em>MSDN</em>).</p>
<h3><a class="chapter" name="h3-security-considerations"></a>Security considerations</h3>
<p>When a regular HTML file is executed, the execution is confined to the security model of the web browser – that is, it is confined to communicating with the server, manipulating the page's object model (usually to validate forms and/or create interesting visual effects) and reading or writing cookies.</p>
<p>On the other hand, an HTA runs as a fully trusted application and therefore has more privileges than a normal HTML file; for example, an HTA can create, edit and remove files and registry entries. Although HTAs run in this 'trusted' environment, querying Active Directory can be subject to <em>Internet Explorer</em> Zone logic and associated error messages.</p>
<h3><a class="chapter" name="h3-one-click-fileless-infection"></a>One-click fileless infection</h3>
<p>After analysing file infections and their infection vectors, we discovered that infections are also possible if attackers use non-PE files and a very well-known infection vector: one-click fraud.</p>
<p>One-click fraud is not new; it has existed for over a decade and has been seen affecting mostly Asian countries, most notably Japan. Typically, one-click fraudsters attempt to trick users into subscribing to bogus adult video services with a single click, although variants requiring two, three, and four clicks – even zero clicks – have also been observed [<a href="#ref12">12</a>]. One-click fraud exhibits ransomware-like behaviour, in that it attempts to lock the user's screen and create non-terminating or recurring pop-up windows, which ask the user to register, subscribe, or pay a certain amount to remove them.</p>
<p>We found that malicious actors could potentially mix fileless infection and one-click fraud to create one-click fileless infection. In a nutshell:</p>
<p style="padding-left: 30px;">Fileless infection + one-click fraud = One-click fileless infection</p>
<h3><a class="chapter" name="h3-memory-infection"></a>In-memory infection</h3>
<p>We used an HTA file to create an ActiveX object that could inject the JS payload into a Run registry entry. We found that the same can be achieved using PowerShell and WSCRIPT (VBS).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/5314/8396/8331/fileless-fig4.jpg" alt="fileless-fig4.jpg" width="728" height="649" /></p>
<p class="centered-caption">Figure 4: How the attack works.</p>
<h3><a class="chapter" name="h3-proof-concept"></a>Proof of concept</h3>
<p>The code shown in<a href="#figure5"> Figure 5</a> is for the HTA file, which could be hosted on an attacker's controlled server. In an infection scenario, the user is enticed to visit the website (using social engineering or a watering hole attack), and then asked to click Run/Execute. Once executed, the file creates a WScript ActiveX object, which then creates the Run registry entry and injects it with a JS alert (for POC) which is executed using rundll32. <a class=" anchor" name="figure5"></a></p>
<pre>/****************************POC*********************************************/<br /><br />&lt;html&gt;<br />&lt;head&gt;<br />&lt;title&gt;RegTest&lt;/title&gt;<br />&lt;script language="JavaScript"&gt;<br />function writeInRegistry(sRegEntry, sRegValue)<br />{<br />   var regpath = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\" + sRegEntry;<br />   var oWSS = new ActiveXObject("WScript.Shell");<br />   oWSS.RegWrite(regpath, sRegValue, "REG_SZ");<br />}<br /><br />function readFromRegistry(sRegEntry)<br />{<br />   var regpath = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\" + sRegEntry;        /*Payload injected in Run registry entry*/<br />   var oWSS = new ActiveXObject("WScript.Shell");    /*WASCRIPT ActiveX object created which is used to inject the Malicous JS in registry*/<br />   return oWSS.RegRead(regpath);<br />}<br /><br />function tst()<br />{<br />   writeInRegistry("malware", "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";alert('payload'); "); /*Payload is the JS payload which does the real malicious stuff and it got watchdog, for keeping an eye over the registry entry which makes the infection persistent*/<br />   alert(readFromRegistry("malware"));<br />}<br />&lt;/script&gt;&lt;/head&gt;<br />&lt;body&gt;<br /><br />Click here to run test: &lt;input type="button" value="Run" onclick="tst()"<br />&lt;/body&gt;<br />&lt;/html&gt;<br /><br />/***************************POC end*****************************************/</pre>
<p class="centered-caption">Figure 5: Proof of concept.</p>
<p>For our purposes, we picked the case of Poweliks, specifically because of how it extracts the JS from the Run registry entry. It is injected into the Run registry entry to make the infection persistent. Once the user restarts the computer, it reinjects itself, as in-memory infection will disappear once the computer is restarted.</p>
<p>For our POC, we used the Alert API, although malicious actors may choose differently. As in previous cases of fileless infection, we found that it features a watchdog module, which keeps an eye over the registry entry. It also recreates the registry entry if the user deletes it.</p>
<p>For simplicity, we have only shown how to execute the code. The same thing can be achieved using PowerShell or CSCRIPT.</p>
<p>This attack may affect all <em>Windows</em> versions from <em>Windows 95</em> through to <em>Windows 10</em>. All versions have <em>IE</em> preinstalled, which, as previously discussed, comes with WSCRIPT, which is the only required component to perform this attack.</p>
<h3><a class="chapter" name="h3-variants"></a>Variants</h3>
<p>Other variants of similar attacks can be made using the following trusted applications:</p>
<ul>
<li>PowerShell [<a href="#ref13">13</a>]</li>
<li>CSCRIPT [<a href="#ref14">14</a>]</li>
<li>WSCRIPT [<a href="#ref15">15</a>]</li>
</ul>
<h3><a class="chapter" name="h3-prevention-and-mitigation"></a>Prevention and mitigation</h3>
<p><em>Symantec</em> recommends users adhere to the following best practices to prevent one-click fileless infection:</p>
<ul>
<li>Never treat HTA files as HTML files</li>
<li>Dynamically detect orphan registry entries that call PowerShell, WSCRIPT, CSCRIPT, cmd, RUNDLL32, or regserve32</li>
<li>Perform manual removal where necessary (steps are outlined below).</li>
</ul>
<h3><a class="chapter" name="h3-manual-removal"></a>Manual removal</h3>
<ol>
<li>Download and execute <em>Microsoft</em>'s <em>Process Explorer</em>.</li>
<li>Restart in Safe Mode.</li>
<li>Select the mother process (into which the malware is injecting) and terminate it (kill Process Tree).</li>
<li>Open Registry Editor (Run -&gt; regedit.exe).</li>
<li>In the left panel, go to: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\</li>
<li>Clean registry entries.</li>
<li>Close Registry Editor.</li>
</ol>
<h3><a class="chapter" name="h3-av-solutions"></a>AV solutions</h3>
<p>Anti-virus products have the following approaches to address fileless infections:</p>
<ol>
<li>Memory scanning</li>
<li>Registry scanning</li>
<li>Network scanning.</li>
</ol>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class="anchor" name="ref1"></a>[1] Trojan.Poweliks. <a href="https://www.symantec.com/security_response/writeup.jsp?docid=2014-080408-5614-99" target="_blank">https://www.symantec.com/security_response/writeup.jsp?docid=2014-080408-5614-99</a>.</p>
<p><a class="anchor" name="ref2"></a>[2] Trojan.Bedep. <a href="https://www.symantec.com/security_response/writeup.jsp?docid=2015-020903-0718-99" target="_blank">https://www.symantec.com/security_response/writeup.jsp?docid=2015-020903-0718-99</a>.</p>
<p><a class="anchor" name="ref3"></a>[3] Trojan.Kotver. <a href="https://www.symantec.com/security_response/writeup.jsp?docid=2015-082817-0932-99" target="_blank">https://www.symantec.com/security_response/writeup.jsp?docid=2015-082817-0932-99</a>.</p>
<p><a class="anchor" name="ref4"></a>[4] Camba, A. Unplugging Plugx Capabilities. Trend Micro Malware Blog. <a href="http://blog.trendmicro.com/trendlabs-security-intelligence/unplugging-plugx-capabilities" target="_blank">http://blog.trendmicro.com/trendlabs-security-intelligence/unplugging-plugx-capabilities</a>.</p>
<p><a class="anchor" name="ref5"></a>[5] O'Murchu, L.; Gutierrez, F. The evolution of the fileless click-fraud malware Poweliks. Symantec Connect Blog. <a href="https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/evolution-of-poweliks.pdf" target="_blank">http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/evolution-of-poweliks.pdf</a>.</p>
<p><a class="anchor" name="ref6"></a>[6] Microsoft Windows Remote Privilege Escalation Vulnerability (CVE-2015-0016). <a href="https://www.symantec.com/security_response/vulnerability.jsp?bid=71965" target="_blank">https://www.symantec.com/security_response/vulnerability.jsp?bid=71965</a>.</p>
<p><a class="anchor" name="ref7"></a>[7] Kafeine. Angler EK: now capable of "fileless" infection. Malware Don't Need Coffee Blog. <a href="http://malware.dontneedcoffee.com/2014/08/angler-ek-now-capable-of-fileless.html" target="_blank">http://malware.dontneedcoffee.com/2014/08/angler-ek-now-capable-of-fileless.html</a>.</p>
<p><a class="anchor" name="ref8"></a>[8] Anand, H. One-click fraudsters extend reach by learning Chinese. Symantec Connect Blog. <a href="https://www.symantec.com/connect/blogs/one-click-fraudsters-extend-reach-learning-chinese" target="_blank">http://www.symantec.com/connect/blogs/one-click-fraudsters-extend-reach-learning-chinese</a>.</p>
<p><a class="anchor" name="ref9"></a>[9] Extreme Makeover: Wrap Your Scripts Up in a GUI Interface. Microsoft Technet. <a href="https://technet.microsoft.com/en-us/library/ee692768.aspx" target="_blank">https://technet.microsoft.com/en-us/library/ee692768.aspx</a>.</p>
<p><a class="anchor" name="ref10"></a>[10] Recreated from the Microsoft TechNet (2013) gallery – IE Architecture. <a href="https://gallery.technet.microsoft.com/IE-Architecture-3bc7c3fd/file/78635/1/IE%20Architecture.png" target="_blank">https://gallery.technet.microsoft.com/IE-Architecture-3bc7c3fd/file/78635/1/IE%20Architecture.png</a>.</p>
<p><a class="anchor" name="ref11"></a>[11] HTML Applications SDK. <a href="https://msdn.microsoft.com/en-us/library/ms536473(vs.85).aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ms536473(vs.85).aspx</a>.</p>
<p><a class="anchor" name="ref12"></a>[12] Hamada, J. The rise of Japanese zero-click fraud. Symantec Connect Blog. <a href="https://www.symantec.com/connect/blogs/rise-japanese-zero-click-fraud" target="_blank">http://www.symantec.com/connect/blogs/rise-japanese-zero-click-fraud</a>.</p>
<p><a class="anchor" name="ref13"></a>[13] It's a Wrap! Windows PowerShell 1.0 Released! Windows PowerShell Blog. <a href="https://blogs.msdn.microsoft.com/powershell/2006/11/14/its-a-wrap-windows-powershell-1-0-released" target="_blank">https://blogs.msdn.microsoft.com/powershell/2006/11/14/its-a-wrap-windows-powershell-1-0-released</a>.</p>
<p><a class="anchor" name="ref14"></a>[14] Using the command-based script host (CScript.exe). Microsoft Technet. <a href="https://technet.microsoft.com/en-us/library/bb490887.aspx" target="_blank">https://technet.microsoft.com/en-us/library/bb490887.aspx</a>.</p>
<p><a class="anchor" name="ref15"></a>[15] WScript Object. Microsoft Developer Network. <a href="https://msdn.microsoft.com/en-us/library/at5ydy31(v=vs.84).aspx" target="_blank">https://msdn.microsoft.com/en-us/library/at5ydy31(v=vs.84).aspx</a>.</p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2017/VB2016-AnandMenrige.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2016 paper: One-click fileless infection&url=https://www.virusbulletin.com/virusbulletin/2017/03/vb2016-paper-one-click-fileless-infection"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2017/03/vb2016-paper-one-click-fileless-infection'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2017/03/vb2016-paper-one-click-fileless-infection&title=VB2016 paper: One-click fileless infection"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2017/03/vb2016-paper-one-click-fileless-infection&t=VB2016 paper: One-click fileless infection"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2017/03/vb2016-paper-one-click-fileless-infection"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>