<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: The journey and evolution of God Mode in 2016: CVE-2016-0189</title>
<meta name="description" content="Exploits for the CVE‑2016‑0189 vulnerability offer both reliability and complexity, so it is little wonder that it was the most commonly exploited vulnerability in 2016. Ankit Anubhav traces the journey and evolution of the 'God Mode' exploitation method in 2016." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 5281;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1>The journey and evolution of God Mode in 2016: CVE-2016-0189</h1>
<h3>Ankit Anubhav &amp; Manish Sardiwal</h3>
<p>FireEye, India</p>
<p><em>Copyright © 2017 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-9829" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-9829" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-introduction">Introduction</a><br /> <a class="toc-level2" href="#h2-god-mode">God Mode</a><br /> <a class="toc-level2" href="#h2-cve-2016-0189-god-mode-bug-root-cause-analysis">CVE-2016-0189 God Mode bug: root cause analysis</a><br /> <a class="toc-level3" href="#h3-god-mode-101">God Mode 101</a><br /> <a class="toc-level3" href="#h3-difference-between-2016-0189-and-2014-6332-god-modes">Difference between 2016-0189 and 2014-6332 God Modes</a><br /> <a class="toc-level2" href="#h2-cve-2016-0189-action">CVE 2016-0189 in action</a><br /> <a class="toc-level3" href="#h3-valueof-method-override">ValueOf method override</a><br /> <a class="toc-level3" href="#h3-inside-custom-exploit-function">Inside the custom 'exploit' function</a><br /> <a class="toc-level3" href="#h3-using-getaddress-invoke-overridden-valueof">Using GetAddress to invoke overridden ValueOf</a><br /> <a class="toc-level3" href="#h3-inside-triggerbug">Inside triggerBug</a><br /> <a class="toc-level3" href="#h3-overwriting-safe-mode-flag">Overwriting the Safe Mode flag</a><br /> <a class="toc-level2" href="#h2-cve-2016-0189-vbscript-god-mode-memory-corruption-wild">CVE-2016-0189 VBScript God Mode memory corruption 'in the wild'</a><br /> <a class="toc-level3" href="#h3-variant-1-offensiveware-generated-2016-0189">Variant 1: OffensiveWare generated 2016-0189</a><br /> <a class="toc-level3" href="#h3-adoption-exploit-kits">Adoption in exploit kits</a><br /> <a class="toc-level3" href="#h3-variant-2-gongda-exploit-kit-powershell-coupled-bitsadmin-avoid-behavioural-detection">Variant 2: Gongda exploit kit – PowerShell coupled with BITSAdmin to avoid behavioural detection</a><br /> <a class="toc-level3" href="#h3-variant-3-2016-0189-rig-exploit-kit">Variant 3: 2016-0189 in RIG exploit kit</a><br /> <a class="toc-level2" href="#h2-conclusion">Conclusion</a><br /> <a class="toc-level2" href="#h2-references">References</a><br /> <a class="toc-level2" href="#h2-appendix">Appendix</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>'The survival of the fittest' applies in a large variety of fields. In cybersecurity it not only applies to detection mechanisms but also to the attackers, as they continuously need to update their arsenal and find more successful ways to attack. Here, 'more successful' does not necessarily mean more complicated, but may mean an attack which is reliable, modular and cheap, especially in cases where the attacker is not well sponsored.</p>
<p>In 2016 we saw the continuation of a general shift in the most commonly used attack vectors from exploits in browsers and plug‑ins to <em>Office</em> macros, with macros becoming the predominant carrier mechanism of threats including data exfiltration malware and ransomware.</p>
<p>Hence for a browser exploit to stay relevant, it not only has to compete against other exploits, but also against macros, zipped standalone JavaScript (as an email attachment), and other malware delivery mechanisms. A present-day exploit must be both reliable and sufficiently straightforward to be used by attackers who don't have an in-depth understanding of exploits. Once an exploit overcomes the challenges related to reliability and complexity, it holds an edge over macros in that it doesn't require any social engineering to be activated, as macros do.</p>
<p>Exploits for the CVE-2016-0189 vulnerability offer reliability, and with a working proof of concept that has decreased the effort required to fork new variants, it is little wonder that amongst the unique file hashes of exploits seen in 2016 (excluding those running on <em>Android</em>/<em>Linux</em>), CVE‑2016-0189 was the most commonly exploited vulnerability:</p>
<ul>
<li><strong>Reliability</strong> – One of the reasons why so few exploits are used in the wild is their low reliability when it comes to executing on the victim machine, since many of them are version-dependent (unlike macros which usually run on a variety of <em>MS Office</em> versions). The CVE‑2016‑0189 vulnerability exists in different versions of <em>Internet Explorer</em>, from <em>IE9</em> to <em>IE11</em>.</li>
<li><strong>Complexity</strong> – The proof-of-concept exploit for CVE‑2016-0189 released by Theori [<a href="#ref1">1</a>] was elaborate enough simply to develop many forks with minimal changes to the original code. This enabled its inclusion not only in 'script kiddie' tools like OffensiveWare Multi Exploit Builder thanks to a one‑line change in code, but also in exploit kits like Gongda and Neutrino, which added evasion modules to the basic exploit.</li>
</ul>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/8714/8535/7327/God-Mode-Fig1.jpg" alt="God-Mode-Fig1.jpg" width="480" height="287" /></p>
<p class="centered-caption">Figure 1: Distribution of unique hash volumes for CVE-2016 exploits observed during 2016.</p>
<p>This vulnerability was first exploited in limited targeted attacks that affected computer users in South Korea [<a href="#ref2">2</a>] before <em>Microsoft</em> released a patch in May 2016. Theori's working proof of concept was released in June 2016.</p>
<p>The exploit is carried in an HTML page and can be hosted on any URL or can be sent as a standalone HTML page in an email. Any attempt to access the URL with a vulnerable version of <em>Internet Explorer</em> will result in the malicious code being run, which will be followed by the execution of a desired payload.</p>
<h2><a class="chapter" name="h2-god-mode"></a>God Mode</h2>
<p>God Mode is an exploitation method in which VBScript code can escape the browser's sandbox. What makes it 'God Mode' is that there is no need to bypass <em>Microsoft</em> provided security features such as data execution prevention (DEP) and address space layout randomization (ASLR), as there is in usual exploits. Also, since there is no involvement of heap spray or return oriented programming (ROP), detection based on these techniques can potentially be evaded [<a href="#ref3">3</a>].</p>
<h2><a class="chapter" name="h2-cve-2016-0189-god-mode-bug-root-cause-analysis"></a>CVE-2016-0189 God Mode bug: root cause analysis</h2>
<h3><a class="chapter" name="h3-god-mode-101"></a>God Mode 101</h3>
<p>When VBScript code is executed in the <em>Internet Explorer</em> sandbox, the code is prevented from creating and executing files on the local system. This restriction is provided using a flag called 'Safe Mode' in the COleScript class of the VBScript engine. If this flag is bypassed or overwritten with a different value, the VBScript can run as if it is being executed on the local shell.</p>
<h3><a class="chapter" name="h3-difference-between-2016-0189-and-2014-6332-god-modes"></a>Difference between 2016-0189 and 2014-6332 God Modes</h3>
<p>We have seen a similar exploit in the past, which used CVE‑2014-6332 to bypass the Safe Mode flag. CVE‑2014-6332 was used as a type confusion vulnerability, which allows out-of-bounds memory access. In contrast, CVE‑2016-0189 is a memory corruption vulnerability, which allows an exploit to corrupt objects and access full memory. By using these vulnerabilities, an exploit can bypass the Safe Mode and eventually execute malicious VBScript code in browsers' sandboxes.</p>
<h2><a class="chapter" name="h2-cve-2016-0189-action"></a>CVE 2016-0189 in action</h2>
<h3><a class="chapter" name="h3-valueof-method-override"></a>ValueOf method override</h3>
<p>The aim of this exploit is somehow to call an overridden ValueOf method, as shown in <a href="#figure2">Figure 2</a>. <a class=" anchor" name="figure2"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/9714/8535/7612/God-Mode-Fig2.jpg" alt="God-Mode-Fig2.jpg" width="840" height="233" /></p>
<p class="centered-caption">Figure 2: JavaScript code to start the exploit execution.</p>
<p>However, in order to achieve this the attacker needs to perform a number of actions. First, the JavaScript calls a VBScript function named 'exploit' by passing an object 'o', as seen in <a href="#figure2">Figure 2</a>. This object contains a method, 'ValueOf'. The ValueOf function is overridden to trigger the vulnerability. We will come back to the 'o' object later.</p>
<h3><a class="chapter" name="h3-inside-custom-exploit-function"></a>Inside the custom 'exploit' function</h3>
<p>Going back to the exploit() function, we can see in <a href="#figure3">Figure 3 </a>that it creates some variables and then creates an object of dummy class, which is nothing but a simple VBScript class. This dummy 'dm' object contains memory addresses which will be used to overwrite the Safe Mode flag. <a class=" anchor" name="figure3"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/7214/8535/7768/God-Mode-Fig3.jpg" alt="God-Mode-Fig3.jpg" width="845" height="476" /></p>
<p class="centered-caption">Figure 3: VBScript 'exploit' function.</p>
<p>The address of the dummy object is calculated in the exploit() function by calling the getAddr() method. <a href="#figure4">Figure 4</a> shows the code of the getAddr() method. <a class=" anchor" name="figure4"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/5414/8535/8007/God-Mode-Fig4.jpg" alt="God-Mode-Fig4.jpg" width="840" height="416" /></p>
<p class="centered-caption">Figure 4: The 'getAddr' function used to find address of VBScript class.</p>
<h3><a class="chapter" name="h3-using-getaddress-invoke-overridden-valueof"></a>Using GetAddress to invoke overridden ValueOf</h3>
<p>From the getAddr() function, the attacker needs somehow to reach to the overridden ValueOf method to trigger the bug. This is achieved by assigning an object 's' to the array (arg1, 2). Here, 'arg1' is the JavaScript object 'o', which we discussed earlier.</p>
<p>To calculate the array index, the VBScript calls the ValueOf method for this object. The ValueOf method (<a href="#figure2">Figure 2</a>) calls the triggerBug function of the VBScript, which contains the actual code to trigger the vulnerability.</p>
<h3><a class="chapter" name="h3-inside-triggerbug"></a>Inside triggerBug</h3>
<p>The code of the triggerBug function is shown in <a href="#figure5">Figure 5</a>. <a class="anchor" name="figure5"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/4514/8535/8261/God-Mode-Fig5.jpg" alt="God-Mode-Fig5.jpg" width="840" height="151" /></p>
<p class="centered-caption">Figure 5: VBScript function used to resize the array and trigger the bug.</p>
<p>The triggerBug function resizes the array length to A(1, 1), which is smaller. This will free some memory. Crafted strings are then created in this freed memory. The aw.A(arg1, 2) in the getAddr function still points to the freed memory where the dummy class object 's' will be written. This allows the address of the dummy object to be read using the crafted string.</p>
<h3><a class="chapter" name="h3-overwriting-safe-mode-flag"></a>Overwriting the Safe Mode flag</h3>
<p>The CSession object address can be found from the address of the dummy object. <a href="#figure6">Figure 6</a> shows the code used to read the CSession object address from the dummy object. <a class=" anchor" name="figure6"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/4214/8535/8446/God-Mode-Fig6.jpg" alt="God-Mode-Fig6.jpg" width="690" height="254" /></p>
<p class="centered-caption">Figure 6: Function used to leak the address of the CSession object and COleScript object.</p>
<p>The address of the COleScript object is present in the CSession object. The address of the COleScript object, which contains the Safe Mode flag (COleScript + 0x174), as shown in <a href="#figure3">Figure 3</a>, will be read. Finally, the Safe Mode flag will be changed in the COleScript class.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/9514/8535/8519/God-Mode-Fig7.jpg" alt="God-Mode-Fig7.jpg" width="680" height="308" /></p>
<p class="centered-caption">Figure 7: Function used to overwrite the Safe Mode flag.</p>
<p>At this point, the Safe Mode flag has been changed to '0x4', and now the VBScript can be executed in the browser in the same way as it is executed on the local shell. This allows the exploit to download and execute a malicious payload.</p>
<h2><a class="chapter" name="h2-cve-2016-0189-vbscript-god-mode-memory-corruption-wild"></a>CVE-2016-0189 VBScript God Mode memory corruption 'in the wild'</h2>
<p>The exploit mentioned above was made publicly available as a proof of concept (POC) by Theori.</p>
<p>Since then, we have observed three variants of CVE‑2016‑0189 abused in the wild. These HTML pages are mostly hosted on Korean domains, which is not a surprise since exploits concerning <em>Internet Explorer</em> are often common in South Korea where it is a very popular browser. Following the God Mode exploitation, malware authors are taking one of the three routes shown in the flowchart in <a href="#figure8">Figure 8</a>. <a class=" anchor" name="figure8"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/1814/8535/8682/God-Mode-Fig8.jpg" alt="God-Mode-Fig8.jpg" width="560" height="814" /></p>
<p class="centered-caption">Figure 8: Flowchart showing the different approaches used by malicious kits to download and launch payloads via the CVE-2016-0189 exploit.</p>
<p>Note that the KR variant is better known as the Gongda exploit kit in the wild.</p>
<h3><a class="chapter" name="h3-variant-1-offensiveware-generated-2016-0189"></a>Variant 1: OffensiveWare generated 2016-0189</h3>
<p>OffensiveWare Multi Exploit Builder is a cheap (US$50) exploit generation tool which has an option to generate God Mode HTML CVE-2016-0189 (see <a href="#figure9">Figure 9</a>). However, the software is easy to crack and anyone with a simple tweak can generate a working 2016-0189 without buying the licence for this tool. <a class=" anchor" name="figure9"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/5014/8535/8979/God-Mode-Fig9.jpg" alt="God-Mode-Fig9.jpg" width="640" height="439" /></p>
<p class="centered-caption">Figure 9: OffensiveWare tool builder.</p>
<p>The CVE-2016-0189 generated is very much like the first POC created by Theori, as we can see from the sequence of events happening in <a href="#figure10">Figure 10</a> (an <em>Internet Explorer</em> generic process is launched to run PowerShell, which further downloads and runs the payload). Eventually, the tool just takes the attackers' website URL in a text box and simply places it in the position required in the crafted HTML page without adding any extra obfuscation or evasion module. A quick and easy way to earn 50 dollars per 'customer' without much effort. <a class=" anchor" name="figure10"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/7414/8536/1144/God-Mode-Fig10.jpg" alt="God-Mode-Fig10.jpg" width="840" height="112" /></p>
<p class="centered-caption">Figure 10: Internet Explorer launching PowerShell to download and run payload.</p>
<h3><a class="chapter" name="h3-adoption-exploit-kits"></a>Adoption in exploit kits</h3>
<p>More mature exploit kits have added more content to the basic Theori POC to make their content undetectable both statically and dynamically. Static detection evasion is attempted by using obfuscation to hide obvious strings related to the exploit (<a href="#figure11">Figure 11</a>). <a class=" anchor" name="figure11"></a></p>
<p><a class="zoom-img" title="Figure 11: PowerShell commands obfuscated in exploit kits using CVE-2016-0189." href="/files/7314/8536/1518/God-Mode-Fig11-large.jpg"><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/cache/cc9349125354780613fbde2b91379e6b_f1494.jpg" alt="God-Mode-Fig11-large.jpg" width="840" height="149" /></a></p>
<p><span class="centered-caption">Figure 11: PowerShell commands obfuscated in exploit kits using CVE-2016-0189.</span></p>
<p>Evasion of behavioural detection has been handled by the Gongda and RIG exploit kits in two separate ways, as discussed below.</p>
<h3><a class="chapter" name="h3-variant-2-gongda-exploit-kit-powershell-coupled-bitsadmin-avoid-behavioural-detection"></a>Variant 2: Gongda exploit kit – PowerShell coupled with BITSAdmin to avoid behavioural detection</h3>
<p>Using BITSAdmin in addition to PowerShell helps to add an extra layer of protection against behavioural monitoring as the payload will be created by svchost.exe and not PowerShell. This means that behaviour-based security software, which looks for file creation via PowerShell, can be bypassed.</p>
<p>This has already been seen in the case of a Cerber ransomware campaign where the evasion code was placed inside the macro, and now we see an exploit-generated attack using it [<a href="#ref4">4</a>], as shown in <a href="#figure12">Figure 12</a>. <a class=" anchor" name="figure12"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/2314/8536/1683/God-Mode-Fig12.jpg" alt="God-Mode-Fig12.jpg" width="845" height="116" /></p>
<p class="centered-caption">Figure 12: Gongda using BITSAdmin coupled with PowerShell.</p>
<h3><a class="chapter" name="h3-variant-3-2016-0189-rig-exploit-kit"></a>Variant 3: 2016-0189 in RIG exploit kit</h3>
<p>The RIG exploit kit goes one step further as it first renames wscript.exe (<a href="#figure13">Figure 13</a>), so that any behaviour-based security software monitoring for wscript.exe via filename is bypassed. The sequence can be broken down into four steps, as follows:</p>
<ul>
<li>Post exploitation, Internet Explorer launches the command line.</li>
<li>The command line changes the name of wscript.exe to script.pif or wscript.com.</li>
<li>Script.pif (which is in fact wscript.exe) is launched by the command line to further launch JavaScript.</li>
<li>The JavaScript checks for the payload format and runs it. <a class=" anchor" name="figure13"></a></li>
</ul>
<p><img style="display: block; margin-left: auto; margin-right: auto; border: 0.5px solid black;" src="/files/8214/8536/2789/God-Mode-Fig13.jpg" alt="God-Mode-Fig13.jpg" width="730" height="71" /></p>
<p class="centered-caption">Figure 13: Wscript.exe renaming in RIG 2016-0189.</p>
<h2><a class="chapter" name="h2-conclusion"></a>Conclusion</h2>
<p>After a good run in 2016, the usage of this exploit is expected to decrease, as it was patched by <em>Microsoft</em> some time ago. Furthermore, the future of such potential zero‑day God Mode exploits, which can run VBScript outside the sandbox, looks bleak, as <em>Microsoft</em> has decided not to support VBScript itself in <em>Microsoft IE 11</em> edge mode [<a href="#ref5">5</a>]. Nevertheless, this exploit is expected to exist for some time longer in <em>IE</em> versions that continue to support VBScript.</p>
<p>From a detection perspective, static detection has the potential to be bypassed, as we have seen with exploit kits that have obfuscated the original POC. However, one can detect such threats by using behaviour-based alerts that trigger when <em>Internet Explorer</em> accesses the shell and performs an activity it is not generally supposed to perform.</p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a><span class="anchor">[1] CVE-2016-0189 original release by Theori. <a href="https://github.com/theori-io/cve-2016-0189" target="_blank">https://github.com/theori-io/cve-2016-0189</a>.</span></p>
<p><a class=" anchor" name="ref2"></a><span class="anchor">[2] Internet Explorer zero-day exploit used in targeted attacks in South Korea. <a href="https://www.symantec.com/connect/blogs/internet-explorer-zero-day-exploit-used-targeted-attacks-south-korea" target="_blank">https://www.symantec.com/connect/blogs/internet-explorer-zero-day-exploit-used-targeted-attacks-south-korea</a>.</span></p>
<p><a class=" anchor" name="ref3"></a><span class="anchor">[3] A Killer Combo: Critical Vulnerability and 'Godmode' Exploitation on CVE-2014-6332. <a href="http://blog.trendmicro.com/trendlabs-security-intelligence/a-killer-combo-critical-vulnerability-and-godmode-exploitation-on-cve-2014-6332/" target="_blank">http://blog.trendmicro.com/trendlabs-security-intelligence/a-killer-combo-critical-vulnerability-and-godmode-exploitation-on-cve-2014-6332/</a>.</span></p>
<p><a class=" anchor" name="ref4"></a><span class="anchor">[4] The Journey of Evasion Enters Behavioural Phase. <a href="https://www.virusbulletin.comhttps://www.virusbulletin.com/virusbulletin/2016/07/journey-evasion-enters-behavioural-phase/" target="_blank">https://www.virusbulletin.com/virusbulletin/2016/07/journey-evasion-enters-behavioural-phase/</a>.</span></p>
<p><a class=" anchor" name="ref5"></a><span class="anchor">[5] VBScript is no longer supported in IE11 edge mode. <a href="https://msdn.microsoft.com/en-us/library/dn384057(v=vs.85).aspx" target="_blank">https://msdn.microsoft.com/en-us/library/dn384057(v=vs.85).aspx</a>.</span></p>
<h2><a class="chapter" name="h2-appendix"></a>Appendix</h2>
<table class="table table-striped" border="0">
<tbody>
<tr>
<td><strong>SHA 256 hash </strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>e4326798f7e97f6ecd7f20c158d29cf665248fb1de9849513d798cad925149d4 2016-0189</td>
<td>Gongda exploit kit using BITSAdmin behavioural evasion</td>
</tr>
<tr>
<td>3693580312cdbb83c27af51c71e0077a7f8a87bddaf69056687917059edf966b 2016-0189</td>
<td>OffensiveWare builder</td>
</tr>
<tr>
<td>757bd69fedd7e81d1f3bb31021e9c3d542018eb295c53221134e4c6c3eb5a6b6 2016-0189</td>
<td>Neutrino using wscript.exe renaming evasion</td>
</tr>
</tbody>
</table>
<p> </p>
<p> </p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2017/201701-journey-evolution-God-Mode.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=The journey and evolution of God Mode in 2016: CVE-2016-0189&url=https://www.virusbulletin.com/virusbulletin/2017/01/journey-and-evolution-god-mode-2016-cve-2016-0189"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2017/01/journey-and-evolution-god-mode-2016-cve-2016-0189'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2017/01/journey-and-evolution-god-mode-2016-cve-2016-0189&title=The journey and evolution of God Mode in 2016: CVE-2016-0189"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2017/01/journey-and-evolution-god-mode-2016-cve-2016-0189&t=The journey and evolution of God Mode in 2016: CVE-2016-0189"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2017/01/journey-and-evolution-god-mode-2016-cve-2016-0189"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>