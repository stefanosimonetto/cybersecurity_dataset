<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Reversing Python objects</title>
<meta name="description" content="As Python has gained popularity with malware writers, new bytecode obfuscation techniques have started to appear. Aleksander Czarnowski describes some of those techniques." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 2071;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201107-reversing-Python"></a>Reversing Python objects</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2011-07-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Aleksander P.</span> <span class="surname">Czarnowski</span></h3><span class="orgname">AVET Information and Network Security</span>, <span class="orgdiv">Poland</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>As Python has gained popularity with malware writers, new bytecode obfuscation techniques have started to appear. Aleksander Czarnowski describes some of those techniques.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2011 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-3517" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-3517" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id4309841"></a></span></dt><dt><span class="sect1"><a href="#id3656776">Reversing Python</a></span></dt><dt><span class="sect1"><a href="#id4031337">Pyc file format</a></span></dt><dt><span class="sect1"><a href="#id2981396">Other executable formats in the Python environment</a></span></dt><dt><span class="sect1"><a href="#id4340873">Embedded Python code</a></span></dt><dt><span class="sect1"><a href="#id3462580">Obfuscation techniques</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id2954710">Bytecode modification: magic number modification</a></span></dt><dt><span class="sect2"><a href="#id4378239">Bytecode modification: marshalled code object modification/encryption</a></span></dt><dt><span class="sect2"><a href="#id2947449">Interpreter modification: bytecode table modification</a></span></dt><dt><span class="sect2"><a href="#id3736985">Interpreter modification: bytecode encryption</a></span></dt><dt><span class="sect2"><a href="#id4637783">Embedding Python code: native code obfuscation technique</a></span></dt><dt><span class="sect2"><a href="#id3859165">Pyd modules modification/hijacking</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3392801">Dynamic code execution</a></span></dt><dt><span class="sect1"><a href="#id4572467">Platform-dependent anti-debugging techniques</a></span></dt><dt><span class="sect1"><a href="#id2617090">Inside the interpreter at run time</a></span></dt><dt><span class="sect1"><a href="#id4427709">Summary</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4309841"></a></h2></div></div></div><p>A lot has changed since I last wrote in <span class="emphasis"><em>Virus Bulletin</em></span> about reversing Python bytecode (see <a href="/virusbulletin/2008/07/reversing-python-modules
" target="_top">VB, July 2008, p.10</a>). Many more malicious applications now employ Python, and as a result, new obfuscation techniques have appeared. The game of hiding true source code from third-party eyes has begun. While it is understandable that authors want to protect their intellectual property, the evolution of code obfuscation poses potential problems for vulnerability researchers and malware analysts. The obvious problem is that the same obfuscating techniques that apply to legitimate and harmless software can also be used by malware. This article will share some new experiences and ideas that have come from the evolution of Python bytecode obfuscation. (Source code obfuscation techniques are outside the scope of this article.)</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3656776"></a>Reversing Python</h2></div></div></div><p>There are a few situations in which there is a legitimate reason for reversing Python bytecode:</p><div class="itemizedlist"><ul type="disc"><li><p>Security assessment of the Python module or whole class/package</p></li><li><p>Vulnerability research/bug hunting</p></li><li><p>Malware analysis</p></li><li><p>Incident response/forensic analysis.</p></li></ul></div><p>Python is very attractive for malware authors due to the fact that, theoretically, the same module can be run on dozens of different platforms without needing to make any changes. Python is also installed on many <span class="emphasis"><em>Linux</em></span>/Unix systems, and the number of applications that either require or come with an embedded Python interpreter is growing.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4031337"></a>Pyc file format</h2></div></div></div><p>To understand the process of reversing Python bytecode modules we first need to understand the bytecode format and how it can be obfuscated.</p><p>The first four bytes are used by the Python interpreter to decide if it can execute compiled bytecode. The next four bytes are used to decide whether the compiled file should be used instead of the source file of the same name. For example, when executing a line such as:</p><pre class="programlisting">python simple_script.py </pre><p>the Python interpreter will first check whether simple_script.pyc (the compiled file) exists. If it does, then it will check whether the timestamp from the compiled file is more recent than that of the source (.py) file. If it is, the compiled file will be executed instead of interpreting the source file (and in turn compiling it to bytecode). It is worth noting that, should any error occur during file interpretation, the Python interpreter will not create a bytecode file. However, it is possible to generate a bytecode file that will throw an exception during execution. So compiled bytecode cannot be treated as evidence of a lack of code errors.</p><p>Python marshalled bytecode can be deserialized. The result of such an operation is a &lsquo;code&rsquo; object. One of the most important object properties from our perspective is co_code, which is the string representation of the object&rsquo;s byte code.</p><p>Another file type that is very similar to pyc is pyo. Like pyc files, pyo files are the result of compilation to bytecode, however in this case optimization is turned on (-o option).</p><p>Two more file formats are worth mentioning at this point: pyz and egg.</p><p>A pyz file is a so-called &lsquo;squeezed&rsquo; module, optionally compressed using zlib. SqueezeTool provides the interface to create such files. This format allows many Python modules to be stored in one file. On Unix systems a pyz file can start with a shebang line in order to allow direct execution by invoking the Python interpreter (if installed). Additionally, some tools can add the __zipmain__.py module to the archive.</p><p>Egg format files contain a zip archive with package files and resources plus an EGG-INFO subdirectory. This folder contains project metadata.</p><p>Finally, there are tools that enable a native executable binary to be created from Python source code. Examples of such applications are <span class="emphasis"><em>py2exe</em></span> (<span class="emphasis"><em>Windows</em></span>), <span class="emphasis"><em>cx-freeze</em></span> (<span class="emphasis"><em>BSD</em></span>/<span class="emphasis"><em>Linux</em></span>) and <span class="emphasis"><em>py2app</em></span> (<span class="emphasis"><em>OS X</em></span>). The code generated by these tools is beyond the scope of this article.</p><div class="table"><a class="chapter" id="id3001776"></a><table border="1" summary="Pyc file structure"><colgroup><col align="center" /><col /><col /></colgroup><tbody><tr><td align="center"><span class="bold"><strong>File offset</strong></span></td><td align="center"><span class="bold"><strong>Size</strong></span></td><td align="center"><span class="bold"><strong>Meaning</strong></span></td></tr><tr><td align="center">0</td><td align="center">4</td><td>Four-byte magic number &ndash; unique for every Python version, with the last two bytes always set to: 0x0D, 0x0A</td></tr><tr><td align="center">4</td><td align="center">4</td><td>Four-byte timestamp which Python uses to decide whether the module should be recompiled from the source (.py) file if the .pyc file has been found</td></tr><tr><td align="center">8</td><td align="center">?</td><td>Marshalled code object</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Pyc file structure</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2981396"></a>Other executable formats in the Python environment</h2></div></div></div><p>Pyc files are not Python&rsquo;s only executable form besides source files. Python extension modules written in C/C++ come in the form of DLLs (on <span class="emphasis"><em>Windows</em></span> systems) and ELF files (on <span class="emphasis"><em>Linux</em></span>/<span class="emphasis"><em>BSD</em></span> systems). These modules contain compiled native code and are platform dependent, so unlike pyc files they cannot be passed between different platforms. They cannot be exchanged between different Python versions either, or different distributions of the same version for the same platform. Under some circumstances, even using a different version of the compiler from that used to compile certain Python distributions can break the building process.</p><p>While the executable format differs between platforms, the Python extension API is the same. The simplest extension one can write is the following:</p><pre class="programlisting">#include &lt;Python.h&gt;
PyMODINIT_FUNC initfirst(void) 
{
Py_InitModule3(&ldquo;first&rdquo;, NULL, &ldquo;Example module&rsquo;s docstring.&rdquo;);
}
</pre><p>Every extension module needs to export the init* function used by the Python interpreter during the import operation. All functions exported to Python must meet two criteria:</p><div class="orderedlist"><ol type="1"><li><p>Be declared with PyObject*</p></li><li><p>Be declared within the PyMethodDef table.</p></li></ol></div><p>The main entry point to the DLL is obviously DllEntryPoint(), and later DllMain(). However, even a disassembly shows nothing really interesting. Below is a listing of DllMain() (64-bit) from the ctypes module:</p><pre class="programlisting">.text:000000001D1AE850 ; BOOL __stdcall 
                       ; DllMain(HINSTANCE hinstDLL,
                       ; DWORD fdwReason, LPVOID 
                       ; lpvReserved)
.text:000000001D1AE850 DllMain     proc near   ; CODE
                                               ; XREF: 
                                               ; __DllMainCRTStartup+86p
.text:000000001D1AE850      ; __DllMainCRTStartup+A2p
.text:000000001D1AE850      ; DATA XREF: ...
.text:000000001D1AE850
.text:000000001D1AE850 var_18        = dword ptr -18h
.text:000000001D1AE850 hLibModule    = qword ptr 8
.text:000000001D1AE850 arg_8         = dword ptr 10h
.text:000000001D1AE850 arg_10        = qword ptr 18h
.text:000000001D1AE850
.text:000000001D1AE850    mov [rsp+arg_10], r8
.text:000000001D1AE855    mov [rsp+arg_8], edx
.text:000000001D1AE859    mov [rsp+hLibModule], rcx
.text:000000001D1AE85E    sub rsp, 38h
.text:000000001D1AE862    mov eax, [rsp+38h+arg_8]
.text:000000001D1AE866    mov [rsp+38h+var_18], eax
.text:000000001D1AE86A    cmp [rsp+38h+var_18], 1
.text:000000001D1AE86F    jz short loc_1D1AE873
.text:000000001D1AE871    jmp short loc_1D1AE87E
.text:000000001D1AE873 ; ----------------------------
.text:000000001D1AE873
.text:000000001D1AE873 loc_1D1AE873:     ; CODE XREF: 
                                        ; DllMain+1Fj
.text:000000001D1AE873    mov rcx, [rsp+38h+hLibModule] 
                          ; hLibModule
.text:000000001D1AE878    call     cs:DisableThreadLibraryCalls
.text:000000001D1AE87E
.text:000000001D1AE87E loc_1D1AE87E:     ; CODE XREF: 
                                        ; DllMain+21j
.text:000000001D1AE87E    mov eax, 1
.text:000000001D1AE883    add      rsp, 38h
.text:000000001D1AE887       retn
.text:000000001D1AE887 DllMain     endp</pre><p>The DllEntryPoint function code depends heavily on the compiler used. Microsoft compilers generate code that calls __security_init_cookie (/GS switch) and then jumps to __DllMainCRTStartup. This then calls the DllMain() function. However, inspection of DLL exports shows that there are more possible entry points:</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Python pyd module entry points." src="/uploads/images/figures/2011/07/python-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Python pyd module entry points.</b></p></div><p>Disassembly of init_ctypes() shows a series of internal Py_() function calls to prepare the Python environment. The reason for describing all these execution paths is simple: injecting native code, hooking/inserting breakpoints or using detours in all these places allows the execution and behaviour of the Python interpreter to be manipulated. Additionally, typical native code anti-debugging and obfuscation techniques can be used in all these places to increase the complexity of the analysis process. Furthermore, since (in the case of <span class="emphasis"><em>Windows</em></span>) such a module is for the operating system, another DLL can hook <span class="emphasis"><em>Windows</em></span> Debugging Events in order to hijack the loading of the Python module and load different ones in its place. If such a new module conforms with the requirements of the Python interpreter for external modules, then Python will happily use it further. This &lsquo;attack vector&rsquo; can be used in code obfuscation techniques as well as to aid in their analysis.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Graph of default init_ctype() function shows characteristic execution flow where the set of initial checks leads to the next one unless there is a single error. This can be used to detect init_ctype() in an obfuscated binary since its behaviour cannot be easily changed." src="/uploads/images/figures/2011/07/python-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Graph of default init_ctype() function shows characteristic execution flow where the set of initial checks leads to the next one unless there is a single error. This can be used to detect init_ctype() in an obfuscated binary since its behaviour cannot be easily changed.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4340873"></a>Embedded Python code</h2></div></div></div><p>Python extension modules are not the only form of native code that is executed during Python interpreter execution. Python provides a set of API functions to embed its interpreter in C code. The simplest case is to call the PyRun_SimpleString() function. The argument is a C string containing Python code that the interpreter will try to execute. Another useful function is PyRun_SimpleFile(), which allows any Python source code file to be executed. (For a full list of PyRun_* functions please consult the Python documentation at <a href="https://www.python.org/doc" target="_blank">http://www.python.org/doc</a>.)</p><p>Another interesting option is to embed the complete Python interpreter into a C application. This can be accomplished with the Py_Main() function. The simple C code that allows the Python interpreter to be embedded is as follows:</p><pre class="programlisting">Py_Initialize();
Py_Main(argc, argv);
Py_Finalize();</pre><p>The methods mentioned here do not cover all the possibilities of embedding and/or extending Python, however they provide a good overview of Python executable code and its format.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3462580"></a>Obfuscation techniques</h2></div></div></div><p>Now that all executable forms of Python have been described we can gain a better understanding of possible obfuscation techniques. The techniques have been divided into the groups shown in <a href="#table.2">Table 2</a>.</p><div class="table"><a id="table.2"></a><table border="1" summary="Obfuscation techniques."><colgroup><col align="center" /><col /></colgroup><tbody><tr><td align="center"><span class="bold"><strong>Generic technique</strong></span></td><td align="center"><span class="bold"><strong>Specific obfuscation method</strong></span></td></tr><tr><td align="center">Bytecode modification</td><td>&bull; Header magic bytes modification &bull; Header magic bytes truncation &bull; Marshalled code object modification/encryption</td></tr><tr><td align="center">Interpreter modification</td><td>&bull; Bytecode table modification &bull; Bytecode encryption</td></tr><tr><td align="center">Embedding Python code</td><td>&bull; Native code obfuscation technique</td></tr><tr><td align="center">Pyd modules modification / hijacking</td><td>&bull; Library modification &bull; Library execution hijacking</td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;Obfuscation techniques.</b></p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2954710"></a>Bytecode modification: magic number modification</h3></div></div></div><p>The simplest modification that stops some decompilers and all standard interpreters is the modification of the magic number at the beginning of the bytecode file. Such a change is trivial at the interpreter source code level, hence this method is very popular. Since the number of possible combinations of magic byte values is limited, and legal combinations are well known, even a simple method based on the brute force guessing of the correct value is acceptable and is simple to automate.</p><p>A simple variation of this technique is to truncate the magic number and add it during run time.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4378239"></a>Bytecode modification: marshalled code object modification/encryption</h3></div></div></div><p>This set of techniques is based on the premise that pyc files can be distributed in obfuscated/encrypted format and decrypted just before run time. No interpreter modification is required as the whole encryption/decryption process can be performed outside of the interpreter environment. The obvious weakness of this approach is that when execution breaks during the loading of the decrypted module, one can gain access to it. The execution break may either be user-generated or the result of a bug in the module itself (for example an exception).</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2947449"></a>Interpreter modification: bytecode table modification</h3></div></div></div><p>This method has been used increasingly frequently of late and is based on changing mapping between bytecode values and instructions. This requires changes to the Python interpreter but ensures that without the correct mappings, bytecode disassembly and proper module execution is not possible. In turn, use of the built-in dis module from the standard interpreter installation is no longer possible.</p><p>Fortunately, in order to execute such bytecode one needs the pyc file and the modified interpreter. Therefore it is possible to use the modified interpreter to get corresponding bytecode mappings and &lsquo;decrypt&rsquo; the bytecode. The idea is quite simple and it basically comes down to the following steps:</p><div class="orderedlist"><ol type="1"><li><p>Generate a complete set of Python opcodes by using some module source code.</p></li><li><p>Compile this module in the original interpreter and list the bytecode result.</p></li><li><p>Compile this module in the interpreter with the modified mapping and list the bytecode result.</p></li><li><p>Compare the results from steps 2 and 3 and adjust the bytecode map.</p></li></ol></div><p>The problem with this approach is the fact that Python 2.6 has around 120 different opcodes for bytecode, so getting all possible values can be tricky. Fortunately, we don&rsquo;t need to enumerate the whole bytecode table &ndash; we are only interested in the values used inside the module we are analysing. As most default Python packages (distributed in source code form) rely on standard modules (remember the slogan: &lsquo;batteries included&rsquo;) there is a good chance we can get the correct mappings by compiling files from the standard library (lib directory). In fact, step 3 can be skipped too, since the same standard modules are compiled to pyc form by default.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Using the dis module to disassemble function code &ndash; this works only if the bytecode map hasn&rsquo;t been modified and if the co_code object is intact." src="/uploads/images/figures/2011/07/python-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Using the dis module to disassemble function code &ndash; this works only if the bytecode map hasn&rsquo;t been modified and if the co_code object is intact.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3736985"></a>Interpreter modification: bytecode encryption</h3></div></div></div><p>This technique is based on the fact that the interpreter is responsible for the Python bytecode module format it can execute. Therefore modification of the main interpreter code not only allows the use of a different bytecode table but also provides many interesting possibilities such as:</p><div class="itemizedlist"><ul type="disc"><li><p>The addition of new opcodes</p></li><li><p>The changing of the pyc modules&rsquo; file format</p></li><li><p>The changing of the marshal code object.</p></li></ul></div><p>The last option allows code objects to be encrypted during compilation and decrypted during run time in memory.</p><p>The number of possible techniques in this area is endless and is limited only by how much work is required to implement certain &lsquo;features&rsquo;.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4637783"></a>Embedding Python code: native code obfuscation technique</h3></div></div></div><p>As discussed earlier there are a few different global techniques for embedding Python code. Use of an embedded Python interpreter not only allows its behaviour to be changed, but also allows native code to be mixed with Python code. All native code obfuscation techniques (including compiling into another VM) can be applied here.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3859165"></a>Pyd modules modification/hijacking</h3></div></div></div><p>This set of techniques is heavily dependent on target system platforms. The functionality and implementation of dynamic shared objects differs significantly between the platforms on which Python can run. Nevertheless, this characteristic of Python internals can be used to further obfuscate code or completely change execution flow at run time. On the <span class="emphasis"><em>Windows</em></span> platform (as mentioned already) the <span class="emphasis"><em>Windows</em></span> Debugging API or detours library seem like perfect tools to accomplish such a task.</p><p>What is worth noting is the fact that this set of techniques can be performed without native code but from Python code itself. A good example is the pydbg module, which on the Win32 platform provides all the necessary debugging API functions to insert a breakpoint and therefore control DLL execution.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3392801"></a>Dynamic code execution</h2></div></div></div><p>This is the only method based on source code obfuscation that I&rsquo;ll describe here due to its dynamic nature. The basic idea is to store marshalled code in source code. This can easily be done thanks to Python&rsquo;s dynamic nature and built-in functions like compile(), eval() and exec(). Here is an example:</p><pre class="programlisting">&gt;&gt;&gt; code_str = &lsquo;&rsquo;&rsquo;print &lsquo;Hello world!&rsquo; &lsquo;&rsquo;&rsquo;
&gt;&gt;&gt; bytecode = compile(code_str, &lsquo;&lt;string&gt;&rsquo;, &lsquo;exec&rsquo;)
&gt;&gt;&gt; bytecode
&lt;code object &lt;module&gt; at 00000000021ACE40, file &ldquo;&lt;string&gt;&rdquo;, line 1&gt;
&gt;&gt;&gt; exec(bytecode)
Hello world!
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(bytecode)
     1 0 LOAD_CONST      0 (&lsquo;Hello world!&rsquo;)
     3 PRINT_ITEM
     4 PRINT_NEWLINE
     5 LOAD_CONST      1 (None)
     8 RETURN_VALUE</pre><p>The bytecode code object can be encrypted to further hide its meaning, and decrypted before being passed to exec()-like functions.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4572467"></a>Platform-dependent anti-debugging techniques</h2></div></div></div><p>There are many different anti-debugging techniques mainly developed for protecting native code. However, some of these techniques can also be applied to Python code executing inside an interpreter.</p><p>It is important to remember that the Python interpreter process is just that: another process from the operating system&rsquo;s point of view. For example, in the case of the <span class="emphasis"><em>Windows</em></span> platform it has PEB, TEB, security tokens etc. Therefore it is possible to initiate the Python interpreter process using the <span class="emphasis"><em>Windows</em></span> Debugging API. Obviously, intercepting execution of the interpreter process provides us with the ability to change its behaviour and in turn have an impact on the execution flow of the Python bytecode.</p><p>Keep in mind, however, that when conducting the process at operating system level, all the rules of anti-debugging tricks apply as well. For example, controlling a process with the <span class="emphasis"><em>Windows</em></span> Debugging API leaves a lot of traces to which both the debugged process and python code have access. Therefore, to detect some debugging events we don&rsquo;t even need to modify the interpreter but instead just use generic API wrappers provided by Python modules. The best example to illustrate such an approach is the use of IsDebuggerPresent() &ndash; a well-known API function used by many anti-debugging tricks. Thanks to the ctypes module, Python code can access this function and call it (<a href="#figure.4">Figure 4</a>).</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="64-bit Python interpreter process running under WinDBG control." src="/uploads/images/figures/2011/07/python-3.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;64-bit Python interpreter process running under WinDBG control.</b></p></div><p>Obviously the rules mentioned above apply to both 32-bit and 64-bit processes and systems &ndash; but don&rsquo;t forget about some important differences in the case of 64-bit architectures in the <span class="emphasis"><em>Windows</em></span> Debugging API.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2617090"></a>Inside the interpreter at run time</h2></div></div></div><p>Since the Python interpreter is just a process running in user-land context, we can easily debug it using debuggers. Two possible approaches come to mind:</p><div class="itemizedlist"><ul type="disc"><li><p>Use of source code debugging if we have access to the interpreter source code or if the interpreter comes from python.org.</p></li><li><p>Use of native code debugging in cases where the interpreter source code is not available to us.</p></li></ul></div><p>The second situation seems more likely. Assuming the interpreter executable hasn&rsquo;t been stripped of symbols there are some good &lsquo;hooking&rsquo; points such as (WinDbg format for Python26 binary):</p><div class="itemizedlist"><ul type="disc"><li><p>python26!PyInterpreterState_Head</p></li><li><p>python26!PyEval_EvalFrame</p></li><li><p>python26!PyObject_Call</p></li><li><p>python26!PyObject_CallFunction</p></li></ul></div><p>What about cases in which symbols have been removed? The simplest approach &ndash; assuming we know the interpreter version &ndash; is to disable the original interpreter binary and extract signatures from those functions. Load the stripped interpreted executable and search for the signature within process memory. Keep in mind, however, that the compiler used for producing the executable of the custom interpreter may differ from that used for the official python.org CPython build.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4427709"></a>Summary</h2></div></div></div><p>As Python gains popularity, advances in anti-analysis and anti-debugging techniques will evolve faster. The mixture of bytecode, native code and external dependencies together with the simple pyc file format leaves a lot of room for more advanced techniques than those described here. It&rsquo;s not a question of <span class="emphasis"><em>if</em></span> we will see such new techniques but <span class="emphasis"><em>when</em></span> we will see them.</p></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Reversing Python objects&url=https://www.virusbulletin.com/virusbulletin/2011/07/reversing-python-objects"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2011/07/reversing-python-objects'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2011/07/reversing-python-objects&title=Reversing Python objects"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2011/07/reversing-python-objects&t=Reversing Python objects"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2011/07/reversing-python-objects"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>