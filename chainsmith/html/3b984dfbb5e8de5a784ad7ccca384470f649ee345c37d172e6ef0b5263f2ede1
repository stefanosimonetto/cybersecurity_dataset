<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Your computer is now stoned (...again!)</title>
<meta name="description" content="Mebroot - the MBR rootkit - is one of the most advanced and stealthiest malware seen to date. It operates in the lowest levels of the operating system, uses many undocumented tricks and relies heavily on unexported functions and global variables. In this article Elia Florio and Kimmo Kasslin track the rise of the MBR rootkit." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 2402;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb200804-MBR-rootkit"></a>Your computer is now stoned (...again!)</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2008-04-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Elia</span> <span class="surname">Florio</span></h3><span class="orgname">Symantec Security Response</span>, <span class="orgdiv">Ireland</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Kimmo</span> <span class="surname">Kasslin</span></h3><span class="orgname">F-Secure Security Lab</span>, <span class="orgdiv">Malaysia</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Mebroot - the MBR rootkit - is one of the most advanced and stealthiest malware seen to date. It operates in the lowest levels of the operating system, uses many undocumented tricks and relies heavily on unexported functions and global variables. In this article Elia Florio and Kimmo Kasslin track the rise of the MBR rootkit.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2008 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-4308" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-4308" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3363420"></a></span></dt><dt><span class="sect1"><a href="#id3164130">Raw disk access under Windows</a></span></dt><dt><span class="sect1"><a href="#id2329305">Owning the MBR</a></span></dt><dt><span class="sect1"><a href="#id4230766">Owning the system from the boot</a></span></dt><dt><span class="sect1"><a href="#id3978460">New disk stealth techniques</a></span></dt><dt><span class="sect1"><a href="#id3353308">New firewall-bypassing techniques</a></span></dt><dt><span class="sect1"><a href="#id2116526">Conclusions</a></span></dt><dt><span class="bibliography"><a href="#id2752808">Bibliography</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3363420"></a></h2></div></div></div><p>We can trace the first evidence of &lsquo;Mebroot&rsquo; (the MBR rootkit) back to the end of 2007. According to the PE timestamp of the oldest sample seen, it was compiled during early November 2007 and distributed multiple times over several weeks at the end of the year. The timeline of Mebroot&#39;s evolution (as shown in <a href="#figure.1">Figure 1</a>) was first outlined by Matt Richard from <em class="phrase">iDefense</em> [<span class="citation"><a href="#citation.1">1</a></span>], who discovered the first sample in the wild together with the <em class="phrase">GMER</em> team [<span class="citation"><a href="#citation.2">2</a></span>].</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Timeline of Mebroot evolution from &lsquo;beta&rsquo; to final release." src="/uploads/images/figures/2008/04/FIG1_Timeline.png" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Timeline of Mebroot evolution from &lsquo;beta&rsquo; to final release.</b></p></div><p>We know that during November 2007 a malicious domain (hxxp://gfeptwe.com) &ndash; used in the past to distribute and install variants of Trojan.Anserin (a.k.a. Sinowal) &ndash; began to serve copies of the MBR rootkit for a limited period of time. The malware was installed via drive-by exploits using a set of old <em class="phrase">Microsoft</em> vulnerabilities, probably in an attempt to stay under the radar during this &lsquo;beta&rsquo; release stage. </p><p>Two waves of related drive-by attacks took place between December 2007 and January 2008. These attacks were followed by a period of calm before finally, in February 2008, the steady flow of attacks installing Mebroot resumed [<span class="citation"><a href="#citation.3">3</a></span>]. The whole timeline seems like a development and QA project; in fact all the variants released in the initial period have close PE timestamps and very small changes in the code.</p><p>We do not know how long it has taken the authors to develop and write the code of this sophisticated threat, but the idea of malicious code that modifies a system&rsquo;s MBR is not new (even ignoring DOS attacks of old), having first been discussed some years ago. In 2004, Greg Hoglund wrote about MBR attacks in his book <em class="citetitle">Exploiting Software</em> [<span class="citation"><a href="#citation.4">4</a></span>], while the most notable research in the area of MBR rootkits was undertaken by Derek Soeder of <em class="phrase">eEye</em> during 2005 [<span class="citation"><a href="#citation.5">5</a></span>]. Soeder created BootRoot, a proof-of-concept MBR rootkit able to target <em class="productname">Windows XP </em>and <em class="productname">2000</em>. Finally, researchers Nitin and Vipin Kumar of <em class="phrase">NVLabs</em> recently published a paper [<span class="citation"><a href="#citation.6">6</a></span>] about a new type of MBR rootkit called Vbootkit, designed expressly to work on <em class="productname">Windows Vista</em>.</p><p>It is quite obvious that Mebroot&rsquo;s authors have benefited from other people&rsquo;s research, and this fact is confirmed by a quick comparison of the MBR code of Mebroot and BootRoot. A large area of Mebroot&rsquo;s MBR loader is almost identical to the BootRoot code published by <em class="phrase">eEye</em>. Mebroot&rsquo;s MBR code hooks INT 13 at boot exactly as BootRoot does, with the intent of patching the OSLOADER image (part of the NTLDR file) when it is loaded. This patch is done on the fly with the same static signature as that used by BootRoot (8BF085F6742?803D). The signature is patched with a CALL DWORD[addr] instruction that passes control to the second-stage payload of the malware. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3164130"></a>Raw disk access under Windows</h2></div></div></div><p>Mebroot arrives with an EXE installer that is typically between 250 KB and 350 KB and which takes control of the system by overwriting the MBR. This attack is possible because some versions of <em class="productname">Windows</em> allow programs to overwrite disk sectors (including the MBR) directly and without proper restrictions.</p><p>The initial reports about this MBR attack were slightly confused, so let&rsquo;s clarify some points to understand when the attack is possible. On <em class="productname">Windows 2000</em>, <em class="productname">XP</em> and <em class="productname">2003</em> systems, raw access to disk is possible for any user-mode program running in ring-3 (no need to go into ring-0!), but this requires Administrator privileges [<span class="citation"><a href="#citation.7">7</a></span>]. The fact that most users run <em class="productname">Windows</em> as Administrator clearly makes them vulnerable to this type of rootkit.</p><p>The issue has been known about for some time in the 2K/XP families, and <em class="productname">Vista</em> was partially secured in 2006 (with Release Candidate 2) following a successful attack demonstration by Joanna Rutkowska [<span class="citation"><a href="#citation.8">8</a></span>]. In fact, the attack is now mitigated on <em class="productname">Vista</em> by User Account Control (UAC), which blocks raw access to disks. The table below summarizes which OSs can be infected by Mebroot: </p><div class="table"><a class="chapter" id="id4154330"></a><table border="1" summary="Windows operating systems susceptible to Mebroot
      infection"><colgroup><col align="center" /><col /><col /></colgroup><thead><tr><th align="center"> Windows OS</th><th align="center">Can MBR be infected?</th><th align="center">Is rootkit active?</th></tr></thead><tbody><tr><td align="center">Windows 2000 (user is Administrator)</td><td>Yes</td><td>Yes</td></tr><tr><td align="center">Windows XP (user is Administrator)</td><td>Yes</td><td>Yes</td></tr><tr><td align="center"> Windows 2003 (user is Administrator)</td><td>Yes</td><td>Yes</td></tr><tr><td align="center">Windows Vista (UAC disabled)</td><td>Yes</td><td>No</td></tr><tr><td align="center">Windows Vista (UAC enabled)</td><td>No</td><td>No</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Windows operating systems susceptible to Mebroot infection</b></p></div><p>It is important to clarify that Mebroot can only infect the <em class="productname">Vista</em> MBR if UAC is disabled and that, even after a successful infection, the rootkit will not be able to load itself at boot because it targets specific signatures of the <em class="productname">Windows</em> kernel that are not present on <em class="productname">Vista</em>. In this scenario <em class="productname">Vista</em> users may live with an infected MBR that boots up the operating system normally, without any rootkit activity, because the malware is never loaded in memory. In addition to this, <em class="productname">Vista</em> is secure because its boot process is completely different from any previous OS. It is possible that future variants of the threat may be built to overcome this limitation though.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2329305"></a>Owning the MBR</h2></div></div></div><p>All the rootkit installer samples are encrypted with a custom &lsquo;spaghetti-like&rsquo; packer that has already been seen in the Anserin/Sinowal family. This nasty packer scrambles the execution flow of a program by interleaving valid opcodes with JMP or JMP DWORD[addr] instructions. The result is a piece of polymorphic code that is difficult to trace and analyse, but which retains its functionality. Unpacking is trivial and requires just a breakpoint on the VirtualFree API.</p><p>The installer file (mat[n].exe) seems to have a double entry point because it is designed to run either as an EXE or as a DLL module. In fact, after the infection of the MBR, the malware patches itself to become a DLL and runs a second time using the regsvr32 command to delete itself and reboot the machine. Some installers also have a delayed infection routine with a random timer. The infection starts after a delay of a few minutes to avoid automated analysis by honeypot systems and to fool quick black box analysis.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Mebroot &lsquo;spaghetti&rsquo; packer in action. Too many jumps..." src="/uploads/images/figures/2008/04/FIG2_SpaghettiPacker.PNG" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Mebroot &lsquo;spaghetti&rsquo; packer in action. Too many jumps...</b></p></div><p>Mebroot tries to infect the first 16 disk drives connected to the machine with a loop that calls CreateFile() on \\.\PhysicalDrive[n] several times. A side effect of this behaviour is that in some cases the rootkit also infects external USB disks and hard drives. Infected external disks do not have active infections because typically they are not used to boot the operating system, but the disks will still contain traces of the malware on some sectors. One of the latest variants of Mebroot (mat25.exe) uses a different approach to perform raw operations on disk. Instead of using CreateFile() installs and loads a driver that works as a &lsquo;wrapper&rsquo; for the system driver disk.sys. Essentially, the new installer uses its own driver to communicate with the OS disk driver and to perform low-level read/write actions using IRP. This strategy can probably bypass protection systems that block raw access to disk.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Raw access to disk simply requires the CreateFile and ReadFile/WriteFile APIs." src="/uploads/images/figures/2008/04/FIG3_RawAccess.PNG" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Raw access to disk simply requires the CreateFile and ReadFile/WriteFile APIs.</b></p></div><p>During installation, the malware first reads the current disk MBR and checks some characteristics of the drive such as the number of bytes per sector (it expects 512 bytes), the signature 0x55AA at the end of the MBR, and whether the drive has already been infected (the infection marker is the DWORD 0xAD022C83 at offset 0x16 of the MBR). Next, it parses the partition table to find the physical end of the disk and verifies that there is enough unpartitioned slack space at the end for it to write its own malicious code. The installer usually needs at least 650 free sectors to store the main rootkit driver. This strategy is clever for two reasons: first, the driver is not stored as a file on the system, but in raw disk sectors. Secondly, writing the malicious driver after the end of the disk means that it requires some forensic expertise to extract samples from infected machines.</p><p>The installer makes note of the sector in which the rootkit executable is stored and then adjusts in memory the Payload Loader shellcode that will load the SYS driver at the next reboot. Finally, it overwrites three sectors immediately before the beginning of the first partition. On <em class="productname">Windows 2000</em> and <em class="productname">XP</em> with single partitions, Mebroot typically overwrites sectors 60, 61 and 62. These sectors may be different on systems with multiple OS and disk partitions.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4230766"></a>Owning the system from the boot</h2></div></div></div><p>The complete scheme of the Mebroot loading process is shown in <a href="#figure.4">Figure 4</a>.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Mebroot loading process: how to own the system from the boot." src="/uploads/images/figures/2008/04/FIG4_BigPicture.png" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Mebroot loading process: how to own the system from the boot.</b></p></div><p>The following is a step-by-step description of the rootkit boot process and kernel infection:</p><div class="orderedlist"><ol type="1"><li><p>The infected MBR reserves 2 KB of conventional memory and relocates itself from 0x7C00 to 0x0000.</p></li><li><p>Next, it reads payloads from sectors 60 (kernel patcher) and 61 (payload loader) into memory blocks adjacent to the relocated code.</p></li><li><p>The MBR code hooks INT 13 and passes control to relocated code at 0x004D.</p></li><li><p>It reads sector 62 (old MBR) back to 0x7C00 memory and passes control to it; the OS starts booting up normally while INT 13 is hooked by the threat.</p></li><li><p>The hooked code intercepts all disk-reading operations and patches the OSLOADER module (part of NTLDR) when it is loaded from disk.</p></li><li><p>The patched OSLOADER calls the Kernel Patcher shellcode in memory (sector 60).</p></li><li><p>This shellcode scans and patches the NTOSKRNL.EXE image near &lsquo;CALL nt!IoInitSystem&rsquo;.</p></li><li><p>The modified NTOSKRNL.EXE calls the Payload Loader shellcode (sector 61), which loads and runs the rootkit driver stored in the last sector of the disk.</p></li></ol></div><p>To minimize the footprint and traces in memory, the loader shellcode deletes itself by filling the memory area in which it is stored with zeroes. This detail leads us to believe that nothing is left to chance and the authors of this nasty piece of code are skilled and meticulous malware programmers. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3978460"></a>New disk stealth techniques</h2></div></div></div><p>Analysis of the final rootkit driver loaded in memory requires some extra effort. Some rootkit variants have an extra packing layer that unpacks the real kernel driver using scrambled spaghetti code. In this case, a good breakpoint on ExAllocatePoolWithTag will do the job and allow us to dump the final unpacked driver.</p><p>Since the rootkit SYS driver is loaded by its own loader in an unusual way, the module does not expect the normal parameters passed to <em class="productname">Windows</em> drivers. In fact, it receives three parameters passed by the Payload Loader: the kernel ImageBase of the unpacked driver, a pointer to PsLoadedModuleList (used to resolve imports) and the ImageBase of the packed driver. The rootkit resolves all NTOSKRNL and HAL imports with its own routine and also deletes from memory the packed driver image when it is no longer needed. Later on, even the MZ header of the unpacked driver is deleted from memory to minimize its footprint, leaving in the kernel space only random traces of code in executable memory pages.</p><p>The rootkit hides itself by hooking the disk.sys driver. It finds DeviceObject for \Device\HardDisk[N]\DR0 and reads the old MBR from sector 62 into an allocated pool that will be used as a &lsquo;cached copy&rsquo; of the old MBR to improve the performance of stealth operations. Since the rootkit does not have files, process or registry keys to hide, the stealth functionalities are limited to intercepting read/write operations on raw disk sectors. This is done by hooking the dispatch handlers of the \Driver\Disk for IRP_MJ_READ and IRP_MJ_WRITE routines. When a program tries to read the MBR (sector 00) or any other sector used by the rootkit (60, 61, 62 or sectors after the end of the disk) the hooked code will return a fake image of the sector, showing the old MBR or an empty sector filled with zeroes in the other cases. In a similar way, the rootkit will protect itself by blocking all write operations to its sectors.</p><p>The rootkit needs to maintain hook-free versions of the IRP_MJ_READ and IRP_MJ_WRITE functions, so it uses a special trick: it generates a random DWORD value used as a &lsquo;magic key&rsquo;. Later, the rootkit is able to perform normal read/write operations with the original dispatch routines simply by calling the disk.sys driver with an IRP packet that contains this magic key at offset 0x40. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3353308"></a>New firewall-bypassing techniques</h2></div></div></div><p>Analysing the rootkit driver&rsquo;s network code becomes even more difficult. The majority of its functions are still heavily obfuscated, even after successful unpacking. The fastest approach to bypass the obfuscation is to use code tracing and custom scripts to clean up the trace logs of extra garbage. After a lot of frustration and some breakthroughs, we now know that Mebroot&rsquo;s firewall-bypassing technique is similar to, but goes one step further than that used by Srizbi [<span class="citation"><a href="#citation.9">9</a></span>].</p><p>Like Srizbi, Mebroot operates in the NDIS layer, but it uses a different approach to gain access to the internal NDIS structures. Whereas Srizbi installed a dummy protocol, Mebroot uses the unexported ndisMiniportList which points to an existing miniport described by the _NDIS_MINIPORT_BLOCK structure. To gain exclusive access to the list it acquires the ndisMiniportListLock spinlock, which is also unexported.</p><p>From the miniport block the code uses a similar approach to that used by Srizbi to find a suitable adapter that is bound to either the PSCHED or the TCPIP protocol. Finally, it finds the address of the lowest-level send handler function and hooks four NDIS handler functions.</p><p>To send packets it uses the following handler function:</p><pre class="programlisting">NDIS!_NDIS_M_DRIVER_BLOCK
 +0x020 MiniportCharacteristics : _NDIS51_MINIPORT_CHARACTERISTICS
  +0x040 SendPacketsHandler : 0xf9adf332 void pcntpci5!LanceSendPackets+0</pre><p>To get a notification after the send operation has completed it uses the following hook: </p><pre class="programlisting">NDIS!_NDIS_MINIPORT_BLOCK
  +0x0ec SendCompleteHandler : 0x81825bb0 void mbr_rootkit!Hook_SndCompHdlr</pre><p>To receive packets it uses the following hooks:</p><pre class="programlisting">NDIS!_NDIS_OPEN_BLOCK
 +0x040 ReceiveHandler : 0x8182cd10 int mbr_rootkit!Hook_RcvHdlr
  +0x050 ReceivePacketHandler : 0x8182e400 int mbr_rootkit!Hook_RcvPcktHdlr</pre><p>Mebroot&rsquo;s network code is advanced in many ways. It is stealthy &ndash; only a single pointer is hooked at any one time. The rest of the hooks in the selected protocol&rsquo;s _NDIS_OPEN_BLOCK structure are in use only when the rootkit is sending packets. It accomplishes this by creating a copy of the original open block structure which is then hooked. When it needs to send a packet it replaces a single pointer from the _X_BINDING_INFO structure to point to its private open block structure to make sure the packets received from that point onwards will be processed by its own handler functions. Once the packets have been processed the original pointer is put back. This process is illustrated in <a href="#figure.5">Figure 5</a>.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Mebroot activates the full set of its hooks only when it needs them." src="/uploads/images/figures/2008/04/FIG5_NdisHook.png" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Mebroot activates the full set of its hooks only when it needs them.</b></p></div><p>Another example of Mebroot&rsquo;s stealth is the way it ensures that none of the NDIS API functions it relies on are hooked by firewalls. Instead of just copying the original ndis.sys from disk into allocated memory and using it as its private module, it uses a &lsquo;code pullout&rsquo; technique to load only the relevant parts of the code into memory. This technique was first described by Alexander Tereshkin, a.k.a. 90210, at rootkit.com [<span class="citation"><a href="#citation.10">10</a></span>]. Once the relevant code blocks have been copied into one continuous block of memory it is prepared for execution. Finally, the code patches its own import address table to make sure all imported NDIS API functions point to the code that was pulled out.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2116526"></a>Conclusions</h2></div></div></div><p>Mebroot is the most advanced and stealthiest malware we have analysed so far. It operates in the lowest levels of the operating system, uses many undocumented tricks and relies heavily on unexported functions and global variables. We did not encounter a single blue screen while examining the latest samples that were distributed after February 2008. This is a clear sign of the level of professionalism of today&#39;s malware authors.</p><p>It is also evident that the author of Mebroot is following closely the research carried out by individuals who have presented their findings at Black Hat conferences and on rootkit.com. Mebroot&rsquo;s MBR code was almost identical to BootRoot&rsquo;s, while the firewall-bypassing code closely resembles the most advanced ideas presented by Tereshkin at Black Hat USA 2006 [<span class="citation"><a href="#citation.11">11</a></span>]. In addition, after we successfully deciphered some of the code used to perform the code pullout it became clear that some of the functions were one-to-one with functions that are part of the phide2 source code. Maybe the next malware from Mebroot&rsquo;s author will use virtualization to make it even more difficult to detect and remove &ndash; at least proof of concept source code is already available for this [<span class="citation"><a href="#citation.12">12</a></span>]. </p><p><span class="emphasis"><em>Elia Florio and Kimmo Kasslin will present an extended and more detailed look at the MBR rootkit at VB2008 later this year. VB2008 takes place 1&ndash;3 October 2008 in Ottawa, Canada. See <a href="/conference/vb2008" target="_top">http://www.virusbtn.com/conference/vb2008/ </a>for the full programme and registration details.</em></span></p></div><div class="bibliography"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2752808"></a>Bibliography</h2></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Master Boot Record timeline. <span class="bibliosource"><a href="http://isc.sans.org/diary.html?storyid=3820" target="_blank">http://isc.sans.org/diary.html?storyid=3820</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Stealth MBR rootkit (Jan 2nd, 2008). GMER team. <span class="bibliosource"><a href="http://www2.gmer.net/mbr/" target="_blank">http://www2.gmer.net/mbr/</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] The Flow of MBR Rootkit Trojan Resumes. <span class="bibliosource"><a href="https://www.symantec.com/enterprise/security_response/weblog/2008/02/the_flow_of_mbr_rootkit_trojan.html" target="_blank">http://www.symantec.com/enterprise/security_response/weblog/2008/02/the_flow_of_mbr_ rootkit_trojan.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Hoglund, G.; McGraw, G. Exploiting software: how to break code. 2004, p.429.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] eEye BootRoot. <span class="bibliosource"><a href="http://research.eeye.com/html/tools/RT20060801-7.html" target="_blank">http://research.eeye.com/html/tools/RT20060801-7.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] BOOT KIT: Custom boot sector based Windows 2000/XP/Vista subversion. <span class="bibliosource"><a href="http://www.nvlabs.in/?q=node/11" target="_blank">http://www.nvlabs.in/ ?q=node/11</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] INFO: Direct Drive Access Under Win32. Microsoft. <span class="bibliosource"><a href="https://support.microsoft.com/kb/q100027" target="_blank">http://support.microsoft.com/kb/q100027</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] Rutkowska, J. Subverting Vista Kernel for fun and profit. 2006. <span class="bibliosource"><a href="http://www.invisiblethings.org/papers/joanna rutkowska - subverting vista kernel.ppt" target="_blank">http://www.invisiblethings.org/papers/joanna%20rutkowska%20-%20subverting%20vista%20kernel.ppt</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] Kasslin, K.; Florio, E. Spam from the Kernel. Virus Bulletin. November 2007, pp.5&ndash;9. <span class="bibliosource"><a href="/virusbulletin/2007/11/spam-kernel
" target="_top">http://www.virusbtn.com/vba/2007/11/vb200711-srizbi</a></span>.</p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] Phide2. <span class="bibliosource"><a href="http://rootkit.com/vault/90210/phide2.zip" target="_blank">http://rootkit.com/vault/90210/phide2.zip</a></span>.</p></div><div class="bibliomixed"><a id="citation.11"></a><p class="bibliomixed">[11] Tereshkin, A. Rootkits: Attacking Personal Firewalls. Black Hat USA 2006. <span class="bibliosource"><a href="https://www.blackhat.com/presentations/bh-usa-06/BH-US-06-Tereshkin.pdf" target="_blank">http://www.blackhat.com/presentations/bh-usa-06/BH-US-06-Tereshkin.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.12"></a><p class="bibliomixed">[12] Blue Pill Project. <span class="bibliosource"><a href="http://bluepillproject.org/" target="_blank">http://bluepillproject.org/</a></span>.</p></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Your computer is now stoned (...again!)&url=https://www.virusbulletin.com/virusbulletin/2008/04/your-computer-now-stoned-again"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2008/04/your-computer-now-stoned-again'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2008/04/your-computer-now-stoned-again&title=Your computer is now stoned (...again!)"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2008/04/your-computer-now-stoned-again&t=Your computer is now stoned (...again!)"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2008/04/your-computer-now-stoned-again"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>