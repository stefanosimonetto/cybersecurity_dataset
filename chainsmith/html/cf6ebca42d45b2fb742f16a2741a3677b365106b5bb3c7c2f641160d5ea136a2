<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Throwback Thursday: 'In the Beginning was the Word...'</title>
<meta name="description" content="Word and Excel’s internal file formats used to be something in which few were interested – but the appearance of macro viruses in the mid 90s changed all that, as Andrew Krukov explains." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 4831;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1>Throwback Thursday: 'In the Beginning was the Word...' (Nov '96)</h1>
<h3>Andrew Krukov</h3>
<p><em>Virus Bulletin © 2016 </em></p>
<hr />
<p> </p>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-7968" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="500">Table of contents</div><div id="ccm-remo-expand-content-7968" class="ccm-remo-expand-content"><p><a class="toc-level2" href="#h2-introduction">Introduction</a><br /><a class="toc-level2" href="#h2-the-end-of-the-beginning">The End of the Beginning</a><br /><a class="toc-level2" href="#h2-a-totally-new-concept">A Totally New Concept</a><br /><a class="toc-level2" href="#h2-languages">Languages</a><br /><a class="toc-level2" href="#h2-editing-and-hiding">Editing and Hiding</a><br /><a class="toc-level2" href="#h2-documents-templates-sheets-workbooks">Documents, Templates, Sheets, Workbooks...</a><br /><a class="toc-level2" href="#h2-macro-activation-executing-the-victim">Macro Activation: Executing the Victim</a><br /><a class="toc-level2" href="#h2-code-representation">Code Representation</a><br /><a class="toc-level2" href="#h2-whats-next">What's Next?</a></p>
<p> </p></div></div><p><em>(This article was first published in Virus Bulletin in November 1996)</em></p>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>The twentieth century has been one of innovation and new technology, seeing the popularization of the so-called<br />'thinking machines' we call computers. A side-effect of this development is the computer virus: today, approaching the end of 1996, viruses have been infiltrating machines for over ten years, replicating, crashing systems, and corrupting data.</p>
<p>Physics teaches us that every action has an equal and opposite reaction – so, following close on the heels of viruses, along came the anti-virus industry. Many hundreds of people the world over work for dozens of research companies and hundreds of sales/support sites which, with varying degrees of success, protect users against computer bugs.</p>
<p>Millions of dollars are lost to virus action, and millions are spent to recover data, or to buy anti-virus and other security soft- and hardware. Hackers write viruses, other hackers create new anti-virus programs, publishers print them, distributors distribute, end-users buy. And life goes on...</p>
<h2><a class="chapter" name="h2-the-end-of-the-beginning"></a>The End of the Beginning</h2>
<p>What would happen if the world woke up one sunny morning, and viruses had disappeared overnight? Perhaps<br />not much of significance. Users would be happy, the anti-virus industry would put its expertise into other fields, and Grandma would tell small children old myths about the nasty viruses which used to run rampant through the computers of the world.</p>
<p>Is it possible to kill viruses off forever? To do this, everyone would have to use operating systems that do not support viruses. Granted, viruses may be written for any popular OS; but to write viruses and spread them internationally, two things are necessary:</p>
<ul>
<li>a well-documented OS, which makes the writing easy</li>
<li>many people exchanging executables for that OS</li>
</ul>
<p>Only one OS meets both requirements: the very popular (and remarkably fully-documented) DOS. DOS viruses are the only ones, in the last ten years, to have created problems daily for users in every corner of the planet. <em>Windows </em>viruses were discovered in the wild only in 1996, and the Tentacle variants are the only ones to make any impact so far. No <em>Windows 95</em> or OS/2 viruses are in the wild.</p>
<p>Moreover, compared with the circa ten thousand DOS viruses, the number of viruses for other operating systems is paltry: 100–200 <em>Mac</em> viruses, fewer than twenty <em>Windows</em> viruses, three <em>Windows 95</em> viruses (all are variants of Boza), and a handful for OS/2. So, there are over 100 times as many DOS viruses in existence as the total of all other viruses.</p>
<p>Therefore, it seems that to break the circle of virus writing, users must stop using DOS and turn to one of the plethora of new operating systems. Viruses will then die, as will the anti-virus industry.</p>
<p>Not so.</p>
<h2><a class="chapter" name="h2-a-totally-new-concept"></a>A Totally New Concept</h2>
<p>WinWord.Concept overturned these beliefs. This infector was the first in the new breed of <em>Word</em> macro viruses; viruses for which the old rules do not apply. They are application-specific, multi-OS viruses; spreading only within <em>Word</em> documents, but under all OSs for which a version of <em>Word</em> is available.</p>
<p>They are at the same time simple and complex: simple, because they are written in a variant of Basic, so it is not necessary to look at long listings of assembler instructions to analyse them; complex, because locating the infected macro in the document, detecting the virus and disinfecting the document is a complex task. To make matters worse, <em>Word</em> macro viruses spread like wildfire – after all, <em>Word</em> documents are a standard method of data exchange.</p>
<p>So anti-virus researchers began to direct their considerable resources and intellect against the new 'visitors'. To detect and disinfect these viruses, it is necessary to parse the <em>MS Word</em> format, then go through data structures, calculate pointers, follow these pointers, and examine a considerable amount of data – and all this simply to <em>find</em> the macros in a given document!</p>
<p>The binary format of a <em>Word</em> document is more complex than that of a conventional executable. A <em>Word</em> document looks like an entire filing system, with its own FATs, directories, blocks of data, etc. Researchers have spent a great deal of time, and used many different techniques, to reverse-engineer this format; to understand this most undocumented of file formats. Now many scanners can do this, and detect and remove viruses elegantly and quickly from <em>Word</em> documents.</p>
<p>Not so long ago we were still awaiting the next hit, which was bound to be an <em>Excel</em> macro virus; nevertheless, the appearance of Laroux in the wild shocked many anti-virus researchers. Detecting the Laroux virus presents a much more complex problem than detecting the <em>Word</em> viruses, as the <em>Excel</em> internal binary format is more complicated. The parsing procedures have to manipulate different tables of information, different sequences of pointers, and different data formats.</p>
<p>These new problems have initiated a new wave of anti-virus activity around the world: at present, the disinfection mechanisms are still under construction. At the moment, there is no standard method of disinfecting <em>Excel</em> spreadsheets.</p>
<p>The conclusion? Viruses will not die, nor will the anti-virus industry. Users will not be properly protected. <em>Word</em> and <em>Excel </em>viruses are just the current chapter in this never-ending story.</p>
<h2><a class="chapter" name="h2-languages"></a>Languages</h2>
<p>Two products from one company, one 'office', but each with a completely different macro language. The different development paths of <em>Word</em> and <em>Excel</em> are all too clear to those who have played extensively with the two applications' respective programming languages.</p>
<p>Any programming language built in to an application intended for manipulating documents and allowing automated document and data processing must clearly have access to the application's internal data. In the <em>Office</em> suite, there are two methods to access internal data: using functions and procedures, and using object-oriented programming.</p>
<p>Both languages discussed here (<em>WordBasic</em> and <em>Excel </em><em>VisualBasic</em>) have the same parent, Basic, but use completely different methods for accessing the application's internal data. All internal objects in <em>WordBasic</em> are accessed by functions and simple statements. For example, this statement would modify the current style's font attributes:</p>
<pre>FormatDefineStyleFont.Points = "12", .Bold = 1</pre>
<p>Statements are extensions of normal Basic, and represent procedures with named arguments. In contrast, <em>Excel </em><em>VisualBasic</em> uses an object-oriented method of access. All internal data is organized into an object hierarchy, and each object has its own methods and properties. The root object in this hierarchy is referred to as 'Application'. The following commands set the font attributes for the object 'myObject':</p>
<pre>myObject.Font.Bold = True<br />myObject.Font.Size = 12</pre>
<p>Whilst the statements given above for the two languages may appear remarkably similar, they actually function in a completely different way.</p>
<p>Another big difference between the two is the ability to use user-defined named constants in macros, a feature present only in <em>Excel VisualBasic</em>. Both languages can invoke external routines stored in a <em>Windows</em> dynamic-link library (DLL). This feature allows the programmer access to all system resources via the <em>Windows</em> API, offering huge flexibility and power, with similarly-proportioned risks.</p>
<h2><a class="chapter" name="h2-editing-and-hiding"></a>Editing and Hiding</h2>
<p><em>Excel</em> offers an enhanced environment for source-code editing; it provides real-time syntax highlighting, and checks each line of code as it is typed for syntax errors. By contrast, <em>Word </em>only checks the syntax of a macro whilst it is being executed. </p>
<p>Both languages can make the source code for macros inaccessible to the user; <em>WordBasic</em> achieves this by setting the 'Execute Only' flag whilst the macros are being copied, whereas in <em>Excel</em> the same feat is accomplished by setting the sheet's 'Visible' property to 'xlVeryHidden'.</p>
<h2><a class="chapter" name="h2-documents-templates-sheets-workbooks"></a>Documents, Templates, Sheets, Workbooks...</h2>
<p>Only <em>Word</em> templates can contain <em>WordBasic</em> macros. A <em>WordBasic</em> macro is a set of functions and procedures – one of the procedures must be called MAIN, and will be executed when the macro is invoked. MAIN, like all other functions and procedures, can of course call functions and procedures from any macro in any loaded template. It is possible to create procedures and functions within a macro which are only accessible by other macros, not by the user. </p>
<p>Any <em>Excel</em> file can contain any number of macro sheets, each of which can contain any number of procedures/<br />functions. Operations with macros from macro level are valid only for the macro sheet as a whole. </p>
<h2><a class="chapter" name="h2-macro-activation-executing-the-victim"></a>Macro Activation: Executing the Victim</h2>
<p>Both <em>Word</em> and <em>Excel</em> have the unfortunate ability to run macros automatically on specified events. The first method by which this can be done is identical on both systems. By giving a macro a special name, the application can run it automatically when a user performs an operation such as opening/closing a document. <em>Word</em> and <em>Excel</em> recognize the following names as automatic macros; the now-infamous 'auto' macros:</p>
<table class="table table-striped" border="0" align="center">
<tbody>
<tr>
<td><strong>Event</strong></td>
<td><strong>Word</strong></td>
<td><strong>Excel</strong></td>
</tr>
<tr>
<td>Open a document</td>
<td>AutoOpen</td>
<td>Auto_Open</td>
</tr>
<tr>
<td>Close a document</td>
<td>AutoClose</td>
<td>Auto_Close</td>
</tr>
<tr>
<td>Application start</td>
<td>AutoExec</td>
<td>-</td>
</tr>
<tr>
<td>Application quit</td>
<td>AutoExit</td>
<td>-</td>
</tr>
<tr>
<td>Create a document</td>
<td>AutoNew</td>
<td>-</td>
</tr>
<tr>
<td>Activate a sheet</td>
<td>-</td>
<td>Auto_Activate</td>
</tr>
<tr>
<td>Deactivate a sheet</td>
<td>-</td>
<td>Auto_Deactivate</td>
</tr>
</tbody>
</table>
<p>Another method of macro activation provided by <em>WordBasic </em>is the interception (or 'hooking') of built-in commands. By giving a macro the same name as a <em>Word</em> built-in command (for example, FileSave or ToolsMacro), <em>Word</em> will run it instead of the original command. For example, if a macro called FileOpen has been installed, it will be executed when the user selects the Open item from the File menu, or when he presses the Open button on the toolbar. Also, a programmer has the ability to determine the name of the command or macro assigned to a menu item or toolbar button – that is to say, he can modify the Open button to have a completely different purpose, including calling a custom macro.</p>
<p>The third method of activation is via the OnTime statement. For example, this command would run a macro called 'WakeUp' at 10:00:</p>
<pre>OnTime "10:00", "WakeUp"</pre>
<p>At any given time, only one macro can await execution – the scheduling is lost if <em>Word</em> is closed before the given time. In addition, the timer is not reactivated when <em>Word</em> is restarted. </p>
<p><em>Excel</em> has a more complex and convenient system for processing events; it is possible to attach a macro to most <em>Excel</em> objects to allow event processing on that object. This information is accessible only at the macro level and is saved with the document.</p>
<p>The name of the event-processing macro is a property of many <em>Excel</em> objects, and macros can read and write to it. This table describes some properties and methods related to event processing:</p>
<table class="table table-striped" border="0">
<tbody>
<tr>
<td><strong>Property/method</strong></td>
<td><strong>Applies to</strong></td>
<td><strong>Event description</strong></td>
</tr>
<tr>
<td>OnAction</td>
<td>most visible objects</td>
<td>object is clicked</td>
</tr>
<tr>
<td>OnKey</td>
<td>Application</td>
<td>particular key/key combination pressed</td>
</tr>
<tr>
<td>OnTime</td>
<td>Application</td>
<td>specified future time</td>
</tr>
<tr>
<td>OnData</td>
<td>Application, Worksheet</td>
<td>DDE- or OLE-linked data arrives in Excel</td>
</tr>
<tr>
<td>OnDoubleClick</td>
<td>most visible objects</td>
<td>object double-clicked</td>
</tr>
<tr>
<td>OnSheetActivate</td>
<td>Application, Workbook, Worksheet...</td>
<td>object activates</td>
</tr>
<tr>
<td>OnSheetDeactivate</td>
<td><span>Application, </span><span>Workbook, Worksheet...</span></td>
<td>object deactivates</td>
</tr>
</tbody>
</table>
<p>Undocumented Documents: Going Inside...</p>
<p>Both applications save their documents in the OLE2 (Object Linking and Embedding) file format, a complex file system with directories and files (streams) which will not be described here. <em>Word</em> templates (remember, only a template can contain macros) are held in the OLE stream named 'WordDocument' within the file.</p>
<p>This stream contains all the information placed in the template by editing – including text, macros, toolbars, menus and styles. A pointer to the template area is stored at offset 118h from the beginning of the stream (not the beginning of the file!). </p>
<p>The template area consists of multiple variable-length records, each of which begin with signature bytes. A<br />signature of 01h means that this record is a macro table. The macro table is further subdivided into records, each of which contains the offset of the macro from the beginning of the OLE stream.</p>
<p>If the OLE2 file contains an Excel file, things are more complicated: the OLE2 directory VBA_PROJECT contains<br />all streams related to macros in an Excel document. It consists of one stream named ‘dir’ and at least one macro sheet stream.</p>
<p>The 'dir' stream contains references to object libraries, and objects called the 'small macro sheet table', the 'macro sheet table' and the 'global name table'. The 'macro sheet table' describes all the macro sheets: each record in this table contains the name of the OLE2 stream containing the macro sheet, and an offset to its name in the global name table.</p>
<p>The 'global name table' is a set of variable-size (10 or 12 bytes long) records. Each record describes one name which is used somewhere in the macros within the document, and each contains a pointer into an array of strings. Every name used in any macro is described somewhere in this name table.</p>
<p>Each macro sheet has a corresponding macro stream. The structure of this stream is:</p>
<pre>header<br />static area<br />macro area<br />      line descriptor table<br />      macro body</pre>
<p>The 'static area' consists of variable-size records. Each record can describe a declared variable, constant, function or procedure. References to the static area used in some statements (for example, Dim and Sub). The 'line descriptor table' contains each line of source code (with the line indent) and the offset to the compiled code for that line in the macro body, and a flag marking it as executable.</p>
<h2><a class="chapter" name="h2-code-representation"></a>Code Representation</h2>
<p><em>WordBasic</em> uses a simple coding scheme to convert the macro source code into byte code by tokenizing. The usual form of a <em>WordBasic</em> token is a one-byte prefix code, which is followed by a variable amount of data relating to that prefix code.</p>
<p>The prefix represents Basic keywords such as 'If' or 'While', in addition to language constructs such as user-defined names, labels, internal function calls, and statements. Below is a list of some of these special prefixes: </p>
<table class="table table-striped" border="0">
<tbody>
<tr>
<td><strong>Prefix</strong></td>
<td><strong>Optional data</strong></td>
<td><strong>Description</strong></td>
</tr>
<tr>
<td>0x51</td>
<td>none</td>
<td>space</td>
</tr>
<tr>
<td>0x52</td>
<td>none</td>
<td>tab</td>
</tr>
<tr>
<td>0x64</td>
<td>none</td>
<td>new line</td>
</tr>
<tr>
<td>0x65</td>
<td>string</td>
<td>alphanumeric label</td>
</tr>
<tr>
<td>0x66</td>
<td>word</td>
<td>integer label</td>
</tr>
<tr>
<td>0x67</td>
<td>word</td>
<td>internal function name</td>
</tr>
<tr>
<td>0x68</td>
<td>8 bytes</td>
<td>double integer constant</td>
</tr>
<tr>
<td>0x69</td>
<td>string</td>
<td>name</td>
</tr>
<tr>
<td>0x6A</td>
<td>string</td>
<td>string constant</td>
</tr>
<tr>
<td>0x6B</td>
<td>string</td>
<td>comment (with ')</td>
</tr>
<tr>
<td>0x6C</td>
<td>word</td>
<td>integer constant</td>
</tr>
<tr>
<td>0x6E</td>
<td>byte</td>
<td>several spaces</td>
</tr>
<tr>
<td>0x6F</td>
<td>byte</td>
<td>several tabs</td>
</tr>
<tr>
<td>0x70</td>
<td>string</td>
<td>comment (with REM)</td>
</tr>
<tr>
<td>0x73</td>
<td>word</td>
<td>named argument of statement</td>
</tr>
</tbody>
</table>
<p><em>Excel VisualBasic</em> uses partially compiled code, which is intended for direct execution on a stack machine, in the same manner as Forth. This method is faster on execution, but significantly slower on editing, than the method <em>WordBasic</em> uses. <em>Excel </em>compiles the macro code line-by-line while the macro is edited. Each line of source code is compiled into a set of micro commands for execution by the stack machine.</p>
<p>Each micro command consists of a two-byte command identifier followed by optional data aligned on a two-byte boundary. To illustrate this, the diagram at right reproduces the decompilation process of one line of <em>VisualBasic for Applications</em> (<em>VBA</em>) code.</p>
<p>Each micro command controls both the token representation and the stack machine. The stack machine<br />is controlled through two pseudo-commands:</p>
<ul>
<li><span style="line-height: 1.42857;">push – put decoded token onto stack</span></li>
<li><span style="line-height: 1.42857;">pop – get token from stack</span></li>
</ul>
<p>Careful analysis obtains a strange result – the micro command 'pop' does not only get tokens from the <em>top</em> of<br />stack! I have no words for the language creators...</p>
<p>Not all names in a macro are contained in the global name table. Micro commands can include Basic keywords and some internal Basic functions such as Format or Error.</p>
<pre>- opcode 'push integer'<br />0001 - constant value<br />Stack: 1<br />00000040: 00A3 0002 == push 2<br />         00A3 - opcode 'push integer'<br />         0002 - constant value<br />Stack: 2<br />          1<br />00000044: 00AD 0006 == "sheet1" push<br />         00AD - opcode 'push string'<br />         0006 - constant length<br />Stack: "sheet1"<br />          2<br />          1<br />0000004E: 00AD 0005 == "book1" push<br />         00AD - string constant<br />         0005 - constant length<br />Stack: "book1"<br />           "sheet1"<br />           2<br />           1<br />00000058: 0024 0782 0001 == Workbooks(pop arg)push<br />         0024 - name(arguments)<br />         0782 - pointer into global name table<br />         0001 - number of arguments<br />Stack: Workbooks("book1")<br />          "sheet1"<br />          2<br />          1<br />0000005E: 0025 078C 0001 == pop.Worksheets(pop arg) push<br />         0025 - pop.name(arguments)<br />         078C - offset to name in global name table<br />         0001 - number of arguments<br />Stack: Workbooks("book1").Worksheets("sheet1")<br />          2<br />          1<br />00000064: 0025 0798 0002 = pop.Cells(pop 2 args) push<br />         0025 - pop.name(arguments)<br />         0798 - offset to name in global name table<br />         0002 - arguments count<br />Stack: Workbooks("book1").Worksheets("sheet1").Cells(1, 2)<br />0000006A: 0020 05A4 == push n<br />         0020 - name<br />         05A4 - pointer into global name table<br />Stack: n<br />          Workbooks("book1").Worksheets("sheet1").Cells(1, 2)<br />0000006E: 000B == pop + pop push<br />         000B - pop plus pop<br />Stack: Workbooks("book1").Worksheets("sheet1").Cells(1, 2) + n<br />00000070: 0027 0194 == a = pop<br />         0027 - name = stack; end decode<br />         0194 - pointer into global name table<br />Stack: none<br /><br />Result: a = Workbooks("book1").Worksheets("sheet1").Cells(1, 2) + n</pre>
<h2><a class="chapter" name="h2-whats-next"></a>What's Next?</h2>
<p>In version 5.0, <em>Excel</em> acquired <em>VisualBasic</em>, as well as the <em>Excel 4.0</em> macroing language. Both types of macro sheets are supported in <em>Excel 5.0</em> and later. <em>WordBasic</em> was changed in <em>Word 6</em>, and macros from previous versions must be converted (automatically or manually) before use.</p>
<p>These modifications did not affect the two products equally. <em>Excel</em> has a more convenient, professional and powerful language, the next version of which (<em>VBA5</em>) will be the standard application language in <em>Office 97</em>. An analysis of <em>PowerPoint</em> data files showed the presence of <em>VisualBasic </em>macros in those files.</p>
<p>Unfortunately, <em>Excel</em> and <em>Word</em> are not the only applications which make it possible to create macro viruses. <em>AmiPro</em> also has macros, and one virus has been written for that system [Green_Stripe; see <a href="/uploads/pdf/magazine/1996/199603.pdf" target="_blank"><em>VB</em>, March 1996, p.11</a>]; however, <em>AmiPro</em> documents are not widely exchanged.</p>
<p>Do other systems exist that will allow the easy creation and subsequent widespread replication of yet more brand new viruses and virus types?</p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/1996/199611-feature-AndrewKrukov.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Throwback Thursday: 'In the Beginning was the Word...'&url=https://www.virusbulletin.com/virusbulletin/2016/03/throwback-thursday-beginning-was-word"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2016/03/throwback-thursday-beginning-was-word'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2016/03/throwback-thursday-beginning-was-word&title=Throwback Thursday: 'In the Beginning was the Word...'"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2016/03/throwback-thursday-beginning-was-word&t=Throwback Thursday: 'In the Beginning was the Word...'"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2016/03/throwback-thursday-beginning-was-word"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>