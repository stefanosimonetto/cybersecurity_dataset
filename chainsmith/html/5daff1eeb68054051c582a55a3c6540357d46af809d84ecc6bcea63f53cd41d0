<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Fans like Pro, too</title>
<meta name="description" content="All kinds of amazing things can be done in JavaScript, especially when the size is constrained. However, when you take size-optimization techniques, combine them with structure and variable-name obfuscations and cram in every malicious action that comes to mind, then you end up with something that looks like JS/Proslikefan. Peter Ferrie has the details." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1839;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201309-Proslikefan"></a>Fans like Pro, too</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2013-09-02</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="surname">Peter Ferrie</span></h3><span class="orgname">Microsoft</span>, <span class="orgdiv">USA</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>All kinds of amazing things can be done in JavaScript, especially when the size is constrained. However, when you take size-optimization techniques, combine them with structure and variable-name obfuscations and cram in every malicious action that comes to mind, then you end up with something that looks like JS/Proslikefan. Peter Ferrie has the details.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2013 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2948" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2948" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id4645632"></a></span></dt><dt><span class="sect1"><a href="#id3907565">WMF-WTF?-GQ</a></span></dt><dt><span class="sect1"><a href="#id3885848">Window of opportunity</a></span></dt><dt><span class="sect1"><a href="#id2447461">RDA, script style</a></span></dt><dt><span class="sect1"><a href="#id2375384">Anti-VBM</a></span></dt><dt><span class="sect1"><a href="#id3524023">Feeling insecure</a></span></dt><dt><span class="sect1"><a href="#id3635130">Hot prospects</a></span></dt><dt><span class="sect1"><a href="#id4680259">Start me up</a></span></dt><dt><span class="sect1"><a href="#id3206414">Lock, stock, barrel</a></span></dt><dt><span class="sect1"><a href="#id4690241">GetSystemInfo()</a></span></dt><dt><span class="sect1"><a href="#id3291938">Command and conquer</a></span></dt><dt><span class="sect1"><a href="#id4551950">Autorun.Infect</a></span></dt><dt><span class="sect1"><a href="#id3219790">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4645632"></a></h2></div></div></div><p>There are all kinds of amazing things that can be done in JavaScript, especially when the size is constrained, such as playing the 1KB game &lsquo;Mine[love]craft&rsquo;. However, when you take the size-optimization techniques from there, combine them with structure and variable-name obfuscations, cram in every malicious action that comes to mind and, of course, have no limit on the file size, then you can end up with something that looks like JS/Proslikefan.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3907565"></a>WMF-WTF?-GQ</h2></div></div></div><p>The virus begins as a wall of text, using no unnecessary whitespace (so the entire script is a single line of nearly 46KB characters in length). It uses random-looking variable names that are all eight characters long (or seven characters, for particular objects) and which differ only in the fifth and sixth characters (or just the fifth character for the seven character version), making it difficult to tell them apart. As a result, we end up with lines like &lsquo;wmfyefgq+wmfywgq[90]+wmfyipgq+wmfygpgq(wmfyrsgq(wmfyoegq,wmfybjgq))+wmfykigq&rsquo; (quick, how many unique variables are there?). </p><p>The virus uses other size optimizations, such as &lsquo;!0&rsquo; to replace &lsquo;true&rsquo; and &lsquo;!1&rsquo; to replace &lsquo;false&rsquo;, exponent form instead of large numbers (e.g. 36e5 instead of 3600000 to represent one hour), and avoids semicolons as much as possible by using commas instead. The use of commas even extends to the return statement, where the virus places multiple assignment lines prior to the actual return value. One thing to note, though, is that every line has a purpose. There are no garbage instructions in the code at all. The obfuscation is strictly to make the reading difficult, rather than to mislead the reader. </p><p>The code begins like this: </p><pre class="programlisting">(function(wmfyddgq,wmfynygq){wmfyqqgq=&rdquo;&rdquo;,...})(function(){return window},function(wmfyivgq){...}),function(wmfydvgq,...){wmfyilgq=...}
(...,function(wmfygzgq){...},...);</pre><p>This can be &lsquo;simplified&rsquo; to </p><pre class="programlisting">(function(){})(),function(){}();</pre><p>The line declares two anonymous functions, and invokes first the left one and then the right one. The first function is declared as accepting two parameters, which are defined during the invocation. The parameters are both anonymous functions, too. The first parameter function returns the name of an object (&lsquo;window&rsquo;). The second parameter function accepts one string parameter and splits the string into an array of its individual characters (not shown).</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3885848"></a>Window of opportunity</h2></div></div></div><p>The virus executes the first parameter function, and attempts to access the &lsquo;window&rsquo; object. The access is performed inside a protected block so that the virus can intercept any error that occurs. The virus is expecting an error to occur (because the object does not exist), and will not proceed correctly if the error does not occur. Thus, the virus cannot run from a web page. This might also serve as an anti emulation trick in some environments. </p><p>If an error occurs, the virus uses the second parameter function to split a long string into its individual characters. The virus iterates through the characters in the resulting string, assigning one character to each of 12 variables until the entire string is decoded. Instead of using an &lsquo;if(condition)&lt;body&gt;&rsquo;, the virus uses a feature of JavaScript that is relatively little known, but which is used very heavily in the js1kb demo world, where a Boolean evaluation that returns false will short-circuit the rest of the line in the case of an &lsquo;and&rsquo; combination, and the true case will do the same for the &lsquo;or&rsquo; combination. So, for example, instead of the following (which will perform the addition and assignment only if the length of wmfypxgq is not equal to eight): </p><pre class="programlisting">if(wmfypxgq.length!=8)
  wmfypxgq+=wmfydagq,
  wmfydagq=wmfykngq()
</pre><p>the virus uses this:</p><pre class="programlisting">wmfypxgq.length!=8&amp;&amp;(wmfypxgq+=wmfydagq,wmfydagq=wmfykngq())</pre><p>JavaScript will evaluate the left half (&lsquo;wmfypxgq.length!=8&rsquo;) and while the condition is met (that is, while the length is not equal to eight), it will execute the code in the right half (append the current character and fetch the next one). It should also be noted that the use of the comma allows the virus to omit the braces that would normally surround a multi-line body. This use of commas appears fairly consistently throughout the virus code. The use of the conditional shortcut, on the other hand, is highly erratic. This might suggest that multiple authors were involved, or perhaps just one author displaying different stages of development of the code. </p><p>The decoded strings are &lsquo;toString&rsquo;, &lsquo;charAt&rsquo;, &lsquo;charCodeAt&rsquo;, &lsquo;sort&rsquo;, a fake decryption key for the second text (see below), &lsquo;constructor&rsquo;, a base64-encoded encrypted string, &lsquo;fromCharCode&rsquo;, a base64 dictionary, a real decryption key, &lsquo;apply&rsquo; and &lsquo;random&rsquo;. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2447461"></a>RDA, script style</h2></div></div></div><p>After decoding the strings, the virus invokes the second of the anonymous functions in the array (the one that begins &lsquo;function(wmfydvgq,...&rsquo;). This function generates up to 1,221 unique base-20 values to use as part of a decryption key for the decoded base64 strings. Each unsuccessful value is placed in an array so that it will not be used again. In the event that the key is not recovered after 1,221 attempts, the virus exits silently. </p><p>After each attempt at decrypting the text, the virus tries to run the resulting code. Instead of using the &lsquo;eval&rsquo; function, or just declaring the code as a function and running it, the virus uses the &lsquo;array.sort.constructor&rsquo; trick. This trick is derived from a way of obtaining a function reference by using only the alphabetic characters that can be generated using the minimum number of symbols (see the description of JJEncode [<span class="citation"><a href="#citation.1">1</a></span>] for the details). It has no special use in this context, since the virus has access to all possible characters. It is included simply to obfuscate the code further. </p><p>If the text has been decrypted correctly, the virus attempts to access the &lsquo;document&rsquo; object. The access is performed inside a protected block, so that the virus can intercept any error that occurs. Once again, the virus is expecting an error to occur (because the object does not exist), and will not proceed correctly if that does not happen. This might also serve as an anti-emulation trick in some environments. </p><p>If an error occurs, the virus attempts to access the &lsquo;WScript&rsquo; object. This access is also performed inside a protected block, so that the virus can intercept any error that occurs. However, in this case, the virus is not expecting an error to occur, and will not proceed correctly if one does. Specifically, if an error occurs, the virus fails to assign the real decryption key for the second text. </p><p>If the second text is decrypted correctly, the result is a block of code that is packed by Dean Edwards&rsquo; JavaScript packer. This packer has remained enormously popular since its release in 2005, the 2007 release in particular &ndash; despite being outperformed by later packers such as JSCrush. </p><p>In any case, after unpacking and &lsquo;beautifying&rsquo;, we are left with a script of over 1,650 lines of dense code. There are no comments or blank lines. The code is a collection of 68 anonymous functions, some of which accept yet more anonymous functions as parameters, and some of which are not even used, such as the function to extract data from cookie files. There is no reason for such a large number of functions, other than to make the analysis more difficult. </p><p>The virus uses RC4 to decrypt an enormous array of strings, many of which are small enough to have been used as constants within the virus body, but again, they serve to make the analysis more difficult. The virus then attempts to instantiate several objects: &lsquo;WScript.Shell&rsquo;, &lsquo;ADODB.Stream&rsquo;, &lsquo;Scripting.FileSystemObject&rsquo;, &lsquo;shell.application&rsquo; and &lsquo;MSXML2.ServerXMLHTTP.6.0&rsquo;, and exits if any of them cannot be loaded. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2375384"></a>Anti-VBM</h2></div></div></div><p>The virus constructs nine arrays containing different groups of strings:</p><div class="itemizedlist"><ul type="disc"><li><p>One contains process names that the virus will attempt to terminate. </p></li><li><p>One contains a word list that could be used as a dictionary attack, but which is not used by the virus. </p></li><li><p>One contains a set of host names that the virus contacts in order to send and receive information. </p></li><li><p>One contains a list of registry values relating to security policies. </p></li><li><p>One contains a list of registry values relating to the <span class="emphasis"><em>Windows</em></span> Security Center. </p></li><li><p>One contains a list of domain suffixes which are used during URL generation. </p></li><li><p>One contains a list of registry values relating to the <span class="emphasis"><em>Windows Firewall</em></span> and the use of proxy servers. </p></li><li><p>One contains a list of registry values relating to SafeBoot.</p></li><li><p>One contains a list of registry values relating to the display of hidden files.</p></li></ul></div><p>The virus uses the <span class="emphasis"><em>Windows</em></span> Management Instrumentation interface to query the system configuration, as a virtual machine detection technique. The virus looks for a SCSI controller whose manufacturer name contains either &lsquo;Xen&rsquo; (which appears twice in the list, perhaps in a copy-and-paste error, which suggests that the intended target is missing), &lsquo;Citrix&rsquo;, or &lsquo;Red Hat&rsquo;; a BIOS whose manufacturer name contains &lsquo;innotek&rsquo;, &lsquo;Bochs&rsquo;, &lsquo;Xen&rsquo;, or &lsquo;QEMU&rsquo;; a disk drive whose model name contains &lsquo;Bochs&rsquo;, &lsquo;VBOX&rsquo;, &lsquo;QEMU&rsquo;, &lsquo;Red Hat&rsquo;, &lsquo;VMware&rsquo;, &lsquo;Virtual HDD&rsquo; (this is a typographical error &ndash; <span class="emphasis"><em>VirtualPC</em></span>&rsquo;s hard disk is named &lsquo;Virtual HD&rsquo;, and so the virus runs freely in <span class="emphasis"><em>VirtualPC</em></span>), or &lsquo;Xen&rsquo;; a process named &lsquo;CaptureClient.exe&rsquo; (part of the <span class="emphasis"><em>Capture</em></span> honeypot project); a computer system whose manufacturer name contains &lsquo;Parallels&rsquo;; a processor whose manufacturer name contains &lsquo;Bochs&rsquo; or &lsquo;QEMU&rsquo;; or a computer name that contains either &lsquo;mcafee&rsquo; or &lsquo;cnc-lab&rsquo;. The matching of the computer name is case-insensitive. The virus exits if any of these is found.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3524023"></a>Feeling insecure</h2></div></div></div><p>The virus alters the registry to enable the hiding of files that have the hidden or system file attribute set. This is achieved by setting the &lsquo;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced\Hidden&rsquo; registry value to the number 2. The virus constructs a registry value and data for writing. The registry value begins with &lsquo;lm&rsquo;, followed by two to five hexadecimal digits which are constructed in a convoluted fashion. The virus applies RC4 to the computer name and the &lsquo;lm&rsquo; string, converts the result to a string of hexadecimal digits, and extracts some of the digits from the result. Thus, the value looks random but is actually constant on the given machine. An example of the registry data format is: &lsquo;C:\Program Files\[2&ndash;5 hex digits, but using &lsquo;ml&rsquo; instead of &lsquo;lm&rsquo; as the RC4 parameter]\[2&ndash;5 hex digits, using &lsquo;lm&rsquo; as the RC4 parameter].js&rsquo;. The virus attempts to write to the registry, but fails to specify a root, so the value is not created. This is a bug in the virus code. </p><p>The virus creates the registry value &lsquo;HKCU\Software\Microsoft\Windows\CurrentVersion\Run\[2&ndash;5hex digits, using &lsquo;cu&rsquo; as the RC4 parameter]&rsquo;. The data is set to the Application Data directory, for example, &lsquo;C:\Documents and Settings\me\Application Data\[2&ndash;5 hex digits, using &lsquo;uc&rsquo; as the RC4 parameter]\[2&ndash;5 hex digits, using &lsquo;cu&rsquo; as the RC4 parameter].js&rsquo;. </p><p>The virus attempts to make many other changes to the registry &ndash; some of which are successful and some of which fail. It disables the <span class="emphasis"><em>Windows</em></span> Security Center notifications by deleting the WSC registry value. It attempts to disable SafeBoot by deleting the registry key, but there is a bug in this code, and the attempt fails. It attempts to delete the SafeBoot registry key from HKCU, even though there is no &lsquo;System&rsquo; hive in that location. It does, however, disable the <span class="emphasis"><em>Windows Firewall </em></span>and the use of proxy servers, by changing their options in the registry. This is achieved by setting the &lsquo;HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\StandardProfile\EnableFirewall&rsquo; registry value, the &lsquo;ProxyEnable&rsquo; and &lsquo;MigrateProxy&rsquo; registry values under the &lsquo;HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings&rsquo; registry key, and the &lsquo;HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\ParseAutoexec&rsquo; registry value to zero.</p><p>The virus disables the <span class="emphasis"><em>Windows</em></span> Security Center service by changing its start option in the registry. This is achieved by setting the &lsquo;HKLM\SYSTEM\CurrentControlSet\Services\wscsvc\Start&rsquo; registry value to the number 4. The virus disables notifications in the <span class="emphasis"><em>Windows</em></span> Security Center from the anti-virus and firewall services, and enables overrides for them. The virus is aware of the changes in registry layout between <span class="emphasis"><em>Windows XP</em></span>, <span class="emphasis"><em>Windows Vista </em></span>and later. For <span class="emphasis"><em>Windows XP </em></span>compatibility, the virus achieves the effect by setting the &lsquo;UpdatesDisableNotify&rsquo;, &lsquo;FirewallDisableNotify&rsquo;, &lsquo;AntiVirusOverride&rsquo;, &lsquo;FirewallOverride&rsquo; and &lsquo;AntiVirusDisableNotify&rsquo; registry values under the &lsquo;HKLM\SOFTWARE\Microsoft\Security Center&rsquo; registry key to the number 1. For W<span class="emphasis"><em>indows Vista </em></span>and later compatibility, the virus achieves the same effect by setting the &lsquo;AntiVirusDisableNotify&rsquo;, &lsquo;FirewallDisableNotify&rsquo; and &lsquo;FirewallOverride&rsquo; registry values under the &lsquo;Security Center\Svc&rsquo; registry key to the number 1.</p><p>The virus disables access to the command-interpreter, registry tools such as regedit, Task Manager, and the &lsquo;Display&rsquo; option in the <span class="emphasis"><em>Windows</em></span> Control Panel. This last one seems curious until you see that its name is &lsquo;NoDispCPL&rsquo;. It seems likely that the virus writer thought that it meant &lsquo;No Display Control PaneL&rsquo;. The effect of all of these is achieved by setting the &lsquo;DisableCMD&rsquo;, &lsquo;NoDispCPL&rsquo;, &lsquo;DisableRegistryTools&rsquo;, and &lsquo;DisableTaskMgr&rsquo; registry values under the &lsquo;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies&rsquo; registry key to the number 1.</p><p>The virus disables access to the &lsquo;HomePage&rsquo; setting in the <span class="emphasis"><em>Internet Explorer </em></span>control panel. This is achieved by setting the &lsquo;SOFTWARE\Policies\Microsoft\Internet Explorer\Control Panel\HomePage&rsquo; registry value under both the &lsquo;HKCU&rsquo; and the &lsquo;HKLM&rsquo; registry hives to the number 1. The virus disables infection reporting from <span class="emphasis"><em>MSRT</em></span>. This is achieved by setting the &lsquo;HKLM\SOFTWARE\Policies\Microsoft\MRT\DontReportInfectionInformation&rsquo; registry value to the number 1. The virus disables the System Restore configuration. This is achieved by setting the &lsquo;HKLM\SOFTWARE\Policies\Microsoft\Windows NT\SystemRestore\DisableConfig&rsquo; registry value to the number 1.</p><p>The virus disables the <span class="emphasis"><em>Windows</em></span> Control Panel, the &lsquo;Windows Update&rsquo; option, and the &lsquo;Folder&rsquo; option from within <span class="emphasis"><em>Windows Explorer</em></span>. This is achieved by setting the &lsquo;NoControlPanel&rsquo;, &lsquo;NoWindowsUpdate&rsquo; and &lsquo;NoFolderOptions&rsquo; registry values under the &lsquo;HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer&rsquo; registry key to the number 1.</p><p>The virus enables the hiding of known file extensions in <span class="emphasis"><em>Windows Explorer</em></span>. This is achieved by setting the &lsquo;HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced\HideFileExt&rsquo; registry value to the number 1. The virus disables System Restore. This is achieved by setting the &lsquo;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestoreDisableSR&rsquo; registry value to the number 1.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3635130"></a>Hot prospects</h2></div></div></div><p>The virus checks whether the directory &lsquo;C:\[2&ndash;5 hex digits, using &lsquo;prospect&rsquo; as the RC4 parameter]&rsquo; exists, and creates it if it does not. The virus sets the hidden and system file attributes on the directory in any case, and remembers if the directory was newly created. This state is checked later, and is used to decide whether the visible payload will execute. The virus attempts to open a file in that directory, whose name is &lsquo;[2&ndash;5 hex digits, using &lsquo;it&rsquo; as the RC4 parameter]&rsquo;. If the file can be opened, then the virus reads it entirely. Otherwise, the virus creates the file, and writes to it the number of seconds since midnight on 1 January 1970. This could be considered the &lsquo;install time&rsquo;. </p><p>The virus attempts to open a file whose name is &lsquo;[2&ndash;5 hex digits, using &lsquo;r&rsquo; as the RC4 parameter]&rsquo;. If the file can be opened, then the virus reads it entirely. Otherwise, the virus opens its own file, reads it entirely, and then searches for what happens to be the last line in the virus code. This line is a long sequence of hexadecimal digits. The virus extracts 24 characters from the middle of the line, and uses it as a key to decrypt another string. The virus creates the originally requested file, and then writes the decrypted string to it. This might be a &lsquo;revision&rsquo; number. </p><p>The virus attempts to open a file whose name is &lsquo;[2&ndash;5 hex digits, using &lsquo;id&rsquo; as the RC4 parameter]&rsquo;. If the file can be opened, then the virus reads it entirely. Otherwise, the virus creates the file, and then writes a string of 12 random hexadecimal digits to it, converting to upper case if necessary. This is a machine-specific &lsquo;ID&rsquo; that is used to communicate with the command-and-control server. </p><p>The virus attempts to open a file whose name is &lsquo;[2&ndash;5 hex digits, using &lsquo;v&rsquo; as the RC4 parameter]&rsquo;. If the file can be opened, then the virus reads it entirely. Otherwise, the virus creates the file, and writes the virus filename to it. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4680259"></a>Start me up</h2></div></div></div><p>The virus enumerates files in the &lsquo;startup&rsquo; directory for all users. The virus is aware of the different locations of that directory between the different versions of <span class="emphasis"><em>Windows</em></span>. On <span class="emphasis"><em>Windows XP</em></span> and earlier, it is &lsquo;%userprofile%\Start Menu\Programs\Startup\&rsquo;. On <span class="emphasis"><em>Windows Vista</em></span> and later, it is &lsquo;%userprofile%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\&rsquo;. The virus deletes any &lsquo;.js&rsquo; files that exist in the directory, apart from any file whose name matches &lsquo;[2&ndash;5 hex digits, using the current hour of the day as the RC4 parameter].js&rsquo;. The virus opens its own file and reads up to the last line, calculates the new key to place in the last line, and then writes the combination to the &lsquo;startup&rsquo; directory.</p><p>As a side note, the path of the startup directory is constant, no matter which locale is active, despite appearances to the contrary. Specifically, when viewing the directory in <span class="emphasis"><em>Windows Explorer</em></span>, the name is localized so that, for example, the French version of <span class="emphasis"><em>Windows</em></span> will show &lsquo;Menu D&eacute;marrer&rsquo;. This should be obvious to a programmer, given that there is no API to retrieve the path to the startup directory.</p><p>The virus creates the &lsquo;%appdata%\[2&ndash;5 hex digits, using &lsquo;uc&rsquo; as the RC4 parameter]&rsquo; and &lsquo;%programfiles%\[2&ndash;5 hex digits, using &lsquo;ml&rsquo; as the RC4 parameter]&rsquo; directories, as referenced above, and then hides them. It creates the &lsquo;[2&ndash;5 hex digits, using &lsquo;lm&rsquo; as the RC4 parameter].js&rsquo; file in the Program Files hidden subdirectory, and the &lsquo;[2&ndash;5 hex digits, using &lsquo;cu&rsquo; as the RC4 parameter].js&rsquo; file in the Application Data hidden subdirectory. </p><p>If the &lsquo;C:\[2&ndash;5 hex digits, using &lsquo;prospect&rsquo; as the RC4 parameter]&rsquo; directory was newly created, then the virus copies itself to &lsquo;%temp%\[12 random hexadecimal digits].js&rsquo;, runs that copy, and then displays the following message: </p><div class="mediaobject"><img src="/uploads/images/figures/2013/09/Pro-1.jpg" /></div><p>The message will remain on the screen for 30 seconds, and then the original copy of the virus will exit, leaving the one in the temporary directory still running. Otherwise, the virus waits for a random amount of time, from slightly less than one second up to almost ten seconds, before continuing with the execution. </p><p>If the &lsquo;C:\[2&ndash;5 hex digits, using &lsquo;prospect&rsquo; as the RC4 parameter]\[2&ndash;5 hex digits, using &lsquo;lock&rsquo; as the RC4 parameter]&rsquo; file exists, then the virus opens the file, reads it entirely, and checks that it contains only numbers. This file contains the date and time of the most recent execution of the code. The virus exits if the last execution was less than 15 seconds ago, since this is an indication that another copy is actively running. If the file does not exist, then the virus creates the file and writes the current time to it. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3206414"></a>Lock, stock, barrel</h2></div></div></div><p>The virus enumerates the CPUs and creates an array of the CPU names and number of cores. It also enumerates the video cards and creates an array of the video card descriptions. </p><p>The virus randomly reorders its list of hostnames, and then begins to enumerate the entries in the list. For each of the hostnames (currently: &lsquo;copertps.com&rsquo;, &lsquo;specrtop.org&rsquo; and &lsquo;etpsoprc.ru&rsquo;), the virus attempts to contact the host, send it a specific base64-encoded RC4-encrypted string, and receive another string in return. If a string is returned, the virus decodes and then decrypts it. If the resulting string contains the word &lsquo;prospect&rsquo;, then the host is accepted and will be used for any further requests for the next hour. If no string is returned or it does not decode correctly, then the virus continues the enumeration. If no acceptable host is found, then the virus generates a collection of URLs algorithmically, orders them randomly, and then attempts to contact each of the first ten in turn. For each of the algorithmic hostnames, the virus attempts to contact it and send it the specific string, as described above. If the proper string is returned, then that host will be used for the next hour. </p><p>The algorithm for URL generation is as follows: for each of the domain suffixes (&lsquo;ru&rsquo;, &lsquo;net&rsquo;, &lsquo;info&rsquo;, &lsquo;in&rsquo;, &lsquo;eu&rsquo;, &lsquo;org&rsquo;, &lsquo;com&rsquo;, &lsquo;se&rsquo;, &lsquo;biz&rsquo; and &lsquo;name&rsquo;), the virus constructs a string in the format: &lsquo;prospect&rsquo;.&lt;month&gt;.&lt;date&gt;.&lt;four-digit year&gt;.&lt;domain suffix&gt;. The virus hashes this string using a simple home-made algorithm, and then creates a new string of six to 12 lower-case letters, followed by the domain suffix. The virus constructs up to 10 unique URLs per domain, resulting in an array of potentially 100 entries (the count will be fewer if the hashes of any two of the URLs are identical). </p><p>If the host has a directory named &lsquo;u&rsquo;, then the virus fetches an update to its code from that location, and replaces the file containing the running script. However, the virus does not run this new file, so the update is not applied until later. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4690241"></a>GetSystemInfo()</h2></div></div></div><p>Once per hour, the virus looks in the &lsquo;Application Data&rsquo; and &lsquo;Appdata\Roaming&rsquo; directories for each user, for the files named &lsquo;sitemanager.xml&rsquo; and &lsquo;recentservers.xml&rsquo; in a directory named &lsquo;FileZilla&rsquo;. The virus reads either (or both if present) file in its entirety, and extracts some interesting properties from the files: host name, port, communication protocol, user name, and password. This information is uploaded to the &lsquo;r&rsquo; directory on one of the hosts or generated URLs, as described above. </p><p>Once every 30 minutes, the virus calls a routine which now simply returns. However, enough of the code remains to determine that it would have uploaded files that were downloaded from a <span class="emphasis"><em>WordPress</em></span>-hosted website. It would also have uploaded audio, video, graphical, and archive format files that were requested from websites such as <span class="emphasis"><em>Pinterest</em></span>, <span class="emphasis"><em>Twitter</em></span> and <span class="emphasis"><em>Sourceforge</em></span>. </p><p>The virus will, however, upload the complete system information to the &lsquo;k&rsquo; directory on one of the hosts or generated URLs, as described above, and possibly receive a response containing commands to run. The information that is sent is: </p><div class="itemizedlist"><ul type="disc"><li><p>the uptime as measured in approximately 30-minute intervals</p></li><li><p>a magic number that might identify the exact version of the virus</p></li><li><p>the list of CPU names (see above)</p></li><li><p>the computer name</p></li><li><p>the number of CPUs</p></li><li><p>the list of video card descriptions (see above)</p></li><li><p>a value corresponding to the anti-virus software that is installed (see below)</p></li><li><p>the account name for the logged-on user</p></li><li><p>the current time zone</p></li><li><p>a copy of the virus body</p></li><li><p>a &lsquo;random&rsquo; value (system-specific, as described above)</p></li><li><p>the country code (see below)</p></li><li><p>the <span class="emphasis"><em>Windows</em></span> version</p></li><li><p>the execution state of a particular process</p></li><li><p>a virus-generated ID (see above)</p></li><li><p>the processor architecture (32-bit or 64-bit)</p></li><li><p>the language code (see below)</p></li><li><p>the local time</p></li><li><p>the special code that is appended to the virus body.</p></li></ul></div><p>The virus determines which anti-virus software is installed by checking for the existence of the following directory names in the Program Files directory, and assigns each one a unique value:</p><div class="itemizedlist"><ul type="disc"><li><p>Kaspersky Lab</p></li><li><p>Sophos</p></li><li><p>F-Secure</p></li><li><p>Spyware Doctor</p></li><li><p>Webroot</p></li><li><p>Avira</p></li><li><p>Panda Security</p></li><li><p>McAfee</p></li><li><p>ESET</p></li><li><p>Microsoft Security Essentials</p></li><li><p>Bitdefender</p></li><li><p>Sunbelt</p></li><li><p>Alwil Software</p></li><li><p>Symantec</p></li><li><p>COMODO</p></li><li><p>Microsoft Security Client</p></li><li><p>Trend Micro</p></li><li><p>AVG</p></li><li><p>AVAST Software</p></li><li><p>DrWeb</p></li><li><p>Malwarebytes&rsquo; Anti-Malware</p></li></ul></div><p>The virus uses the <span class="emphasis"><em>Google</em></span> Geolocation services to determine the country code for the host IP address. The API in question has been deprecated since 2010, but continues to be available for a limited number of requests. In the case of the virus, it needs to make only one request. </p><p>The particular process that interests the virus is an .exe file with a name which the virus generates by using the key &lsquo;btcm&rsquo;. If the process is found to be running, then the virus sets the priority to run only when the system is idle. </p><p>The language code is determined by requesting the language version of the operating system, and then looking up the corresponding entry in the RFC1766 MIME database. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3291938"></a>Command and conquer</h2></div></div></div><p>The virus can receive a list of commands to execute. The commands are very short: &lsquo;e&rsquo;, &lsquo;hp&rsquo;, &lsquo;r&rsquo;, &lsquo;d&rsquo;, &lsquo;fbc&rsquo;, &lsquo;dbs&rsquo;, &lsquo;b&rsquo;, &lsquo;u&rsquo;, &lsquo;fbl&rsquo;, &lsquo;redu&rsquo; and &lsquo;fbf&rsquo;. </p><p>The &lsquo;e&rsquo; command can be used to run arbitrary script code where the results are not checked. </p><p>The &lsquo;hp&rsquo; command is intended to be used to redirect all URL connections to the requested site. This would be achieved by placing the site name in the appropriate protocol under the &lsquo;Prefixes&rsquo;, &lsquo;DefaultPrefix&rsquo; and &lsquo;Prefixes\www&rsquo; registry keys under the &lsquo;HKLM\Software\Microsoft\Windows\CurrentVersion\URL&rsquo; registry key. However, there is a bug in this code, which means that the command does not work. </p><p>The &lsquo;hp&rsquo; command can set the Start Page in <span class="emphasis"><em>Microsoft Internet Explorer</em></span>. This is achieved by setting the &lsquo;Software\Microsoft\Internet Explorer\Main\Start Page&rsquo; registry value in both the &lsquo;HKCU&rsquo; and the &lsquo;HKLM&rsquo; hives. The command can optionally change the start page in <span class="emphasis"><em>Google Chrome</em></span>. This is achieved by changing the appropriate settings in the &lsquo;%userprofile%\Local Settings\Application Data\Google\Chrome\User Data\Default\Preferences&rsquo; file. If the <span class="emphasis"><em>Chrome</em></span> option is selected, then <span class="emphasis"><em>Mozilla</em></span> will be targeted, too. The virus searches for the &lsquo;user.js&rsquo; file in the subdirectories of the &lsquo;%appdata%\Mozilla\Firefox\Profiles&rsquo; directory. If the file is found, then the virus will change the start page in that file.</p><p>The &lsquo;r&rsquo; command can be used to run any executable files on the local system. </p><p>The &lsquo;d&rsquo; command can be used to download and run a specified file from a specified URL. The virus will contact the server and wait up to approximately seven seconds for a response. </p><p>The &lsquo;fbc&rsquo; command was probably a routine used to start a chat on <span class="emphasis"><em>Facebook</em></span>, but the code is not present in this version of the virus. </p><p>The &lsquo;dns&rsquo; command can be used to change the DNS server on the local system. This is achieved by changing the &lsquo;DhcpNameServer&rsquo; and &lsquo;NameServer&rsquo; registry values under the &lsquo;HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters&rsquo; registry key. </p><p>The &lsquo;b&rsquo; command can be used to download an .exe file whose local name the virus generates by using the key &lsquo;btcm&rsquo;. The virus will download the file only if the parameters for its execution are different from the previous execution, if any. If the download is requested, then the virus stops the existing &lsquo;btcm&rsquo; process, if it is running, and then downloads and runs the new file. The virus intends to return the state of execution of the new file, but there is a bug in this code so the execution state always appears to be a failure. </p><p>The &lsquo;u&rsquo; command can be used to update the virus code dynamically. If the virus has been updated successfully, then it clears the file that holds the last execution time, in order to allow the new code to start running without failing the &lsquo;15 seconds&rsquo; check. </p><p>The &lsquo;fbl&rsquo; command was probably a routine used to &lsquo;Like&rsquo; a page on <span class="emphasis"><em>Facebook</em></span>, but the code is not present in this version of the virus. </p><p>The &lsquo;redu&rsquo; command can be used to run arbitrary script code that accepts a single parameter, for example solving equations. The results will be uploaded to the &lsquo;reduce&rsquo; directory on one of the hosts or generated URLs, as described above. </p><p>The &lsquo;fbf&rsquo; command was probably a routine used to become a fan of a <span class="emphasis"><em>Facebook</em></span> page, or to send a &lsquo;friend&rsquo; request, but the code is not present in this version of the virus. </p><p>After all commands have been processed, and if the &lsquo;b&rsquo; command has not been received, the virus stops the &lsquo;btcm&rsquo; process, if it is running. It is unknown what this process does. </p><p>The virus periodically spends five seconds alternating between sleeping for one second and enumerating the list of running processes. The virus attempts to terminate any process whose name contains any of the following strings: </p><div class="itemizedlist"><ul type="disc"><li><p>rubotted</p></li><li><p>avg</p></li><li><p>avast</p></li><li><p>autoruns</p></li><li><p>tcpview</p></li><li><p>msconfig</p></li><li><p>hijack</p></li><li><p>otl</p></li><li><p>fs20</p></li><li><p>msss</p></li><li><p>filemon</p></li><li><p>minitool</p></li><li><p>systemlook</p></li><li><p>mrt</p></li><li><p>jrt</p></li><li><p>wireshark</p></li><li><p>unlocker</p></li><li><p>procmon</p></li><li><p>mse</p></li><li><p>sdasetup</p></li><li><p>mbam</p></li><li><p>clean</p></li><li><p>rkill</p></li><li><p>ccsetup</p></li><li><p>resmon</p></li><li><p>procexp</p></li><li><p>fss</p></li><li><p>rstrui</p></li><li><p>housecall</p></li><li><p>ptinstall</p></li><li><p>npe</p></li><li><p>wuauclt</p></li><li><p>mcshield</p></li><li><p>sdefendi</p></li><li><p>regmon</p></li><li><p>issetup</p></li><li><p>mbsa</p></li><li><p>fiddler</p></li><li><p>avenger</p></li><li><p>gmer</p></li><li><p>roguekiller</p></li><li><p>dds</p></li><li><p>emergencykit</p></li><li><p>exeradar</p></li><li><p>avenger</p></li><li><p>hitman</p></li><li><p>combofix</p></li><li><p>perfmon</p></li><li><p>reged</p></li><li><p>spybot</p></li><li><p>klwk</p></li><li><p>eset</p></li><li><p>windows-kb</p></li><li><p>hotfix</p></li><li><p>zoek</p></li></ul></div><p>In all cases except for the &lsquo;hotfix&rsquo; entry, the matching is case-insensitive. The case-sensitivity of the hotfix entry appears to be a bug in the virus code.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4551950"></a>Autorun.Infect</h2></div></div></div><p>The virus repeatedly enumerates the list of drives, waiting for a USB device to be inserted. When a USB device is found, the virus creates a directory on each of its drives, &lsquo;\[2&ndash;5 hex digits, using &lsquo;usb&rsquo; as the RC4 parameter]&rsquo;, and then hides this directory. The virus places a file inside the directory, &lsquo;\i[2&ndash;5 hex digits, using &lsquo;lnk&rsquo; as the RC4 parameter].js&rsquo;. For every other directory in the root of the drive, excluding any named &lsquo;recycled&rsquo;, the virus creates a shortcut using the name of the directory followed by &lsquo;.lnk&rsquo;. The virus then hides the original directory. The icon for the shortcut is the folder icon, but the shortcut arrow is added to the corner of it (there is a registry change that can make it go away, but the virus does not make use of it). In any case, the action of the shortcut is to run the virus script, and then open an <span class="emphasis"><em>Explorer</em></span> window showing the contents of the directory. </p><p>The virus places another file inside the hidden directory, &lsquo;\g[2&ndash;5 hex digits, using &lsquo;ar&rsquo; as the RC4 parameter].js&rsquo;, and then creates an &lsquo;autorun.inf&rsquo; in the root directory of each of the drives on the USB device. The virus writes a random number of lines (from 35 to 100) of random text. For each of those lines, there is a 20% chance that the virus creates a section with a random name. The name is a random number from five to 10 characters. Otherwise, the line is an assignment using a random number from 10 to 30 characters on each side of the equals sign. Then the virus alternates between writing five to 10 random lines and one real line. The order of the real lines (&lsquo;shell\explore\command=&rsquo;, &lsquo;shell\open\command=&rsquo;, &lsquo;open=&rsquo; and &lsquo;shellexecute=&rsquo;) is also random. After all of the real lines have been written, the virus writes another random number of lines (from 15 to 50) of random text. For each of those lines, there is a 20% chance that the virus creates a section with a random name. Otherwise the line is an assignment, as before. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3219790"></a>Conclusion</h2></div></div></div><p>One of the main problems with describing code that can update itself is that no two descriptions will be alike. The code could update itself in different ways, depending on certain circumstances &ndash; for example, different countries might be served different versions. Even requests at different times of the day might yield different results. The best that we can say is that &lsquo;this sample, with this hash value, behaves in this way&rsquo; &ndash; and that&rsquo;s not saying much. Fortunately, the different variants that we have seen have a similar overall structure, which allows us to detect them generically. That&rsquo;s all we need to say.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3810933"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Ferrie, P. $$$_+$$+$$__+_$+$$_$+$$$_+$$_$. Virus Bulletin, February 2011, p.4. <span class="bibliosource"><a href="/uploads/pdf/magazine/2011/201102.pdf" target="_blank">http://www.virusbtn.com/pdf/magazine/2011/201102.pdf</a></span>. </p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Fans like Pro, too&url=https://www.virusbulletin.com/virusbulletin/2013/09/fans-pro-too"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2013/09/fans-pro-too'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2013/09/fans-pro-too&title=Fans like Pro, too"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2013/09/fans-pro-too&t=Fans like Pro, too"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2013/09/fans-pro-too"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>