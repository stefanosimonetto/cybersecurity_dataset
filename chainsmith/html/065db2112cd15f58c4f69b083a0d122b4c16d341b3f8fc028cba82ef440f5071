<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: Duping the machine - malware strategies, post sandbox detection</title>
<meta name="description" content="In his VB2014 paper, James Wyke explores the different strategies malicious samples employ when a sandbox has been detected. He looks at examples of decoy behaviour that range from dummy files being dropped to the use of fixed path names, bogus DNS and HTTP requests, and misleading configuration files being delivered. He analyses the consequences of failing to realize we are observing bogus behaviour from a sample, and explores ways in which we might prevent ourselves from falling victim to the same techniques again." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1569;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201501-duping"></a>VB2014 paper: Duping the machine - malware strategies, post sandbox detection</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2015-01-13</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">James</span> <span class="surname">Wyke</span></h3><span class="orgname">Sophos</span>, <span class="orgdiv">UK</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>In his VB2014 paper, James Wyke explores the different strategies malicious samples employ when a sandbox has been detected. He looks at examples of decoy behaviour that range from dummy files being dropped to the use of fixed path names, bogus DNS and HTTP requests, and misleading configuration files being delivered. He analyses the consequences of failing to realize we are observing bogus behaviour from a sample, and explores ways in which we might prevent ourselves from falling victim to the same techniques again.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2015 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2135" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2135" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id2782416">Abstract</a></span></dt><dt><span class="sect1"><a href="#id3885847">Background</a></span></dt><dt><span class="sect1"><a href="#id4890940">Different strategies</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3894692">Andromeda</a></span></dt><dt><span class="sect2"><a href="#id3903459">Simda</a></span></dt><dt><span class="sect2"><a href="#id4203423">Vundo</a></span></dt><dt><span class="sect2"><a href="#id4313392">Shylock</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3736984">Categorization of techniques and goals</a></span></dt><dt><span class="sect1"><a href="#id2715298">Consequences</a></span></dt><dt><span class="sect1"><a href="#id4182009">Protection</a></span></dt><dt><span class="sect1"><a href="#id2615638">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2782416"></a>Abstract</h2></div></div></div><p>Sandboxes and automated analysis environments are key tools for combating the exponential growth of malware. There are a huge range of different solutions available, and they are used in a wide variety of situations throughout security companies and large IT departments across the globe. In many cases, sandboxes are used as part of an automated system where data is extracted, fed into other systems, and decisions are made on the nature of the sample under examination. Inevitably, sandboxes can be detected, and malware that does so is left with a choice. The majority of malicious samples that detect that they are executing in an artificial environment will exit immediately, but there is a growing subset of malware families that choose to do something more cunning.</p><p>In this paper, we explore the different strategies malicious samples employ once a sandbox has been detected. We present examples of decoy behaviour that ranges from dummy files being dropped to the use of fixed path names, bogus DNS and HTTP requests, and misleading configuration files being delivered. We examine samples of malware families including Andromeda, Shylock, Simda and Vundo.</p><p>We classify the techniques involved and assess the motivation for each approach by determining the benefit to the malware author in each case.</p><p>We conclude by analysing the consequences of failing to realize we are observing bogus behaviour from the sample, such as false positives, prolonging of the life span of the threat, and embarrassing publications where the authors fail to realize they are describing dummy behaviour. Finally, we explore ways in which we might prevent ourselves from falling victim to the same techniques again.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3885847"></a>Background</h2></div></div></div><p>With the number of new malware samples seen every day now exceeding 200,000 [<span class="citation"><a href="#citation.1">1</a></span>], it is impossible for any organization to process all the samples they encounter manually. This problem was recognized many years ago and led to the emergence of automated analysis systems that attempt to replicate the work of a human in a fraction of the time. A scalable solution can process many hundreds of thousands of samples each day, and can extract most if not all of the pertinent information that would otherwise take a skilled analyst many hours.</p><p>The explosion in malware volume has heightened the need for effective automated malware analysis, with many commercial, open-source and custom in-house solutions in wide use. The majority of these solutions execute the sample in a virtualized environment, as this tends to be a more flexible and scalable strategy than using physical machines, and are usually referred to as &lsquo;sandboxes&rsquo;.</p><p>However, since we are executing the sample in an artificial environment, there exists the possibility that the nature of the analysis may be detected by the sample being examined. Indeed, many malware families, and particularly malware &lsquo;cryptors&rsquo; and packers used to obfuscate <span class="emphasis"><em>Windows</em></span> PE files, include some level of virtual machine (VM) or sandbox detection.</p><p>The techniques used to detect a VM or automated analysis environment are many and varied: there are simple checks for process names used by components of the VM software, checks for registry keys and values that give away the particular VM manager, techniques such as Red Pill [<span class="citation"><a href="#citation.2">2</a></span>] that rely on side-effects of the processor virtualizing certain x86 instructions, checks for user interaction such as mouse movement [<span class="citation"><a href="#citation.3">3</a></span>], and techniques that attempt to establish whether the system &lsquo;looks real&rsquo; by checking that certain commonly installed software such as <span class="emphasis"><em>Microsoft Office</em></span> are installed and that tools that are typically used for analysis (such as <span class="emphasis"><em>Wireshark</em></span>) are not installed. Although the analysis environment can be hardened against many of these techniques, new methods are being discovered and it can be argued that no sandbox, or VM in particular, is completely undetectable.</p><p>From the perspective of a malware author, the purpose of detecting that execution is taking place in an artificial analysis situation rather than on a genuine victim&rsquo;s machine, is to alter its behaviour to hide aspects of its functionality from those that wish to analyse the sample. The most obvious and common manifestation of this intention is to terminate execution immediately after the VM has been detected. To the automated analysis environment it appears that the sample in question failed to execute correctly, as there will typically be no useful output. This meets the goals of the malware author by concealing the functionality of the sample. This may prevent the sample from being classified as malicious, or perhaps more importantly, may conceal critical information such as command and control (C&amp;C) addresses.</p><p>The concept of concealing information such as C&amp;C addresses is an important one, as it highlights the fact that sandboxes increasingly comprise only one part of a larger automated system that processes the output of the analysis and may perform further activities such as extracting actionable items &ndash; C&amp;C addresses are a good example &ndash; and publishing them to other systems such as a URL blacklist. We can now see that if, instead of simply terminating execution when a VM is detected, the sample contacts a different URL to that which would have been contacted if the a VM had not been detected, the malware author can create problems for those running the sandbox and the secondary systems processing the results of analysis. Let us explore some of the possible approaches that malware can take once a sandbox has been detected by looking at several malware families that have chosen not to simply end execution, and the kinds of activity they exhibit.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4890940"></a>Different strategies</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3894692"></a>Andromeda</h3></div></div></div><p>Andromeda is a bot that can download a variety of modules and is often used to distribute other malware families such as Gameover Zeus [<span class="citation"><a href="#citation.4">4</a></span>]. Through several iterations, Andromeda has often employed some element of VM detection followed by unusual alternative behaviour.</p><p>Samples use several methods to detect if analysis is taking place in a sandbox, including checking the list of running processes for names such as vboxtray.exe, wireshark.exe, and checking registry values for giveaway strings such as those found at:</p><p>HKLM\SYSTEM\CurrentControlSet\Services\Disk\Enum</p><p>Following the analysis environment detection code, there is a branch where further payload code is decrypted and executed. If the malware has detected that it is not executing on a live machine, then bogus payload code is loaded. If the checks all come up negative, and it is thus assumed that the system is a genuine victim machine, then the true payload will be loaded (<a href="#figure.1">Figure 1</a>).</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Andromeda payload decision." src="/uploads/images/figures/2015/01/Wyke-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Andromeda payload decision.</b></p></div><p>The dummy payload itself has varied slightly over time but has mainly consisted of copying the original sample to a fixed pathname, creating a runkey entry in the registry that points to the copy, and opening up a listening socket on TCP port 8000 which then waits for incoming connections (<a href="#figure.2">Figure 2</a>).</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Bogus payload file path and run key." src="/uploads/images/figures/2015/01/Wyke-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Bogus payload file path and run key.</b></p></div><p>This is in stark contrast to the genuine payload (<a href="#figure.3">Figure 3</a>), where the .exe file is copied to a different location with a randomly generated filename, a different autostart point is created in the registry, and an outbound HTTP request is sent to receive instructions from the C&amp;C server (<a href="#figure.4">Figure 4</a>).</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Genuine file path and registry autostart point." src="/uploads/images/figures/2015/01/Wyke-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Genuine file path and registry autostart point.</b></p></div><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Outbound HTTP request." src="/uploads/images/figures/2015/01/Wyke-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Outbound HTTP request.</b></p></div><p>One of the key points to note about Andromeda&rsquo;s decoy behaviour is that the behaviour itself is very identifiable. It is easy to establish that a sample is Andromeda because it will always perform the same bogus, but distinguishable, behaviour when executed under a VM that is not hardened against VM detection techniques. This shows that the authors are not primarily interested in preventing the sandbox from determining that the sample is malicious. Behavioural signatures that match on the fixed pathname are easy to write. Rather, it seems that the main goal is to keep the C&amp;C addresses hidden from those analysing the sample, extending the lifetime of those addresses and reducing the administration overhead involved in finding new hosting providers when existing servers are taken down or are blocked by too many network security solutions.</p><p>A secondary consequence of this kind of decoy behaviour is that the fake behaviour is often incorrectly assumed to be the <span class="emphasis"><em>only</em></span> behaviour that the sample will ever display. This can lead to miscategorizing the whole malware family as something relatively benign and may result in publications that mistake the decoy behaviour for genuine behaviour [<span class="citation"><a href="#citation.5">5</a></span>].</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3903459"></a>Simda</h3></div></div></div><p>Simda is primarily a backdoor trojan that is mostly used to steal credentials for a variety of online banking systems [<span class="citation"><a href="#citation.6">6</a></span>]. Simda uses a wide range of techniques to detect the presence of a VM or analysis environment, including checking the <span class="emphasis"><em>Windows</em></span> ProductID in the registry against known values that are found in public online sandboxes, looking for running processes commonly found on analysis machines and for registry entries that indicate that software commonly used by researchers is installed (<a href="#figure.5">Figure 5</a>).</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Simda VM detection strings." src="/uploads/images/figures/2015/01/Wyke-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Simda VM detection strings.</b></p></div><p>Whether the checks come up positive or not, Simda gathers certain information about the victim system including the computer name, the ProductID, the Volume Serial Number from the C:\ drive and, importantly, whether or not the system passed the anti-analysis environment checks. It sends the data back to a C&amp;C server encoded in the URL of an HTTP request (<a href="#figure.6">Figure 6</a>).</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Simda HTTP check-in." src="/uploads/images/figures/2015/01/Wyke-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Simda HTTP check-in.</b></p></div><p>If an artificial environment is detected, the sample will enter an infinite loop. However, since the HTTP request has already been sent, the C&amp;C server has already received information about the analyst&rsquo;s machine, including the IP address. The owners of the Simda botnet appear to be using the IP addresses they have collected in this way to blacklist researcher and security company machines.</p><p>Through experimentation, we discovered that if a sample that had been executed in a VM and reported back to the C&amp;C server was subsequently executed from a physical machine that passed all the analysis environment checks, it would still get stuck in an infinite loop. We managed to trace this behaviour to the place in the code where the data sent back by the C&amp;C server is checked by the sample. If there is a certain value at a certain offset in the data received, then the sample will enter the infinite loop despite all the client-side checks passing (<a href="#figure.7">Figure 7</a>). So it seems that our earlier execution of the sample under a VM had caused all further requests from the same IP address to be denied by the server.</p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Server replies: enter infinite loop." src="/uploads/images/figures/2015/01/Wyke-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Server replies: enter infinite loop.</b></p></div><p>The Simda authors do not seem to be overly concerned about concealing C&amp;C addresses from researchers. Instead, their goal seems to be to hinder analysis of the threat through both client side and server-side mechanisms. Even though technologies such as NAT will mean that IP address blacklisting could prevent legitimate infections, the Simda authors are prepared to suffer this loss as long as a greater understanding of how the bot works is prevented.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4203423"></a>Vundo</h3></div></div></div><p>Vundo is a malware family that has been through many guises over the years, most recently being known as Ponmocup [<span class="citation"><a href="#citation.7">7</a></span>], but throughout its lifetime the general payload has been to push adware onto victims&rsquo; systems. Vundo checks for the existence of a VM through a variety of means including checking the SystemBiosVersion value of the HKLM\HARDWARE\DESCRIPTION\System key in the registry.</p><p>Vundo&rsquo;s strategy once a sandbox has been detected is most easily demonstrated by observing the network activity under a VM and comparing it to that which takes place on a real machine. In both cases, an initial DNS request is made, the response to which is ignored. Since this initial request is ignored it could be to any domain, but recent samples have been favouring the domain fasternation.net. An HTTP request is then made, but both the URL and the host used are different depending on whether or not a VM is detected.</p><p>As can be seen in the example shown in <a href="#figure.8">Figure 8</a> and <a href="#figure.9">Figure 9</a>, if a VM is detected a request is made to 12.6.182.165, whereas if a VM is not detected, the request is sent to 93.115.88.220. Vundo is not only attempting to conceal its C&amp;C server addresses but is also providing a decoy address that has no association with the botnet.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="Vundo decoy HTTP request." src="/uploads/images/figures/2015/01/Wyke-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;Vundo decoy HTTP request.</b></p></div><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="Vundo genuine HTTP request." src="/uploads/images/figures/2015/01/Wyke-9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;Vundo genuine HTTP request.</b></p></div><p>This is a clear case of the malware sending a bogus HTTP request when a sandbox is detected. This has the consequence that the identity of the genuine C&amp;C server is harder to ascertain, and in a similar way to the Andromeda case, it may survive longer before it is taken down or blocked by network security products. However, the use of the decoy URL is a more sinister development, as this means we cannot trust the data coming out of the automated analysis system. If we are blindly adding all URLs contacted by the malware to network blacklists, then we will have false positives when encountering this kind of malware.</p><p>Although in this case the only bogus information is a URL and server address, it highlights the general concept of deliberately attempting to cause security companies to false positive or otherwise publish erroneous data, by changing behaviour once a sandbox has been detected.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4313392"></a>Shylock</h3></div></div></div><p>Shylock is a banking trojan that is notable in that it is not sold as a kit but rather is privately developed and operated by one group [<span class="citation"><a href="#citation.8">8</a></span>]. Its configuration architecture is similar to other banking families, such as Zeus, in that the malicious binary holds minimal configuration information &ndash; only a URL &ndash; from which the full configuration file is downloaded. This file contains the other essential information such as the address to which stolen data is sent and a URL from which to download the web injects file which contains all the extra code that will be added to web pages when specific URLs are browsed to. The configuration file is very important when trying to gain a better understanding of what a particular Shylock sample is aiming to achieve. It contains URLs from which further modules will be downloaded, and the web injects file gives important indications about which financial organizations are being targeted and what extra information may have been elicited from the victim.</p><p>When Shylock first checks into its C&amp;C server, it sends a large amount of information about the infected machine (<a href="#figure.10">Figure 10</a>). This includes data about the machine itself, such as the CPU speed and amount of RAM installed; data about the OS, such as the <span class="emphasis"><em>Windows</em></span> version, install date and product key; and data about the installed programs, such as the anti-virus software, the browser installed and the programs that are set to run automatically at system startup in the registry.</p><div class="figure"><a id="figure.10"></a><div class="mediaobject"><img alt="Shylock check-in data." src="/uploads/images/figures/2015/01/Wyke-10.jpg" /></div><p class="title"><b>Figure&nbsp;10.&nbsp;Shylock check-in data.</b></p></div><p>Shylock contains VM detection techniques that include looking for common registry entries and processes used by VM manager software. If a VM is detected, extra data gets included in the initial outbound request: a VirtualMachine=Yes field is added to the data, as shown in <a href="#figure.11">Figure 11</a>.</p><div class="figure"><a id="figure.11"></a><div class="mediaobject"><img alt="VirtualMachine field added to data." src="/uploads/images/figures/2015/01/Wyke-11.jpg" /></div><p class="title"><b>Figure&nbsp;11.&nbsp;VirtualMachine field added to data.</b></p></div><p>The inclusion of this field is the source of Shylock&rsquo;s unusual anti-sandbox strategy. When the initial check-in request has been received from the newly infected machine, the C&amp;C server examines the included data and will make a decision on which configuration file to deliver to the victim based on whether or not the VirtualMachine=Yes field is present. If the VM field is included, then a very basic configuration file is returned which does not include the URLs of any further modules to download and includes a very uniform URL for the web injects: &lsquo;/files/hidden7710777.jpg&rsquo; (see <a href="#figure.12">Figure 12</a>).</p><div class="figure"><a id="figure.12"></a><div class="mediaobject"><img alt="VM detected config file." src="/uploads/images/figures/2015/01/Wyke-12.jpg" /></div><p class="title"><b>Figure&nbsp;12.&nbsp;VM detected config file.</b></p></div><p>This is noticeably different from the configuration file that is returned when the VirtualMachine field is not included in the check-in request. This time, we have a plug ins section that includes the URLs for several plug ins &ndash; BackSocks, DiskSpread, MessengerSpread, PGP, an archiver URL and a url_update URL. Additionally, we can see that each URL path, including the httpinject URL path from which the web injects are downloaded, includes a directory that was not present in the VM-detected configuration file, in the example shown in <a href="#figure.13">Figure 13</a>, this directory is 010-update-d9hbjz6.</p><div class="figure"><a id="figure.13"></a><div class="mediaobject"><img alt="Genuine config file." src="/uploads/images/figures/2015/01/Wyke-13.jpg" /></div><p class="title"><b>Figure&nbsp;13.&nbsp;Genuine config file.</b></p></div><p>We can see further evidence that the Shylock authors are trying to deceive researchers in the web injects files that are returned from the URL provided in the fake configuration file and from the URL in the genuine configuration file. The web injects from the fake file are very generic and change little over time. They still look genuine, as they are designed to pass casual inspection. When the web injects from the genuine configuration file are examined we can see that these are much more geographically targeted and contain more advanced JavaScript and HTML code (<a href="#figure.14">Figure 14</a>).</p><div class="figure"><a id="figure.14"></a><div class="mediaobject"><img alt="Genuine web injects." src="/uploads/images/figures/2015/01/Wyke-14.jpg" /></div><p class="title"><b>Figure&nbsp;14.&nbsp;Genuine web injects.</b></p></div><p>When Shylock detects that it is running in a VM or sandbox, it does not attempt to conceal its C&amp;C addresses or hide the nature of its functionality from the analysis system. The functionality that is hidden is done so at a more subtle level. From the infected machine&rsquo;s perspective there is very little difference in behaviour, merely the extra data added to the HTTP request when a VM is detected. It is only when the data sent back by the server is analysed in depth that we realize we are being fooled. The benefits to the malware authors in this case are that researchers will not be aware of new plug in files that only appear in the genuine configuration file, and that banks and other financial organizations will not be aware that they are specifically being targeted or aware of what form the web injects that target their web applications will take.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3736984"></a>Categorization of techniques and goals</h2></div></div></div><p>Having analysed several real-world post sandbox detection strategies, we can begin to group the techniques used and the intentions and goals of the perpetrators. Table 1 attempts to broadly group the techniques used with a more verbose description, an example, and the goal of the malware author in each case.</p><div class="table"><a id="table.1"></a><table border="1" summary="Categorization of malware techniques and goals after a sandbox is
      detected."><colgroup><col /><col /><col /><col /></colgroup><thead><tr><th align="center">Technique</th><th align="center">Description</th><th align="center">Example</th><th align="center">Goal</th></tr></thead><tbody><tr><td>Alternative, benign behaviour</td><td>The true nature of the sample is hidden along with data such as C&amp;C addresses, to be replaced with different, more benign behaviour</td><td>Andromeda&rsquo;s decoy pathname and listening socket</td><td>Conceal C&amp;C addresses, extend lifetime of network infrastructure, reduce level of community knowledge about threat</td></tr><tr><td>Blacklisting</td><td>Artifacts such as IP address are identified as potentially belonging to researchers, normal execution will not take place from these addresses even if other checks pass</td><td>Simda reports detected sandboxes to C&amp;C server, subsequent requests from real machines from the same IP are instructed to enter infinite loop by server</td><td>Prevent researchers from further understanding the threat, build up list of likely security company IP addresses</td></tr><tr><td>Decoy addresses</td><td>Alternative C&amp;C addresses are substituted for the genuine value when artificial environment is detected</td><td>Vundo sends HTTP request to decoy address when first executed</td><td>Conceal genuine C&amp;C address, divert attention to fake address, potentially induce false positives</td></tr><tr><td>Fake configuration data</td><td>Configuration information returned by C&amp;C servers is adjusted based on whether a sandbox is detected</td><td>Shylock serves up dummy config file and dummy web injects if a sandbox is detected</td><td>Conceal extra functionality not evident from the sample through server interaction, hide targeted URLs and injected code, hide existence of further modules</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Categorization of malware techniques and goals after a sandbox is detected.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2715298"></a>Consequences</h2></div></div></div><p>Although we have touched on what the consequences can be for failing to realize that an alternative behaviour is being observed, it is worth going through them in greater detail.</p><p>For the more basic techniques, such as being presented with completely different, more benign behaviour as in the Andromeda example, there is the obvious consequence of public embarrassment when material is published detailing the decoy behaviour of the threat without the realization that this is not the way the threat behaves in a real system. The researcher has effectively fallen for the ruse.</p><p>Where genuine C&amp;C addresses are hidden, we observe that the domains in question will often remain live for many weeks after they were initially introduced. Typically, domains known to be call-home addresses for malware will have relatively short shelf lives as they are blocked by security products or the hosting provider takes action to remove malicious content. The easiest way to determine the call-home address for a sample is to execute it in a sandbox. So if the sandbox fails to extract the C&amp;C address, then fewer people, systems and companies will be aware that it is malicious, and thus it will live on for longer.</p><p>The blacklisting case highlights the need to use a fresh infrastructure when carrying out analysis, as previous use of IP addresses or machines may invalidate future analyses. Once a server outside of our control decides to decline our requests there is little we can do to remedy the situation, except send traffic through a different address.</p><p>The case where decoy behaviour is displayed that is designed to induce a negative consequence on the larger analysis system, such as the decoy HTTP request displayed by Vundo, is one that requires careful consideration from companies that process large volumes of samples and take further action on the artifacts of analysis. Evidence has been presented elsewhere that shows this kind of attack is already taking place in other forms, such as against automated detection from AV vendors [<span class="citation"><a href="#citation.9">9</a></span>]. This technique can also be used to cause a vendor to assign attribution to an innocent party, such as one cybercrime group seeking to lay blame for an attack on a rival group, or a nation state causing an enemy nation to be blamed for its actions.</p><p>More subtle attacks, such as the altered configuration file distributed by Shylock, have consequences further along the chain of events that take place when a victim is infected with a sample. Banks and other financial organizations keenly study banking malware and the custom web injects they employ to better understand how their customers may be defrauded by such malware. More advanced constructions, such as automatic transfer systems that can initiate bank transfers entirely through the injected JavaScript, are particularly valuable to the security departments of banks. By ensuring that these features are not evident when the sample is analysed in a sandbox, the malware authors can keep them hidden from the anti-fraud departments that would otherwise find ways to detect and block the activity.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4182009"></a>Protection</h2></div></div></div><p>When attempting to ensure that our sandbox system does not fall prey to these types of attacks, the most simplistic approach is to make our analysis environment look as much like a real system as possible, so that any checks that the malware may make are defeated.</p><p>Many of the basic techniques used to detect a VM are easily thwarted. Simple hardening, such as not installing guest additions and masking giveaway strings in the registry, will defeat the majority of VM detection techniques. More advanced methods, such as detecting assembly instruction differences, may be defended against by compiling custom versions of the VM software or by applying custom configuration options.</p><p>The only guaranteed method to defeat all VM detection techniques is to use a physical machine, but this can be difficult from a management and automation point of view, meaning it may not be possible to put huge numbers of samples (e.g. 400,000 per day) through such a system. Even then, checks that attempt to establish the machine is a genuine victim rather than an analysis machine may still succeed based on the software installed or other similar checks that try to establish that a real human has been using the system. If an attack is truly targeted, then the sample may check for extremely specific settings on the current system, such as username, language settings, machine name, and atypical software installed. If our sandbox machine fails any of these checks we reveal ourselves to the attacker.</p><p>Another protection strategy is to attempt to identify that a sample is looking for evidence of a sandbox or automated analysis system, and only then to send the sample to the physical machine. This reduces the management overhead as we would only be sending the proportion of the samples that require it to a physical machine, and the rest can go through the virtualized setup which would in theory have much greater capacity. However, it then becomes extremely important to be able to identify every single possible sandbox detection technique in existence and new ones as they are developed, as if one technique is missed, the sandbox becomes vulnerable.</p><p>A third strategy is always to run a sample in both an unhardened virtual machine and a physical box, comparing any differences. This would flag up instances where the sample is behaving differently under analysis conditions from in the real world, but creates considerable resources overhead as each sample has to be executed twice.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2615638"></a>Conclusion</h2></div></div></div><p>Sandbox execution is increasingly touted as a possible solution for detecting &lsquo;day-zero&rsquo; malware. There are a wide range of commercial and publicly available solutions that can be incorporated into an organization&rsquo;s network defences or used as standalone research tools, and many security companies have their own in-house solutions used to process huge quantities of malware daily. Furthermore, the data that is extracted from analysis is far greater than a simple decision of &lsquo;good&rsquo; or &lsquo;bad&rsquo;, as attempts are made to correlate the behaviour of one sample with that of another and to detect and block the common features of both, such as C&amp;C addresses.</p><p>Virtualization is also a technology that is becoming increasingly widespread and is commonly seen on both the server and the desktop. Despite this fact, we continue to see more VM-aware malware that refuses to execute or will execute in a different way while virtualized. It seems that malware authors are willing to sacrifice some genuine installs on machines that are virtualized for the sake of the benefits that can be gained from concealing true functionality from researchers and security companies, and indeed, from presenting false and misleading information instead.</p><p>The examples shown in this paper indicate that we must be wary of trusting the output from a sandbox analysis, and show how important it is to ensure an artificial environment looks as much as possible like a real machine. Detecting that a sample or a whole malware client/server interaction is behaving differently can sometimes be easy but we have also shown cases where the differences are very subtle and difficult to identify.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2375524"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] <span class="bibliosource"><a href="https://www.sophos.com/en-us/support/knowledgebase/119112.aspx" target="_blank">http://www.sophos.com/en-us/support/knowledgebase/119112.aspx</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] <span class="bibliosource"><a href="https://invisiblethings.org/papers/redpill.html" target="_blank">http://invisiblethings.org/papers/redpill.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] <span class="bibliosource"><a href="https://media.blackhat.com/us-13/US-13-Singh-Hot-Knives-Through-Butter-Evading-File-Based-Sandboxes-Slides.pdf" target="_blank">https://media.blackhat.com/us-13/US-13-Singh-Hot-Knives-Through-Butter-Evading-File-Based-Sandboxes-Slides.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Xu, H. <span class="bibliosource"><a href="/virusbulletin/2013/05/good-look-andromeda-botnet
" target="_top">https://www.virusbtn.com/virusbulletin/archive/2013/05/vb201305-Andromeda-botnet</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] <span class="bibliosource"><a href="http://www.0xebfe.net/blog/2013/03/30/fooled-by-andromeda/" target="_blank">http://www.0xebfe.net/blog/2013/03/30/fooled-by-andromeda</a>/</span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] <span class="bibliosource"><a href="http://blogs.technet.com/b/mmpc/archive/2013/09/10/msrt-september-2013-win32-simda.aspx" target="_blank">http://blogs.technet.com/b/mmpc/archive/2013/09/10/msrt-september-2013-win32-simda.aspx</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] <span class="bibliosource"><a href="https://c-apt-ure.blogspot.co.uk/2013/12/ponmocup-hunter-is-re-tired.html" target="_blank">http://c-apt-ure.blogspot.co.uk/2013/12/ponmocup-hunter-is-re-tired.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] <span class="bibliosource"><a href="https://www.baesystemsdetica.com/services/cyber-security/the-shylock-malware/" target="_blank">https://www.baesystemsdetica.com/services/cyber-security/the-shylock-malware/</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] <span class="bibliosource"><a href="/conference/vb2013/abstracts/working-together-defeat-attacks-against-av-automation
" target="_top">https://www.virusbtn.com/conference/vb2013/abstracts/LM7-JiaBatchelder.xml</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-Wyke.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: Duping the machine - malware strategies, post sandbox detection&url=https://www.virusbulletin.com/virusbulletin/2015/01/paper-duping-machine-malware-strategies-post-sandbox-detection"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2015/01/paper-duping-machine-malware-strategies-post-sandbox-detection'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2015/01/paper-duping-machine-malware-strategies-post-sandbox-detection&title=VB2014 paper: Duping the machine - malware strategies, post sandbox detection"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2015/01/paper-duping-machine-malware-strategies-post-sandbox-detection&t=VB2014 paper: Duping the machine - malware strategies, post sandbox detection"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2015/01/paper-duping-machine-malware-strategies-post-sandbox-detection"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>