<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: Android packers: facing the challenges, building solutions</title>
<meta name="description" content="A growing percentage of Android malware, including Zeus, SMSSend, and re-packaged applications, are packed using legitimate packers originally developed to protect the intellectual property of Android applications, with other malware having been found packed with customized packers. In his VB2014 paper, Rowland Yu attempts to address the anti-decompiler and anti-debugging techniques of such packers, reveals the latest statistics on Android packed malware, and presents a generic method for detecting packed Android malware." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1538;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201601-Android-packers"></a>VB2014 paper: Android packers: facing the challenges, building solutions</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2016-01-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Rowland</span> <span class="surname">Yu</span></h3><span class="orgname">Sophos</span>, <span class="orgdiv">Australia</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>A growing percentage of Android malware, including Zeus, SMSSend, and re-packaged applications, are packed using legitimate packers originally developed to protect the intellectual property of Android applications, with other malware having been found packed with customized packers. In his VB2014 paper, Rowland Yu attempts to address the anti-decompiler and anti-debugging techniques of such packers, reveals the latest statistics on <span class="emphasis"><em>Android</em></span> packed malware, and presents a generic method for detecting packed <span class="emphasis"><em>Android</em></span> malware.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2051" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2051" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id2924381">Abstract</a></span></dt><dt><span class="sect1"><a href="#id3373158">1. Introduction</a></span></dt><dt><span class="sect1"><a href="#id4135740">2. Opening the black box of Android packers</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3619378">2.1 Inspect changes in APK file structure</a></span></dt><dt><span class="sect2"><a href="#id2439875">2.2 Decompiling classes.dex to observe the difference in code tree</a></span></dt><dt><span class="sect2"><a href="#id2478755">2.3 Supplemental investigation of Ijiami</a></span></dt><dt><span class="sect2"><a href="#id3069953">2.4 Additional studies on Bangcle</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4352352">3. Facing the challenges</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4318110">3.1 Explosive growth of packed malware</a></span></dt><dt><span class="sect2"><a href="#id3776407">3.2 Ineffective reverse engineering (RE) tools</a></span></dt><dt><span class="sect2"><a href="#id2933960">3.3 Failure of dynamic analysis systems</a></span></dt><dt><span class="sect2"><a href="#id4597997">3.4 Runtime anti-debug</a></span></dt><dt><span class="sect2"><a href="#id2779032">3.5 Difficult to detect by security solutions</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4028367">4. Building solutions</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4908150">4.1 Memory acquisition from Android emulator</a></span></dt><dt><span class="sect2"><a href="#id3854456">4.2 Performing memory forensics with Volatility plug-ins</a></span></dt><dt><span class="sect2"><a href="#id3524410">4.3 From memory dump to &lsquo;original&rsquo; dex file</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4321941">5. Conclusions</a></span></dt></dl></div></div></div><div class="sect1" lang="en">
<div class="titlepage">
<div>
<div>
<h2 class="title"><a id="id2924381" class="chapter"></a>Abstract</h2>
</div>
</div>
</div>
<p>Recently, <span class="emphasis"><em>SophosLabs</em></span> has noticed an increase in the use of <span class="emphasis"><em>Android</em></span> packers on APK files. <span class="emphasis"><em>Android</em></span> packers are able to encrypt an original classes.dex file, use an ELF binary to decrypt the dex file to memory at runtime, and then execute via DexclassLoader. In other words, <span class="emphasis"><em>Android</em></span> packers have the ability to change the overall structure and flow of an <span class="emphasis"><em>Android</em></span> APK file – which is more complicated than obfuscation techniques such as the use of ProGuard, DexGuard and junk byte injection.</p>
<p><span class="emphasis"><em>Android</em></span> packers were originally created to prevent the intellectual property of applications being copied or altered by others for profit. <span class="emphasis"><em>ApkProtect.com</em></span> and <span class="emphasis"><em>Bangcle.com</em></span> are the first two legitimate providers of online packing services. <span class="emphasis"><em>Bangcle.com</em></span> even employs virus-scanning engines in an attempt to prevent malicious applications being packed. However, the developers’ centralized measuring systems and scanning engines have not been able to prevent malware authors from using their services. A growing percentage of malware, including Zeus, SMSSend, and re-packaged applications, are packed by their services. <span class="emphasis"><em>SophosLabs</em></span> has also found malware packed with a customized packer.</p>
<p>As a result, security researchers are facing a great challenge in overcoming these packers’ complex anti-decompiler and anti-debugging strategies. Existing reverse engineering (RE) tools are not able to unpack and inspect hidden payloads within packed applications. <span class="emphasis"><em>Android</em></span> sandboxes have trouble offering dynamic analysis information, as packed applications on <span class="emphasis"><em>Android Emulator </em></span>keep crashing. Therefore, distinguishing <span class="emphasis"><em>Android</em></span> malware from a group of packed applications is much harder than it is from a number of obfuscated applications.</p>
<p>This paper attempts to address the anti-decompiler and anti debugging techniques of the above packers, reveal the latest statistics on <span class="emphasis"><em>Android</em></span> packed malware, use static RE utilities to analyse their logic flow and data structures, and demonstrate runtime behaviours via dynamic tools. Furthermore, we are building solutions to investigate hidden payloads via restoration of the original <span class="emphasis"><em>Android</em></span> dex files from memory dump. Finally, the paper will present a generic method to detect packed <span class="emphasis"><em>Android</em></span> malware.</p>
</div>
<div class="sect1" lang="en">
<div class="titlepage">
<div>
<div>
<h2 class="title"><a id="id3373158" class="chapter"></a>1. Introduction</h2>
</div>
</div>
</div>
<p>A packer is a program that is used to compress and/or encrypt an executable file without affecting its execution semantics [<span class="citation"><a href="#citation.1">1</a></span>]. Packers were originally created to reduce the overall file size for distribution, and/or to protect files’ intellectual property against reverse engineering (RE). Later on, malware authors took advantage of these benefits and began to utilize packers as a means to avoid detection by anti-virus (AV) scanners.</p>
<p>While on the one hand, <span class="emphasis"><em>Android</em></span> packers have anti-tamper, anti decompiler, anti-runtime injection and anti-debug capabilities for the protection of legitimate applications against loss of intellectual property, on the other hand, they present enormous challenges for existing RE tools and dynamic analysis systems when diagnosing potential mobile threats.</p>
<p>A rise in the use of packers in <span class="emphasis"><em>Android</em></span> malicious applications has recently been seen by <span class="emphasis"><em>SophosLabs</em></span>. These include Zeus, SMSSend and re packaged adware, all of which are packed either by legitimate online packing services such as <span class="emphasis"><em>ApkProtect.com</em></span> and <span class="emphasis"><em>Bangcle.com</em></span>, or using customized packers. The key step in verifying a packed application – malicious or otherwise – is acquiring the original dex file.</p>
<p>This paper will:</p>
<div class="orderedlist"><ol type="1">
<li>
<p>Present an overview of the online <span class="emphasis"><em>Android</em></span> packing services of <span class="emphasis"><em>ApkProtect.com</em></span>, <span class="emphasis"><em>Bangcle.com</em></span> and <span class="emphasis"><em>Ijiami.cn</em></span>.</p>
</li>
<li>
<p>Address the anti-decompiler and anti-debug techniques of <span class="emphasis"><em>Android</em></span> packers, and look at why <span class="emphasis"><em>Android</em></span> packers are more complicated than obfuscation tools.</p>
</li>
<li>
<p>Report on <span class="emphasis"><em>Android</em></span> malware families using various packers, and their challenges for existing threat researching tools and systems.</p>
</li>
<li>
<p>Describe the Volatility project and a plug-in for analysing packed malware and restoring the original dex file via memory dump.</p>
</li>
<li>
<p>Present a solution for detecting packed malware.</p>
</li>
</ol></div>
<p>The rest of this paper is structured as follows: in section 2, we provide a deep insight into the working process of <span class="emphasis"><em>Android</em></span> packers and their techniques; section 3 discusses the challenges for existing RE tools and dynamic systems; section 4 presents the Volatility project, describes a new Volatility plug in, and demonstrates its results for a packed application. Finally, section 5 draws a conclusion.</p>
</div>
<div class="sect1" lang="en">
<div class="titlepage">
<div>
<div>
<h2 class="title"><a id="id4135740" class="chapter"></a>2. Opening the black box of Android packers</h2>
</div>
</div>
</div>
<p>There is a well-known saying: ‘Know the enemy and know yourself, and you can fight a hundred battles with no danger of defeat.’ It is necessary to understand the operating principles of <span class="emphasis"><em>Android</em></span> packers in order to know what kinds of challenges confront us and how to build solutions. This section will illustrate our subjects – the top three <span class="emphasis"><em>Android</em></span> packing service providers – <span class="emphasis"><em>ApkProtect.com</em></span>, <span class="emphasis"><em>Bangcle.com</em></span> and <span class="emphasis"><em>Ijiami.cn</em></span>.</p>
<p>All <span class="emphasis"><em>Android</em></span> packing services are based on online black box systems. Developers upload their applications then obtain packed applications without any knowledge of the internal workings of the packer. However, for a malware researcher, it is vitally important to understand the inner workings of the packed files so as to be able to analyse the payloads of malicious applications and offer suitable detection.</p>
<p>To make reverse engineering simpler, a test application was created and uploaded to all three online packing services. The application contained the main <span class="emphasis"><em>Android</em></span> components: Activity, Service, Content Provider, BroadcastReceiver and Intent, together with JNI and native library. Subsequently, the packed applications were examined to determine the differences between them and the original file in terms of static and dynamic analysis in order to gain a comprehensive understanding of the packing services.</p>
<div class="sect2" lang="en">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a id="id3619378" class="chapter"></a>2.1 Inspect changes in APK file structure</h3>
</div>
</div>
</div>
<p><a href="#figure.1">Figure 1</a> shows the differences in the file structure of the test application before and after packing by the three providers.</p>
<div class="figure"><a id="figure.1"></a>
<div class="mediaobject"><img src="/uploads/images/figures/2016/01/Yu-1.jpg" alt="The APK file structure (top left: original APK, top right: file packed with ApkProtect, bottom left: file packed with Ijiami, bottom right: file packed with Bangcle)." /></div>
<p class="title"><strong>Figure 1. The APK file structure (top left: original APK, top right: file packed with ApkProtect, bottom left: file packed with Ijiami, bottom right: file packed with Bangcle).</strong></p>
</div>
<p>(Click <a href="/uploads/images/figures/2016/01/Yu-1-large.png" target="_top">here</a> to view a larger version of Figure 1.)</p>
<p><a href="#table.1">Table 1</a> lists the files added in the packed APKs, while <a href="#table.2">Table 2</a> lists the files modified in the corresponding APKs.</p>
<div class="table"><a id="table.1"></a>
<table summary="The files added in the packed APKs." border="1"><colgroup><col /><col /><col /></colgroup>
<thead>
<tr><th align="center">Pack provider</th><th align="center">Added file</th><th align="center">Comments</th></tr>
</thead>
<tbody>
<tr>
<td>ApkProtect</td>
<td>lib/armeabi/libapkprotect2.so</td>
<td>ARM shared native library binary</td>
</tr>
<tr>
<td>Bangcle</td>
<td>
<p>assets/meta-data/manifest.mf</p>
<p>assets/meta-data/rsa.pub</p>
<p>assets/meta-data/rsa.sig</p>
<p>assets/bangcle_classes.jar</p>
<p>assets/bangcleplugin/collector.dex</p>
<p>assets/bangcleplugin/container.dex</p>
<p>assets/bangcleplugin/dgc</p>
<p>assets/com.sophos.andrpacker</p>
<p>assets/com.sophos.andrpacker.x86</p>
assets/libsecexe.x86.so
<p>assets/libsecmain.x86.so</p>
lib/armeabi/libsecexe.so
<p>lib/armeabi/libsecmain.so</p>
</td>
<td>
<p>APK manifest file</p>
<p>Signature file</p>
<p>The real signature file with certificate</p>
<p>Encrypted original classes.dex file</p>
<p>Bangcle information collector plug-in</p>
<p>Bangcle implementation plug-in</p>
<p>Bangcle plug-in log file</p>
<p>ARM exectuable file</p>
<p>x86 executable file</p>
<p>x86 shared native library binary</p>
<p>x86 native main binary</p>
<p>ARM shared native library binary</p>
ARM native main binary</td>
</tr>
<tr>
<td>Ijiami</td>
<td>
<p>META-INF/signed.bin</p>
<p>META-INF/af.bin</p>
<p>META-INF/sdata.bin</p>
<p>assets/ijiami.dat</p>
<p>lib/armeabi/libexecmain.so</p>
<p>lib/armeabi/libexec.so</p>
</td>
<td>
<p>Ijiami signed binary file</p>
<p>Ijiami binary file</p>
<p>Ijiami RSA signature file</p>
<p>Encrypted original APK file</p>
<p>ARM JNI load/unload native binary</p>
<p>ARM shared native library binary</p>
</td>
</tr>
</tbody>
</table>
<p class="title"><strong>Table 1. The files added in the packed APKs.</strong></p>
</div>
<div class="table"><a id="table.2"></a>
<table summary="The files modified/replaced in the packed APKs." border="1"><colgroup><col /><col /><col /></colgroup>
<thead>
<tr><th align="center">Pack provider</th><th align="center">Modified/replaced file</th><th align="center">Comments</th></tr>
</thead>
<tbody>
<tr>
<td>ApkProtect</td>
<td>classes.dex</td>
<td>Modified original classes.dex file</td>
</tr>
<tr>
<td>Bangcle</td>
<td>
<p>AndroidManifest.xml</p>
classes.dex</td>
<td>Configure to implement Bangcle class
<p>Classes.dex replaced by Bangcle</p>
</td>
</tr>
<tr>
<td>Ijiami</td>
<td>AndroidManifest.xml
<p>classes.dex</p>
</td>
<td>Configure to implement Ijiami class
<p>Classes.dex replaced by Ijiami</p>
</td>
</tr>
</tbody>
</table>
<p class="title"><strong>Table 2. The files modified/replaced in the packed APKs.</strong></p>
</div>
</div>
<div class="sect2" lang="en">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a id="id2439875" class="chapter"></a>2.2 Decompiling classes.dex to observe the difference in code tree</h3>
</div>
</div>
</div>
<p><a href="#figure.2">Figure 2</a> displays the code tree of the decompiled classes.dex file for the original APK, and for the file packed with <span class="emphasis"><em>ApkProtect</em></span>, <span class="emphasis"><em>Ijiami</em></span> and <span class="emphasis"><em>Bangcle</em></span> (from left to right, respectively).</p>
<div class="figure"><a id="figure.2"></a>
<div class="mediaobject"><img src="/uploads/images/figures/2016/01/Yu-2.jpg" alt="Code tree of decompiled classes.dex. From left to right: original, ApkProtect, Ijiami and Bangcle." /></div>
<p class="title"><strong>Figure 2. Code tree of decompiled classes.dex. From left to right: original, ApkProtect, Ijiami and Bangcle.</strong></p>
</div>
<p>(Click <a href="/uploads/images/figures/2016/01/Yu-2-large.png" target="_top">here</a> to view a larger version of Figure 2.)</p>
<p>After investigating the code tree of the decompiled classes.dex, we can conclude that <span class="emphasis"><em>ApkProtect</em></span> is not an <span class="emphasis"><em>Android</em></span> packing service, but an obfuscating and junk code injecting tool. It is able to encrypt most sensitive strings by using the AES cipher algorithm in the apkprotect2 class, but will not touch the original logic flow and code structures. Therefore, it is relatively simple to analyse and detect applications guarded by <span class="emphasis"><em>ApkProtect</em></span>.</p>
<p>On the other hand, both <span class="emphasis"><em>Bangcle</em></span> and <span class="emphasis"><em>Ijiami</em></span> provide complete packing services. <span class="emphasis"><em>Bangcle</em></span> supplies a group of standard classes, but still shows encapsulated BroadcastReceiver and Content Provider components from the original classes.dex. <span class="emphasis"><em>Ijiami</em></span> goes a step further, by replacing the original dex file with its own standard NativeApplication and SuperApplication classes.</p>
</div>
<div class="sect2" lang="en">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a id="id2478755" class="chapter"></a>2.3 Supplemental investigation of Ijiami</h3>
</div>
</div>
</div>
<p>Sections 2.1 and 2.2 covered the APK file structure and the code tree of the packed application. However, several key technical issues need to be addressed in order to understand the unpacking process of <span class="emphasis"><em>Ijiami</em></span>:</p>
<p><span class="bold"><strong>Technical issue (1):</strong></span> How to make sure the unpacked code is executed initially.</p>
<p>The key to this technical issue is the <span class="emphasis"><em>Android</em></span> Application class. The <span class="emphasis"><em>Android</em></span> reference page [<span class="citation"><a href="#citation.2">2</a></span>] describes the Application class as the ‘Base class for those who need to maintain global application state. You can provide your own implementation by specifying its name in your AndroidManifest.xml’s &lt;application&gt; tag, which will cause that class to be instantiated for you when the process for your application/package is created.’ As the context of the entire application, the Application class will be the starting point when executing the program.</p>
<p>When expanding the code tree and taking a detailed view of two standard classes in <span class="emphasis"><em>Ijiami</em></span>, we found that the SuperApplication class extends Application class accounts to load and run the NativeApplication class, while the NativeApplication class is responsible for loading the native library binary for unpacking (shown in Listing 1).</p>
<pre class="programlisting">package com.shell;

import android.app.Application;

public class NativeApplication
{
  static
  {
    System.loadLibrary(“exec”);
    System.loadLibrary(“execmain”);
  }
  
  public static native boolean load(Application paramApplication, String paramString);  
  public static native boolean run(Application paramApplication, String paramString);  
  public static native boolean runAll(Application paramApplication, String paramString);
}

package com.shell;

import android.app.Application;
import android.content.Context;

public class SuperApplication
  extends Application
{
  protected void attachBaseContext(Context paramContext)
  {
    super.attachBaseContext(paramContext);
    NativeApplication.load(this, “com.sophos.andrpacker”);
  }
  
  public void onCreate()
  {
    NativeApplication.run(this, “android.app.Application”);
    super.onCreate();
  }
}

<span class="bold"><strong>Listing 1: NativeApplication and SuperApplication classes of Ijiami.</strong></span>
</pre>
<p><span class="bold"><strong>Technical issue (2):</strong></span> Where and how to unpack the original dex file, then how to dynamically load the unpacked code.</p>
<p>Lib/armeabi/libexec.so supplies comprehensive code to implement the above functionalities. First, it recognizes and interprets files in the META-INF directory to verify the signature and integrity of encrypted data by using the RSA and AES crypto algorithms, then it decrypts assets/ijiami.dat to the original classes.dex in memory. The library binary then uses the DexClassLoader class to realize the dynamic loading of the unpacked code.</p>
<p><span class="bold"><strong>Technical issue (3):</strong></span> Stop runtime anti-debug by modifying the dex header.</p>
<p>When analysing the <span class="emphasis"><em>Ijiami</em></span> packing service, we discovered that it has the ability to change the original dex header. The modification starts at the beginning of the dex file and runs to 0x28 bytes, filling it with random values. As a result, it can stop runtime debugging to trace the original dex file in memory by searching for DEX_FILE_MAGIC ‘dex\n035\0’. However, this also causes problems for the Volatility project (described in section 4) in locating the original dex file in memory.</p>
</div>
<div class="sect2" lang="en">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a id="id3069953" class="chapter"></a>2.4 Additional studies on Bangcle</h3>
</div>
</div>
</div>
<p>This subsection explains the anti-tamper, anti-decompiler, anti runtime injection and anti-debug capabilities of <span class="emphasis"><em>Bangcle</em></span>, based on detailed reverse engineering analysis. Let us begin with the entrypoint of the source code – the ApplicationWrapper class, as shown in Listing 2.</p>
<pre class="programlisting">  public void onCreate()
  {
    super.onCreate();
    if (Util.getCustomClassLoader() == null) {
      Util.runAll(this);
    }
    String str = FirstApplication;
    try
    {
      this.cl = ((DexClassLoader)Util.getCustomClassLoader());
      realApplication = (Application)getClassLoader().loadClass(str).newInstance();
      if (realApplication != null)
      {
        localACall = ACall.getACall();
        localACall.at1(realApplication, getBaseContext());
        localACall.set2(this, realApplication, this.cl, getBaseContext());
      }
}...

<span class="bold"><strong>Listing 2: Entrypoint of Bangcle source code – ApplicationWrapper class.</strong></span>
</pre>
<p>The Util class in the entrypoint of the source code implements the main functionalities in the Applications layer of the Android architecture. The functionalities include verifying the integrity of classes.dex, checking if the architecture is x86 or ARM, copying the required native library binaries, encrypted classes.jar, and JNI binary to specific locations, creating child processes, then using the MyClassLoader class to load the decrypted classes.jar at runtime. Listing 3 displays the core method in the Util class.</p>
<pre class="programlisting">  public static void runAll(Context paramContext)
  {
    x86Ctx = paramContext;
    doCheck(paramContext); // checking integrity of classes.dex
    checkUpdate(paramContext);
    try
    {
      File localFile = new File(“/data/data/” + paramContext.getPackageName() + “/.cache/”);
      if (!localFile.exists()) {
        localFile.mkdir();
      }
      checkX86(paramContext); // If it is x86 platform, copy related library binary
      CopyBinaryFile(paramContext); // copy encrypted classes.jar and JNI binary 
      createChildProcess(paramContext); // create child processes
      tryDo(paramContext);
      runPkg(paramContext, paramContext.getPackageName()); // call MyClassLoader
      return;
}...

<span class="bold"><strong>Listing 3: Runall method of Bangcle’s Util class.</strong></span>
</pre>
<p>Meanwhile, <span class="emphasis"><em>Bangcle</em></span>’s ACall class deals with binaries such as libsecexe.so in the Android Libraries layer. However, it is impossible to establish a relationship between the Java source code and the libsecexe.so binary since almost all function names in the binary are encrypted (shown in Figure 3). The standard format of the method name should follow the following template: Java_package_class_method, namely the Java package name, class name, then function method name [<span class="citation"><a href="#citation.3">3</a></span>].</p>
<div class="figure"><a id="figure.3"></a>
<div class="mediaobject"><img src="/uploads/images/figures/2016/01/Yu-3.jpg" alt="The function names in the ACall class and libsecexe.so." /></div>
<p class="title"><strong>Figure 3. The function names in the ACall class and libsecexe.so.</strong></p>
</div>
<p>(Click <a href="/uploads/images/figures/2016/01/Yu-3-large.png" target="_top">here</a> to view a larger version of Figure 3.)</p>
<p>When it is running, the <span class="emphasis"><em>Bangcle</em></span>-packed application creates three processes (shown in <a href="#figure.4">Figure 4</a>) instead of only one process in the original application. Moreover, the three processes in <span class="emphasis"><em>Bangcle</em></span> are performing ptrace (process trace) so that debugging tools like <span class="emphasis"><em>gdb</em></span> have trouble connecting them. This is because ptrace in <span class="emphasis"><em>Android</em></span> limits only one process to observe and examine the trace’s memory and registers. Figure 4 also demonstrates the evidence of mutual tracing in three <span class="emphasis"><em>Bangcle</em></span> processes [<span class="citation"><a href="#citation.4">4</a></span>], [<span class="citation"><a href="#citation.5">5</a></span>].</p>
<div class="figure"><a id="figure.4"></a>
<div class="mediaobject"><img src="/uploads/images/figures/2016/01/Yu-4.jpg" alt="Three processes from a single Bangcle application as well as the anti-ptrace log." /></div>
<p class="title"><strong>Figure 4. Three processes from a single Bangcle application as well as the anti-ptrace log.</strong></p>
</div>
<p>Finally, we summarize <span class="emphasis"><em>Bangcle</em></span>’s capabilities:</p>
<div class="itemizedlist">
<ul type="disc">
<li>
<p>Anti-temper – the Util class provides hash checking to check the integrity of classes.dex.</p>
</li>
<li>
<p>Anti-decompiler – the Util class also decrypts classes.jar in memory and employs MyClassLoader to load the decrypted .jar file at runtime.</p>
</li>
<li>
<p>Anti-runtime injection – it is impossible to establish a relationship between the ACall class and libse-cexe.so due to the encryption.</p>
</li>
<li>
<p>Anti-debug – <span class="emphasis"><em>Bangcle</em></span> employs an anti-ptrace technique to prevent analysis by debugging tools.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1" lang="en">
<div class="titlepage">
<div>
<div>
<h2 class="title"><a id="id4352352" class="chapter"></a>3. Facing the challenges</h2>
</div>
</div>
</div>
<p>Section 2 demonstrated the packing and unpacking processes of <span class="emphasis"><em>ApkProtect</em></span>, <span class="emphasis"><em>Bangcle</em></span> and <span class="emphasis"><em>Ijiami</em></span> on the basis of comparing the file structures, analysing decompiled resource code, and runtime debugging. This section will introduce and describe the challenges for security researchers posed by the above packing services.</p>
<div class="sect2" lang="en">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a id="id4318110" class="chapter"></a>3.1 Explosive growth of packed malware</h3>
</div>
</div>
</div>
<p><a href="#figure.5">Figure 5</a> shows a trend line of <span class="emphasis"><em>Android</em></span> malicious applications based on three packers. Since September 2013, there has been a dramatic increase in the number of malicious applications packed using <span class="emphasis"><em>Bangcle</em></span> – <span class="emphasis"><em>Bangcle</em></span>’s scanning engines have not been able to achieve the developers’ aim of avoiding packing malware applications. Meanwhile, the use of <span class="emphasis"><em>ApkProtect</em></span> and <span class="emphasis"><em>Ijiami</em></span> has seen a continuous and steady growth over the last five months.</p>
<div class="figure"><a id="figure.5"></a>
<div class="mediaobject"><img src="/uploads/images/figures/2016/01/Yu-5.jpg" alt="The trend lines of Android malicious applications based on three packers." /></div>
<p class="title"><strong>Figure 5. The trend lines of Android malicious applications based on three packers.</strong></p>
</div>
</div>
<div class="sect2" lang="en">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a id="id3776407" class="chapter"></a>3.2 Ineffective reverse engineering (RE) tools</h3>
</div>
</div>
</div>
<p>Existing RE tools are not able to disassemble the payloads of packed samples due to the anti-decompiler characteristics of packers. The payloads of packed samples are encrypted by advanced cryptographies such as AES and DES. The packing process and the crypto key generation are classified as confidential. Moreover, the algorithms are embedded in the native binaries to make RE much more difficult.</p>
</div>
<div class="sect2" lang="en">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a id="id2933960" class="chapter"></a>3.3 Failure of dynamic analysis systems</h3>
</div>
</div>
</div>
<p>Dynamic analysis systems such as <span class="emphasis"><em>DroidBox</em></span>, <span class="emphasis"><em>Apk-Analyzer.net </em></span>and <span class="emphasis"><em>Ijinshan.com</em></span> [<span class="citation"><a href="#citation.6">6</a></span>] are unable to offer successful dynamic results for packed <span class="emphasis"><em>Android</em></span> applications. The systems either provide very basic static information or simply crash when attempting to start applications. <a href="#figure.6">Figure 6</a> shows screenshots of the running behaviours of the test application in <span class="emphasis"><em>DroidBox</em></span> and <span class="emphasis"><em>Ijinshan.com</em></span>.</p>
<div class="figure"><a id="figure.6"></a>
<div class="mediaobject"><img src="/uploads/images/figures/2016/01/Yu-6.jpg" alt="Neither DroidBox nor Ijinshan.com is able to offer dynamic analysis." /></div>
<p class="title"><strong>Figure 6. Neither DroidBox nor Ijinshan.com is able to offer dynamic analysis.</strong></p>
</div>
<p>(Click <a href="/uploads/images/figures/2016/01/Yu-6-large.png" target="_top">here</a> to view a larger version of Figure 6.)</p>
</div>
<div class="sect2" lang="en">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a id="id4597997" class="chapter"></a>3.4 Runtime anti-debug</h3>
</div>
</div>
</div>
<p>So far, <span class="emphasis"><em>Android</em></span> packers present two runtime anti-debug challenges: <span class="emphasis"><em>Ijiami</em></span> is capable of modifying the dex header to prevent memory searching, while <span class="emphasis"><em>Bangcle</em></span> prevents anti debugging by creating three interactive processes. Both cause serious consequences for existing debugging tools – even the Volatility project (see section 4).</p>
</div>
<div class="sect2" lang="en">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a id="id2779032" class="chapter"></a>3.5 Difficult to detect by security solutions</h3>
</div>
</div>
</div>
<p>By taking advantage of <span class="emphasis"><em>Android</em></span> packers, cybercriminals are able to change an application’s dex file as a means of thwarting signature-based scanners. Even if an anti virus scanner has a database that includes the signature of the original APK sample, it will be unable to detect the newly packed version of the malware. <a href="#figure.7">Figure 7</a> displays a recent SMSSend example, showing the original malware as well as the version packed with <span class="emphasis"><em>ApkProtect</em></span>.</p>
<div class="figure"><a id="figure.7"></a>
<div class="mediaobject"><img src="/uploads/images/figures/2016/01/Yu-7.jpg" alt="An original SMSSend sample plus its packed version (packed with ApkProtect)." /></div>
<p class="title"><strong>Figure 7. An original SMSSend sample plus its packed version (packed with ApkProtect).</strong></p>
</div>
<p>(Click <a href="/uploads/images/figures/2016/01/Yu-7-large.jpg" target="_top">here</a> to view a larger version of Figure 7.)</p>
</div>
</div>
<div class="sect1" lang="en">
<div class="titlepage">
<div>
<div>
<h2 class="title"><a id="id4028367" class="chapter"></a>4. Building solutions</h2>
</div>
</div>
</div>
<p>This part is split into three sections: section 4.1 will outline the required environment and steps for memory acquisition. Section 4.2 will concentrate on the Volatility framework and describe a new plug-in for analysing acquired memory and locating the offset of the unpacked dex file in the memory map. Finally, section 4.3, will demonstrate the usage of the Volatility plug-in to locate the offset of the unpacked dex file, write selected memory mapping to disk and patch back the dex header if required.</p>
<div class="sect2" lang="en">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a id="id4908150" class="chapter"></a>4.1 Memory acquisition from Android emulator</h3>
</div>
</div>
</div>
<p>In order to perform memory analysis, a copy of the RAM from a target <span class="emphasis"><em>Android</em></span> device or emulator is required. As <span class="emphasis"><em>Android</em></span> is based on <span class="emphasis"><em>Linux</em></span>, a newly developed Loadable Kernel Module (LKM), named LiME (<span class="emphasis"><em>Linux</em></span> Memory Extractor) [<span class="citation"><a href="#citation.7">7</a></span>] is used for acquisition of volatile memory. It is necessary to cross compile LiME for use on an <span class="emphasis"><em>Android</em></span> device/emulator. Additional steps are required for the prerequisites and environment setting. These steps, which can be found in several online wiki documents ([<span class="citation"><a href="#citation.8">8</a></span>], [<span class="citation"><a href="#citation.9">9</a></span>], [<span class="citation"><a href="#citation.10">10</a></span>], [<span class="citation"><a href="#citation.11">11</a></span>]) consist of:</p>
<div class="orderedlist"><ol type="1">
<li>
<p>Initialize an <span class="emphasis"><em>Android</em></span> build environment including path and required package on either a <span class="emphasis"><em>Linux</em></span> or <span class="emphasis"><em>OSX</em></span> system.</p>
</li>
<li>
<p>Download the <span class="emphasis"><em>Android</em></span> SDK and NDK.</p>
</li>
<li>
<p>Download the <span class="emphasis"><em>Android</em></span> kernel source code.</p>
</li>
<li>
<p>Cross compile the kernel.</p>
</li>
<li>
<p>Create AVD then emulate the custom kernel with the AVD.</p>
</li>
<li>
<p>Download and cross compile LiME.</p>
</li>
<li>
<p>Load LiME on the <span class="emphasis"><em>Android</em></span> device/emulator.</p>
</li>
<li>
<p>Acquire memory.</p>
</li>
</ol></div>
</div>
<div class="sect2" lang="en">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a id="id3854456" class="chapter"></a>4.2 Performing memory forensics with Volatility plug-ins</h3>
</div>
</div>
</div>
<p>Volatility [<span class="citation"><a href="#citation.12">12</a></span>] is a single and cohesive framework for memory analysis of <span class="emphasis"><em>Windows</em></span>, <span class="emphasis"><em>Linux</em></span>, <span class="emphasis"><em>Mac</em></span> and <span class="emphasis"><em>Android</em></span> systems. It is open source, Python based, extensible and has scriptable APIs. Volatility also pre-ships with a list of very useful plug-ins for <span class="emphasis"><em>Android</em></span> including Linux_pslist (which gathers active tasks by walking the task_struct), Linux_proc_maps (which gathers process maps for <span class="emphasis"><em>Linux</em></span>), and Linux_dump_map (which writes selected process memory mappings to disk). However, a working <span class="emphasis"><em>Android</em></span> Volatility profile with specific module.dwarf and the System.map is required to use these plug-ins. The configuration can be found in [<span class="citation"><a href="#citation.12">12</a></span>].</p>
<p>The following is the core part of this paper: a Volatility plug-in is designed to locate the offset of the original dex file in the memory map via a specific process ID (PID). The relevant code of the plug-in is shown in Listing 4.</p>
<pre class="programlisting">1 signatures = {
2  ’map_header’ : ’rule map_header { \
3     strings: \
4     $hex = {00 00 ?? ?? 01 00 00 00 00 00 00 00 01 00 ?? ?? ?? ?? ?? ?? 70 00 00 00 02 00} \
5     condition: $hex }’
6 }
7 
8 class apk_packer_find_dex(linux_common.AbstractLinuxCommand):
9  ”””Gather information about the dex Dump in Memory running in the system”””
10
11  def __init__(self, config, *args, **kwargs):
12   linux_common.AbstractLinuxCommand.__init__(self, config, *args, **kwargs)  
13   self._config.add_option(’PID’, short_option=’p’, default=None,
14    help=’Operate on a specific Android application Process ID’,
15    action=’store’, type=’str’)
16
17  def calculate(self):
18   ””” Required: Runs YARA search to find hits ””” 
19   rules = yara.compile(sources = signatures)
20
21   proc_maps = linux_proc_maps.linux_proc_maps(self._config).calculate()
22
23   for task, vma in proc_maps:
24    if not vma.vm_file:
25     if vma.vm_start &lt;= task.mm.start_brk and vma.vm_end &gt;= task.mm.brk:
26      continue
27     elif vma.vm_start &lt;= task.mm.start_stack and vma.vm_end &gt;= task.mm.start_stack:
28      continue
29     elif vma.vm_end - vma.vm_start &gt; 0x1000:
30      proc_as = task.get_process_address_space()
31      maxlen = vma.vm_end - vma.vm_start
32   
33      data = proc_as.zread(vma.vm_start, maxlen - 1)
34
35      if data:
36       for match in rules.match(data = data):
37        for moffset, _name, _value in match.strings:
38         (usize,) = struct.unpack(‘I’, data[moffset - 4 : moffset])
39 
40         i = 0
41         offset = moffset
42         while  i &lt; usize:
43
44          (maptype,) = struct.unpack(’H’, data[offset: offset+2])
45          (mapoffset,) = struct.unpack(’I’, data[offset+8: offset+12])
46 
47          if maptype == 0x1000:
48           yield task, vma, moffset - 4 - mapoffset, moffset
49           break
50          i += 1
51          offset += 12 
52
53  def render_text(self, outfd, data):
54   self.table_header(outfd, [(”Task”, ”10”), 
55           (”VM Start”, ”[addrpad]”), 
56           (”VM End”, ”[addrpad]”), 
57           (”Dex Offset”, ”[addr]”),          
58           (”Map Offset”, ”[addr]”)]) 
59   for (task, vma, offset, moffset) in data:
60     self.table_row(outfd, task.pid, vma.vm_start, vma.vm_end, offset, moffset - 4)

<span class="bold"><strong>Listing 4: Apk_packer_find_dex plug-in.</strong></span>
</pre>
<p>In Volatility, each plug-in is able to call another one. Additionally, the results from one plug-in can be provided for further processing in other plug-ins [<span class="citation"><a href="#citation.13">13</a></span>]. A plug-in usually consists of a class name and three standard functions [<span class="citation"><a href="#citation.14">14</a></span>]: __init__(), calculate() and render_text(). In Listing 4, the class name is apk_packer_find_dex. The first function of the __init__() plug-in is the constructor of the class object with the capability of calling the super class constructor and/or defining additional command line options. The apk_packer_find_dex plug-in specifies a parameter name (--PID), a short option (-p) and help description.</p>
<p>The calculate() function loads an address space, accesses and parses the data, then prepares the output. Line 21 in the calculate() function in Listing 4 gets a process mapping list from a specific PID (the same as /proc/$PID/maps). The list contains the mapped memory regions and the access permissions of the heap, stack, and dynamically linked libraries. Lines 23–33 are a loop to read data from anonymous mappings because the original dex file should be unpacked in one of them. Lines 36-37 utilize a YARA rule to locate the offset of the map_list in the dex file. The YARA rule is declared in variable signatures based on the map_list structure shown in <a href="#figure.8">Figure 8</a>.</p>
<div class="figure"><a id="figure.8"></a>
<div class="mediaobject"><img src="/uploads/images/figures/2016/01/Yu-table-3.jpg" alt="The header_item and map_list structure in a dex file, and their relationship." /></div>
<p class="title"><strong>Figure 8. The header_item and map_list structure in a dex file, and their relationship.</strong></p>
</div>
<p>(Click <a href="/uploads/images/figures/2016/01/Yu-8-large.jpg" target="_top">here</a> to view a larger version of Figure 8.)</p>
<p>As discussed in section 2.3, the dex header is modified by the <span class="emphasis"><em>Ijiami</em></span> packer, the map_list structure is thus a credible alternative for finding the original dex file. We know that the map_items in a map_list should start from TYPE_HEADER_ITEM, then TYPE_STRING_ID_ITEM followed by TYPE_TYPE_ID_ITEM. We also know that the size (count of the number of items) of HEADER_ITEM must be one, while HEADER_ITEM_OFFSET should begin from 0x0000, and header_size is always 0x70. All of these findings help to assign a specific search string for $hex in the YARA rule.</p>
<p>Once the offset of the map_list has been discovered, lines 41–47 in the calculate() function keep scanning map_list to find TYPE_MAP_LIST and the corresponding map_list_offset. Line 48 uses yield to generate a list of outputs including virtual memory start and end offsets as well as the dex and map_list offset in the memory. Finally, the render_text() function accepts the outputs and prints the data on screen in a standard fashion.</p>
</div>
<div class="sect2" lang="en">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a id="id3524410" class="chapter"></a>4.3 From memory dump to ‘original’ dex file</h3>
</div>
</div>
</div>
<p>We use quotation marks around the word ‘original’ because we can’t acquire the raw dex file: <span class="emphasis"><em>Bangcle</em></span> inserts its monitoring code into the original dex file before packing, and it is difficult to restore the first 0x28 bytes in the header section for an <span class="emphasis"><em>Ijiami</em></span> dex file. However, the closest to the original dex file can be acquired using the following four steps:</p>
<div class="orderedlist"><ol type="1">
<li>
<p>Get the process ID of the target application by using Linux_pslist.</p>
</li>
<li>
<p>Locate the header and map_list offset of the unpacked dex file by looking at the apk_packer_find_dex plug-in output (shown in Listing 5).</p>
<pre class="programlisting">$ python vol.py --profile=LinuxGolfish-2_6_29ARM -f lime.dump apk_packer_find_dex -p 876

Volatility Foundation Volatility Framework 2.3.1
Task       VM Start   VM End     dex Offset Map Offset
---------- ---------- ---------- ---------- ----------
       876 0x4c10d000 0x4c1a4000       0x28    0x8ffc8

<span class="bold"><strong>Listing 5: Example output of the apk_packer_find_dex plug-in.</strong></span>
</pre>
</li>
<li>
<p>Dump a memory range specified by the Linux_dump_map plug-in to disk.</p>
</li>
<li>
<p>Patch DEX_FILE_MAGIC back if required, for instance, into an unpacked dex file from <span class="emphasis"><em>Ijiami</em></span> packer.</p>
</li>
</ol></div>
<div class="figure"><a id="figure.9"></a>
<div class="mediaobject"><img src="/uploads/images/figures/2016/01/Yu-8.jpg" alt="Patch DEX_FILE_MAGIC back into an unpacked Ijiami dex file." /></div>
<p class="title"><strong>Figure 9. Patch DEX_FILE_MAGIC back into an unpacked Ijiami dex file.</strong></p>
</div>
<p>(Click <a href="/uploads/images/figures/2016/01/Yu-9-large.png" target="_top">here</a> to view a larger version of Figure 9.)</p>
</div>
</div>
<div class="sect1" lang="en">
<div class="titlepage">
<div>
<div>
<h2 class="title"><a id="id4321941" class="chapter"></a>5. Conclusions</h2>
</div>
</div>
</div>
<p>This paper provides an overview of the most popular <span class="emphasis"><em>Android</em></span> packers: <span class="emphasis"><em>Bangcle</em></span>, <span class="emphasis"><em>ApkProtect</em></span> and <span class="emphasis"><em>Ijiami</em></span>. It demonstrates the working principles of each in terms of static and dynamic analysis. Moreover, the paper describes some particular characteristics including dex header modification by <span class="emphasis"><em>Ijiami</em></span> as well as the anti-ptrace technique employed by <span class="emphasis"><em>Bangcle</em></span>.</p>
<p>A series of challenges have been discussed in section 3. These challenges include the explosive increase of <span class="emphasis"><em>Android</em></span> malicious applications packed by three different packers, the inefficiency of existing reversing engineering tools, the failure of dynamic analysing systems, the anti-debug features, and the obstruction of generic detection.</p>
<p>Section 4 delivered an outline of the Volatility project. The Volatility project provides an open and complete framework for memory extraction and investigation. Volatility supports memory dump from <span class="emphasis"><em>Windows</em></span>, <span class="emphasis"><em>OSX</em></span>, <span class="emphasis"><em>Linux</em></span> and <span class="emphasis"><em>Android</em></span>, and supplies plenty of plug-ins for memory analysis. However, a customized plug-in named apk_packer_find_dex has been created to explore the process map list and locate the offset of the unpacked dex file in memory. We also demonstrated the acquisition of the original dex file with DEX_FILE_MAGIC patching.</p>
<p>In conclusion, the paper provides a practical solution for acquiring the original dex payload for a packed <span class="emphasis"><em>Android</em></span> application. However, developing an efficient and effective detection solution for packed malware is a complicated task as it is impossible to unpack a piece of packed malware and detect the payload in the real world. On account of the background and information given in section 2, a detection solution can be based on a combination of AndroidManifest.xml, the size of the encrypted payload, resource files, and resources.arsc.</p>
<div class="bibliography">
<div class="titlepage">
<div>
<div>
<h3 class="title"><a id="id4811135" class="chapter"></a>Bibliography</h3>
</div>
</div>
</div>
<div class="bibliomixed"><a id="citation.1"></a>
<p class="bibliomixed">[1] Guo, F.; Ferrie, P. Chiueh, T.-C. A Study of the Packer Problem and Its Solutions. Symantec Research Laboratories, Pages 98 – 115, ISBN: 978-3-540-87402-7.</p>
</div>
<div class="bibliomixed"><a id="citation.2"></a>
<p class="bibliomixed">[2] <span class="bibliosource"><a href="https://developer.android.com/reference/android/app/Application.html" target="_blank">http://developer.android.com/reference/android/app/Application.html</a></span>.</p>
</div>
<div class="bibliomixed"><a id="citation.3"></a>
<p class="bibliomixed">[3] Android on x86: Java Native Interface and the Android Native Development Kit. <span class="bibliosource"><a href="http://www.drdobbs.com/architecture-and-design/android-on-x86-java-native-interface-and/240166271" target="_blank">http://www.drdobbs.com/architecture-and-design/android-on-x86-java-native-interface-and/240166271</a></span>.</p>
</div>
<div class="bibliomixed"><a id="citation.4"></a>
<p class="bibliomixed">[4] <span class="bibliosource"><a href="http://blog.csdn.net/pxb1988/article/details/17167795" target="_blank">http://blog.csdn.net/pxb1988/article/details/17167795</a></span>.</p>
</div>
<div class="bibliomixed"><a id="citation.5"></a>
<p class="bibliomixed">[5] <span class="bibliosource"><a href="http://blog.csdn.net/androidsecurity/article/details/8892635" target="_blank">http://blog.csdn.net/androidsecurity/article/details/8892635</a></span>.</p>
</div>
<div class="bibliomixed"><a id="citation.6"></a>
<p class="bibliomixed">[6] <span class="bibliosource"><a href="http://fireeye.ijinshan.com/analyse.html?md5=ac8a2656fb865a854bfc906cec744947&amp;sha1=f8435c1485963994b778d28c36ad34613369f26b&amp;type=1" target="_blank">http://fireeye.ijinshan.com/analyse.html?md5=ac8a2656fb865a854bfc906cec744947&amp;sha1=f8435c1485963994b778d28c36ad34613369f26b&amp;type=1</a></span>.</p>
</div>
<div class="bibliomixed"><a id="citation.7"></a>
<p class="bibliomixed">[7] LiME – Linux Memory Extractor. <span class="bibliosource"><a href="https://code.google.com/p/lime-forensics/" target="_blank">https://code.google.com/p/lime-forensics/</a></span>.</p>
</div>
<div class="bibliomixed"><a id="citation.8"></a>
<p class="bibliomixed">[8] <span class="bibliosource"><a href="https://code.google.com/p/volatility/wiki/AndroidMemoryForensics" target="_blank">https://code.google.com/p/volatility/wiki/AndroidMemoryForensics</a></span>.</p>
</div>
<div class="bibliomixed"><a id="citation.9"></a>
<p class="bibliomixed">[9] Getting Started: Building Android From Source. <span class="bibliosource"><a href="http://xda-university.com/as-a-developer/getting-started-building-android-from-source" target="_blank">http://xda-university.com/as-a-developer/getting-started-building-android-from-source</a></span>.</p>
</div>
<div class="bibliomixed"><a id="citation.10"></a>
<p class="bibliomixed">[10] <span class="bibliosource"><a href="https://source.android.com/source/building.html" target="_blank">http://source.android.com/source/building.html</a></span>.</p>
</div>
<div class="bibliomixed"><a id="citation.11"></a>
<p class="bibliomixed">[11] <span class="bibliosource"><a href="https://lime-forensics.googlecode.com/files/LiME_Documentation_1.1.pdf" target="_blank">https://lime-forensics.googlecode.com/files/LiME_Documentation_1.1.pdf</a></span>.</p>
</div>
<div class="bibliomixed"><a id="citation.12"></a>
<p class="bibliomixed">[12] Volatility – An advanced memory forensics framework. <span class="bibliosource"><a href="https://code.google.com/p/volatility/" target="_blank">https://code.google.com/p/volatility/</a></span>.</p>
</div>
<div class="bibliomixed"><a id="citation.13"></a>
<p class="bibliomixed">[13] Macht, H. Live Memory Forensics on Android with Volatility. <span class="bibliosource"><a href="https://www1.informatik.uni-erlangen.de/filepool/publications/Live_Memory_Forensics_on_Android_with_Volatility.pdf" target="_blank">https://www1.informatik.uni-erlangen.de/filepool/publications/Live_Memory_Forensics_on_Android_with_Volatility.pdf</a></span>.</p>
</div>
<div class="bibliomixed"><a id="citation.14"></a>
<p class="bibliomixed">[14] <span class="bibliosource"><a href="https://code.google.com/p/volatility/wiki/Vol20PluginInterface" target="_blank">https://code.google.com/p/volatility/wiki/Vol20PluginInterface</a></span>.</p>
</div>
</div>
</div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-Yu.pdf" target="_blank"><img class="ccm-image-block responsive" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" src="/uploads/images/buttons/pdf-download-button.jpg" alt="" width="262" height="45" border="0" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: Android packers: facing the challenges, building solutions&url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-android-packers-facing-challenges-building-solutions"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2016/01/paper-android-packers-facing-challenges-building-solutions'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-android-packers-facing-challenges-building-solutions&title=VB2014 paper: Android packers: facing the challenges, building solutions"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2016/01/paper-android-packers-facing-challenges-building-solutions&t=VB2014 paper: Android packers: facing the challenges, building solutions"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2016/01/paper-android-packers-facing-challenges-building-solutions"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>