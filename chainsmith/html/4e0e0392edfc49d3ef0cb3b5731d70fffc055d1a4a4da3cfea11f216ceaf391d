<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2018 paper: Unpacking the packed unpacker: reversing an Android anti-analysis native library</title>
<meta name="description" content="This paper analyses one of the most interesting anti-analysis native libraries we’ve seen in the Android ecosystem. No previous references to this library have been found.The anti-analysis library is named ‘WeddingCake’ because it has lots of layers." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 6292;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-vb2018-paper-unpacking-packed-unpacker-reversing-android-anti-analysis-native-library"></a>VB2018 paper: Unpacking the packed unpacker: reversing an Android anti-analysis native library</h1>
<h3><a class="chapter" name="h3-maddie-stone"></a>Maddie Stone</h3>
<p>Google, USA</p>
<p><em>Copyright © 2018 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-13567" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-13567" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-introduction">Introduction</a><br /> <a class="toc-level3" href="#h3-introduction-java-native-interface-jni">Introduction to the Java Native Interface (JNI)</a><br /> <a class="toc-level2" href="#h2-characteristics-anti-analysis-library">Characteristics of the anti-analysis library</a><br /> <a class="toc-level3" href="#h3-naming">Naming</a><br /> <a class="toc-level3" href="#h3-variants">Variants</a><br /> <a class="toc-level3" href="#h3-key-signatures-elf">Key signatures of the ELF</a><br /> <a class="toc-level2" href="#h2-analysing-library">Analysing the library</a><br /> <a class="toc-level3" href="#h3-place-decryption">In-place decryption</a><br /> <a class="toc-level4" href="#h4-generating-seed-arrays">Generating the seed arrays</a><br /> <a class="toc-level4" href="#h4-decryption-algorithm">Decryption algorithm</a><br /> <a class="toc-level4" href="#h4-decrypted-contents">Decrypted contents</a><br /> <a class="toc-level3" href="#h3-run-time-environment-checks">Run-time environment checks</a><br /> <a class="toc-level4" href="#h4-system-properties-checks">System properties checks</a><br /> <a class="toc-level4" href="#h4-verifying-cpu-architecture">Verifying CPU architecture</a><br /> <a class="toc-level4" href="#h4-identifying-if-monkey-running">Identifying if Monkey is running</a><br /> <a class="toc-level4" href="#h4-current-process-not-hooked-xposed-framework">Current process not hooked with Xposed Framework</a><br /> <a class="toc-level2" href="#h2-conclusion">Conclusion</a><br /> <a class="toc-level2" href="#h2-references">References</a><br /> <a class="toc-level2" href="#h2-appendix-idapython-decryption-script">Appendix: IDAPython decryption script</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>Malware authors implement many different techniques to frustrate analysis and make reverse engineering malware more difficult. Many of these anti-analysis and anti-reverse engineering techniques attempt to send a reverse engineer down a different investigation path or require them to invest large amounts of time reversing simple code. This talk analyses one of the most interesting anti-analysis native libraries we've seen in the <em>Android</em> ecosystem. No previous references to this library have been found. We've named this anti-analysis library 'WeddingCake' because it has lots of layers.</p>
<p>This paper covers four techniques the malware authors used in the WeddingCake anti-analysis library to prevent reverse engineering. These include: manipulating the Java Native Interface, writing complex algorithms for simple functionality, encryption, and run-time environment checks. This paper discusses the steps and the process required to proceed through the anti-analysis traps and expose what the developers are trying to hide.</p>
<p> </p>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>To protect their code, authors may implement obfuscation, encryption, and anti-analysis techniques. There are both legitimate and malicious reasons why developers may want to prevent analysis and reverse engineering of their code. Legitimate developers may want to protect their intellectual property, while malicious developers may want to prevent detection. This paper details an <em>Android</em> anti-analysis native library used by multiple malware families to prevent analysis and detection of their malicious behaviours. Some variants of the Chamois malware family [<a href="#ref1">1</a>] use this anti-analysis library, which has been seen in over 5,000 unique <em>Android </em>APKs. The APK with SHA256 hash <span class="monospace">e8e1bc048ef123a9757a9b27d1bf53c092352a26bdbf9fbdc10109415b5cadac</span> is used as the sample for this paper.</p>
<p> </p>
<h3><a class="chapter" name="h3-introduction-java-native-interface-jni"></a>Introduction to the Java Native Interface (JNI)</h3>
<p>The sample <em>Android</em> application includes a native library to hide the contents and functionality of native code. The Java Native Interface (JNI) allows developers to define Java native methods that run in other languages, such as C or C++, in the application. This allows bytecode and native code to interface with each other. In <em>Android</em>, the Native Development Kit (NDK) is a toolset that permits developers to write C and C++ code for their <em>Android</em> apps [<a href="#ref2">2</a>]. Using the NDK, <em>Android</em> developers can include native shared libraries in their <em>Android</em> applications. These native shared libraries are <span class="monospace">.so</span> files, a shared object library in the ELF format. In this paper, the terms 'native library', 'ELF', and '<span class="monospace">.so</span> file' are used interchangeably to refer to the anti-analysis library. The anti-analysis library that is detailed in this paper is one of these <em>Android</em> native shared libraries.</p>
<p>The bytecode in the <span class="monospace">.dex</span> file of the <em>Android</em> application defines the native methods [<a href="#ref3">3</a>]. These native method definitions pair with a subroutine in the shared library. Before the native method can be run from the Java code, the Java code must call <span class="monospace">System.loadLibrary</span> or <span class="monospace">System.load</span> on the shared library (<span class="monospace">.so</span> file). When the Java code calls one of the two load methods, the <span class="monospace">JNI_OnLoad()</span> function is called from the shared library. The shared library needs to export the <span class="monospace">JNI_OnLoad()</span> function.</p>
<p>In order to run a native method from Java, the native method must be 'registered', meaning that the JNI knows how to pair the Java method definition with the correct function in the native library. This can be done either by leveraging the <span class="monospace">RegisterNatives</span> JNI function or through 'discovery' based on the function names and function signatures matching in both Java and the <span class="monospace">.so</span> [<a href="#ref4">4</a>]. For either method, a string of the Java method name is required for the JNI to know which native function to call.</p>
<p> </p>
<h2><a class="chapter" name="h2-characteristics-anti-analysis-library"></a>Characteristics of the anti-analysis library</h2>
<p>WeddingCake, the anti-analysis library discussed in this paper, is an <em>Android</em> native library, an ELF file, included in the APK. In the sample, the anti-analysis library is named <span class="monospace">lib/armeabi/libdxarq.so</span>. The name of the anti-analysis library differs in each APK, as explained in the following section.</p>
<p> </p>
<h3><a class="chapter" name="h3-naming"></a>Naming</h3>
<p>Within the <span class="monospace">classes.dex</span> of the APK, there is a package of classes whose whole name is random characters. For the sample described in this paper, the class name is <span class="monospace">ses.fdkxxcr.udayjfrgxp.ojoyqmosj.xien.xmdowmbkdgfgk</span>. This class declares three native methods: <span class="monospace">quaqrd</span>, <span class="monospace">ixkjwu</span>, and <span class="monospace">vxeg</span>.</p>
<p>The native library discussed in this paper is usually named <span class="monospace">lib[3-8 random lowercase characters].so</span>. However, we've encountered a few samples whose name does not match this convention. All APK samples that include WeddingCake use different random characters for their class and function names. It is likely that WeddingCake provides tooling that generates new random names each time it is compiled.</p>
<p> </p>
<h3><a class="chapter" name="h3-variants"></a>Variants</h3>
<p>The most common version of the library is a 32-bit 'generic' ARM (<span class="monospace">armeabi</span>) ELF, but I've also identified 32-bit ARMv7 (<span class="monospace">armeabi-v7a</span>), ARM64 (<span class="monospace">arm64-v8a</span>), and x86 (<span class="monospace">x86</span>) versions of the library. All of the variants include the same functionality. If not otherwise specified, this paper focuses on the 32-bit 'generic' ARM implementation of WeddingCake because this is the most common variant.</p>
<p>As an example, the APK with SHA256 hash <span class="monospace">92e80872cfd49f33c63993d52290afd2e87cbef5db4adff1bfa97297340f23e0</span>, which is different from the one analysed in this paper, includes three variants of the anti-analysis library: generic ARM, ARMv7, and x86.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Anti-analysis lib file paths</strong></td>
<td><strong>Anti-analysis library 'type'</strong></td>
</tr>
<tr>
<td class="monospace">lib/armeabi/librxovdx.so</td>
<td>32-bit 'generic' ARM</td>
</tr>
<tr>
<td><span class="monospace">lib/armeabi-v7a/librxovdx.so</span></td>
<td>32-bit ARMv7</td>
</tr>
<tr>
<td><span class="monospace">lib/x86/libaojjp.so</span></td>
<td>x86</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 1: Anti-analysis lib paths in <span class="monospace">92e80872cfd49f33c63993d52290afd2e87cbef5db4adff1bfa97297340f23e0</span>.</p>
<p> </p>
<h3><a class="chapter" name="h3-key-signatures-elf"></a>Key signatures of the ELF</h3>
<p>There are some signatures that help identify ELF files as a WeddingCake anti-analysis library:</p>
<ul>
<li>Two strings under the <span class="monospace">.comment</span> section in the ELF:</li>
</ul>
<p style="padding-left: 60px;">- <span class="monospace">Android clang version 3.8.275480 (based on LLVM 3.8.275480)</span></p>
<p style="padding-left: 60px;">- <span class="monospace">GCC: (GNU) 4.9.x 20150123 (prerelease)</span></p>
<ul>
<li>The native function names defined in the APK do not exist in the shared library</li>
</ul>
<ul>
<li>For the 32-bit generic ARM version of the library, when loaded into <em>IDA Pro</em>, <span class="monospace">JNI_OnLoad</span> (Figure 1) is an exported function name, but does not exist in 'functions' because there are 12 bytes (three words) that are defined as data, which inhibit <em>IDA</em>'s ability to identify the function. The bytes defined as data are always at offsets <span class="monospace">+0x24</span>, <span class="monospace">+0x28</span>, and <span class="monospace">+0x44</span> from the beginning of the <span class="monospace">JNI_OnLoad</span> function.</li>
</ul>
<p><a class="zoom-img" title="Figure 1: JNI_OnLoad in IDAPro." href="/files/9315/4461/3627/anti-analysis-library-fig1.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/08809a85cc0dcd7c9c478f2651b1534a_f3280.png" alt="anti-analysis-library-fig1.png" width="840" height="697" /></a></p>
<p class="centered-caption">Figure 1: <span class="monospace">JNI_OnLoad</span> in IDAPro.</p>
<p> </p>
<h2><a class="chapter" name="h2-analysing-library"></a>Analysing the library</h2>
<p>The<span class="monospace"> JNI_OnLoad</span> function is the starting point for analysis because there are no references to the native methods that were defined in the APK. For this sample, the following three methods were defined as native methods in <span class="monospace">ses.fdkxxcr.udayjfrgxp.ojoyqmosj.xien.xmdowmbkdgfgk</span>:</p>
<pre class="prettyprint">public static native String quaqrd(int p0);<br />public native Object ixkjwu(Object[] p0);<br />public native int vxeg(Object[] p0);</pre>
<p>There are no instances of these strings existing in the native library being analysed. As described in the 'Introduction to JNI' section, in order to call a native function from the Java code in the APK, the ELF must know how to match a Java method (as listed previously) to the native function in the ELF file. This is done by registering the native function using <span class="monospace">RegisterNatives()</span> and the <span class="monospace">JNINativeMethod</span> struct [<a href="#ref5">5</a>]. We would normally expect to see the Java native method name and its associated function signature (<span class="monospace">[Ljava/lang/Object;)I</span>) as strings in the ELF file. Since we do not, the ELF file is probably using an anti-analysis technique.</p>
<p>Because <span class="monospace">JNI_OnLoad</span> must be executed prior to the application calling one of its defined native methods, I began analysis in the <span class="monospace">JNI_OnLoad</span> function.</p>
<p>In the sample, the <span class="monospace">JNI_OnLoad()</span> function ends with many calls to the same function. This is shown in Figure 2. Each call takes a different block of memory as its argument, which is often a signal of decryption. In this sample, the subroutine at 0x2F30 (<span class="monospace">sub_2F30</span>) is the in-place decryption function.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/634501af3c800cc4b09ffad13e5ea1a0_f3281.png" alt="anti-analysis-library-fig2.png" width="760" height="1044" /><span class="centered-caption">Figure 2: Calls to the decryption subroutine in <span class="monospace">JNI_OnLoad</span> in IDA Pro.</span></p>
<p> </p>
<h3><a class="chapter" name="h3-place-decryption"></a>In-place decryption</h3>
<p>To obscure its functionality, this library's contents are decrypted dynamically when the library is loaded. The decryption algorithm used in this library was not matched to a known encryption/decryption algorithm. The decryption function, found at sub_2F30 in this sample, takes the following arguments:</p>
<ul>
<li><span class="monospace">encrypted_array</span>: Pointer to the encrypted byte array (bytes to be decrypted)</li>
<li><span class="monospace">length</span>: Length of the encrypted byte array</li>
<li><span class="monospace">word_seed_array</span>: Word (each value in array is 4 bytes) seed array</li>
<li><span class="monospace">byte_seed_array</span>: Byte (each value in array is 1 byte) seed array</li>
</ul>
<pre class="prettyprint">sub_2F30(Byte[] encrypted_array, int length, Word[] word_seed_array, Byte[] byte_seed_array)</pre>
<p> </p>
<h4><a class="chapter" name="h4-generating-seed-arrays"></a>Generating the seed arrays</h4>
<p>The decryption function takes two seed arrays as arguments each time it is called: the word seed array and the byte seed array. These two arrays are generated once, beginning at 0x1B58 in this sample, prior to the first call to the decryption function. The byte array is created first; in this sample, it's generated at 0x1B58. The word array is created immediately after the byte array initialization at 0x1BD0. The word seed array and byte seed array are the same for every call to the decryption function within the ELF and are never modified.</p>
<p>The author of this code obfuscated the generation of the seed arrays. The <em>IDA</em> decompiled code for the generation of the two arrays, <span class="monospace">byte_seed_array</span> and <span class="monospace">word_seed_array</span>, is shown in Listing 1.</p>
<pre class="prettyprint">byte_seed_array = malloc(0x100u);<br />index = 0;<br />  do<br />  {<br />     byte_seed_array[index] = index;<br />     ++index;<br />  }<br />  while ( 256 != index );<br />  v4 = 0x2C09;<br />  curr_count = 256;<br />  copy_byte_seed_array = byte_seed_array<br />  do<br />  {<br />     v6 = 0x41C64E6D * v4 + 0x3039;<br />     v7 = v6;<br />     v8 = copy_byte_seed_array[v6];<br />     v9 = 0x41C64E6D * (v6 &amp; 0x7FFFFFFF) + 0x3039;<br />     copy_byte_seed_array[v7] = copy_byte_seed_array[v9];<br />     copy_byte_seed_array[v9] = v8;<br />     --curr_count;<br />     v4 = v9 &amp; 0x7FFFFFFF;<br />  }<br />  while ( curr_count );<br />  word_seed_array = malloc(0x400u);<br />  index = 0;<br />  do<br />  {<br />     word_seed_array[byte_seed_array[index]] = index;<br />     ++index;<br />  }<br />  while ( 256 != index );</pre>
<p class="centered-caption">Listing 1: The IDA decompiled code for the generation of the two arrays, <span class="monospace">byte_seed_array</span> and <span class="monospace">word_seed_array</span>.</p>
<p>These algorithms output the <span class="monospace">byte_seed_array</span> and <span class="monospace">word_seed_array</span> shown in Listing 2. The author of this code tried to frustrate the reverse engineering process of this library by writing complex algorithms which would require more investment of effort, time and skill to reverse engineer. Using a complex algorithm to accomplish a simple task is a common anti-reverse engineering technique.</p>
<pre class="prettyprint">byte_seed_array =<br />[0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff]<br />word_seed_array =<br />[0x0000000, 0x0000001, 0x0000002, 0x0000003, 0x0000004, 0x0000005, 0x0000006, 0x0000007, 0x0000008, 0x0000009, 0x000000a, 0x000000b, 0x000000c, 0x000000d, 0x000000e, 0x000000f, 0x00000010, 0x00000011, 0x00000012, 0x00000013, 0x00000014, 0x00000015, 0x00000016, 0x00000017, 0x00000018, 0x00000019, 0x0000001a, 0x0000001b, 0x0000001c, 0x0000001d, 0x0000001e, 0x0000001f, 0x00000020, 0x00000021, 0x00000022, 0x00000023, 0x00000024, 0x00000025, 0x00000026, 0x00000027, 0x00000028, 0x00000029, 0x0000002a, 0x0000002b, 0x0000002c, 0x0000002d, 0x0000002e, 0x0000002f, 0x00000030, 0x00000031, 0x00000032, 0x00000033, 0x00000034, 0x00000035, 0x00000036, 0x00000037, 0x00000038, 0x00000039, 0x0000003a, 0x0000003b, 0x0000003c, 0x0000003d, 0x0000003e, 0x0000003f, 0x00000040, 0x00000041, 0x00000042, 0x00000043, 0x00000044, 0x00000045, 0x00000046, 0x00000047, 0x00000048, 0x00000049, 0x0000004a, 0x0000004b, 0x0000004c, 0x0000004d, 0x0000004e, 0x0000004f, 0x00000050, 0x00000051, 0x00000052, 0x00000053, 0x00000054, 0x00000055, 0x00000056, 0x00000057, 0x00000058, 0x00000059, 0x0000005a, 0x0000005b, 0x0000005c, 0x0000005d, 0x0000005e, 0x0000005f, 0x00000060, 0x00000061, 0x00000062, 0x00000063, 0x00000064, 0x00000065, 0x00000066, 0x00000067, 0x00000068, 0x00000069, 0x0000006a, 0x0000006b, 0x0000006c, 0x0000006d, 0x0000006e, 0x0000006f, 0x00000070, 0x00000071, 0x00000072, 0x00000073, 0x00000074, 0x00000075, 0x00000076, 0x00000077, 0x00000078, 0x00000079, 0x0000007a, 0x0000007b, 0x0000007c, 0x0000007d, 0x0000007e, 0x0000007f, 0x00000080, 0x00000081, 0x00000082, 0x00000083, 0x00000084, 0x00000085, 0x00000086, 0x00000087, 0x00000088, 0x00000089, 0x0000008a, 0x0000008b, 0x0000008c, 0x0000008d, 0x0000008e, 0x0000008f, 0x00000090, 0x00000091, 0x00000092, 0x00000093, 0x00000094, 0x00000095, 0x00000096, 0x00000097, 0x00000098, 0x00000099, 0x0000009a, 0x0000009b, 0x0000009c, 0x0000009d, 0x0000009e, 0x0000009f, 0x000000a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7, 0x000000a8, 0x000000a9, 0x000000aa, 0x000000ab, 0x000000ac, 0x000000ad, 0x000000ae, 0x000000af, 0x000000b0, 0x000000b1, 0x000000b2, 0x000000b3, 0x000000b4, 0x000000b5, 0x000000b6, 0x000000b7, 0x000000b8, 0x000000b9, 0x000000ba, 0x000000bb, 0x000000bc, 0x000000bd, 0x000000be, 0x000000bf, 0x000000c0, 0x000000c1, 0x000000c2, 0x000000c3, 0x000000c4, 0x000000c5, 0x000000c6, 0x000000c7, 0x000000c8, 0x000000c9, 0x000000ca, 0x000000cb, 0x000000cc, 0x000000cd, 0x000000ce, 0x000000cf, 0x000000d0, 0x000000d1, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x000000d7, 0x000000d8, 0x000000d9, 0x000000da, 0x000000db, 0x000000dc, 0x000000dd, 0x000000de, 0x000000df, 0x000000e0, 0x000000e1, 0x000000e2, 0x000000e3, 0x000000e4, 0x000000e5, 0x000000e6, 0x000000e7, 0x000000e8, 0x000000e9, 0x000000ea, 0x000000eb, 0x000000ec, 0x000000ed, 0x000000ee, 0x000000ef, 0x000000f0, 0x000000f1, 0x000000f2, 0x000000f3, 0x000000f4, 0x000000f5, 0x000000f6, 0x000000f7, 0x000000f8, 0x000000f9, 0x000000fa, 0x000000fb, 0x000000fc, 0x000000fd, 0x000000fe, 0x000000ff]</pre>
<p class="centered-caption">Listing 2: The <span class="monospace">byte_seed_array</span> and <span class="monospace">word_seed_array</span>.</p>
<p>Knowing that these arrays are static, an analyst could dump the arrays any time post-initialization, thus bypassing this anti‑reversing technique.</p>
<p> </p>
<h4><a class="chapter" name="h4-decryption-algorithm"></a>Decryption algorithm</h4>
<p>The overall framework of the in-place decryption process is:</p>
<ol>
<li>Decryption function is called on an array of encrypted bytes.</li>
<li>Decryption is performed.</li>
<li>Encrypted bytes are overwritten by the decryption bytes.</li>
</ol>
<p>This process is repeated in <span class="monospace">JNI_OnLoad()</span> for each encrypted array. I did not identify the decryption algorithm used in the library as being a variation of a known encryption algorithm. The Python code I wrote to implement the decryption algorithm is shown in Listing 3.</p>
<pre class="prettyprint">def decrypt(encrypted_bytes, length, byte_seed_array, word_seed_array):<br />   if (encrypted_bytes is None):<br />       print ( "encrypted_bytes is null. -- Exiting ")<br />       return<br />   if (length &lt; 1):<br />       print ( "encrypted_bytes len &lt; 1 -- Exiting ")<br />       return<br />   reg_4 = ~(0x00000004)<br />   reg_0 = 4<br />   reg_2 = 0<br />   reg_5 = 0<br />   do_loop = True<br /># Address 0x2F58 in Sample e8e1bc048ef123a9757a9b27d1bf53c092352a26bdbf9fbdc10109415b5cadac<br />   while (do_loop):<br />       reg_6 = length + reg_0<br />       reg_6 = encrypted_bytes[reg_6 + reg_4]<br />       if (reg_6 &amp; 0x80):<br />           if (reg_5 &gt; 3):<br />               return<br />           reg_6 = reg_6 &amp; 0x7F<br />           reg_2 = reg_2 &amp; 0xFF<br />           reg_2 = reg_2 &lt;&lt; 7<br />           reg_2 = reg_2 | reg_6<br />           reg_0 = reg_0 + reg_4 + 4<br />           reg_3 = length + reg_0 + reg_4 + 2<br />           reg_5 += 1<br />           if (reg_3 &amp; 0x80000000 or reg_3 &lt;= 1):<br />               return<br />       else:<br />           do_loop = False<br />           reg_5 = 0xF0 &amp; reg_6<br />           reg_3 = length + reg_0 + reg_4<br />           reg_1 = reg_3 + 1<br />           if (reg_0 == 0 and reg_5 != 0):<br />              return<br /># Address 0x2F9A in Sample e8e1bc048ef123a9757a9b27d1bf53c092352a26bdbf9fbdc10109415b5cadac<br />   reg_5 = reg_1<br />   reg_1 = (reg_2 &lt;&lt; 7) + reg_6<br />   byte_FF = 0xFF<br />   reg_1 = reg_1 &amp; byte_FF<br />   last_byte = reg_1<br />   if (reg_5 == 0 or reg_5 &amp; 0x80000000 or last_byte == 0 or signed_ble(reg_3, last_byte)):<br />       return<br />   reg_1 = (reg_4 + 4)<br />   reg_1 = (reg_1 * last_byte)<br />   reg_1 += length<br />   crazy_num = reg_1 + reg_0 + reg_4<br />   if (crazy_num &lt; 1):<br />       return<br />   new_index = reg_1 + reg_0<br />   reg_5 = 0<br /># Address 0x2FD8 in Sample e8e1bc048ef123a9757a9b27d1bf53c092352a26bdbf9fbdc10109415b5cadac<br />while (1):<br />   byte = encrypted_bytes[reg_5]<br />       reg_0 = byte &lt;&lt; 2<br />       reg_6 = word_seed_array[byte]<br />       reg_0 = 0xFF - reg_6<br />       if (not reg_6 &amp; 0x80000000):<br />           reg_6 = reg_0<br />       reg_0 = reg_5<br />       reg_1 = reg_0 % last_byte<br />       reg_0 = new_index + reg_1<br />       reg_0 = encrypted_bytes[(reg_0 + reg_4) &amp; 0xFF]<br />       reg_1 = word_seed_array[reg_0]<br />       reg_2 = reg_1 | reg_6<br />       index_reg_0 = reg_5<br />       if (reg_2 &amp; 0x80000000):<br />           break<br /># Address 0x3012 in Sample e8e1bc048ef123a9757a9b27d1bf53c092352a26bdbf9fbdc10109415b5cadac<br />       reg_1 = reg_6 + reg_1 + reg_5<br />       reg_2 = arith_shift_rt(reg_1, 0x1F)<br />       reg_2 = reg_2 &gt;&gt; 0x18<br />       reg_2 = reg_2 &amp; ~0x000000FF<br />       reg_1 -= reg_2<br />       reg_1 = 0x000000FF - reg_1<br />       reg_1 = byte_seed_array[reg_1 &amp; 0xFF]<br />       encrypted_bytes[index_reg_0] = reg_1 &amp; 0xFF<br />       reg_5 += 1<br />       if (reg_5 &gt;= crazy_num):<br />           break<br />   print "*********** FINISHED DECRYPT *************** "</pre>
<p class="centered-caption">Listing 3: Python code to implement the decryption algorithm.</p>
<p>I wrote an IDAPython script to statically decrypt the contents of the ELF so that reverse engineering could continue. This script and description is provided in the Appendix.</p>
<p> </p>
<h4><a class="chapter" name="h4-decrypted-contents"></a>Decrypted contents</h4>
<p>Each of the encrypted arrays decrypts to a string. Before-and-after samples of the encrypted bytes and the decrypted bytes at 0x9480 are shown in Figures 3 and 4. The bytes were decrypted using the IDAPython decryption script described in the Appendix.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/c3bc4a51ae4624d3ab4622ddb4aac12c_f3282.png" alt="anti-analysis-library-fig3.png" width="680" height="745" /><span class="centered-caption">Figure 3: Encrypted bytes in ELF beginning at 0x9480.</span></p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/32184cbdc4d1a9240e50b6c7c94293b3_f3283.png" alt="anti-analysis-library-fig4.png" width="680" height="823" /><span class="centered-caption">Figure 4: Decrypted bytes in ELF beginning at 0x9480.</span></p>
<p>Within the decrypted strings of the ELF, we see the names of the native functions defined in the Java code at the following locations in the ELF file:</p>
<ul>
<li><span class="monospace">quaqrd</span> (0xA107)</li>
<li><span class="monospace">vxeg</span> (0x936E)</li>
<li><span class="monospace">ixkjwu</span> (0x9330)</li>
</ul>
<p>Now that these strings are decrypted, we can see which subroutines in the ELF are called when the native function is called from the APK. Table 2 shows the native functions defined for this sample in the anti-analysis ELF.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Native function name</strong></td>
<td><strong>Native subroutine address</strong></td>
<td><strong>Signature</strong></td>
<td><strong>Human-readable signature</strong></td>
</tr>
<tr>
<td class="monospace"><span style="color: #008000;">vxeg</span></td>
<td>0x30D4</td>
<td class="monospace"><span style="color: #008000;">([Ljava/lang/Object;)I</span></td>
<td class="monospace"><span style="color: #8a2be2;">public native int</span> vxeg(<span style="color: #4169e1;">Object</span>[] p0);</td>
</tr>
<tr>
<td class="monospace"><span style="color: #008000;"><span style="color: #008000;">quaqrd</span></span></td>
<td>0x4814</td>
<td class="monospace"><span style="color: #008000;">(I)Ljava/lang/String;</span></td>
<td class="monospace"><span style="color: #8a2be2;">public static native</span> <span style="color: #4169e1;">String</span> quaqrd(<span style="color: #8a2be2;">int</span> p0);</td>
</tr>
<tr>
<td class="monospace"><span style="color: #008000;">ixkjwu</span></td>
<td>----</td>
<td class="monospace"><span style="color: #008000;">([Ljava/lang/Object;)Ljava/lang/Object;</span></td>
<td><span class="monospace"><span style="color: #8a2be2;">public native</span> <span style="color: #4169e1;">Object</span> ixkjwu(<span style="color: #4169e1;">Object</span>[] p0);</span></td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 2: Native functions in the anti-analysis library.</p>
<p>The Java-declared native method that has the same signature as <span class="monospace">vxeg</span> has in this sample (<span class="monospace">([Ljava/lang/Object;)I</span>), is responsible for doing all of the run-time environment checks described in the next section. In each sample, this function is named differently due to the automatic obfuscator run on the Java code, but it always has this signature. For clarity, the rest of this paper will refer to the native subroutine that performs all of the run-time checks as <span class="monospace">vxeg()</span>.</p>
<p>The Java-declared native method that has the same signature as <span class="monospace">quarqrd</span> has in this sample (<span class="monospace">(I)Ljava/lang/String;</span>) returns a string from an array. The argument to the method is the index into the array and the address of the array is hard coded into the native subroutine. The strings in this array are decrypted by the decryption function described above.</p>
<p>Via static reverse engineering, I did not determine the native subroutine corresponding to the <span class="monospace">ixkjwu</span> method. In the Java code, the <span class="monospace">ixkjwu</span> method is only called in one place and is only called based on the value of a variable. It is possible that this method is never called based on the value of that variable and thus the <span class="monospace">ixkjwu</span> native subroutine does not exist.</p>
<p><span class="monospace">vxeg</span> and <span class="monospace">quarqrd</span> are registered with the <span class="monospace">RegisterNatives</span> JNI method at 0x2B60 in this sample. The array at 0x9048 is used for this call to <span class="monospace">RegisterNatives</span>. It includes the native method name, signature, and pointer to the native subroutine as shown below. The code at 0x2B42, prior to the call to <span class="monospace">RegisterNatives</span>, shows that this subroutine can support the following array entries for three native methods instead of the two that exist in this instance.</p>
<pre class="prettyprint">0x9048: Pointer to vxeg string<br />0x904C: Pointer to vxeg signature string<br />0x9050: 0x30D5 (Pointer to subroutine)<br />0x9054: Pointer to quarqrd string<br />0x9058: Pointer to quarqrd signature string<br />0x905C: 0x4815 (Pointer to subroutine)</pre>
<p>The rest of this paper will focus on the functionality found in <span class="monospace">vxeg()</span> because it contains the anti-analysis run-time environment checks.</p>
<p> </p>
<h3><a class="chapter" name="h3-run-time-environment-checks"></a>Run-time environment checks</h3>
<p>The Java classes associated with WeddingCake in the APK define three native functions in the Java code. In this sample <span class="monospace">vxeg()</span>performs all of the run-time environment checks prior to performing the hidden behaviour. This function performs more than 45 different run-time checks. They can be grouped as follows:</p>
<ul>
<li>Checking system properties</li>
<li>Verifying CPU architecture by reading the <span class="monospace">/system/lib/libc.so</span> ELF header</li>
<li>Looking for Monkey [<a href="#ref6">6</a>] by iterating through all PIDs in <span class="monospace">/proc/</span></li>
<li>Ensuring the Xposed Framework [<a href="#ref7">7</a>] is not mapped to the application process memory</li>
</ul>
<p>If the library detects any of the conditions outlined in this section, the Linux <span class="monospace">exit(0)</span> function is called, which terminates the <em>Android</em> application [<a href="#ref8">8</a>]. The application stops running if any of the 45+ environment checks fail.</p>
<p> </p>
<h4><a class="chapter" name="h4-system-properties-checks"></a>System properties checks</h4>
<p>The <span class="monospace">vxeg()</span> subroutine begins by checking the values of the listed system properties. The <span class="monospace">system_property_get()</span> function is used to get the value of each system property checked. The code checks if the value matches the listed value for each property. If any one of the system properties matches the listed value, the <em>Android</em> application exits. Table 3 lists each of the system properties that is checked and the value which will trigger an exit.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>System property checked</strong></td>
<td><strong>Value(s) that trigger exit</strong></td>
</tr>
<tr>
<td class="monospace">init.svc.gce_fs_monitor</td>
<td class="monospace">running</td>
</tr>
<tr>
<td class="monospace">init.svc.dumpeventlog</td>
<td class="monospace">running</td>
</tr>
<tr>
<td class="monospace">init.svc.dumpipclog</td>
<td class="monospace">running</td>
</tr>
<tr>
<td class="monospace">init.svc.dumplogcat</td>
<td class="monospace">running</td>
</tr>
<tr>
<td class="monospace">init.svc.dumplogcat-efs</td>
<td class="monospace">running</td>
</tr>
<tr>
<td class="monospace">init.svc.filemon</td>
<td class="monospace">running</td>
</tr>
<tr>
<td class="monospace">ro.hardware.virtual_device</td>
<td class="monospace">gce_x86</td>
</tr>
<tr>
<td class="monospace">ro.kernel.androidboot.hardware</td>
<td class="monospace">gce_x86</td>
</tr>
<tr>
<td class="monospace">ro.hardware.virtual_device</td>
<td class="monospace">gce_x86</td>
</tr>
<tr>
<td class="monospace">ro.boot.hardware</td>
<td class="monospace">gce_x86</td>
</tr>
<tr>
<td class="monospace">ro.boot.selinux</td>
<td class="monospace">disable</td>
</tr>
<tr>
<td class="monospace">ro.factorytest</td>
<td class="monospace">true, 1, y</td>
</tr>
<tr>
<td class="monospace">ro.kernel.android.checkjni</td>
<td class="monospace">true, 1, y</td>
</tr>
<tr>
<td class="monospace">ro.hardware.virtual_device</td>
<td class="monospace">vbox86</td>
</tr>
<tr>
<td class="monospace">ro.kernel.androidboot.hardware</td>
<td class="monospace">vbox86</td>
</tr>
<tr>
<td class="monospace">ro.hardware</td>
<td class="monospace">vbox86</td>
</tr>
<tr>
<td class="monospace">ro.boot.hardware</td>
<td class="monospace">vbox86</td>
</tr>
<tr>
<td class="monospace">ro.build.product</td>
<td class="monospace">google_sdk</td>
</tr>
<tr>
<td class="monospace">ro.build.product</td>
<td class="monospace">Droid4x</td>
</tr>
<tr>
<td class="monospace">ro.build.product</td>
<td class="monospace">sdk_x86</td>
</tr>
<tr>
<td class="monospace">ro.build.product</td>
<td class="monospace">sdk_google</td>
</tr>
<tr>
<td class="monospace">ro.build.product</td>
<td class="monospace">vbox86p</td>
</tr>
<tr>
<td class="monospace">ro.product.manufacturer</td>
<td class="monospace">Genymotion</td>
</tr>
<tr>
<td class="monospace">ro.product.brand</td>
<td class="monospace">generic</td>
</tr>
<tr>
<td class="monospace">ro.product.brand</td>
<td class="monospace">generic_x86</td>
</tr>
<tr>
<td class="monospace">ro.product.device</td>
<td class="monospace">generic</td>
</tr>
<tr>
<td class="monospace">ro.product.device</td>
<td class="monospace">generic_x86</td>
</tr>
<tr>
<td class="monospace">ro.product.device</td>
<td class="monospace">generic_x86_x64</td>
</tr>
<tr>
<td class="monospace">ro.product.device</td>
<td class="monospace">Droid4x</td>
</tr>
<tr>
<td class="monospace">ro.product.device</td>
<td class="monospace">vbox86p</td>
</tr>
<tr>
<td class="monospace">ro.kernel.androidboot.hardware</td>
<td class="monospace">goldfish</td>
</tr>
<tr>
<td class="monospace">ro.hardware</td>
<td class="monospace">goldfish</td>
</tr>
<tr>
<td class="monospace">ro.boot.hardware</td>
<td class="monospace">goldfish</td>
</tr>
<tr>
<td class="monospace">ro.hardware.audio.primary</td>
<td class="monospace">goldfish</td>
</tr>
<tr>
<td class="monospace">ro.kernel.androidboot.hardware</td>
<td class="monospace">ranchu</td>
</tr>
<tr>
<td class="monospace">ro.hardware</td>
<td class="monospace">ranchu</td>
</tr>
<tr>
<td class="monospace">ro.boot.hardware</td>
<td class="monospace">ranchu</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 3: System properties checked and the values that trigger exit.</p>
<p>The anti-analysis library also checks if any of five system properties exist on the device using the system_property_find() function. If any of these five system properties exist, the Android application exits. The properties that the library searches for are listed in Table 4. The presence of any of these properties usually indicates that the application is running on an emulator.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>If any of these system properties exist, the application exits</strong></td>
</tr>
<tr class="monospace">
<td>init.svc.vbox86-setup</td>
</tr>
<tr class="monospace">
<td>qemu.sf.fake_camera</td>
</tr>
<tr class="monospace">
<td>init.svc.goldfish-logcat</td>
</tr>
<tr class="monospace">
<td>init.svc.goldfish-setup</td>
</tr>
<tr class="monospace">
<td>init.svc.qemud</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 4: System properties checked for using <span class="monospace">system_property_find</span>.</p>
<p> </p>
<h4><a class="chapter" name="h4-verifying-cpu-architecture"></a>Verifying CPU architecture</h4>
<p>If the library has passed all of the system property checks, it (still in <span class="monospace">vxeg()</span>) then verifies the CPU architecture of the phone on which the application is running. In order to verify the CPU architecture, the code reads 0x14 bytes from the beginning of the <span class="monospace">/system/lib/libc.so</span> file on the device. If the read is successful, the code looks at the bytes corresponding to the <span class="monospace">e_ident[EI_CLASS]</span> and <span class="monospace">e_machine</span> fields of the ELF header. <span class="monospace">e_ident[EI_CLASS]</span> is set to 1 to signal a 32-bit architecture and set to 2 to signal a 64-bit architecture. <span class="monospace">e_machine</span> is a 2-byte value identifying the instruction set architecture. The code will only continue if one of the following statements is true. Otherwise, the application exits:</p>
<ul>
<li><span class="monospace">e_ident[EI_CLASS] == 0x01</span> (32-bit) AND <span class="monospace">e_machine == 0x0028</span> (ARM)</li>
<li><span class="monospace">e_ident[EI_CLASS] == 0x02</span> (64-bit) AND <span class="monospace">e_machine == 0x00B7</span> (AArch64)</li>
<li>Unable to read 0x14 bytes from <span class="monospace">/system/lib/libc.so</span></li>
</ul>
<p>The anti-analysis library is verifying that it is only running on a 32-bit ARM or 64-bit AArch64 CPU. Even when the library is running its x86 variant, it still checks whether the CPU is ARM and will exit if the detected CPU is not ARM or AArch64.</p>
<p> </p>
<h4><a class="chapter" name="h4-identifying-if-monkey-running"></a>Identifying if Monkey is running</h4>
<p>After the CPU architecture check, the library attempts to iterate through every PID directory under <span class="monospace">/proc/</span> to determine if <span class="monospace">com.android.commands.monkey</span> is running [<a href="#ref6">6</a>]. The code does this by opening the <span class="monospace">/proc/</span> directory and iterating through each entry in the directory, completing the following steps. If any step fails, execution moves to the next entry in the directory.</p>
<ol>
<li>Verifies <span class="monospace">d_type</span> from the dirent <span class="monospace">struct == DT_DIR</span></li>
<li>Verifies that <span class="monospace">d_name</span> from the dirent struct is an integer</li>
<li>Constructs path strings: <span class="monospace">/proc/[pid]/comm</span> and <span class="monospace">/proc/[pid]/cmdline</span> where [pid] is the directory entry name that has been verified to be an integer</li>
<li>Attempts to read 0x7F bytes from both <span class="monospace">comm</span> and <span class="monospace">cmdline</span> constructed path strings</li>
<li>Stores the data from whichever attempt (<span class="monospace">comm</span> or <span class="monospace">cmdline</span>) reads more data</li>
<li>Checks if the read data equals <span class="monospace">com.android.commands.monkey</span>, meaning that package is running.</li>
</ol>
<p>If the check for <span class="monospace">Monkey</span> is ever true, <span class="monospace">exit()</span> is called, closing the <em>Android</em> application (see Figure 5).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/4230b89e23446c4adc02564a2814be05_f3284.png" alt="anti-analysis-library-fig5.png" width="720" height="311" /><span class="centered-caption">Figure 5: Check for Monkey.</span></p>
<p>This method of iterating through each directory in <span class="monospace">/proc/</span> doesn't work in <em>Android</em> N and above [<a href="#ref9">9</a>]. If the library is not able to iterate through the directories in <span class="monospace">/proc/</span> it will continue executing.</p>
<p> </p>
<h4><a class="chapter" name="h4-current-process-not-hooked-xposed-framework"></a>Current process not hooked with Xposed Framework</h4>
<p>The Xposed Framework allows hooking and modifying of the system code running on an <em>Android</em> device. This library ensures that the Xposed Framework is not currently mapped to the application process. If Xposed is running the process, it could allow for some of the anti-analysis techniques to be bypassed. If the library did not check for Xposed and allowed the application to continue running when Xposed was hooked to the process, an analyst could instrument the application to bypass the anti-analysis hurdles and uncover the functionality that the application author is trying to hide.</p>
<p>In order to determine if Xposed is running, the library, checks if 'LIBXPOSED_ART.SO' or 'XPOSEDBRIDGE.JAR' exist in <span class="monospace">/proc/self/maps</span>. If either of them exist, then the application exits. <span class="monospace">/proc/self/maps</span> lists all of the memory pages mapped into the process memory. Therefore, you can see any libraries loaded by the process by reading its contents.</p>
<p>To further verify that the Xposed Framework is not running, the code will check if either of the following two classes can be found using the <span class="monospace">JNI FindClass()</span> function [<a href="#ref10">10</a>]. If either class can be found, the application exits:</p>
<ul>
<li>XC_MethodHook: <span class="monospace">de/robv/android/xposed/XC_MethodHook</span></li>
<li>XposedBridge: <span class="monospace">de/robv/android/xposed/XposedBridge</span></li>
</ul>
<p>If the Xposed library is not found, the execution continues to the behaviour that the anti-analysis techniques were trying to protect. This behaviour continues in <span class="monospace">vxeg()</span>. In the case of this sample, it was another unpacker that previously had not been protected by the anti-reversing and analysis techniques described in this paper.</p>
<p> </p>
<h2><a class="chapter" name="h2-conclusion"></a>Conclusion</h2>
<p>This paper detailed the operation of WeddingCake, an <em>Android</em> native library using extensive anti-analysis techniques. Unlike previous packers' anti-emulation techniques, this library is written in C/C++ and runs as a native shared library in the application. Once an analyst understands the anti-reversing and anti-analysis techniques utilized by an application, they can more effectively understand its logic and analyse and detect potentially malicious behaviours.</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] Detecting and eliminating Chamois, a fraud botnet on Android. Android Developers Blog. <a href="https://android-developers.googleblog.com/2017/03/detecting-and-eliminating-chamois-fraud.html" target="_blank">https://android-developers.googleblog.com/2017/03/detecting-and-eliminating-chamois-fraud.html</a>.</p>
<p><a class=" anchor" name="ref2"></a>[2] Getting Started with the NDK. Android. <a href="https://developer.android.com/ndk/guides/" target="_blank">https://developer.android.com/ndk/guides/</a>.</p>
<p><a class=" anchor" name="ref3"></a>[3] JNI Tips. Android. <a href="https://developer.android.com/training/articles/perf-jni" target="_blank">https://developer.android.com/training/articles/perf-jni</a>.</p>
<p><a class=" anchor" name="ref4"></a>[4] Resolving Native Method Names. Oracle. <a href="https://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/design.html#wp615" target="_blank">https://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/design.html#wp615</a>.</p>
<p><a class=" anchor" name="ref5"></a>[5] Registering Native Methods in JNI. Stack Overflow. <a href="https://stackoverflow.com/questions/1010645/what-does-the-registernatives-method-do" target="_blank">https://stackoverflow.com/questions/1010645/what-does-the-registernatives-method-do</a>.</p>
<p><a class=" anchor" name="ref6"></a>[6] UI/Application Exerciser Monkey. Android. <a href="https://developer.android.com/studio/test/monkey" target="_blank">https://developer.android.com/studio/test/monkey</a>.</p>
<p><a class=" anchor" name="ref7"></a>[7] Xposed General. XDA Developers Forum. <a href="https://forum.xda-developers.com/xposed" target="_blank">https://forum.xda-developers.com/xposed</a>.</p>
<p><a class=" anchor" name="ref8"></a>[8] EXIT(3). Linux Programmer's Manual. <a href="http://man7.org/linux/man-pages/man3/exit.3.html" target="_blank">http://man7.org/linux/man-pages/man3/exit.3.html</a>.</p>
<p><a class=" anchor" name="ref9"></a>[9] Enable hidepid=2 on /proc. Android Open Source Project. <a href="https://android-review.googlesource.com/c/platform/system/core/+/181345" target="_blank">https://android-review.googlesource.com/c/platform/system/core/+/181345</a>.</p>
<p><a class=" anchor" name="ref10"></a>[10] JNI Functions. Oracle. <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#FindClass" target="_blank">https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#FindClass</a>.</p>
<p> </p>
<h2><a class="chapter" name="h2-appendix-idapython-decryption-script"></a>Appendix: IDAPython decryption script</h2>
<p>In order to decrypt the encrypted portions of the ELF library that the decryption function (for this sample, <span class="monospace">sub_2F30</span>) decrypts during execution, I created an IDAPython script to decrypt the ELF. This script is available at http://www.github.com/maddiestone/IDAPythonEmbeddedToolkit/Android/WeddingCake_decrypt.py. By decrypting the ELF with the IDAPython script, it's possible to statically reverse engineer the behaviour that is hidden under the anti-analysis techniques. This section describes how the script works.</p>
<p>The IDAPython decryption script runs the following steps:</p>
<ol>
<li>Identifies the <span class="monospace">JNI_OnLoad</span> function</li>
<li>Identifies the decryption function</li>
<li>Generates the two seed arrays</li>
<li>Identifies memory addresses of arrays to be decrypted and their lengths from the ELF loaded into the<em> IDA Pro</em> database</li>
<li>Decrypts each array and writes the decrypted bytes back to the <em>IDA</em> database, defining the decrypted bytes as strings.</li>
</ol>
<p>The script was written to dynamically identify each of the encrypted arrays and their lengths from an <em>IDA Pro</em> database. This allows it to be run on many different samples without an analyst having to define the encrypted byte arrays. Therefore, the IDAPython script is dependent on the library's architecture. This script will run on the 32-bit 'generic' ARM versions of the library. For the other variants of the library mentioned in the 'Variants' section (ARMv7, ARM64, and x86), the same decryption algorithm in the script can be used, but the code to find the encrypted arrays and lengths will not run.</p>
<p>Once the script has finished running, the analyst can reverse engineer the native code as it lives when executing with the decrypted string.</p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2018/VB2018-Stone.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2018 paper: Unpacking the packed unpacker: reversing an Android anti-analysis native library&url=https://www.virusbulletin.com/virusbulletin/2019/01/vb2018-paper-unpacking-packed-unpacker-reversing-android-anti-analysis-native-library"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2019/01/vb2018-paper-unpacking-packed-unpacker-reversing-android-anti-analysis-native-library'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2019/01/vb2018-paper-unpacking-packed-unpacker-reversing-android-anti-analysis-native-library&title=VB2018 paper: Unpacking the packed unpacker: reversing an Android anti-analysis native library"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2019/01/vb2018-paper-unpacking-packed-unpacker-reversing-android-anti-analysis-native-library&t=VB2018 paper: Unpacking the packed unpacker: reversing an Android anti-analysis native library"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2019/01/vb2018-paper-unpacking-packed-unpacker-reversing-android-anti-analysis-native-library"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>