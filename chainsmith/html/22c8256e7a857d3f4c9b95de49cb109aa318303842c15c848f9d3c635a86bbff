<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: How It Works: Steganography Hides Malware in Image Files</title>
<meta name="description" content="Digital steganography is a method of concealing a file, message, image or video within another file, message, image or video. The technique is used by a piece of malware popularly known as Stegoloader (or W32/Gatak), a trojan or downloader for stealing data and delivering ransomware. Lordian Mosuela describes how the malware succesfully uses steganography to hide in image files." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 4951;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1>How It Works: Steganography Hides Malware in Image Files</h1>
<h3>Lordian Mosuela</h3>
<p>CYREN</p>
<p><em>Copyright © 2016 Virus Bulletin</em></p>
<hr />
<p><em> </em></p>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-8225" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="500">Table of contents</div><div id="ccm-remo-expand-content-8225" class="ccm-remo-expand-content"><p><a class="toc-level2" href="#h2-introduction">Introduction</a><br /><a class="toc-level2" href="#h2-overview-new-and-improved-hiding-technique">Overview: 'New and Improved' Hiding Technique</a><br /><a class="toc-level2" href="#h2-how-it-works">How It Works</a><br /><a class="toc-level3" href="#h3-step-1-initial-installation-of-the-malware">Step 1: Initial installation of the malware</a><br /><a class="toc-level3" href="#h3-step-2-downloading-the-image-with-the-encrypted-message">Step 2: Downloading the image with the encrypted message</a><br /><a class="toc-level2" href="#h2-summary">Summary</a><br /><a class="toc-level2" href="#h2-references">References</a></p>
<p> </p></div></div><h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>One of the more insidious new obfuscation techniques identified by our research team in the past year, which we believe will grow in popularity, uses a new 'digital steganography', or<br />concealment technique, to evade detection by conventional security tools. Digital steganography is a method of concealing a file, message, image or video within another file, message, image or video. In this case the technique is used by a piece of malware popularly known as Stegoloader (detected by <em>CYREN</em> as W32/Gatak), which is a trojan or downloader for stealing data and delivering ransomware.</p>
<h2><a class="chapter" name="h2-overview-new-and-improved-hiding-technique"></a>Overview: 'New and Improved' Hiding Technique</h2>
<p>Gatak/Stegoloader is a good illustration of the ongoing arms race between malware writers and your Internet security. A precursor to the new digital steganography technique was seen in the Duqu [<a href="#ref1">1</a>] malware (discovered in 2011), which was found to transmit encrypted data appended to an image (.JPG) file. The Zeus/Zbot [<a href="#ref2">2</a>] malware also uses similar tactics, appending its encrypted configuration file to an image file for exfiltration. However, this technique has proven easy to block using content filtering rules, because the configuration file is simply appended to the image file.</p>
<p>The Gatak/Stegoloader malware, which emerged in 2015 [<a href="#ref3">3</a>], improves on this steganography technique – it completely hides its malicious code within an image (.PNG) file. So far, we have seen this threat bundled in software licence cracking tools that are used (illegally) to generate software licence keys (typically to extend software trials or unlock software features without payment), but there is a high probability that new distribution mechanisms will appear.</p>
<h2><a class="chapter" name="h2-how-it-works"></a>How It Works</h2>
<p><a href="#figure1">Figure 1</a> shows a Gatak sample (SHA256: 0a58b98205c8542ae0516b4fe3ff8a4a6d6e9c199ec2d4e0de0aa8f9e1290328) in which two executable files are included inside a compressed archive. <a class=" anchor" name="figure1"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/4814/6166/2076/stenography-1.jpg" alt="stenography-1.jpg" width="450" height="236" /><span class="centered-caption">Figure 1: Gatak sample showing two executable files inside a compressed archive.</span></p>
<p>Upon execution of the installer file, the software licence cracking tool (1237.exe) runs and the window shown in<a href="#figure2"> Figure 2</a> is displayed – this is used to generate software keys for a specific software program. Of course, the Gatak malware (9604.exe) is also executed, but without the user's knowledge. <a class=" anchor" name="figure2"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/3714/6166/2174/stenography-2.jpg" alt="stenography-2.jpg" width="393" height="237" /><span class="centered-caption">Figure 2: The cracking tool.</span></p>
<p>The malware installation is complex, with many steps, but there are two main parts:</p>
<ol>
<li><span style="line-height: 1.42857;">Initial decryption and installation of the malware.</span></li>
<li><span style="line-height: 1.42857;">Download of the image and use of the hidden image data to establish encrypted communications with the C&amp;C server and to download/upload data and/or further malware.</span></li>
</ol>
<h3><a class="chapter" name="h3-step-1-initial-installation-of-the-malware"></a>Step 1: Initial installation of the malware</h3>
<p>The Gatak malware first assembles its code into memory by decrypting nine segments of the encrypted code embedded in the malware itself, and then transfers its execution to the decrypted code in memory. <a href="#figure3">Figure 3</a> shows the size and virtual address of nine parts of encrypted code that are included in the three sections of the malware: .data, .adata and sync. <a class=" anchor" name="figure3"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/7514/6166/2270/stenography-3.jpg" alt="stenography-3.jpg" width="636" height="324" /></p>
<p class="centered-caption">Figure 3: Size and virtual address of nine parts of encrypted code that are included in three sections of the malware.</p>
<p>The key for decryption is two bytes in size and is hard coded in the malware body. Decryption is accomplished by alternating the two bytes in the decryption key and subtracting them from the encrypted code:</p>
<ol>
<li><span style="line-height: 1.42857;">Subtract a byte of encrypted code using the byte key.</span></li>
<li><span style="line-height: 1.42857;">Shift the byte key and use another byte key.</span></li>
<li><span style="line-height: 1.42857;">Store the decrypted byte in the allocated buffer.</span></li>
<li><span style="line-height: 1.42857;">Increment a pointer to the next byte of encrypted code.</span></li>
<li><span style="line-height: 1.42857;">Increment a pointer to the next byte of allocated buffer.</span></li>
<li><span style="line-height: 1.42857;">Loop to #1.</span></li>
</ol>
<p>The decrypted code then rebuilds itself by first obtaining the location of the process environment block (PEB) using the FS:[30] register. It then acquires the address of InLoadOrderModuleList (see <a href="#figure4">Figure 4</a>) in order to find the virtual address of ntdll.dll. This procedure is used to construct the required import addresses of the ZwAllocateVirtualMemory, ZwFreeVirtualMemory and LdrLoadDll APIs, which are used to load more DLLs and retrieve the required APIs from them through their API hashes. <a class=" anchor" name="figure4"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/8014/6166/2373/stenography-4.jpg" alt="stenography-4.jpg" width="680" height="86" /><span class="centered-caption">Figure 4: Code snippet of getting InLoadOrderModuleList.</span></p>
<p><a href="#figure5">Figure 5 </a>shows the list of APIs gathered with their corresponding hashes. <a class=" anchor" name="figure5"></a></p>
<p class="centered-caption"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/4314/6166/2436/stenography-5.jpg" alt="stenography-5.jpg" width="468" height="867" />Figure 5: List of APIs gathered with their corresponding hashes.</p>
<p>The malware then gets the ftCreationTime.dwLowDateTime of the %USERPROFILE% folder of the infected system using the FindFirstFileA API and stores it as a variable for later use.</p>
<p>Next, it gets the ftCreationTime of the Windows folder using the GetWindowsDirectoryA and FindFirstFileA APIs, and tries to compare it with the hard-coded array of the <em>Windows</em> timestamp. If a match is found, it will not infect the system. It also tries to determine whether the system is based on Linux running a <em>Windows</em> compatibility layer (Wine) by checking for the existence of the following registry key:</p>
<p>HKEY_CURRENT_USER\Software\Wine</p>
<p>If this registry key exists, it will not infect the system, it will terminate and delete itself using the following command (where %% is the path and filename of the malware):</p>
<pre>CMD /C SYSTEMINFO &amp;&amp; SYSTEMINFO &amp;&amp; SYSTEMINFO &amp;&amp; SYSTEMINFO &amp;&amp; SYSTEMINFO &amp;&amp; DEL "%s"</pre>
<p>It tries to get the processID of the explorer.exe process in the system by using a combination of the FindWindowA and GetWindowThreadProcessId APIs with the following parameters:</p>
<ul>
<li><span style="line-height: 1.42857;">lpClassName = "Shell_TrayWnd"</span></li>
<li><span style="line-height: 1.42857;">lpWindowName = NULL</span></li>
</ul>
<p>If this method fails, it will create a rundll32.exe process using the following command:</p>
<pre>rundll32.exe shell32.dll,Control_RunDLL</pre>
<p>It gets the processID of the newly created process using the CreateProcessA and GetProcessId APIs, then transfers its execution to the injected code in either the system's explorer.exe or the newly created rundll32.exe process using the CreateRemoteThread API and proceeds to terminate and delete itself from the system.</p>
<p>The malware checks whether it is already installed in the system using the following conditions:</p>
<ul>
<li><span style="line-height: 1.42857;">Finding the AtomName = "1234554321" using the GlobalFindAtomA API</span></li>
<li><span style="line-height: 1.42857;">Opening the registry key: </span><span style="line-height: 1.42857;">HKEY_CURRENT_USER\Software\Microsoft\[unique_string_through_hash_of_computer_name]</span></li>
</ul>
<p>As shown in <a href="#figure6">Figure 6</a>, the malware sends a step-by-step status update to its C&amp;C server. <a class=" anchor" name="figure6"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/7814/6166/2606/stenography-6.jpg" alt="stenography-6.jpg" width="840" height="263" /><span class="centered-caption">Figure 6: The malware sends a step-by-step status update to its C&amp;C server.</span></p>
<p>It then activates InternetOpenA with the User-Agent:</p>
<pre>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)</pre>
<p>and InternetOpenUrlA with the following URL string structure:</p>
<pre>http://207.36.---.49/report_[HEX1]_[HEX2]_[COUNTER]_[STATUS]</pre>
<p>Where:</p>
<ul>
<li><span style="line-height: 1.42857;">[HEX1] is the hex string of the computer name</span></li>
<li><span style="line-height: 1.42857;">[HEX2] is the ftCreationTime.dwLowDateTime of the %USERPROFILE% folder</span></li>
<li><span style="line-height: 1.42857;">[COUNTER] is the status counter of the procedure</span></li>
<li><span style="line-height: 1.42857;">[STATUS] is the string that represents the status of the procedure used.</span></li>
</ul>
<h3><a class="chapter" name="h3-step-2-downloading-the-image-with-the-encrypted-message"></a>Step 2: Downloading the image with the encrypted message</h3>
<p>The malware then attempts to download an image file from one of the following URLs:</p>
<ul>
<li><span style="line-height: 1.42857;">http://www.imagesup. net/?di=1514---3927715</span></li>
<li><span style="line-height: 1.42857;">http://hostthenpost. org/uploads/a7f5c7e67-----8ff9dbfac6a3f28d3be.png</span></li>
</ul>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/6214/6166/2687/stenography-7.jpg" alt="stenography-7.jpg" width="680" height="500" /></p>
<p class="centered-caption">Figure 7: Gatak/Stegoloader's downloaded image file including hidden data.</p>
<p>After downloading the image file and before proceeding to the steganography algorithm to retrieve the hidden encypted data, the malware runs through the following integrity checklist:</p>
<ol>
<li><span style="line-height: 1.42857;">It verifies that the image is a PNG file by checking that the header starts with '0x89PNG' bytes.</span></li>
<li><span style="line-height: 1.42857;">It checks whether it properly initializes <em>Windows</em> GDI+ via the GdiplusStartup API.</span></li>
<li><span style="line-height: 1.42857;">It checks whether it can create a bitmap object for the downloaded image to retrieve the pixel data using the CreateStreamOnHGlobal and GdipCreateBitmapFromStream APIs.</span></li>
</ol>
<p>The malware then retrieves the hidden encrypted data from the image by getting the pixel data of the image. The pixel data serves as variables in a stream generator algorithm to form the hidden encrypted data. 'Pixel data' is the colour of the pixel at position (x,y) in a bitmap object. The malware uses a combination of the GdipGetImageHeight, GdipGetImageWidth and GdipBitmapGetPixel APIs to obtain the pixel data of the image.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/5914/6166/2752/stenography-8.jpg" alt="stenography-8.jpg" width="700" height="87" /></p>
<p class="centered-caption">Figure 8: Image's hidden encrypted stream.</p>
<p>It decrypts the encrypted stream in the image with an RC4 algorithm and a hard-coded eight-byte key at offset 0x19 of the injected code in either explorer.exe or rundll32.exe (see below for description).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/8714/6166/2787/stenography-9.jpg" alt="stenography-9.jpg" width="480" height="54" /></p>
<p class="centered-caption">Figure 9: Start of injected code.</p>
<p>Next, it checks the CRC32 of the decrypted stream to verify the correctness of the resolved stream. This resolved stream is a shellcode. The shellcode contains:</p>
<ul>
<li><span style="line-height: 1.42857;">A command code located at offset 0x4 which instructs the injected remote code on how to process the hidden data.</span></li>
<li><span style="line-height: 1.42857;">The length (located at offset zero DWORD size) and CRC32 value (located at offset [length_of_shellcode + 4] DWORD size) of the shellcode that serves as a variable for its CRC32 checker function.</span></li>
<li><span style="line-height: 1.42857;">The hard-coded byte key (located at offset 0xb) that will be used to encrypt/decrypt the communicated message in the malware's C&amp;C server.</span></li>
<li><span style="line-height: 1.42857;">The hard-coded byte key ID of the image shellcode located at offset 0x21.</span></li>
</ul>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/2314/6166/2833/stenography-10.jpg" alt="stenography-10.jpg" width="640" height="159" /></p>
<p class="centered-caption">Figure 10: Image's hidden decrypted stream.</p>
<p>The command codes and their descriptions are as follows:</p>
<ul>
<li><span style="line-height: 1.42857;">0x10: Execute payload code in memory</span></li>
<li><span style="line-height: 1.42857;">0x20: Create then execute payload code in [binary file]</span></li>
<li><span style="line-height: 1.42857;">0x21: Create then execute then delete payload code in [binary file]</span></li>
</ul>
<p>where [binary file] has the form %temp%\~XX[random_number].tmp.</p>
<p>The image shellcode is a backdoor that communicates with the following command and control servers:</p>
<ul>
<li><span style="line-height: 1.42857;">http://deid.sharpfans. org/calibre/view?present=09---67</span></li>
<li><span style="line-height: 1.42857;">http://bpp.bppharma. com/calibre/view?present=09---67</span></li>
<li><span style="line-height: 1.42857;">http://reader.lifeacademyinc. com:80/encourage/help?pointed=85----4</span></li>
<li><span style="line-height: 1.42857;">http://5.135.233. 16:80/file/photos?handle=68--77</span></li>
<li><span style="line-height: 1.42857;">http://cod.chezsimone971. com:80/encourage/help?pointed=85----4</span></li>
</ul>
<p>The message sent by the image shellcode is encrypted with an RC4 algorithm prepended with a 16-byte key ID. The key ID serves as the RC4 key for the encrypted message. The structure of the decrypted message sent to the C&amp;C server is shown in <a href="#figure11">Figure 11</a>. <a class=" anchor" name="figure11"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/9214/6166/2909/stenography-11.jpg" alt="stenography-11.jpg" width="600" height="81" /></p>
<p class="centered-caption">Figure 11: Structure of the decrypted message sent to the C&amp;C server.</p>
<ul>
<li><span style="line-height: 1.42857;">@ Offset 0 = 16-byte key ID of the shellcode.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 0x10 = 4-byte CRC32 value starting at offset 0x14 until the end of the message.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 0x14 = 16-byte command ID of the shellcode, randomly generated using the SystemFunction036 API.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 0x24 = 16-byte function ID of shellcode, randomly generated using the SystemFunction036 API at the start of the shellcode execution.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 0x34 = byte header for the message.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 0x35 = 8-byte session ID of the message, which initializes to zero in the first contact with the command and control server.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 0x3D = BOT command.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 0x3E = success/error flag, set to zero for success of operation.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 0x3F = information flag, set to one if information length is greater than 1,024 bytes.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 0x40 = length of information.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 0x44 = start of the information.</span></li>
</ul>
<p>Information greater than 1,024 bytes will be compressed with the LZMA algorithm.</p>
<p>The information sent to the C&amp;C server includes sensitive information stolen from the infected system in the following format: "{"[Information Description]": "[Base64 Encoded Information]"}".</p>
<p><a href="#figure12">Figure 12</a> shows the structure of the decrypted message received from the C&amp;C server. <a class=" anchor" name="figure12"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/4014/6166/3033/stenography-12.jpg" alt="stenography-12.jpg" width="640" height="38" /></p>
<p class="centered-caption">Figure 12: Structure of the decrypted message received from the C&amp;C server.</p>
<ul>
<li><span style="line-height: 1.42857;">@ Offset 0 = 4-byte CRC32 value starting at offset 4 until the end of the message.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 4 = 16-byte command ID of the C&amp;C server.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 0x14 = byte header for the message.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 0x15 = 8-byte session ID of the message.</span></li>
<li><span style="line-height: 1.42857;">@ Offset 0x1D = BOT command.</span></li>
</ul>
<p>Examples of BOT commands include, but are not limited to, the following:</p>
<ul>
<li><span style="line-height: 1.42857;">0x01 = No operation, just contact the C&amp;C server</span></li>
<li><span style="line-height: 1.42857;">0x02 = Execute payload via shellcode or [binary file]</span></li>
<li><span style="line-height: 1.42857;">0x03 = Retrieve system information (e.g. InternalIP, DomainName, Processes, etc.)</span></li>
<li><span style="line-height: 1.42857;">0x04 = Retrieve software installed</span></li>
<li><span style="line-height: 1.42857;">0x05 = Retrieve web browser history</span></li>
<li><span style="line-height: 1.42857;">0x64 = Execute shellcode</span></li>
<li><span style="line-height: 1.42857;">0xDC = Retrieve Windows folder timestamp.</span></li>
</ul>
<h2><a class="chapter" name="h2-summary"></a>Summary</h2>
<p>Gatak/Stegoloader may install other modules or malware for stealing sensitive information. Some variants have been found to install the Vundo malware family, which installs adware, ransomware and scareware. The improved digital steganography technique demonstrated by this piece of malware will surely be further adopted and/or enhanced by cybercriminals thanks to its efficiency in hiding code.</p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] <a href="https://en.wikipedia.org/w/index.php?title=Duqu&amp;oldid=712083675" target="_blank">https://en.wikipedia.org/w/index.php?title=Duqu&amp;oldid=712083675</a>.<br /><a class=" anchor" name="ref2"></a>[2] <a href="https://en.wikipedia.org/w/index.php?title=Zeus_(malware)&amp;oldid=711753219" target="_blank">https://en.wikipedia.org/w/index.php?title=Zeus_(malware)&amp;oldid=711753219</a>.<br /><a class=" anchor" name="ref3"></a>[3] <a href="https://www.securityweek.com/information-stealing-malware-%E2%80%9Cstegoloader%E2%80%9D-hides-image-file" target="_blank">http://www.securityweek.com/information-stealing-malware-%E2%80%9Cstegoloader%E2%80%9D-hides-image-file</a>.</p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2016/vb201604-Stegoloader.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=How It Works: Steganography Hides Malware in Image Files&url=https://www.virusbulletin.com/virusbulletin/2016/04/how-it-works-steganography-hides-malware-image-files"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2016/04/how-it-works-steganography-hides-malware-image-files'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2016/04/how-it-works-steganography-hides-malware-image-files&title=How It Works: Steganography Hides Malware in Image Files"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2016/04/how-it-works-steganography-hides-malware-image-files&t=How It Works: Steganography Hides Malware in Image Files"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2016/04/how-it-works-steganography-hides-malware-image-files"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>