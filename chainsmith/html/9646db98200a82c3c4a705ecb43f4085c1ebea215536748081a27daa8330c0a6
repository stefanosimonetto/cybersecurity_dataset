<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: DNSSEC: how far have we come?</title>
<meta name="description" content="In his VB2014 conference paper, Nick Sullivan explains what DNSSEC does and doesn't do to make DNS responses more trustworthy." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1734;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201410-DNSSEC"></a>VB2014 paper: DNSSEC: how far have we come?</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2014-10-15</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Nick</span> <span class="surname">Sullivan</span></h3><span class="orgname">CloudFlare</span>, <span class="orgdiv">USA</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>In his VB2014 conference paper, Nick Sullivan explains what DNSSEC does and doesn&#39;t do to make DNS responses more trustworthy.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2669" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2669" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id4729846">Abstract</a></span></dt><dt><span class="sect1"><a href="#id4185978">Introduction</a></span></dt><dt><span class="sect1"><a href="#id4810610">DNS: a distributed key value store before it was cool</a></span></dt><dt><span class="sect1"><a href="#id2116525">Kaminsky&#39;s attack</a></span></dt><dt><span class="sect1"><a href="#id3534348">DNSSEC</a></span></dt><dt><span class="sect1"><a href="#id3352690">DNSSEC controversies</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3811920">Zone privacy</a></span></dt><dt><span class="sect2"><a href="#id4559348">Key management</a></span></dt><dt><span class="sect2"><a href="#id3281782">Reflection/amplification threat</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id2547551">Valuable extensions</a></span></dt><dt><span class="sect1"><a href="#id4909932">Deployment statistics</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4920339">Signing the root</a></span></dt><dt><span class="sect2"><a href="#id2216143">Signing the TLDs</a></span></dt><dt><span class="sect2"><a href="#id3907086">Registrar integration</a></span></dt><dt><span class="sect2"><a href="#id4341672">Validating resolvers</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3373156">Conclusions</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4729846"></a>Abstract</h2></div></div></div><p>DNSSEC is a set of security extensions to DNS intended to provide a root of trust for DNS records. This paper is a summary of the state of the art in DNSSEC deployment and implementation on the Internet. We start with a description of Kaminsky&rsquo;s attack on DNS to motivate the need for trust in the DNS system. From here we describe some of the common arguments against DNSSEC, including NSEC and NSEC3 walking, and how DNSSEC can be an enabler for UDP reflection attacks. We then discuss useful extensions to DNSSEC, like DANE, and how these can be used to secure websites without trusting the certificate authority system. We also examine how far the effort has come in the decades since the technology was standardized, including adoption statistics and trends.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4185978"></a>Introduction</h2></div></div></div><p>The Domain Name System (DNS) is one of the oldest and most fundamental components of the modern Internet. As the mechanism that maps domain names to Internet Protocol (IP) addresses, it provides a human-readable layer to navigate the millions of machines and devices on the Internet. In the early 1980s, when DNS was designed, there was no strong need to add security mechanisms into the protocol. Computers of the time were underpowered compared with today&rsquo;s machines; public key cryptography was a relatively new concept; and the network was much smaller, with fewer participants who were relatively well known and trusted. As the network grew and evolved, DNS remained pretty much unchanged as an insecure and unauthenticated protocol. </p><p>In 1995, the IETF started a public discussion around how DNS could be made more trustworthy. Eventually, a set of extensions to DNS called Domain Name System Security Extensions (DNSSEC) were settled on and formally published in 2005, replacing earlier proposals as a definitive way forward for securing DNS. Though it has been almost a decade since this publication, DNSSEC still has a long way to go to be adopted in the mainstream. </p><p>There are several catalysts pushing DNSSEC adoption, one of which is Dan Kaminsky&rsquo;s cache poisoning attack from 2008 [<span class="citation"><a href="#citation.1">1</a></span>]. This attack highlighted the significant trust issues in traditional DNS, and how DNSSEC is well positioned to solve them. Even with the significant work going into it, there are several factors holding DNSSEC adoption back. Network operators tend to prefer stability to complexity (for good reason), and people have questioned whether DNSSEC is really the right tool for the job. </p><p>This paper presents the evolution of the state of the art in DNSSEC deployment and implementation on the Internet. We start with some background about how DNS works and where DNSSEC fits in. We will explore how standard DNS is insecure and can be exploited with Kaminsky&rsquo;s attack. We describe some of the common arguments against DNSSEC, including domain enumeration with NSEC (NextSECure) and NSEC3 walking, and how DNSSEC can be an enabler for UDP reflection attacks. </p><p>We then discuss useful extensions to DNSSEC, like DANE, and how these can be used to secure websites and provide a much stronger form of trust than the certificate authority system. We also examine how far the effort has come in the decade since the technology was standardized using adoption statistics and trends. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4810610"></a>DNS: a distributed key value store before it was cool</h2></div></div></div><p>The concept of DNS is simple: it is a global database of information about domain names. </p><p>If a client wants to connect to an address such as &lsquo;www.example.com&rsquo;, and needs to know which IP address corresponds to this address, they can ask DNS. Typically, all DNS messages are sent over UDP. </p><p>There are several types of Resource Records (RR) that DNS can answer questions about. One of the most important RRs is called an A record, which stores the IPv4 address associated with the domain. To find out the value of a record for a given domain, you can get a tool called a DNS resolver to find out for you. </p><p>For example, it you wanted the IP for www.example.com, the question you could ask would be something like: &lsquo;What is the A record for the domain www.example.com?&rsquo; </p><p>The raw DNS request is a UDP packet as shown in Listing 1.</p><pre class="programlisting">0x0000: 27e1 0100 0001 0000 0000 0000 0765 7861 &lsquo;............exa
0x0010: 6d70 6c65 0363 6f6d 0000 0100 01 mple.com.....

<span class="bold"><strong>Listing 1: Raw DNS request.</strong></span>
</pre><p>This request contains an ID (0x27e1), some flags to indicate that it is a request, and the question itself. </p><p>The response is shown in Listing 2. The response comes with the matching ID (0x27e1), a copy of the original request echoed back, some flags (1/0/0), and an answer to the question: 93.184.216.119. It also contains a validity period, called time to live (TTL), to indicate for how long the record is valid.</p><pre class="programlisting">0x0000: 27e1 8180 0001 0001 0000 0000 0765 7861 &lsquo;............exa
0x0010: 6d70 6c65 0363 6f6d 0000 0100 01c0 0c00 mple.com........
0x0020: 0100 0100 0031 f500 045d b8d8 77 .....1...]..w

<span class="bold"><strong>Listing 2: Response.</strong></span>
</pre><p>The ISP typically provides a nameserver that can answer DNS requests. You can use a public nameserver like the ones provided by <span class="emphasis"><em>Google</em></span> (8.8.8.8, 8.8.4.4) or <span class="emphasis"><em>OpenDNS</em></span> (208.67.222.222, 208.67.220.220). If a nameserver does not have the answer, it can request it from another server, called an authoritative nameserver, to get the proper resource record. Any nameserver that is willing to query other servers for DNS answers is called a recursive nameserver. </p><p>The hierarchy of DNS is very well defined: start at the DNS root nameserver and work your way down the domain name. The top of the pyramid is a server called the root server, the source of truth for all requests (there are several root servers maintained by different organizations [<span class="citation"><a href="#citation.2">2</a></span>]). The root servers know the addresses of the authoritative servers for the top level domains (.com, .edu, etc.), but nothing else. If you ask the .com authoritative nameserver for www.example.com, it will return a record called SOA (start of authority), which points to the nameserver which should have more information about the requested zone. </p><p>Each of the TLD authoritative nameservers knows about the authoritative nameservers for the domains under them (example.com, cloudflare.com, google.com, etc.). Following this downward eventually gets you to the server that can answer queries about the records for the subdomain you are looking for. </p><p>Root SOA -&gt; com authority -&gt; SOA example.com authority -&gt; A www.example.com</p><p>The set of DNS recursive and authoritative nameservers is one of the oldest distributed databases on the Internet. The TTL for RRs allow each server to act as a cache to help distribute the load. There are a number of different RRs that you can ask for. &lsquo;A&rsquo; records result in IPv4 addresses, &lsquo;AAAA&rsquo; for IPv6, &lsquo;SOA&rsquo; for Start of Authority, and there are many more defined in various RFCs [<span class="citation"><a href="#citation.3">3</a></span>].</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2116525"></a>Kaminsky&#39;s attack</h2></div></div></div><p>In 2008 [<span class="citation"><a href="#citation.4">4</a></span>], Dan Kaminsky revealed an attack on the DNS system in which you can trick a DNS recursive nameserver into storing incorrect DNS records. Once the nameserver has stored the incorrect response, it will return it to everyone who asks as long as the TTL has not expired. This so-called DNS poisoning attack could allow arbitrary people to trick DNS and redirect web browsers to incorrect servers, allowing them to hijack traffic. </p><p>The attack is simple to describe but difficult to pull off. Take the sequence of events described in the last section: </p><div class="orderedlist"><ol type="1"><li><p>Q client -&gt; recursive</p></li><li><p>Q recursive -&gt; authoritative</p></li><li><p>A authoritative -&gt; recursive</p></li><li><p>A recursive -&gt; client</p></li></ol></div><p>The attack relies on the fact that UDP is a stateless protocol. Each of the requests and responses described here is a single UDP request containing to and from IP addresses. If the sender of the request lies about the return address, the response is sent to the wrong place. We will get back to this when we talk about reflection/amplification attacks. The main point here is that an attacker can create a DNS request or response with a forged from address. </p><p>Of the requests above, message number 3 looks like a good target to attack. The recursive nameserver will accept the first answer to its question. If you can answer it faster than the authoritative server can, it will accept your answer as truth. This is the core of the attack: </p><div class="orderedlist"><ol type="1"><li><p>Pick a domain whose DNS you want to hijack.</p></li><li><p>Send a request to a recursive nameserver for the record you want to poison.</p></li><li><p>Send fake UDP responses pretending to be the authoritative server with the answer of your choosing (i.e. point the A record to an IP you control). </p></li></ol></div><p>If your malicious response arrives ahead of the real response, the recursive nameserver will believe your record and cache it for as long as the TTL is set. Then any other clients asking for the poisoned record will be directed to your malicious domain. </p><p>There are some complications that make this harder than it sounds in practice. You have to guess the request ID, and you have to guess the incoming UDP port on the recursive nameserver. When Kaminsky&rsquo;s attack was originally proposed, these two values were easily guessable, making DNS poisoning a real threat. Since then, request ID and port randomization have made this specific attack more difficult to pull off, but not impossible. </p><p>The fundamental issue that allows this kind of attack to happen is that there is no way to validate that the records are what they are supposed to be. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3534348"></a>DNSSEC</h2></div></div></div><p>The security extensions to DNS add three important records that enable the entire DNS to be trusted. From a high level, DNS starts at the root nameserver and works down. This is the same way that trust is conferred via DNSSEC. The DNS root is the definitive root of trust, and a chain of trust is built to the root from any DNS entry. This is a lot like the chain of trust used to validate TLS/SSL certificates, except that, rather than many trusted root certificates, there is one trusted root key managed by the DNS root. </p><p>The point of DNSSEC is to provide a way for DNS records to be trusted by whoever receives them. The key innovation of DNSSEC is to use public key cryptography to ensure that DNS records are authentic. DNSSEC not only allows a DNS server to prove the authenticity of the records it returns, it also allows a server to assert the non-existence of records. This is established by a strict chain of records that identify either a public key or a signature of a set of resource records. The root of this chain of trust is the root key, maintained and managed by the operators of the DNS root. </p><p>There are several important new record types: </p><div class="itemizedlist"><ul type="disc"><li><p>DNSKEY: a public key, used to sign RR sets.</p></li><li><p>DS: delegation signer, a hash of a key.</p></li><li><p>RRSIG: a signature of a minimal set of resource records.</p></li></ul></div><p>A DNSKEY record is a cryptographic public key, it usually comes in two flavours:</p><div class="itemizedlist"><ul type="disc"><li><p>KSK (key signing key): usually used to sign DNSKEY records only.</p></li><li><p>ZSK (zone signing key): used to sign every other type of record.</p></li></ul></div><p>So how do these records fit together to form a chain of trust? Let&rsquo;s examine first how an RRSIG record works. Each RRSIG record includes a cryptographic hash of all the records of a given type, sorted in a canonical order. It also includes a tag to help identify which DNSKEY record was used to sign it. For every record type other than DNSKEY, the RRSIG is signed with a ZSK DNSKEY. The DNSKEY is signed by the KSK. So by checking an RRSIG against the appropriate DNSKEY, you can assert that the appropriate server has signed the records and they are trusted. </p><p>How do you trust the DNSKEY? The way to do that is to walk the domain up to the next zone. To verify that the DNSKEY for example.com is valid, you have to ask the .com authoritative server. This is where the DS record comes into play. The .com zone stores the hash of the DNSKEY for each zone it knows about as a DS record. This record, like all DNSSEC records, is part of a signed set of records, and has an accompanying RRSIG signed by the .com DNSKEY. Similarly, the .com has a KSK, signing all .com DNSKEYs. So if you trust the .com keys, you can trust the example.com keys, and the A and other records obtained from the nameserver. The ultimate root of trust is the KSK DNSKEY for the DNS root. This key is universally known and published. </p><p>Here is the DNSKEY root KSK as of June 2014: </p><pre class="programlisting">AwEAAagAIKlVZrpC6Ia7gEzahOR+9W29euxhJhVVLOyQbSEW0O8gcCjFFVQUTf6v58fLjwBd0YI0EzrAcQqBGCzh/RStIoO8g0NfnfL2MTJR
kxoXbfDaUeVPQuYEhg37NZWAJQ9VnMVDxP/VHL496M/QZxkjf5/Efucp2gaDX6RS6CXpoY68LsvPVjR0ZSwzz1apAzvN9dlzEheX7ICJBBtuA
6G3LQpzW5hOA2hzCTMjJPJ8LbqF6dsV6DoBQzgul0sGIcGOYl7OyQdXfZ57relSQageu+ipAdTTJ25AsRTAoub8ONGcLmqrAmRLKBP1dfwhYB
4N7knNnulqQxA+Uk1ihz0=
</pre><p>By following the chain of DNSKEY, DS and RRSIG records to the root, any record can be trusted. </p><p>These records are enough to prove the existence of a given resource record, but something more is needed in order to prove that a record does not exist. This is where two additional record types, NSEC and NSEC3, come into play. </p><p>Typically, a DNS authoritative server returns a flag called NXDOMAIN when a resource record definitively does not exist. In practice, this is not enough to prove that the record does not exist, since the response could be forged by a third party with no additional knowledge. NSEC works by signing the gaps between valid responses. There are a finite set of positive answers, and the gaps between positive answers are covered by NSEC. This effectively doubles the number of records in the zone, but allows an authoritative nameserver to serve a signed response for any question. </p><p>Say that .com supports NSEC records (in reality it supports NSEC3). Asking for &lsquo;example.com&rsquo; would give you a positive answer with an IP address and an RRSIG record. Asking for &lsquo;examplf.com&rsquo; would give you a negative answer &lsquo;there are no zones between example.com and exampli.com&rsquo;, with a corresponding RRSIG. </p><p>For NSEC3 the same logic applies, but for the hash of the record. Asking for examplf.com (e comes before f) would give you &lsquo;there are no records with hashes between A and B&rsquo;, where A is the next closest hash lexicographically before the hash of examplf.com, and B is the next closest after. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3352690"></a>DNSSEC controversies</h2></div></div></div><p>As a way to provide a system of trust for DNS records, DNSSEC works. Implementing such a large change to one of the core components of the Internet was not expected to be easy, and it has not been. Not only is there a large operational cost to implementing DNSSEC, there have been several other criticisms faced by DNSSEC over the years. In this section I will examine two major drawbacks to DNSSSEC.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3811920"></a>Zone privacy</h3></div></div></div><p>One of the major issues with the NSEC record is that it allows anyone to &lsquo;walk&rsquo; the DNS zone. This can be used to reveal all of the domains hosted on the nameserver. Take the example of &lsquo;examplf.com&rsquo; &ndash; the NSEC responses lets you know that &lsquo;exampli.com&rsquo; exists. Trying an invalid record after that one such as &lsquo;examplia.com&rsquo; will give you the next valid DNS name. This can continue until the entire zone is enumerated. </p><p>Technically, DNS records are not supposed to be secret, but in practice they are considered so. Subdomains have been used to keep things private for a while, and suddenly revealing the contents of the zone file is not expected or appreciated. This is why NSEC3 was introduced, but even it can be used to reveal the existence of subdomains. </p><p>The NSEC3 record is designed to provide authenticated denial of existence by having a signed ring of password equivalents. Rather than a signed gap of domain names for which there are no answers to the question, NSEC3 provides a signed gap of hashes of domain names. This was intended to prevent zone enumeration. </p><p>For NSEC enumeration, you can create the full list of domains by starting at a given known domain. If the zone has around 100 domains, it will take around 100 requests to enumerate the entire zone. With NSEC3, when you request a zone that does not exist, a signed NSEC3 record is returned with the next zone present ordered lexicographically by hash. By pre-computing domains that hash to the next gap of domain hashes, it should take around 100 correctly chosen queries to enumerate all the hashes. There are many tools that can do this computation for you, including a plug-in to nmap [<span class="citation"><a href="#citation.5">5</a></span>]. Once the hashes that correspond to all the valid subdomains of the zone are known, a dictionary attack can commence. Subdomains that have a short enough name, or are guessable using a dictionary, can be revealed as existing without having to spam the nameserver with guesses. Zone privacy is only slightly improved when using NSEC3 as designed. </p><p>This vulnerability is mitigated by a technique introduced by Dan Kaminsky known as DNSSEC White Lies [<span class="citation"><a href="#citation.6">6</a></span>]. When a request comes in for a domain that is not present, instead of providing an NSEC3 record of the next real domain, an NSEC3 record of the next hash lexicographically is presented. This does not break the NSEC3 guarantee that there are no domains whose hash fits lexicographically between the NSEC3 response and the question. </p><p>The question of implementing NSEC3 White Lies or not comes down to whether a signature can be computed on the fly. The traditional creation of zone records to be served with DNS resolution happens offline: a set of records is saved into a file format like BIND and used by the live DNS server to answer questions. Having a DNS server with the minimum amount of logic inside allows the operator to conserve CPU resources. In order to do NSEC3 White Lies, the records need to be generated dynamically based on the request. This changes the operational conditions needed to support DNSSEC: the DNS authoritative server itself needs to do the cryptographic operations in response to the incoming query. This demand for live signing imposes several other security problems in distributed environments. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4559348"></a>Key management</h3></div></div></div><p>As described above, NSEC and NSEC3 were designed for the offline world. A DNS zone is often a static file with all signatures pre-computed on a machine that is not connected to the network. If you remove that requirement and allow cryptographic operations to happen live, you get some valuable tools like NSEC3 White Lies. The downside is that your key material is now live on a machine connected to a network. The main problems with live signing are key security and resource utilization. </p><p>Recently, the world was shocked by a bug known as Heartbleed that opened up a major security hole in server applications. It was caused by a coding error in OpenSSL that exposed a remote memory disclosure vulnerability. By sending a carefully constructed packet to a server that uses a version of OpenSSL with the flaw, an attacker could reveal server memory. In particular, it is possible to extract the TLS private key from the server without a lot of effort. Heartbleed-style bugs are just one of the many threats to private key security when the key is being used in an active process. The more a machine is exposed to the Internet, the more vectors of attack there are. Offline signing machines have a much smaller window of exposure to threats. </p><p>One way to keep keys secure is to use a hardware-backed solution such as a hardware security module (HSM). One of the major drawbacks for this is cost &ndash; HSMs are very expensive. This is one of the stickiest points for running DNS servers that are spread out geographically in order to be close to their customers. Running an HSM in every server location can not only be expensive, but there can be legal complications as well [<span class="citation"><a href="#citation.7">7</a></span>]. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3281782"></a>Reflection/amplification threat</h3></div></div></div><p>Another fear for operators running an authoritative DNS server is that they will be used as a vehicle for malicious distributed denial of server (DDoS) attacks. This stems from the fact that DNS uses UDP, a stateless protocol. </p><p>In TCP, each connection begins with a three-way handshake. This ensures that the IP address of both parties is known and correct before starting a connection. In UDP, there is no such handshake, messages are just sent directly to an IP with an unverified &lsquo;from&rsquo; IP address. If an attacker can craft a UDP packet that says &lsquo;hi, from IP X&rsquo; to a server, the server will typically respond by sending a UDP packet to X. Choosing X as a victim&rsquo;s IP address instead of the sender&rsquo;s is called UDP &lsquo;spoofing&rsquo;. By spoofing a victim, an attacker can cause a server that responds to UDP requests to flood the victim with &lsquo;reflected&rsquo; traffic. </p><p>DNSSEC also works over UDP, and the answers to DNS queries can be very long, containing multiple DNSKEY and RRSIG records. This is a big target for attackers since it allows them to &lsquo;amplify&rsquo; their reflection attacks. If a small volume of spoofed UDP DNSSEC requests is sent to a nameserver, the victim will receive a large volume of reflected traffic. Sometimes this is enough to overwhelm the victim&rsquo;s server, and cause a denial of service. </p><p>Like many services, DNS can also work over TCP. There is a flag called the &lsquo;truncation&rsquo; flag that can be sent back to a resolver to indicate that TCP is required. This would fix the issue of DNS reflection at the cost of slower DNS requests. This solution is not practical at the moment since 16% of resolvers don&rsquo;t respect the TCP truncation flag, and 4% don&rsquo;t try a second server [<span class="citation"><a href="#citation.8">8</a></span>]. TCP is not the solution at the moment. Using resource rate limiting and using proper heuristics into servers seems to be the best way to mitigate this threat at the moment. </p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2547551"></a>Valuable extensions</h2></div></div></div><p>The security provided by DNSSEC is helpful for securing regular DNS records against poisoning attacks or other malicious manipulation. Having a secure root of trust is also useful for securing other systems. One interesting application of this is providing an alternative root of trust for the standard web PKI. </p><p>Websites are typically secured through a mechanism called Transport Layer Security (TLS). When a browser accesses a site over the HTTPS protocol, the web server authenticates itself to the client using its TLS certificate and the two parties establish a shared key for further encrypted communication. In order to prove authenticity of the server&rsquo;s certificate, it is digitally signed by a third party known as a Certificate Authority (CA). To ensure that the site is who it says it is, the browser validates the site&rsquo;s certificate against the domain name of the site and ensures that the certificate authority that was used to sign the certificate is trusted. </p><p>Different browsers on different platforms have different lists of CAs that they trust. For example, <span class="emphasis"><em>Windows 8.1</em></span> trusts 227 so called root certificates, and <span class="emphasis"><em>Firefox</em></span> (version 30) only trusts 143 certificates. One of the main criticisms of web PKI is that there are too many trusted certificate authorities. In 2011, a CA called <span class="emphasis"><em>TURKTRUST</em></span> mis-issued an intermediate certificate [<span class="citation"><a href="#citation.9">9</a></span>] that allowed rogue entities to create certificates that were valid for google.com and other high-profile web domains [<span class="citation"><a href="#citation.10">10</a></span>]. In the same year, another CA called <span class="emphasis"><em>Diginotar</em></span> was found to have been compromised by attackers [<span class="citation"><a href="#citation.11">11</a></span>]. Clearly trusting so many different entities is dangerous for web browsing. </p><p>Enter DANE (DNS-based Authentication of Named Entities), an extension of TLS that allows a website owner to embed its TLS certificate into the DNS. With DNSSEC signatures used to validate the correctness of the certificate, it is no longer necessary for the browser to trust the CA, they can trust DNS instead. With one heavily protected root of trust, website identities are much more difficult to subvert. </p><p>Defined in RFC 6698 [<span class="citation"><a href="#citation.12">12</a></span>], DANE adds a new resource record to DNS: TLSA. This new record can be used to indicate the expected certificate for a given domain, or identify which CA should be expected as the root of trust for the certificate. If DANE had been implemented and validated by browsers during the <span class="emphasis"><em>TURKTRUST</em></span> incident, attackers would not have been able to spoof google.com because they not only had a new certificate, but the one presented was signed by the wrong certificate authority (google.com&rsquo;s certificate is signed by <span class="emphasis"><em>GeoTrust</em></span>).</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4909932"></a>Deployment statistics</h2></div></div></div><p>It has been more than nine years since the publication of the DNSSEC RFCs and, needless to say, deployment is far from complete. There are many different components involved. We will summarize the progress in each of the following areas: </p><div class="itemizedlist"><ul type="disc"><li><p>Signing the root zone</p></li><li><p>Signing the TLD zones</p></li><li><p>Registrar integration</p></li><li><p>Validating resolvers</p></li></ul></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4920339"></a>Signing the root</h3></div></div></div><p>The first step in getting DNSSEC to work is signing the root. This is the most important piece of DNSSEC as this key forms the root of trust for the entire system. </p><p>ICANN has specified a set of instructions for managing the root keys and signing the root zone [<span class="citation"><a href="#citation.13">13</a></span>]. This is called a key ceremony and involves many of the original creators of the Internet. The first root zone keys were published on 15 July 2010, just after the first and second key-signing ceremonies. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2216143"></a>Signing the TLDs</h3></div></div></div><p>After the signature of the DNS root zone, the next step is signing and managing the keys for the various top level domains (.com, .net, .gov, etc.). The first generic TLD (gTLD) to be signed was .org in June 2009 [<span class="citation"><a href="#citation.14">14</a></span>]. As of 29 June 2014, 445 out of 630 TLDs in the root zone are signed [<span class="citation"><a href="#citation.15">15</a></span>]. The full list has been visualized by .se&rsquo;s <span class="emphasis"><em>DNSCHECK</em></span> tool [<span class="citation"><a href="#citation.16">16</a></span>].</p><p><a href="#figure.1">Figure 1</a> shows the number of TLDs that have registered their keys with the root [<span class="citation"><a href="#citation.17">17</a></span>]. There was a large increase starting in late 2013 when many more gTLDs were added, all of which were required to implement DNSSEC from the outset [<span class="citation"><a href="#citation.18">18</a></span>]. </p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Number of TLDs that have registered their keys with the root." src="/uploads/images/figures/2014/10/Sullivan-fig1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Number of TLDs that have registered their keys with the root.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/10/Sullivan-fig1-large.jpg" target="_top">here</a> to view a larger version of Figure 1.)</p><p>Recently, the TLD for the European Union, .eu, presented the history of its deployment of DNSSEC [<span class="citation"><a href="#citation.19">19</a></span>]. The .eu registry started accepting DNSKEY material in June 2010, and got the .eu KSK&rsquo;s DS record signed by the root in September 2010. By May 2014, 267,000 of 3,840,000 (6.9%) .eu zones had been signed. The progress is shown in <a href="#figure.2">Figure 2</a>. </p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Progress of .eu domain signing." src="/uploads/images/figures/2014/10/Sullivan-fig2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Progress of .eu domain signing.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/10/Sullivan-fig2-large.jpg" target="_top">here</a> to view a larger version of Figure 2.)</p><p>Another large TLD with DNSSEC enabled is .cn [<span class="citation"><a href="#citation.20">20</a></span>], which updated its zone&rsquo;s DS in the root in September 2013 and became fully operational in December of that year. For this zone, the keys are kept by five key administrators who are each given a smart card containing a segment of the keys. The full key can be constructed from any three of the five segments. </p><p>The process is still young, and each TLD is developing its own set of standards and practices. ICANN has published RFC 4641 [<span class="citation"><a href="#citation.21">21</a></span>] to help explain and standardize the process, including expiration and validity periods for keys. For the .cn keys, the following approach was taken: </p><p><span class="bold"><strong>ZSK: </strong></span>RSA-SHA256 1024-bit, NSEC3 </p><p><span class="bold"><strong>KSK:</strong></span> RSA-SHA256 2048-bit, NSEC3 </p><p>Key rotation cycle: </p><p><span class="bold"><strong>ZSK: </strong></span>100 days, RRSIG period: 30 days </p><p><span class="bold"><strong>KSK: </strong></span>13 months, RRSIG period: 30 days </p><p>Going back to 2012, DNSSEC deployment was much less advanced [<span class="citation"><a href="#citation.22">22</a></span>], only 86/313 TLDs were signed. As shown in <a href="#figure.3">Figure 3</a>, adoption is continuing at steady rate, surpassing 350,000 .com domains in 2014 [<span class="citation"><a href="#citation.23">23</a></span>]. It should be noted that this accounts for less than 0.5% of domains in either the .com or .net zones, as <a href="#figure.4">Figure 4</a> shows [<span class="citation"><a href="#citation.24">24</a></span>]. </p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="DNSSEC adopion continues at a steady rate &ndash; surpassing 350,000 .com domains in 2014." src="/uploads/images/figures/2014/10/Sullivan-fig3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;DNSSEC adopion continues at a steady rate &ndash; surpassing 350,000 .com domains in 2014.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/10/Sullivan-fig3-large.jpg" target="_top">here</a> to view a larger version of Figure 3.)</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Less than 0.5% of domains in either the .com or .net zones are accounted for." src="/uploads/images/figures/2014/10/Sullivan-fig4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Less than 0.5% of domains in either the .com or .net zones are accounted for.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/10/Sullivan-fig4-large.jpg" target="_top">here</a> to view a larger version of Figure 4.)</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3907086"></a>Registrar integration</h3></div></div></div><p>Part of the DNSSEC process for domains is getting their DS record into the proper TLD zone and signed. The KSK can be created and added to a zone, but without a DS record there is no way for resolvers to validate or connect the signatures to the root. This is handled by the site&rsquo;s registrar. </p><p>As of 27 May 2014, 35 registrars can accept DS records. This includes many leading registrars such as <span class="emphasis"><em>GoDaddy</em></span>, <span class="emphasis"><em>DYN</em></span> and <span class="emphasis"><em>OVH</em></span>. Several of these registrars also handle signing services if needed. A full list is provided by ICANN [<span class="citation"><a href="#citation.25">25</a></span>]. As of 2013, all new registrar applicants are required to support DNSSEC [<span class="citation"><a href="#citation.26">26</a></span>]. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4341672"></a>Validating resolvers</h3></div></div></div><p>Even with all of the root, TLD, and authoritative servers serving valid DNSSEC records, they need to be validated by resolvers to have any weight. </p><p><span class="emphasis"><em>Comcast</em></span> was one of the first major services to validate DNSSEC records by default. All of <span class="emphasis"><em>Comcast</em></span>&rsquo;s domains were signed and customer DNSSEC validation was turned on in January 2012 [<span class="citation"><a href="#citation.27">27</a></span>]. <span class="emphasis"><em>Google Public DNS</em></span> is another popular DNS resolver service that started validating DNSSEC responses by default on 6 May 2013[<span class="citation"><a href="#citation.28">28</a></span>]. </p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3373156"></a>Conclusions</h2></div></div></div><p>DNSSEC is a valuable tool for improving the trust and integrity of DNS, the backbone of the modern Internet. DNSSEC deployment is still in its infancy, less than five per cent of all zones had been signed as of mid-2014. Though is has its detractors, adoption is increasing and DNSSEC is becoming a core tool in the development of a safer and more trustworthy Internet.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4058840"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] <span class="bibliosource"><a href="https://kb.isc.org/article/AA-00924/0/CVE-2008-1447%3A-DNS-Cache-Poisoning-Issue-Kaminsky-bug.html" target="_blank">https://kb.isc.org/article/AA-00924/0/CVE-2008-1447%3A-DNS-Cache-Poisoning-Issue-Kaminsky-bug.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] <span class="bibliosource"><a href="https://www.iana.org/domains/root/servers" target="_blank">http://www.iana.org/domains/root/servers</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] <span class="bibliosource"><a href="https://www.zoneedit.com/doc/rfc/" target="_blank">http://www.zoneedit.com/doc/rfc/</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] <span class="bibliosource"><a href="http://spectrum.ieee.org/images/oct08/images/phish03.pdf" target="_blank">http://spectrum.ieee.org/images/oct08/images/phish03.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] <span class="bibliosource"><a href="https://nmap.org/nsedoc/scripts/dns-nsec3-enum.html" target="_blank">http://nmap.org/nsedoc/scripts/dns-nsec3-enum.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] <span class="bibliosource"><a href="http://dankaminsky.com/2011/01/05/djb-ccc/#whitelies" target="_blank">http://dankaminsky.com/2011/01/05/djb-ccc/#whitelies</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] <span class="bibliosource"><a href="http://www.kslaw.com/imageserver/KSPublic/library/publication/2011articles/ 11-11WorldECRCloutierCohen.pdf" target="_blank">http://www.kslaw.com/imageserver/KSPublic/library/publication/2011articles/ 11-11WorldECRCloutierCohen.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] <span class="bibliosource"><a href="http://www.circleid.com/posts/20130820_a_question_of_dns_protocols/" target="_blank">http://www.circleid.com/posts/20130820_a_question_of_dns_protocols/</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] <span class="bibliosource"><a href="https://nakedsecurity.sophos.com/2013/01/08/the-turktrust-ssl-certificate-fiasco-what-happenedand-what-happens-next/" target="_blank">http://nakedsecurity.sophos.com/2013/01/08/the-turktrust-ssl-certificate-fiasco-what-happenedand-what-happens-next</a>/</span>.</p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] <span class="bibliosource"><a href="https://krebsonsecurity.com/2013/01/turkish-registrar-enabled-phishers-to-spoof-google/" target="_blank">https://krebsonsecurity.com/2013/01/turkish-registrar-enabled-phishers-to-spoof-google/</a></span>.</p></div><div class="bibliomixed"><a id="citation.11"></a><p class="bibliomixed">[11] <span class="bibliosource"><a href="https://threatpost.com/final-report-diginotar-hack-shows-total-compromise-caservers-103112/77170" target="_blank">http://threatpost.com/final-report-diginotar-hack-shows-total-compromise-caservers-103112/77170</a></span>.</p></div><div class="bibliomixed"><a id="citation.12"></a><p class="bibliomixed">[12] <span class="bibliosource"><a href="https://tools.ietf.org/html/rfc6698" target="_blank">http://tools.ietf.org/html/rfc6698</a></span>.</p></div><div class="bibliomixed"><a id="citation.13"></a><p class="bibliomixed">[13] <span class="bibliosource"><a href="http://www.root-dnssec.org/wp-content/uploads/2010/02/draft-icann-dnssec-ceremonies-00.txt" target="_blank">http://www.root-dnssec.org/wp-content/uploads/2010/02/draft-icann-dnssec-ceremonies-00.txt</a></span>.</p></div><div class="bibliomixed"><a id="citation.14"></a><p class="bibliomixed">[14] <span class="bibliosource"><a href="http://www.circleid.com/posts/20090602_org_first_open_top_level_domain_dnssec/" target="_blank">http://www.circleid.com/posts/20090602_org_first_open_top_level_domain_dnssec/</a></span>.</p></div><div class="bibliomixed"><a id="citation.15"></a><p class="bibliomixed">[15] <span class="bibliosource"><a href="http://stats.research.icann.org/dns/tld_report/" target="_blank">http://stats.research.icann.org/dns/tld_report/</a></span>.</p></div><div class="bibliomixed"><a id="citation.16"></a><p class="bibliomixed">[16] <span class="bibliosource"><a href="http://tldwithdnssecandipv6.se/" target="_blank">http://tldwithdnssecandipv6.se/</a></span>.</p></div><div class="bibliomixed"><a id="citation.17"></a><p class="bibliomixed">[17] <span class="bibliosource"><a href="http://rick.eng.br/dnssecstat/" target="_blank">http://rick.eng.br/dnssecstat/</a></span>.</p></div><div class="bibliomixed"><a id="citation.18"></a><p class="bibliomixed">[18] <span class="bibliosource"><a href="https://www.dnssec-deployment.org/index.php/2012/01/new-gtlds-will-support-dnssec-fromthe-start/" target="_blank">https://www.dnssec-deployment.org/index.php/2012/01/new-gtlds-will-support-dnssec-fromthe-start/</a></span>.</p></div><div class="bibliomixed"><a id="citation.19"></a><p class="bibliomixed">[19] <span class="bibliosource"><a href="https://london50.icann.org/en/schedule/wed-dnssec/presentation-dnssec-eu-25jun14-en" target="_blank">https://london50.icann.org/en/schedule/wed-dnssec/presentation-dnssec-eu-25jun14-en</a></span>.</p></div><div class="bibliomixed"><a id="citation.20"></a><p class="bibliomixed">[20] <span class="bibliosource"><a href="http://www.apirc.org/previous/2013/wjxz/201309/P020130930491213318448.pdf" target="_blank">http://www.apirc.org/previous/2013/wjxz/201309/P020130930491213318448.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.21"></a><p class="bibliomixed">[21] <span class="bibliosource"><a href="https://www.ietf.org/rfc/rfc4641.txt" target="_blank">http://www.ietf.org/rfc/rfc4641.txt</a></span>.</p></div><div class="bibliomixed"><a id="citation.22"></a><p class="bibliomixed">[22] <span class="bibliosource"><a href="https://www.icann.org/en/system/files/files/menog-dnssec-deployment-30apr12-en.pdf" target="_blank">https://www.icann.org/en/system/files/files/menog-dnssec-deployment-30apr12-en.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.23"></a><p class="bibliomixed">[23] <span class="bibliosource"><a href="https://scoreboard.verisignlabs.com/count-trace.png" target="_blank">http://scoreboard.verisignlabs.com/count-trace.png</a></span>.</p></div><div class="bibliomixed"><a id="citation.24"></a><p class="bibliomixed">[24] <span class="bibliosource"><a href="https://scoreboard.verisignlabs.com/percent-trace.png" target="_blank">http://scoreboard.verisignlabs.com/percent-trace.png</a></span>.</p></div><div class="bibliomixed"><a id="citation.25"></a><p class="bibliomixed">[25] <span class="bibliosource"><a href="https://www.icann.org/resources/pages/deployment-2012-02-25-en" target="_blank">https://www.icann.org/resources/pages/deployment-2012-02-25-en</a></span>.</p></div><div class="bibliomixed"><a id="citation.26"></a><p class="bibliomixed">[26] <span class="bibliosource"><a href="https://www.internetsociety.org/deploy360/blog/2013/09/icanns-2013-raa-requires-domainname-registrars-to-support-dnssec-ipv6/." target="_blank">http://www.internetsociety.org/deploy360/blog/2013/09/icanns-2013-raa-requires-domainname-registrars-to-support-dnssec-ipv6/</a></span>.</p></div><div class="bibliomixed"><a id="citation.27"></a><p class="bibliomixed">[27] <span class="bibliosource"><a href="https://www.internetsociety.org/deploy360/resources/case-study-comcasts-dnssecimplementation/" target="_blank">http://www.internetsociety.org/deploy360/resources/case-study-comcasts-dnssecimplementation/</a></span>.</p></div><div class="bibliomixed"><a id="citation.28"></a><p class="bibliomixed">[28] <span class="bibliosource"><a href="https://groups.google.com/forum/?hl=en#!topic/public-dns-announce/67oxFjSLeUM" target="_blank">https://groups.google.com/forum/?hl=en#!topic/public-dns-announce/67oxFjSLeUM</a></span>.</p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-Sullivan.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: DNSSEC: how far have we come?&url=https://www.virusbulletin.com/virusbulletin/2014/10/paper-dnssec-how-far-have-we-come"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/10/paper-dnssec-how-far-have-we-come'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/10/paper-dnssec-how-far-have-we-come&title=VB2014 paper: DNSSEC: how far have we come?"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/10/paper-dnssec-how-far-have-we-come&t=VB2014 paper: DNSSEC: how far have we come?"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/10/paper-dnssec-how-far-have-we-come"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>