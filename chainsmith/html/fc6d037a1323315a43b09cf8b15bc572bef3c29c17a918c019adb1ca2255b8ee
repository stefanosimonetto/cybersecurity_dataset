<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Profiling binaries for instrumentation</title>
<meta name="description" content="Instrumenting binaries is a technique that is rapidly gaining popularity among security researchers. Profiling the binary beforehand can provide a lot of important information about the target, as Aleksander Czarnowksi explains." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 2559;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb200708-profiling-binaries"></a>Profiling binaries for instrumentation</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2007-08-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Aleksander</span> <span class="surname">Czarnowski</span></h3><span class="orgname">AVET Information and Network Security</span>, <span class="orgdiv">Poland</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Instrumenting binaries is a technique that is rapidly gaining popularity among security researchers. Profiling the binary beforehand can provide a lot of important information about the target, as Aleksander Czarnowksi explains.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2007 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-4675" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-4675" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id4215097">Introduction</a></span></dt><dt><span class="sect1"><a href="#id4718908">The example</a></span></dt><dt><span class="sect1"><a href="#id4313787">Rationale</a></span></dt><dt><span class="sect1"><a href="#id3604156">Test set</a></span></dt><dt><span class="sect1"><a href="#id3099343">Test 1: has the binary been compiled with VS.NET 2005?</a></span></dt><dt><span class="sect1"><a href="#id3599328">Test 2: is __security_init_cookie() present?</a></span></dt><dt><span class="sect1"><a href="#id2721208">Test 3: test for imported functions by __security_init_cookie()</a></span></dt><dt><span class="sect1"><a href="#id3286118">Test 4: prolog and epilog analysis</a></span></dt><dt><span class="sect1"><a href="#id3388761">Practice</a></span></dt><dt><span class="sect1"><a href="#id3912799">The process</a></span></dt><dt><span class="sect1"><a href="#id4174357">Final words</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4215097"></a>Introduction</h2></div></div></div><p>Instrumenting binaries is an analysis technique that is gaining popularity among security researchers for identifying vulnerabilities or analysing malware. However, before one starts on the instrumentation process it is worth profiling the target in order to better control further analysis. To demonstrate, let me use an example.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4718908"></a>The example</h2></div></div></div><p>With <em class="productname">Visual Studio.NET 2005</em>, <em class="phrase">Microsoft</em> introduced a buffer overflow protection scheme (enabled by the /GS switch) based on cookies. The idea behind this safeguard is very similar (to say the least) to the <em class="productname">Immunix Stackguard</em> solution. There are already a couple of good publications detailing how to bypass both /GS and <em class="productname">Stackguard</em>. We will use the code of the /GS safeguard as an example for further discussion.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4313787"></a>Rationale</h2></div></div></div><p>Quick identification of safeguards within binaries can be important during a security audit of binary objects. It can be helpful either during the instrumentation phase or during a static binary audit based strictly on code analysis.</p><p>When we know that a binary contains /GS buffer overflow protection we can:</p><div class="itemizedlist"><ul type="disc"><li><p>Write an exploit that will bypass /GS (we still need to remember about DEP too!).</p></li><li><p>Write a non-executable stack exploit (employing a return-to-glibc style technique).</p></li><li><p>Better model the threat profile for the application.</p></li></ul></div><p>But wait a minute! Aren&rsquo;t <em class="productname">Windows 2003</em> and newer versions of <em class="productname">Windows</em> compiled with /GS enabled on all binaries? Yes they are, and we have to assume that every driver, library, service and application that comes with a system is /GS enabled. However, the same might not be true for third-party applications.</p><p>The real motivation for this work lies in the binaries compiled by a system integrator deployed in an audited system. To model threats and perform risk-based assessment we need to identify safeguards and evaluate their strength. Finding a third-party binary like a DLL or server application in a tested system certainly requires some kind of analysis. Even if you have access to the source code for those binary objects, not all safeguards or vulnerabilities can be identified at source level. While fixing defects, flaws and errors at the source code level is critical, evaluating the security of executed code cannot be skipped either.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3604156"></a>Test set</h2></div></div></div><p> There are several different tests that allow quick identification of the /GS safeguard within a binary:</p><div class="orderedlist"><ol type="1"><li><p>Test if the binary has been compiled with VS.NET 2005 or newer. If not, then it is not possible for the /GS safeguard to be present &ndash; however other similar safeguards could have been deployed (especially if the object is not in PE format but ELF &ndash; however this would apply to Unix binaries which are not discussed here).</p></li><li><p>Look for the security_init_cookie() function within the code &ndash; while the behaviour of the /GS option behaviour has been changed by <em class="phrase">Microsoft</em> between releases of <em class="productname">Visual Studio</em>, the function is still present.</p></li><li><p>Analyse the import table for GetTickCount() and other functions to find whether the security cookie is being initialized.</p></li><li><p>Search prologs and epilogs of main functions for setting up cookies and checking return address integrity?</p></li></ol></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3099343"></a>Test 1: has the binary been compiled with VS.NET 2005?</h2></div></div></div><p>This method has two drawbacks: first, it needs to be upgraded every time a new VS compiler (or service pack) comes out. Secondly, detecting the type of compiler can be time consuming if automatic tools fail to identify the compiler or linker. Unless the binary is protected against disassembly this should not usually happen. Tools like PeID can easily identify the type of compiler. However, identifying the type of compiler still will not tell us whether /GS has been enabled. While it is enabled by default in VS.NET 2005 , a programmer could disable it manually. So this method is not sufficient unless some additional tests are performed.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3599328"></a>Test 2: is __security_init_cookie() present?</h2></div></div></div><p>The /GS mechanism needs initialization which is performed inside the __security_init_cookie() function. This function takes no parameters and it is called near the original entry point. For example, the <em class="productname">Windows Console</em> application that uses _tmain() has the following entry point:</p><pre class="programlisting">wmainCRTStartup proc near
  call  __security_init_cookie
  jmp   __tmainCRTStartup
wmainCRTStartup endp</pre><p>So __security_init_cookie() is being called even before SEH has been set up (take a look at the _tmainCRTStartup code to confirm this).</p><p>The compile code of __security_init_cookie() is as follows:</p><pre class="programlisting">.text:004018B0 __security_init_cookie proc near ; CODE XREF: wmainCRTStartupp
.text:004018B0
.text:004018B0 PerformanceCount= LARGE_INTEGER ptr -10h
.text:004018B0 SystemTimeAsFileTime= _FILETIME ptr -8
.text:004018B0
.text:004018B0   push  ebp
.text:004018B1   mov   ebp, esp
.text:004018B3   sub   esp, 10h
.text:004018B6   mov   eax, __security_cookie
.text:004018BB   and     [ebp+SystemTimeAsFileTime.dwLowDateTime], 0
.text:004018BF   and     [ebp+SystemTimeAsFileTime.dwHighDateTime], 0
.text:004018C3   push  ebx
.text:004018C4   push  edi
.text:004018C5   mov   edi, 0BB40E64Eh
.text:004018CA   cmp   eax, edi
.text:004018CC   mov   ebx, 0FFFF0000h
.text:004018D1   jz    short loc_4018E0
.text:004018D3   test  eax, ebx
.text:004018D5   jz    short loc_4018E0
.text:004018D7   not   eax
.text:004018D9   mov   __security_cookie_complement, eax
.text:004018DE   jmp   short loc_401940
.text:004018E0 ;
 &brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;
.text:004018E0
.text:004018E0 loc_4018E0:   ; CODE XREF: __security_init_cookie+21j
.text:004018E0   ; __security_init_cookie+25j
.text:004018E0   push  esi
.text:004018E1   lea   eax, [ebp+SystemTimeAsFileTime]
.text:004018E4   push  eax   ; lpSystemTimeAsFileTime
.text:004018E5   call  ds:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7629291f1b062929311302250f0502131b221f1b133705301f1a13221f1b133642">[email&#160;protected]</a> ; GetSystemTimeAsFileTime(x)
.text:004018EB   mov   esi, [ebp+SystemTimeAsFileTime.dwHighDateTime]
.text:004018EE   xor   esi, [ebp+SystemTimeAsFileTime.dwLowDateTime]
.text:004018F1   call  ds:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="045b5b6d69745b5b43617047717676616a7054766b676177774d604434">[email&#160;protected]</a> ; GetCurrentProcessId()
.text:004018F7   xor   esi, eax
.text:004018F9   call    ds:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="adf2f2c4c0ddf2f2eac8d9eed8dfdfc8c3d9f9c5dfc8ccc9e4c9ed9d">[email&#160;protected]</a> ; GetCurrentThreadId()
.text:004018FF   xor   esi, eax
.text:00401901   call    ds:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c39c9caaaeb39c9c84a6b797aaa0a880acb6adb783f3">[email&#160;protected]</a> ; GetTickCount()
.text:00401907   xor   esi, eax
.text:00401909   lea   eax, [ebp+PerformanceCount]
.text:0040190C   push  eax   ; lpPerformanceCount
.text:0040190D   call    ds:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2679794f4b567979775343545f7643544049544b47484543654953485243546612">[email&#160;protected]</a> ; QueryPerformanceCounter(x)
.text:00401913   mov   eax, dword ptr [ebp+PerformanceCount+4]
.text:00401916   xor   eax, dword ptr [ebp+PerformanceCount]
.text:00401919   xor   esi, eax
.text:0040191B   cmp   esi, edi
.text:0040191D   jnz   short loc_401926
.text:0040191F   mov   esi, 0BB40E64Fh
.text:00401924   jmp   short loc_401931
.text:00401926 ;
&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;&brvbar;
.text:00401926
.text:00401926 loc_401926:     ; CODE XREF: __security_init_cookie+6Dj
.text:00401926   test  esi, ebx
.text:00401928   jnz   short loc_401931
.text:0040192A   mov   eax, esi
.text:0040192C   shl   eax, 10h
.text:0040192F   or    esi, eax
.text:00401931
.text:00401931 loc_401931:     ; CODE XREF: __security_init_cookie+74j
.text:00401931                ;  __security_init_cookie+78j
.text:00401931   mov   __security_cookie, esi
.text:00401937   not   esi
.text:00401939   mov     __security_cookie_complement, esi
.text:0040193F   pop   esi
.text:00401940
.text:00401940 loc_401940:         ; CODE XREF: __security_init_cookie+2Ej
.text:00401940   pop   edi
.text:00401941   pop   ebx
.text:00401942   leave
.text:00401943   retn
.text:00401943 __security_init_cookie endp</pre><p>As you can see this function takes no parameters, so despite the fact that it is being called near the original entry point there is nothing special that could help us in its identification by using calling convention and/or passed parameters. In such a case we need to use the function code as a signature.</p><p>Take a look at this code snippet:</p><pre class="programlisting">.text:004018C5   mov   edi, 0BB40E64Eh
.text:004018CA   cmp   eax, edi
.text:004018CC   mov   ebx, 0FFFF0000h</pre><p>It seems that we can use the 0xBB4OE64E value as a signature. Three bytes further on there is another value we can use in a signature: 0xFFFF0000. If we find such a signature within the code section of a binary it is probable that it contains code for a /GS safeguard.</p><p>We can perform an additional test &ndash; take a look at address 0x004018B6:</p><pre class="programlisting">.text:004018B6   mov     eax, __security_cookie</pre><p>The value of __security_cookie is set to 0x0BB4E64E:</p><pre class="programlisting">.data:00403018 __security_cookie dd 0BB40E64Eh</pre><p>So we can look for 0x0BB4E64E twice: once in the code section (.text) and once in the data section (.data). If we find both occurrences in both sections we can assume that the binary has been compiled with /GS code. The whole code of the __security_init_cookie() function can also be used as a signature. This method can be extended further by looking for other /GS functions like: </p><div class="itemizedlist"><ul type="disc"><li><p>__security_check_cookie()</p></li><li><p>__report_gs_failure()</p></li></ul></div><p>Of course, searching a binary for signatures based on initial values will not work if <em class="phrase">Microsoft</em> changes them in the next compiler.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Signature used within the __security_init_cookie() function." src="/uploads/images/figures/2007/08/fig1alex.gif" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Signature used within the __security_init_cookie() function.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2721208"></a>Test 3: test for imported functions by __security_init_cookie()</h2></div></div></div><p>If you have analysed the compile code of __security_init_cookie() you will already know that it uses the following functions:</p><div class="itemizedlist"><ul type="disc"><li><p>GetSystemTimeAsFileTime(x)</p></li><li><p>GetCurrentProcessId()</p></li><li><p>GetCurrentThreadId()</p></li><li><p>GetTickCount()</p></li><li><p>QueryPerformanceCounter()</p></li></ul></div><p>This leads us to a simple conclusion: if we find such imports in the Import Address Table (IAT) then there is a chance that the binary contains /GS code. Parsing the IAT table (providing it is not protected and the binary is not compressed) is trivial, reliable and can easily be implemented inside the static binary audit process.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3286118"></a>Test 4: prolog and epilog analysis</h2></div></div></div><p>This method works very well in the case of dynamic analysis (or code emulation) and can easily be automated. If you are tracing (or &lsquo;stalking&rsquo;) code you just need to intercept the call instructions. After a call is executed the prolog function can be analysed. However, remember that not every function being called (either by call or by push/jmp) uses the /GS safeguard. Here is an example:</p><pre class="programlisting">.text:00401000 Base__demo  proc near  ; DATA XREF: .rdata:const Base::&lsquo;vftable&rsquo;  o
.text:00401000   push  offset aBaseClass ; &ldquo;Base class\n&rdquo;
.text:00401005   call  ds:__imp__wprintf
.text:0040100B   pop   ecx
.text:0040100C   retn
.text:0040100C Base__demo    endp</pre><p>As you can see, this function is even missing the typical push ebp/mov ebp, esp prolog! So look for /GS code only if the function has a standard prolog and local variables are allocated on the stack.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3388761"></a>Practice</h2></div></div></div><p>Unless you are using dynamic analysis, a combination of test method 3 with test method 2 is the most practical as these don&rsquo;t require full disassembly of the object.</p><p>Method 4 and looking for the execution of __security_init_cookie() is reasonable during dynamic analysis and doesn&rsquo;t incur a huge performance hit &ndash; especially if you disable the check for /GS code after the first hit of __security_init_cookie() and __security_check_cookie(). Similar rules apply in other cases. </p><p>Profiling can also be used for quick identification of compressed binaries, entry point obfuscation or internal use of strong cryptography.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3912799"></a>The process</h2></div></div></div><p>We can break up the process into the following steps assuming PE file format:</p><div class="orderedlist"><ol type="1"><li><p>Is it a PE file? Check the signature.</p></li><li><p>Is it 32- or 64-bit? Assume proper values.</p></li><li><p>Is it a .NET managed file?</p></li><li><p>Is it a DLL?</p></li><li><p>Are loader flags standard?</p></li><li><p>Is base address standard? No: could it be some anti-debugging technique?</p></li><li><p>Is IAT correct? No: could it be some anti-debugging technique or a compressed binary?</p></li><li><p>What entries are in IAT?</p></li><li><p>Scan the binary for cryptographic algorithm initialization values.</p></li></ol></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4174357"></a>Final words</h2></div></div></div><p>A lot of anti-debugging schemes deploy some of the above techniques to protect application code. While the example described in this article is trivial, profiling can provide a lot of important information about the target we wish to analyse (assuming that the binary is not compressed internally [with <em class="productname">UPX</em> or other similar tools], its code is neither obfuscated nor encrypted, and the IAT table is intact).</p><p>Most profiling techniques are easy to implement and time efficient. What&rsquo;s more important is that they can be built on top of a debugger (like <em class="productname">OllyDBG</em> ) or disassembler (like <em class="productname">IDA Pro</em>, e.g. the FindCrypto plug-in <a href="http://hexblog.com/2006/01/findcrypt.html" target="_blank">http://hexblog.com/2006/01/findcrypt.html</a>) to aid the analysis process.</p></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Profiling binaries for instrumentation&url=https://www.virusbulletin.com/virusbulletin/2007/08/profiling-binaries-instrumentation"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2007/08/profiling-binaries-instrumentation'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2007/08/profiling-binaries-instrumentation&title=Profiling binaries for instrumentation"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2007/08/profiling-binaries-instrumentation&t=Profiling binaries for instrumentation"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2007/08/profiling-binaries-instrumentation"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>