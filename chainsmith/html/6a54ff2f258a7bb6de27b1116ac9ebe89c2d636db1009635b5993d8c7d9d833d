<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2014 paper: Ubiquitous Flash, ubiquitous exploits, ubiquitous mitigation</title>
<meta name="description" content="Thanks to the ubiquity of Adobe Flash Player, Adobe Flash Player vulnerabilities have become a major target for attackers who want to deliver attacks from web pages. In 2014, some new exploits appeared, targeting two vulnerabilities (CVE-2013-5330 and CVE-2014-0497) in a new feature of Adobe applications â€“ domain memory opcode (or Alchemy opcode). In their VB2014 paper, Chun Feng and Elia Florio analyse the technical details of exploits using these vulnerabilities. They unveil some interesting tricks used by these exploits to make the attacks more reliable and stealthy, and discuss the malware components distributed by the exploits." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1570;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201501-ubiquitous"></a>VB2014 paper: Ubiquitous Flash, ubiquitous exploits, ubiquitous mitigation</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2015-01-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Chun</span> <span class="surname">Feng</span></h3><span class="orgname">Microsoft</span>, <span class="orgdiv">Australia</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Elia</span> <span class="surname">Florio</span></h3><span class="orgname">Microsoft</span>, <span class="orgdiv">USA</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Thanks to the ubiquity of Adobe Flash Player, Adobe Flash Player vulnerabilities have become a major target for attackers who want to deliver attacks from web pages. In 2014, some new exploits appeared, targeting two vulnerabilities (CVE-2013-5330 and CVE-2014-0497) in a new feature of Adobe applications &ndash; domain memory opcode (or Alchemy opcode). In their VB2014 paper, Chun Feng and Elia Florio analyse the technical details of exploits using these vulnerabilities. They unveil some interesting tricks used by these exploits to make the attacks more reliable and stealthy, and discuss the malware components distributed by the exploits.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2015 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2139" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2139" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3216157">Abstract</a></span></dt><dt><span class="sect1"><a href="#id4336751">1. Introduction</a></span></dt><dt><span class="sect1"><a href="#id2829642">2. Domain memory opcode (Alchemy opcode)</a></span></dt><dt><span class="sect1"><a href="#id2629294">3. Analysis of CVE-2013-5330 exploit</a></span></dt><dt><span class="sect1"><a href="#id3855386">4. Analysis of CVE-2014-0497 exploit</a></span></dt><dt><span class="sect1"><a href="#id3980792">5. Analysis of Flash-based exploitation for Internet Explorer vulnerabilities</a></span></dt><dt><span class="sect1"><a href="#id2249376">6. Mitigation</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4949661">6.1 Mitigation from Adobe</a></span></dt><dt><span class="sect2"><a href="#id4392092">6.2 Mitigation from Microsoft</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3982360">7. Conclusion and future work</a></span></dt><dt><span class="sect1"><a href="#id3982362">Acknowledgement</a></span></dt><dt><span class="sect1"><a href="#id2194013">Appendix</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3216157"></a>Abstract</h2></div></div></div><p>According to <span class="emphasis"><em>Adobe</em></span>, <span class="emphasis"><em>Adobe Flash Player</em></span> reaches &lsquo;over 1.3 billion people across browsers and OS versions with no install&rsquo; [<span class="citation"><a href="#citation.1">1</a></span>]. Hence, <span class="emphasis"><em>Adobe Flash Player</em></span> vulnerabilities have become a major target for attackers who want to deliver attacks from web pages, along with security researchers in public contests such as pwn2own, where the value of a Flash zero-day vulnerability starts at around $70,000 [<span class="citation"><a href="#citation.2">2</a></span>], [<span class="citation"><a href="#citation.3">3</a></span>].</p><p>Since 2012, we have seen a small increase in the number of Flash vulnerabilities exploited in real attacks and for malicious intent [<span class="citation"><a href="#citation.4">4</a></span>]. The fact that these vulnerabilities are quite different &ndash; ranging from canonical heap and integer overflow to type/object confusion and use-after-free (UAF) vulnerabilities &ndash; proves that attackers are actively looking into Flash code to find weaknesses that can be abused to execute malicious code.</p><p>In particular in 2014, we have seen some new exploits which target two vulnerabilities (CVE-2013-5330 and CVE-2014-0497) in a new feature of <span class="emphasis"><em>Adobe</em></span> applications &ndash; domain memory opcode (also known as Alchemy opcode).</p><p>This paper analyses the technical details of exploits using CVE 2013-5330 and CVE-2014-0497. It unveils some interesting tricks used by these exploits to make the attacks more reliable and stealthy, such as improved leaked gadgets using a just-in-time (JIT) spray technique. The malware components distributed by these exploits, namely Win32/Lurk and Win32/Siromost, will also be discussed.</p><p>Fortunately, <span class="emphasis"><em>Adobe</em></span> has introduced changes in Flash designed to break JIT spray techniques, and <span class="emphasis"><em>Microsoft</em></span>&rsquo;s <span class="emphasis"><em>Enhanced Mitigation Experience Toolkit </em></span>(<span class="emphasis"><em>EMET</em></span>) can provide some help in mitigating these and other memory corruption exploits. <span class="emphasis"><em>Adobe</em></span>&rsquo;s changes and <span class="emphasis"><em>EMET</em></span> both attempt to break some of the exploitation techniques used by attackers, and provide some degree of protection even before the vendor has released a patch. This paper will indicate how <span class="emphasis"><em>EMET</em></span> can be used successfully to mitigate similar memory corruption exploits, and what mitigations can be more or less effective against these attacks.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4336751"></a>1. Introduction</h2></div></div></div><p><span class="emphasis"><em>Adobe Flash Player </em></span>is a popular piece of free software which can run ShockWave Flash (SWF) files &ndash; an <span class="emphasis"><em>Adobe</em></span> Flash file format used for multimedia, vector graphics and ActionScript. <span class="emphasis"><em>Adobe Flash Player</em></span> can be used to execute rich Internet applications, including the delivery of console-quality games to the web browser and the streaming of high-quality video and audio content. According to <span class="emphasis"><em>Adobe</em></span>, <span class="emphasis"><em>Adobe Flash Player</em></span> reaches &lsquo;over 1.3 billion people across browsers and [operating system] versions with no install.&rsquo; [<span class="citation"><a href="#citation.1">1</a></span>]</p><p><span class="emphasis"><em>Adobe Flash Player</em></span> can run either from a web browser (as a web browser plug-in) or as a standalone application. The SWF file format supported by <span class="emphasis"><em>Adobe Flash Player </em></span>can be generated from <span class="emphasis"><em>Adobe</em></span> products, such as <span class="emphasis"><em>Adobe Flex SDK </em></span>and <span class="emphasis"><em>Adobe Flash Builder</em></span>. Developers can create SWF files using ActionScript, a script language based on ECMAScript.</p><p>Due to the high prevalence of <span class="emphasis"><em>Adobe Flash Player</em></span>, attackers have continuously been exploiting the vulnerabilities in the player or leveraging malicious SWF files to deliver attacks. Malicious SWF files are crafted by the attackers and hosted on malicious websites, and the attackers inject malicious scripts into benign websites to redirect to their malicious websites. Users will be infected if they visit these compromised, benign websites with a vulnerable version of <span class="emphasis"><em>Adobe Flash Playe</em></span>r.</p><p>The remainder of this paper is organized as follows:</p><div class="itemizedlist"><ul type="disc"><li><p>Section 2 discusses domain memory opcode (Alchemy opcode) &ndash; a new feature introduced in <span class="emphasis"><em>Adobe Flash Player </em></span>version 11.</p></li><li><p>Sections 3 and 4 analyse two domain memory opcode related exploits which exploit the CVE-2013-5330 and CVE-2014-0497 vulnerabilities.</p></li><li><p>Section 5 explains how a malicious SWF file can also be used as a helper file to exploit vulnerabilities in <span class="emphasis"><em>Internet Explorer </em></span>(as seen in attacks that exploit the CVE 2014 1776, CVE 2014-0322 and CVE-2013-3163 vulnerabilities).</p></li><li><p>Section 6 presents the mitigation of these attacks from both <span class="emphasis"><em>Adobe</em></span> and <span class="emphasis"><em>Microsoft</em></span>.</p></li><li><p>Section 7 provides a conclusion and outlines future work.</p></li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2829642"></a>2. Domain memory opcode (Alchemy opcode)</h2></div></div></div><p>The history of domain memory opcode dates back to 2008, when <span class="emphasis"><em>Adobe</em></span> released &lsquo;Project Alchemy&rsquo; on the <span class="emphasis"><em>Adobe Labs</em></span> website [<span class="citation"><a href="#citation.5">5</a></span>]. Alchemy allows users to compile C and C++ code into ActionScript libraries (AVM2). In 2012, <span class="emphasis"><em>Adobe</em></span> released domain memory as a premium feature of A<span class="emphasis"><em>dobe Flash Player </em></span>(thus requiring a separate licence from <span class="emphasis"><em>Adobe</em></span>). This feature provides fast memory access to &lsquo;domain memory&rsquo;. In late 2012, Project Alchemy became the Flash Runtime C++ Compiler (FlashCC) [<span class="citation"><a href="#citation.6">6</a></span>]. In 2013, <span class="emphasis"><em>Adobe</em></span> announced that &lsquo;the Flash C++ Compiler (FlashCC) has been contributed to open source as CrossBridge and will be delivered through GitHub&rsquo; [<span class="citation"><a href="#citation.7">7</a></span>].</p><p>Domain memory opcodes supported by the <span class="emphasis"><em>Adobe Flash Player</em></span> are listed in <a href="#table.1">Table 1</a>.</p><div class="table"><a id="table.1"></a><table border="1" summary="Domain memory opcodes. These opcodes provide fast read/write
      access of ByteArray."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Opcode</th><th align="center">Comment</th></tr></thead><tbody><tr><td>li8</td><td>Load 8-bit integer</td></tr><tr><td>li16</td><td>Load 16-bit integer</td></tr><tr><td>li32</td><td>Load 32-bit integer</td></tr><tr><td>lf32</td><td>Load 32-bit float</td></tr><tr><td>lf64</td><td>Load 64-bit float</td></tr><tr><td>si8</td><td>Store 8-bit integer</td></tr><tr><td>si16</td><td>Store 16-bit integer</td></tr><tr><td>si32</td><td>Store 32-bit integer</td></tr><tr><td>sf32</td><td>Store 32-bit float</td></tr><tr><td>sf64</td><td>Store 64-bit float</td></tr><tr><td>sxi1</td><td>Signed extend 1-bit integer to 32 bits</td></tr><tr><td>sxi8</td><td>Signed extend 8-bit integer to 32 bits</td></tr><tr><td>sxi16</td><td>Signed extend 16-bit integer to 32 bits</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Domain memory opcodes. These opcodes provide fast read/write access of ByteArray.</b></p></div><p><a href="#figure.1">Figure 1</a> shows an example access of ByteArray with domain memory opcodes.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Example code snippet using domain memory opcodes." src="/uploads/images/figures/2015/01/FengFlorio-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Example code snippet using domain memory opcodes.</b></p></div><p>To use the domain memory opcodes, developers need to use ActionScript Compiler (ASC) 2.0, since ASC 1.0 does not directly support these opcodes. Domain memory opcodes are defined as package-level functions inside package avm2.intrinsics.memory (see <a href="#figure.2">Figure 2</a>).</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="The definition of &lsquo;domain memory opcode&rsquo;." src="/uploads/images/figures/2015/01/FengFlorio-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;The definition of &lsquo;domain memory opcode&rsquo;.</b></p></div><p>ASC 2.0 will automatically replace these &lsquo;intrinsic&rsquo; function calls with the equivalent domain memory opcodes listed in <a href="#table.1">Table 1</a> [<span class="citation"><a href="#citation.8">8</a></span>].</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2629294"></a>3. Analysis of CVE-2013-5330 exploit</h2></div></div></div><p><span class="emphasis"><em>Adobe</em></span> released security updates for CVE-2013-5330 on 12 November 2013 [<span class="citation"><a href="#citation.9">9</a></span>]. Versions of <span class="emphasis"><em>Adobe Flash Player for Window</em></span>s up to and including 11.9.900.117 are affected by this vulnerability.</p><p>A bug in <span class="emphasis"><em>Adobe Flash Player </em></span>causes a failure in memory range validation for domain memory op-codes li*/si*. Though <span class="emphasis"><em>Adobe Flash Player</em></span> does validate the memory range for li*/si* instructions, there is a logic error in the function that performs the range check. An attacker can craft a SWF file with the ActionScript code shown in<a href="#figure.3">Figure 3</a> to trigger this vulnerability.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="ActionScript trigger code." src="/uploads/images/figures/2015/01/FengFlorio-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;ActionScript trigger code.</b></p></div><p>In this ActionScript expression, two op_li32 instructions are &lsquo;anded&rsquo; together: the first op_li32 is legal, whereas the second is illegal since index -248 is out of bound. However, due to a logic error in the function, the second li32 does not cause a runtime error in a vulnerable version of <span class="emphasis"><em>Adobe Flash Player</em></span>. As a result, this vulnerability allows the attacker to use crafted li*/si* instructions to read/write an arbitrary memory location, immediately giving the attacker two very powerful exploitation &lsquo;primitives&rsquo; that allow them to read/write process memory without the need for sophisticated tricks to neutralize unwanted side effects of typical memory corruption bugs (such as overflows and UAF).</p><p>The first exploit sample for CVE-2013-5330 (SHA1: 1514F6F59CE00BD98493C1AC3EED7BF86CB5A4BE) was observed in the wild by security researchers [<span class="citation"><a href="#citation.10">10</a></span>] on 31 January 2014 (more than two months after Adobe had released the patch for it). The sample was distributed by a common exploit kit (unnamed by the researchers) as a SWF file protected with the obfuscator SecureSWF. The sample has been designed as a &lsquo;one-stop&rsquo; attack: it contains the vulnerability&rsquo;s trigger, the shellcode generator, and an encrypted PE file [<span class="citation"><a href="#citation.11">11</a></span>].</p><p>The exploit sample sprays the heap with an Object type and makes sure the domain memory ByteArray data starts immediately after the sprayed Object types (<a href="#figure.4">Figure 4</a>). It then uses two successive li32 instructions to trigger the vulnerability so it can access the out-of-bound memory. In this case, it uses negative offsets to access the memory backwards and successfully overwrites the VTABLE (virtual table) for the Object. In the new VTABLE, offsets 0x48&ndash;0x64 contain the new virtual function pointer (<a href="#figure.5">Figure 5</a>), so the virtual function pointer for MethodEnv::getpropertylate_i() is redirected to the controlled address. Later, when the ActionScript tries to access the object, the virtual function MethodEnv::getpropertylate_i() is called, and control is transferred to the controlled address.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="CVE-2013-5330 heap spray memory layout." src="/uploads/images/figures/2015/01/FengFlorio-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;CVE-2013-5330 heap spray memory layout.</b></p></div><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="The fake VTABLE used by the CVE-2013-5330 exploit." src="/uploads/images/figures/2015/01/FengFlorio-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;The fake VTABLE used by the CVE-2013-5330 exploit.</b></p></div><p>Unlike other <span class="emphasis"><em>Adobe</em></span> Flash exploit samples, which usually transfer control to the return oriented pro-gramming (ROP) gadgets built from an <span class="emphasis"><em>Adobe Flash Player</em></span> DLL file in order to bypass data execution prevention (DEP), this sample transfers code to the JIT spray gadgets instead.</p><p>The ActionScript uses some consecutive local variant assignments to achieve the JIT spray (<a href="#figure.6">Figure 6</a>). The code generated by the <span class="emphasis"><em>Adobe Flash Player </em></span>JIT compiler is depicted in <a href="#figure.7">Figure 7</a>.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="ActionScript for JIT spray." src="/uploads/images/figures/2015/01/FengFlorio-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;ActionScript for JIT spray.</b></p></div><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="JIT code generated from local variable assignments." src="/uploads/images/figures/2015/01/FengFlorio-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;JIT code generated from local variable assignments.</b></p></div><p>When the bytes generated by the JIT compiler are executed from offset 6, the mov instructions are no longer mov instructions. Instead, they become JIT gadgets (<a href="#table.2">Table 2</a>). These JIT gadgets make up a call to VirtualProtect(), which makes the shellcode memory executable. Note that the exploit won&rsquo;t work on Flash versions higher than 11.8, which break the generation of these JIT gadgets.</p><div class="table"><a id="table.2"></a><table border="1" summary="JIT spray gadgets."><colgroup><col /><col /></colgroup><thead><tr><th align="center">JIT-generated code</th><th align="center">Description</th></tr></thead><tbody><tr><td><pre class="programlisting">90    nop
90    nop
eb06  jmp  0ca3d8b1
</pre></td><td>&nbsp;</td></tr><tr><td><pre class="programlisting">60    pushad
9     nop
eb06  jmp  0ca3d8bb
</pre></td><td>&nbsp;</td></tr><tr><td><pre class="programlisting">8bd   mov  ebx,esp
eb06  jmp  0ca3d8c5
</pre></td><td>;save stack pointer in EBX</td></tr><tr><td><pre class="programlisting">8b21  mov  esp,dword ptr [ecx]
eb06  jmp  0ca3d8cf
</pre></td><td>;stack-pivoting<p>;ESP -&gt; heap object controlled by attacker </p></td></tr><tr><td><pre class="programlisting">44    inc  esp
44    inc  esp
eb06  jmp  0ca3d8d9
</pre></td><td>&nbsp;</td></tr><tr><td><pre class="programlisting">44    inc  esp
44    inc  esp
eb06  jmp  0ca3d8e3
</pre></td><td>;add +4 to ESP</td></tr><tr><td><pre class="programlisting">6a7f  push 7Fh
eb06  jmp  0ca3d8ed
</pre></td><td>&nbsp;</td></tr><tr><td><pre class="programlisting">58    pop  eax
90    nop
eb06  jmp  0ca3d8f7
</pre></td><td>&nbsp;</td></tr><tr><td><pre class="programlisting">d1c0  rol  eax,1
eb06  jmp  0ca3d901
</pre></td><td>&nbsp;</td></tr><tr><td><pre class="programlisting">d1c0  rol  eax,1
eb06  jmp  0ca3d90b
</pre></td><td>;at the end of this EAX=0x1FC</td></tr><tr><td><pre class="programlisting">03e0  add  esp,eax
eb06  jmp  0ca3d915
</pre></td><td>;need to add 0x200 to ESP to find the correct offset that will point the stack to the attacker&rsquo;s data</td></tr><tr><td><pre class="programlisting">58    pop  eax
90    nop
eb06  jmp  0ca3d91f
</pre></td><td>;EAX is popped from the stack, attacker has placed an API address here</td></tr><tr><td><pre class="programlisting">55    push ebp
90    nop
eb06  jmp  0ca3d929
</pre></td><td>;VirtualProtect copied prologue #1</td></tr><tr><td><pre class="programlisting">8bec  mov  ebp,esp
eb06  jmp  0ca3d933
</pre></td><td>;VirtualProtect copied prologue #2</td></tr><tr><td><pre class="programlisting">ffe0  jmp  eax
eb06  jmp  0ca3d93d
</pre></td><td>EAX=kernel32!VirtualProtectStub+0x5</td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;JIT spray gadgets.</b></p></div><p>The control is then transferred to shellcode memory (which is now executable). Interestingly, the shellcode is only 140 bytes long (refer to the Appendix for the shellcode) &ndash; it doesn&rsquo;t contain the code to resolve the API addresses. Instead, the API addresses are resolved by the ActionScript (see <a href="#figure.8">Figure 8</a> &ndash; the placeholders for the API addresses are marked in red). This trick of performing API resolutions in scripting languages (for example, ActionScript, JavaScript or VBScript) instead of native code is used to make the shellcode stealthier and to avoid behaviour that may trigger the dynamic analysis features of security products (for example, <span class="emphasis"><em>EMET</em></span> Export Address Filtering (EAF) mitigation) [<span class="citation"><a href="#citation.12">12</a></span>]. The shellcode simply drops a DLL file (already decrypted by ActionScript) to the %temp% directory and loads it with a call to LoadLibrary().</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="The placeholders in shellcode." src="/uploads/images/figures/2015/01/FengFlorio-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;The placeholders in shellcode.</b></p></div><p>The dropped PE file (SHA1: 05446C67FF8C0BAFFA969FC5CC4DD62EDCAD46F5) is detected as TrojanSpy:Win32/Lurk [<span class="citation"><a href="#citation.13">13</a></span>]. It registers itself as a PNG image filter (CLSID: A3CCEDF7-2DE2-11D0-86F4-00A0C913F750) so it will be loaded when the web browser needs to decode a PNG image file. Win32/Lurk forwards the exports to the original PNG filter (pngfilt.dll) to make sure the PNG image can be decoded correctly. Win32/Lurk downloads a PE file from a remote server and injects the PE file into the web browser process.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3855386"></a>4. Analysis of CVE-2014-0497 exploit</h2></div></div></div><p><span class="emphasis"><em>Adobe</em></span> released security updates for CVE-2014-0497 on 4 February 2014. Versions of<span class="emphasis"><em> Adobe Flash Player for Windows</em></span> up to and including 12.0.0.43 are vulnerable [<span class="citation"><a href="#citation.14">14</a></span>]. This vulnerability was introduced with the fix in November for CVE 2013-5330, and thus lasted for a very short time and for a limited number of versions [<span class="citation"><a href="#citation.15">15</a></span>].</p><p>Similar to CVE-2013-5330, certain versions of <span class="emphasis"><em>Adobe Flash Player</em></span> fail to validate the memory range for li*/si* instructions. An attacker can use the ActionScript code snippet shown in <a href="#figure.9">Figure 9</a> to bypass the memory range validation.</p><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="The exploit code snippet for CVE-2014-0497." src="/uploads/images/figures/2015/01/FengFlorio-9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;The exploit code snippet for CVE-2014-0497.</b></p></div><p>The first CVE-2014-0497 exploit sample was observed in the wild in February 2014, and <span class="emphasis"><em>Adobe</em></span> promptly responded with an out-of-band patch [<span class="citation"><a href="#citation.14">14</a></span>]. Similar to the CVE-2013-5330 exploit sample, this sample also contains a vulnerability trigger, shellcode generator, and an encrypted PE file [<span class="citation"><a href="#citation.16">16</a></span>]. The exploit sample successfully bypasses the memory range validation and is then able to access out-of-bound memory.</p><p>Initially, the bug is used to leak a pointer into the Flash module to bypass address space layout randomization (ASLR); curiously enough the attacker did not take full advantage of the read/write primitive to dynamically discover gadgets in memory; instead, the exploit contains a large set of hard-coded gadget addresses for almost 20 different Flash versions. These ROP gadgets make up a call to VirtualProtect() to make the shellcode memory region executable and bypass DEP protection. When the ROP chain is prepared, the exploit uses the write primitive to overwrite a virtual function pointer in VTABLE and successfully transfers control to the ROP chain function. The function starts with stack pivot ROP gadgets found in a <span class="emphasis"><em>Flash Player</em></span> DLL and ends with a transfer of control to the shellcode via a jmp esp instruction.</p><p>The shellcode drops a PE file (decrypted by ActionScript) as %temp%\a.exe and executes it. The dropped PE file is detected as TrojanDownloader:Win32/Siromost.A, which simply downloads another PE file from a remote server and then executes it [<span class="citation"><a href="#citation.17">17</a></span>].</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3980792"></a>5. Analysis of Flash-based exploitation for Internet Explorer vulnerabilities</h2></div></div></div><p>A malicious SWF file can not only be used to exploit the vulnerability in <span class="emphasis"><em>Adobe Flash Player</em></span> itself, but also used as a helper to exploit the vulnerability in a web browser.</p><p>Since the <span class="emphasis"><em>Internet Explorer </em></span>(<span class="emphasis"><em>IE</em></span>) process and the <span class="emphasis"><em>Adobe</em></span> Flash plug-in share the same address space, it is possible for the attacker to use an <span class="emphasis"><em>IE</em></span>-specific vulnerability to corrupt data and objects used by Flash. This exploitation technique has been observed in real attacks in at least three different <span class="emphasis"><em>IE</em></span> exploit cases: CVE-2013-3163, CVE-2014-0322 and, recently, CVE 2014-1776. In these three cases, apart from some minor modifications and improvements, the attacker was able to transform a UAF memory corruption into a basic memory corruption overwrite primitive which, when applied to certain Flash objects, can finally become a powerful read/write anywhere exploitation primitive, as seen in <a href="#table.3">Table 3</a>.</p><div class="table"><a id="table.3"></a><table border="1" summary="Corruption primitives."><colgroup><col /><col /><col /></colgroup><thead><tr><th align="center">IE vulnerability</th><th align="center">Corruption primitive used against Flash objects</th><th align="center">SHA1 of corresponding Flash sample</th></tr></thead><tbody><tr><td>CVE-2013-3163</td><td>or dword ptr [esi+8],20000h</td><td>81fe2ae7a685014cafc12c3abbcc5ffc9ab27b7e</td></tr><tr><td>CVE-2014-0322</td><td>inc dword ptr [eax+10h]</td><td>910de05e0113c167ba3878f73c64d55e5a2aff9a</td></tr><tr><td>CVE-2014-1776</td><td>mov [esi+42h], cx</td><td>8dd01c0e60e3cedac0b3914e324c39d8ceb74741</td></tr></tbody></table><p class="title"><b>Table&nbsp;3.&nbsp;Corruption primitives.</b></p></div><p>The helper SWF file works as an &lsquo;exploitation framework&rsquo; to take advantage of <span class="emphasis"><em>IE</em></span>&rsquo;s memory corruption bugs (and those of other browsers) and re-use them against Flash objects. This strategy presents some good advantages for attackers, as described in <a href="#table.4">Table 4</a>.</p><div class="table"><a id="table.4"></a><table border="1" summary="Advantages of SWF file helper."><colgroup><col /><col /></colgroup><thead><tr><th align="center">Characteristic</th><th align="center">Considerations</th></tr></thead><tbody><tr><td>Write once, re-use multiple times</td><td>The ActionScript code is maintained and improved by attackers as a project and can be applied to any browser memory corruption with some minor changes</td></tr><tr><td>Exploit divided into multiple pieces</td><td>Recovery of all exploit artifacts for security vendors becomes more difficult and the <span class="emphasis"><em>IE</em></span> exploit part won&rsquo;t trigger without the Flash counterpart</td></tr><tr><td>Obfuscation</td><td>Flash files can easily be obfuscated and protected and pose some non-trivial challenges for anti virus detection</td></tr><tr><td>Portability</td><td>The framework works well on multiple browsers and doesn&rsquo;t require major changes to be adapted to all <span class="emphasis"><em>IE</em></span> versions</td></tr></tbody></table><p class="title"><b>Table&nbsp;4.&nbsp;Advantages of SWF file helper.</b></p></div><p>In this section, we&rsquo;ll focus the analysis on the Flash sample observed in the exploit of the CVE-2014-0322 vulnerability. At a higher level, the idea and the general functioning of this Flash assisted exploitation technique for <span class="emphasis"><em>IE</em></span> is almost the same in all exploits seen for the CVE-2014-1761, CVE-2014-0322 and CVE-2013-3163 vulnerabilities. The Flash sample initially sprays a large amount Vector.&lt;uint&gt; on the heap, which is a very effective technique for spraying memory in a 32-bit <span class="emphasis"><em>IE</em></span> process. Each Vector.&lt;uint&gt; is normally 0x1000 (one memory page) in length: 0x3fe DWORDs (v[0] to v[0x3fd]) plus another eight bytes for the Vector header. By spraying the heap deliberately, the attacker is trying to put some controlled data at some almost predictable memory location in higher addresses. In this case, the attacker expects to have some controlled data around memory address 0x1a1b????. The next step performed by the exploit is to trigger the UAF vulnerability in <span class="emphasis"><em>IE</em></span>. The in between Flash/<span class="emphasis"><em>IE</em></span> exploit step is possible due to the availability of the ExternalInterface.call() method in Flash, which allows Flash to call the JavaScript function which can trigger the bug. The <span class="emphasis"><em>IE</em></span> vulnerability is triggered with a specially crafted CMarkup object which will have references to the controlled data sprayed earlier with Flash, as seen in <a href="#figure.10">Figure 10</a>.</p><div class="figure"><a id="figure.10"></a><div class="mediaobject"><img alt="Specially crafted CMarkup object." src="/uploads/images/figures/2015/01/FengFlorio-10.jpg" /></div><p class="title"><b>Figure&nbsp;10.&nbsp;Specially crafted CMarkup object.</b></p></div><p>The attacker has to achieve the goal of abusing the freed object in <span class="emphasis"><em>IE</em></span> in order to corrupt the size of a Flash Vector which has to be located exactly at memory address 0x1a1b2000 and without causing a crash. The specific memory layout crafted by the attacker will cause IE to start using a fake CMarkup object. This will lead into a subfunction of the MSHTML.DLL module, which executes the instruction &lsquo;inc dword ptr [eax+10h]&rsquo; twice, with the EAX register pointed exactly to the data allocated as the Flash Vector (see <a href="#figure.11">Figure 11</a>).</p><div class="figure"><a id="figure.11"></a><div class="mediaobject"><img alt="CVE-2014-0322 attack using vectors in ActionScript." src="/uploads/images/figures/2015/01/FengFlorio-11.jpg" /></div><p class="title"><b>Figure&nbsp;11.&nbsp;CVE-2014-0322 attack using vectors in ActionScript.</b></p></div><p>Since the first DWORD of the Vector is the size of the Vector, the size of Vector v1 has now been increased. Now the size of v1 has been increased. Hence, v1[0x3fe] can be accessed via ActionScript. As v1[0x3fe] is actually the first DWORD of the adjacent, Vector v2, this means that by changing the value of v1[0x3fe], the size of v2 (the next Vector adjacent to v1 in memory) is also changed. The exploit code sets v1[0x3fe] to an oversized value, 0x3ffffff0, so the size of v2 has now been increased to 0x3ffffff0, and the attacker can use v2 to access an arbitrary memory location for read and write actions [<span class="citation"><a href="#citation.18">18</a></span>].</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2249376"></a>6. Mitigation</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4949661"></a>6.1 Mitigation from Adobe</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a class="chapter" id="id3493359"></a>6.1.1 Constant blinding</h4></div></div></div><p>Version 11.8 of <span class="emphasis"><em>Adobe Flash Player </em></span>has introduced constant blinding in the JIT compiler as a mitiga-tion against JIT spray attacks. For the ActionScript code snippet shown in <a href="#figure.12">Figure 12</a>, the constant 0x80000000 has been &lsquo;blinded&rsquo; with a random expression, 0xCABAE6C3 ^ 0x4ABAE6C3, which makes the JIT compiler-generated code unpredictable and mitigates the JIT spray attack accordingly.</p><div class="figure"><a id="figure.12"></a><div class="mediaobject"><img alt="ActionScript snippet." src="/uploads/images/figures/2015/01/FengFlorio-12.jpg" /></div><p class="title"><b>Figure&nbsp;12.&nbsp;ActionScript snippet.</b></p></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4392092"></a>6.2 Mitigation from Microsoft</h3></div></div></div><p><span class="emphasis"><em>Microsoft</em></span> is continuously investing in the area of mitigation research [<span class="citation"><a href="#citation.19">19</a></span>] against memory corruption exploits &ndash; in fact, newer versions of <span class="emphasis"><em>Windows</em></span> and <span class="emphasis"><em>IE</em></span> come with a good arsenal of mitigations [<span class="citation"><a href="#citation.20">20</a></span>] and multiple barriers that attackers will have to overcome in order to successfully execute code or take persistent control of a computer even when there&rsquo;s an unpatched vulnerability available. DEP, ASLR/HiASLR (high entropy ASLR), SEHOP (structured exception handling overwrite protection), VTGUARD (V-Table guard) and Enhanced Protected Mode (EPM) for <span class="emphasis"><em>IE</em></span> are just a few examples of new technologies that help raise the bar against exploitation. For example, the JIT compiler used by <span class="emphasis"><em>IE9</em></span> and later versions implements a similar form of constant blinding mitigation to prevent JIT spray attacks in JavaScript.</p><p><span class="emphasis"><em>Microsoft</em></span> also provides a free tool, the <span class="emphasis"><em>Enhanced Mitigation Experience Toolkit</em></span> (<span class="emphasis"><em>EMET</em></span>), which can be helpful in mitigating the attacks that originated from memory corruption exploits for any software, including browsers and plug-ins, such as <span class="emphasis"><em>Adobe Flash Player</em></span>:</p><p>&lsquo;[It] is a utility that helps prevent vulnerabilities in software from being successfully exploited. EMET achieves this goal by using security mitigation technologies. These technologies function as special protections and obstacles that an exploit author must defeat to exploit software vulnerabilities. These security mitigation technologies do not guarantee that vulnerabilities cannot be exploited. However, they work to make exploitation as difficult as possible to perform.&rsquo; [<span class="citation"><a href="#citation.21">21</a></span>]</p><p><span class="emphasis"><em>EMET</em></span> can be downloaded (free of charge) from <a href="https://www.microsoft.com/emet" target="_blank">http://www.microsoft.com/emet</a>. The latest stable and supported versions are <span class="emphasis"><em>EMET 4.1 </em></span>Update 1 and <span class="emphasis"><em>EMET 5.0</em></span>. The goal of this tool is to enable and provide additional security mitigations that are designed to break common exploitation techniques used by attackers. It is known that exploit mitigations do not completely eliminate the vulnerabilities. With tools like <span class="emphasis"><em>EMET</em></span>, however, it is possible to raise the cost of developing a successful and reliable working exploit by introducing hardening and checks that will lead the exploit code to terminate or crash unexpectedly. In our lab, a <span class="emphasis"><em>Windows 7</em></span> machine equipped with <span class="emphasis"><em>EMET 4.1</em></span> (released in early November 2013) was tested against samples from the two Flash exploits analysed in this paper. The results are shown in <a href="#table.5">Table 5</a>.</p><div class="table"><a id="table.5"></a><table border="1" summary="EMET mitigation.N/A = mitigation not applicable for the type of exploitation
            usedX = mitigation effective to stop the exploit sampleB = the exploit sample uses techniques designed to bypass
            this mitigation"><colgroup><col /><col /><col /></colgroup><thead><tr><th align="center">EMET 4.1/OS Mitigation</th><th align="center">CVE-2013-5330</th><th align="center">CVE-2014-0497</th></tr></thead><tbody><tr><td>DEP</td><td>B</td><td>B</td></tr><tr><td>SEHOP</td><td>N/A</td><td>N/A</td></tr><tr><td>NullPage</td><td>N/A</td><td>N/A</td></tr><tr><td>HeapSpray</td><td>N/A</td><td>N/A</td></tr><tr><td>EAF</td><td>B</td><td>X</td></tr><tr><td>MandatoryASLR</td><td>B</td><td>B</td></tr><tr><td>Bottom-Up ASLR</td><td>N/A</td><td>N/A</td></tr><tr><td>LoadLib</td><td>N/A</td><td>N/A</td></tr><tr><td>Caller</td><td>X</td><td>X</td></tr><tr><td>SimExecFlow</td><td>N/A</td><td>X</td></tr><tr><td>StackPivot</td><td>X</td><td>X</td></tr><tr><td>AntiDetour</td><td>X</td><td>N/A</td></tr></tbody></table><p class="title"><b>Table&nbsp;5.&nbsp;EMET mitigation.<sup>[<a class="chapter" href="#ftn.id4526378" id="id4526378">1</a>]</sup></b></p></div><p>In the case of CVE-2013-5330, the attacker attempts to bypass the DEP protection mechanism from the operating system by using JIT-spray techniques. The attacker was also able to bypass ASLR and disclose module memory addresses with the capabilities of the exploit primitive provided by the specific Flash vulnerability (out-of-bound read/write using li32/si32 opcodes), which is a very optimal situation for an exploit writer (normally the attacker would have to work hard to craft this type of primitive). In order to bypass EAF, the shellcode is kept minimal and assembled directly from ActionScript filling the API placeholders and without using any dynamic resolution that requires Export Table parsing. Furthermore, to bypass certain user-mode hooks from security products, the JIT code attempts to call VirtualProtect+5 instead of jumping at the beginning of the VirtualProtect function. To do so, the attacker re-implements the missing prologue in the JIT code.</p><p>The first <span class="emphasis"><em>EMET</em></span> mitigation to be effective against this exploit is AntiDetour, a mechanism which increments randomly the number of bytes detoured for each API and fills the original bytes after APIfunction+5 with INT3 opcode, which will raise an exception. When the JIT code attempts to execute VirtualProtect+5, skipping the hooked prologue (see <a href="#table.2">Table 2</a>), it will end up crashing on this opcode. It&rsquo;s also interesting to note that even if this exploit doesn&rsquo;t use a ROP chain (it uses JIT generated gadgets instead), some ROP mitigations from EMET are still triggering and preventing exploitation. After analysis, we realized that the reason is because the JIT code performs some kind of stack-pivoting in order to fetch some of the information needed to carry over further exploitation in the shellcode. Because this stack-pivoting effect is never restored and ESP is kept out of stack boundaries, when the shellcode attempts to call some API, the ROP mitigations will detect this anomaly and also terminate the exploit with StackPivot mitigation.</p><p>In the case of CVE-2014-0497 (see <a href="#figure.13">Figure 13</a>), our tests showed that the exploit was blocked by multiple <span class="emphasis"><em>EMET</em></span> mitigations because the attacker used pure ROP techniques in order to bypass DEP. In fact, the exploit attempts to call VirtualProtect using a small ROP chain that is detected by SimExecFlow mitigation (a simulation-based heuristic to detect gadget execution). In addition to this, Caller and StackPivot mitigations are also able to stop and detect anomalies during the execution of the exploit (the stack is pivoted and the code transfer to VirtualProtect doesn&rsquo;t come from a legitimate function). Finally, EAF mitigation triggers at the final stage when the shellcode is executed and tries to parse the KERNEL32 export table.</p><div class="figure"><a id="figure.13"></a><div class="mediaobject"><img alt="Decoded ROP chain for the CVE-2014-0497 exploit." src="/uploads/images/figures/2015/01/FengFlorio-13.jpg" /></div><p class="title"><b>Figure&nbsp;13.&nbsp;Decoded ROP chain for the CVE-2014-0497 exploit.</b></p></div><p>While it is possible that a sophisticated attacker with knowledge of <span class="emphasis"><em>EMET</em></span> and with enough skills and time may be able to target all the mitigations and attempt to bypass them or to use techniques not yet protected by <span class="emphasis"><em>EMET</em></span>, it has been observed that the tool still represents a strong defence-in-depth strategy and it is helpful in blocking a large class of common attacks also seen in targeted attacks [<span class="citation"><a href="#citation.22">22</a></span>]. The major advantage is that <span class="emphasis"><em>EMET</em></span> provides hardening and mitigations without the need for signature updates, and also works in a generic way for older applications.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3982360"></a>7. Conclusion and future work</h2></div></div></div><p>This paper discussed the vulnerability and exploits of <span class="emphasis"><em>Adobe Flash Player</em></span>. In addition, it also revealed how vulnerabilities in other software, such as web browsers, could be exploited more generically by using SWF files. Both <span class="emphasis"><em>Adobe</em></span> and <span class="emphasis"><em>Microsoft</em></span> have actively been involved in the mitigation of web attacks. <span class="emphasis"><em>Adobe</em></span> has introduced constant blinding which mitigates the JIT spray attack, and <span class="emphasis"><em>Microsoft</em></span>&rsquo;s <span class="emphasis"><em>EMET</em></span> and improvements in recent <span class="emphasis"><em>IE</em></span> versions can also help to mitigate zero-day attacks that leverage Flash-based exploits.</p><p>The use of SWF in attacks will continue, and will evolve in the long term due to the popularity of the plug-in and its large market share. We will continue tracking, analysing and eliminating these threats</p><p>During our research into these <span class="emphasis"><em>Adobe Flash Player</em></span> vulnerabilities, we have noticed that sometimes it is fairly difficult to debug SWF files due to the limitations of current debuggers and reversing tools and the availability of cheap-but-powerful obfuscation tools. A byte-code-level SWF debugger could make the analyst&rsquo;s life much easier.</p><p>We urge <span class="emphasis"><em>Adobe</em></span> to provide a byte-code-level SWF debugger for the anti-malware industry.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3982362"></a>Acknowledgement</h2></div></div></div><p>We would like to thank the <span class="emphasis"><em>MMPC</em></span> (<span class="emphasis"><em>Microsoft Malware Protection Center</em></span>) technical writing team for their great efforts in reviewing this paper.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4403812"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Adobe Flash Player home page. <span class="bibliosource"><a href="https://www.adobe.com/au/products/flashplayer.html" target="_blank">http://www.adobe.com/au/products/flashplayer.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] DVLabs, Pwn2Own 2013 Overview. <span class="bibliosource"><a href="http://dvlabs.tippingpoint.com/blog/2013/01/17/pwn2own-2013" target="_blank">http://dvlabs.tippingpoint.com/blog/2013/01/17/pwn2own-2013</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Pwn2Own, Pwn2Own 2014: The lineup. <span class="bibliosource"><a href="http://www.pwn2own.com/2014/03/pwn2own-2014-lineup/" target="_blank">http://www.pwn2own.com/2014/03/pwn2own-2014-lineup/</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Evans, C. Scarybeast Security, Together we can make a difference. <span class="bibliosource"><a href="https://scarybeastsecurity.blogspot.in/2014/ 03/together-we-can-make-difference.html" target="_blank">http://scarybeastsecurity.blogspot.in/2014/ 03/together-we-can-make-difference.html</a></span>. See also shared spreadsheet <span class="bibliosource"><a href="https://docs.google.com/spreadsheet/ccc?key=0Au_usSLlqH60dEptUVJLRjUzcjI4eHNjYmRpS2I3bVE&amp;usp=drive_web#gid=0" target="_blank">https://docs.google.com/spreadsheet/ccc?key=0Au_usSLlqH60dEptUVJLRjUzcjI4eHNjYmRpS2I3bVE&amp;usp=drive_web#gid=0</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] Adobe Labs blog. Alchemy released on Labs. <span class="bibliosource"><a href="https://blogs.adobe.com/labs/archives/2008/11/alchemy_release.html" target="_blank">http://blogs.adobe.com/labs/archives/2008/11/alchemy_release.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] Adobe Labs blog, Project &ldquo;Alchemy&rdquo; is now the Flash Runtime C++ Compiler (FlasCC). <span class="bibliosource"><a href="https://blogs.adobe.com/labs/archives/2012/10/project-alchemy-is-now-the-flash-runtime-c-compiler-flascc.html" target="_blank">http://blogs.adobe.com/labs/archives/2012/10/project-alchemy-is-now-the-flash-runtime-c-compiler-flascc.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] Adobe blog. Open source Flash C++ compiler, CrossBridge. <span class="bibliosource"><a href="https://blogs.adobe.com/flashplayer/2013/06/open-source-flash-c-compiler-crossbridge.html" target="_blank">http://blogs.adobe.com/flashplayer/2013/06/open-source-flash-c-compiler-crossbridge.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] JacksonDunstan.Com, An ASC 2.0 domain memory opcodes primer. <span class="bibliosource"><a href="http://jacksondunstan.com/articles/2314" target="_blank">http://jacksondunstan.com/articles/2314</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] Adobe security bulletin APSB13-26. <span class="bibliosource"><a href="https://www.adobe.com/support/security/bulletins/apsb13-26.html" target="_blank">http://www.adobe.com/support/security/bulletins/apsb13-26.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.10"></a><p class="bibliomixed">[10] Malware don&rsquo;t need Coffee, CVE-2013-5330 (Flash) in an unknown Exploit Kit fed by high rank websites. <span class="bibliosource"><a href="http://malware.dontneedcoffee.com/2014/02/cve-2013-5330-flash-in-unknown-exploit.html" target="_blank">http://malware.dontneedcoffee.com/2014/02/cve-2013-5330-flash-in-unknown-exploit.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.11"></a><p class="bibliomixed">[11] MMPC blog. A journey to CVE-2013-5330 exploit. <span class="bibliosource"><a href="http://blogs.technet.com/b/mmpc/archive/2014/02/10/a-journey-to-cve-2013-5330-exploit.aspx" target="_blank">http://blogs.technet.com/b/mmpc/archive/2014/02/10/a-journey-to-cve-2013-5330-exploit.aspx</a></span>.</p></div><div class="bibliomixed"><a id="citation.12"></a><p class="bibliomixed">[12] Yu, Y. ROPs are for the 99 per cent (p.47, &lsquo;Interdimensional&rsquo;). <span class="bibliosource"><a href="https://cansecwest.com/slides/2014/ROPs_are_for_the_99_CanSecWest_2014.pdf" target="_blank">https://cansecwest.com/slides/2014/ROPs_are_for_the_99_CanSecWest_2014.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.13"></a><p class="bibliomixed">[13] MMPC threat encyclopedia. TrojanSpy:Win32/Lurk. <span class="bibliosource"><a href="https://www.microsoft.com/security/portal/threat/encyclopedia/Entry.aspx?Name=TrojanSpy:Win32/Lurk" target="_blank">http://www.microsoft.com/security/portal/threat/encyclopedia/Entry.aspx?Name=TrojanSpy:Win32/Lurk</a></span>.</p></div><div class="bibliomixed"><a id="citation.14"></a><p class="bibliomixed">[14] Adobe security bulletin APSB14-04. <span class="bibliosource"><a href="https://helpx.adobe.com/security/products/flash-player/apsb14-04.html" target="_blank">http://helpx.adobe.com/security/products/flash-player/apsb14-04.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.15"></a><p class="bibliomixed">[15] McAfee Blog. Flash zero-day vulnerability CVE 2014 0497 lasts 84 days. <span class="bibliosource"><a href="https://blogs.mcafee.com/mcafee-labs/flash-zero-day-vulnerability-cve-2014-0497-lasts-84-days" target="_blank">http://blogs.mcafee.com/mcafee-labs/flash-zero-day-vulnerability-cve-2014-0497-lasts-84-days</a></span>.</p></div><div class="bibliomixed"><a id="citation.16"></a><p class="bibliomixed">[16] MMPC blog, A journey to CVE-2014-0497 exploit. <span class="bibliosource"><a href="http://blogs.technet.com/b/mmpc/archive/2014/02/17/a-journey-to-cve-2014-0497-exploit.aspx" target="_blank">http://blogs.technet.com/b/mmpc/archive/2014/02/17/a-journey-to-cve-2014-0497-exploit.aspx</a></span>.</p></div><div class="bibliomixed"><a id="citation.17"></a><p class="bibliomixed">[17] MMPC threat encyclopedia. TrojanDownloader:Win32/Siromost.A. <span class="bibliosource"><a href="https://www.microsoft.com/security/portal/threat/encyclopedia/Entry.aspx?Name=TrojanDownloader:Win32/Siromost.A." target="_blank">http://www.microsoft.com/security/portal/threat/encyclopedia/Entry.aspx?Name=TrojanDownloader:Win32/Siromost.A</a>.</span></p></div><div class="bibliomixed"><a id="citation.18"></a><p class="bibliomixed">[18] Serna, Fermin J. Flash JIT &ndash; Spraying info leak gadgets. <span class="bibliosource"><a href="http://zhodiac.hispahack.com/my-stuff/security/Flash_Jit_InfoLeak_Gadgets.pdf" target="_blank">http://zhodiac.hispahack.com/my-stuff/security/Flash_Jit_InfoLeak_Gadgets.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.19"></a><p class="bibliomixed">[19] Microsoft Security Research and Defense blog. Software defense: Mitigating common exploitation techniques. <span class="bibliosource"><a href="http://blogs.technet.com/b/srd/archive/2013/12/11/software-defense-mitigating-common-exploitation-techniques.aspx" target="_blank">http://blogs.technet.com/b/srd/archive/2013/12/11/software-defense-mitigating-common-exploitation-techniques.aspx</a></span>.</p></div><div class="bibliomixed"><a id="citation.20"></a><p class="bibliomixed">[20] Johnson, K.; Miller, M. Exploit mitigation improvements in Windows 8. <span class="bibliosource"><a href="http://media.blackhat.com/bh-us-12/Briefings/M_Miller/BH_US_12_Miller_Exploit_Mitigation_Slides.pdf" target="_blank">http://media.blackhat.com/bh-us-12/Briefings/M_Miller/BH_US_12_Miller_Exploit_Mitigation_Slides.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.21"></a><p class="bibliomixed">[21] Microsoft support. The Enhanced Mitigation Experience Toolkit. <span class="bibliosource"><a href="https://support.microsoft.com/kb/2458544" target="_blank">http://support.microsoft.com/kb/2458544</a></span>.</p></div><div class="bibliomixed"><a id="citation.22"></a><p class="bibliomixed">[22] Niemel&auml;, J. Statistically effective protection against APT attacks. <span class="bibliosource"><a href="/uploads/pdf/conference_slides/2013/Niemela-VB2013.pdf" target="_blank">https://www.virusbtn.com/pdf/conference_slides/2013/Niemela-VB2013.pdf</a>.</span></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2194013"></a>Appendix</h2></div></div></div><p>Shellcode used by CVE-2013-5330 exploit:</p><pre class="programlisting">add    esp,0E000h
push   ebx
push   2048h
push   0
mov    eax,offset kernel32!GlobalAlloc (7c80fdbd)
call   eax
mov    esi,eax
push   esi
push   2048h
mov    eax,offset kernel32!GetTempPathA (7c835de2)
call   eax
test   eax,eax
je     04bf22eb
push   esi
push   0
push   0
push   esi
mov    eax,offset kernel32!GetTempFileNameA (7c861807)
call   eax
test   eax,eax
je     04bf22eb
push   0
push   80h
push   2
push   0
push   0
push   40000000h
push   esi
mov    eax,offset kernel32!CreateFileA (7c801a28)
call   eax
mov    edi,eax
cmp    edi,0FFFFFFFFh
je     04bf22eb
push   0
push   esp
mov    eax,18200h
push   eax
push   edi
mov    edi,3EF39F0h
pop    ebx
push   edi
push   ebx
mov    eax,offset kernel32!WriteFile (7c810e17)
call   eax
test   eax,eax
je     04bf22eb
push   ebx
mov    eax,offset kernel32!CloseHandle (7c809bd7)
call   eax
push   esi
mov    eax,offset kernel32!LoadLibraryA (7c801d7b)
call   eax
pop    esp
popad
ret    8
</pre></div><div class="footnotes"><br /><hr align="left" width="100" /><div class="footnote"><p><sup>[<a href="#id4526378" id="ftn.id4526378">1</a>] </sup>N/A = mitigation not applicable for the type of exploitation used</p><p>X = mitigation effective to stop the exploit sample</p><p>B = the exploit sample uses techniques designed to bypass this mitigation</p></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2014/VB2014-FengFlorio.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2014 paper: Ubiquitous Flash, ubiquitous exploits, ubiquitous mitigation&url=https://www.virusbulletin.com/virusbulletin/2015/01/paper-ubiquitous-flash-ubiquitous-exploits-ubiquitous-mitigation"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2015/01/paper-ubiquitous-flash-ubiquitous-exploits-ubiquitous-mitigation'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2015/01/paper-ubiquitous-flash-ubiquitous-exploits-ubiquitous-mitigation&title=VB2014 paper: Ubiquitous Flash, ubiquitous exploits, ubiquitous mitigation"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2015/01/paper-ubiquitous-flash-ubiquitous-exploits-ubiquitous-mitigation&t=VB2014 paper: Ubiquitous Flash, ubiquitous exploits, ubiquitous mitigation"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2015/01/paper-ubiquitous-flash-ubiquitous-exploits-ubiquitous-mitigation"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p>Â </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td>Â </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">Â©1989-2022 Virus Bulletin.Â Â Â Â Â Â Â Â <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>Â Â Â Â Â Â Â Â <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>Â Â Â Â Â Â Â Â <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>