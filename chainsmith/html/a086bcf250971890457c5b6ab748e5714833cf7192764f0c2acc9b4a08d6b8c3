<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: The Hulk</title>
<meta name="description" content="Raul Alvarez takes a close look at cavity file infector W32/Huhk, which - thanks to its infection criteria - only infects a handful of executable files, thus unintentionally creating a stealth technique." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1735;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201410-Hulk"></a>The Hulk</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2014-10-07</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Raul</span> <span class="surname">Alvarez</span></h3><span class="orgname">Fortinet</span>, <span class="orgdiv">Canada</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Martijn</span> <span class="surname">Grooten</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Raul Alvarez takes a close look at cavity file infector W32/Huhk, which - thanks to its infection criteria - only infects a handful of executable files, thus unintentionally creating a stealth technique. </p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2673" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2673" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id4012284"></a></span></dt><dt><span class="sect1"><a href="#id3087856">Context #1: running within an infected file (not explorer.exe)</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3652520">Collecting bytes</a></span></dt><dt><span class="sect2"><a href="#id3854908">Resolving APIs</a></span></dt><dt><span class="sect2"><a href="#id4222980">Restoring the original bytes </a></span></dt><dt><span class="sect2"><a href="#id3646006">Determining which context</a></span></dt><dt><span class="sect2"><a href="#id3164129">Infection routine</a></span></dt><dt><span class="sect2"><a href="#id4376485">Generating the encryption key and the infection marker</a></span></dt><dt><span class="sect2"><a href="#id2329304">Looking for free space</a></span></dt><dt><span class="sect2"><a href="#id3980142">Cavity infection</a></span></dt><dt><span class="sect2"><a href="#id2880159">Finalizing the infection</a></span></dt><dt><span class="sect2"><a href="#id4185582">Passing the infection</a></span></dt><dt><span class="sect2"><a href="#id3498107">Hooking WS2_32.connect</a></span></dt><dt><span class="sect2"><a href="#id4645631">Activating the connect API</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4729755">Context #2: running in the context of explorer.exe</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id4828374">Thread #1</a></span></dt><dt><span class="sect2"><a href="#id3608654">Activating the CreateProcessW API</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3072562">Wrap up</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4012284"></a></h2></div></div></div><p>In most cases, infected files have an increased file size due to the nature of their infection: the infection process either results in the addition of a new section, or the expansion of the file&rsquo;s own last section. Either way, the infected file is larger than the original. </p><p>However, there is another group of file infectors known as &lsquo;cavity file infectors&rsquo;, which can infect files without increasing their size. We seldom see this kind of infector due to the complexity of their algorithms, or perhaps because they are more time consuming to create. </p><p>In this article, we will look into how Win32/Huhk implements cavity infection. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3087856"></a>Context #1: running within an infected file (not explorer.exe)</h2></div></div></div><p>Huhk&rsquo;s execution depends on the context in which it runs. If it is running within any infected file, other than explorer.exe, its only goal is to make sure that explorer.exe is infected. Both &lsquo;%system%\dllcache\explorer.exe&rsquo; and &lsquo;%windows%\explorer.exe&rsquo; must be infected. </p><p>The following sub-sections describe what happens within this context. </p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3652520"></a>Collecting bytes</h3></div></div></div><p>When an application runs, the initial address of the SEH (Structured Exception Handling) chain points to a procedure in kernel32.dll. The malware makes use of this fact by subtracting 0x1000 from the initial address until it reaches the ImageBase of the kernel32 library. </p><p>Once the kernel32 library has been found, Huhk computes the hash of each API name in the kernel&rsquo;s export table to search for &lsquo;VirtualAlloc&rsquo; (0xA5171D00). (The hash algorithm only uses &lsquo;ADC EDI,ECX&rsquo; and &lsquo;ROL ECX,8&rsquo; instructions.) Then it computes the equivalent API address based on the index of the API name. </p><p>This is followed by allocating a section of virtual memory, for byte collection, using the newly resolved VirtualAlloc API. </p><p>The malware has a table of addresses and sizes. Let&rsquo;s call it the &lsquo;cavity table&rsquo;. The addresses point to the malware bytes scattered throughout the infected module, while the sizes determine the number of malware bytes at a given address. </p><p>To collect these bytes, the malware performs the following steps:</p><div class="orderedlist"><ol type="1"><li><p>The first address in the cavity table points to the unencrypted bytes of the malware. These bytes are copied to the newly allocated virtual memory without decryption, with the number of bytes copied determined by the first size entry in the table.</p></li><li><p>The next address points to the encrypted malware bytes. The decryption algorithm is a simple XOR using a key taken from the first byte of the TimeDateStamp value of the infected module. After a byte has been decrypted, it is copied to the virtual memory. </p><p>The malware bytes are decrypted and copied to the virtual memory, byte by byte, until the count reaches the given size value.</p></li><li><p>Step 2 is repeated for as long as the next address in the table is not zero. These variations depend on the available free spaces in any given host file. </p></li></ol></div><p>Once all malware bytes have been collected in virtual memory, Huhk transfers control to the newly copied code. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3854908"></a>Resolving APIs</h3></div></div></div><p>Within the context of the new malware code in the newly allocated memory, Huhk resolves its APIs using a similar method to that discussed above. </p><p>The API resolution algorithm is as follows: </p><div class="orderedlist"><ol type="1"><li><p>In a given list, if the hash value is 0xFFFFFFFF, what follows will be a pointer to a library (DLL) name. The library is loaded using a call to the LoadLibraryA API.</p><p>(The default library is kernel32 and the first group of hash values belongs to it.)</p></li><li><p>If a hash value is for an API, Huhk will compute the hash value of each API name in the library&rsquo;s export table to look for the equivalent hash value (see <a href="#figure.1">Figure 1</a>).</p></li><li><p>It then gets the corresponding API address based on the index of the API name. </p></li></ol></div><p>Each hash value in the list (see <a href="#figure.1">Figure 1</a>) passes through the above steps.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Partial table with hashes and the equivalent APIs." src="/uploads/images/figures/2014/10/Hulk-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Partial table with hashes and the equivalent APIs.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4222980"></a>Restoring the original bytes </h3></div></div></div><p>After resolving all the required APIs, the malware restores the first five bytes at the infected module&rsquo;s entry point. </p><p>The routine that restores the original bytes is as follows: </p><div class="orderedlist"><ol type="1"><li><p>Initially, it changes the protection of the bytes to PAGE_EXECUTE_READWRITE using the VirtualProtect API.</p></li><li><p>This is followed by opening the current process using a combination of the GetCurrentProcessId and OpenProcess APIs. </p></li><li><p>Finally, it writes the original bytes using the WriteProcessMemory API.</p></li></ol></div><p>Using the same routine as described above, the malware restores another seven bytes of the infected module. These bytes are used to jump to the first malware function (see the section &lsquo;Collecting bytes&rsquo;). </p><p>Using the information from the cavity table, Huhk restores the memory locations at which the scattered pieces of malware are located. To quickly refill these locations, the malware allocates a section of virtual memory full of zeros using the VirtualAlloc API. Then, using the zeros and the routine above, the memory locations pointed to by the cavity table are restored. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3646006"></a>Determining which context</h3></div></div></div><p>After restoring the necessary bytes of the host file, Huhk checks if the current infected module is explorer.exe. If it is not, it will continue with the sequence of events described in the following sub-sections, otherwise it will perform a different sequence of events (as described in the section &lsquo;Context #2&rsquo;). </p><p>To continue running in this context, the malware gets the temp path folder using the GetTempPathW API, and checks whether &lsquo;%temp%\lorer.exe&rsquo; exists using the GetFileAttributesW API. </p><p>If &lsquo;lorer.exe&rsquo; (derived from &lsquo;explorer.exe&rsquo;) exists, the malware will restore the original bytes of the current module and transfer control to it. Checking for the presence of &lsquo;%temp%\lorer.exe&rsquo; is another form of checking whether the system is already infected. </p><p>Otherwise, the malware performs the following routine: </p><p>First, it tries to disable the Windows File Protection of &lsquo;%windows%\explorer.exe&rsquo;. Then it moves &lsquo;%windows%\explorer.exe&rsquo; to &lsquo;%temp%\lorer.exe&rsquo; using the MoveFileW API. This is followed by overwriting &lsquo;%system%\dllcache\explorer.exe&rsquo; with &lsquo;%temp%\lorer.exe&rsquo; using the CopyFileW API with the bFailIfExists parameter set as FALSE. </p><p>Next, it gets the file attributes of &lsquo;%system%\dllcache\explorer.exe&rsquo; and saves them for later use. The new attributes are set to FILE_ATTRIBUTE_NORMAL using the SetFileAttributesW API. </p><p>The file &lsquo;%system%\dllcache\explorer.exe&rsquo; is opened with GENERIC_READ|GENERIC_WRITE access using the CreateFileW API. To make sure that it is a disk file, the malware calls the GetFileType API. </p><p>The file&rsquo;s size and time stamp are also saved for later use, using the GetFileSize and GetFileTime APIs. </p><p>Finally, the file &lsquo;%system%\dllcache\explorer.exe&rsquo; is loaded into the memory, ready for reading and writing, using a combination of the CreateFileMappingW and MapViewOfFile APIs. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3164129"></a>Infection routine</h3></div></div></div><p>As we have observed so far, Huhk is polymorphic in nature. Besides being a cavity file infector, it can infect files with different binary versions of itself, making it harder to detect. </p><p>Although it uses a simple XOR algorithm for encryption and decryption, the generation of the key is a bit more interesting. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4376485"></a>Generating the encryption key and the infection marker</h3></div></div></div><p>The infection marker is used to avoid re-infection of host files, while the decryption key is used to expose the actual binary. It is rare for both of them to be located in the same place. </p><p>In checking for the infection marker, straight after the mapping of the cached version of explorer.exe, the malware gets the TimeDateStamp DWORD value from the PE header. If the sum of the first and second bytes of the TimeDateStamp DWORD is 0xFF, the file is already infected. The malware then unmaps and closes &lsquo;%system%\dllcache\explorer.exe&rsquo; using the UnmapViewOfFile and CloseHandle APIs, and exits from this routine. </p><p>If, on the other hand, &lsquo;%system%\dllcache\explorer.exe&rsquo; is not yet infected, the malware will generate the encryption key and infection marker by performing the following routine: </p><p>Initially, the malware checks whether the file is a DLL. If it is, it skips the infection routine, unmaps explorer.exe, and exits from this routine. </p><p>Otherwise, it gets a new DWORD value by calling the GetTickCount API. It divides the DWORD by three, changes the second byte to 0xFF, subtracts the first byte from the second byte, and replaces the second byte with the difference. The final value of the DWORD now contains the infection marker (the sum of the first and second bytes) and the encryption key (first byte). It is saved to a memory location for later use. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2329304"></a>Looking for free space</h3></div></div></div><p>After generating the marker and the key, the malware traverses the content of the mapped explorer.exe, starting at the PE header. It looks for free spaces (memory locations filled with zeros) for its cavity infection. </p><p>It checks each DWORD memory for 0x00000000. When a DWORD with 0x00000000 is found, it marks it as &lsquo;startingLocation&rsquo;. Then, it looks for a non-zero DWORD and marks it as &lsquo;endingLocation&rsquo;. The size of the free space is determined by the difference between the &lsquo;endingLocation&rsquo; and the &lsquo;startingLocation&rsquo;. </p><p>If the size is equal to or greater than 0xFA, the malware will add it as an entry in a temporary table in stack memory. Each entry consists of an address pointing to a free space, and the size of the free space. This temporary table will serve as the cavity table in a successful infection. </p><p>The malware continues to search for every available space until it reaches the end of the mapped explorer.exe file. Every suitable free space will be referenced in the cavity table. </p><p>Once all available free spaces have been referenced, the malware sums up all the sizes in the table and checks whether the total is enough for the malware. The total size must be greater than 7,005 bytes (0x1B5D). </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3980142"></a>Cavity infection</h3></div></div></div><p>The first block of code is important to the malware, so it looks for enough free space to place the initial code. It searches the cavity table for a size entry which is equal to or greater than 551 bytes (0x227), then moves that entry to the top of the table. </p><p>The infection begins by copying the malware code as is (no encryption) to the free space pointed to by the address at the top of the cavity table. </p><p>Afterwards, the rest of the malware code is copied and scattered amongst the various free spaces referenced by the table (see <a href="#figure.2">Figure 2</a>). Each and every byte is encrypted with a simple XOR using the key that was generated earlier. </p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="A cavity-infected file using the free spaces." src="/uploads/images/figures/2014/10/Hulk-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;A cavity-infected file using the free spaces. </b></p></div><p>(View a larger version of Figure 2 <a href="/uploads/images/figures/2014/10/Hulk-2-large.jpg" target="_top">here</a>.)</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2880159"></a>Finalizing the infection</h3></div></div></div><p>After filling the free spaces of the mapped &lsquo;%system%\dllcache\explorer.exe&rsquo; file, the malware readjusts the addresses in the cavity table relative to the ImageBase of explorer.exe. Then it copies the cavity table from the stack memory to the mapped file. </p><p>This is followed by overwriting the first five bytes of the entry point of the mapped explorer.exe. These bytes are the initial call to the malware routine. </p><p>The TimeDateStamp field of explorer.exe&rsquo;s PE header is also changed to the DWORD (encryption key and infection marker) that was generated previously. </p><p>Afterwards, Huhk generates the checksum value of the newly infected explorer.exe, using the &lsquo;ADC DX,AX&rsquo; instruction. Each WORD value is computed, starting from the MZ header, and the final WORD value is copied to the Checksum field of explorer.exe&rsquo;s PE header. The generated checksum is different for each infection due to the polymorphic nature of the malware. </p><p>To flush all the changes and modifications to the physical file of explorer.exe, the malware calls the UnmapViewOfFile API. </p><p>Finally, Huhk restores the original time stamp and attributes of &lsquo;%system%\dllcache\explorer.exe&rsquo; by calling the SetFileTime and SetFileAttributesW APIs. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4185582"></a>Passing the infection</h3></div></div></div><p>After the infection routine, Huhk tries to move the infected &lsquo;%system%\dllcache\explorer.exe&rsquo; to &lsquo;%windows%\explorer.exe&rsquo;, then it tries to copy &lsquo;%windows%\explorer.exe&rsquo; back to &lsquo;%system%\dllcache\explorer.exe&rsquo;, using the MoveFileW and CopyFileW APIs, respectively. This is the malware&rsquo;s attempt to make sure that both copies of &lsquo;explorer.exe&rsquo; files are infected. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3498107"></a>Hooking WS2_32.connect</h3></div></div></div><p>For Huhk&rsquo;s final trick, it hooks the &lsquo;connect&rsquo; API of WS2_32.DLL in memory, by changing the first five bytes of the API to a call to the malware&rsquo;s code. The hook function for the connect API is discussed in the next section. </p><p>Hooking the connect API is only implemented in the infection of non-explorer executable files. </p><p>After hooking the connect API, the malware transfers execution to the host file. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4645631"></a>Activating the connect API</h3></div></div></div><p>The hook function, which is activated when the connect API is called, attempts to connect to &lsquo;http://vampire00[--REMOVED--]info&rsquo; and &lsquo;http://c34.statcoun[-REMOVED-]unter.php?sc_project=3034266&amp;java=0&amp;[-REMOVED-]&amp;invisible=0&rsquo;, and tries to download another piece of malware. (For safety reasons, parts of the links have been removed.) </p><p>The URLs are the decrypted version of the hard-coded strings &lsquo;cpqn9/0xdqumug107rt*stuw-iohr&rsquo; and &lsquo;cpqn9/0e683wwcucnskp`n+anm0erysxht/pgn&lt;o^[mpnjfewA8466365$g]q]:.%sfexvnx|?396/-.\b#<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="680f051e021d040e1901285a">[email&#160;protected]</a>&rsquo;, respectively. At the time of writing this article, the links were no longer active. </p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4729755"></a>Context #2: running in the context of explorer.exe</h2></div></div></div><p>In this context, the malware goes through the same steps as described in the preceding sub-sections, until it reaches the point of determining in which context it is running. </p><p>Since it is running in the context of explorer.exe, the malware hooks the CreateProcessW API by activating Thread #1 (see below). Afterwards, it transfers control to <span class="emphasis"><em>Explorer</em></span>&rsquo;s main module. </p><p>The malware now sits and waits for the hooked CreateProcessW API to be called. </p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4828374"></a>Thread #1</h3></div></div></div><p>This thread is responsible for installing the hook for the CreateProcessW API. </p><p>When the thread is activated, it sleeps for 30,000ms, before waking up to place the hook to the CreateProcessW API using the following routine: </p><p>The malware changes the protection of the CreateProcessW API to PAGE_EXECUTE_READWRITE using the VirtualProtect API, opens the current process using a combination of the GetCurrentProcessId and OpenProcess APIs, then modifies the first five bytes using a combination of the ReadProcessMemory and WriteProcessMemory APIs. The first five bytes are now a call to the hook function. </p><p>After setting the hook, the thread terminates. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3608654"></a>Activating the CreateProcessW API</h3></div></div></div><p>The hook function is triggered when the hooked CreateProcessW API is called. </p><p>Initially, Huhk restores the original bytes of the CreateProcessW API, using a routine similar to that used in Thread #1. The only difference is that it restores the original bytes of the API instead of hooking it. </p><p>This is followed by extracting the folder names from the pathname of the application, taken from one of the parameters from the CreateProcessW API when it was triggered. The folder names are converted to lower case and the malware checks whether any of the following strings are present: &lsquo;windows&rsquo;, &lsquo;winnt&rsquo;, &lsquo;system32&rsquo;, &lsquo;system&rsquo; and &lsquo;dllcache&rsquo;. </p><p>Every folder name is extracted from the pathname, and if any of them match any of the aforementioned strings, the malware will skip other checks, re hook the CreateProcessW API by activating Thread #1, and exit the current function. </p><p>If the folder names pass the checks, the filename is also checked against the strings shown in <a href="#figure.3">Figure 3</a>. If any of the strings match the filename, it will re-hook the API and exit. The strings resemble the filenames of some anti malware and security applications. </p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Folder names and filenames to avoid." src="/uploads/images/figures/2014/10/Hulk-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Folder names and filenames to avoid.</b></p></div><p>If, on the other hand, both the folder names and filenames pass the checks, the malware will perform the infection routine, which is similar to the infection of &lsquo;%system%\dllcache\explorer.exe&rsquo;. Once the infection is finished, it will activate Thread #1 to re-hook the CreateProcessW API and exit the function. </p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3072562"></a>Wrap up</h2></div></div></div><p>In the case of this piece of malware, explorer.exe is always infected, while the infection of other executable files only happens if the malware runs in the context of the aforementioned critical file. </p><p>Due to its infection criteria, the malware only infects a handful of executable files. In this regard, it has unintentionally created a stealth technique. </p><p>In addition to its polymorphic nature, Huhk&rsquo;s cavity infection technique and the small number of in-fected files help it to avoid detection. </p></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2014/vb201410-Hulk.pdf" target="_blank"><img class="ccm-image-block responsive" alt="" src="/uploads/images/buttons/pdf-download-button.jpg" onmouseover="this.src = '/uploads/images/buttons/pdf-download-button-hover.jpg'" onmouseout="this.src = '/uploads/images/buttons/pdf-download-button.jpg'" border="0" height="45" width="262"></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=The Hulk&url=https://www.virusbulletin.com/virusbulletin/2014/10/hulk"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/10/hulk'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/10/hulk&title=The Hulk"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/10/hulk&t=The Hulk"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/10/hulk"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>