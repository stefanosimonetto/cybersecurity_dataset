<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2015 paper: VolatilityBot: Malicious Code Extraction Made by and for Security Researchers</title>
<meta name="description" content="VolatilityBot is a new automation tool for researchers which cuts all the guesswork and manual tasks out of the binary extraction phase of malware analysis. Not only does it automatically extract the executable (exe), but it also fetches all new processes created in memory, code injections, strings, IP addresses and so on." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 4742;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1>VB2015 paper: VolatilityBot: Malicious Code Extraction Made by and for Security Researchers</h1>
<h3>Martin G. Korman</h3>
<p>IBM Trusteer, Israel</p>
<p><em>Copyright © 2016 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-7592" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="500">Table of contents</div><div id="ccm-remo-expand-content-7592" class="ccm-remo-expand-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /><a class="toc-level2" href="#h2-what-can-volatilitybot-do">What Can VolatilityBot Do?</a><br /><a class="toc-level3" href="#h3-1-the-manager">1. The manager</a><br /><a class="toc-level3" href="#h3-2-machines-module">2. Machines module</a><br /><a class="toc-level3" href="#h3-3-code-extractor">3. Code extractor</a><br /><a class="toc-level3" href="#h3-4-post-processing-modules">4. Post-processing modules</a><br /><a class="toc-level2" href="#h2-the-volatilitybot-workflow">The VolatilityBot Workflow</a><br /><a class="toc-level2" href="#h2-core-capabilities">Core Capabilities</a><br /><a class="toc-level2" href="#h2-efficacy-testing">Efficacy Testing</a><br /><a class="toc-level3" href="#h3-virusshare-subset">VirusShare subset</a><br /><a class="toc-level3" href="#h3-malware-families-zoo">Malware families’ zoo</a><br /><a class="toc-level2" href="#h2-known-weaknesses-in-volatilitybot">Known Weaknesses in VolatilityBot</a><br /><a class="toc-level2" href="#h2-future-development">Future Development</a><br /><a class="toc-level2" href="#h2-appendix">Appendix</a><br /><a class="toc-level3" href="#h3-1-daemon-mode">1. Daemon mode</a><br /><a class="toc-level3" href="#h3-2-script-mode">2. Script mode</a></p>
<p> </p></div></div><h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>Part of the work security researchers have to go through when they study new malware or wish to analyse suspicious executables is to extract the binary file and all the different satellite injections and strings decrypted during the malware's execution.</p>
<p>Usually, this initial process is done manually, and it can be lengthy or even end up incomprehensible, in case some actions the malware has taken are not traced back to it.</p>
<p>Enter VolatilityBot. This is a tool I have developed myself, leveraging the Volatility Framework. This new automation tool for researchers cuts all the guesswork and manual tasks out of the binary extraction phase. Not only does it automatically extract the executable (exe), but it also fetches all new processes created in memory, code injections, strings, IP addresses and so on.</p>
<p>Beyond the obvious value of having a complete extraction automated and produced in under a minute, VolatilityBot is highly effective against a wide variety of malware codes and their respective load techniques. It can take on complex malware including banking trojans such as ZeuS, Ramnit, and Dyre, just as easily as it extracts payloads from downloaders such as Upatre and Pony, or even from targeted malware like Havex.<br />Once VolatilityBot has finished the extraction, it can further automate repair or prepare the extracted elements for the next step in analysis – for example, by fixing the Portable Executable (PE), preparing for static analysis via tools like IDA, performing a YARA scan, etc.</p>
<p>The Volatility Framework at the core of this automation tool is an open-source framework for memory analysis and forensics; it analyses the runtime state of a system using the data found in volatile storage (RAM). You can find out more about Volatility at <a href="http://www.volatilityfoundation.org/" target="_blank">http://www.volatilityfoundation.org/</a>.</p>
<h2><a class="chapter" name="h2-what-can-volatilitybot-do"></a>What Can VolatilityBot Do?</h2>
<p>VolatilityBot is an automatic modular framework that extracts malicious code from packed binaries, leveraging the functionality of the Volatility Framework. As such, VolatilityBot can dump all malicious injected code, loaded kernel modules and new processes created, from memory.</p>
<p>VolatilityBot is made up of four major components:</p>
<h3><a class="chapter" name="h3-1-the-manager"></a>1. The manager</h3>
<p>This is the core of the VolatilityBot tool. The manager executes the automatic extraction as well as the post‑processing modules. This module also controls the associated machines’ activity to streamline the workflow.</p>
<h3><a class="chapter" name="h3-2-machines-module"></a>2. Machines module</h3>
<p>This is an abstract design of a research machine; it contains five functions: Revert, Start, Suspend, Clean-up and Get Memory Path.</p>
<p>Each machine has a very small python agent running, which listens and waits for a malware sample. When a sample is sent, it executes it by double-clicking. The agent is of minimal size in order not to affect the behaviour of the malware in the machine. The agent does not perform any API hooking and does not control the machine in any form besides executing the malware.</p>
<p>The machines are controlled and monitored by the manager component, which knows not to send more samples to a machine if it has fatal errors and will mark the machine as unavailable.</p>
<h3><a class="chapter" name="h3-3-code-extractor"></a>3. Code extractor</h3>
<p>The code extractor component is a number of modules grouped together for the purpose of extracting all the different malicious code components from the memory. These are separate for code injections, new processes, etc. This component is modular, which allows researchers to write new code for other extractors they may need.</p>
<p>The existing modules for this component are as follows:</p>
<ul>
<li><span style="line-height: 1.42857;">injected_code: uses the Volatility ‘malfind’ plug-in to find suspect memory areas. After dumping them it tries to determine if the section contains a valid PE or valid shell code. If it finds a valid PE, it fixes the PE header. Either way, it will extract strings and execute YARA on the section dumped from memory.</span></li>
<li><span style="line-height: 1.42857;">module_scan: uses the Volatility ‘modscan’ plug-in to detect and dump newly loaded kernel modules.</span></li>
<li><span style="line-height: 1.42857;">create_process_dump: uses the Volatility ‘procdump’ and ‘pslist’ plug-ins to dump new processes created by the malware. It executes YARA and extracts malware strings.</span></li>
<li><span style="line-height: 1.42857;">create_process_dump_as: uses the Volatility ‘dump_as’ plug-in to dump address space. It executes YARA and extracts malware strings.</span></li>
<li><span style="line-height: 1.42857;">Hooks: extract API hooks made by the malware (both user-mode and kernel-mode).</span></li>
</ul>
<h3><a class="chapter" name="h3-4-post-processing-modules"></a>4. Post-processing modules</h3>
<p>The post-processing modules kick in once the extraction is complete. They are tasked with automated actions like fixing the PE, or availing the resulting elements to static analysis, YARA scans, strings and IP address logging, etc.</p>
<p>These modules can help with:</p>
<ul>
<li><span style="line-height: 1.42857;">Executing the configured YARA rules on post-extraction input as defined by the researcher.</span></li>
<li><span style="line-height: 1.42857;">Extracting strings from the input defined. Other modules can be layered on top in order to extract IP addresses, URLs, etc.</span></li>
<li><span style="line-height: 1.42857;">Producing a report for static analysis with basic PE analysis of the input file.</span></li>
</ul>
<p><span style="line-height: 12.987px;"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/6414/5587/2597/VolatilityBot-1.jpg" alt="VolatilityBot-1.jpg" width="524" height="606" /><span class="centered-caption">Figure 1: VolatilityBot high level design.</span></span></p>
<p> </p>
<h2><a class="chapter" name="h2-the-volatilitybot-workflow"></a>The VolatilityBot Workflow</h2>
<p>The flow of events follows the previous section’s numbering, starting with the manager and ending with post-processing.</p>
<p>The manager (.py) module is executed first, alongside a folder containing binaries or a single file set as a parameter. The manager proceeds to build a queue of all the samples to process and adds them to a database. The manager module then locates an idle research machine/VM that can carry out the next step, and sends the file over to it.</p>
<p>Next, the agent on the research machine/VM executes the file and ‘sleeps’ for a predefined length of time that can be set by the researcher as per his or her preferences. The machine is then put in a suspended state.<br />In the third step, all configured code extractor modules are executed. Memory dumps are stored, and metadata is saved in a designated database.</p>
<p>Finally, once the extraction phase has completed, all the configured post-processing modules are executed.<br />The manager is multi-threaded and is configured to take advantage of all machines at the same time. Each sample processing on a machine has its own thread, which is terminated once the processing of the sample has finished. Processing of a sample refers to both the machine executing the sample and to all the code-extraction and post-processing modules after the machine is suspended.</p>
<h2><a class="chapter" name="h2-core-capabilities"></a>Core Capabilities</h2>
<p>Some of the core capabilities of this automation tool were designed to make it as scalable as possible and easy to work with over time:</p>
<ul>
<li><span style="line-height: 1.42857;">VolatilityBot's manager can handle an unlimited number of machines at once, all depending on the performance of the researcher's equipment.</span></li>
<li><span style="line-height: 1.42857;">Automatic 'golden image' generation is provided in order to ease the process of creating all 'golden image' data. Just create your configuration file and execute the script.</span></li>
<li><span style="line-height: 1.42857;">To simplify scalability, any database supported by SQLalchemy can be set or replaced as needed. The Bot‑Excavator's backend is based on SQLalchemy and saves data to an SQLite database.</span></li>
<li><span style="line-height: 1.42857;">Memory dumps and data from all configured post‑processing modules are saved to a predefined storage directory.</span></li>
<li><span style="line-height: 1.42857;">Tags can be added to each execution of the script for quick visual reference to information you may need later.</span></li>
<ul style="list-style-type: circle;">
<li>Dynamic tags can be added to post-processing modules. For example, malware that loads a kernel‑mode driver can be tagged with ‘loads_kmd’.</li>
</ul>
</ul>
<p>In terms of additional modules that may be deemed necessary in the future, researchers working with VolatilityBot will find that its modular structure makes it very easy to write additional modules, whether code-extractor modules or post-processing ones.</p>
<h2><a class="chapter" name="h2-efficacy-testing"></a>Efficacy Testing</h2>
<p>Hundreds of samples have been tested in VolatilityBot. I used a research environment comprised of five <em>Windows XP</em> (x86) machines (<em>VMware</em>-powered). Each sample was executed for exactly a minute and a half.</p>
<p>A couple of malware subsets were created and run through VolatilityBot:</p>
<h3><a class="chapter" name="h3-virusshare-subset"></a>VirusShare subset</h3>
<p>I took two subsets from the latest VirusShare archive and ran all of them through VolatilityBot. <a href="#table1">Table 1</a> shows some statistical information regarding the results. <a class=" anchor" name="table1"></a></p>
<table border="0" align="center">
<tbody>
<tr>
<td><strong>VirusShare Subset I</strong></td>
</tr>
<tr>
<td>Total samples</td>
<td>1,750</td>
</tr>
<tr>
<td>Samples with at least one successful dump</td>
<td>1,658</td>
</tr>
<tr>
<td>Injected code extractions</td>
<td> 256</td>
</tr>
<tr>
<td>New processes dumped</td>
<td> 1,637</td>
</tr>
<tr>
<td>Kernel modules dumped</td>
<td> 72</td>
</tr>
<tr>
<td>Total storage used</td>
<td> 3.72 GB</td>
</tr>
<tr>
<td><strong>VirusShare Subset II</strong></td>
</tr>
<tr>
<td>Total samples</td>
<td> 2,125</td>
</tr>
<tr>
<td>Samples with at least one successful dump </td>
<td> 1,737</td>
</tr>
<tr>
<td>Injected code extractions </td>
<td> 736</td>
</tr>
<tr>
<td>New processes dumped </td>
<td> 1,726</td>
</tr>
<tr>
<td>Kernel modules dumped </td>
<td> 47</td>
</tr>
<tr>
<td>Total storage used </td>
<td> 4.7 GB</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 1: Statistical information regarding the results of running samples from VirusShare through VolatilityBot.</p>
<p style="text-align: left;">Note that not all of the samples referred to in <a href="#table1">Table 1</a> inject code or load a kernel driver. Some of them are just installers of potentially unwanted programs and some of them might be corrupted executables.</p>
<p style="text-align: left;">I noticed a high success rate in general, for all samples in the subset. Success is defined by the ability to extract injected code, a kernel module or dump of a process.</p>
<h3><a class="chapter" name="h3-malware-families-zoo"></a>Malware families’ zoo</h3>
<p>Another test was carried out that was more malware family and category-oriented. <a href="#table2">Table 2</a> shows the statistical information regarding these results. <a class=" anchor" name="table2"></a></p>
<table border="0" align="center">
<tbody>
<tr>
<td><strong>Malware families’ zoo</strong></td>
</tr>
<tr>
<td>Total samples</td>
<td>68 </td>
</tr>
<tr>
<td>Samples with at least one successful dump</td>
<td>63</td>
</tr>
<tr>
<td>Injected code extractions </td>
<td>41 </td>
</tr>
<tr>
<td>New processes dumped </td>
<td>31 </td>
</tr>
<tr>
<td>Kernel modules dumped </td>
<td>4 </td>
</tr>
<tr>
<td>Total storage used </td>
<td>~200 MB </td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 2: Statistical information regarding the results of running samples from a malware familites zoo through VolatilityBot.</p>
<p>In this subset we see an even higher success rate. The tested samples were malware of several different categories: downloaders, financial malware and targeted malware. The analysis output provided indicators such as strings and YARA signatures which focus in-depth analysis on the relevant and significant parts of the malware.</p>
<p>To illustrate VolatilityBot’s versatility, <a href="#figure2">Figures 2</a>, <a href="#figure3">3</a> and <a href="#figure4">4</a> show a few examples of successful extractions. <a class=" anchor" name="figure2"></a></p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/5214/5587/2610/VolatilityBot-2.jpg" alt="VolatilityBot-2.jpg" width="845" height="216" /><span class="centered-caption">Figure 2: A sample that loaded a kernel driver. <a class=" anchor" name="figure3"></a></span></p>
<p><span class="centered-caption"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/3814/5587/2652/VolatilityBot-3.jpg" alt="VolatilityBot-3.jpg" width="845" height="276" />Figure 3: A sample that injected into all browsers. <a class=" anchor" name="figure4"></a></span></p>
<p><span class="centered-caption"><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/4914/5587/2664/VolatilityBot-4.jpg" alt="VolatilityBot-4.jpg" width="751" height="404" />Figure 4: Hook disassembly.</span></p>
<h2><a class="chapter" name="h2-known-weaknesses-in-volatilitybot"></a>Known Weaknesses in VolatilityBot</h2>
<p>VolatilityBot is still a work in progress, and it’s not perfect. The following are some of the weaknesses I have found during my research:</p>
<ul>
<li><span style="line-height: 1.42857;">False positives can be caused because legitimate </span><em style="line-height: 1.42857;">Windows</em><span style="line-height: 1.42857;"> kernel drivers might be loaded during malware execution (which generally might happen as a result of plug-n-play devices in the VM) and might be dumped as well. Additionally, any new process started after the malware is executed will be dumped too. In order to avoid this it is helpful to cancel all automatic updates on the machine (browsers, </span><em style="line-height: 1.42857;">Windows Update</em><span style="line-height: 1.42857;">, etc.).</span></li>
<li><span style="line-height: 1.42857;">The malware might detect the virtual environment, no matter how much effort is put into hiding it. Malware might have long sleep timers too, in order to avoid research and prevent us from getting the complete malicious code.</span></li>
</ul>
<h2><a class="chapter" name="h2-future-development"></a>Future Development</h2>
<p>There are a lot of ideas and directions for the future development of VolatilityBot a researcher can choose in order to use VolatilityBot for his/her own research:</p>
<ol>
<li><span style="line-height: 1.42857;">Shell code extraction – extract the injected shell code of an exploit or malware. </span></li>
<li><span style="line-height: 1.42857;">Submitting to different machines or platforms in parallel as part of the same analysis, and getting different extracted code. For example, submit a malware sample to Windows XP and Windows 7, either x86 and x64, and get all the possible injected payloads.</span></li>
<li><span style="line-height: 1.42857;">Automated extraction of malware configuration (specific to malware family).</span></li>
<li><span style="line-height: 1.42857;">Extraction of IP addresses, mutexes, etc.</span></li>
</ol>
<h2><a class="chapter" name="h2-appendix"></a>Appendix</h2>
<p>VolatilityBot can be used in two different modes:</p>
<h3><a class="chapter" name="h3-1-daemon-mode"></a>1. Daemon mode</h3>
<p>The VolatilityBot daemon runs in the background and looks in the database for malware samples awaiting analysis</p>
<p>New samples can be submitted using:</p>
<pre>python VolatilityBot.py –e –r –filename ~/samples_folder</pre>
<p>The daemon itself is executed using:</p>
<pre>python VolatilityBot.py -D --sleep 60</pre>
<h3><a class="chapter" name="h3-2-script-mode"></a>2. Script mode</h3>
<p>VolatilityBot is executed, and once the analysis queue is empty, it will exit and display a summary with statistics:</p>
<p>A. Single file – a single file to be processed (60 seconds timeout):</p>
<pre>python VolatilityBot.py –filename ~/sample.exe --sleep 60 </pre>
<p>B. Folder – submit a folder containing PE files (recursive) and create a work queue:</p>
<pre>python VolatilityBot.py –r –filename ~/sample_folder –sleep 60 </pre>
<p>C. Submit a folder while skipping existing files in the database:</p>
<pre>python –r –s VolatiliotyBot.py –filename ~/sample_folder –sleep 60</pre>
<p>D. Re-submission of failed files (according to the status in the database):</p>
<pre>python –Q VolatilityBot.py –sleep 60</pre>
<p><span style="line-height: 12.987px;"> </span></p>
<p><span style="line-height: 12.987px;"> </span></p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/conference/vb2015/Korman-VB2015.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
</div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>