<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2017 paper: Browser attack points still abused by banking trojans</title>
<meta name="description" content="With the ever-increasing use of banking-related services on the web, browsers have naturally drawn the attention of malware authors. They are interested in adjusting the behaviour of the browsers for their purposes, namely intercepting the content of web forms, modifying server responses manifested as webinjects, and confirming validity of spoofed SSL certificates. This paper presents an overview of the techniques used by major banking trojans in the wild. " />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 5790;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h2><a class="chapter" name="h2-vb2017-paper-browser-attack-points-still-abused-banking-trojans"></a>VB2017 paper: Browser attack points still abused by banking trojans</h2>
<h3><a class="chapter" name="h3-peter-kalnai-amp-michal-poslusny"></a>Peter Kálnai &amp; Michal Poslušný</h3>
<p>ESET, Czech Republic</p>
<p><em>Copyright © 2017 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-11880" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-11880" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-introduction">Introduction</a><br /> <a class="toc-level2" href="#h2-mitb-attacks">MITB attacks</a><br /> <a class="toc-level3" href="#h3-specifics-mitb-microsoft-edge">Specifics of MITB in Microsoft Edge</a><br /> <a class="toc-level3" href="#h3-specifics-mitb-chrome-and-opera">Specifics of MITB in Chrome and Opera</a><br /> <a class="toc-level2" href="#h2-families-banking-trojans">Families of banking trojans</a><br /> <a class="toc-level3" href="#h3-windridex">Win/Dridex</a><br /> <a class="toc-level3" href="#h3-winspyursnif">Win/Spy.Ursnif</a><br /> <a class="toc-level4" href="#h4-isfb-main-branch">ISFB – the main branch</a><br /> <a class="toc-level4" href="#h4-winspyursnifax">Win/Spy.Ursnif.AX</a><br /> <a class="toc-level4" href="#h4-goznym">GozNym</a><br /> <a class="toc-level3" href="#h3-wintrickbot">Win/TrickBot</a><br /> <a class="toc-level3" href="#h3-winqadars">Win/Qadars</a><br /> <a class="toc-level3" href="#h3-winqbot">Win/Qbot</a><br /> <a class="toc-level3" href="#h3-wintinukebot">Win/Tinukebot</a><br /> <a class="toc-level2" href="#h2-summary-targets">Summary of targets</a><br /> <a class="toc-level2" href="#h2-detection-volatility-framework">Detection with Volatility Framework</a><br /> <a class="toc-level2" href="#h2-mitigation-and-prevention">Mitigation and prevention</a><br /> <a class="toc-level2" href="#h2-conclusion">Conclusion</a><br /> <a class="toc-level2" href="#h2-references">References</a><br /> <a class="toc-level2" href="#h2-appendix-samples">Appendix: Samples</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>With the ever-increasing use of banking-related services on the web, browsers have naturally drawn the attention of malware authors. They are interested in adjusting the behaviour of the browsers for their purposes, namely intercepting the content of web forms, modifying server responses manifested as webinjects, and confirming validity of spoofed SSL certificates. These goals are usually achieved by placing malicious code at certain addresses within a browser process.</p>
<p>It has been more than seven years now since the infamous Zeus bot first successfully took advantage of <em>Mozilla</em> <em>Firefox</em> by hooking specific exported functions, and the same approach has been widely used by others ever since. Moving to<em> Microsoft Edge</em>, the browser's developers have made their best efforts to mitigate arbitrary code execution, using technologies like Code Integrity Guard (CIG) and Arbitrary Code Guard (ACG), but the focus is on stopping exploitation of the browser itself, rather than preventing execution of injected code delivered by a remote malicious process. Finally, cybercrooks seem to have the greatest trouble adapting their hooks in<em> Google Chrome</em>. Though it might not have been the primary intent of the developers, the custom implementation of its SSL functionality has resulted in a cat-and-mouse game thanks to the fact that the attack points are unexported and change regularly.</p>
<p>In our presentation we will guide the audience through an overview of the techniques used by major banking trojans in the wild. We are pleased to see that the ease of implementing hijacking methods is diminishing, and that attackers are under constant pressure to adopt changes. Moreover, security solutions offer various browser protections that work very well against existing methods. How do they handle that? Wouldn't it be great to see the mitigation in the first possible layer? We consider this as a topic for discussion. As a side result, we also transform our collected knowledge into a plug-in for the Volatility Framework that extends the functionality of <em>apihooks</em> within the scope of browsers.</p>
<p> </p>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>The history of man-in-the-browser (MITB) attacks goes back at least as far as 2007, to the birth of the Zeus bot. The basic principles of MITB, including both form grabbing and webinjects, their hooking techniques and their role in the cyber-underground economy, are widely known and understood [<a href="#ref1">1</a>, <a href="#ref2">2</a>]. Attack trends have evolved hand-in-hand with the development of web browsers and network protocols. Nowadays, a robust banking trojan cannot exist without code injects of both 32-bit and 64-architectures, or without the ability to put the HTTP/2 protocol [<a href="#ref3">3</a>] out of action. The dark web is full of advertisements for malware promising fancy features that would lead to a large botnet, but their authenticity is questionable and their perceived reputation depends on the advertiser. In <a href="#figure1">Figure 1</a> we show an example of a relatively recent, unverified, offer from October 2016.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/3915/1601/5241/01_fsociety_ad.png" alt="01_fsociety_ad.png" width="512" height="530" /><span class="centered-caption"><a class=" anchor" name="figure1"></a>Figure 1: Advertisement for an advanced banking trojan.</span></p>
<p>The key principle in MITB is to hijack a browser's features for the benefit of the attacker. This is realized predominantly through malicious handlers installed to address specific functions in the browser's process space. The methods used to install the hooks generally do not need to be modified over time; however, there is one group of exceptions which has increasing dominance: <em>Chromium</em>-based projects. The contribution of this paper is to summarize the technical details of how malware developers reach their goals despite the raising of the bar in terms of defensive measures. During our research, we recognized well-written coding of a professional standard, as well as a series of faux pas ranging from redundant checks of conditions to illogical code flow.</p>
<p> </p>
<h2><a class="chapter" name="h2-mitb-attacks"></a>MITB attacks</h2>
<p>There are five major web browsers in widespread use on <em>Windows</em> systems: <em>Mozilla Firefox</em>, <em>Internet Explorer</em>,<em> Microsoft Edge</em>,<em> Google Chrome</em> and <em>Opera</em>. For an attacker, the ease of adapting the desired function hooks differs with each browser. While the attack points in the <em>Firefox</em> and <em>Microsoft</em> browsers are exported, and therefore easily hooked, the situation in <em>Chrome</em> and <em>Opera</em> is different. Both of these programs are based on the common codebase of the <em>Chromium</em> project, which implements SSL functionality in a customized form.</p>
<p>There are multiple obstacles that malware authors have to overcome before they can achieve their goals:</p>
<ol>
<li>Locating a browser's process memory</li>
<li>Injecting a payload</li>
<li>Locating the attack points</li>
<li>Installing hooks</li>
</ol>
<p>Malware authors vary in the way they implement attacks, displaying different levels of code quality and optimization, however they are quite far from being cargo cult programmers.</p>
<p>Apart from hooking the attack points, malware developers are also interested in turning off special protocol features like HTTP/2, SPDY and QUIC as they are implemented in browsers. The attackers really don't enjoy these protocols because request and response HTTP headers are compressed, and therefore harder to parse. Instead of implementing complicated routines to extract the content, they apparently prefer to disable the use of these protocols in the way in which each browser is configured.</p>
<p> </p>
<h3><a class="chapter" name="h3-specifics-mitb-microsoft-edge"></a>Specifics of MITB in Microsoft Edge</h3>
<p><em>Microsoft Edge</em> is implemented only as a 64-bit web browser. Injection is possible, even though the browser runs under the supposedly safe Runtime Broker process like the apps from the <em>Windows</em> <em>Store</em>. In view of <em>Microsoft</em>'s newly introduced dynamic code mitigation techniques, which include disallowing allocation of new executable memory pages and not allowing existing code pages to be made writable once a process is initialized [<a href="#ref4">4</a>], we had the impression that injection cannot be realized easily. However, the opposite is true: we were able to inject a payload into the <em>Edge</em> browser just as we could into any other process. Only medium integrity level without special privileges was needed to accomplish that. <a href="#figure2">Figure 2</a> shows our custom command-line tool, which injects its code into all instances of <em>Edge</em>, hooks the attack points and exfiltrates login data.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/d84e5ea128c8cf529769e11136acb714_f2422.png" alt="02_MSEdge_Inject.png" width="840" height="600" /><span class="centered-caption"><a class=" anchor" name="figure2"></a>Figure 2: Hijacking network traffic in Microsoft Edge.</span></p>
<p> </p>
<h3><a class="chapter" name="h3-specifics-mitb-chrome-and-opera"></a>Specifics of MITB in Chrome and Opera</h3>
<p>Because these <em>Chromium</em>-based browsers do not export the attack points, malware authors have been forced to come up with various methods of locating them manually. Most malware families have their own unique approach, even though they could copy from each other or from various source code leaks. While MITB support for <em>Chrome</em> is a must due to its market share, support for <em>Opera</em> is rare. The attack points are usually obtained by locating <em>Chrome</em>'s SSL virtual method table, defined as the <span class="monospace">SSL_PROTOCOL_METHOD</span> structure (which we denote subsequently as SSL VMT), which contains functions that send and receive unencrypted HTTP(S) data (<span class="monospace">ssl3_write_app_data</span> and <span class="monospace">ssl3_read_app_data</span>, respectively; <span class="monospace">ssl3_free</span> is additionally hooked; cf. the upper left frame of Figure 6). Note that <em>Chrome</em> switched to the BoringSSL implementation with <em>Chrome 41</em> (March 2015), as the previous <em>Mozilla</em> Network Security Service (NSS) was dropped. <em>Opera</em> switched to <em>Chromium</em>'s codebase and updated its releases accordingly, starting with version 15 in July 2013. <em>Opera</em> has incorporated BoringSSL code since <em>Opera 28</em>, released in March 2015.</p>
<p> </p>
<h2><a class="chapter" name="h2-families-banking-trojans"></a>Families of banking trojans</h2>
<p>Now we provide a catalogue of hijacking techniques as implemented by contemporary banking trojans active in the last year. Despite our attempts to include as many families as possible, the list is most likely incomplete. This is because we may have overlooked projects that are not prevalent enough to be easily spotted, projects that were in the testing phase when banking modules could not be acquired because a control server was not yet accessible, the resurgence of older variants, or malware omitting its banking module in newer versions. When referring to malware families, we use <em>ESET</em>'s detection convention with a prefix 'Win/' if we mean both 32-bit and 64-bit variants. These names may easily be cross-referenced on <em>VirusTotal</em>, nevertheless we mention the most commonly known alternative in parentheses. If the names are identical, we will omit the prefix.</p>
<p>The families that we considered already to be eradicated due to the author's retirement or actions on the part of law enforcement agencies include Win32/Tinba, Win32/Battdil (a.k.a. Dyre) [<a href="#ref5">5</a>], Win32/Corebot [<a href="#ref6">6</a>] and Win32/Phase (a.k.a. PhaseBot, previously developed as Win32/Napolar, a.k.a. SolarBot). We did not see a banking module in the latest versions of the Win32/Emotet malware, either [<a href="#ref6">7</a>]. Also, our focus is not on families that prefer the man-in-the-middle attacks, which are typical of many Win/Zbot (a.k.a. Zeus) [<a href="#ref8">8</a>]. However, we found a fork of Zeus known as Floki [<a href="#ref9">9</a>, <a href="#ref10">10</a>] trying to include MITB in October 2016. Looking at its approach to MITB for <em>Chrome</em>, the bot had two hard-coded byte sequences, which served for pattern searches in a mapped chrome.dll. The match was successful for all <em>Chrome 52</em> major versions. The patterns were not designed to hit the corresponding attack points in SSL VMT but their wrappers instead (see <a href="#figure3">Figure 3</a>).</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/8015/1601/6021/03_floki_pattern_search.png" alt="03_floki_pattern_search.png" width="784" height="623" /><span class="centered-caption"><a class=" anchor" name="figure3"></a>Figure 3: Pattern search for Floki attack points.</span></p>
<p>Interestingly, there was a sample of Win32/PSW.Papras.CU from 2013 (known as an early version of Vawtrak) that demonstrated that its authors didn't know at that time how to handle hooking in the newly introduced <em>Chrome</em> browser, and they disabled any network functionality in a <em>Chrome</em> process instead. This was done by calling the WSACleanup() routine in an endless loop. The victim was then forced to switch to another browser, most likely <em>Internet Explorer</em>, which was installed by default on every <em>Windows</em> system, and since it was the most prevalent browser at the time, it's natural to expect that the authors already had hooks for <em>IE</em> ready (and indeed they did).</p>
<p> </p>
<h3><a class="chapter" name="h3-windridex"></a>Win/Dridex</h3>
<p>The Dridex bot is one of the most adaptable and prevalent in-the-wild banking trojans. The authors update the bot's code consistently and the botnets are still very active despite several botnet takedowns and arrests relating to this group [<a href="#ref11">11</a>, <a href="#ref12">12</a>].</p>
<p>The way Dridex locates the attack points in <em>Chrome</em> is heavily dependent on the browser version. Rather than relying on a generic solution, Dridex seems to rely on a prompt response from its authors, who usually take up to a few days at most to update their banking module to cover a new release of <em>Chrome</em>, cf. <a href="#table1">Table 1</a>. The trojan looks up <em>Chrome</em>'s version in the associated Uninstall registry key. This seems not to be an optimal strategy as the portable versions do not provide this information – we have observed more reliable methods implemented by competing banking trojans, such as extracting the version from chrome.dll's module handle or resources. Nevertheless, the version is then used to decide which pattern will be used to find the SSL VMT. In the past, Dridex used patterns locating specific parts of code in the .text section that contained a static pointer to SSL VMT. In the left frame of <a href="#figure4">Figure 4</a>, we show a list of patterns that helped identify a specific position in the .text section of chrome.dll. The list has grown as each major release of <em>Chrome</em> produces slightly different code. Moreover, there were many changes of indices of the desired attack points in the table, so the bot had to resolve them case by case, as shown in the frame on the right.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/ad3cfa530fb79061c78f867871c413e6_f2424.png" alt="04_dridex_pattern_search.png" width="845" height="294" /><span class="centered-caption"><a class=" anchor" name="figure4"></a>Figure 4: Pattern search and version checks of Chrome by Dridex.</span></p>
<p>In the most recent releases of Dridex, the authors have finally dropped locating the static pointer, and instead they look for the SSL VMT directly in the .rdata section using the \x03\x04\x03 pattern. This is a substring of a concatenation of two constants signalling the highest and the lowest versions of SSL supported by the methods in SSL VMT.</p>
<p>As <a href="#table1">Table 1</a> shows, successful adaptation addressing changes in SSL VMT for the latest <em>Chrome</em> version was usually achieved in just a few days. The third column shows the lowest version number of the bot collected by<em> ESET LiveGrid</em> that successfully implemented the attacks for the latest stable <em>Chrome</em> release. In other words, we have not caught any bot with an earlier build number that managed to attack the corresponding release successfully. The timestamp in the PE header can easily be altered; however, in these cases the values in the fourth column seem to be the original values, since they correspond well with the release dates of <em>Chrome</em> versions.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Chrome stable version</strong></td>
<td><strong>Release date (DD/MM/YY)</strong></td>
<td><strong>Dridex version</strong></td>
<td><strong>Timestamp (DD/MM/YY)</strong></td>
</tr>
<tr>
<td>40.0.2214.115</td>
<td>19/02/15</td>
<td>2.093</td>
<td>11/03/15</td>
</tr>
<tr>
<td>42.0.2311.90</td>
<td>14/04/15</td>
<td>2.108</td>
<td>17/04/15</td>
</tr>
<tr>
<td>43.0.2357.65</td>
<td>19/05/15</td>
<td>3.011</td>
<td>26/05/15</td>
</tr>
<tr>
<td>44.0.2403.89</td>
<td>21/07/15</td>
<td>3.073</td>
<td>06/08/15</td>
</tr>
<tr>
<td>45.0.2454.85</td>
<td>01/09/15</td>
<td>3.102</td>
<td>25/09/15</td>
</tr>
<tr>
<td>47.0.2526.73</td>
<td>01/12/15</td>
<td>3.154</td>
<td>07/12/15</td>
</tr>
<tr>
<td>48.0.2564.97</td>
<td>27/01/16</td>
<td>3.167</td>
<td>29/01/16</td>
</tr>
<tr>
<td>49.0.2623.87</td>
<td>08/03/16</td>
<td>3.188</td>
<td>10/03/16</td>
</tr>
<tr>
<td>51.0.2704.106</td>
<td>23/06/16</td>
<td>3.225</td>
<td>24/06/16</td>
</tr>
<tr>
<td>53.0.2785.116</td>
<td>14/09/16</td>
<td>3.258</td>
<td>26/09/16</td>
</tr>
<tr>
<td>54.0.2840.71</td>
<td>20/10/16</td>
<td>3.269</td>
<td>17/11/16</td>
</tr>
<tr>
<td>58.0.3029.81</td>
<td>19/04/17</td>
<td>4.048</td>
<td>16/05/17</td>
</tr>
</tbody>
</table>
<p class="centered-caption"><a class=" anchor" name="table1"></a>Table 1: Reaction times of Dridex.</p>
<p> </p>
<h3><a class="chapter" name="h3-winspyursnif"></a>Win/Spy.Ursnif</h3>
<p>Unlike Dridex, which seems to have been developed by a single development team with the same binaries shared across all campaigns/botnets, Win/Spy.Ursnif has several unrelated forks of a common code base that evolved over time and are, these days, quite different from each other in many aspects. The source code of the project, originally called ISFB and referring to version 2.13.24.1 build 459, was leaked in late 2015 and is still available on <em>GitHub</em>. Since then, many forks of the project have come into being, for example Dreambot, IAP, Powersnif, GozNym, etc. [<a href="#ref13">13</a>].</p>
<p> </p>
<h4><a class="chapter" name="h4-isfb-main-branch"></a>ISFB – the main branch</h4>
<p>The <em>Chrome</em> version is determined by looking up the version info directly in the chrome.exe binary, which is probably the most reliable way.</p>
<p>This fork also has a very interesting SSL VMT lookup – probably the most advanced we have seen. It walks through the relocations present in the .rdata section and hooks every virtual method it can find with a common handler. Every time the handler is called, it looks for 'GET', 'POST', 'PUT' or 'OPTI' strings in the third argument on the stack (cf. <a href="#figure5">Figure 5</a>). If any of these four strings is found, it will assume it has found the <span class="monospace">ssl3_write_app_data</span> function in SSL VMT, and it counts the position of the other two attack points and hooks them with new, specific SSL handlers. The relative offset of the table, together with the checksum of chrome.dll, are automatically saved into the registry, so it doesn't have to do this 'nasty' thing again. The next time it is injected into <em>Chrome</em>, it can hook the SSL VMT directly. A custom exception handler is also installed in order to avoid ACCESS_VIOLATION crashes when dereferencing an argument that is not a pointer. This increases stability during these unstable actions.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/0e812974d9571dcd90a11d1a4e721807_f2425.png" alt="05_isfb_initial_hooks.png" width="840" height="683" /><span class="centered-caption"><a class=" anchor" name="figure5"></a>Figure 5: Almost every Chrome virtual method is initially hooked by IFSB.</span></p>
<p>MITB attacks against <em>Opera</em> do not seem to be maintained by the IFSB authors. Locating and hooking the attack points would be successful with their robust approach, and we tested this against some older releases. However, the lookup is not even triggered in most <em>Opera</em> versions due to a design change that transferred SSL VMT to a different module. The authors could very easily correct this if they wished to.</p>
<p> </p>
<h4><a class="chapter" name="h4-winspyursnifax"></a>Win/Spy.Ursnif.AX</h4>
<p>The first report of this threat appeared in June 2017 [<a href="#ref14">14</a>]. This fork does not follow the original versioning; in fact it possesses no version info at all. The PE timestamp of the earliest acquired sample reads 12/12/16. The threat mostly targets countries like Mexico, Colombia and Chile. The family can be identified by the PDB strings:</p>
<ul>
<li>C:\Users\W7\Downloads\ModificationSourceCode_16_12_6\Bin\Loader.pdb</li>
<li>C:\Users\W7\Downloads\Project\Bin\Loader.pdb</li>
</ul>
<p>The developers clearly didn't participate in any festivities on Saint Nicholas' Day that year, perhaps unlike many of the victims from the predominantly Roman Catholic countries receiving their code. The bot does not bother obtaining the <em>Chrome</em> version, but searches for a series of version-specific patterns instead, hoping that one will succeed. The pattern searches are likely to flag incorrect addresses as the attack points. This is exactly what happened with <em>Chrome 59</em>, which would be hooked correctly using the pattern search for <em>Chrome 58</em>, but due to the bot's illogical traversal from the oldest to the newest releases, it wrongly matched to the place that worked for the old <em>Chrome 53</em> so the hooks were installed on a completely different virtual method table. Moreover, there is also a failure in preserving the attack support from <em>Chrome 57</em> 64-bit to <em>Chrome 58</em> 64-bit because after a successful discovery of SSL VMT, there are unnecessary additional conditions on the first byte in the bodies of functions that remained the same in 32-bit releases, but not in these 64-bit releases. Overlooking all these details seems like either carelessness or erroneous thinking on the part of the malware developers.</p>
<p>An unreferenced character string 'OPERA.exe' suggests the possible withdrawal of the MITB feature for this browser.</p>
<p> </p>
<h4><a class="chapter" name="h4-goznym"></a>GozNym</h4>
<p>Win/Nymaim first incorporated the ISFB functionality directly into a downloadable banking module that was enormously obfuscated soon after using the same techniques as the main Win/Nymaim project cf. [<a href="#ref15">15</a>, <a href="#ref16">16</a>].</p>
<p> </p>
<h3><a class="chapter" name="h3-wintrickbot"></a>Win/TrickBot</h3>
<p>There are clues indicating that this project is a direct successor of Dyre, the banking trojan that was active between March 2014 and November 2015. Moreover, there is an unreferenced specific string, 'K8DFaGYUs83KF05T', which originated in the Carberp source code. The first version that was uploaded to <em>VirusTotal</em> was numbered 1001 with the timestamp 2016-06-22. A detailed analysis is available in [<a href="#ref17">17</a>].</p>
<p>TrickBot queries the Software\Google\Chrome\BLBeacon registry key to obtain the <em>Chrome</em> version and searches for the \x03\x04\x03 pattern to locate SSL VMT. Being a relatively recent project, it does not support legacy versions prior to <em>Chrome 54</em>.</p>
<p> </p>
<h3><a class="chapter" name="h3-winqadars"></a>Win/Qadars</h3>
<p>This threat is under constant development, evolving from the early v1.0.2.3 in December 2013 [<a href="#ref18">18</a>] up to the current v3.0.0.1, with major version 3 first reported in September 2016 [<a href="#ref19">19</a>]. The main module is heavily obfuscated, as are the plug-ins, and data is mostly stored in a variety of structure types, which slows down the analysis.</p>
<p>As is the case with Win/Spy.Ursnif, Qadars parses relocations to obtain candidates for SSL VMT located in the .rdata section. Every selected virtual method table is then compared against a list of masks, which are basically structures of four-byte bitfields. There are 10 masks of that form in total, two of which are displayed in <a href="#figure6">Figure 6</a>. The upper byte generally orders a condition evaluation, such as whether the element in the table is equal to 0x304, or whether the element is a function from the .text section, or if it also points to 0, and so on. If the table is SSL VMT, then the position of entries with the upper byte equal to 0x82 identifies the indices of the three attack points and the lower byte then indicates its internal position. Qadars tries every mask in the array from newest to oldest until it succeeds.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/8915/1602/2715/06_qadars_masks.png" alt="06_qadars_masks.png" width="533" height="408" /><span class="centered-caption"><a class=" anchor" name="figure6"></a>Figure 6: Structure of masks present in Qadars.</span></p>
<p> </p>
<h3><a class="chapter" name="h3-winqbot"></a>Win/Qbot</h3>
<p>Qbot has been known for as long as Zeus, but it is still active. A detailed description is provided in [<a href="#ref20">20</a>, <a href="#ref21">21</a>]. The bot doesn't care into which browser it is currently injected; it simply tries to hook all the potential points of attack that it can find in its process space (<a href="#figure7">Figure 7</a>).</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/3415/1602/2787/07_qbot_tries_all_hooks.png" alt="07_qbot_tries_all_hooks.png" width="716" height="347" /><span class="centered-caption"><a class=" anchor" name="figure7"></a>Figure 7: Hooks are prepared by Win/Qbot for every browser, regardless of the process name.</span></p>
<p>Hooking is done in two stages: first, Qbot finds the functions it wants to hook, stores all the necessary information and creates a trampoline to the original function [<a href="#ref22">22</a>]. In the second stage, all the previously stored functions are hooked at once.</p>
<p>When looking for <em>Chrome</em>'s attack points, Qbot doesn't try to hook SSL VMT directly, but searches for higher level wrappers in the code section. They are found using very specific patterns that are crafted for every version of <em>Chrome</em>, as these functions change frequently and the patterns usually do not last longer than one major release. Qbot loops through all stored patterns from newest to oldest until the valid attack points are found.</p>
<p>While Qbot doesn't really puzzle over what process it's residing in, it's very careful and precise when it comes to hooking itself. Qbot uses the 'MinHook' open source hooking library that can be found online. The same hooking library was also used in the leaked TinyNuke source code. However, the structure of patterns is completely different. The structure starts with the word representing the length of the pattern that follows afterwards. The byte 0xAA serves as a wildcard (<a href="#figure8">Figure 8</a>).</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/6715/1602/2890/08_qbot_patterns.png" alt="08_qbot_patterns.png" width="706" height="162" /><span class="centered-caption"><a class=" anchor" name="figure8"></a>Figure 8: Structure of patterns present in Qbot.</span></p>
<p> </p>
<h3><a class="chapter" name="h3-wintinukebot"></a>Win/Tinukebot</h3>
<p>There is a really interesting story behind this project [<a href="#ref23">23</a>]. It seems to have been developed by an adolescent French guy who released his code on <em>GitHub</em> under his real name, together with a contact email on a domain established by his father. First, he excitedly shared his project with acquaintances who, unsurprisingly, tried to profit from his concept. He considered this attitude unfair, so he intentionally made the sources available for free, to the disadvantage of other cybercrooks trying to sell his creation on the dark web [<a href="#ref24">24</a>]. Meanwhile, the project was sold on cybercrime forums under various nicknames, all of which were banned for violating the specific rules of the cybercrime market.</p>
<p>There is insufficient evidence that this malware family has spread widely yet. However, there are signs of its initial distribution in the wild, and with many new forks (around 170 at the time of writing) in a mirrored repository on <em>GitHub</em>, its potential to become prevalent is clear.</p>
<p>The structure related to hooking the attack points was copied from an official project supported by <em>Google</em> (called 'Webtestpage' hosted under the profile 'WPO Foundation'), which was available on <em>GitHub</em>. The structure of patterns seems original, because other families use a different design (<a href="#figure9">Figure 9</a>).</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/2415/1602/3026/09_tinukebot_patterns.png" alt="09_tinukebot_patterns.png" width="692" height="269" /><span class="centered-caption"><a class=" anchor" name="figure9"></a>Figure 9: Structure of patterns present in Win/Tinukebot.</span></p>
<p>There is also a shift in the method of SSL VMT hooking. The attack points are not replaced in the table itself, but the hooks are installed in the prologues of the desired functions instead. This has a similar impact on detection by the Volatility Framework as in the case of Win/Qbot, because the original <em>apihooks</em> plug-in [<a href="#ref25">25</a>] scans modifications only for exported functions – we were therefore forced to extend its scope.</p>
<p> </p>
<h2><a class="chapter" name="h2-summary-targets"></a>Summary of targets</h2>
<p><a href="#table">Table 2</a> shows the families considered here and their support for MITB attacks against various types of web browser. The second column indicates the latest build of the related bot specified among the families in the first column, as of 6 June 2017. The other columns show the targeted browsers. Note that it's only necessary to specify the browser version for <em>Chrome</em> and <em>Opera</em>. The support of attacks on their releases is enumerated for the latest version of the bot only. However, the code clean-up is also standard practice in these malware projects, so the support for various releases was present in previous bot versions. For instance, Dridex has supported attacks on <em>Chrome</em> since version 40 and perhaps even in earlier versions.</p>
<table border="0">
<tbody>
<tr>
<td style="text-align: center;" rowspan="3"><strong>Banking trojan</strong></td>
<td style="text-align: center;" rowspan="3"><strong>Latest version</strong></td>
<td style="text-align: center;" colspan="6"><strong>Web browser</strong></td>
</tr>
<tr>
<td style="text-align: center;" rowspan="2"><strong>IE</strong></td>
<td style="text-align: center;" rowspan="2"><strong>Edge (x64)</strong></td>
<td style="text-align: center;" rowspan="2"><strong>Firefox</strong></td>
<td style="text-align: center;" colspan="2"><strong>Chrome</strong></td>
<td style="text-align: center;" rowspan="2"><strong>Opera</strong></td>
</tr>
<tr>
<td style="text-align: center;"><strong>32-bit</strong></td>
<td style="text-align: center;"><strong>64-bit</strong></td>
</tr>
<tr>
<td class="table table-bordered">Win/Dridex</td>
<td style="text-align: center;">4.057 (26/05/17)</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">No</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">48-59</td>
<td style="text-align: center;">48-59</td>
<td style="text-align: center;">No</td>
</tr>
<tr>
<td>Win/TrickBot</td>
<td style="text-align: center;">1025 (22/05/17)</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">54-59</td>
<td style="text-align: center;">54-59</td>
<td style="text-align: center;">No</td>
</tr>
<tr>
<td>Win/Spy.Ursnif (Gozi/ISFB)</td>
<td style="text-align: center;">2.16 build 943 (09/05/17)</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">44-59</td>
<td style="text-align: center;">44-59</td>
<td style="text-align: center;">28;29</td>
</tr>
<tr>
<td>Win/Spy.Ursnif.AX</td>
<td style="text-align: center;">- (26/05/17)</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">49-52; 53; 54-58</td>
<td style="text-align: center;">49-52; 53; 54-57</td>
<td style="text-align: center;">No</td>
</tr>
<tr>
<td>Win/Qbot</td>
<td style="text-align: center;">0310.734 (24/05/17)</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">48-58</td>
<td style="text-align: center;">54-58</td>
<td style="text-align: center;">No</td>
</tr>
<tr>
<td>Win/Qadars</td>
<td style="text-align: center;">3.0.0.1 (04/04/17)</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">No</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">49-57</td>
<td style="text-align: center;">49-57</td>
<td style="text-align: center;">No</td>
</tr>
<tr>
<td>Win/Tinukebot</td>
<td style="text-align: center;">- (06/06/17)</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">No</td>
<td style="text-align: center;">Yes</td>
<td style="text-align: center;">52; 53; 54-59</td>
<td style="text-align: center;">52; 53; 54-59</td>
<td style="text-align: center;">No</td>
</tr>
</tbody>
</table>
<p class="centered-caption"><a class=" anchor" name="table"></a>Table 2: Summary of banking trojans’ targets. </p>
<p> </p>
<h2><a class="chapter" name="h2-detection-volatility-framework"></a>Detection with Volatility Framework</h2>
<p>The <em>apihooks</em> plug-in works for exported functions only. Therefore, in the case of <em>Microsoft</em> browsers and <em>Firefox</em>, we can use its functionality and just restrict it to browser processes. The harder part is to identify hooks on unexported functions, as is the case with <em>Chrome</em> MITB attacks. As we have shown, there are multiple approaches as to where to put an attacker's handler. Changes of SSL VMT entries are easy to spot as soon as the malware's SSL VMT replacements are completed. The easiest approach to spotting the malicious hook on unexported functions outside of SSL VMT is a pattern search inspired by sequences of bytes found in the analysed families.</p>
<p>The implementation of the plug-in can be found on <em>ESET</em>'s <em>GitHub</em> repository [<a href="#ref26">26</a>]. Besides the recognition of hooks in exported functions, the plug-in also supports detecting replacements and hooks in SSL VMT or hooks applied in the wrappers calling functions from SSL VMT. Both architectures have been considered.</p>
<p> </p>
<h2><a class="chapter" name="h2-mitigation-and-prevention"></a>Mitigation and prevention</h2>
<p>The security issues caused by MITB attacks have existed for quite some time. There are several points at which the mitigation of these attacks is possible and several of them have been examined in the past by authors active either in academia or in the anti-virus industry. Most of these approaches focus on webinjects. Buescher<em> et al.</em> reported in their 2011 paper [<a href="#ref27">27</a>] a technology called Banksafe that detects the attempts of illegitimate software to manipulate the browser's network activity. Continella <em>et al.</em> recently designed a system called Prometheus [<a href="#ref28">28</a>], which is able to identify malicious injections, to generate behavioural signatures, and finally to extract target URLs by using the Volatility Framework and YARA rules. In [<a href="#ref29">29</a>], an application layer called HoneyWeb was proposed by Wang to protect institutions from web injection attacks (where web injection scripts are injected into invisible decoy elements).</p>
<p>Let us now discuss possible ways of hardening against a MITB attack before a successful injection occurs. Despite the fact that the scope for attack mitigation on an already compromised system is limited, we think that there still exist options for putting the attackers under significant pressure. Moreover, constantly updating the web browser can often disrupt a previously successful MITB. The focus should be on achieving simplicity in implementing a defensive methodology that makes implementing an attack as complicated as possible for the attacker. However, we consider the following suggestions from the point of view of the browser user's security, inspired by real examples mostly attacking <em>Chrome</em>, and not from the security <em>developer's</em> point of view, which might be quite different, or even diametrically opposed.</p>
<p>On the other hand, analyses of banking trojans show that methods that seem useful at the time might easily be bypassed by the next update of the bot. These include randomizing the names of browser processes (firefox.exe, chrome.exe, microsoftedgecp.exe, iexplore.exe, opera.exe), which may lead to a more complicated lookup for the right processes, but <a href="#figure7">Figure 7</a> demonstrates a case where the bot actually did not rely on it at all.</p>
<ol>
<li>Locating process memory of a browser:<br /><br />Restriction of opening handles to a browser's process without special privileges e.g. using the <span class="monospace">ObRegisterCallbacks</span> routine to restrict requested access rights during an open process action.<br /><br /></li>
<li>Injecting payload:<br /><br />Remote code-injection limited to signed code only: e.g. <em>Microsoft Edge</em> does not allow the calling of <span class="monospace">LoadLibrary</span> on an unsigned binary. Also, various restrictions of behaviour within browser processes executed from kernel space.<br /><br /></li>
<li>Locating the attack points:<br /><br />Attack points should definitely not be exported. Of course this does not apply to the system's browsers, because, for various reasons, WINAPI functions have to have the ability to be hooked. Furthermore, randomizing the section names, together with randomizing the order of sections of a module containing attack points, may be an another obstacle to the attackers who try to find SSL VMT by parsing the PE structure and the relocation table of the loaded chrome.dll module. This suggests an additional randomization of locations of attack points and the order of their arguments. Real life examples show that exactly this unpredictability causes the greatest trouble to the attacker. Switching the order of arguments would force the attackers to check the validity of memory pointers to buffers with unencrypted HTTP content.<br /><br /></li>
<li>Installing hooks:<br /><br />Restrictions of behaviour within browser processes executed from kernel space.</li>
</ol>
<p>Note that even the complete eradication of potential MITB attacks would not save web browsers from being abused. There is just as much potential for abuse by implementing a man-in-the-middle attack instead. Another important development of browser security in the context of MITB comes with advanced network protocols like HTTP/2.</p>
<p> </p>
<h2><a class="chapter" name="h2-conclusion"></a>Conclusion</h2>
<p>The desire to incorporate these particular attacks into a malware project exposes its authors to the necessity of reversing the attack points, and of more advanced programming. Comparing the various projects, it seems that the authors generally do not copy from each other, neither do they rely on the legion of source code leaks. Unlike many ransomware projects, in this case the goal is handled by their own means. There is a certain potential to prevent MITB prior to any successful injections, taking the most powerful defensive action of making crucial attack points unexported and changing their position relative to each other with each major release. Needless to say, another reasonable approach is to use third-party protections that secure browser processes by encrypting keystrokes, or by providing an isolated environment that prevents code injection from remote processes.</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] Boutin, J.-I. Evolution of WebInjects. Virus Bulletin 2014, Seattle. <a href="https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Boutin.pdf" target="_blank">https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Boutin.pdf</a>.</p>
<p><a class=" anchor" name="ref2"></a>[2] Siebert, T. Advanced Techniques in Modern Banking Trojans. Botconf 2013, Nantes. <a href="https://www.botconf.eu/wp-content/uploads/2013/12/02-BankingTrojans-ThomasSiebert.pdf" target="_blank">https://www.botconf.eu/wp-content/uploads/2013/12/02-BankingTrojans-ThomasSiebert.pdf</a>.</p>
<p><a class=" anchor" name="ref3"></a>[3] Thomson, M. (ed. ); Belshe, M.; Peon, R. Hypertext Transfer Protocol Version 2 (HTTP/2). May 2015. <a href="https://tools.ietf.org/html/rfc7540" target="_blank">https://tools.ietf.org/html/rfc7540</a>.</p>
<p><a class=" anchor" name="ref4"></a>[4] Miller, M. Mitigating arbitrary native code execution in Microsoft Edge. February 2017.<a href="%20https://blogs.windows.com/msedgedev/2017/02/23/mitigating-arbitrary-native-code-execution" target="_blank"> https://blogs.windows.com/msedgedev/2017/02/23/mitigating-arbitrary-native-code-execution</a>.</p>
<p><a class=" anchor" name="ref5"></a>[5] Marcos, M.J.S.; Inocencio,R.U. We have a 'DYRE' (dire) situation. AVAR 2015, Da Nang, 113-139.</p>
<p><a class=" anchor" name="ref6"></a>[6] Pagnotta, S. CoreBot adquiere funcionalidades de troyano bancario. September 2015. <a href="https://www.welivesecurity.com/la-es/2015/09/14/corebot-troyano-bancario" target="_blank">https://www.welivesecurity.com/la-es/2015/09/14/corebot-troyano-bancario</a>.</p>
<p><a class=" anchor" name="ref7"></a>[7] Srokosz, P. Analysis of Emotet v4, Cert.pl. May 2016. <a href="https://www.cert.pl/en/news/single/analysis-of-emotet-v4" target="_blank">https://www.cert.pl/en/news/single/analysis-of-emotet-v4</a>.</p>
<p><a class=" anchor" name="ref8"></a>[8] Kotowicz, M. ZeuS Meets VM – Story so Far. Botconf 2015, Nancy.<a href="%20https://www.botconf.eu/wp-content/uploads/2014/12/2014-3.6-ZeuS-Meets-VM-%E2%80%93-Story-so-Far.pdf" target="_blank"> https://www.botconf.eu/wp-content/uploads/2014/12/2014-3.6-ZeuS-Meets-VM-%E2%80%93-Story-so-Far.pdf</a>.</p>
<p><a class=" anchor" name="ref9"></a>[9] hasharasade. Floki bot and the stealthy dropper. November 2016. <a href="https://blog.malwarebytes.com/threat-analysis/2016/11/floki-bot-and-the-stealthy-dropper" target="_blank">https://blog.malwarebytes.com/threat-analysis/2016/11/floki-bot-and-the-stealthy-dropper</a>.</p>
<p><a class=" anchor" name="ref10"></a>[10] hasharasade. Zbot with legitimate applications on board. January 2017. <a href="https://blog.malwarebytes.com/cybercrime/2017/01/zbot-with-legitimate-applications-on-board" target="_blank">https://blog.malwarebytes.com/cybercrime/2017/01/zbot-with-legitimate-applications-on-board</a>.</p>
<p><a class=" anchor" name="ref11"></a>[11] Baz, M.; Gal, M. Dridex Gone Phishing. Botconf 2016, Lyon. <a href="https://www.botconf.eu/2016/dridex-gone-phishing/" target="_blank">https://www.botconf.eu/2016/dridex-gone-phishing/</a>.</p>
<p><a class=" anchor" name="ref12"></a>[12] MalwareTechBlog Let's Unpack: Dridex Loader. February 2017. <a href="https://www.malwaretech.com/2017/02/lets-unpack-dridex-loader.html" target="_blank">https://www.malwaretech.com/2017/02/lets-unpack-dridex-loader.html</a>.</p>
<p><a class=" anchor" name="ref13"></a>[13] Kotowicz, M. ISFB: Stile Alive and Kicking. Botconf 2016, Lyon. <a href="https://journal.cecyf.fr/ojs/index.php/cybin/article/view/15" target="_blank">https://journal.cecyf.fr/ojs/index.php/cybin/article/view/15</a>.</p>
<p><a class=" anchor" name="ref14"></a>[14] Schwarz, D. Another Banker Enters the Matrix. June 2017. <a href="https://www.arbornetworks.com/blog/asert/another-banker-enters-matrix/" target="_blank">https://www.arbornetworks.com/blog/asert/another-banker-enters-matrix/</a>.</p>
<p><a class=" anchor" name="ref15"></a>[15] Kotowicz, M; Jedynak, J. Nymaim: the Untold Story. Virus Bulletin 2016, Denver. <a href="https://www.virusbulletin.com/conference/vb2016/abstracts/last-minute-paper-nymaim-untold-story" target="_blank">https://www.virusbulletin.com/conference/vb2016/abstracts/last-minute-paper-nymaim-untold-story</a>.</p>
<p><a class=" anchor" name="ref16"></a>[16] Ortega, A. Nymaim Origins, Revival and Reversing Tales. Botconf 2016 Lyon. <a href="https://www.botconf.eu/wp-content/uploads/2016/11/PR18-Nymaim-ORTEGA.pdf" target="_blank">http://www.botconf.eu/wp-content/uploads/2016/11/PR18-Nymaim-ORTEGA.pdf</a>.</p>
<p><a class=" anchor" name="ref17"></a>[17] Zhang, X. Deep Analysis of the Online Banking Botnet TrickBot. December 2016. <a href="https://blog.fortinet.com/2016/12/06/deep-analysis-of-the-online-banking-botnet-trickbot" target="_blank">https://blog.fortinet.com/2016/12/06/deep-analysis-of-the-online-banking-botnet-trickbot</a>.</p>
<p><a class=" anchor" name="ref18"></a>[18] Boutin, J.-I. Qadars – a banking Trojan with the Netherlands in its sights. December 2013. <a href="https://www.welivesecurity.com/2013/12/18/qadars-a-banking-trojan-with-the-netherlands-in-its-sights/" target="_blank">https://www.welivesecurity.com/2013/12/18/qadars-a-banking-trojan-with-the-netherlands-in-its-sights/</a>.</p>
<p><a class=" anchor" name="ref19"></a>[19] Kessem, L.; Natan, H.; Laskov, D. Meanwhile in Britain, Qadars v3 Hardens Evasion, Targets 18 UK Banks. September 2016. <a href="https://securityintelligence.com/meanwhile-britain-qadars-v3-hardens-evasion-targets-18-uk-banks/" target="_blank">https://securityintelligence.com/meanwhile-britain-qadars-v3-hardens-evasion-targets-18-uk-banks/</a>.</p>
<p><a class=" anchor" name="ref20"></a>[20] Karve S.; Venere G.; Olea M. Diving into Pinkslipbot's Latest Campaign. Virus Bulletin 2016, Denver. <a href="https://www.virusbulletin.com/conference/vb2016/abstracts/diving-pinkslipbots-latest-campaign" target="_blank">https://www.virusbulletin.com/conference/vb2016/abstracts/diving-pinkslipbots-latest-campaign</a>.</p>
<p><a class=" anchor" name="ref21"></a>[21] Oppenheim, M.; Zuk, K.; Meir, M.; Kessem, L. QakBot Banking Trojan Causes Massive Active Directory Lockouts. May 2017, IBM X-Force. <a href="https://securityintelligence.com/qakbot-banking-trojan-causes-massive-active-directory-lockouts/" target="_blank">https://securityintelligence.com/qakbot-banking-trojan-causes-massive-active-directory-lockouts/</a>.</p>
<p><a class=" anchor" name="ref22"></a>[22] Bremer, J. x86 API Hooking Demystified. July 2012. <a href="https://jbremer.org/x86-api-hooking-demystified/" target="_blank">https://jbremer.org/x86-api-hooking-demystified/</a>.</p>
<p><a class=" anchor" name="ref23"></a>[23] Kessem, L. The NukeBot Trojan, a Bruised Ego and a Surprising Source Code Leak. March 2017. <a href="https://securityintelligence.com/the-nukebot-trojan-a-bruised-ego-and-a-surprising-source-code-leak/" target="_blank">https://securityintelligence.com/the-nukebot-trojan-a-bruised-ego-and-a-surprising-source-code-leak/</a>.</p>
<p><a class=" anchor" name="ref24"></a>[24] Krebs, B. Self-Proclaimed 'Nuclear Bot' Author Weighs US Job Offer. April 2017. <a href="https://krebsonsecurity.com/tag/augustin-inzirillo/" target="_blank">https://krebsonsecurity.com/tag/augustin-inzirillo/</a>.</p>
<p><a class=" anchor" name="ref25"></a>[25] Volatility Framework Command Reference Mal. <a href="https://github.com/volatilityfoundation/volatility/wiki/Command-Reference-Mal" target="_blank">https://github.com/volatilityfoundation/volatility/wiki/Command-Reference-Mal</a>.</p>
<p><a class=" anchor" name="ref26"></a>[26] browserhooks – plug-in for Volatility Framework. <a href="https://github.com/eset/volatility-browserhooks" target="_blank">https://github.com/eset/volatility-browserhooks</a>.</p>
<p><a class=" anchor" name="ref27"></a>[27] Buescher, A.; Leder, F.; Siebert, T. Banksafe information stealer detection inside the web browser, in: Proceedings of the International Workshop on Recent Advances in Intrusion Detection (RAID), 2011, pp.262-280.</p>
<p><a class=" anchor" name="ref28"></a>[28] Continella, A.; Carminati, M.; Polino, M.; Lanzi, A.; Zanero, S.; Maggi F. Prometheus: Analyzing WebInject-based information stealers, Journal of Computer Security, Feb 2017, pp.117-137.</p>
<p><a class=" anchor" name="ref29"></a>[29] Wang, X. Protecting Financial Institutions from Man-in-the-Browser Attacks. Virus Bulletin 2014, Seattle. <a href="https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-WangZhao.pdf" target="_blank">https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-WangZhao.pdf</a>.</p>
<p> </p>
<h2><a class="chapter" name="h2-appendix-samples"></a>Appendix: Samples</h2>
<table class="table table-striped" border="0">
<tbody>
<tr>
<td><strong>Banking trojan</strong></td>
<td><strong>SHA-256</strong></td>
</tr>
<tr>
<td>Win/TrickBot archive</td>
<td>2cfb17d14897979a0b117d7c6ae3ec2b762f8ba2694887c4878d6f63692d0dca</td>
</tr>
<tr>
<td>Win/Spy.Ursnif archive</td>
<td>f30b5ae67a5fc51e7ccdfbcca344aec9cb1ca7216280243fa2652a2e6c41b07b</td>
</tr>
<tr>
<td>Win/Nymaim payload</td>
<td class="table table-striped">e1e35f3e37257ea2788b2906811f6e9efbae4a9838c5a7c251d40842f4aa226e</td>
</tr>
<tr>
<td>Win/Spy.Ursnif.AX archive</td>
<td>de894706930dbe88bceb5c68f09956e2ab582cd2242c5e1d8e856b5407023ece</td>
</tr>
<tr>
<td>Win/Spy.Ursnif (ISFB) source code</td>
<td>222c41a187cd3f7a48a6bdf68763f6db3a5ad3cd3ded718efa60aba7df3807fe</td>
</tr>
<tr>
<td>Win/Qbot archive</td>
<td>e549e403abafaeaa1fab0a7ac45fe8ed7e23aa8368813e56b0c06702e62904fd</td>
</tr>
<tr>
<td>Win/Dridex archive</td>
<td class="table table-bordered">62cdda34da902b20e6175dc7db1f5a1642e225a716f1307d89c501c0dcd55c5e</td>
</tr>
<tr>
<td>Win/Qadars archive</td>
<td>92694452df7d9c3c1cae798b1af5b4995134d38d11ffa1ca4f68303b0d107a12</td>
</tr>
<tr>
<td>Win/Tinukebot (TinyNuke) source code</td>
<td>b76a0b3640f0577100909af2ad6e8b23456b866b22f8613782b91388abee2e34</td>
</tr>
<tr>
<td>Win/Spy.Zbot (Floki) archive</td>
<td>03fd627951ef4009f98956c424244b130f139d3ef3ae01fe6ec414a6c1abb18b</td>
</tr>
</tbody>
</table>
<p> </p>
<p> </p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2018/VB2017-Kalnai-Poslusny.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2017 paper: Browser attack points still abused by banking trojans&url=https://www.virusbulletin.com/virusbulletin/2018/07/vb2017-paper-browser-attack-points-still-abused-banking-trojans"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2018/07/vb2017-paper-browser-attack-points-still-abused-banking-trojans'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2018/07/vb2017-paper-browser-attack-points-still-abused-banking-trojans&title=VB2017 paper: Browser attack points still abused by banking trojans"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2018/07/vb2017-paper-browser-attack-points-still-abused-banking-trojans&t=VB2017 paper: Browser attack points still abused by banking trojans"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2018/07/vb2017-paper-browser-attack-points-still-abused-banking-trojans"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>