<!DOCTYPE html>
<html lang="en-US">
<head>
<meta charset="UTF-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="profile" href="http://gmpg.org/xfn/11">
<link rel="pingback" href="https://news.sophos.com/xmlrpc.php">
	<link rel="alternate" hreflang="es-419" href="https://news.sophos.com/es-419/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation" />
	<link rel="alternate" hreflang="nl-nl" href="https://news.sophos.com/nl-nl/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation" />
	<link rel="alternate" hreflang="pt-br" href="https://news.sophos.com/pt-br/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation" />
	<link rel="alternate" hreflang="de-de" href="https://news.sophos.com/de-de/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation" />
	<link rel="alternate" hreflang="en-us" href="https://news.sophos.com/en-us/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation" />
	<link rel="alternate" hreflang="fr-fr" href="https://news.sophos.com/fr-fr/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation" />
	<link rel="alternate" hreflang="es-es" href="https://news.sophos.com/es-es/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation" />
	<link rel="alternate" hreflang="it-it" href="https://news.sophos.com/it-it/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation" />
	<link rel="alternate" hreflang="ja-jp" href="https://news.sophos.com/ja-jp/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation" />
	<link rel="alternate" hreflang="zh-tw" href="https://news.sophos.com/zh-tw/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation" />
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl+ '&gtm_auth=d5XceCG5H_eblswmMfURjQ&gtm_preview=env-2&gtm_cookies_win=x';f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-5L6H3LN');</script>
<!-- End Google Tag Manager -->
<title>CVE-2018-18500: write-after-free vulnerability in Firefox, Analysis and Exploitation &#8211; Sophos News</title>
<meta name='robots' content='max-image-preview:large' />
<!-- Jetpack Site Verification Tags -->
<meta name="google-site-verification" content="8r1qg681OjOolfxmHEY1IYupmTBdyKXc-OPfpgeQHFk" />
<link rel='dns-prefetch' href='//cdn.jsdelivr.net' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel='dns-prefetch' href='//v0.wordpress.com' />
<link rel="alternate" type="application/rss+xml" title="Sophos News &raquo; Feed" href="https://news.sophos.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Sophos News &raquo; Comments Feed" href="https://news.sophos.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Sophos News &raquo; CVE-2018-18500: write-after-free vulnerability in Firefox, Analysis and Exploitation Comments Feed" href="https://news.sophos.com/en-us/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation/feed/" />
<script type="text/javascript">
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/14.0.0\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/14.0.0\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/news.sophos.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.0.1"}};
/*! This file is auto-generated */
!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode,e=(p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0),i.toDataURL());return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([129777,127995,8205,129778,127999],[129777,127995,8203,129778,127999])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(e=t.source||{}).concatemoji?c(e.concatemoji):e.wpemoji&&e.twemoji&&(c(e.twemoji),c(e.wpemoji)))}(window,document,window._wpemojiSettings);
</script>
<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 0.07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='all-css-0' href='https://news.sophos.com/_static/??-eJyNj9EOwjAIRX/IDpeomQ/Gb+komSjtmsJi+vfOmSXbm48XOMCBd3acUKZACqgKgdWglxFfTrgvvlRQq0JN5NTMAwfYEk+FSIE9CUVKtgtZfKXihAaP9T987m3zDsIx2XJiclmmgZOCki/4ABKvxpgLrf9/RcpcNgouj2rqfkaLia5r7/HWXs5ddzq21+4DN6hjBg==' type='text/css' media='all' />
<style id='wp-block-library-inline-css'>
.has-text-align-justify{text-align:justify;}
</style>
<style id='global-styles-inline-css'>
body{--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--duotone--dark-grayscale: url('#wp-duotone-dark-grayscale');--wp--preset--duotone--grayscale: url('#wp-duotone-grayscale');--wp--preset--duotone--purple-yellow: url('#wp-duotone-purple-yellow');--wp--preset--duotone--blue-red: url('#wp-duotone-blue-red');--wp--preset--duotone--midnight: url('#wp-duotone-midnight');--wp--preset--duotone--magenta-yellow: url('#wp-duotone-magenta-yellow');--wp--preset--duotone--purple-green: url('#wp-duotone-purple-green');--wp--preset--duotone--blue-orange: url('#wp-duotone-blue-orange');--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
</style>
<link rel='stylesheet' id='all-css-2' href='https://news.sophos.com/_static/??/wp-content/themes/sophosnews-2017/style-2021.css,/wp-content/mu-plugins/jetpack-11.1/css/jetpack.css?m=1658840194' type='text/css' media='all' />
<script type="text/javascript" src="https://news.sophos.com/_static/??-eJzTLy/QzcxLzilNSS3WzwKiwtLUokoopZebmaeXVayjj0+Rbm5melFiSSpUsX2uraGZqYWFkTmQyAIAr9AiMg==" ></script><link rel="https://api.w.org/" href="https://news.sophos.com/wp-json/" /><link rel="alternate" type="application/json" href="https://news.sophos.com/wp-json/wp/v2/posts/57026" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://news.sophos.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://news.sophos.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 6.0.1" />
<link rel="canonical" href="https://news.sophos.com/en-us/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation/" />
<link rel='shortlink' href='https://news.sophos.com/?p=57026' />
<link rel="alternate" type="application/json+oembed" href="https://news.sophos.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fnews.sophos.com%2Fen-us%2F2019%2F04%2F18%2Fprotected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://news.sophos.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fnews.sophos.com%2Fen-us%2F2019%2F04%2F18%2Fprotected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation%2F&#038;format=xml" />
<style>img#wpstats{display:none}</style>
	<link rel="amphtml" href="https://news.sophos.com/en-us/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation/amp/">
<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article" />
<meta property="og:title" content="CVE-2018-18500: write-after-free vulnerability in Firefox, Analysis and Exploitation" />
<meta property="og:url" content="https://news.sophos.com/en-us/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation/" />
<meta property="og:description" content="Editor&#8217;s note: This article is a technical description of a bug discovered by a member of the Offensive Research team at SophosLabs, and how the researcher created a proof-of-concept &#8220;A…" />
<meta property="article:published_time" content="2019-04-18T15:35:40+00:00" />
<meta property="article:modified_time" content="2019-05-03T18:11:58+00:00" />
<meta property="og:site_name" content="Sophos News" />
<meta property="og:image" content="https://news.sophos.com/wp-content/uploads/2018/04/exploits-explained.jpg?w=640" />
<meta property="og:image:secure_url" content="https://news.sophos.com/wp-content/uploads/2018/04/exploits-explained.jpg?w=640" />
<meta property="og:image:width" content="640" />
<meta property="og:image:height" content="332" />
<meta property="og:image:alt" content="" />
<meta property="og:locale" content="en_US" />
<meta property="fb:admins" content="28552295016" />
<meta name="twitter:text:title" content="CVE-2018-18500: write-after-free vulnerability in Firefox, Analysis and Exploitation" />
<meta name="twitter:image" content="https://news.sophos.com/wp-content/uploads/2018/04/exploits-explained.jpg?w=640" />
<meta name="twitter:card" content="summary_large_image" />

<!-- End Jetpack Open Graph Tags -->
<link rel="icon" href="https://news.sophos.com/wp-content/uploads/2020/01/cropped-sophos.png?w=32" sizes="32x32" />
<link rel="icon" href="https://news.sophos.com/wp-content/uploads/2020/01/cropped-sophos.png?w=192" sizes="192x192" />
<link rel="apple-touch-icon" href="https://news.sophos.com/wp-content/uploads/2020/01/cropped-sophos.png?w=180" />
<meta name="msapplication-TileImage" content="https://news.sophos.com/wp-content/uploads/2020/01/cropped-sophos.png?w=270" />
</head>

<body class="post-template-default single single-post postid-57026 single-format-standard group-blog">
<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-5L6H3LN&gtm_auth=d5XceCG5H_eblswmMfURjQ&gtm_preview=env-2&gtm_cookies_win=x"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->
<div id="page" class="hfeed site">
	<a class="sr-only" href="#content">Skip to content</a>

	
<header class="bg-blue-600" x-data="{ mobileMenu: false, searchField: false }">
	<div class="container">
		<div class="flex items-center justify-between h-16">

			<!-- Logo -->
			<div class="flex-shrink-0">
				<a class="site-logo" href="https://news.sophos.com/en-us/" rel="home">
				<svg width="172" height="17" xmlns="http://www.w3.org/2000/svg">
					<g fill="#FFF" fill-rule="evenodd">
						<path d="M113.024 5.298V16.74h-2.595V.259h2.265l7.997 11.49V.26h2.619v16.482h-2.289l-7.997-11.443M126.064.259h10.78v2.307H128.8v4.521h7.549v2.214h-7.55v5.133h8.376v2.307h-11.111V.259M138.478.259h2.855l2.694 12.29L147.29.26h2.783l3.61 12.314L156.005.26h2.783l-3.62 16.482h-2.76l-3.751-12.126-3.426 12.126h-2.784L138.478.259M168.933 4.968v-.283c0-1.318-.778-2.425-3.492-2.425-2.43 0-3.279 1.013-3.279 2.284 0 1.201.708 1.743 2.218 2.073l3.491.776c2.123.448 4.129 1.602 4.129 4.333 0 3.014-1.675 5.274-6.204 5.274-5.214 0-6.559-2.26-6.559-4.52v-.307h2.737v.26c0 1.2.755 2.284 3.774 2.284 2.5 0 3.421-1.084 3.421-2.638 0-1.224-.731-1.907-2.289-2.237l-3.49-.777c-2.407-.517-3.917-1.742-3.917-4.309 0-2.566 1.77-4.756 6.016-4.756 4.553 0 6.18 2.26 6.18 4.639v.33h-2.736M85.303 16.718h8.88c2.492 0 3.549-.15 4.379-.677 1.308-.803 2.139-2.378 2.139-4.162 0-1.457-.504-2.868-1.258-3.622-.981-1.006-2.316-1.382-4.783-1.382h-2.693c-1.208 0-2.097-.05-2.6-.276-.605-.277-.956-.81-.956-1.562 0-.88.427-1.455 1.132-1.632.529-.124 1.14-.124 2.726-.15h7.949V.265h-8.754c-1.963 0-2.843.075-3.598.353-1.737.602-2.921 2.383-2.921 4.518 0 1.458.58 2.745 1.587 3.624.881.753 2.189 1.105 4.202 1.105h3.584c.805 0 1.46.1 1.813.3.678.327 1.08.934 1.08 1.714 0 .652-.301 1.122-.83 1.447-.426.278-1.158.403-2.49.403h-8.588v2.99zm-84.945 0h8.88c2.492 0 3.549-.15 4.38-.677 1.307-.803 2.138-2.378 2.138-4.162 0-1.457-.504-2.868-1.258-3.622-.982-1.006-2.316-1.382-4.783-1.382H7.023c-1.209 0-2.098-.05-2.6-.276-.605-.277-.957-.81-.957-1.562 0-.88.427-1.455 1.132-1.632.53-.124 1.141-.124 2.726-.15h7.95V.265H6.52c-1.964 0-2.844.075-3.6.353C1.185 1.22 0 3 0 5.136 0 6.594.582 7.881 1.587 8.76c.881.753 2.19 1.105 4.203 1.105h3.582c.807 0 1.46.1 1.814.3.678.327 1.08.934 1.08 1.714 0 .652-.3 1.122-.83 1.447-.426.278-1.157.403-2.49.403H.358v2.99zM71.99 4.596c-.52.813-.765 2.118-.765 3.87 0 3.845 1.331 5.595 4.294 5.595 2.915 0 4.248-1.75 4.248-5.546 0-3.847-1.308-5.571-4.248-5.571-1.604 0-2.864.592-3.53 1.652zm10.05-1.897c1.013 1.33 1.58 3.498 1.58 6.039 0 2.882-.914 5.249-2.544 6.555-1.233.986-3.11 1.528-5.335 1.528-3.16 0-5.654-1.037-6.937-2.884-.964-1.355-1.435-3.155-1.435-5.35 0-3.152.866-5.544 2.495-6.826C71.149.726 73.175.158 75.497.158c2.938 0 5.284.913 6.543 2.54zM65.36.279h-3.507v6.73h-6.345V.278h-3.507v16.439h3.507V9.94h6.345v6.778h3.506V.278zM43.533 8.042c.938 0 1.48-.123 1.852-.469.442-.37.715-1.158.715-2.07 0-1.084-.443-1.872-1.208-2.144-.272-.1-.717-.149-1.286-.149h-4.839v4.832h4.766zm-4.766 8.674h-3.507V.278h8.223c2.889 0 3.902.295 4.988 1.504.964 1.036 1.481 2.39 1.481 3.845 0 1.725-.69 3.327-1.826 4.289-.962.813-1.854 1.058-3.728 1.058h-5.63v5.743zM21.665 4.596c-.519.813-.764 2.118-.764 3.87 0 3.845 1.333 5.595 4.297 5.595 2.913 0 4.247-1.75 4.247-5.546 0-3.847-1.308-5.571-4.247-5.571-1.606 0-2.866.592-3.533 1.652zm10.052-1.897c1.014 1.33 1.581 3.498 1.581 6.039 0 2.882-.914 5.249-2.545 6.555-1.233.986-3.11 1.528-5.333 1.528-3.162 0-5.656-1.037-6.94-2.884-.964-1.355-1.432-3.155-1.432-5.35 0-3.152.865-5.544 2.496-6.826C20.825.726 22.85.158 25.173.158c2.938 0 5.286.913 6.544 2.54z"/>
					</g>
				</svg>
				</a>
			</div>

			<!-- Search Field -->
			<div class="lg:flex justify-end flex-grow hidden" x-show="searchField" x-cloak>
				<div class="relative w-1/2 rounded-md shadow-sm">
					<form role="search" method="get" action="https://news.sophos.com/en-us/">
						<input
							type="text"
							class="block w-full text-lg text-white placeholder-gray-100 bg-blue-800 border-0 rounded-md font-sansMedium font-medium"
							placeholder="Type to Search News"
							x-ref="searchInput"
							name="s"
						/>
						<div class="absolute inset-y-0 right-0 flex items-center px-3">
							<button
								class="hover:opacity-100 opacity-60 p-1 text-xs text-white uppercase rounded-full cursor-pointer"
								type="submit"
							>
								Search							</button>
						</div>
					</form>
				</div>
			</div>

			<!-- Main Nav -->
			<div class="lg:flex items-center flex-grow hidden" x-show="!searchField" x-cloak>
				<div class="flex ml-auto">
				<ul id="menu-en-us-primary" class="primary-menu"><li id="menu-item-77773" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-77773"><a href="https://news.sophos.com/en-us/category/products-services/">Products &amp; Services<div class="menu-item-description"></div></a></li>
<li id="menu-item-77772" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-77772"><a href="https://news.sophos.com/en-us/category/security-operations/">Security Operations<div class="menu-item-description"></div></a></li>
<li id="menu-item-77774" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor menu-item-77774"><a href="https://news.sophos.com/en-us/category/threat-research/">Threat Research<div class="menu-item-description"></div></a></li>
<li id="menu-item-85326" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-85326"><a href="https://news.sophos.com/en-us/category/ai-research/">AI Research<div class="menu-item-description"></div></a></li>
<li id="menu-item-77776" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-77776"><a href="https://nakedsecurity.sophos.com">Security News<div class="menu-item-description"></div></a></li>
<li id="menu-item-83702" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-83702"><a href="https://news.sophos.com/en-us/category/sophos-life/">Sophos Life<div class="menu-item-description"></div></a></li>
</ul>				</div>
			</div>

			<!-- Search button -->
			<div class="lg:block hidden ml-4">
				<div class="flex items-center">
					<button
					class="border-2 border-transparent hover:border-white inline-flex items-center justify-center p-2 text-white rounded-md focus:outline-none transition-colors"
					@click.prevent="searchField = !searchField; $nextTick(() => { setTimeout(() => { $refs.searchInput.focus(); }, 150);});"
					>
						<span class="sr-only">Search</span>
						<!-- Heroicon name: outline/bell -->
						<svg
							class="w-5 h-5"
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
							stroke="currentColor"
							:class="{ 'block': !searchField, 'hidden': searchField }"
						>
							<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="3"
							d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
							/>
						</svg>
						<svg
							class="hidden w-5 h-5"
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
							stroke="currentColor"
							aria-hidden="true"
							:class="{ 'block': searchField, 'hidden': !searchField }"
						>
							<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="3"
							d="M6 18L18 6M6 6l12 12"
							/>
						</svg>
					</button>
				</div>
			</div>

			<!-- Mobile menu button -->
			<div class="lg:hidden flex -mr-2">
				<button
					type="button"
					class="hover:text-white hover:bg-blue-800 focus:outline-none hover:ring-2 focus:ring-offset-2 focus:ring-offset-gray-300 focus:ring-white inline-flex items-center justify-center p-2 text-white rounded-md"
					aria-controls="mobile-menu"
					aria-expanded="false"
					@click="mobileMenu = !mobileMenu"
				>
					<span class="sr-only">Open main menu</span>
					<!--
						Heroicon name: outline/menu

						Menu open: "hidden", Menu closed: "block"
					-->
					<svg
					class="block w-6 h-6"
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke="currentColor"
					:class="{ 'block': !mobileMenu, 'hidden': mobileMenu }"
					>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="3"
						d="M4 6h16M4 12h16m-7 6h7"
					/>
					</svg>
					<!--
						Heroicon name: outline/x

						Menu open: "block", Menu closed: "hidden"
					-->
					<svg
					class="hidden w-6 h-6"
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke="currentColor"
					aria-hidden="true"
					:class="{ 'block': mobileMenu, 'hidden': !mobileMenu }"
					>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="3"
						d="M6 18L18 6M6 6l12 12"
					/>
					</svg>
				</button>
			</div>
		</div>
	</div>

	<!-- Mobile menu, show/hide based on menu state. -->
	<div
	class="lg:hidden container"
	x-show="mobileMenu"
	x-cloak
	x-transition:enter="transition-all ease-out duration-100"
	x-transition:enter-start="transform opacity-0 scale-95"
	x-transition:enter-end="transform opacity-100 scale-100"
	x-transition:leave="transition ease-in duration-75"
	x-transition:leave-start="transform opacity-100 scale-100"
	x-transition:leave-end="transform opacity-0 scale-95"
	>
		<div class="pt-2 pb-8 space-y-2">
			<div class="relative rounded-md shadow-sm">
				<form role="search" method="get" action="https://news.sophos.com/en-us/">
					<input
						type="text"
						class="focus:ring-blue-600 focus:border-blue-600 sm:text-sm block w-full placeholder-gray-600 border-gray-300 rounded-md"
						placeholder="Search News"
						name="s"
					/>
					<div
						class="absolute inset-y-0 right-0 flex items-center px-3 pointer-events-none"
					>
						<button class="p-1 text-gray-500 rounded-full" type="submit">
							<span class="sr-only">Search</span>
							<!-- Heroicon name: outline/bell -->
							<svg
								class="w-4 h-4"
								xmlns="http://www.w3.org/2000/svg"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="3"
									d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
								/>
							</svg>
						</button>
					</div>
				</form>
			</div>

			<ul id="menu-en-us-primary-1" class="mobile-menu"><li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-77773"><a href="https://news.sophos.com/en-us/category/products-services/">Products &amp; Services<div class="menu-item-description"></div></a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-77772"><a href="https://news.sophos.com/en-us/category/security-operations/">Security Operations<div class="menu-item-description"></div></a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor menu-item-77774"><a href="https://news.sophos.com/en-us/category/threat-research/">Threat Research<div class="menu-item-description"></div></a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-85326"><a href="https://news.sophos.com/en-us/category/ai-research/">AI Research<div class="menu-item-description"></div></a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-77776"><a href="https://nakedsecurity.sophos.com">Security News<div class="menu-item-description"></div></a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-83702"><a href="https://news.sophos.com/en-us/category/sophos-life/">Sophos Life<div class="menu-item-description"></div></a></li>
</ul>		</div>
	</div>
</header>

	<div id="content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-57026" class="post-57026 post type-post status-publish format-standard has-post-thumbnail hentry category-sophoslabs-uncut tag-cve-2018-18500 tag-exploit tag-firefox tag-mitigation tag-vulnerability region-en-us">

		<div class="md:mt-16 container mt-8">
		<div class="relative max-w-5xl mx-auto">
				<div
						class="aspect-w-16 aspect-h-9 flex bg-gray-400 bg-right bg-no-repeat bg-cover"
				>
					<img width="1200" height="622" src="https://news.sophos.com/wp-content/uploads/2018/04/exploits-explained.jpg?w=1200" class="object-cover wp-post-image" alt="" srcset="https://news.sophos.com/wp-content/uploads/2018/04/exploits-explained.jpg 1200w, https://news.sophos.com/wp-content/uploads/2018/04/exploits-explained.jpg?resize=300,156 300w, https://news.sophos.com/wp-content/uploads/2018/04/exploits-explained.jpg?resize=768,398 768w, https://news.sophos.com/wp-content/uploads/2018/04/exploits-explained.jpg?resize=1024,531 1024w" sizes="(max-width: 1200px) 100vw, 1200px" />				</div>
								<div
						class="left-4 w-24 h-24 lg:left-12 xl:left-16 lg:w-40 lg:h-40 place-items-center absolute top-0 grid  "
				>
										<img
							src="https://news.sophos.com/wp-content/uploads/2022/07/Category-Icon-X-Ops-v2.png"
							alt="Threat Research"
					/>
														</div>
						</div>
	</div>


			
	<header>
		<div class="container mt-8 md:mt-16 md:-mb-4">
			<div class="max-w-4xl mx-auto">

				<h1 class="text-style-h1 mb-8">CVE-2018-18500: write-after-free vulnerability in Firefox, Analysis and Exploitation</h1>
				
				<div class="text-xl md:text-xl -mt-2">
					<span class="byline">
		Written by 				<span class="author vcard">
				<a href="https://news.sophos.com/en-us/author/7u7bdp6d/" title="Posts by SophosLabs Offensive Security" class="author url fn" rel="author">SophosLabs Offensive Security</a>				</span>
								</span>
						</div>

				<div class="text-sophos-gray-600 mt-4 text-xs font-sansSemiBold font-semibold leading-tight uppercase">
					<span class="posted-on"><a href="https://news.sophos.com/en-us/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation/" rel="bookmark">April 18, 2019</a></span>				</div>

				<div class="mt-6 space-y-2 space-x-1">
					<a href="https://news.sophos.com/en-us/category/threat-research/sophoslabs-uncut/" class="category-tag-pill">SophosLabs Uncut</a> <a href="https://news.sophos.com/en-us/tag/cve-2018-18500/" class="category-tag-pill">CVE-2018-18500</a> <a href="https://news.sophos.com/en-us/tag/exploit/" class="category-tag-pill">Exploit</a> <a href="https://news.sophos.com/en-us/tag/firefox/" class="category-tag-pill">Firefox</a> <a href="https://news.sophos.com/en-us/tag/mitigation/" class="category-tag-pill">mitigation</a> <a href="https://news.sophos.com/en-us/tag/vulnerability/" class="category-tag-pill">vulnerability</a>				</div>
			</div>
		</div>
	</header><!-- .entry-header -->

	<div class="container md:my-16 xl:my-24 my-8">
	<div class="entry-content lg:prose-lg mx-auto prose max-w-4xl">
		
<blockquote>
<p>Editor&#8217;s note: This article is a technical description of a bug discovered by a member of the Offensive Research team at SophosLabs, and how the researcher created a proof-of-concept &#8220;Arbitrary Read/Write Primitive&#8221; exploit for this bug. The vulnerability was deemed critical by Mozilla&#8217;s bug tracking team and was <a href="https://www.mozilla.org/en-US/security/advisories/mfsa2019-01/" target="_blank" rel="noopener">patched in Firefox 65.0</a>. It&#8217;s written for an audience with <strong>background in security vulnerability research</strong>; no background in Firefox internals or web browsers in general is necessary.</p>
</blockquote>
<h2>Overview</h2>



<p>This article is about CVE-2018-18500, a security vulnerability in Mozilla Firefox found and reported to the Mozilla Foundation by SophosLabs in November, 2018.</p>



<p>This security vulnerability involves a software bug in Gecko (Firefox&#8217;s browser engine), in code responsible for parsing web pages. A malicious web page can be programmed in a way that exploits this bug to fully compromise a vulnerable Firefox instance visiting it.</p>



<p>The engine component where the bug exists is the HTML5 Parser, specifically around the handling of &#8220;Custom Elements.&#8221;</p>



<p>The root cause of the bug described here is a programming error in which a C++ object is being used without properly holding a reference to it, allowing for the object to be prematurely freed. These circumstances lead to a memory corruption condition known as &#8220;<a href="https://www.owasp.org/index.php/Using_freed_memory" target="_blank" rel="noopener">Write After Free</a>,&#8221; where the program erroneously writes into memory that has been freed.</p>



<p>Due to the numerous security mitigations applied to today&#8217;s operating systems and programs, developing a functional exploit for a memory corruption vulnerability in a web browser is no easy feat. It more often than not requires the utilization of multiple bugs and implementation of complex logic taking advantage of intricate program-specific techniques. This means that extensive use of JavaScript is virtually a requirement for this type of work, and such is the case in here as well.</p>





<p>The article uses <a href="https://ftp.mozilla.org/pub/firefox/releases/63.0.3/win64/en-US/Firefox%20Setup%2063.0.3.exe">64-bit Firefox 63.0.3 for Windows</a> for binary-specific details, and will reference the <a href="https://github.com/mozilla/gecko-dev">Gecko source code</a> and the <a href="https://html.spec.whatwg.org/">HTML Standard</a>.</p>



<h2>Background &#8211; Custom Elements</h2>



<p>&#8220;Custom Elements&#8221; is a relatively new addition to the HTML standard, as part of the <a href="https://www.webcomponents.org/">&#8220;Web Components&#8221; API</a>. Simply put, it provides a way to create new types of HTML elements. Its full specification can be found <a href="https://w3c.github.io/webcomponents/spec/custom/">here</a>.</p>
<p>This is an example for a basic Custom Element definition of an element extension named <code>extended-br</code> that will behave the same as a regular <code>br</code> element except also print a line to log upon construction:<br /><a href="https://news.sophos.com/wp-content/uploads/2019/04/html_1.png"><img loading="lazy" class="alignnone size-full wp-image-57485" src="https://news.sophos.com/wp-content/uploads/2019/04/html_1.png" alt="" width="629" height="330" srcset="https://news.sophos.com/wp-content/uploads/2019/04/html_1.png 629w, https://news.sophos.com/wp-content/uploads/2019/04/html_1.png?resize=300,157 300w" sizes="(max-width: 629px) 100vw, 629px" /></a>The above example uses the &#8220;customized built-in element&#8221; variant, which is instantiated by using the <code>"is"</code> attribute (line 17).</p>





<p>Support for Custom Elements was introduced in the <a href="https://hacks.mozilla.org/2018/10/firefox-63-tricks-and-treats/">Firefox 63 release</a> (October 23, 2018).</p>



<h2>The Bug</h2>



<p>The bug occurs when Firefox creates a custom element in the process of <a href="https://html.spec.whatwg.org/multipage/parsing.html#tree-construction">HTML tree construction</a>. In this process the engine code may dispatch a JavaScript callback to invoke the matching <a href="https://html.spec.whatwg.org/multipage/parsing.html#creating-and-inserting-nodes:custom-element-constructor">custom element definition&#8217;s constructor</a> function.</p>



<p>The engine code surrounding the JavaScript dispatch point makes use of a C++ object without properly holding a reference to it.</p>
<p>When the engine code resumes execution after returning from the JavaScript callback function, it performs a memory write into a member variable of this C++ object.<br />However the called constructor function can be defined to cause the <a href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#navigating-across-documents:abort-a-document">abortion of the document load</a>, which means the <a href="https://html.spec.whatwg.org/multipage/parsing.html#abort-a-parser">abortion of the document&#8217;s active parser</a>, internally causing the destruction and de-allocation of the active parser&#8217;s resources, including the aforementioned C++ object.</p>
<p>When this happens, a &#8220;Write-After-Free&#8221; memory corruption will occur.</p>



<p>Here&#8217;s the relevant part in the HTML5 Parser code for <a href="https://html.spec.whatwg.org/multipage/parsing.html#create-an-element-for-the-token">creating an HTML element</a>:</p>


<pre class="brush: cpp; title: ; notranslate" title="">
nsresult
nsHtml5TreeOperation::Perform(nsHtml5TreeOpExecutor* aBuilder,
                              nsIContent** aScriptElement,
                              bool* aInterrupted,
                              bool* aStreamEnded)
{
  switch (mOpCode) {
    ...
    case eTreeOpCreateHTMLElementNetwork:
    case eTreeOpCreateHTMLElementNotNetwork: {
      nsIContent** target = mOne.node;
      ...
      *target = CreateHTMLElement(name,
                                  attributes,
                                  mOpCode == eTreeOpCreateHTMLElementNetwork
                                    ? dom::FROM_PARSER_NETWORK
                                    : dom::FROM_PARSER_DOCUMENT_WRITE,
                                  nodeInfoManager,
                                  aBuilder,
                                  creator);
      return NS_OK;
    }
    ...
}

nsIContent*
nsHtml5TreeOperation::CreateHTMLElement(
  nsAtom* aName,
  nsHtml5HtmlAttributes* aAttributes,
  mozilla::dom::FromParser aFromParser,
  nsNodeInfoManager* aNodeInfoManager,
  nsHtml5DocumentBuilder* aBuilder,
  mozilla::dom::HTMLContentCreatorFunction aCreator)
{
  ...
  if (nsContentUtils::IsCustomElementsEnabled()) {
    ...
    if (isCustomElement &amp;amp;&amp;amp; aFromParser != dom::FROM_PARSER_FRAGMENT) {
      ...
      definition = nsContentUtils::LookupCustomElementDefinition(
        document, nodeInfo-&amp;gt;NameAtom(), nodeInfo-&amp;gt;NamespaceID(), typeAtom);

      if (definition) {
        willExecuteScript = true;
      }
    }
  }

  if (willExecuteScript) { // This will cause custom element
                           // constructors to run
    ...
    nsCOMPtr&lt;dom::Element&amp;gt; newElement;
    NS_NewHTMLElement(getter_AddRefs(newElement),
                      nodeInfo.forget(),
                      aFromParser,
                      isAtom,
                      definition);
    ...
</pre>


<p>Inside <code>NS_NewHTMLElement</code>, if the element being created is a custom element, the function <code>CustomElementRegistry::Upgrade</code> will be called to invoke the custom element&#8217;s constructor, passing control to JavaScript.</p>
<p>After the custom element constructor finishes running and <code>CreateHTMLElement()</code> returns execution to <code>Perform()</code>, line 13 completes its execution: the return value of <code>CreateHTMLElement()</code> is written into the memory address pointed to by <code>target</code>.</p>
<p>Next, I&#8217;ll explain where <code>target</code> points, and where it is set, how to free that memory using JavaScript code, and what type of value is being written to freed memory.</p>



<h2>What&#8217;s &#8220;target?&#8221;</h2>



<p>We can see <code>target</code> being assigned in line 11: <code>nsIContent** target = mOne.node;</code>.<br />This is where <code>mOne.node</code> comes from:</p>


<pre class="brush: cpp; title: ; notranslate" title="">
nsIContentHandle*
nsHtml5TreeBuilder::createElement(int32_t aNamespace,
                                  nsAtom* aName,
                                  nsHtml5HtmlAttributes* aAttributes,
                                  nsIContentHandle* aIntendedParent,
                                  nsHtml5ContentCreatorFunction aCreator)
{
  ...
    nsIContent* elem;
    if (aNamespace == kNameSpaceID_XHTML) {
      elem = nsHtml5TreeOperation::CreateHTMLElement(
        name,
        aAttributes,
        mozilla::dom::FROM_PARSER_FRAGMENT,
        nodeInfoManager,
        mBuilder,
        aCreator.html);
    }
  ...
  nsIContentHandle* content = AllocateContentHandle();
  ...
  treeOp-&amp;gt;Init(aNamespace,
               aName,
               aAttributes,
               content,
               aIntendedParent,
               !!mSpeculativeLoadStage,
               aCreator);
</pre>

<pre class="brush: cpp; title: ; notranslate" title="">
  inline void Init(int32_t aNamespace,
                   nsAtom* aName,
                   nsHtml5HtmlAttributes* aAttributes,
                   nsIContentHandle* aTarget,
                   nsIContentHandle* aIntendedParent,
                   bool aFromNetwork,
                   nsHtml5ContentCreatorFunction aCreator)
  {
    ...
    mOne.node = static_cast&lt;nsIContent**&amp;gt;(aTarget);
    ...
  }
</pre>


<p>So the value of <code>target</code> comes from <code>AllocateContentHandle()</code>:</p>


<pre class="brush: cpp; title: ; notranslate" title="">
nsIContentHandle*
nsHtml5TreeBuilder::AllocateContentHandle()
{
  ...
  return &amp;amp;mHandles[mHandlesUsed++];
}
</pre>


<p>This is how <code>mHandles</code> is initialized in <code>nsHtml5TreeBuilder</code>&#8216;s constructor initializer list:</p>


<pre class="brush: cpp; title: ; notranslate" title="">
nsHtml5TreeBuilder::nsHtml5TreeBuilder(nsAHtml5TreeOpSink* aOpSink,
                                       nsHtml5TreeOpStage* aStage)
  ...
  , mHandles(new nsIContent*[NS_HTML5_TREE_BUILDER_HANDLE_ARRAY_LENGTH])
  ...
</pre>


<p>So an array with the capacity to hold <code>NS_HTML5_TREE_BUILDER_HANDLE_ARRAY_LENGTH</code> (512) pointers to <code>nsIContent</code> objects is first initialized when the HTML5 parser&#8217;s tree builder object is created, and every time <code>AllocateContentHandle()</code> is called it returns the next unused slot in the array, starting from index number 0.</p>
<p>On 64-bit systems, the allocation size of <code>mHandles</code> is <code>NS_HTML5_TREE_BUILDER_HANDLE_ARRAY_LENGTH * sizeof(nsIContent*) == 512 * 8 == 4096 (0x1000)</code>.</p>



<h2 id="mhandles-freeing">How to get mHandles freed?</h2>



<p><code>mHandles</code> is a member variable of class <code>nsHtml5TreeBuilder</code>. In the context of the buggy code flaw, <code>nsHtml5TreeBuilder</code> is instantiated by <code>nsHtml5StreamParser</code>, which in turn is instantiated by <code>nsHtml5Parser</code>.</p>
<p>We used the following JavaScript code in the custom element constructor:</p>


<pre class="brush: jscript; title: ; notranslate" title="">
location.replace(&quot;about:blank&quot;);
</pre>


<p>We tell the browser to <a href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#navigating-across-documents">navigate away from the current page</a> and cause the following call tree in the engine:</p>



<pre class="wp-block-code"><code>Location::SetURI()
-&gt; nsDocShell::LoadURI()
   -&gt; nsDocShell::InternalLoad()
      -&gt; nsDocShell::Stop()
         -&gt; nsDocumentViewer::Stop()
            -&gt; nsHTMLDocument::StopDocumentLoad()
               -&gt; nsHtml5Parser::Terminate()
                  -&gt; nsHtml5StreamParser::Release()</code></pre>



<p>That last function call drops a reference to the active <code>nsHtml5StreamParser</code> object, but it is not yet orphaned: the remaining references are to be dropped by a couple of asynchronous tasks that will only get scheduled the next time Gecko&#8217;s event loop spins.</p>
<p>This is normally not going to happen in the course of running a JavaScript function, since one of JavaScript&#8217;s properties is that it&#8217;s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#Never_blocking">&#8220;Never blocking&#8221;</a>, but in order to trigger the bug we must have these pending asynchronous tasks executed before the custom element constructor returns.</p>



<h6 id="xhr-synch-delay"> </h6>



<p>The last link gives a hint on how to accomplish this: &#8220;<em>Legacy exceptions exist like alert or synchronous XHR</em>&#8220;. XHR (<a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequest</a>) is an API that can be used to retrieve data from a web server.</p>
<p>It&#8217;s possible to make use of <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests#Synchronous_request">synchronous XHR</a> to cause the browser engine to spin the event loop until the XHR call completes; that is, when data has been received from the web server.<br />So by using the following code in the custom element constructor&#8230;</p>


<pre class="brush: jscript; title: ; notranslate" title="">
location.replace(&quot;about:blank&quot;);

var xhr = new XMLHttpRequest();
xhr.open('GET', '/delay.txt', false);
xhr.send(null);
</pre>


<p>&#8230;and setting the contacted web server to artificially delay the response for <code>/delay.txt</code> requests by a few seconds to cause a long period of event loop spinning in the browser, we can guarantee that, by the time line 5 completes execution, the currently active <code>nsHtml5StreamParser</code> object will have become orphaned. Then the next time a garbage collection cycle occurs, the orphaned <code>nsHtml5StreamParser</code> object will be destructed and have its resources de-allocated (including <code>mHandles</code>).</p>



<p><code>"about:blank"</code> is used for the new location because it is an empty page that does not require network interaction for loading.</p>
<p>The aim is to make sure that the amount of work (code logic) performed by the engine in the span between the destruction of the <code>nsHtml5StreamParser</code> object and the write-after-free corruption is as minimal as possible, because the steps we will be taking for exploiting the bug rely on successfully <a href="https://en.wikipedia.org/wiki/Heap_feng_shui" target="_blank" rel="noopener">shaping certain structures in heap memory.</a> Since heap allocators are non-deterministic in nature, any extra logic running in the engine at the same time increases the chance of side effects in the form of unexpected allocations that can sabotage the exploitation process.</p>



<h2>What value is being written to freed memory?</h2>



<p>The return value of <code>nsHtml5TreeOperation::CreateHTMLElement</code> is a pointer to a newly created C++ object representing an HTML element, e.g. <code>HTMLTableElement</code> or <code>HTMLFormElement</code>.</p>



<p>Since triggering the bug requires the abortion of the currently running document parser, this new object does not get linked to any existing data structures and remains orphaned, and eventually gets released in a future garbage collection cycle.</p>



<h2 id="control-waf-offset">Controlling write-after-free offset</h2>



<p>To summarize so far, the bug can be exploited to effectively have the following pseudo-code take place:</p>


<pre class="brush: cpp; title: ; notranslate" title="">
nsIContent* mHandles[] = moz_xmalloc(0x1000);
nsIContent** target = &amp;amp;mHandles[mHandlesUsed++];
free(mHandles);
...
*target = CreateHTMLElement(...);
</pre>


<p>So while the value being written into freed memory here (return value of <code>CreateHTMLElement()</code>) is uncontrollable (always a memory allocation pointer) and its contents unreliable (orphaned object), we can adjust the offset in which the value is written relative to the base address of freed allocation, according to the value of <code>mHandlesUsed</code>. As we previously showed <code>mHandlesUsed</code> increases for every HTML element the parser encounters:</p>


<pre class="brush: xml; title: ; notranslate" title="">
&lt;br&amp;gt;                          &lt;-- mHandlesUsed = 0
&lt;br&amp;gt;                          &lt;-- mHandlesUsed = 1
&lt;br&amp;gt;                          &lt;-- mHandlesUsed = 2
&lt;br&amp;gt;                          &lt;-- mHandlesUsed = 3
&lt;br&amp;gt;                          &lt;-- mHandlesUsed = 4
&lt;br&amp;gt;                          &lt;-- mHandlesUsed = 5
&lt;br&amp;gt;                          &lt;-- mHandlesUsed = 6
&lt;span is=custom-span&amp;gt;&lt;/span&amp;gt;  &lt;-- mHandlesUsed = 7
</pre>


<p>In the above example, given the allocation address of <code>mHandles</code> was <code>0x7f0ed4f0e000</code> and the custom <code>span</code> element triggered the bug in its constructor, the address of the newly created <code>HTMLSpanElement</code> object will be written into <code>0x7f0ed4f0e038</code> (<code>0x7f0ed4f0e000 + (7 * sizeof(nsIContent*))</code>).</p>



<h2>Surviving document destruction</h2>



<p>Since triggering the bug requires navigating away and aborting the load of the current document, we will not be able to execute JavaScript in that document anymore after the constructor function returns:<br /><code>JavaScript error: , line 0: NotSupportedError: Refusing to execute function from window whose document is no longer active.</code><br />For crafting a functional exploit, it&#8217;s necessary to keep executing more JavaScript logic after the bug is triggered. For that purpose we can use a main web page that creates a child <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe">iframe</a> element inside of which the HTML and JavaScript code for triggering the bug will reside.</p>
<p>After the bug is triggered and the child iframe&#8217;s document has been changed to <code>"about:blank"</code> the main page remains intact and can execute the remaining JavaScript logic in its context.</p>
<p>Here&#8217;s an example of an HTML page creating a child iframe:</p>
<p><a href="https://news.sophos.com/wp-content/uploads/2019/04/html_2.png"><img loading="lazy" class="alignnone size-full wp-image-57487" src="https://news.sophos.com/wp-content/uploads/2019/04/html_2.png" alt="" width="520" height="210" srcset="https://news.sophos.com/wp-content/uploads/2019/04/html_2.png 520w, https://news.sophos.com/wp-content/uploads/2019/04/html_2.png?resize=300,121 300w" sizes="(max-width: 520px) 100vw, 520px" /></a></p>





<h2>Background &#8211; concepts and properties of Firefox&#8217;s heap</h2>



<p>To understand the exploitation process here it&#8217;s crucial to know how Firefox&#8217;s memory allocator works. Firefox uses a memory allocator called mozjemalloc, which is a fork of the jemalloc project. This section will briefly explain a few basic terms and properties of mozjemalloc, using as reference these 2 articles you should definitely read for properly understanding the subject: [<a href="http://phrack.org/issues/68/10.html">PSJ</a>] &amp; [<a href="http://www.phrack.org/issues/69/14.html">TSOF</a>].</p>



<p><u>Regions:</u><br />&#8220;<em>Regions are the heap items returned on user allocations (e.g. malloc(3) calls).</em>&#8221; [PSJ]</p>



<p><u>Chunks:</u><br />&#8220;<em>The term &#8216;chunk&#8217; is used to describe big virtual memory regions that the memory allocator conceptually divides available memory into.</em>&#8221; [PSJ]</p>



<p><u>Runs:</u><br />&#8220;<em>Runs are further memory denominations of the memory divided by jemalloc into chunks.</em>&#8221; [PSJ]<br />&#8220;<em>In essence, a chunk is broken into several runs.</em>&#8221; [PSJ]<br />&#8220;<em>Each run holds regions of a specific size.</em>&#8221; [PSJ]</p>



<p><u>Size classes:</u><br />Allocations are broken into categories according to size class.<br />Size classes in Firefox&#8217;s heap: 4, 8, 16, 32, 48, …, 480, 496, 512, 1024, 2048. [mozjemalloc.cpp]<br />Allocation requests are rounded up to the nearest size class.</p>



<h6 id="bins"> </h6>



<p><u>Bins:</u><br />&#8220;<em>Each bin has an associated size class and stores/manages regions of this size class.</em>&#8221; [PSJ]<br />&#8220;<em>A bin&#8217;s regions are managed and accessed through the bin&#8217;s runs.</em>&#8221; [PSJ]<br />Pseudo-code illustration:</p>


<pre class="brush: cpp; title: ; notranslate" title="">
void *x = malloc(513);
void *y = malloc(650);
void *z = malloc(1000);
// now: x, y, z were all allocated from the same bin,
// of size class 1024, the smallest size class that is
// larger than the requested size in all 3 calls
</pre>


<h6 id="lifo-free-list"> </h6>



<p><u>LIFO free list:</u><br />&#8220;<em>Another interesting feature of jemalloc is that it operates in a last-in-first-out (LIFO) manner (see [PSJ] for the free algorithm); a free followed by a garbage collection and a subsequent allocation request for the same size, most likely ends up in the freed region.</em>&#8221; [TSOF]<br />Pseudo-code illustration:</p>


<pre class="brush: cpp; title: ; notranslate" title="">
void *x = moz_xmalloc(0x1000);
free(x);
void *y = moz_xmalloc(0x1000);
// now: x == y
</pre>


<h6 id="size-class-contiguous"> </h6>



<p><u>Same size class allocations are contiguous:</u><br />At a certain state that may be achieved by performing many allocations and exhausting the free list, sequential allocations of the same size class will be contiguous in memory &#8211; &#8220;<em>Allocation requests (i.e. malloc() calls) are rounded up and assigned to a bin. […] If none is found, a new run is allocated and assigned to the specific bin. Therefore, this means that objects of different types but with similar sizes that are rounded up to the same bin are contiguous in the jemalloc heap.</em>&#8221; [TSOF]</p>
<p>Pseudo-code illustration:</p>


<pre class="brush: plain; title: ; notranslate" title="">
for (i = 0; i &lt; 1000; i++) {
        x[i] = moz_xmalloc(0x400);
}
// x[995] == 0x7fb8fd3a1c00
// x[996] == 0x7fb8fd3a2000 (== x[995] + 0x400)
// x[997] == 0x7fb8fd3a2400 (== x[996] + 0x400)
// x[998] == 0x7fb8fd3a2800 (== x[997] + 0x400)
// x[999] == 0x7fb8fd3a2c00 (== x[998] + 0x400)
</pre>


<h6 id="run-recycling"> </h6>



<p><u>Run recycling:</u><br />When all allocations inside a run are freed, the run gets de-allocated and is inserted into a list of available runs. A de-allocated run may get coalesced with adjacent de-allocated runs to create a bigger, single de-allocated run. When a new run is needed (for holding new memory allocations) it may be taken from the list of available runs. This allows a memory address that belonged to one run holding allocations of a specific size class to be &#8220;recycled&#8221; into being part of a different run, holding allocations of a different size class.<br />Pseudo-code illustration:</p>


<pre class="brush: cpp; title: ; notranslate" title="">
for (i = 0; i &lt; 1000; i++) {
        x[i] = moz_xmalloc(1024);
}
for (i = 0; i &lt; 1000; i++) {
        free(x[i]);
}
// after freeing all 1024 sized allocations, runs of 1024 size class
// have been de-allocated and put into the list of available runs
for (i = 0; i &lt; 1000; i++) {
        y[i] = moz_xmalloc(512);
        // runs necessary for holding new 512 allocations, if necessary,
        // will get taken from the list of available runs and get assigned
        // to 512 size class bins
}
// some elements in y now have the same addresses as elements in x
</pre>


<h2>General direction for exploitation</h2>



<p>Considering the basic primitive of memory corruption this bug allows for, the exploitation approach would be trying to plant an object in place of the freed <code>mHandles</code> allocation, so that overwriting it with a memory address pointer at a given offset will be helpful for advancing in our exploitation effort.</p>



<p>A good candidate would be the &#8220;ArrayObjects inside ArrayObjects&#8221; technique [TSOF] where we would place an <code>ArrayObject</code> object in place of <code>mHandles</code>, and then overwrite its <code>length</code> header variable with a memory address (which is a very large numeric value) using the bug so that a malformed <code>ArrayObject</code> object is created and is accessible from JavaScript for reading and writing of memory much further than legitimately intended, since index access to that malformed array is validated against the <code>length</code> value that was corrupted.</p>
<p>But after a bit of experimentation it seemed like it&#8217;s not working, and apparently the reason is a <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1410132">change in the code</a> pushed on October 2017 that separates allocations made by the JavaScript engine from other allocations by forcing the usage of a different heap arena. Thus allocations from <code>js_malloc()</code> (JavaScript engine function) and <code>moz_xmalloc()</code> (regular function) will not end up on the same heap run without some effort. This renders the technique mostly obsolete, or at least the straightforward version of it.</p>



<p>So another object type has to be found for this.</p>



<h2>XMLHttpRequestMainThread as memory corruption target</h2>



<p>We are going to talk about <code>XMLHttpRequest</code> again, this time from a different angle. XHR objects can be configured to receive the response in a couple of different ways, one of them is through an <code>ArrayBuffer</code> object:</p>


<pre class="brush: jscript; title: ; notranslate" title="">
var oReq = new XMLHttpRequest();
oReq.open(&quot;GET&quot;, &quot;/myfile.png&quot;, true);
oReq.responseType = &quot;arraybuffer&quot;;

oReq.onload = function (oEvent) {
  var arrayBuffer = oReq.response;
  if (arrayBuffer) {
    var byteArray = new Uint8Array(arrayBuffer);
    for (var i = 0; i &lt; byteArray.byteLength; i++) {
      // do something with each byte in the array
    }
  }
};

oReq.send(null);
</pre>


<p>This is the engine function that&#8217;s responsible for creating an <code>ArrayBuffer</code> object with the received response data, invoked upon accessing the <code>XMLHttpRequest</code>&#8216;s object <code>response</code> property (line 6):</p>



<h6 id="getarraybuffer"> </h6>


<pre class="brush: cpp; title: ; notranslate" title="">
JSObject* ArrayBufferBuilder::getArrayBuffer(JSContext* aCx) {
  if (mMapPtr) {
    JSObject* obj = JS::NewMappedArrayBufferWithContents(aCx, mLength, mMapPtr);
    if (!obj) {
      JS::ReleaseMappedArrayBufferContents(mMapPtr, mLength);
    }
    mMapPtr = nullptr;

    // The memory-mapped contents will be released when the ArrayBuffer
    // becomes detached or is GC'd.
    return obj;
}
</pre>


<p>In the above code, if we modify <code>mMapPtr</code> before the function begins we will get an <code>ArrayBuffer</code> object pointing to whatever address we put in <code>mMapPtr</code> instead of the expected returned data. Accessing the returned <code>ArrayBuffer</code> object will allow us to read and write from the memory pointed to by mMapPtr.</p>



<h6 id="xhr-data-uri"> </h6>



<p style="text-align:left;">To prime an XHR object into this conveniently corruptible state, it needs to be put into a state where an actual request has been sent and is awaiting response. We can set the resource being requested by the XHR to be a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs">Data URI</a>, to avoid the delay and overhead of network activity:<br /><code>xhr.open("GET", "data:text/plain,xxxxxxxxxx", true);</code></p>



<p><code>mMapPtr</code> is contained inside sub-class <code>ArrayBufferBuilder</code> inside the <code>XMLHttpRequestMainThread</code> class, which is the actual implementation class of <code>XMLHttpRequest</code> objects internally. Its size is 0x298:</p>



<p><a href="https://news.sophos.com/wp-content/uploads/2019/04/0x298.png"><img loading="lazy" class="alignnone size-full wp-image-57037" src="https://news.sophos.com/wp-content/uploads/2019/04/0x298.png" alt="" width="487" height="35" srcset="https://news.sophos.com/wp-content/uploads/2019/04/0x298.png 487w, https://news.sophos.com/wp-content/uploads/2019/04/0x298.png?resize=300,22 300w" sizes="(max-width: 487px) 100vw, 487px" /></a></p>



<p>Allocations of size 0x298 go into a 0x400 size class bin, therefore an <code>XMLHttpRequestMainThread</code> object will always be placed in a memory address that belongs to one of these patterns: 0xXXXXXXXXX000, 0xXXXXXXXXX400, 0xXXXXXXXXX800, or 0xXXXXXXXXXc00. This synchronizes nicely with the pattern of <code>mHandles</code> allocations which is 0xXXXXXXXXX000.</p>



<p>To corrupt an XHR&#8217;s <code>mArrayBufferBuilder.mMapPtr</code> value using the bug we would have to aim for an offset of 0x250 bytes into the freed <code>mHandles</code> allocation:</p>



<p><a href="https://news.sophos.com/wp-content/uploads/2019/04/xhr_arraybufferbuilder.png"><img loading="lazy" class="alignnone size-full wp-image-57039" src="https://news.sophos.com/wp-content/uploads/2019/04/xhr_arraybufferbuilder.png" alt="" width="581" height="110" srcset="https://news.sophos.com/wp-content/uploads/2019/04/xhr_arraybufferbuilder.png 581w, https://news.sophos.com/wp-content/uploads/2019/04/xhr_arraybufferbuilder.png?resize=300,57 300w" sizes="(max-width: 581px) 100vw, 581px" /></a></p>



<p>So <code>XMLHttpRequestMainThread</code> is a fitting target for exploitation of this memory corruption, but its size class is different than <code>mHandle</code>&#8216;s, requiring us to rely on performing the <a href="#run-recycling">&#8220;Run recycling&#8221; technique</a>.</p>



<p>To aid in performing the precise heap actions required for &#8220;grooming&#8221; the heap to behave this way, we are going to be using another object type:</p>



<h2>FormData for Heap Grooming</h2>



<p>Simply put, <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData">FormData</a> is an object type that holds sets of key/value pairs supplied to it.</p>


<pre class="brush: jscript; title: ; notranslate" title="">
var formData = new FormData();
formData.append(&quot;username&quot;, &quot;Groucho&quot;);
formData.append(&quot;accountnum&quot;, &quot;123456&quot;);
</pre>


<p>Internally it uses the data structure <code>FormDataTuple</code> to represent a key/value pair, and a member variable called <code>mFormData</code> to store the pairs it&#8217;s holding:<br /><code>nsTArray mFormData;</code></p>



<p><code>mFormData</code> is initially an empty array. Calls to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/append">append()</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/delete">delete()</a> methods add or remove elements in it. The <code>nsTArray</code> class uses a dynamic memory allocation for storing its elements, expanding or shrinking its allocation size as necessary.</p>
<p>This is how <code>FormData</code> chooses the size of allocation for this storage buffer:</p>


<pre class="brush: cpp; title: ; notranslate" title="">
nsTArray_base&lt;Alloc, Copy&amp;gt;::EnsureCapacity(size_type aCapacity,
                                           size_type aElemSize) {
    ...
    size_t reqSize = sizeof(Header) + aCapacity * aElemSize;
    ...
    // Round up to the next power of two.
    bytesToAlloc = mozilla::RoundUpPow2(reqSize);
    ...
    header = static_cast&lt;Header*&amp;gt;(ActualAlloc::Realloc(mHdr, bytesToAlloc));
</pre>


<p>Given that <code>sizeof(Header) == sizeof(nsTArrayHeader) == 8</code> and <code>aElemSize == sizeof(FormDataTuple) == 0x30</code>, This is the formula for getting the buffer allocation size as a function of the number of elements in the array (<code>aCapacity</code>):</p>



<p style="text-align:center;"><code>bytesToAlloc = RoundUpPow2(8 + aCapacity * 0x30)</code></p>



<p>From this we can calculate that <code>mFormData</code> will perform a <code>realloc()</code> call for 0x400 bytes upon the 11th pair appended to it, a 0x800 bytes <code>realloc()</code> upon the 22nd pair, and a 0x1000 bytes <code>realloc()</code> upon the 43rd pair. The buffer&#8217;s address is stored in <code>mFormData.mHdr</code>.</p>



<p>To cause the de-allocation of <code>mFormData.mHdr</code> we can use the <code>delete()</code> method. It takes as parameter a single key name to remove from the array, but different pairs may use the same key name. So if the same key name is reused for every appended pair, calling <code>delete()</code> on that key name will clear the entire array in one run. Once a <code>nsTArray_base</code> object is reduced to hold 0 elements, the memory in <code>mHdr</code> will be freed.</p>



<p>To summarize we can use <code>FormData</code> objects to arbitrarily perform allocations and de-allocations of memory of particular sizes in the Firefox heap.</p>



<p>Knowing this, these are the steps we can take for placing a 0x400 size class allocation in place of a 0x1000 size class allocation (Implementation of <a href="#run-recycling">&#8220;Run recycling&#8221;</a>):</p>



<ol>
<li>Spray 0x1000 allocations
<ul>
<li>Create many <code>FormData</code> objects, and append 43 pairs to each of them. Now the heap contains many chunks full of mostly contiguous 0x1000 runs holding our <code>mFormData.mHdr</code> buffers.</li>
</ul>
</li>
<li>&#8220;Poke holes&#8221; in memory
<ul>
<li>Use <code>delete()</code> to de-allocate some <code>mFormData.mHdr</code> buffers, so that there are free 0x1000 sized spaces in between blocks of <code>mFormData.mHdr</code> allocations.</li>
</ul>
</li>
<li>Trigger <code>mHandles</code>&#8216;s allocation
<ul>
<li>Append the child iframe, causing the creation of an HTML parser and with it an <code>nsHtml5TreeBuilder</code> object with an <code>mHandles</code> allocation. Due to <a href="#lifo-free-list">&#8220;LIFO free list&#8221;</a> <code>mHandles</code> should get the same address as one of the buffers de-allocated in the previous step.</li>
</ul>
</li>
<li>Free <code>mHandles</code>
<ul>
<li>Cause the freeing of <code>mHandles</code> (<a href="#mhandles-freeing">process described here</a>).</li>
</ul>
</li>
<li>Free all 0x1000 allocations
<ul>
<li>Use <code>delete()</code> on all remaining <code>FormData</code>&#8216;s.</li>
</ul>
</li>
<li>Spray 0x400 allocations
<ul>
<li>Create many <code>XMLHttpRequest</code> objects.</li>
</ul>
</li>
</ol>



<p>Image illustrations:</p>
<div class="wp-block-image">
<p><a href="https://news.sophos.com/wp-content/uploads/2019/04/step123_green.png"><img loading="lazy" class="alignnone size-full wp-image-57040" src="https://news.sophos.com/wp-content/uploads/2019/04/step123_green.png" alt="" width="640" height="334" srcset="https://news.sophos.com/wp-content/uploads/2019/04/step123_green.png 640w, https://news.sophos.com/wp-content/uploads/2019/04/step123_green.png?resize=300,157 300w" sizes="(max-width: 640px) 100vw, 640px" /></a></p>
</div>
<div class="wp-block-image">
<p><a href="https://news.sophos.com/wp-content/uploads/2019/04/step456_green.png"><img loading="lazy" class="alignnone size-full wp-image-57041" src="https://news.sophos.com/wp-content/uploads/2019/04/step456_green.png" alt="" width="640" height="561" srcset="https://news.sophos.com/wp-content/uploads/2019/04/step456_green.png 640w, https://news.sophos.com/wp-content/uploads/2019/04/step456_green.png?resize=300,263 300w" sizes="(max-width: 640px) 100vw, 640px" /></a></p>
</div>



<p>If done correctly, triggering the bug after executing these steps will corrupt one of the created <code>XMLHttpRequest</code> objects created in step 6 so that its <code>mArrayBufferBuilder.mMapPtr</code> variable now points to an HTML element object.<br />We can go on to iterate through all the created XHR objects and check their <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response">response</a> property. If any of them contains unexpected data (<code>"xxxxxxxxxx"</code> would be the expected response for the Data URI request <a href="#xhr-data-uri">previously used here</a>) then it must have been successfully corrupted as a result of the bug, and we now have an <code>ArrayBuffer</code> object capable of reading and writing the memory of the newly created HTML element object.</p>



<p>This alone would be enough for us to bypass ASLR by reading the object&#8217;s member variables, some of them pointing to variables in Firefox&#8217;s main DLL <code>xul.dll</code>. Also control of program execution is possible by modifying the object&#8217;s virtual table pointer. However as previously mentioned this HTML element object is left orphaned, cannot be referenced by JavaScript and is slated for de-allocation, so another approach has to be taken.</p>



<p>If you look again at the <code>ArrayBufferBuilder::getArrayBuffer</code> function <a href="#getarraybuffer">quoted above</a>, you can see that even in a corrupted state, the created <code>ArrayBuffer</code> object is set to have the same length as it would have for the original response, since only <code>mMapPtr</code> is modified, with <code>mLength</code> being left intact.</p>
<p>Since the response size is going to be the same size we choose the requested Data URI to be, we can set it arbitrarily and make sure the malformed <code>ArrayBuffer</code>&#8216;s length is big enough to cover not only the HTML element it will point to, but to extend its reach of manipulation to a decent amount of memory following the HTML element.</p>



<p>The specific type of HTML element object to be written into <code>mMapPtr</code> is determined by the base type of HTML element we choose to extend with our custom element definition. HTML element objects range in size between 0x80 and 0x6d8:</p>



<p><a href="https://news.sophos.com/wp-content/uploads/2019/04/html_elements_sizes.png"><img loading="lazy" class="alignnone size-full wp-image-57043" src="https://news.sophos.com/wp-content/uploads/2019/04/html_elements_sizes.png" alt="" width="521" height="440" srcset="https://news.sophos.com/wp-content/uploads/2019/04/html_elements_sizes.png 521w, https://news.sophos.com/wp-content/uploads/2019/04/html_elements_sizes.png?resize=300,253 300w" sizes="(max-width: 521px) 100vw, 521px" /></a></p>



<p>Thus we can choose between different heap size classes to target for manipulation by the malformed <code>ArrayBuffer</code>. For example, choosing to extend the &#8220;<code>br</code>&#8221; HTML element will result in a pointer to an <code>HTMLBRElement</code> (size 0x80) object being written to <code>mMapPtr</code>.</p>



<p>As stated in the <a href="#bins">definition of heap bins</a>, the memory immediately following the HTML element will hold other allocations of the same size class.<br />To target the placement of a specific object right after the HTML element we can take advantage of the <a href="#size-class-contiguous">&#8220;Same size class allocations are contiguous&#8221;</a> heap property and:</p>
<ol>
<li>Find an HTML element of the same size class as the targeted object, and base the custom element definition on it.</li>
<li>Exhaust the relevant bin&#8217;s free list by allocating many instances of the same HTML element type. This fits well with the objective corruption offset of 0x250 bytes because defining many elements prior to the custom one is a necessity for <a href="#control-waf-offset">reaching this offset</a> and it helps us accomplish the exhaustion apropos.</li>
<li>Allocate the object targeted for placement as soon as possible after the allocation of the custom HTML element object. The custom element&#8217;s constructor is invoked right after that so the object should be created first thing inside the constructor function.</li>
</ol>



<p>The most straight-forward approach to take advantage of this capability would be to make use of what we already know about <code>XMLHttpRequest</code> objects and use it as the target object. Previously we could only corrupt <code>mMapPtr</code> with a non-controllable pointer, but now with full control over manipulation of the object we can arbitrarily set <code>mMapPtr</code> and <code>mLength</code> to be able to read and write any address in memory.</p>
<p>However <code>XMLHttpRequestMainThread</code> objects belong in the 0x400 size class and no HTML element object falls under the same size class!</p>



<p>So another object type has to be used. The <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader">FileReader</a> object is somewhat similar to <code>XMLHttpRequest</code>, in that it reads data and can be made to return it as an <code>ArrayBuffer</code>.</p>


<pre class="brush: jscript; title: ; notranslate" title="">
var arrayBuffer;
var blob = new Blob([&quot;data to read&quot;]);
var fileReader = new FileReader();
fileReader.onload = function(event) {
    arrayBuffer = event.target.result;
    if (arrayBuffer) {
        var byteArray = new Uint8Array(arrayBuffer);
        for (var i = 0; i &lt; byteArray.byteLength; i++) {
                // do something with each byte in the array
        }
    }
};
fileReader.readAsArrayBuffer(blob);
</pre>


<p>Similar to the case with <code>XMLHttpRequest</code>, <code>FileReader</code> uses the <code>ArrayBuffer</code> creation function <code>JS::NewArrayBufferWithContents</code> with its member variables <code>mFileData</code> and <code>mDataLen</code> as parameters:</p>


<pre class="brush: cpp; title: ; notranslate" title="">
nsresult FileReader::OnLoadEnd(nsresult aStatus) {
  ...
  // ArrayBuffer needs a custom handling.
  if (mDataFormat == FILE_AS_ARRAYBUFFER) {
    OnLoadEndArrayBuffer();
    return NS_OK;
  }
  ...
}

void FileReader::OnLoadEndArrayBuffer() {
  ...
  mResultArrayBuffer = JS::NewArrayBufferWithContents(cx, mDataLen, mFileData); 
</pre>


<p>If we can corrupt the <code>FileReader</code> object in memory between the call to <code>readAsArrayBuffer()</code> and the scheduling of the <code>onload</code> event using the malformed <code>ArrayBuffer</code> we previously created, we can cause <code>FileReader</code> to create yet another malformed <code>ArrayBuffer</code> but this time pointing to arbitrary addresses.</p>



<p>The <code>FileReader</code> object is suitable for exploitation here because of its size:</p>



<p><a href="https://news.sophos.com/wp-content/uploads/2019/04/sizeof_filereader-1.png"><img loading="lazy" class="alignnone size-full wp-image-57048" src="https://news.sophos.com/wp-content/uploads/2019/04/sizeof_filereader-1.png" alt="" width="372" height="34" srcset="https://news.sophos.com/wp-content/uploads/2019/04/sizeof_filereader-1.png 372w, https://news.sophos.com/wp-content/uploads/2019/04/sizeof_filereader-1.png?resize=300,27 300w" sizes="(max-width: 372px) 100vw, 372px" /></a></p>



<p>which is compatible with the &#8220;img&#8221; element (<code>HTMLImageElement</code>), whose object size is 0x138.</p>



<figure id="attachment_57046" aria-describedby="caption-attachment-57046" style="width: 640px" class="wp-caption alignnone"><a href="https://news.sophos.com/wp-content/uploads/2019/04/malformed_array_buffer_green.png"><img loading="lazy" class="wp-image-57046 size-full" src="https://news.sophos.com/wp-content/uploads/2019/04/malformed_array_buffer_green.png" alt="" width="640" height="636" srcset="https://news.sophos.com/wp-content/uploads/2019/04/malformed_array_buffer_green.png 640w, https://news.sophos.com/wp-content/uploads/2019/04/malformed_array_buffer_green.png?resize=150,150 150w, https://news.sophos.com/wp-content/uploads/2019/04/malformed_array_buffer_green.png?resize=300,298 300w, https://news.sophos.com/wp-content/uploads/2019/04/malformed_array_buffer_green.png?resize=32,32 32w, https://news.sophos.com/wp-content/uploads/2019/04/malformed_array_buffer_green.png?resize=50,50 50w, https://news.sophos.com/wp-content/uploads/2019/04/malformed_array_buffer_green.png?resize=64,64 64w, https://news.sophos.com/wp-content/uploads/2019/04/malformed_array_buffer_green.png?resize=96,96 96w, https://news.sophos.com/wp-content/uploads/2019/04/malformed_array_buffer_green.png?resize=128,128 128w" sizes="(max-width: 640px) 100vw, 640px" /></a><figcaption id="caption-attachment-57046" class="wp-caption-text">Illustration of a malformed ArrayBuffer pointing to a custom element, but also able to reach some of the adjacent FileReader objects</figcaption></figure>
<h2>Creation and usage of objects in aborted document</h2>



<p>Another side of effect of the abortion of the child iframe document is that any <code>XMLHttpRequest</code> or <code>FileReader</code> object created from inside of it will get detached from their &#8220;owner&#8221; and will no longer be usable in the way we desire.</p>



<p>Since we require the creation of new <code>XMLHttpRequest</code> and <code>FileReader</code> objects at a specific point in time while the custom element constructor is running inside the child iframe document, but also require their usage after the document load has been aborted, we can use the following method of &#8220;synchronously&#8221; passing execution to the main page by employing <code>postMessage()</code> and <a href="#xhr-synch-delay">event loop spinning using XHR</a>:</p>



<h6>sync.html:</h6>
<p><a href="https://news.sophos.com/wp-content/uploads/2019/04/html_3.png"><img loading="lazy" class="alignnone size-full wp-image-57489" src="https://news.sophos.com/wp-content/uploads/2019/04/html_3.png" alt="" width="499" height="209" srcset="https://news.sophos.com/wp-content/uploads/2019/04/html_3.png 499w, https://news.sophos.com/wp-content/uploads/2019/04/html_3.png?resize=300,126 300w" sizes="(max-width: 499px) 100vw, 499px" /></a></p>





<h6>sync2.html:</h6>
<p><a href="https://news.sophos.com/wp-content/uploads/2019/04/html_4.png"><img loading="lazy" class="alignnone size-full wp-image-57490" src="https://news.sophos.com/wp-content/uploads/2019/04/html_4.png" alt="" width="445" height="243" srcset="https://news.sophos.com/wp-content/uploads/2019/04/html_4.png 445w, https://news.sophos.com/wp-content/uploads/2019/04/html_4.png?resize=300,164 300w" sizes="(max-width: 445px) 100vw, 445px" /></a></p>





<p>Will yield the output:<br /><code>point 1 (child iframe)</code><br /><code>point 2 (main page)</code><br /><code>point 3 (child iframe)</code></p>



<p>This way we can enable JavaScript code running from the child iframe to signal and schedule the execution of a JavaScript function in the main page, and be guaranteed it finishes running before gaining control back.</p>



<h2>PoC</h2>



<p>The PoC builds on all written above to produce an <code>ArrayBuffer</code> that can be used to read and write memory from 0x4141414141414141. It does not work in every single attempt, but has been tested successfully on Windows and Linux.</p>
<p>The HTML file is meant to be served by the provided HTTP server script <code>delay_http_server.py</code> for the necessary artificial delay to responses.</p>



<pre class="wp-block-code"><code>$ python delay_http_server.py 8080 &amp;
$ firefox http://127.0.0.1:8080/customelements_poc.html</code></pre>



<p>You can find the proof-of-concept files <a href="https://github.com/sophoslabs/CVE-2018-18500">on the SophosLabs GitHub repository.</a></p>



<h2>Fix</h2>



<p>The bug was fixed in <a href="https://www.mozilla.org/en-US/security/advisories/mfsa2019-01/">Firefox 65.0</a> with <a href="https://github.com/mozilla/gecko-dev/commit/64e1d8a0f510f8b0509d84056b6316e8d7d78920">this commit.</a></p>
<p>Mozilla fixed the issue by declaring a <a href="https://developer.mozilla.org/en-US/docs/Mozilla/RAII_classes">RAII type variable</a> to hold a reference to the HTML5 stream parser object for the duration of execution of the 2 functions that make calls to <code>nsHtml5TreeOperation::Perform</code>: <code>nsHtml5TreeOpExecutor::RunFlushLoop</code> and <code>nsHtml5TreeOpExecutor::FlushDocumentWrite</code>.</p>


<pre class="brush: cpp; title: ; notranslate" title="">
+  RefPtr&lt;nsHtml5StreamParser&amp;gt; streamParserGrip;
+  if (mParser) {
+    streamParserGrip = GetParser()-&amp;gt;GetStreamParser();
+  }
+  mozilla::Unused &lt;&lt; streamParserGrip;  // Intentionally not used within function
</pre>


<p>&nbsp;</p>
			</div>
	<div class="mt-12">
		
<ul
	id="social-sharing"
	class="flex justify-center items-center space-x-6"
>
	<li class="facebook">
		<a
			class="js-share-modal"
			href="http://www.facebook.com/share.php?u=https://news.sophos.com/?p=57026&#038;title=CVE-2018-18500:%20write-after-free%20vulnerability%20in%20Firefox,%20Analysis%20and%20Exploitation"
			data-title="CVE-2018-18500: write-after-free vulnerability in Firefox, Analysis and Exploitation"
			title="Share on Facebook">
				<span class="sr-only">Share on Facebook</span>
				<svg
					width="8"
					height="16"
					xmlns="http://www.w3.org/2000/svg"
					class="text-sophos-gray-600 hover:text-black"
					fill="currentColor"
				>
					<path d="M7.145 8.006H4.903V16H1.581V8.006H0V5.182h1.581V3.354C1.581 2.045 2.202 0 4.933 0l2.461.01v2.742H5.608c-.291 0-.705.145-.705.77v1.66h2.533l-.291 2.824z" fill-rule="nonzero"/>
				</svg>
		</a>
	</li>
	<li class="twitter">
		<a
			class="js-share-modal"
			href="http://twitter.com/intent/tweet?text=CVE-2018-18500%3A%20write-after-free%20vulnerability%20in%20Firefox%2C%20Analysis%20and%20Exploitation%20https%3A%2F%2Fnews.sophos.com%2F%3Fp%3D57026"
			data-title=""
			title="Share on Twitter">
				<span class="sr-only">Share on Twitter</span>
				<svg
					width="14"
					height="13"
					xmlns="http://www.w3.org/2000/svg"
					class="text-sophos-gray-600 hover:text-black"
					fill="currentColor"
				>
					<path d="M12.567 3.238c.007.141.01.281.01.424 0 4.338-2.89 9.34-8.173 9.34-1.623 0-3.132-.543-4.403-1.475.225.03.453.045.685.045 1.346 0 2.584-.523 3.566-1.404-1.255-.028-2.317-.977-2.682-2.28a2.56 2.56 0 001.296-.056C1.554 7.53.562 6.203.562 4.613v-.04c.389.245.83.392 1.302.41C1.094 4.393.587 3.387.587 2.25c0-.602.142-1.166.388-1.65 1.416 1.986 3.534 3.292 5.92 3.43a3.735 3.735 0 01-.074-.749c0-1.813 1.286-3.28 2.873-3.28.825 0 1.572.397 2.096 1.034a5.324 5.324 0 001.824-.797c-.215.768-.67 1.41-1.263 1.816a5.178 5.178 0 001.65-.515 6.362 6.362 0 01-1.434 1.7" fill-rule="nonzero"/>
				</svg>
		</a>
	</li>
	<li class="linkedin">
		<a
			href="http://www.linkedin.com/shareArticle?mini=true&url=https://news.sophos.com/en-us/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation/"
			data-title="CVE-2018-18500: write-after-free vulnerability in Firefox, Analysis and Exploitation"
			title="Share on LinkedIn"
			onclick="window.open(this.href, '', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;">
			<span class="sr-only">Share on LinkedIn</span>
			<svg
				width="16"
				height="16"
				xmlns="http://www.w3.org/2000/svg"
				class="text-sophos-gray-600 hover:text-black"
				fill="currentColor"
			>
				<path d="M16 15.293h-3.43v-5.52c0-1.386-.496-2.334-1.738-2.334-.946 0-1.512.64-1.76 1.256-.09.22-.113.526-.113.836v5.762H5.53s.044-9.35 0-10.316h3.43v1.46c.456-.705 1.27-1.703 3.091-1.703 2.256 0 3.95 1.473 3.95 4.643v5.916zM1.917 3.566h-.022C.745 3.566 0 2.773 0 1.783 0 .772.768 0 1.94 0c1.173 0 1.896.772 1.917 1.783 0 .99-.744 1.783-1.94 1.783zM.202 15.293h3.431V4.977H.203v10.316z" fill-rule="nonzero"/>
			</svg>
		</a>
	</li>
	<li class="comments">
		<a
			href="#comments"
			title="Leave a Reply"
			class="flex items-center space-x-1"
		>
			<svg
				width="16"
				height="16"
				xmlns="http://www.w3.org/2000/svg"
				class="text-sophos-gray-600 hover:text-black"
				fill="currentColor"
			>
				<path d="M8.5 0a7.5 7.5 0 11-3.916 13.898C3.317 15.273 1.773 15.36.256 15.135c1.011-1.185 1.678-2.357 2-3.517l-.007.027A7.5 7.5 0 018.5 0z" fill-rule="evenodd"/>
			</svg>
					</a>
	</li>
</ul>

			</div><!-- .entry-social -->
	</div>

</article><!-- #post-## -->

			<div class="container my-8 md:my-16">
				<div class="max-w-4xl mx-auto">
					<div class="article-author-block article-co-authors-block">
	
					<div class="author-block">
				<div class="author-block__profile">
					<img width="300" height="300" src="https://news.sophos.com/wp-content/uploads/2019/05/sophos-labs-logo.png?w=300" class="avatar avatar-400 photo wp-post-image" alt="SophosLabs" />				</div> <!-- .author-profile -->

				<div class="author-block__wrapper">
					<div class="author-block__content">

													<div class="author-block__about">
								About the Author							</div>
						
						<h3 class="author-block__name">
						<a href="https://news.sophos.com/en-us/author/7u7bdp6d/" title="Posts by SophosLabs Offensive Security" class="author url fn" rel="author">SophosLabs Offensive Security</a>						</h3>

						
							<div class="author-block__bio">
															</div> <!-- .author-bio -->

					</div>
				</div>

			</div> <!-- .author-block-container -->
		
		</div>
				</div>
			</div>

			
<div class="pb-24 bg-white">
<div class="container">
<div class="max-w-5xl mx-auto">

			
			<h3 class="text-style-h2 md:my-8 my-4">
				Read Similar Articles			</h3>

			<div class="article-grid article-grid--3-column">
				<!-- Article -->
<article
	id="post-75410"
	class="hover:shadow-lg dark:bg-sophos-gray-900 border-sophos-gray-200 flex flex-col overflow-hidden text-gray-700 transition-all bg-white border rounded-md shadow-md post-75410 post type-post status-publish format-standard has-post-thumbnail hentry category-security-operations tag-encryption tag-mtr tag-ransomware tag-security tag-sidebar tag-sophos-rapid-response region-en-us">
	<!-- Image -->
	<a
		class="aspect-w-16 aspect-h-9 flex block bg-gray-400 bg-right bg-no-repeat bg-cover"
		href="https://news.sophos.com/en-us/2021/05/24/what-to-expect-when-youve-been-hit-with-avaddon-ransomware/"
		rel="bookmark"
		style="
			background-image: url('https://news.sophos.com/wp-content/uploads/2021/05/sophos-ransomware-web-banner-1200x628px-option-2.png?w=640');
		"
	></a>

	<!-- Wrapper -->
	<div class="flex flex-col justify-between flex-grow">

		<!-- Content -->
		<div class="sm:px-8 sm:py-8 p-4 py-6">
			<!-- Date -->
			<div
				class="text-sophos-blue-600 font-sansMedium mb-2 text-xs leading-tight uppercase truncate"
			>
				May 24, 2021			</div>
			<!-- Post Title -->
				<h2 class="text-style-h2 line-clamp-3 sm:mb-4 sm:text-2xl sm:leading-snug text-lg leading-tight text-gray-700"><a href="https://news.sophos.com/en-us/2021/05/24/what-to-expect-when-youve-been-hit-with-avaddon-ransomware/" rel="bookmark" class="dark:text-white font-sansSemiBold font-semibold text-gray-900 no-underline cursor-pointer">What to expect when you’ve been hit with Avaddon ransomware</a></h2>			<!-- Excerpt -->
						</div>

			</div>
</article>
<!-- Article -->
<article
	id="post-75301"
	class="hover:shadow-lg dark:bg-sophos-gray-900 border-sophos-gray-200 flex flex-col overflow-hidden text-gray-700 transition-all bg-white border rounded-md shadow-md post-75301 post type-post status-publish format-standard has-post-thumbnail hentry category-products-services tag-intercept-x tag-sidebar tag-sophos-edr tag-sophos-xdr region-en-us">
	<!-- Image -->
	<a
		class="aspect-w-16 aspect-h-9 flex block bg-gray-400 bg-right bg-no-repeat bg-cover"
		href="https://news.sophos.com/en-us/2021/05/19/whats-new-in-sophos-edr-4-0/"
		rel="bookmark"
		style="
			background-image: url('https://news.sophos.com/wp-content/uploads/2021/05/sophos-edr-news-blog-image-838x440px@2x.png?w=640');
		"
	></a>

	<!-- Wrapper -->
	<div class="flex flex-col justify-between flex-grow">

		<!-- Content -->
		<div class="sm:px-8 sm:py-8 p-4 py-6">
			<!-- Date -->
			<div
				class="text-sophos-blue-600 font-sansMedium mb-2 text-xs leading-tight uppercase truncate"
			>
				May 19, 2021			</div>
			<!-- Post Title -->
				<h2 class="text-style-h2 line-clamp-3 sm:mb-4 sm:text-2xl sm:leading-snug text-lg leading-tight text-gray-700"><a href="https://news.sophos.com/en-us/2021/05/19/whats-new-in-sophos-edr-4-0/" rel="bookmark" class="dark:text-white font-sansSemiBold font-semibold text-gray-900 no-underline cursor-pointer">What&#8217;s New in Sophos EDR 4.0</a></h2>			<!-- Excerpt -->
						</div>

			</div>
</article>
<!-- Article -->
<article
	id="post-75396"
	class="hover:shadow-lg dark:bg-sophos-gray-900 border-sophos-gray-200 flex flex-col overflow-hidden text-gray-700 transition-all bg-white border rounded-md shadow-md post-75396 post type-post status-publish format-standard has-post-thumbnail hentry category-products-services tag-sidebar tag-sophos-xdr tag-xdr region-en-us">
	<!-- Image -->
	<a
		class="aspect-w-16 aspect-h-9 flex block bg-gray-400 bg-right bg-no-repeat bg-cover"
		href="https://news.sophos.com/en-us/2021/05/19/sophos-xdr-driven-by-data/"
		rel="bookmark"
		style="
			background-image: url('https://news.sophos.com/wp-content/uploads/2021/05/sophos-xdr.png?w=640');
		"
	></a>

	<!-- Wrapper -->
	<div class="flex flex-col justify-between flex-grow">

		<!-- Content -->
		<div class="sm:px-8 sm:py-8 p-4 py-6">
			<!-- Date -->
			<div
				class="text-sophos-blue-600 font-sansMedium mb-2 text-xs leading-tight uppercase truncate"
			>
				May 19, 2021			</div>
			<!-- Post Title -->
				<h2 class="text-style-h2 line-clamp-3 sm:mb-4 sm:text-2xl sm:leading-snug text-lg leading-tight text-gray-700"><a href="https://news.sophos.com/en-us/2021/05/19/sophos-xdr-driven-by-data/" rel="bookmark" class="dark:text-white font-sansSemiBold font-semibold text-gray-900 no-underline cursor-pointer">Sophos XDR: Driven by data</a></h2>			<!-- Excerpt -->
						</div>

			</div>
</article>
			</div>

	
</div>
</div>
</div> <!-- #secondary -->

			
<div class="bg-sophos-gray-50 px-4 pt-16 pb-8" id="comments">

	
	
	<div class="container max-w-2xl py-6 md:py-16">
			<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/en-us/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation/#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://news.sophos.com/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate><p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> <span class="required-field-message" aria-hidden="true">Required fields are marked <span class="required" aria-hidden="true">*</span></span></p><p class="comment-form-comment"><label for="comment">Comment <span class="required" aria-hidden="true">*</span></label> <textarea id="comment" name="comment" cols="45" rows="8" maxlength="65525" required></textarea></p><p class="comment-form-author"><label for="author">Name</label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" /></p>
<p class="comment-form-email"><label for="email">Email</label> <input id="email" name="email" type="email" value="" size="30" maxlength="100" aria-describedby="email-notes" /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="url" value="" size="30" maxlength="200" /></p>
<p class="comment-form-cookies-consent"><input id="wp-comment-cookies-consent" name="wp-comment-cookies-consent" type="checkbox" value="yes" /> <label for="wp-comment-cookies-consent">Save my name, email, and website in this browser for the next time I comment.</label></p>
<input type="hidden" name="redirect_to" value="https://news.sophos.com/en-us/2019/04/18/protected-cve-2018-18500-heap-write-after-free-in-firefox-analysis-and-exploitation/" id="redirect_to"><p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='57026' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="00fe8d364f" /></p><p style="display: none !important;"><label>&#916;<textarea name="ak_hp_textarea" cols="45" rows="8" maxlength="100"></textarea></label><input type="hidden" id="ak_js_1" name="ak_js" value="230"/><script>document.getElementById( "ak_js_1" ).setAttribute( "value", ( new Date() ).getTime() );</script></p></form>	</div><!-- #respond -->
		</div>

</div><!-- #comments -->
</div><!-- #comments -->

		
		</main><!-- #main -->
	</div><!-- #primary -->


	</div> <!-- #content -->

	

<div class="bg-sophos-gray-50 md:py-16 px-4" x-data="subscribeForm()">
	<div class="container max-w-2xl" x-show="!subscribed">
	<div class="text-style-h2-lg">
		Subscribe to get the latest updates in your inbox.	</div>
	<form action="">
		<div class="flex flex-col my-6">
		<input
			type="text"
			placeholder="name@email.com"
			class="w-full"
			x-model="email"
			x-on:keydown="resetErrors()"
			required
		/>
		<div
			x-cloak
			x-show="message"
			x-text="message"
			class="font-sansMedium px-4 py-3 mt-2 text-sm font-medium text-white bg-black border rounded-md"
		></div>
		</div>
		<div class="mb-4 text-lg">
			Which categories are you interested in?		</div>
		<div class="my-2 space-y-1">
		<template
			x-for="category in Object.entries(categories)"
			:key="category[0]"
		>
			<div>
			<label
				x-bind:for="category[1].value"
				class="inline-flex items-center"
			>
				<input
				type="checkbox"
				x-bind:value="category[1].value"
				x-bind:id="category[1].value"
				x-bind:name="category[1].value"
				x-model="subscribeTo"
				/>
				<span
				class="text-style-form-label ml-2"
				x-text="category[1].name"
				>
				</span>
			</label>
			</div>
		</template>
		</div>
		<div class="mt-6">
		<input
			type="submit"
			class="round-button round-button--primary"
			@click.prevent="submit()"
			x-bind:value="buttonText()"
			x-bind:class="{ 'opacity-30 cursor-not-allowed': buttonDisabled() }"
			x-bind:disabled="buttonDisabled()"
		/>
		</div>
	</form>
	</div>

	<div class="container max-w-2xl" x-cloak x-show="subscribed && !loading">
	<div class="text-style-h2 md:text-3xl mb-4 text-2xl text-center">
		You’re now subscribed!	</div>
	<div
		class="text-lg text-center"
		x-text="`Check your email to confirm your subscription.`"
	></div>
	</div>
</div>

<script>
	let subscribeForm = function () {
	return {
		config: {
		endpoints: {
			signup:
			"https://sophos-mailchimp-signup.netlify.app/.netlify/functions/newsletter-signup",
		},
		},
		subscribed: false,
		loading: false,
		error: false,
		message: "",
		categories: {
		1: {
			name: decodeURIComponent( 'Products%20and%20Services' ),
			value: "products-services",
		},
		2: {
			name: decodeURIComponent( 'Threat%20Research' ),
			value: "threat-research",
		},
		3: {
			name: decodeURIComponent( 'Security%20Operations' ),
			value: "security-operations",
		},
		4: {
			name: decodeURIComponent( 'AI%20Research' ),
			value: "ai-research",
		},
		5: {
			name: decodeURIComponent( '%23SophosLife' ),
			value: "sophos-life",
		},
		},
		subscribeTo: [],
		email: "",

		reset() {
		this.loading = false;
		if (!this.error) {
			this.email = "";
		}
		},

		resetErrors() {
		this.error = false;
		this.message = "";
		},

		setError(message) {
		this.error = true;
		this.message = message;
		},

		setSuccess(message) {
		this.error = false;
		this.message = message;
		},

		emailIsValid(email) {
		return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
		},

		submit() {
		this.loading = true;
		this.resetErrors();

		const mcList = "8d6471d831";
		const mcLanguage = decodeURIComponent( 'en' );
		const mcTags = [...this.subscribeTo, mcLanguage];

		const payload = {
			email: this.email,
			listId: mcList,
			tags: mcTags,
			language: mcLanguage,
		};

		fetch(this.config.endpoints.signup, {
			method: "POST",
			headers: {
			"Content-Type": "application/json",
			},
			body: JSON.stringify(payload),
		})
			.then((r) => r.json())
			.then((data) => {
			if (data.status === "pending") {
				this.setSuccess(
					decodeURIComponent( 'You%20have%20been%20subscribed.%20Please%20check%20your%20email%20to%20confirm.' )
				);
				this.subscribed = true;
			} else if (
				data.status === "subscribed"
			) {
				this.setSuccess(
					decodeURIComponent( 'You%20are%20already%20subscribed.%20Thank%20you%21' )
				);
			} else {
				this.setError(
					decodeURIComponent( 'We%20could%20not%20subscribe%20you.%20Please%20try%20again.' )
				);
			}
			})
			.catch((e) => {
			this.setError(
				decodeURIComponent( 'We%20could%20not%20subscribe%20you.%20Please%20try%20again.' )
			);
			})
			.finally(() => {
			this.reset();
			});
		},

		buttonText() {
		return this.loading ? decodeURIComponent( 'Please%20Wait' ) : decodeURIComponent( 'Subscribe' );
		},

		buttonDisabled() {
		return (
			this.subscribeTo.length < 1 ||
			!this.emailIsValid(this.email) ||
			this.loading
		);
		},
	};
	};
</script>


	<footer
		class="bg-white border-t border-sophos-gray-200 "
		x-data="{ languageMenu: false, privacyMenu: false, legalMenu: false }"
	>
		<div class="container">
			<div class="md:flex-row md:items-center flex flex-col justify-between py-8">
				<div class="flex items-baseline flex-grow space-x-6">
					<!-- Language -->
					
<div class="relative mr-auto">
	<a
		href="#"
		class="whitespace-nowrap font-sansMedium text-sophos-gray-600 inline-block text-xs font-medium leading-tight"
		@click.prevent="languageMenu = !languageMenu"
		@click.away="languageMenu = false"
	>
		Change Region		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="8"
			height="4"
			class="inline-block transition-transform transform"
			:class="{'rotate-180': languageMenu }"
		>
			<path
				fill="#7F8C9D"
				fill-rule="evenodd"
				d="M4 2.178L5.915.262a.708.708 0 01.996 0 .702.702 0 010 .995L4.75 3.415A.7.7 0 014 3.94a.702.702 0 01-.751-.524l-2.16-2.158a.702.702 0 11.996-.995L4 2.178z"
			/>
		</svg>
	</a>

	<!-- Language Menu -->
	<div
		class="focus:outline-none border-sophos-gray-200 absolute bottom-0 left-0 w-48 px-4 py-1 py-4 mb-8 -ml-4 origin-bottom-left bg-white border rounded-md shadow-md"
		role="menu"
		aria-orientation="vertical"
		aria-labelledby="user-menu"
		x-show="languageMenu"
		x-cloak
		x-transition:enter="transition-all ease-out duration-100"
		x-transition:enter-start="transform opacity-0 scale-95"
		x-transition:enter-end="transform opacity-100 scale-100"
		x-transition:leave="transition ease-in duration-75"
		x-transition:leave-start="transform opacity-100 scale-100"
		x-transition:leave-end="transform opacity-0 scale-95"
	>
		<ul
			class="font-sansMedium text-sophos-gray-600 space-y-1 text-xs font-medium"
		>
											<li>
					<a href="https://news.sophos.com/es-419">
						América Latina					</a>
				</li>
															<li>
					<a href="https://news.sophos.com/pt-br">
						Brasil					</a>
				</li>
											<li>
					<a href="https://news.sophos.com/de-de">
						Deutschland					</a>
				</li>
											<li>
					<a href="https://news.sophos.com/en-us">
						English					</a>
				</li>
											<li>
					<a href="https://news.sophos.com/fr-fr">
						France					</a>
				</li>
											<li>
					<a href="https://news.sophos.com/es-es">
						Iberia					</a>
				</li>
											<li>
					<a href="https://news.sophos.com/it-it">
						Italia					</a>
				</li>
											<li>
					<a href="https://news.sophos.com/ja-jp">
						Japan					</a>
				</li>
									</ul>
	</div>
</div>

					<!-- Terms -->
					<a
						href="https://www.sophos.com/en-us/legal/sophos-website.aspx"
						class="whitespace-nowrap font-sansMedium text-sophos-gray-600 inline-block ml-auto text-xs font-medium leading-tight"
						>Terms</a
					>

					<!-- Privacy -->
					
<span class="relative">
	<a
		href="#"
		class="whitespace-nowrap font-sansMedium text-sophos-gray-600 inline-block text-xs font-medium leading-tight"
		@click.prevent="privacyMenu = !privacyMenu"
		@click.away="privacyMenu = false"
	>
		Privacy
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="8"
			height="4"
			class="inline-block transition-transform transform"
			:class="{'rotate-180': privacyMenu }"
		>
			<path
				fill="#7F8C9D"
				fill-rule="evenodd"
				d="M4 2.178L5.915.262a.708.708 0 01.996 0 .702.702 0 010 .995L4.75 3.415A.7.7 0 014 3.94a.702.702 0 01-.751-.524l-2.16-2.158a.702.702 0 11.996-.995L4 2.178z"
			/>
		</svg>
	</a>
	<div
		class="focus:outline-none border-sophos-gray-200 absolute bottom-0 left-0 w-48 px-4 py-1 py-4 mb-8 -ml-4 origin-bottom-left bg-white border rounded-md shadow-md"
		role="menu"
		aria-orientation="vertical"
		aria-labelledby="user-menu"
		x-show="privacyMenu"
		x-cloak
		x-transition:enter="transition-all ease-out duration-100"
		x-transition:enter-start="transform opacity-0 scale-95"
		x-transition:enter-end="transform opacity-100 scale-100"
		x-transition:leave="transition ease-in duration-75"
		x-transition:leave-start="transform opacity-100 scale-100"
		x-transition:leave-end="transform opacity-0 scale-95"
	>
		<ul
			class="font-sansMedium text-sophos-gray-600 space-y-1 text-xs font-medium"
		>
			<li>
				<a
					href="https://www.sophos.com/en-us/legal/sophos-group-privacy-policy.aspx"
				>
					Privacy Notice				</a>
			</li>
			<li>
				<a
					href="https://www.sophos.com/en-us/legal/cookie-information.aspx"
				>
					Cookies				</a>
			</li>
		</ul>
	</div>
</span>

					<!-- Legal -->
					
<span class="relative">
	<a
		href="#"
		class="whitespace-nowrap font-sansMedium text-sophos-gray-600 inline-block text-xs font-medium leading-tight"
		@click.prevent="legalMenu = !legalMenu"
		@click.away="legalMenu = false"
	>
		Legal
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="8"
			height="4"
			class="inline-block transition-transform transform"
			:class="{'rotate-180': legalMenu }"
		>
			<path
				fill="#7F8C9D"
				fill-rule="evenodd"
				d="M4 2.178L5.915.262a.708.708 0 01.996 0 .702.702 0 010 .995L4.75 3.415A.7.7 0 014 3.94a.702.702 0 01-.751-.524l-2.16-2.158a.702.702 0 11.996-.995L4 2.178z"
			/>
		</svg>
	</a>
	<div
		class="focus:outline-none border-sophos-gray-200 absolute bottom-0 left-0 w-48 px-4 py-1 py-4 mb-8 -ml-4 origin-bottom-left bg-white border rounded-md shadow-md"
		role="menu"
		aria-orientation="vertical"
		aria-labelledby="user-menu"
		x-show="legalMenu"
		x-cloak
		x-transition:enter="transition-all ease-out duration-100"
		x-transition:enter-start="transform opacity-0 scale-95"
		x-transition:enter-end="transform opacity-100 scale-100"
		x-transition:leave="transition ease-in duration-75"
		x-transition:leave-start="transform opacity-100 scale-100"
		x-transition:leave-end="transform opacity-0 scale-95"
	>
		<ul
			class="font-sansMedium text-sophos-gray-600 space-y-1 text-xs font-medium"
		>
			<li>
				<a
					href="https://www.sophos.com/en-us/legal.aspx"
				>
					General				</a>
			</li>
			<li>
				<a
					href="https://www.sophos.com/en-us/legal/modern-slavery-act-transparency-statement.aspx"
				>
					Modern Slavery Statement				</a>
			</li>
			<li>
				<a
					href="https://secure.ethicspoint.eu/domain/media/en/gui/104916/index.html"
				>
					Speak Out				</a>
			</li>
		</ul>
	</div>
</span>

					<!-- Copyright -->
					<div class="md:ml-6 mt-2 md:mt-0">
						<span
							class="whitespace-nowrap font-sansMedium text-sophos-gray-600 inline-block text-xs font-medium leading-tight"
						>
							&copy; 1997 - 2022 Sophos Ltd. All rights reserved						</span>
					</div>
				</div>
			</div>
			</div>
		</div>
	</footer>
	<script type="text/javascript" src="https://news.sophos.com/_static/??-eJzTLy/QTc7PK0nNK9EvyClNz8wr1i+uzCtJrMjITM/IAeKS1CJMEWP94uSizIISoOIM5/yiVL2sYh19yo1yKioFmldQQE3jvILBfGoaGZGbQ03jAnISM/OABtrn2hqamVqYmAKhURYAiPyfSA==" ></script><script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "https://news.sophos.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.head.appendChild( corecss );
		var themecssurl = "https://news.sophos.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		document.head.appendChild( themecss );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['auto-links'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();

	// Infinite scroll support
	if ( typeof( jQuery ) !== 'undefined' ) {
		jQuery( function( $ ) {
			$( document.body ).on( 'post-load', function() {
				SyntaxHighlighter.highlight();
			} );
		} );
	}
</script>
<script id='sophos-js-core-js-extra'>
var PG8Data = {"startPage":"1","maxPages":"1","nextLink":""};
</script>
<script type="text/javascript" src="https://news.sophos.com/_static/??-eJyVjGEOwiAMRi8kZRCn/jGehZBmA6UQWp3Ht2YXGOn36+W92q2ZWEmQxMqKBdlybWtlwo2Nn9zVZtapVJ8JzceDB6cAdgCZT/bQj1j7gI1f6YGP+zuCt6TXeBVDaSEtNBy20IWwD3dLGE7+TKNHubvLfDvPelP+AaC7oEI=" ></script><script src='https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.8.1/dist/alpine.min.js?ver=2.0.1' id='alpine-js-js'></script>
<script type="text/javascript" src="https://news.sophos.com/wp-includes/js/comment-reply.min.js?m=1658827588g" ></script><script src='https://stats.wp.com/e-202231.js' defer></script>
<script>
	_stq = window._stq || [];
	_stq.push([ 'view', {v:'ext',j:'1:11.1.2',blog:'166161023',post:'57026',tz:'-4',srv:'news.sophos.com',hp:'vip'} ]);
	_stq.push([ 'clickTrackerInit', '166161023', '57026' ]);
</script>
</body>
</html>
