<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: EternalBlue: a prominent threat actor of 2017–2018</title>
<meta name="description" content="At the centre of last year's infamous WannaCry ransomware attack was an NSA exploit leaked by the Shadow Brokers hacker group, known as ‘EternalBlue’. The worm-like functionality of the exploit made a deadly impact by propagating to interconnected computers over Windows SMB protocol. In this paper, researchers from Quick Heal Security Labs provide an insight into the attack’s timeline, an exploit analysis and recent observations made around its existence to date." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 6070;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-eternalblue-prominent-threat-actor-20172018"></a>EternalBlue: a prominent threat actor of 2017–2018</h1>
<h3><a class="chapter" name="h3-pradeep-kulkarni-sameer-patil-prashant-kadam-amp-aniruddha-dolas"></a>Pradeep Kulkarni, Sameer Patil, Prashant Kadam &amp; Aniruddha Dolas</h3>
<p>Quick Heal Security Labs, India</p>
<p><em>Copyright © 2018 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-12627" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-12627" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-introduction">Introduction</a><br /> <a class="toc-level2" href="#h2-shadow-brokers-group">Shadow Brokers Group</a><br /> <a class="toc-level2" href="#h2-ms17-010">MS17-010</a><br /> <a class="toc-level2" href="#h2-fuzzbunch">Fuzzbunch</a><br /> <a class="toc-level2" href="#h2-eternalblue">EternalBlue</a><br /> <a class="toc-level3" href="#h3-smb-transactions">SMB transactions</a><br /> <a class="toc-level3" href="#h3-fea-list-format-conversion">The FEA_LIST format conversion</a><br /> <a class="toc-level3" href="#h3-root-cause-analysis-srvsys">Root cause analysis in srv.sys</a><br /> <a class="toc-level3" href="#h3-kernel-nonpagedpool-grooming">Kernel NonPagedPool grooming</a><br /> <a class="toc-level3" href="#h3-creating-hole-ntfea-list-allocation">Creating a hole for NTFea list allocation</a><br /> <a class="toc-level3" href="#h3-exploit-complete-sequence">Exploit complete sequence</a><br /> <a class="toc-level2" href="#h2-doublepulsar">DoublePulsar</a><br /> <a class="toc-level3" href="#h3-doublepulsar-execution-flow">DoublePulsar execution flow</a><br /> <a class="toc-level4" href="#h4-sysenter-routine-hook">SYSENTER routine hook</a><br /> <a class="toc-level4" href="#h4-finding-ntoskrnlexe-and-resolving-its-exports">Finding ntoskrnl.exe and resolving its exports</a><br /> <a class="toc-level4" href="#h4-queueuserapc-injection-kernel-user-address-space">QueueUserAPC injection from kernel to user address space</a><br /> <a class="toc-level2" href="#h2-statistics">Statistics</a><br /> <a class="toc-level2" href="#h2-other-exploits-affecting-windows">Other exploits affecting Windows</a><br /> <a class="toc-level4" href="#h4-eternalchampion">EternalChampion</a><br /> <a class="toc-level4" href="#h4-eternalromance">EternalRomance</a><br /> <a class="toc-level4" href="#h4-emeraldthread">EmeraldThread</a><br /> <a class="toc-level4" href="#h4-erraticgopher">ErraticGopher</a><br /> <a class="toc-level4" href="#h4-eskimoroll">EskimoRoll</a><br /> <a class="toc-level4" href="#h4-educatedscholar">EducatedScholar</a><br /> <a class="toc-level4" href="#h4-eternalsynergy">EternalSynergy</a><br /> <a class="toc-level4" href="#h4-eclipsedwing">EclipsedWing</a><br /> <a class="toc-level4" href="#h4-englishmandentist">EnglishmanDentist</a><br /> <a class="toc-level4" href="#h4-esteemaudit">EsteemAudit</a><br /> <a class="toc-level4" href="#h4-explodingcan">ExplodingCan</a><br /> <a class="toc-level2" href="#h2-references">References</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>Last year, the cybersecurity world was abuzz with news of what became the infamous and widespread WannaCry ransomware attack. The campaign started shortly after the disclosure of a series of National Security Agency (NSA) exploits by the Shadow Brokers hacker group. Taking advantage of unpatched systems all over the globe, the WannaCry attack, which used an exploit known as 'EternalBlue', spread across 150 countries.</p>
<p>The infamous Shadow Brokers hacker group has been active since 2016 and has been responsible for leaking several NSA exploits, zero-days and hacking tools.</p>
<p>According to <em>Wikipedia</em>, five leaks by the Shadow Brokers group have been reported to date. The fifth leak, which happened on 14 April 2017, proved to be the most damaging. On the same day, <em>Microsoft</em> issued a blog post outlining the available patches that already addressed the exploits that had been leaked by Shadow Brokers. A month prior to the leak (14 March 2017), <em>Microsoft</em> had issued Security Bulletin MS17-010, which addressed some of the unpatched vulnerabilities, including those used by the 'EternalBlue' exploit. However, many users did not apply the patch, and on 12 May 2017 were hit by the biggest ransomware attack in history – the WannaCry attack.</p>
<p>WannaCry gained worldwide attention after it managed to infect more than 230,000 computers in more than 150 countries. High-profile organizations including hospitals and telecom, gas, electricity and other utility providers worldwide were the main casualties of the attack. Not long after the WannaCry outbreak, other serious attacks occurred which were also found to be using EternalBlue and other exploits and hacking tools from the same NSA leak. These included the EternalRocks worm, the Petya a.k.a NotPetya ransomware, and the BadRabbit ransomware.</p>
<p>Cryptocurrency mining campaigns were also seen using the exploits leaked by Shadow Brokers to spread to other machines. These included Adylkuzz, Zealot and WannaMine.</p>
<p>The fifth Shadow Brokers NSA leak contained 30 exploits and seven hacking tools/utilities in total, which were integrated into an exploit framework named 'Fuzzbunch'. Fuzzbunch was like any other exploit framework, with a sophisticated command line interface (CLI). Using this CLI an attacker could launch any exploit against a targeted entity. Of the 30 exploits, 12 affected the <em>Windows</em> platform: 'EternalBlue', 'EmeraldThread', 'EternalChampion', 'ErraticGopher', 'EskimoRoll', 'EternalRomance', 'EducatedScholar', 'EternalSynergy', 'EclipsedWing', 'EnglishmanDentist', 'EsteemAudit' and 'ExplodingCan'. Fuzzbunch also contained a sophisticated shellcode called 'DoublePulsar', which opens a backdoor in the victim's system and can be used to launch any malware attack on the infected machine.</p>
<p>This paper outlines the use of the Fuzzbunch exploit framework, details of the MS17-010 patch, and insights into the EternalBlue exploit and DoublePulsar payload. In addition, it puts together some detection statistics of the EternalBlue exploit from its inception in May 2017 to date.</p>
<p> </p>
<h2><a class="chapter" name="h2-shadow-brokers-group"></a>Shadow Brokers Group</h2>
<p>The Shadow Brokers group is famous for NSA leaks containing exploits, zero-days and hacking tools. The first known leak from this group was in August 2016. After the most recent leak, the Shadow Brokers group altered its business model and started paid subscription. Of all the public leaks made by the group, it was the fifth one – which included the EternalBlue exploit used in many cyber attacks – that made history.</p>
<p> </p>
<h2><a class="chapter" name="h2-ms17-010"></a>MS17-010</h2>
<p>On 14 March 2017, <em>Microsoft</em> patched several of the vulnerabilities exploited by the Shadow Brokers leak and advised its users to update their systems with the MS17-010 patch. Table 1 below shows the exploits addressed by <em>Microsoft</em>.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>Exploits</strong></td>
<td><strong>Security Bulletin/CVE</strong></td>
</tr>
<tr>
<td>EternalBlue</td>
<td>MS17-010</td>
</tr>
<tr>
<td>EmeraldThread</td>
<td>MS10-061</td>
</tr>
<tr>
<td>EternalChampion</td>
<td>MS17-010</td>
</tr>
<tr>
<td>ErraticGopher</td>
<td>CVE-2017-8461</td>
</tr>
<tr>
<td>EskimoRoll</td>
<td>MS14-068</td>
</tr>
<tr>
<td>EternalRomance</td>
<td>MS17-010</td>
</tr>
<tr>
<td>EducatedScholar</td>
<td>MS09-050</td>
</tr>
<tr>
<td>EternalSynergy</td>
<td>MS17-010</td>
</tr>
<tr>
<td>EclipsedWing</td>
<td>MS08-067</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 1: The exploits addressed by Microsoft.</p>
<p>The 'EnglishmanDentist' (CVE-2017-8487), 'EsteemAudit' (CVE-2017-0176) and 'ExplodingCan' (CVE-2017-7269) exploits are only reproducible on certain <em>Windows</em> operating systems that are no longer supported by <em>Microsoft</em>. Users of these systems were urged to upgrade their operating systems to those supported by <em>Microsoft</em>.</p>
<p> </p>
<h2><a class="chapter" name="h2-fuzzbunch"></a>Fuzzbunch</h2>
<p>Fuzzbunch is just like any other exploit framework. It has an intuitive command line interface (CLI) that can be used to navigate through various exploits and settings. The framework was coded with Python 2.6 and uses an old version of PyWin32: v2.12. To launch the framework, one must execute the script fb.py, as shown in Figure 1 below.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/8515/2811/5703/eternalblue-fig1.png" alt="eternalblue-fig1.png" width="639" height="173" /><span class="centered-caption"> Figure 1: Launching Fuzzbunch.</span></p>
<p>Various parameters, such as target IP address, OS details, etc., are required to launch an attack. These details can be saved with project names for reuse. Figure 2 shows the available exploits in Fuzzbunch.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/2915/2811/5835/eternalblue-fig2.png" alt="eternalblue-fig2.png" width="638" height="216" /><span class="centered-caption">Figure 2: List of the Fuzzbunch exploits.</span></p>
<p>To launch the EternalBlue exploit, we need to issue the 'use Eternalblue' command in the Fuzzbunch CLI, as shown in Figure 3. The configurations that have already been entered are displayed. To execute the EternalBlue exploit, the 'execute' command must be issued.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/2815/2811/5885/eternalblue-fig3.png" alt="eternalblue-fig3.png" width="640" height="319" /><span class="centered-caption">Figure 3: Use of the EternalBlue exploit in Fuzzbunch.</span></p>
<p>Upon successful execution of the exploit, the messages shown in Figure 4 are displayed on the CLI.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/4115/2811/6270/eternalblue-fig4.png" alt="eternalblue-fig4.png" width="640" height="494" /><span class="centered-caption">Figure 4: Messages displayed following successful execution of the EternalBlue exploit.</span></p>
<p>In order to execute the DoublePulsar shellcode, the 'use Doublepulsar' command needs to be issued, as shown in Figure 5.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/6715/2811/6808/eternalblue-fig5.png" alt="eternalblue-fig5.png" width="641" height="314" /><span class="centered-caption">Figure 5: Executing the DoublePulsar backdoor in Fuzzbunch.</span></p>
<p>Depending on the targeted machine, a few more configurations are required, as shown in Figure 6.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/9115/2811/6877/eternalblue-fig6.png" alt="eternalblue-fig6.png" width="639" height="490" /><span class="centered-caption">Figure 6: DoublePulsar backdoor options list.</span></p>
<p>The DoublePulsar payload asks which operations it is required to perform. The available operations are: OutputInstall (dump shellcode), Ping, RunDLL, RunShellcode and Uninstall.</p>
<p>Upon successful execution of DoublePulsar, the messages shown in Figure 7 are displayed on the CLI.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/4315/2811/6902/eternalblue-fig7.png" alt="eternalblue-fig7.png" width="638" height="380" /><span class="centered-caption">Figure 7: DoublePulsar backdoor implant successful.</span></p>
<p> </p>
<h2><a class="chapter" name="h2-eternalblue"></a>EternalBlue</h2>
<p>EternalBlue exploits a remote code execution vulnerability in <em>Windows</em> SMB. It utilizes three SMB-related bugs and an ASLR bypass technique in its exploitation. It performs a kernel NonPagedPool buffer overflow using two of these bugs and utilizes the third bug to set up the kernel pool grooming required to orchestrate the buffer overwrite on another known kernel structure. This overflow, along with the ASLR bypass, helps place the shellcode at a predefined executable address. This allows the attackers to launch a remote code execution on vulnerable victims' machines.</p>
<p>EternalBlue exploits a victim machine's vulnerable SMB by sending crafted SMB packets over multiple TCP connections. In the first TCP connection, it opens a null session through an anonymous login on IPC$ share. If the response from the victim's computer is STATUS_SUCCESS, the exploit begins its operation by sending an SMB NT Trans request with the 'TotalDataCount' DWORD field set as 66512. NT Trans corresponds to the SMB_COM_NT_TRANSACT transaction subprotocol and is one of the six types of transaction subprotocols available.</p>
<p> </p>
<h3><a class="chapter" name="h3-smb-transactions"></a>SMB transactions</h3>
<p>As per <em>MSDN</em>, 'the Transaction SMB commands are generic operations. They provide transport for extended sets of subcommands which, in turn, allow the CIFS client to access advanced features on the server. CIFS supports three different transaction messages, which differ only slightly in their construction':</p>
<p style="padding-left: 30px;">SMB_COM_TRANSACTION     (or Trans)</p>
<p style="padding-left: 30px;">SMB_COM_TRANSACTION2   (or Trans2)</p>
<p style="padding-left: 30px;">SMB_COM_NT_TRANSACT     (or NT Trans)</p>
<p>After the first NT Trans request, the exploit sends multiple Trans2 Secondary (SMB_COM_TRANSACTION2_SECONDARY) requests with the 'TotalDataCount' WORD field set as 4096. The '_SECONDARY' subcommands are used when the message payload is big and has to be split across multiple SMB transactions.</p>
<p>In an ideal situation, if the payload can't be accommodated in one SMB_COM_NT_TRANSACT packet, the rest of the payload is sent through SMB_COM_NT_TRANSACT_SECONDARY packets. Similarly, SMB_COM_TRANSACTION2_SECONDARY requests are used when the primary request packet is of type SMB_COM_TRANSACTION2.</p>
<p>EternalBlue uses the incorrect sequence of packets (SMB_COM_NT_TRANSACT -&gt; SMB_COM_TRANSACTION2_SECONDARY) to exploit the parsing bug (bug 2) in srv.sys.</p>
<p>This bug exists because srv.sys incorrectly maps the received multiple transaction packet types as per the SMB command value set in the last packet of the sequence. Hence, even though the transaction is initiated with the NT Trans request, in the end the whole transaction is mapped as a Trans2 request type because that's the value set in the last packet. Furthermore, if we compare the two structures, we notice that the 'TotalDataCount' value field is DWORD in NT Trans and WORD in Trans2 requests.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/6215/2811/7481/eternalblue-fig8.jpg" alt="eternalblue-fig8.jpg" width="728" height="344" /><span class="centered-caption">Figure 8: Comparison of NT Trans and Trans2 structures.</span></p>
<p>Hence, this bug made it possible to send a payload in Trans2 requests that is bigger than the limit of 65535(0xffff).</p>
<p> </p>
<h3><a class="chapter" name="h3-fea-list-format-conversion"></a>The FEA_LIST format conversion</h3>
<p>The payload present in the above transaction request packets is a big SMB_FEA_LIST which is nothing but a concatenated list of SMB_FEA structures in OS2 format. 'FEA' stands for 'Full Extended Attribute' and contains information related to files in name/value attribute format.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/5015/2811/7813/eternalblue-fig9.jpg" alt="eternalblue-fig9.jpg" width="256" height="112" /><span class="centered-caption">Figure 9: Structure of FEA_LIST.</span></p>
<p>In the payload, the SizeOfListInBytes is the first field of the list structure with a value set as 0x10000. Then there are 607 crafted SMB_FEA structures appended one after another, the total size of which is a little more than 0x10000 bytes (see Figure 10).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/3215/2811/7924/eternalblue-fig10.jpg" alt="eternalblue-fig10.jpg" width="829" height="478" /><span class="centered-caption">Figure 10: NT Trans request packet containing OS2FeaList.</span></p>
<p>As seen in Figure 11, the first 605 structures are empty, each occupying five bytes in the list. The second last structure is of size (0xf383 + 5) bytes, while the last structure in the list is of size (0xa8 + 5) bytes. After 607 structures, there is some appended garbage data which keeps the request packet confined to a particular size.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/2815/2811/7977/eternalblue-fig11.jpg" alt="eternalblue-fig11.jpg" width="424" height="528" /><span class="centered-caption">Figure 11: Records in OS2FeaList.</span></p>
<p>When the FEA list is sent in OS2 format, since OS2 is an outdated format, it is converted to the currently used NT format by the srv.sys driver. However, while parsing the FEA list to convert it into NtFeaList, there is a bug (bug 1) consisting of a wrong type casting a WORD into a DWORD. Let's have a look at both the structures involved here (Figure 12).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/c50bb1f86122e0641017db7193c14532_f2813.jpg" alt="eternalblue-fig12.jpg" width="845" height="186" /><span class="centered-caption">Figure 12: SMB_FEA_List vs NtFeaList structure.</span></p>
<p>As mentioned in <em>MSDN</em>, 'The SMB_FEA data structure is used in Transaction2 subcommands and in the NT_TRANSACT_CREATE subcommand to encode an extended attribute (EA) name/value pair'. Hence, it's clear that the parsing bug that we saw earlier specifically allowed SMB_FEA_LIST to be sent with size &gt; 0xffff, which is not possible through normal Transaction2 subcommand requests.</p>
<p> </p>
<h3><a class="chapter" name="h3-root-cause-analysis-srvsys"></a>Root cause analysis in srv.sys</h3>
<p>The NtFea conversion takes place in the srv!SrvOs2FeaListToNt function as soon as the whole structure is received from the last Trans2 request packet. SrvOs2FeaListToNt calls srv!SrvOs2FeaListSizeToNt to parse each structure and calculate the total size required for the new structure. It doesn't validate the contents of the source list but it does check each FEA structure to make sure its length is not out of bounds of the length defined initially in the SizeOfListInBytes field (0x10000 in this case).</p>
<p>After parsing 606 FEA structs, the total offset length of structs parsed becomes 0xff59 bytes. Since the last FEA is of size 0xad, it results in a length value that is out of bounds by 10 bytes. Hence, as shown in Figure 13, it comes out of the WHILE loop, discards the 607th record along with the remaining appended garbage data, and finally updates the Os2FeaList‑&gt;SizeOfListInBytes value in a buggy form, as shown in Figure 14.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/332053a22d89c059f52f05d361f499e0_f2814.jpg" alt="eternalblue-fig13.jpg" width="840" height="588" /><span class="centered-caption">Figure 13: srv!SrvOs2FeaListSizeToNt pseudocode.</span></p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/50b2f9c076ed28dcff07232ff93f66a1_f2815.jpg" alt="eternalblue-fig14.jpg" width="845" height="97" /><span class="centered-caption">Figure 14: SizeOfListInBytes updated value.</span></p>
<p>The corrected size is updated in LOWORD bytes of the DWORD variable, thereby increasing its value instead of decreasing it. SrvOs2FeaListToNt gets the returned final calculated sizes of the NtFea list and the updated Os2Fea list, and allocates memory in NonPagedPool for the NtFea list. For each FEA record to be converted, it calls srv!SrvOs2FeaToNt to copy the contents using memmove(), which continues until the end of the last FEA record.</p>
<p>The NtFea size allocated is 0x10fe8 bytes, but as shown in Figure 15, there is an overwrite of 0xb1 bytes. If the overwrite is completed successfully, the function returns with the status 0xC000000D, as shown in Figure 16.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/f2ce74212eae31a7c15f41c5145661fa_f2816.jpg" alt="eternalblue-fig15.jpg" width="845" height="468" /><span class="centered-caption">Figure 15: NtFeaList out of bound write operation.</span></p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/8115/2811/8307/eternalblue-fig16.jpg" alt="eternalblue-fig16.jpg" width="791" height="94" /><span class="centered-caption">Figure 16: SrvOs2FeaListToNt return status.</span></p>
<p>The victim's machine then sends a Trans2 response packet to the server with NT Status value returned from the SrvOs2FeaListToNt function, which is 0xC000000D, signifying that the overwrite was successful (Figure 17).</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/689bf614c24904976d974d95f10c0a2d_f2818.jpg" alt="eternalblue-fig17.jpg" width="840" height="286" /><span class="centered-caption">Figure 17: STATUS_INVALID_PARAMETER response status for successful overwrite.</span></p>
<p> </p>
<h3><a class="chapter" name="h3-kernel-nonpagedpool-grooming"></a>Kernel NonPagedPool grooming</h3>
<p>The overflow which we saw above is well orchestrated on an SRVNet chunk which contains the SRVNET_BUFFER_HDR structure. By using some kernel pool grooming, it is ensured that the SRVNet chunk is placed right after the end of the allocation of the converted NtFea list. Hence, after the overflow, it is expected to overwrite two of its important fields, allowing ASLR bypass and finally making EIP point to shellcode.</p>
<p>EternalBlue opens multiple new TCP connections to send SMBv2 packets, which causes srvnet.sys to allocate SRVNET_BUFFER_HDR chunks at the NonPagedPool pool. Multiple packets are sent to fill up the fragmented spaces in NonPagedPool, thereby increasing the chances of groom packets sent after this being allocated at the required location. Figure 18 shows an overwritten SRVNet chunk.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/c09106a928ba592528ebb947e876a3ac_f2819.jpg" alt="eternalblue-fig18.jpg" width="840" height="363" /><span class="centered-caption">Figure 18: Overwritten SRVNet chunk.</span></p>
<p>The fields overwritten in the SRVNET_BUFFER_HDR structure are:</p>
<ul>
<li>pSrvNetWskStruct: located at offset 0x58 bytes from the start of the header, this points to the SrvNetWskStruct object which is of type SRVNET_RECV.</li>
<li>pMdl1: located at offset 0x38, this is a pointer to MDL. The operating system uses a memory descriptor list (MDL) to describe the physical page layout for a virtual memory buffer.</li>
</ul>
<p>Both the fields are overwritten to the same virtual address, 0xfffdf100, which is the HAL heap address in 32-bit <em>Windows 7</em>. This ASLR bypass trick ensures that the next SMB2 headers to be received will be placed in the statically defined HAL heap address instead of in the usual NonPagedPool. So, from all the NumGrooms connections, only the allocation where the SRVNet chunk was overwritten causes allocation in the HAL heap. A payload comprising a fake SRVNET_RECV structure appended with shellcode is then sent with the SRVNET_RECV‑&gt;HandlerFunction field value set to the shellcode address. Immediately after sending the payload, all NumGrooms connections are closed, causing the target handler function to be called and triggering the shellcode execution.</p>
<p> </p>
<h3><a class="chapter" name="h3-creating-hole-ntfea-list-allocation"></a>Creating a hole for NTFea list allocation</h3>
<p>Spraying multiple groom packets is just one part of the grooming process. The other part involves creating a hole exclusively for NTFea list allocation. For this, a request format parsing confusion bug (bug 3) is used, in which a small SMB_COM_SESSION_SETUP_ANDX request packet makes a large NonPagedPool allocation of 0x11000 bytes.</p>
<p>An SMB connection typically uses the SMB_COM_SESSION_SETUP_ANDX request to begin user authentication and establish an SMB session. Figure 19 shows two format structures associated with SMB_COM_SESSION_SETUP_ANDX where the parsing confusion bug exists.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/7c762b515f59a1adad094e046e51c378_f2820.jpg" alt="eternalblue-fig19.jpg" width="840" height="630" /><span class="centered-caption">Figure 19: NT Security request format vs Extended Security request format.</span></p>
<p>The two different formats have different WordCount field values, as mentioned above. Also, the ByteCount field is at offset 0x1B in NT Security request format and at 0x19 in Extended Security request format.</p>
<p>According to the bug, if an SMB_COM_SESSION_SETUP_ANDX request is sent as Extended Security (WordCount 12) with (Flags2-&gt;Extended_Security_Negotiation = 0) and (Capabilities-&gt;Extended_Security = 1), then the request will be wrongly processed as an NT Security request (WordCount 13). Hence the ByteCount field value is parsed from the wrong offsets, which causes allocation of the wrong sized buffer in NonPagedPool. Two allocations are made using this bug in this exploit: the first time in the Pre-Hole connection and then later in the Hole connection.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>SMB connection name</strong></td>
<td><strong>Original ByteCount value</strong></td>
<td><strong>Wrongly parsed ByteCount value</strong></td>
<td><strong>Allocation size requested</strong></td>
<td><strong>Allocated size</strong></td>
</tr>
<tr>
<td>Pre-Hole connection</td>
<td>0x16</td>
<td>0xfff0</td>
<td>0xffeb</td>
<td>0x10000</td>
</tr>
<tr>
<td>Hole connection</td>
<td>0x16</td>
<td>0x87f8</td>
<td>0x10fec</td>
<td>0x11000</td>
</tr>
</tbody>
</table>
<p>The Hole connection is closed just before the NTFea list allocation is initiated so that the freed up space of 0x11000 bytes is taken up by the NTFea list.</p>
<p>The role of the Pre-Hole connection is not significant in the exploit, but it is probably intended to deal with other small allocation requests the memory allocator may receive in the short time interval between freeing the hole allocation and making a new allocation for the NTFea list.</p>
<p>An interesting thing about this exploit is that all four types of NonPagedPool allocations (NTFea list, Pre-Hole connection, Hole allocation and NumGrooms allocation) are huge allocations of 0x10000 and 0x11000 bytes. Because of these large allocation sizes, the allocations are mostly contiguous in kernel NonPagedPool and hence the chances of exploitation are very high, even in multiple attempts.</p>
<p> </p>
<h3><a class="chapter" name="h3-exploit-complete-sequence"></a>Exploit complete sequence</h3>
<p>Table 2 shows the exploit's complete sequence of allocations; Figure 20 shows how it looks in kernel NonPagedPool memory.</p>
<table class="table table-bordered" border="0">
<tbody>
<tr>
<td><strong>#TCP stream</strong></td>
<td><strong>Connection name</strong></td>
<td><strong>Details</strong></td>
</tr>
<tr>
<td>0</td>
<td>Overflow</td>
<td>Send a malformed OS2FeaList through multiple NT Trans and Trans2 secondary requests with the exception of the last Trans2 secondary request. The FEA list is stored at the paged pool memory of the kernel. An echo request packet is sent to keep the TCP connection open.</td>
</tr>
<tr>
<td>1</td>
<td>Pre-Hole</td>
<td>Send a malformed SMB_COM_SESSION_SETUP_ANDX request, which causes allocation of 0x10000 bytes in NonPagedPool.</td>
</tr>
<tr>
<td>2 - 14</td>
<td>NumGrooms</td>
<td>Open multiple SMB2 connections, each causing the allocation of SRVNet chunks of size 0x11000 bytes in NonPagedPool. The purpose is to fill up the fragmented memory areas that may exist in kernel memory.</td>
</tr>
<tr>
<td>15</td>
<td>Hole</td>
<td>Send a malformed SMB_COM_SESSION_SETUP_ANDX request, which causes allocation of 0x11000 bytes in NonPagedPool. This acts as a placeholder for the target NTFea list allocation responsible for overflow.</td>
</tr>
<tr>
<td>1</td>
<td>Pre-Hole</td>
<td>Close the Pre-Hole connection. Free up the allocation to handle unexpected memory allocations from other processes.</td>
</tr>
<tr>
<td>16 - 20</td>
<td>NumGrooms</td>
<td>Five new connections are made. One of them is expected to be allocated right next to the Hole allocation.</td>
</tr>
<tr>
<td>15</td>
<td>Hole</td>
<td>Close the Hole connection. Free the target memory of the Hole allocation.</td>
</tr>
<tr>
<td>0</td>
<td>Overflow</td>
<td>Send the last Trans2 secondary request packet to complete the OS2Fea list. Srv.sys converts the OS2Fea list to NTFea format by calculating the wrong size of the converted list. The NTFea list's calculated value is 0x10fe8, which causes allocation of 0x11000 bytes. <em>Windows</em> memory allocators usually work in last-in-first-out fashion. Hence the recently freed Hole allocation is the one allocated for the NTFea list. The overflow modifies some of the fields of corresponding SRVNet chunks.</td>
</tr>
<tr>
<td>2 - 14<br />and 16 - 20</td>
<td>NumGrooms</td>
<td>Send fake SRVNET_RECV + shellcode from each NumGrooms connection. The overflow SRVNET header containing the connection will result in allocation in the HAL heap.</td>
</tr>
<tr>
<td>2 - 14<br />and 16 - 20</td>
<td>NumGrooms</td>
<td>All NumGrooms connections are closed, triggering shellcode execution.</td>
</tr>
</tbody>
</table>
<p class="centered-caption">Table 2: Exploit complete sequence.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/bcd43eccda3e95ea7156fad703f0be0c_f2821.jpg" alt="eternalblue-fig20.jpg" width="845" height="474" /><span class="centered-caption">Figure 20: EternalBlue exploit complete sequence.</span></p>
<p>The details of the mentioned shellcode and the DoublePulsar backdoor are described in the next section.</p>
<p> </p>
<h2><a class="chapter" name="h2-doublepulsar"></a>DoublePulsar</h2>
<p>DoublePulsar is a backdoor implant functionality which played a vital role in infecting thousands of systems with ransomware, cryptominers and other malware during 2017. Once DoublePulsar was implanted by the EternalBlue exploit, it opened up a backdoor, which in turn was used by attackers to deploy secondary malware onto victims' systems.</p>
<p>Upon successful execution of the EternalBlue exploit, DoublePulsar is used to achieve persistence on the victim's machine. This section describes how persistence is achieved. EternalBlue sends 18 grooming packets, all of which have similar first-stage shellcode which is sprayed inside the HAL's heap address. This is similar to the heap spray mechanism which is generally used in user-mode exploits. Through the Fuzzbunch CLI, it's very easy to use DoublePulsar to inject custom shellcode or malicious DLLs from kernel-mode to user-mode processes. This is achieved using the QueueUser asynchronous procedure call (APC).</p>
<p>As per <em>MSDN</em>, 'An asynchronous procedure call (APC) is a function that executes asynchronously in the context of a particular thread. When an APC is queued to a thread, the system issues a software interrupt. The next time the thread is scheduled, it will run the APC function. An APC generated by the system is called a kernel-mode APC. An APC generated by an application is called a user-mode APC. A thread must be in an alertable state to run a user‑mode APC.'</p>
<p> </p>
<h3><a class="chapter" name="h3-doublepulsar-execution-flow"></a>DoublePulsar execution flow</h3>
<p>There are three steps involved in the DoublePulsar implant and execution.</p>
<ol>
<li>SYSENTER routine hook</li>
<li>Find ntoskrnl.exe and resolve its exports</li>
<li>QueueUserAPC injection from kernel to user address space</li>
</ol>
<p> </p>
<h4><a class="chapter" name="h4-sysenter-routine-hook"></a>SYSENTER routine hook</h4>
<p>The SYSENTER routine hook is used to make the transition from user- to kernel-mode faster than by using the 'int 0x2e' instruction. When the SYSENTER instruction is executed, the values of the Model-Specific Register (MSR) are populated in its relative registers, ESP and EIP. During this process, the value of the IA32_SYSENTER_EIP register is stored in EIP (Figure 21).</p>
<p><a class="zoom-img" title="Figure 21: SYSENTER routine hook." href="/files/3215/2811/9099/eternalblue-fig21.jpg"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/1927b3bd7f22e863dec656f50effe8b9_f2822.jpg" alt="eternalblue-fig21.jpg" width="845" height="414" /></a><span class="centered-caption">Figure 21: SYSENTER routine hook.</span></p>
<p>The shellcode overwrites the MSR to hook SYSENTER routines. In 32-bit systems, hooking is achieved by overwriting IA32_SYSENTER_EIP; in x64-bit systems it is achieved by overwriting IA32_LSTAR MSR.</p>
<p>In a normal scenario, the MSR register, i.e. IA32_SYSENTER_EIP, holds the address of the nt!KiFastCallEntry routine, but after the hook is added it points to the second part of the shellcode.</p>
<p> </p>
<h4><a class="chapter" name="h4-finding-ntoskrnlexe-and-resolving-its-exports"></a>Finding ntoskrnl.exe and resolving its exports</h4>
<p>Once the address of nt!KiFastCallEntry has been overwritten, the execution flow moves to a second-stage shellcode. It first identifies the system architecture and locates the Interrupt Descriptor Table (IDT) from the Kernel Process Control Region (KPCR) and then traverses backwards in memory to identify the base address of ntoskrnl.exe.</p>
<p>As shown in Figure 22, fs:[38h] points to the IDT in KPCR and there is a function pointer at offset 6 of the KGDTENTRY structure which points to the interrupt handler present in ntoskrnl.exe. After it gets into the address space of ntoskrnl.exe, it traverses backwards by incrementing 0x1000 until it finds a DOS MZ header (0x4d5a).</p>
<p><a class="zoom-img" title="Figure 22: Finding the ntoskrnl.exe base address and resolving its exports." href="/files/7415/2811/9186/eternalblue-fig22.jpg"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/8fc47ccb77faea886c665bb5844bf0d2_f2823.jpg" alt="eternalblue-fig22.jpg" width="845" height="312" /></a><span class="centered-caption">Figure 22: Finding the ntoskrnl.exe base address and resolving its exports.</span></p>
<p>The shellcode further identifies the export table of ntoskrnl.exe and resolves the addresses of the required functions by using a custom hashing algorithm. It resolves three functions from ntoskrnl.exe's export table:</p>
<ul>
<li>ExAllocatePool</li>
<li>ExFreePool</li>
<li>ZwQuerySystemInformation</li>
</ul>
<p>Here, the ExAllocatePool function is used to allocate memory into which third-stage shellcode is copied, and ExFreePool is used to free the allocated memory.</p>
<p>The ZwQuerySystemInformation function is used to find a list of loaded drivers in the system. The shellcode searches for the SMB driver (srv.sys) in the driver list. Once it finds the srv.sys driver, it traverses the sections of it to reach the .data section and finds the SrvTransaction2DispatchTable, which stores the addresses of SMB functions. It overwrites the address of the SrvTransactionNotImplemented function which is present at the 14th index in the SrvTransaction2DispatchTable. The third stage of shellcode, which performs the backdoor functionality, is stored at this address (see Figure 23).</p>
<p><a class="zoom-img" title="Figure 23: Overwriting SMB function address with shellcode." href="/files/6015/2811/9289/eternalblue-fig23.jpg"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/faa45a1f462c140b774349097864f513_f2824.jpg" alt="eternalblue-fig23.jpg" width="845" height="364" /></a><span class="centered-caption">Figure 23: Overwriting SMB function address with shellcode.</span></p>
<p> </p>
<h4><a class="chapter" name="h4-queueuserapc-injection-kernel-user-address-space"></a>QueueUserAPC injection from kernel to user address space</h4>
<p>The initial Trans2 SESSION_SETUP request is sent to the victim machine to identify whether or not the backdoor is present. As a response, a STATUS_NOT_IMPLEMENTED message is received, which includes 'Multiplex ID'. Generally, the Multiplex IDs in requests and responses are the same, but the backdoor returns a different Multiplex ID in response. This indicates whether or not the system is infected with the DoublePulsar backdoor. For example, in the initial Trans2 SESSION_SETUP request, Multiplex ID 0x41 (65) is sent and the infected system responds with Multiplex ID 81 (0x51) (see Figure 24).</p>
<p><a class="zoom-img" title="Figure 24: STATUS_NOT_IMPLEMENTED status to indicate the backdoor is installed." href="/files/4715/2811/9352/eternalblue-fig24.jpg"><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/80e5e921bc18e9a21308f6e2a99cc46f_f2825.jpg" alt="eternalblue-fig24.jpg" width="845" height="377" /></a><span class="centered-caption">Figure 24: STATUS_NOT_IMPLEMENTED status to indicate the backdoor is installed.</span></p>
<p>DoublePulsar sends a last-stage shellcode, which performs a QueueUserAPC injection, along with the payload (DLL/another shellcode) in a Trans2 SESSION_SETUP request. Both shellcode and DLL are encrypted using an XOR key (Figure 25).</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/cbbe07240c71975416c8110886fb6bdf_f2826.png" alt="eternalblue-fig25.png" width="845" height="264" /><span class="centered-caption">Figure 25: Trans2 request where encrypted shellcode and payload is sent.</span></p>
<p>This shellcode again identifies the ntoskrnl.exe base address and resolves its exports in the same way as the second-stage shellcode. Figure 26 shows a list of resolved APIs from ntoskrnl.exe which are used in the QueueUserAPC DLL injection technique.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/f6142ed865a770a9e5ee256e283bfed4_f2827.png" alt="eternalblue-fig26.png" width="845" height="294" /><span class="centered-caption">Figure 26: List of resolved APIs for QueueUserAPC DLL injection.</span></p>
<p>The kernel-mode-to-user-mode DLL injection begins by calling nt!PsGetCurrentProcess to get the address of the EPROCESS structure. EPROCESS-&gt;ActiveProcessLinks is parsed to get the EPROCESS structure of the target process. The target process in which injection is to be done was specified by the user earlier while executing DoublePulsar. Then, the nt!PsGetCurrentThread API is called to get the pointer of the ETHREAD structure. The ETHREAD structure is again parsed to find any alertable thread present in the process. Once the target thread is found, memory is allocated for APC and for a Memory Descriptor List (MDL) to map the supplied user-mode DLL. These two allocations are made using the nt!ExAllocatePool and nt!IoAllocateMdl APIs. The allocated address space for the MDL is given write access through the nt!MmProbeAndLockPages API. The DLL is then attached to the target process's address space using nt!KeStackAttachProcess. Once it is attached, nt!MmMapLockedPages is called to map the allocated MDL pages where the DLL payload is located. In the final step, the APC structure is initialized through nt!KeInitializeApc and APC is queued using nt!KeInsertQueueApc. This ensures that the DLL is scheduled for execution.</p>
<p>In the DoublePulsar cleanup process, the nt!KeUnstackDetachProcess and nt!ObDereferenceObject APIs are called to clean up the memory and avoid any crashes.</p>
<p> </p>
<h2><a class="chapter" name="h2-statistics"></a>Statistics</h2>
<p><em>Quick Heal Security Labs</em> observed the first EternalBlue detections in May 2017 when the WannaCry ransomware outbreak began. The detection count gradually increased as WannaCry started spreading to other computers. Also, in the month of May 2017, the EternalRocks worm used NSA leaked exploits to spread across the network. At the end of June, the Petya ransomware attack was observed.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/025ea77fd4ed686292d4be5ec367b94a_f2828.png" alt="eternalblue-fig27.png" width="840" height="396" /><span class="centered-caption">Figure 27: EternalBlue detection statistics.</span></p>
<p>During this period, many new POC/exploits using EternalBlue were discovered on the Internet. These readily available POC/exploits made it easy for attackers to change them according to their use case and to launch new attacks. We observed a rise in detections as EternalBlue was used in many such campaigns.</p>
<p>In mid-November, another global ransomware outbreak was observed: the BadRabbit ransomware. BadRabbit targeted many machines and spread using EternalBlue and other NSA exploits.</p>
<p>While ransomware outbreaks were causing havoc, we also observed many cryptominer campaigns integrating NSA exploits, in particular EternalBlue, for launching distributed mining attacks. Using EternalBlue, these cryptominers spread through multiple systems and started CPU mining. Thus, there was a steep rise in EternalBlue detections, which still continues.</p>
<p> </p>
<h2><a class="chapter" name="h2-other-exploits-affecting-windows"></a>Other exploits affecting Windows</h2>
<p>In addition to EternalBlue, the exploits listed below were also part of the leak which affected the <em>Windows</em> platform:</p>
<h4><a class="chapter" name="h4-eternalchampion"></a>EternalChampion</h4>
<p>This exploit targets a vulnerability in SMBv1. It was patched in MS17-010 and affected <em>Windows XP</em> to <em>Windows 8</em>. This vulnerability was also seen to be widely exploited along with EternalBlue. It's a remote code execution vulnerability in SMBv1 and triggered while processing Transaction2/Transaction2 secondary requests.</p>
<h4><a class="chapter" name="h4-eternalromance"></a>EternalRomance</h4>
<p>This is also an SMBv1 exploit which targets <em>Windows XP</em>, <em>2003</em>, <em>Vista</em>, <em>7</em>, <em>8</em>, <em>2008</em> and<em> 2008 R2</em>, and was patched in MS17‑010. Upon successful exploitation, it results in a privilege escalation.</p>
<h4><a class="chapter" name="h4-emeraldthread"></a>EmeraldThread</h4>
<p>This exploit targets the old SMB vulnerability (CVE-2010-2729) that was patched in MS10-061 and affected <em>Windows XP</em> and <em>Server 2003</em>. This is a remote code execution vulnerability which lies in the <em>Windows</em> Print Spooler service. Upon successful exploitation, an unauthenticated user could gain complete control over the victim's machine.</p>
<h4><a class="chapter" name="h4-erraticgopher"></a>ErraticGopher</h4>
<p>This exploit targets an old vulnerability (CVE-2017-8461) and targets SMBv1. It's a remote code execution vulnerability in RPC server enabled with routing and remote access. This vulnerability is exploited over SMBv1.</p>
<h4><a class="chapter" name="h4-eskimoroll"></a>EskimoRoll</h4>
<p>This is a Kerberos exploit which targets multiple flavours of <em>Windows</em> server editions. It is a remote privilege escalation vulnerability in Kerberos KDC.</p>
<h4><a class="chapter" name="h4-educatedscholar"></a>EducatedScholar</h4>
<p>This exploit targets another old SMB vulnerability that was addressed in MS09-050. This is also a remote code execution vulnerability which allows the attacker to run arbitrary code on an unauthenticated SMB session. The attacker can control the system after successful exploitation.</p>
<h4><a class="chapter" name="h4-eternalsynergy"></a>EternalSynergy</h4>
<p>This exploit targeted SMBv3 and was addressed in MS17‑010. It's a remote code execution flaw triggered in <em>Windows 8</em> and<em> Server 2012 SP0</em>. It was also exploited in the wild.</p>
<h4><a class="chapter" name="h4-eclipsedwing"></a>EclipsedWing</h4>
<p>This exploit targets the Server service on <em>Windows</em> systems and was addressed in MS08-067. It's a remote code execution vulnerability (CVE-2008-4250) triggered through sending crafted RPC requests. This was very heavily exploited when it was disclosed and turned out to be a deadly worm. We still see exploitation of this vulnerability now, which clearly suggests the existence of unpatched systems.</p>
<p>Apart from the above exploits, Shadow Brokers also disclosed the 'EnglishmanDentist' (CVE-2017- 8487), 'EsteemAudit' (CVE-2017-0176), and 'ExplodingCan' (CVE-2017-7269) exploits.</p>
<p><em>Microsoft</em> advised users to upgrade to supported operating systems as these are not reproducible on them.</p>
<h4><a class="chapter" name="h4-englishmandentist"></a>EnglishmanDentist</h4>
<p>This exploit triggers the vulnerability in <em>Outlook Exchange</em> WebAccess.</p>
<h4><a class="chapter" name="h4-esteemaudit"></a>EsteemAudit</h4>
<p>This is an RDP exploit (CVE-2017-9073) which targets a vulnerability in <em>Microsoft</em> Remote Desktop Protocol and causes remote code execution. It can be used to open a backdoor in the victim's machine.</p>
<h4><a class="chapter" name="h4-explodingcan"></a>ExplodingCan</h4>
<p>This is an<em> IIS 6.0</em> exploit which enabled attackers to run remote code on the victim's machine.</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p>[1] <a href="https://blogs.technet.microsoft.com/msrc/2017/04/14/protecting-customers-and-%20evaluating-risk/" target="_blank">https://blogs.technet.microsoft.com/msrc/2017/04/14/protecting-customers-and- evaluating-risk/</a>.</p>
<p>[2] <a href="https://docs.microsoft.com/en-us/security-updates/securitybulletins/2017/ms17-010" target="_blank">https://docs.microsoft.com/en-us/security-updates/securitybulletins/2017/ms17-010</a>.</p>
<p>[3] <a href="https://github.com/worawit/MS17-010" target="_blank">https://github.com/worawit/MS17-010</a>.</p>
<p>[4] <a href="https://research.checkpoint.com/eternalblue-everything-know/" target="_blank">https://research.checkpoint.com/eternalblue-everything-know/</a>.</p>
<p>[5] <a href="https://www.risksense.com/_api/filesystem/466/EternalBlue_RiskSense-Exploit-Analysis-and-Port-to-Microsoft-Windows-10_v1_2.pdf" target="_blank">https://www.risksense.com/_api/filesystem/466/EternalBlue_RiskSense-Exploit-Analysis-and-Port-to-Microsoft-Windows-10_v1_2.pdf</a>.</p>
<p>[6] <a href="http://blog.trendmicro.com/trendlabs-security-intelligence/ms17-010-eternalblue/" target="_blank">http://blog.trendmicro.com/trendlabs-security-intelligence/ms17-010-eternalblue/</a>.</p>
<p>[7] <a href="https://zerosum0x0.blogspot.in/2017/04/doublepulsar-initial-smb-backdoor-%20ring.html" target="_blank">https://zerosum0x0.blogspot.in/2017/04/doublepulsar-initial-smb-backdoor- ring.html</a>.</p>
<p>[8] <a href="https://www.countercept.com/our-thinking/analyzing-the-doublepulsar-kernel-dll-injection-technique/" target="_blank">https://www.countercept.com/our-thinking/analyzing-the-doublepulsar-kernel-dll-injection-technique/</a>.</p>
<p>[9] <a href="https://github.com/countercept/doublepulsar-detection-script" target="_blank">https://github.com/countercept/doublepulsar-detection-script</a>.</p>
<p>[10] <a href="http://www.opening-windows.com/download/apcinternals/2009-05/windows_vista_apc_internals.pdf" target="_blank">http://www.opening-windows.com/download/apcinternals/2009-05/windows_vista_apc_internals.pdf</a>.</p>
<p>[11] <a href="https://msdn.microsoft.com/en-us/library/ee441928.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/ee441928.aspx</a>.</p>
<p>[12] <a href="http://blogs.quickheal.com/ms17-010-windows-smb-server-exploitation-leads-ransomware-outbreak/" target="_blank">http://blogs.quickheal.com/ms17-010-windows-smb-server-exploitation-leads-ransomware-outbreak/</a>.</p>
<p>[13] <a href="http://blogs.quickheal.com/wannacrys-never-say-die-attitude-keeps-going/" target="_blank">http://blogs.quickheal.com/wannacrys-never-say-die-attitude-keeps-going/</a>.</p>
<p>[14] <a href="http://blogs.quickheal.com/wannacry-ransomware-recap-everything-need-know/" target="_blank">http://blogs.quickheal.com/wannacry-ransomware-recap-everything-need-know/</a>.</p>
<p>[15] <a href="http://blogs.quickheal.com/wannacry-ransomware-creating-havoc-worldwide-exploiting-patched-windows-exploit/" target="_blank">http://blogs.quickheal.com/wannacry-ransomware-creating-havoc-worldwide-exploiting-patched-windows-exploit/</a>.</p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2018/201806-EternalBlue.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=EternalBlue: a prominent threat actor of 2017–2018&url=https://www.virusbulletin.com/virusbulletin/2018/06/eternalblue-prominent-threat-actor-20172018"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2018/06/eternalblue-prominent-threat-actor-20172018'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2018/06/eternalblue-prominent-threat-actor-20172018&title=EternalBlue: a prominent threat actor of 2017–2018"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2018/06/eternalblue-prominent-threat-actor-20172018&t=EternalBlue: a prominent threat actor of 2017–2018"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2018/06/eternalblue-prominent-threat-actor-20172018"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>

</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>