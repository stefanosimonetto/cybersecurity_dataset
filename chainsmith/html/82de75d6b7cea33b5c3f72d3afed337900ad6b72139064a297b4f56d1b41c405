<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: VB2018 paper: Who wasn’t responsible for Olympic Destroyer</title>
<meta name="description" content="Paul Rascagnères &amp; Warren Mercer present the malware that they have identified – with moderate confidence – as having been used in the attack against the 2018 Winter Olympic Games. They describe the malware’s propagation techniques and its destructive capabilities, before looking at attribution and how, in this particular case, the attacker included several false flags in order to point to other well-known threat actors. " />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 6198;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>
<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>
<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->
<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/blocks/expand_collapse_toc/templates/vbexpand/view.css" />
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.color.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/blocks/expand_collapse_toc/js/expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>
<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->

<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
<div class="navbar-inner">
<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
<div class="navbar-header">
<button type="button" class="navbar-toggle btn_navbar_custom">
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div> </div>
</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav"> <div class="nav-collapse collapse nav_collapse_custom navbar-collapse"> <div style="clear:both"></div>
<div class="vb-global-search-div">
<form action="/index.php/global-search-results/" method="get">
<fieldset>
<input name="search_paths[]" type="hidden" value="" />
<input name="query" type="text" class="vb-global-search" placeholder="Search site..." />
<input name="submit" type="submit" value="Search!" style="display:none" />
</fieldset>
</form>
</div>
<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self" class=" nav-first nav-item-6299 ">Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self" class=" nav-item-260 ">VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self" class=" nav-item-166 ">VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self" class=" nav-path-selected active nav-item-160 ">Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self" class=" nav-last nav-item-130 ">Blog</a></li></ul> </div>
</div>
</div><div class="clearfix"></div>
</div>
</div>
</div>
<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>

<div class="container m-top-20">
<div class="row">
<div class="col-md-9 col-sm-9 col-lg-9">
<h1><a class="chapter" name="h1-who-wasnt-responsible-olympic-destroyer"></a>VB2018 paper: Who wasn’t responsible for Olympic Destroyer</h1>
<h3><a class="chapter" name="h3-paul-rascagneres-amp-warren-mercer"></a>Paul Rascagnères &amp; Warren Mercer</h3>
<p>Cisco Talos, USA</p>
<p><em>Copyright © 2018 Virus Bulletin</em></p>
<hr />
<p> </p>
<div class="ccm-expand-collapse-toc">
<div id="ccm-expand-collapse-toc-title-13197" class="ccm-expand-collapse-toc-title ccm-expand-collapse-toc-closed" data-expander-speed="500">Table of contents</div><div id="ccm-expand-collapse-toc-content-13197" class="ccm-expand-collapse-toc-content"><p><a class="toc-level2" href="#h2-abstract">Abstract</a><br /> <a class="toc-level2" href="#h2-introduction">Introduction</a><br /> <a class="toc-level2" href="#h2-part-one-technical-analysis">Part one: technical analysis</a><br /> <a class="toc-level3" href="#h3-initial-sample">Initial sample</a><br /> <a class="toc-level3" href="#h3-credential-harvesting">Credential harvesting</a><br /> <a class="toc-level3" href="#h3-destruction">Destruction</a><br /> <a class="toc-level3" href="#h3-legitimate-file">Legitimate file</a><br /> <a class="toc-level3" href="#h3-global-workflow">Global workflow</a><br /> <a class="toc-level2" href="#h2-part-two-attribution-or-who-wasnt-responsible">Part two: attribution, or who wasn’t responsible</a><br /> <a class="toc-level3" href="#h3-olympic-destroyer-lineup-suspects">Olympic Destroyer lineup of suspects</a><br /> <a class="toc-level4" href="#h4-lazarus-group">The Lazarus group</a><br /> <a class="toc-level4" href="#h4-apt3-amp-apt10">APT3 &amp; APT10</a><br /> <a class="toc-level4" href="#h4-nyetya">Nyetya</a><br /> <a class="toc-level2" href="#h2-conclusion">Conclusion</a><br /> <a class="toc-level2" href="#h2-references">References</a></p><p>&nbsp;</p></div></div>
<h2><a class="chapter" name="h2-abstract"></a>Abstract</h2>
<p>This year’s Winter Olympic Games took place in Pyeongchang, South Korea. Several media outlets reported that technical issues – believed to be caused by a cyber attack – had occurred during the opening ceremony. In this paper we will present the malware that we have identified – with moderate confidence – as having been used in the attack. First, we will describe the malware’s propagation techniques and its destructive capabilities. The second part of the paper will be about attribution and how, in this particular case, the attacker included several false flags in order to point to other well-known threat actors. We will conclude by opening a discussion about how hard attribution can be, and presenting our view concerning the future of this discipline.</p>
<p> </p>
<h2><a class="chapter" name="h2-introduction"></a>Introduction</h2>
<p>In February 2018, the Olympic Games in Pyeongchang, South Korea were disrupted by a cyber attack. Reportedly, the attack resulted in the official Olympic Games website being taken offline, meaning that spectators could not print their tickets. Media reporting at the opening ceremony of the Games was also impaired due to the Wi-Fi failing within the Olympic Media Centre. On 12 February, <em>Talos</em> published a blog post [1] detailing the functionality of the malware that we had identified with high confidence as having been used in the attack. We named the malware Olympic Destroyer.</p>
<p>This attack gained traction through the press, and several different media outlets published conflicting stories in relation to attribution.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/5915/3918/6986/olympic-destroyer-fig1.jpg" alt="olympic-destroyer-fig1.jpg" width="771" height="350" /><span class="centered-caption">Figure 1: Different media outlets published conflicting stories in relation to attribution.</span></p>
<p>In the first part of this paper we will provide technical details of Olympic Destroyer, the wiper involved in the case, and in the second part we will discuss the attribution. Indeed, the malware did not write itself, the incident did not happen by accident, but who was responsible?</p>
<p> </p>
<h2><a class="chapter" name="h2-part-one-technical-analysis"></a>Part one: technical analysis</h2>
<p> </p>
<h3><a class="chapter" name="h3-initial-sample"></a>Initial sample</h3>
<p>The initial sample (edb1ff2521fb4bf748111f92786d260d40407a2e8463dcd24bb09f908ee13eb9) is a binary that, when executed, drops multiple files onto the victim host. These files are embedded as obfuscated resources within the binary. The embedded files have randomly generated file names, however we found during our analysis that, when written to disk, the hashes of these files were the same on multiple instances. As a binary file, the initial sample could have been delivered in a multitude of ways – the most likely is via a spear phished email with Olympic Destroyer as a malicious attachment.</p>
<p>Two of the dropped files (the stealing modules) are executed with two arguments: 123 and a named pipe. The named pipe is used as a communication channel between the initial stage and the dropped executable. The same technique was used in BadRabbit and Nyetya.</p>
<p>The initial stage is responsible for propagation. Network discovery is performed using two techniques:</p>
<ul>
<li>Checking the ARP table with the <em>Windows</em> GetIPNetTable API</li>
<li>Using WMI (using WQL) with the request: <span class="monospace">SELECT ds_cn FROM ds_computer</span>. This request attempts to list all the systems within the current environment/directory.</li>
</ul>
<p>The network propagation is performed using PsExec and WMI (via the Win32_Process class). Figure 2 shows the code executed remotely.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/9915/3918/7125/olympic-destroyer-fig2.jpg" alt="olympic-destroyer-fig2.jpg" width="782" height="244" /><span class="centered-caption">Figure 2: Code executed remotely.</span></p>
<p>This code is responsible for leveraging cmd.exe to copy the initial stage to a remote system in <span class="monospace">%ProgramData%\%COMPUTERNAME%.exe</span> and executing it via a VBScript.</p>
<p>Lateral movement within an environment is achieved in a number of ways. Generally speaking, there will either be one or more exploits used to allow remote code execution without credentials or we will see credentials/tokens being used within a piece of malware. These credentials/tokens may either already be known or they may be harvested during infection. With Olympic Destroyer we see the use of on-the-fly patching for credentials. Olympic Destroyer obtains these credentials from the infected systems, both previously compromised and currently compromised, to hard code a set of credentials into the binary to allow lateral movement. The binary contains 32k bytes of space, located from offset 0x26F1A to offset 0x2EF1A, to allow for the patching of these credentials. <em>Talos</em> identified 44 unique credentials within the samples analysed relating to Olympic Destroyer.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/ddb536616f54f12feb7328a8015df78b_f3010.jpg" alt="olympic-destroyer-fig3.jpg" width="700" height="554" /><span class="centered-caption">Figure 3: Talos identified 44 unique credentials within the samples analysed.</span></p>
<p>The burning question is: how did Olympic Destroyer obtain those credentials? The embedded resources mentioned earlier contain a couple of different credential-stealing modules.</p>
<p> </p>
<h3><a class="chapter" name="h3-credential-harvesting"></a>Credential harvesting</h3>
<p>To obtain the credentials Olympic Destroyer uses a browser stealer and a system stealer. This means that Olympic Destroyer attempts to harvest both from the browsers and from the operating system on the victim machine.</p>
<p>Olympic Destroyer drops a browser credential stealer with the final payload embedded in an obfuscated resource. As mentioned previously, the sample must have two arguments to be executed. The stealer supports <em>Internet Explorer</em>, <em>Firefox</em> and <em>Chrome</em>. The malware parses the registry and queries the sqlite file in order to retrieve stored credentials. SQLite is embedded in the sample.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/2915/3918/7296/olympic-destroyer-fig4.jpg" alt="olympic-destroyer-fig4.jpg" width="741" height="353" /><span class="centered-caption">Figure 4: SQLite is embedded in the sample.</span></p>
<p>In addition to the browser credential stealer, Olympic Destroyer drops and executes a system stealer. The system stealer attempts to obtain credentials from LSASS with a technique similar to that used by <em>Mimikatz</em>. Figure 5 shows the output format parsed by the initial stage.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/6915/3918/7349/olympic-destroyer-fig5.jpg" alt="olympic-destroyer-fig5.jpg" width="783" height="257" /><span class="centered-caption">Figure 5: Output format parsed by the initial stage.</span></p>
<p>Using these two methods the malware is able to obtain additional credentials to support further lateral movement within the environment.</p>
<p> </p>
<h3><a class="chapter" name="h3-destruction"></a>Destruction</h3>
<p>The initial execution of the malware results in multiple files being written to disk, as discussed. Following this, the malware begins its destruction element. By leveraging cmd.exe from the host the malware first deletes all possible shadow copies on the system using vssadmin:</p>
<pre>C:\Windows\system32\cmd.exe /c c:\Windows\system32\vssadmin.exe delete shadows /all /quiet</pre>
<p>Next, once again leveraging cmd.exe on the host, we see the author using wbadmin.exe. For those not familiar with wbadmin, this is the replacement for ntbackup on modern operating systems:</p>
<pre>C:\Windows\system32\cmd.exe /c wbadmin.exe delete catalog -quiet</pre>
<p>This step is carried out to ensure that file recovery is not trivial – WBAdmin can be used to recover individual files, folders and even whole drives so this would be a very convenient tool for a sysadmin to use to aid recovery.</p>
<p>The next step the attacker takes in this destructive path is once again to leverage cmd.exe, but this time using bcdedit, a tool used for boot config data information, to ensure that the Windows recovery console does not attempt to repair anything on the host:</p>
<pre>C:\Windows\system32\cmd.exe /c bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures &amp; bcdedit /set {default} recoveryenabled no</pre>
<p>The attacker has now attempted to make recovery extremely difficult for any impacted hosts. To further cover the malware’s tracks and make analysis more difficult, the System &amp; Security <em>Windows</em> event log is deleted:</p>
<pre>C:\Windows\system32\cmd.exe /c wevtutil.exe cl System<br />C:\Windows\system32\cmd.exe /c wevtutil.exe cl Security</pre>
<p>Wiping all available methods of recovery shows that this attacker had no intention of leaving the infected machine useable. The purpose of this malware is to perform destruction of the host, leave the computer system offline, and wipe remote data. We can see these functions within the Olympic Destroyer sample in Figure 6.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/6915/3918/7442/olympic-destroyer-fig6.jpg" alt="olympic-destroyer-fig6.jpg" width="783" height="372" /><span class="centered-caption">Figure 6: The purpose of this malware is to perform destruction of the host, leave the computer system offline, and wipe remote data.</span></p>
<p>To finish its destructive phase Olympic Destroyer then disables all available <em>Windows</em> services.</p>
<p>The malware uses the ChangeServiceConfigW API to change the start type to 4 which means: ‘Disabled: Specifies that the service should not be started’ (see Figure 7).</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/9615/3918/7493/olympic-destroyer-fig7.jpg" alt="olympic-destroyer-fig7.jpg" width="437" height="667" /><span class="centered-caption">Figure 7: The malware uses the ChangeServiceConfigW API to change the start type to 4.</span></p>
<p>Additionally, the malware lists mapped file shares and for each share, it will wipe the writable files (using either uninitialized data or 0x00 depending on the file size). The purpose is to destroy the files as quickly as possible. With this method, the malware can cause as much disruption in as little time as possible.</p>
<p>Finally, after modifying all the system configuration, the destroyer shuts down the compromised system.</p>
<p> </p>
<h3><a class="chapter" name="h3-legitimate-file"></a>Legitimate file</h3>
<p>Olympic Destroyer also drops the legitimate, digitally signed, PsExec file in order to perform lateral movement. The use of this legitimate tool from <em>Microsoft</em> is an example of an attacker leveraging legitimate tools within their arsenal. Using legitimate tools like PsExec will save the adversary time by eliminating the need to write their own tooling. A free alternative they can wrap up within their malware is a much easier option in this instance.</p>
<p> </p>
<h3><a class="chapter" name="h3-global-workflow"></a>Global workflow</h3>
<p>Figure 8 presents a summary of the global workflow of the malware, starting with the initial stage (Winlogon.exe) and the different modules.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/3015/3918/7569/olympic-destroyer-fig8.jpg" alt="olympic-destroyer-fig8.jpg" width="748" height="362" /><span class="centered-caption">Figure 8: Summary of the global workflow.</span></p>
<p> </p>
<h2><a class="chapter" name="h2-part-two-attribution-or-who-wasnt-responsible"></a>Part two: attribution, or who wasn’t responsible</h2>
<p>Attributing attacks to specific malware writers or threat actor groups is neither simple nor an exact science. Many parameters must be considered, analysed and compared with previous attacks in order to identify similarities. As with any crime, cybercriminals have preferred techniques, and tend to leave behind traces, akin to digital fingerprints, which can be found and linked to other crimes.</p>
<p>In terms of cybersecurity incidents, analysts would look for similarities or attributes such as:</p>
<ul>
<li>Tactics, techniques and procedures (TTPs) (how the attacker conducted the attack)</li>
<li>Victimology (the profile of the victim)</li>
<li>Infrastructure (the platforms used as part of the attack)</li>
<li>Indicators of Compromise (IOCs) (identifiable artifacts left behind during an attack)</li>
<li>Malware samples (the malware used as part of the attack)</li>
</ul>
<p>One of the great things about software engineering is the ability to share code, to build applications on top of libraries written by others, and to learn from the successes and failures of other software engineers. The same is true for threat actors. Two different threat actors may use code from the same source in their attacks, meaning that their attacks would display similarities, despite being conducted by different groups. Sometimes threat actors choose to include features from another group in order to frustrate analysts and try to lead them to make a false attribution.</p>
<p>In the case of Olympic Destroyer, what is the evidence, and what conclusions can we draw regarding attribution?</p>
<p>Without contributions from traditional intelligence capacities, the available evidence linking the Olympic Destroyer malware to a specific threat actor group is contradictory, and does not allow for unambiguous attribution. The threat actor responsible for the attack has purposefully included evidence to frustrate analysts and lead researchers to false attribution flags. Attribution, while headline grabbing, is difficult. This must force one to question attribution that is purely software based.</p>
<p> </p>
<h3><a class="chapter" name="h3-olympic-destroyer-lineup-suspects"></a>Olympic Destroyer lineup of suspects</h3>
<h4><a class="chapter" name="h4-lazarus-group"></a>The Lazarus group</h4>
<p>The Lazarus group, also referred to as Group 77, is a sophisticated threat actor that has been associated with a number of attacks. Notably, a spinoff of Lazarus, referred to as the Bluenoroff group, has been identified as having conducted attacks against the SWIFT infrastructure in a bank located in Bangladesh.</p>
<p>The filename convention used in the SWIFT malware, as described by <em>BAE Systems</em> [2], was: evtdiag.exe, evtsys.exe and evtchk.bat.</p>
<p>The Olympic Destroyer malware checks for the existence of the following file: %programdata%\evtchk.txt.</p>
<p>There is a clear similarity in the two cases. This is nowhere near proof, but it is a clue, albeit a weak one.</p>
<p>Further clues are found in similarities between Olympic Destroyer and the wiper malware associated with Bluenoroff, again described by<em> BAE Systems</em> [3]. In the example shown in Figure 9, the Bluenoroff wiper is on the left, and the Olympic Destroyer wiper on the right.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/2815/3918/7685/olympic-destroyer-fig9.jpg" alt="olympic-destroyer-fig9.jpg" width="782" height="1670" /><span class="centered-caption">Figure 9: Left: Bluenoroff wiper; right: Olympic Destroyer wiper.</span></p>
<p>Clearly, the code is not identical, but the very specific logic of wiping only the first 0x1000 bytes of large files is identical and unique to the two cases. This is stronger evidence than the file name check.</p>
<p>However, both the file names used by Bluenoroff and the wiper function are documented and available to anyone. The real culprits could have added the file name check and mimicked the wiper function simply in order to implicate the Lazarus group and potentially distract from their true identity.</p>
<p>Olympic Destroyer sample: 23e5bb2369080a47df8284e666cac7cafc207f3472474a9149f88c1a4fd7a9b0</p>
<p>Bluenoroff sample #1: ae086350239380f56470c19d6a200f7d251c7422c7bc5ce74730ee8bab8e6283</p>
<p>Bluenoroff sample #2: 5b7c970fee7ebe08d50665f278d47d0e34c04acc19a91838de6a3fc63a8e5630</p>
<p><em>Kaspersky Lab</em> identified [4] another link between Olympic Destroyer and samples used for the SWIFT attacks. This link is located in the header of the samples. More specifically in the Rich header. Indeed, the Rich header of the Olympic Destroyer sample and Bluenoroff sample #1 are identical. The checksum (and XOR key) located after the ‘Rich’ magic value is exactly the same (see Figures 10 and 11).</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/6415/3918/7777/olympic-destroyer-fig10.jpg" alt="olympic-destroyer-fig10.jpg" width="696" height="316" /></p>
<p class="centered-caption">Figure 10: Olympic Destroyer. ae9a4e244a9b3c77d489dee8aeaf35a7c3ba31b210e76d81ef2e91790f052c85.</p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/7015/3918/7802/olympic-destroyer-fig11.jpg" alt="olympic-destroyer-fig11.jpg" width="696" height="316" /></p>
<p class="centered-caption">Figure 11: Bluenoroff. ae086350239380f56470c19d6a200f7d251c7422c7bc5ce74730ee8bab8e6283.</p>
<p>If we look at the information stored in this header, we can see that the compiler is Visual Studio 2003. This information is true concerning the Bluenoroff sample, however if we look closely at the Olympic Destroyer sample, it’s wrong: based on Universal C Runtime (CRT) Olympic Destroyer was compiled with Visual Studio 2010. The author simply copied and pasted the header from Bluenoroff to Olympic Destroyer. This action is strange and extremely specific – an actor has gone out of their way to perform this action. The tools using code similarities generally ignore the Rich header and only work on the subsequent code.</p>
<p> </p>
<h4><a class="chapter" name="h4-apt3-amp-apt10"></a>APT3 &amp; APT10</h4>
<p><em>Intezer Labs</em> [5] identified code sharing between Olympic Destroyer and malware used in attacks attributed to the APT3 and APT10 groups.</p>
<p><em>Intezer Labs</em> discovered that Olympic Destroyer shares 18.5% of its code with a tool used by APT3 to steal credentials from memory. Potentially, this is a very strong clue. However, the APT3 tool is, in turn, based on the open-source tool <em>Mimikatz</em>. Since <em>Mimikatz</em> is available for download by anyone, it is entirely possible that the author of Olympic Destroyer used code derived from <em>Mimikatz</em>, knowing that it had been used by other malware writers.</p>
<p><em>Intezer Labs</em> also spotted similarities in the function used by Olympic Destroyer to generate AES keys and that used by APT10. According to <em>Intezer Labs</em>, this particular function has only ever been used by APT10. Maybe the malware writer has let slip a possible vital clue to their identity.</p>
<p> </p>
<h4><a class="chapter" name="h4-nyetya"></a>Nyetya</h4>
<p>The use of code derived from <em>Mimikatz</em> to steal credentials was also seen in the Nyetya [6] (NotPetya) malware of June 2017. Like Nyetya, Olympic Destroyer spread laterally by abusing the legitimate functions of PsExec and WMI. Like Nyetya, Olympic Destroyer uses a named pipe to send stolen credentials to the main module.</p>
<p>Unlike Nyetya, Olympic Destroyer didn’t use the EternalBlue and EternalRomance exploits for propagation. However, the perpetrator has left artifacts within the Olympic Destroyer source code to insinuate the presence of SMB exploits.</p>
<p>Olympic Destroyer includes the definition of these four structures, as shown in Figure 12, that can also be found in the public EternalBlue proof of concept [7], as shown in Figure 13.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="/files/6215/3918/7917/olympic-destroyer-fig12.jpg" alt="olympic-destroyer-fig12.jpg" width="782" height="619" /><span class="centered-caption">Figure 12: Olympic Destroyer includes the definition of four structures that are also found in the EternalBlue proof of concept.</span></p>
<p><img class="framed" style="display: block; margin-left: auto; margin-right: auto;" src="/files/cache/7446b410d92b17bfe675969a013486d6_f3020.jpg" alt="olympic-destroyer-fig13.jpg" width="580" height="640" /><span class="centered-caption">Figure 13: Public EternalBlue proof of concept.</span></p>
<p>These structures are loaded during runtime, when Olympic Destroyer is executed, but remain unused. Clearly, the author knew of the EternalBlue PoC, but the reason why these structures are present is unclear. It’s likely the author wanted to lay a trap for security analysts to provoke a false attribution. Alternatively, we could be seeing the traces of functionality which never made it into the final malware.</p>
<p> </p>
<h2><a class="chapter" name="h2-conclusion"></a>Conclusion</h2>
<p>Attribution is hard. Rarely do analysts reach the level of evidence that would lead to a conviction in a courtroom. Many were quick to jump to conclusions, and to attribute Olympic Destroyer to specific groups. However, the basis for such accusations are frequently weak. Now that we are seeing malware authors placing multiple false flags in their code, attribution based on malware samples alone has become even more difficult.</p>
<p>For the threat actors considered, and with the evidence which we have available, there is no clear smoking gun indicating a guilty party. Other security analysts and investigative bodies may have further evidence to which we do not have access. Organizations with additional evidence, such as signal intelligence or human intelligence sources, which may provide significant clues to attribution, may be the least likely to share their insights so as not to betray the nature of their intelligence‑gathering operation.</p>
<p>The attack which we believe Olympic Destroyer to have been associated with was clearly an audacious one, almost certainly conducted by a threat actor with a certain level of sophistication who did not believe that they would easily be identified and held accountable.</p>
<p>Code sharing between threat actors is to be expected. Open‑source tools are a useful source of functionality, and adopting techniques from successful attacks conducted by other groups is likely to be a source of misleading evidence leading to false attribution.</p>
<p>Equally, we can expect sophisticated threat actors to take advantage of this, and to integrate ‘evidence’ into their code that is designed to fool analysts, leading the analysts to attribute the attacks to other groups. It is likely that, threat actors take pleasure in reading incorrect information published by security analysts. This could even be taken to the extreme of a country denying an attack based upon evidence presented by an unwitting third party due to false attribution. Every time there is misattribution it gives adversaries something to hide behind. In this heightened era of fake news, attribution is a highly sensitive issue.</p>
<p>As their skills and techniques evolve, it is likely that we will see threat actors further adopting ruses to complicate and confuse the process of attribution. Attribution is already difficult. It is unlikely to become easier.</p>
<p> </p>
<h2><a class="chapter" name="h2-references"></a>References</h2>
<p><a class=" anchor" name="ref1"></a>[1] Mercer, W.; Rascagneres, P. Olympic Destroyer Takes Aim At Winter Olympics. Talos Intelligence blog. 12 February 2018. <a href="https://blog.talosintelligence.com/2018/02/olympic-destroyer.html" target="_blank">https://blog.talosintelligence.com/2018/02/olympic-destroyer.html</a>.</p>
<p><a class=" anchor" name="ref2"></a>[2] Shevchenko, S. Two bytes to $951M. BAE Systems Threat Research Blog. 25 April 2016. <a href="https://baesystemsai.blogspot.com/2016/04/two-bytes-to-951m.html" target="_blank">https://baesystemsai.blogspot.com/2016/04/two-bytes-to-951m.html</a>.</p>
<p><a class=" anchor" name="ref3"></a>[3] Shevchenko, S. Cyber heist attribution. BAE Systems Threat Research Blog. 13 May 2016. <a href="https://baesystemsai.blogspot.com/2016/05/cyber-heist-attribution.html" target="_blank">https://baesystemsai.blogspot.com/2016/05/cyber-heist-attribution.html</a>.</p>
<p><a class=" anchor" name="ref4"></a>[4] The devil’s in the Rich header. Kaspersky Lab SecureList. 8 March 2018. <a href="https://securelist.com/the-devils-in-the-rich-header/84348/" target="_blank">https://securelist.com/the-devils-in-the-rich-header/84348/</a>.</p>
<p><a class=" anchor" name="ref5"></a>[5] Rosenberg, J. 2018 Winter Cyber Olympics: Code Similarities with Cyber Attacks in Pyeongchang. Intezer Blog Cybersecurity DNA. 12 February 2018. <a href="http://www.intezer.com/2018-winter-cyber-olympics-code-similarities-cyber-attacks-pyeongchang/" target="_blank">http://www.intezer.com/2018-winter-cyber-olympics-code-similarities-cyber-attacks-pyeongchang/</a>.</p>
<p><a class=" anchor" name="ref6"></a>[6] Chiu, A. New Ransomware Variant “Nyetya” Compromises Systems Worldwide. Talos Blog. 27 June 2017. <a href="https://blog.talosintelligence.com/2017/06/worldwide-ransomware-variant.html" target="_blank">https://blog.talosintelligence.com/2017/06/worldwide-ransomware-variant.html</a>.</p>
<p><a class=" anchor" name="ref7"></a>[7] GitHub. MS17-010/zzz_exploit.py. <a href="https://github.com/worawit/MS17-010/blob/master/zzz_exploit.py" target="_blank">https://github.com/worawit/MS17-010/blob/master/zzz_exploit.py</a>.</p> </div>
<div class="col-md-3 col-sm-3 col-lg-3">
<p><a href="/uploads/pdf/magazine/2018/VB2018-Rascagneres-Mercer.pdf" target="_blank"><img src="/uploads/images/buttons/pdf-download-button.jpg" alt="Download PDF" width="262" height="45" /></a></p>
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=VB2018 paper: Who wasn’t responsible for Olympic Destroyer&url=https://www.virusbulletin.com/virusbulletin/2018/10/vb2018-paper-who-wasnt-responsible-olympic-destroyer"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2018/10/vb2018-paper-who-wasnt-responsible-olympic-destroyer'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2018/10/vb2018-paper-who-wasnt-responsible-olympic-destroyer&title=VB2018 paper: Who wasn’t responsible for Olympic Destroyer"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2018/10/vb2018-paper-who-wasnt-responsible-olympic-destroyer&t=VB2018 paper: Who wasn’t responsible for Olympic Destroyer"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2018/10/vb2018-paper-who-wasnt-responsible-olympic-destroyer"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
</h3>
<div class="ccm-page-list-description">
TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
</h3>
<div class="ccm-page-list-description">
Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
</h3>
<div class="ccm-page-list-description">
In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
</h3>
<div class="ccm-page-list-description">
Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip; </div>
<h3 class="ccm-page-list-title">
<a href="/virusbulletin/2021/04/dissecting-design-and-vulnerabilities-azorultccpanels/" target="_self">Dissecting the design and vulnerabilities in AZORult&nbsp;C&amp;C&nbsp;panels</a>
</h3>
<div class="ccm-page-list-description">
Aditya K Sood looks at the command-and-control (C&amp;C) design of the AZORult malware, discussing his team's findings related to the C&amp;C design and some security issues they identified during the research. </div>
</div>
<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p> </div>
</div>
</div>

<footer class="bs-footer" role="contentinfo">
<div class="container">
<div class="bs-social">
<div class="row ">
<div class="col-md-3">
<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p> </div>
<div class="col-md-3">
<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb1001/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="VBWeb" href="/testing/vbweb/">VBWeb</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p> </div>
<div class="col-md-3">
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="VB2019" href="/conference/vb2019/">VB2019 (London)</a></p>
<p><a title="VB2018" href="/conference/vb2018">VB2018 (Montreal)</a></p>
<p><a title="VB2017" href="/conference/vb2017">VB2017 (Madrid)</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p> </div>
<div class="col-md-3">
<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div> </div>
</div>
<div class="row ">
<div class="col-md-12">
</div>
</div>
</div>
</div>
</footer>

<footer class="bs-footer2" role="contentinfo">
<div class="container">
<div class="bs-social2">
<div class="row ">
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
<div class="col-md-3">
</div>
</div>
<div class="row ">
<div class="col-md-12">
<p style="text-align: left;">©1989-2022 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p> </div>
</div>
</div>
</div>
</footer>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-21876594-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-21876594-2', { 'anonymize_ip': true });
</script><script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
<div class="disclosure-container">
<div class="disclosure-content">
<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
</div>
<div class="disclosure-form">
<form action="/index.php/cookies_disclosure/" method="POST">
<input type="hidden" name="allowCookies" value="1" />
<div class="button">
<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
</div>
</form>
</div>
<div class="ccm-spacer">&nbsp;</div>
</div>
</div>
</body>
</html>